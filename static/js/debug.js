(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

module.exports = {
	"caret-down": require('./views/templates/lib/caret-down'),
	"checkmark": require('./views/templates/lib/checkmark'),
	"edit": require('./views/templates/lib/edit'),
	"error": require('./views/templates/lib/error'),
	"ex": require('./views/templates/lib/ex'),
	"garbage": require('./views/templates/lib/garbage'),
	"justify": require('./views/templates/lib/justify'),
	"leftArrow": require('./views/templates/lib/leftArrow')
};

},{"./views/templates/lib/caret-down":186,"./views/templates/lib/checkmark":187,"./views/templates/lib/edit":188,"./views/templates/lib/error":189,"./views/templates/lib/ex":190,"./views/templates/lib/garbage":191,"./views/templates/lib/justify":192,"./views/templates/lib/leftArrow":193}],2:[function(require,module,exports){
'use strict';

module.exports = {
	About: require('./views/templates/About'),
	AddTransaction: require('./views/templates/AddTransaction'),
	AdminHeader: require('./views/templates/AdminHeader'),
	AdminPlus: require('./views/templates/AdminPlus'),
	ButtonFlow: require('./views/templates/ButtonFlow'),
	CollectionManager: require('./views/templates/CollectionManager'),
	Contact: require('./views/templates/Contact'),
	Csa: require('./views/templates/Csa'),
	CsaItem: require('./views/templates/CsaItem'),
	CsaTransaction: require('./views/templates/CsaTransaction'),
	CustomerInfo: require('./views/templates/CustomerInfo'),
	Deleter: require('./views/templates/Deleter'),
	DeliveryDate: require('./views/templates/DeliveryDate'),
	Document: require('./views/templates/Document'),
	Dragger: require('./views/templates/Dragger'),
	EditCsaTransaction: require('./views/templates/EditCsaTransaction'),
	FieldEdit: require('./views/templates/FieldEdit'),
	FoodOmission: require('./views/templates/FoodOmission'),
	Footer: require('./views/templates/Footer'),
	Form: require('./views/templates/Form'),
	GetInvolved: require('./views/templates/GetInvolved'),
	Header: require('./views/templates/Header'),
	Home: require('./views/templates/Home'),
	InfoWindow: require('./views/templates/InfoWindow'),
	List: require('./views/templates/List'),
	Location: require('./views/templates/Location'),
	Locations: require('./views/templates/Locations'),
	ManageCustomer: require('./views/templates/ManageCustomer'),
	MemberInfo: require('./views/templates/MemberInfo'),
	MemberTypeahead: require('./views/templates/MemberTypeahead'),
	Members: require('./views/templates/Members'),
	OrderOptions: require('./views/templates/OrderOptions'),
	Reporting: require('./views/templates/Reporting'),
	Seasons: require('./views/templates/Seasons'),
	ShareBox: require('./views/templates/ShareBox'),
	ShareExample: require('./views/templates/ShareExample'),
	SharePatch: require('./views/templates/SharePatch'),
	StaffProfile: require('./views/templates/StaffProfile'),
	Toast: require('./views/templates/Toast'),
	Transactions: require('./views/templates/Transactions'),
	WeekOptions: require('./views/templates/WeekOptions'),
	deliveryMatrix: require('./views/templates/deliveryMatrix')
};

},{"./views/templates/About":144,"./views/templates/AddTransaction":145,"./views/templates/AdminHeader":146,"./views/templates/AdminPlus":147,"./views/templates/ButtonFlow":148,"./views/templates/CollectionManager":149,"./views/templates/Contact":150,"./views/templates/Csa":151,"./views/templates/CsaItem":152,"./views/templates/CsaTransaction":153,"./views/templates/CustomerInfo":154,"./views/templates/Deleter":155,"./views/templates/DeliveryDate":156,"./views/templates/Document":157,"./views/templates/Dragger":158,"./views/templates/EditCsaTransaction":159,"./views/templates/FieldEdit":160,"./views/templates/FoodOmission":161,"./views/templates/Footer":162,"./views/templates/Form":163,"./views/templates/GetInvolved":164,"./views/templates/Header":165,"./views/templates/Home":166,"./views/templates/InfoWindow":167,"./views/templates/List":168,"./views/templates/Location":169,"./views/templates/Locations":170,"./views/templates/ManageCustomer":171,"./views/templates/MemberInfo":172,"./views/templates/MemberTypeahead":173,"./views/templates/Members":174,"./views/templates/OrderOptions":175,"./views/templates/Reporting":176,"./views/templates/Seasons":177,"./views/templates/ShareBox":178,"./views/templates/ShareExample":179,"./views/templates/SharePatch":180,"./views/templates/StaffProfile":181,"./views/templates/Toast":182,"./views/templates/Transactions":183,"./views/templates/WeekOptions":184,"./views/templates/deliveryMatrix":185}],3:[function(require,module,exports){
'use strict';

module.exports = {
	About: require('./views/About'),
	AddTransaction: require('./views/AddTransaction'),
	Admin: require('./views/Admin'),
	AdminHeader: require('./views/AdminHeader'),
	AdminPlus: require('./views/AdminPlus'),
	ButtonFlow: require('./views/ButtonFlow'),
	CollectionManager: require('./views/CollectionManager'),
	Contact: require('./views/Contact'),
	Csa: require('./views/Csa'),
	CustomerInfo: require('./views/CustomerInfo'),
	Deleter: require('./views/Deleter'),
	Dragger: require('./views/Dragger'),
	FoodOmission: require('./views/FoodOmission'),
	Footer: require('./views/Footer'),
	Form: require('./views/Form'),
	GetInvolved: require('./views/GetInvolved'),
	Header: require('./views/Header'),
	Home: require('./views/Home'),
	InstanceRow: require('./views/InstanceRow'),
	List: require('./views/List'),
	Locations: require('./views/Locations'),
	ManageCustomer: require('./views/ManageCustomer'),
	MemberTypeahead: require('./views/MemberTypeahead'),
	Members: require('./views/Members'),
	MyView: require('./views/MyView'),
	OrderOptions: require('./views/OrderOptions'),
	Reporting: require('./views/Reporting'),
	Resource: require('./views/Resource'),
	ResourceRow: require('./views/ResourceRow'),
	Seasons: require('./views/Seasons'),
	ShareBox: require('./views/ShareBox'),
	SharePatch: require('./views/SharePatch'),
	Signup: require('./views/Signup'),
	Submitter: require('./views/Submitter'),
	Toast: require('./views/Toast'),
	Transactions: require('./views/Transactions'),
	WeekOptions: require('./views/WeekOptions'),
	modal: require('./views/modal')
};

},{"./views/About":86,"./views/AddTransaction":87,"./views/Admin":88,"./views/AdminHeader":89,"./views/AdminPlus":90,"./views/ButtonFlow":91,"./views/CollectionManager":92,"./views/Contact":93,"./views/Csa":94,"./views/CustomerInfo":95,"./views/Deleter":96,"./views/Dragger":97,"./views/FoodOmission":98,"./views/Footer":99,"./views/Form":100,"./views/GetInvolved":101,"./views/Header":102,"./views/Home":103,"./views/InstanceRow":104,"./views/List":105,"./views/Locations":106,"./views/ManageCustomer":108,"./views/MemberTypeahead":109,"./views/Members":110,"./views/MyView":111,"./views/OrderOptions":112,"./views/Reporting":113,"./views/Resource":114,"./views/ResourceRow":115,"./views/Seasons":116,"./views/ShareBox":117,"./views/SharePatch":118,"./views/Signup":119,"./views/Submitter":120,"./views/Toast":121,"./views/Transactions":122,"./views/WeekOptions":123,"./views/modal":126}],4:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// JavaScript autoComplete v1.0.4
// https://github.com/Pixabay/JavaScript-autoComplete
var autoComplete = function () {
  function e(e) {
    function t(e, t) {
      return e.classList ? e.classList.contains(t) : new RegExp("\\b" + t + "\\b").test(e.className);
    }function o(e, t, o) {
      e.attachEvent ? e.attachEvent("on" + t, o) : e.addEventListener(t, o);
    }function s(e, t, o) {
      e.detachEvent ? e.detachEvent("on" + t, o) : e.removeEventListener(t, o);
    }function n(e, s, n, l) {
      o(l || document, s, function (o) {
        for (var s, l = o.target || o.srcElement; l && !(s = t(l, e));) {
          l = l.parentElement;
        }s && n.call(l, o);
      });
    }if (document.querySelector) {
      var l = { selector: 0, source: 0, minChars: 3, delay: 150, offsetLeft: 0, offsetTop: 1, cache: 1, menuClass: "", renderItem: function renderItem(e, t) {
          t = t.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");var o = new RegExp("(" + t.split(" ").join("|") + ")", "gi");return '<div class="autocomplete-suggestion" data-val="' + e + '">' + e.replace(o, "<b>$1</b>") + "</div>";
        }, onSelect: function onSelect() {} };for (var c in e) {
        e.hasOwnProperty(c) && (l[c] = e[c]);
      }for (var a = "object" == _typeof(l.selector) ? [l.selector] : document.querySelectorAll(l.selector), u = 0; u < a.length; u++) {
        var i = a[u];i.sc = document.createElement("div"), i.sc.className = "autocomplete-suggestions " + l.menuClass, i.autocompleteAttr = i.getAttribute("autocomplete"), i.setAttribute("autocomplete", "off"), i.cache = {}, i.last_val = "", i.updateSC = function (e, t) {
          var o = i.getBoundingClientRect();if (i.sc.style.left = Math.round(o.left + (window.pageXOffset || document.documentElement.scrollLeft) + l.offsetLeft) + "px", i.sc.style.top = Math.round(o.bottom + (window.pageYOffset || document.documentElement.scrollTop) + l.offsetTop) + "px", i.sc.style.width = Math.round(o.right - o.left) + "px", !e && (i.sc.style.display = "block", i.sc.maxHeight || (i.sc.maxHeight = parseInt((window.getComputedStyle ? getComputedStyle(i.sc, null) : i.sc.currentStyle).maxHeight)), i.sc.suggestionHeight || (i.sc.suggestionHeight = i.sc.querySelector(".autocomplete-suggestion").offsetHeight), i.sc.suggestionHeight)) if (t) {
            var s = i.sc.scrollTop,
                n = t.getBoundingClientRect().top - i.sc.getBoundingClientRect().top;n + i.sc.suggestionHeight - i.sc.maxHeight > 0 ? i.sc.scrollTop = n + i.sc.suggestionHeight + s - i.sc.maxHeight : 0 > n && (i.sc.scrollTop = n + s);
          } else i.sc.scrollTop = 0;
        }, o(window, "resize", i.updateSC), document.body.appendChild(i.sc), n("autocomplete-suggestion", "mouseleave", function () {
          var e = i.sc.querySelector(".autocomplete-suggestion.selected");e && setTimeout(function () {
            e.className = e.className.replace("selected", "");
          }, 20);
        }, i.sc), n("autocomplete-suggestion", "mouseover", function () {
          var e = i.sc.querySelector(".autocomplete-suggestion.selected");e && (e.className = e.className.replace("selected", "")), this.className += " selected";
        }, i.sc), n("autocomplete-suggestion", "mousedown", function (e) {
          if (t(this, "autocomplete-suggestion")) {
            var o = this.getAttribute("data-val");i.value = o, l.onSelect(e, o, this), i.sc.style.display = "none";
          }
        }, i.sc), i.blurHandler = function () {
          try {
            var e = document.querySelector(".autocomplete-suggestions:hover");
          } catch (t) {
            var e = 0;
          }e ? i !== document.activeElement && setTimeout(function () {
            i.focus();
          }, 20) : (i.last_val = i.value, i.sc.style.display = "none", setTimeout(function () {
            i.sc.style.display = "none";
          }, 350));
        }, o(i, "blur", i.blurHandler);var r = function r(e) {
          var t = i.value;if (i.cache[t] = e, e.length && t.length >= l.minChars) {
            for (var o = "", s = 0; s < e.length; s++) {
              o += l.renderItem(e[s], t);
            }i.sc.innerHTML = o, i.updateSC(0);
          } else i.sc.style.display = "none";
        };i.keydownHandler = function (e) {
          var t = window.event ? e.keyCode : e.which;if ((40 == t || 38 == t) && i.sc.innerHTML) {
            var o,
                s = i.sc.querySelector(".autocomplete-suggestion.selected");return s ? (o = 40 == t ? s.nextSibling : s.previousSibling, o ? (s.className = s.className.replace("selected", ""), o.className += " selected", i.value = o.getAttribute("data-val")) : (s.className = s.className.replace("selected", ""), i.value = i.last_val, o = 0)) : (o = 40 == t ? i.sc.querySelector(".autocomplete-suggestion") : i.sc.childNodes[i.sc.childNodes.length - 1], o.className += " selected", i.value = o.getAttribute("data-val")), i.updateSC(0, o), !1;
          }if (27 == t) i.value = i.last_val, i.sc.style.display = "none";else if (13 == t || 9 == t) {
            var s = i.sc.querySelector(".autocomplete-suggestion.selected");s && "none" != i.sc.style.display && (l.onSelect(e, s.getAttribute("data-val"), s), setTimeout(function () {
              i.sc.style.display = "none";
            }, 20));
          }
        }, o(i, "keydown", i.keydownHandler), i.keyupHandler = function (e) {
          var t = window.event ? e.keyCode : e.which;if (!t || (35 > t || t > 40) && 13 != t && 27 != t) {
            var o = i.value;if (o.length >= l.minChars) {
              if (o != i.last_val) {
                if (i.last_val = o, clearTimeout(i.timer), l.cache) {
                  if (o in i.cache) return void r(i.cache[o]);for (var s = 1; s < o.length - l.minChars; s++) {
                    var n = o.slice(0, o.length - s);if (n in i.cache && !i.cache[n].length) return void r([]);
                  }
                }i.timer = setTimeout(function () {
                  l.source(o, r);
                }, l.delay);
              }
            } else i.last_val = o, i.sc.style.display = "none";
          }
        }, o(i, "keyup", i.keyupHandler), i.focusHandler = function (e) {
          i.last_val = "\n", i.keyupHandler(e);
        }, l.minChars || o(i, "focus", i.focusHandler);
      }this.destroy = function () {
        for (var e = 0; e < a.length; e++) {
          var t = a[e];s(window, "resize", t.updateSC), s(t, "blur", t.blurHandler), s(t, "focus", t.focusHandler), s(t, "keydown", t.keydownHandler), s(t, "keyup", t.keyupHandler), t.autocompleteAttr ? t.setAttribute("autocomplete", t.autocompleteAttr) : t.removeAttribute("autocomplete"), document.body.removeChild(t.sc), t = null;
        }
      };
    }
  }return e;
}();!function () {
  "function" == typeof define && define.amd ? define("autoComplete", function () {
    return autoComplete;
  }) : "undefined" != typeof module && module.exports ? module.exports = autoComplete : window.autoComplete = autoComplete;
}();

},{}],5:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = {

    Currency: new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2
    }),

    GetFormField: function GetFormField(datum, value) {
        console.log('GetFormField');
        console.log(datum);
        console.log(value);
        var icon = datum.metadata ? datum.metadata.icon ? this.Icons[datum.metadata.icon] : '' : '';

        var options = datum.metadata ? datum.metadata.options : false;

        value = value === undefined ? '' : value;

        if (options) {
            if (typeof options === 'function') {
                options();return this.GetSelect(datum, [], icon);
            } else if (Array.isArray(options)) return this.GetSelect(datum, options, icon);
        }

        var label = datum.fk || datum.label ? '<label>' + (datum.fk || datum.label) + '</label>' : '';

        var image = datum.range === 'ImageUrl' ? '<div><button class="btn-yellow" data-js="previewBtn" type="button">Preview</button><img data-src="' + this.ImageSrc(value) + '" /></div>' : '';

        var input = datum.fk ? '<div data-view="typeAhead" data-name="' + datum.fk + '"></div>' : datum.range === 'Text' ? '<textarea data-js="' + datum.name + '" rows="3">' + value + '</textarea>' : datum.range === 'List' || _typeof(datum.range) === 'object' ? '<div data-js="' + datum.name + '" data-name="' + datum.name + '"></div>' : '<input type="' + this.RangeToInputType[datum.range] + '" data-js="' + datum.name + '" placeholder="' + (datum.label || '') + '" value="' + value + '" />';

        return '' + ('<div class="form-group ' + (image ? 'has-image' : '') + '">\n            ' + label + '\n            ' + input + '\n            ' + image + '\n            ' + icon + '\n        </div>');
    },
    GetFormFields: function GetFormFields(data) {
        var _this = this;

        var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!data) return '';

        return data.map(function (datum) {
            return _this.GetFormField(datum, model && model[datum.name]);
        }).join('');
    },
    GetIcon: function GetIcon(name, opts) {
        return Reflect.apply(this.Icons[name], this, [opts]);
    },
    GetListItems: function GetListItems() {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return items.map(function (item) {
            var attr = opts.dataAttr ? 'data-' + opts.dataAttr + '="' + item[opts.dataAttr] + '"' : '';
            return '<li ' + attr + '>' + (item.label || item) + '</li>';
        }).join('');
    },
    GetSelect: function GetSelect(datum, optionsData, icon) {
        var options = optionsData.length ? this.GetSelectOptions(optionsData, { valueAttr: 'name' }) : '';

        return '' + ('<div class="form-group">\n            <select data-js="' + datum.name + '">\n                <option selected value>' + datum.label + '</option>\n                ' + options + '\n            </select>\n            ' + icon + '\n        </div>');
    },
    GetSelectOptions: function GetSelectOptions() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { valueAttr: 'value' };

        return options.map(function (option) {
            return '<option value="' + option[opts.valueAttr] + '">' + option.label + '</option>';
        }).join('');
    },


    Icons: require('./.IconMap'),

    IconDataJs: function IconDataJs(p) {
        return p.name ? 'data-js="' + p.name + '"' : '';
    },
    ImageSrc: function ImageSrc(name) {
        return 'https://storage.googleapis.com/double-quill-3243/' + name;
    },
    ParseTextLinks: function ParseTextLinks(text) {
        var start = text.indexOf('{{'),
            end = void 0,
            rest = void 0,
            target = void 0,
            key = void 0,
            value = void 0,
            replacement = void 0;

        if (start === -1) return text;

        rest = text.slice(start);
        target = rest.slice(0, rest.indexOf('}') + 2);
        key = target.slice(2, target.indexOf(':'));
        value = target.slice(target.indexOf(':') + 1, target.indexOf('}'));

        replacement = /email/i.test(target) ? '<a href="mailto:' + value + '" class="link">' + key + '</a>' : /http/.test(value) ? '<a target="_blank" href="' + value + '" class="link">' + key + '</a>' : '<span data-js="link" data-name="' + value + '" class="link">' + key + '</span>';

        return this.ParseTextLinks(text.replace(target, replacement));
    },
    Range: function Range(int) {
        return Array.from(Array(int).keys());
    },


    RangeToInputType: {
        Email: 'email',
        ImageUrl: 'text',
        Password: 'password',
        String: 'text'
    }

};

},{"./.IconMap":1}],6:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyError = function MyError(err) {
    return this.handle(err);
};

_extends(MyError.prototype, {

    handle: function handle(err) {
        console.log(err.stack || err);
    }

});

module.exports = MyError;

},{}],7:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('../../lib/MyObject'), {

    Request: {
        constructor: function constructor(data) {
            var _this = this;

            var req = new XMLHttpRequest();

            return new Promise(function (resolve, reject) {

                req.onload = function () {
                    [500, 404, 401].includes(this.status) ? reject(this.response) : resolve(JSON.parse(this.response));
                };
                if (data.method === "get" || data.method === "options") {
                    var qs = data.qs ? "?" + data.qs : '';
                    req.open(data.method, "/" + data.resource + qs);
                    _this.setHeaders(req, data.headers);
                    req.send(null);
                } else {
                    var path = "/" + data.resource + (data.id ? "/" + data.id : '');
                    req.open(data.method.toUpperCase(), path, true);
                    _this.setHeaders(req, data.headers);
                    req.send(data.data || null);
                }
            });
        },
        plainEscape: function plainEscape(sText) {
            /* how should I treat a text/plain form encoding? what characters are not allowed? this is what I suppose...: */
            /* "4\3\7 - Einstein said E=mc2" ----> "4\\3\\7\ -\ Einstein\ said\ E\=mc2" */
            return sText.replace(/[\s\=\\]/g, "\\$&");
        },
        setHeaders: function setHeaders(req) {
            var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            req.setRequestHeader("Accept", headers.accept || 'application/json');
            req.setRequestHeader("Content-Type", headers.contentType || 'text/plain');
            Object.keys(headers).forEach(function (key) {
                return req.setRequestHeader(key, headers[key]);
            });
        }
    },

    _factory: function _factory(data) {
        return Object.create(this.Request, {}).constructor(data);
    },
    constructor: function constructor() {

        if (!XMLHttpRequest.prototype.sendAsBinary) {
            XMLHttpRequest.prototype.sendAsBinary = function (sData) {
                var nBytes = sData.length,
                    ui8Data = new Uint8Array(nBytes);
                for (var nIdx = 0; nIdx < nBytes; nIdx++) {
                    ui8Data[nIdx] = sData.charCodeAt(nIdx) & 0xff;
                }
                this.send(ui8Data);
            };
        }

        return this._factory.bind(this);
    }
}), {}).constructor();

},{"../../lib/MyObject":201}],8:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create({
    create: function create(rawName, opts) {
        var name = this._processName(rawName);

        return Object.create(this.Views[name], _extends({
            Dragger: { value: this.Dragger },
            Header: { value: this.Header },
            Toast: { value: this.Toast },
            documentName: { value: rawName },
            name: { value: name },
            factory: { value: this },
            range: { value: this.range },
            template: { value: this.Templates[name] },
            user: { value: this.User }
        })).constructor(opts);
    },
    _processName: function _processName(name) {
        var hyphen = name.indexOf('-');
        if (hyphen !== -1) return name.charAt(0).toUpperCase() + name.slice(1, hyphen) + name.charAt(hyphen + 1).toUpperCase() + name.slice(hyphen + 2);

        return name.charAt(0).toUpperCase() + name.slice(1);
    }
}, {
    Dragger: { value: require('../views/Dragger') },
    Header: { value: require('../views/Header') },
    Templates: { value: require('../.TemplateMap') },
    Toast: { value: require('../views/Toast') },
    User: { value: require('../models/User') },
    Views: { value: require('../.ViewMap') }
});

},{"../.TemplateMap":2,"../.ViewMap":3,"../models/User":42,"../views/Dragger":97,"../views/Header":102,"../views/Toast":121}],9:[function(require,module,exports){
'use strict';

var $ = require('jquery');

require('./polyfill');

window.$ = window.jQuery = $;
window.initGMap = function () {
    return true;
};

require('bootstrap');
require('./plugins/bootstrap-datetimepicker');

window.onload = function () {
    require('./router').initialize();
    require('./views/modal');
};

},{"./plugins/bootstrap-datetimepicker":44,"./polyfill":46,"./router":47,"./views/modal":126,"bootstrap":203,"jquery":"jquery"}],10:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    attributes: [{
        name: 'name',
        label: 'Name',
        range: 'String',
        error: 'Please enter a name with no spaces.',
        validate: function validate(val) {
            return val.trim() !== '' && !/\s/.test(val);
        },
        metadata: {}
    }],

    meta: {
        key: 'name'
    },

    resource: 'Collection'
});

},{"./__proto__":43}],11:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('./__proto__'), {

    data: {
        currentCollection: 'Views',
        currentView: ''
    }

}));

},{"./__proto__":43}],12:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('./__proto__'), {

    parse: function parse(response) {
        return response[0];
    }

}), { resource: { value: 'contactinfo' } });

},{"./__proto__":43}],13:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    dayOfWeekMap: require('./DayOfWeek'),

    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            return _extends(row, {
                dayOfWeek: _this.dayOfWeekMap[row.dayofweek],
                starttime: _this.moment([_this.moment().format('YYYY-MM-DD'), row.starttime].join(' ')).format('h:mmA'),
                endtime: _this.moment([_this.moment().format('YYYY-MM-DD'), row.endtime].join(' ')).format('h:mmA')
            });
        });
    },


    resource: "deliveryroute"

});

},{"./DayOfWeek":17,"./__proto__":43}],14:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    actions: ['Adjustment', 'Payment', 'Reimbursement', 'Season Signup'],

    attributes: ['action', 'value', 'checkNumber', 'created', 'description'],

    getBalance: function getBalance() {
        return this.data.reduce(function (memo, datum) {
            if (datum.action === 'Payment') memo -= datum.value;else memo += datum.value;
            return memo;
        }, 0);
    },
    isNegative: function isNegative(row) {
        if (row.action === 'Payment') return true;

        if (row.action === 'Adjustment' && row.value < 0) return true;
    },
    parse: function parse(response) {
        var _this = this;

        response = response.map(function (row) {
            return _this.parseOne(row);
        });

        if (this.sortAttr) response.sort(function (a, b) {
            return a[_this.sortAttr] > b[_this.sortAttr];
        });

        return response;
    },
    parseOne: function parseOne(datum) {
        return _extends(datum, { isNegative: this.isNegative(datum) }, { created: _typeof(datum.created) === 'object' ? datum.created.raw : datum.created });
    },


    resource: 'csaTransaction',

    sortAttr: 'created'

});

},{"./__proto__":43}],15:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    ShareGroupDropoffs: require('./ShareGroupDropoff'),

    getCurrentGroupDropoffs: function getCurrentGroupDropoffs() {
        var _this = this;

        return this.ShareGroupDropoffs.get({ query: {
                shareid: this.data.id,
                groupdropoffid: { operation: 'join', value: { table: 'groupdropoff', column: 'id' } }
            } }).then(function () {
            return Promise.resolve(_this.ShareGroupDropoffs.data.map(function (datum) {
                return _extends({
                    name: datum['groupdropoff.name'],
                    venue: datum['groupdropoff.venue'],
                    street: datum['groupdropoff.street'],
                    cityStateZip: datum['groupdropoff.cityStateZip'],
                    location: datum.location,
                    hours: datum.dayofweek + ' ' + datum.starttime + ' - ' + datum.endtime
                });
            }));
        });
    },
    getSizeOptions: function getSizeOptions() {
        return this.data.produceOptions.filter(function (option) {
            return (/size/i.test(option.prompt)
            );
        });
    },


    resource: 'currentShare'

});

},{"./ShareGroupDropoff":40,"./__proto__":43}],16:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Member: require('./Member'),
    Person: require('./Person'),

    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.');
                memo[key.slice(0, index)].data[key.slice(index + 1)] = row[key];
                return memo;
            }, { member: Object.create(_this.Member, { data: { value: {} } }),
                person: Object.create(_this.Person, { data: { value: {} } })
            });
        });
    },


    resource: 'person'

});

},{"./Member":29,"./Person":35,"./__proto__":43}],17:[function(require,module,exports){
'use strict';

module.exports = {
    0: 'Sunday',
    1: 'Monday',
    2: 'Tuesday',
    3: 'Wednesday',
    4: 'Thursday',
    5: 'Friday',
    6: 'Saturday'
};

},{}],18:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (!memo[table]) memo[table] = {};
                memo[table][key.slice(index + 1)] = row[key];
                return memo;
            }, {});
        });
    },


    resource: 'membersharedelivery'

});

},{"./__proto__":43}],19:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = require('backbone').Model.extend(_extends({}, require('../../../lib/MyObject').prototype, {
    parse: function parse(moment) {
        return {
            id: moment.dayOfYear(),
            date: moment.format('YYYY-MM-DD'),
            dayOfWeek: moment.format('ddd'),
            dayOfMonth: moment.format('D'),
            epoch: moment.unix(),
            month: moment.format('MMM'),
            monthNum: moment.format('M')
        };
    }
}));

},{"../../../lib/MyObject":201,"backbone":"backbone"}],20:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = require('backbone').Model.extend(_extends({}, require('../../../lib/MyObject').prototype, {

    dayOfWeekMap: require('./DayOfWeek'),

    parse: function parse(response) {
        return _extends(response, {

            dayOfWeek: this.dayOfWeekMap[response.dayofweek],
            starttime: this.moment([this.moment().format('YYYY-MM-DD'), response.starttime].join(' ')).format('h:mmA'),
            endtime: this.moment([this.moment().format('YYYY-MM-DD'), response.endtime].join(' ')).format('h:mmA')
        });
    },


    urlRoot: "/deliveryroute"
}));

},{"../../../lib/MyObject":201,"./DayOfWeek":17,"backbone":"backbone"}],21:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {

    attributes: {},

    data: {},

    meta: {
        key: '_id'
    },

    toList: function toList(document) {
        document = document || this.data;
        return Object.keys(document).sort().map(function (key) {
            return { key: key, value: document[key] };
        });
    },
    toObj: function toObj() {
        this.data = this.reducer(this.data, function (datum) {
            return _defineProperty({}, datum.key, datum.value);
        });
        return this;
    }
});

},{"./__proto__":43}],22:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = require('backbone').Model.extend(_extends({}, require('../../../lib/MyObject').prototype, {

    dayOfWeekMap: require('./DeliveryRoute').prototype.dayOfWeekMap,

    initialize: function initialize() {
        var _this = this;

        this.on('change:dayofweek', function () {
            return _this.updateReadableDay();
        });
    },
    updateReadableDay: function updateReadableDay() {
        this.set({ dayOfWeek: this.dayOfWeekMap[this.get('dayofweek')] });
    }
}));

},{"../../../lib/MyObject":201,"./DeliveryRoute":20,"backbone":"backbone"}],23:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    CsaDelivery: require('./CsaDelivery'),

    getHours: function getHours() {
        var _this = this;

        return this.CsaDelivery.get({ query: { label: 'farm' } }).then(function () {
            var farmPickup = _this.CsaDelivery.data[0];
            _this.data[0].hours = farmPickup.dayOfWeek + ' ' + farmPickup.starttime + ' - ' + farmPickup.endtime;
            return Promise.resolve();
        });
    },
    parse: function parse(response) {
        return response.map(function (row) {
            return _extends({
                name: 'Pick-up from our farm!',
                street: row.farmpickup.split(',')[0],
                cityStateZip: row.cityStateZip,
                location: JSON.parse(row.location).coordinates
            });
        });
    },


    resource: 'contactinfo'

});

},{"./CsaDelivery":13,"./__proto__":43}],24:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return row.location ? _extends(row, { location: JSON.parse(row.location).coordinates }) : row;
        });
    },


    resource: 'farmermarket'

});

},{"./__proto__":43}],25:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'food'

});

},{"./__proto__":43}],26:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = require('backbone').Model.extend({

    Moment: require('moment'),

    DayOfWeekHash: {
        0: 'Sunday',
        1: 'Monday',
        2: 'Tuesday',
        3: 'Wednesday',
        4: 'Thursday',
        5: 'Friday',
        6: 'Saturday'
    },

    parse: function parse(response) {
        var _this = this;

        Object.keys(response).forEach(function (key) {
            var isObject = _typeof(response[key]) === 'object' ? true : false;

            if (response[key] === null || isObject && response[key].raw === null) return;

            if (isObject && response[key].type === 'datetime') {
                response[key].value = _this.Moment(response[key].raw).format('dddd, MMMM Do YYYY, h:mm:ss a');
            }

            if (isObject && response[key].type === 'date') {
                response[key].value = _this.Moment(response[key].raw).format('dddd, MMMM Do YYYY');
            }

            if (isObject && response[key].type === 'time') {
                response[key].value = _this.Moment([_this.Moment().format('YYYY-MM-DD'), response[key].raw].join(' ')).format('h:mmA');
            }

            if (key === 'dayofweek') {
                response[key] = { raw: response[key], value: _this.DayOfWeekHash[response[key]] };
            }
        });

        return response;
    }
});

},{"backbone":"backbone","moment":"moment"}],27:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    attributes: [{
        default: function _default() {
            return 'key-' + new Date().getTime();
        },
        name: 'key',
        label: 'Key'
    }, {
        default: 'value',
        name: 'value',
        label: 'Value'
    }],

    data: {},

    isEditable: function isEditable(key) {
        return key !== '_id';
    }
});

},{"./__proto__":43}],28:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    attributes: [{ name: 'farmerMarket', el: 'farmerMarketsList', label: "Farmer's Market", color: '#ed1c24' }, { name: 'retailOutlet', el: 'retailOutletsList', label: 'Retail Outlet', color: '#ffdd14' }, { name: 'restaurant', el: 'restaurantsList', label: 'Restaurant', color: '#231f20' }, { name: 'groupLocation', el: 'groupLocationsList', label: 'Group Location', color: '#f8941e' }, { name: 'deliveryRange', label: 'Delivery Range', color: '#ed1c24' }, { name: 'farmPickup', el: 'groupLocationsList', label: 'Patchwork Gardens' }],

    data: {
        deliveryRangeCoords: [{ lat: 39.871435, lng: -84.367880 }, { lat: 39.901132, lng: -84.097279 }, { lat: 39.926834, lng: -83.806420 }, { lat: 39.813106, lng: -83.815755 }, { lat: 39.726784, lng: -83.788941 }, { lat: 39.615032, lng: -84.008702 }, { lat: 39.526260, lng: -84.088909 }, { lat: 39.542528, lng: -84.293660 }, { lat: 39.601278, lng: -84.369877 }]
    }

});

},{"./__proto__":43}],29:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'member'

});

},{"./__proto__":43}],30:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'memberfoodomission'

});

},{"./__proto__":43}],31:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            var startDate = _this.moment(row['share.startdate']),
                endDate = _this.moment(row['share.enddate']);

            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);

                if (table !== 'share') return memo;

                return _extends(memo, _defineProperty({}, key.slice(index + 1), row[key]), {
                    duration: Math.ceil(endDate.diff(startDate, 'days') / 7),
                    humanEnddate: endDate.format("MMM D"),
                    humanStartdate: startDate.format("MMM D")
                });
            }, { membershareid: row['membershare.id'] });
        });
    },


    resource: 'membershare'
});

},{"./__proto__":43}],32:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (table !== 'shareoptionoption') return memo;

                return _extends(memo, _defineProperty({}, key.slice(index + 1), row[key]));
            }, { shareoptionid: row['membershareoption.shareoptionid'], membershareoptionid: row['membershareoption.id'] });
        });
    },


    resource: 'membershareoption'
});

},{"./__proto__":43}],33:[function(require,module,exports){
'use strict';

module.exports = {
    data: [{ label: 'About', name: 'about' }, { label: 'CSA Program', name: 'csa' }, { label: 'Locations', name: 'locations' }, { label: 'Sign Up', name: 'sign-up' }, { label: 'Get Involved', name: 'get-involved' }, { label: 'Contact', name: 'contact' }]
};

},{}],34:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (table !== 'shareoption') return memo;

                return _extends(memo, _defineProperty({}, key.slice(index + 1), row[key]));
            }, {});
        });
    },


    resource: 'shareoptionshare'
});

},{"./__proto__":43}],35:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'person'

});

},{"./__proto__":43}],36:[function(require,module,exports){
"use strict";

module.exports = require('backbone').Model.extend({ idAttribute: "@id" });

},{"backbone":"backbone"}],37:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return row.location ? _extends(row, { location: JSON.parse(row.location).coordinates }) : row;
        });
    },


    resource: 'restaurant'

});

},{"./__proto__":43}],38:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return row.location ? _extends(row, { location: JSON.parse(row.location).coordinates }) : row;
        });
    },


    resource: 'retailoutlet'

});

},{"./__proto__":43}],39:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = require('backbone').Model.extend(_extends({}, require('../../../lib/MyObject').prototype, {

    Collection: require('backbone').Collection,

    DeliveryDate: require('./DeliveryDate'),

    Dropoff: require('./Dropoff'),

    dayOfWeekMap: require('./DeliveryRoute').prototype.dayOfWeekMap,

    determineNextDeliveryCutoff: function determineNextDeliveryCutoff(dayOfWeek) {
        var nextDeliveryDay = dayOfWeek > 4 ? 15 : 8;
        return this.moment().day(nextDeliveryDay).hour(0).minute(0).second(0).millisecond(0);
    },
    getDeliveryDates: function getDeliveryDates() {
        var dates = [],
            now = this.moment(),
            deliveryDay = this.get('selectedDelivery').dayofweek,
            deliveryDate = this.moment(this.get('startdate')),
            endDate = this.moment(this.get('enddate')),
            nextDeliveryCutoff = this.determineNextDeliveryCutoff(now.day()),
            startDay = startDay = deliveryDate.day();

        if (!Number.isInteger(deliveryDay)) return new this.Collection([]);

        while (startDay != deliveryDay) {
            deliveryDate.add(1, 'days');
            startDay = this.moment(deliveryDate).day();
        }

        while (endDate.diff(deliveryDate, 'days') >= 0) {
            var model = new this.DeliveryDate(deliveryDate, { parse: true });
            if (deliveryDate.diff(nextDeliveryCutoff) < 0) model.set({ unselectable: true });
            dates.push(model);
            deliveryDate.add(7, 'days');
        }

        this.set({ deliveryDates: new this.Collection(dates) });

        return this.get('deliveryDates');
    },
    getDeliveryOptions: function getDeliveryOptions() {
        var _this = this;

        if (this.has('deliveryoptions')) return this.Q(this.get('deliveryoptions'));

        return this.Q(new (this.Collection.extend({ url: "/sharedeliveryoption" }))().fetch({ data: { shareid: this.id } })).then(function (mappings) {
            var deliveryOptions = new (_this.Collection.extend({ url: "/deliveryoption" }))();

            _this.set({ deliveryoptions: deliveryOptions });

            if (mappings.length === 0) return _this.Q();

            return _this.Q(deliveryOptions.fetch({ data: { id: mappings.map(function (record) {
                        return record.deliveryoptionid;
                    }).join(',') } }));
        }).fail(function (e) {
            return console.log("Getting Delivery Options : " + e.stack || e);
        });
    },
    getGroupDropoffs: function getGroupDropoffs() {
        var _this2 = this;

        var mappings = new (this.Collection.extend({ url: "/sharegroupdropoff" }))();

        if (this.has('groupdropoffs')) return this.Q(this.get('groupdropoffs'));

        return this.Q(mappings.fetch({ data: { shareid: this.id } })).then(function () {
            var groupDropoffs;

            if (mappings.length === 0) return;

            groupDropoffs = new (_this2.Collection.extend({ model: _this2.Dropoff, url: "/groupdropoff" }))();
            _this2.set({ groupdropoffs: groupDropoffs });

            return _this2.Q(groupDropoffs.fetch({ data: { id: mappings.map(function (record) {
                        return record.get('groupdropoffid');
                    }).join(',') } }));
        }).then(function () {

            if (mappings.length === 0) return _this2.set('groupdropoffs', []);

            _this2.get('groupdropoffs').forEach(function (dropoff) {
                var mapping = mappings.find(function (model) {
                    return model.get('groupdropoffid') == dropoff.id;
                });

                dropoff.set({
                    dayofweek: mapping.get('dayofweek'),
                    starttime: _this2.timeToHumanTime(mapping.get('starttime')),
                    endtime: _this2.timeToHumanTime(mapping.get('endtime'))
                });
            });
        }).fail(function (e) {
            return console.log("Getting Group Dropoffs : " + e.stack || e);
        });
    },
    getSelectedDates: function getSelectedDates() {
        var _this3 = this;

        this.set({ selectedDates: this._(this.get('deliveryDates').reject(function (deliveryDay) {
                return deliveryDay.get('unselectable');
            })).reject(function (deliveryDay) {
                return _this3._(_this3.get('skipDays')).contains(deliveryDay.id);
            })
        });
    },
    getShareOptions: function getShareOptions() {
        var _this4 = this;

        if (this.has('shareoptions')) return this.Q(this.get('shareoptions'));

        return this.Q(new (this.Collection.extend({ url: "/shareoptionshare" }))().fetch({ data: { shareid: this.id } })).then(function (mappings) {
            var shareOptions;

            if (mappings.length === 0) return;

            shareOptions = new (_this4.Collection.extend({ url: "/shareoption" }))();
            _this4.set({ shareoptions: shareOptions });

            return _this4.Q(shareOptions.fetch({ data: { id: mappings.map(function (record) {
                        return record.shareoptionid;
                    }).join(',') } }));
        }).then(function () {
            return _this4.Q.all(_this4.get('shareoptions').map(function (shareOption) {
                shareOption.set({ options: new (_this4.Collection.extend({ comparator: _this4.shareOptionOptionComparator, url: "/shareoptionoption" }))() });
                return _this4.Q(shareOption.get('options').fetch({ data: { shareoptionid: shareOption.id } }));
            }));
        }).then(function () {
            _this4.get('shareoptions').comparator = _this4.shareOptionComparator;
            _this4.get('shareoptions').sort();
        }).fail(function (e) {
            return console.log("Getting Share Options : " + e.stack || e);
        });
    },
    moneyToFloat: function moneyToFloat(money) {
        return parseFloat(money.replace(/\$|,/g, ""));
    },
    parse: function parse(response) {
        var startDate = this.moment(response.startdate),
            endDate = this.moment(response.enddate);

        return _extends(response, {
            duration: Math.ceil(endDate.diff(startDate, 'days') / 7),
            humanEnddate: endDate.format("MMM D"),
            humanStartdate: startDate.format("MMM D"),
            startEpoch: startDate.unix()
        });
    },
    shareOptionComparator: function shareOptionComparator(a, b) {
        var moneyToFloat = function moneyToFloat(money) {
            return parseFloat(money.replace(/\$|,/g, ""));
        },
            aVal = moneyToFloat(a.get('options').at(a.get('options').length - 1).get('price')),
            bVal = moneyToFloat(b.get('options').at(b.get('options').length - 1).get('price'));

        return aVal > bVal ? -1 : bVal > aVal ? 1 : 0;
    },
    shareOptionOptionComparator: function shareOptionOptionComparator(a, b) {
        var moneyToFloat = function moneyToFloat(money) {
            return parseFloat(money.replace(/\$|,/g, ""));
        },
            aVal = moneyToFloat(a.get('price')),
            bVal = moneyToFloat(b.get('price'));

        return aVal > bVal ? 1 : bVal > aVal ? -1 : 0;
    },
    timeToHumanTime: function timeToHumanTime(time) {
        return this.moment(['2016-12-12', time].join(' ')).format('h:mmA');
    }
}));

},{"../../../lib/MyObject":201,"./DeliveryDate":19,"./DeliveryRoute":20,"./Dropoff":22,"backbone":"backbone"}],40:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    dayOfWeekMap: require('./DayOfWeek'),

    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            return _extends(row, {
                dayofweek: _this.dayOfWeekMap[row['sharegroupdropoff.dayofweek'] || row.dayofweek],
                starttime: _this.moment([_this.moment().format('YYYY-MM-DD'), row['sharegroupdropoff.starttime'] || row.starttime].join(' ')).format('h:mmA'),
                endtime: _this.moment([_this.moment().format('YYYY-MM-DD'), row['sharegroupdropoff.endtime'] || row.endtime].join(' ')).format('h:mmA'),
                location: row.location ? JSON.parse(row.location).coordinates : undefined
            });
        });
    },


    resource: 'sharegroupdropoff'

});

},{"./DayOfWeek":17,"./__proto__":43}],41:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'shareoptionoption'
});

},{"./__proto__":43}],42:[function(require,module,exports){
'use strict';

module.exports = new (require('backbone').Model.extend({

    defaults: { state: {} },

    isAdmin: function isAdmin() {
        var roles = this.get('roles');

        if (!Array.isArray(roles)) return false;

        return roles.includes('admin');
    },
    url: function url() {
        return "/user";
    }
}))();

},{"backbone":"backbone"}],43:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('../../../lib/Model'), require('events').EventEmitter.prototype, {

    Xhr: require('../Xhr'),

    add: function add(datum) {
        this.data.push(datum);

        if (this.storeBy) this._storeOne(datum);

        return this;
    },
    delete: function _delete() {
        var _this = this;

        var keyValue = this.data[this.meta.key];
        return this.Xhr({ method: 'DELETE', resource: this.resource, id: keyValue }).then(function () {
            var key = _this.meta.key;

            if (Array.isArray(_this.data)) {
                var datum = _this.data.find(function (datum) {
                    return datum[key] == keyValue;
                });

                if (_this.store) {
                    Object.keys(_this.store).forEach(function (attr) {
                        _this.store[attr][datum[attr]] = _this.store[attr][datum[attr]].filter(function (datum) {
                            return datum[key] != keyValue;
                        });
                        if (_this.store[attr][datum[attr]].length === 0) {
                            _this.store[attr][datum[attr]] = undefined;
                        }
                    });
                }

                _this.data = _this.data.filter(function (datum) {
                    return datum[key] != keyValue;
                });
            }

            return Promise.resolve(_this.data);
        });
    },
    get: function get() {
        var _this2 = this;

        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { query: {} };

        if (opts.query || this.pagination) _extends(opts.query, this.pagination);

        return this.Xhr({ method: opts.method || 'get', resource: this.resource, headers: this.headers || {}, qs: opts.query ? JSON.stringify(opts.query) : undefined }).then(function (response) {

            if (Array.isArray(_this2.data)) {
                _this2.data = _this2.data.concat(opts.parse ? opts.parse(response, opts.storeBy) : response);
            } else {
                if (opts.storeBy) _this2._resetStore(opts.storeBy);
                _this2.data = _this2.parse ? _this2.parse(response, opts.storeBy) : response;
                if (opts.storeBy) _this2._store();
            }

            _this2.emit('got');

            return Promise.resolve(response);
        });
    },
    getCount: function getCount() {
        var _this3 = this;

        return this.Xhr({ method: 'get', resource: this.resource, headers: this.headers || {}, qs: JSON.stringify({ countOnly: true }) }).then(function (_ref) {
            var result = _ref.result;

            _this3.meta.count = result;
            return Promise.resolve(result);
        });
    },
    git: function git(attr) {
        return this.data[attr];
    },
    moneyToReal: function moneyToReal(price) {
        return parseFloat(price.replace(/\$|,/g, ""));
    },
    patch: function patch(id, data) {
        var _this4 = this;

        return this.Xhr({ method: 'patch', id: id, resource: this.resource, headers: this.headers || {}, data: JSON.stringify(data || this.data) }).then(function (response) {

            if (Array.isArray(_this4.data)) {
                _this4.data = _this4.data ? _this4.data.concat(response) : [response];
                if (_this4.store) Object.keys(_this4.store).forEach(function (attr) {
                    return _this4._store(response, attr);
                });
            } else {
                _this4.data = response;
            }

            return Promise.resolve(response);
        });
    },
    _put: function _put(keyValue, data) {
        var _this5 = this;

        var item = this.data.find(function (datum) {
            return datum[_this5.meta.key] == keyValue;
        });
        if (item) item = data;
        return this;
    },
    put: function put(id, data) {
        var _this6 = this;

        return this.Xhr({ method: 'put', id: id, resource: this.resource, headers: this.headers || {}, data: JSON.stringify(data) }).then(function (response) {

            if (Array.isArray(_this6.data)) {} else {
                _this6.data = response;
            }

            return Promise.resolve(response);
        });
    },
    post: function post(model) {
        var _this7 = this;

        return this.Xhr({ method: 'post', resource: this.resource, headers: _extends({ v2: true }, this.headers || {}), data: JSON.stringify(model || this.data) }).then(function (response) {

            if (Array.isArray(_this7.data)) {
                _this7.data = _this7.data ? _this7.data.concat(response) : [response];
                if (_this7.store) Object.keys(_this7.store).forEach(function (attr) {
                    return _this7._store(response, attr);
                });
            } else {
                _this7.data = response;
            }

            return Promise.resolve(response);
        });
    },
    remove: function remove(item) {
        var index = this.data.findIndex(function (datum) {
            return JSON.stringify(datum) === JSON.stringify(item);
        });

        if (index === -1) return;

        this.data.splice(index, 1);
    },
    set: function set(attr, value) {
        this.data[attr] = value;
        this.emit(attr + 'Changed');
    },
    validate: function validate(data) {
        var _this8 = this;

        var valid = true;

        Object.keys(data).forEach(function (name) {
            var val = data[name],
                attribute = _this8.attributes.find(function (attr) {
                return attr.name === name;
            });

            if (attribute === undefined || !attribute.validate) {
                _this8.data[name] = val ? typeof val === 'string' ? val.trim() : val : undefined;
            } else if (valid && !_this8.validateDatum(attribute, val)) {
                _this8.emit('validationError', attribute);
                valid = false;
            } else if (_this8.validateDatum(attribute, val)) {
                _this8.data[name] = val.trim();
            }
        });

        return valid;
    },
    validateDatum: function validateDatum(attr, val) {
        return attr.validate.call(this, val.trim());
    }
});

},{"../../../lib/Model":199,"../Xhr":7,"events":217}],44:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! version : 4.17.37
 =========================================================
 bootstrap-datetimejs
 https://github.com/Eonasdan/bootstrap-datetimepicker
 Copyright (c) 2015 Jonathan Peterson
 =========================================================
 */
/*
 The MIT License (MIT)

 Copyright (c) 2015 Jonathan Peterson

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
/*global define:false */
/*global exports:false */
/*global require:false */
/*global jQuery:false */
/*global moment:false */
(function (factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        // AMD is used - Register as an anonymous module.
        define(['jquery', 'moment'], factory);
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        factory(require('jquery'), require('moment'));
    } else {
        // Neither AMD nor CommonJS used. Use global variables.
        if (typeof jQuery === 'undefined') {
            throw 'bootstrap-datetimepicker requires jQuery to be loaded first';
        }
        if (typeof moment === 'undefined') {
            throw 'bootstrap-datetimepicker requires Moment.js to be loaded first';
        }
        factory(jQuery, moment);
    }
})(function ($, moment) {
    'use strict';

    if (!moment) {
        throw new Error('bootstrap-datetimepicker requires Moment.js to be loaded first');
    }

    var dateTimePicker = function dateTimePicker(element, options) {
        var picker = {},
            date,
            viewDate,
            unset = true,
            input,
            component = false,
            widget = false,
            use24Hours,
            minViewModeNumber = 0,
            actualFormat,
            parseFormats,
            currentViewMode,
            datePickerModes = [{
            clsName: 'days',
            navFnc: 'M',
            navStep: 1
        }, {
            clsName: 'months',
            navFnc: 'y',
            navStep: 1
        }, {
            clsName: 'years',
            navFnc: 'y',
            navStep: 10
        }, {
            clsName: 'decades',
            navFnc: 'y',
            navStep: 100
        }],
            viewModes = ['days', 'months', 'years', 'decades'],
            verticalModes = ['top', 'bottom', 'auto'],
            horizontalModes = ['left', 'right', 'auto'],
            toolbarPlacements = ['default', 'top', 'bottom'],
            keyMap = {
            'up': 38,
            38: 'up',
            'down': 40,
            40: 'down',
            'left': 37,
            37: 'left',
            'right': 39,
            39: 'right',
            'tab': 9,
            9: 'tab',
            'escape': 27,
            27: 'escape',
            'enter': 13,
            13: 'enter',
            'pageUp': 33,
            33: 'pageUp',
            'pageDown': 34,
            34: 'pageDown',
            'shift': 16,
            16: 'shift',
            'control': 17,
            17: 'control',
            'space': 32,
            32: 'space',
            't': 84,
            84: 't',
            'delete': 46,
            46: 'delete'
        },
            keyState = {},


        /********************************************************************************
         *
         * Private functions
         *
         ********************************************************************************/
        getMoment = function getMoment(d) {
            var tzEnabled = false,
                returnMoment,
                currentZoneOffset,
                incomingZoneOffset,
                timeZoneIndicator,
                dateWithTimeZoneInfo;

            if (moment.tz !== undefined && options.timeZone !== undefined && options.timeZone !== null && options.timeZone !== '') {
                tzEnabled = true;
            }
            if (d === undefined || d === null) {
                if (tzEnabled) {
                    returnMoment = moment().tz(options.timeZone).startOf('d');
                } else {
                    returnMoment = moment().startOf('d');
                }
            } else {
                if (tzEnabled) {
                    currentZoneOffset = moment().tz(options.timeZone).utcOffset();
                    incomingZoneOffset = moment(d, parseFormats, options.useStrict).utcOffset();
                    if (incomingZoneOffset !== currentZoneOffset) {
                        timeZoneIndicator = moment().tz(options.timeZone).format('Z');
                        dateWithTimeZoneInfo = moment(d, parseFormats, options.useStrict).format('YYYY-MM-DD[T]HH:mm:ss') + timeZoneIndicator;
                        returnMoment = moment(dateWithTimeZoneInfo, parseFormats, options.useStrict).tz(options.timeZone);
                    } else {
                        returnMoment = moment(d, parseFormats, options.useStrict).tz(options.timeZone);
                    }
                } else {
                    returnMoment = moment(d, parseFormats, options.useStrict);
                }
            }
            return returnMoment;
        },
            isEnabled = function isEnabled(granularity) {
            if (typeof granularity !== 'string' || granularity.length > 1) {
                throw new TypeError('isEnabled expects a single character string parameter');
            }
            switch (granularity) {
                case 'y':
                    return actualFormat.indexOf('Y') !== -1;
                case 'M':
                    return actualFormat.indexOf('M') !== -1;
                case 'd':
                    return actualFormat.toLowerCase().indexOf('d') !== -1;
                case 'h':
                case 'H':
                    return actualFormat.toLowerCase().indexOf('h') !== -1;
                case 'm':
                    return actualFormat.indexOf('m') !== -1;
                case 's':
                    return actualFormat.indexOf('s') !== -1;
                default:
                    return false;
            }
        },
            hasTime = function hasTime() {
            return isEnabled('h') || isEnabled('m') || isEnabled('s');
        },
            hasDate = function hasDate() {
            return isEnabled('y') || isEnabled('M') || isEnabled('d');
        },
            getDatePickerTemplate = function getDatePickerTemplate() {
            var headTemplate = $('<thead>').append($('<tr>').append($('<th>').addClass('prev').attr('data-action', 'previous').append($('<span>').addClass(options.icons.previous))).append($('<th>').addClass('picker-switch').attr('data-action', 'pickerSwitch').attr('colspan', options.calendarWeeks ? '6' : '5')).append($('<th>').addClass('next').attr('data-action', 'next').append($('<span>').addClass(options.icons.next)))),
                contTemplate = $('<tbody>').append($('<tr>').append($('<td>').attr('colspan', options.calendarWeeks ? '8' : '7')));

            return [$('<div>').addClass('datepicker-days').append($('<table>').addClass('table-condensed').append(headTemplate).append($('<tbody>'))), $('<div>').addClass('datepicker-months').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone())), $('<div>').addClass('datepicker-years').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone())), $('<div>').addClass('datepicker-decades').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone()))];
        },
            getTimePickerMainTemplate = function getTimePickerMainTemplate() {
            var topRow = $('<tr>'),
                middleRow = $('<tr>'),
                bottomRow = $('<tr>');

            if (isEnabled('h')) {
                topRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.incrementHour }).addClass('btn').attr('data-action', 'incrementHours').append($('<span>').addClass(options.icons.up))));
                middleRow.append($('<td>').append($('<span>').addClass('timepicker-hour').attr({ 'data-time-component': 'hours', 'title': options.tooltips.pickHour }).attr('data-action', 'showHours')));
                bottomRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.decrementHour }).addClass('btn').attr('data-action', 'decrementHours').append($('<span>').addClass(options.icons.down))));
            }
            if (isEnabled('m')) {
                if (isEnabled('h')) {
                    topRow.append($('<td>').addClass('separator'));
                    middleRow.append($('<td>').addClass('separator').html(':'));
                    bottomRow.append($('<td>').addClass('separator'));
                }
                topRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.incrementMinute }).addClass('btn').attr('data-action', 'incrementMinutes').append($('<span>').addClass(options.icons.up))));
                middleRow.append($('<td>').append($('<span>').addClass('timepicker-minute').attr({ 'data-time-component': 'minutes', 'title': options.tooltips.pickMinute }).attr('data-action', 'showMinutes')));
                bottomRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.decrementMinute }).addClass('btn').attr('data-action', 'decrementMinutes').append($('<span>').addClass(options.icons.down))));
            }
            if (isEnabled('s')) {
                if (isEnabled('m')) {
                    topRow.append($('<td>').addClass('separator'));
                    middleRow.append($('<td>').addClass('separator').html(':'));
                    bottomRow.append($('<td>').addClass('separator'));
                }
                topRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.incrementSecond }).addClass('btn').attr('data-action', 'incrementSeconds').append($('<span>').addClass(options.icons.up))));
                middleRow.append($('<td>').append($('<span>').addClass('timepicker-second').attr({ 'data-time-component': 'seconds', 'title': options.tooltips.pickSecond }).attr('data-action', 'showSeconds')));
                bottomRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.decrementSecond }).addClass('btn').attr('data-action', 'decrementSeconds').append($('<span>').addClass(options.icons.down))));
            }

            if (!use24Hours) {
                topRow.append($('<td>').addClass('separator'));
                middleRow.append($('<td>').append($('<button>').addClass('btn btn-primary').attr({ 'data-action': 'togglePeriod', tabindex: '-1', 'title': options.tooltips.togglePeriod })));
                bottomRow.append($('<td>').addClass('separator'));
            }

            return $('<div>').addClass('timepicker-picker').append($('<table>').addClass('table-condensed').append([topRow, middleRow, bottomRow]));
        },
            getTimePickerTemplate = function getTimePickerTemplate() {
            var hoursView = $('<div>').addClass('timepicker-hours').append($('<table>').addClass('table-condensed')),
                minutesView = $('<div>').addClass('timepicker-minutes').append($('<table>').addClass('table-condensed')),
                secondsView = $('<div>').addClass('timepicker-seconds').append($('<table>').addClass('table-condensed')),
                ret = [getTimePickerMainTemplate()];

            if (isEnabled('h')) {
                ret.push(hoursView);
            }
            if (isEnabled('m')) {
                ret.push(minutesView);
            }
            if (isEnabled('s')) {
                ret.push(secondsView);
            }

            return ret;
        },
            getToolbar = function getToolbar() {
            var row = [];
            if (options.showTodayButton) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'today', 'title': options.tooltips.today }).append($('<span>').addClass(options.icons.today))));
            }
            if (!options.sideBySide && hasDate() && hasTime()) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'togglePicker', 'title': options.tooltips.selectTime }).append($('<span>').addClass(options.icons.time))));
            }
            if (options.showClear) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'clear', 'title': options.tooltips.clear }).append($('<span>').addClass(options.icons.clear))));
            }
            if (options.showClose) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'close', 'title': options.tooltips.close }).append($('<span>').addClass(options.icons.close))));
            }
            return $('<table>').addClass('table-condensed').append($('<tbody>').append($('<tr>').append(row)));
        },
            getTemplate = function getTemplate() {
            var template = $('<div>').addClass('bootstrap-datetimepicker-widget dropdown-menu'),
                dateView = $('<div>').addClass('datepicker').append(getDatePickerTemplate()),
                timeView = $('<div>').addClass('timepicker').append(getTimePickerTemplate()),
                content = $('<ul>').addClass('list-unstyled'),
                toolbar = $('<li>').addClass('picker-switch' + (options.collapse ? ' accordion-toggle' : '')).append(getToolbar());

            if (options.inline) {
                template.removeClass('dropdown-menu');
            }

            if (use24Hours) {
                template.addClass('usetwentyfour');
            }
            if (isEnabled('s') && !use24Hours) {
                template.addClass('wider');
            }

            if (options.sideBySide && hasDate() && hasTime()) {
                template.addClass('timepicker-sbs');
                if (options.toolbarPlacement === 'top') {
                    template.append(toolbar);
                }
                template.append($('<div>').addClass('row').append(dateView.addClass('col-md-6')).append(timeView.addClass('col-md-6')));
                if (options.toolbarPlacement === 'bottom') {
                    template.append(toolbar);
                }
                return template;
            }

            if (options.toolbarPlacement === 'top') {
                content.append(toolbar);
            }
            if (hasDate()) {
                content.append($('<li>').addClass(options.collapse && hasTime() ? 'collapse in' : '').append(dateView));
            }
            if (options.toolbarPlacement === 'default') {
                content.append(toolbar);
            }
            if (hasTime()) {
                content.append($('<li>').addClass(options.collapse && hasDate() ? 'collapse' : '').append(timeView));
            }
            if (options.toolbarPlacement === 'bottom') {
                content.append(toolbar);
            }
            return template.append(content);
        },
            dataToOptions = function dataToOptions() {
            var eData,
                dataOptions = {};

            if (element.is('input') || options.inline) {
                eData = element.data();
            } else {
                eData = element.find('input').data();
            }

            if (eData.dateOptions && eData.dateOptions instanceof Object) {
                dataOptions = $.extend(true, dataOptions, eData.dateOptions);
            }

            $.each(options, function (key) {
                var attributeName = 'date' + key.charAt(0).toUpperCase() + key.slice(1);
                if (eData[attributeName] !== undefined) {
                    dataOptions[key] = eData[attributeName];
                }
            });
            return dataOptions;
        },
            place = function place() {
            var position = (component || element).position(),
                offset = (component || element).offset(),
                vertical = options.widgetPositioning.vertical,
                horizontal = options.widgetPositioning.horizontal,
                parent;

            if (options.widgetParent) {
                parent = options.widgetParent.append(widget);
            } else if (element.is('input')) {
                parent = element.after(widget).parent();
            } else if (options.inline) {
                parent = element.append(widget);
                return;
            } else {
                parent = element;
                element.children().first().after(widget);
            }

            // Top and bottom logic
            if (vertical === 'auto') {
                if (offset.top + widget.height() * 1.5 >= $(window).height() + $(window).scrollTop() && widget.height() + element.outerHeight() < offset.top) {
                    vertical = 'top';
                } else {
                    vertical = 'bottom';
                }
            }

            // Left and right logic
            if (horizontal === 'auto') {
                if (parent.width() < offset.left + widget.outerWidth() / 2 && offset.left + widget.outerWidth() > $(window).width()) {
                    horizontal = 'right';
                } else {
                    horizontal = 'left';
                }
            }

            if (vertical === 'top') {
                widget.addClass('top').removeClass('bottom');
            } else {
                widget.addClass('bottom').removeClass('top');
            }

            if (horizontal === 'right') {
                widget.addClass('pull-right');
            } else {
                widget.removeClass('pull-right');
            }

            // find the first parent element that has a relative css positioning
            if (parent.css('position') !== 'relative') {
                parent = parent.parents().filter(function () {
                    return $(this).css('position') === 'relative';
                }).first();
            }

            if (parent.length === 0) {
                throw new Error('datetimepicker component should be placed within a relative positioned container');
            }

            widget.css({
                top: vertical === 'top' ? 'auto' : position.top + element.outerHeight(),
                bottom: vertical === 'top' ? position.top + element.outerHeight() : 'auto',
                left: horizontal === 'left' ? parent === element ? 0 : position.left : 'auto',
                right: horizontal === 'left' ? 'auto' : parent.outerWidth() - element.outerWidth() - (parent === element ? 0 : position.left)
            });
        },
            notifyEvent = function notifyEvent(e) {
            if (e.type === 'dp.change' && (e.date && e.date.isSame(e.oldDate) || !e.date && !e.oldDate)) {
                return;
            }
            element.trigger(e);
        },
            viewUpdate = function viewUpdate(e) {
            if (e === 'y') {
                e = 'YYYY';
            }
            notifyEvent({
                type: 'dp.update',
                change: e,
                viewDate: viewDate.clone()
            });
        },
            showMode = function showMode(dir) {
            if (!widget) {
                return;
            }
            if (dir) {
                currentViewMode = Math.max(minViewModeNumber, Math.min(3, currentViewMode + dir));
            }
            widget.find('.datepicker > div').hide().filter('.datepicker-' + datePickerModes[currentViewMode].clsName).show();
        },
            fillDow = function fillDow() {
            var row = $('<tr>'),
                currentDate = viewDate.clone().startOf('w').startOf('d');

            if (options.calendarWeeks === true) {
                row.append($('<th>').addClass('cw').text('#'));
            }

            while (currentDate.isBefore(viewDate.clone().endOf('w'))) {
                row.append($('<th>').addClass('dow').text(currentDate.format('dd')));
                currentDate.add(1, 'd');
            }
            widget.find('.datepicker-days thead').append(row);
        },
            isInDisabledDates = function isInDisabledDates(testDate) {
            return options.disabledDates[testDate.format('YYYY-MM-DD')] === true;
        },
            isInEnabledDates = function isInEnabledDates(testDate) {
            return options.enabledDates[testDate.format('YYYY-MM-DD')] === true;
        },
            isInDisabledHours = function isInDisabledHours(testDate) {
            return options.disabledHours[testDate.format('H')] === true;
        },
            isInEnabledHours = function isInEnabledHours(testDate) {
            return options.enabledHours[testDate.format('H')] === true;
        },
            isValid = function isValid(targetMoment, granularity) {
            if (!targetMoment.isValid()) {
                return false;
            }
            if (options.disabledDates && granularity === 'd' && isInDisabledDates(targetMoment)) {
                return false;
            }
            if (options.enabledDates && granularity === 'd' && !isInEnabledDates(targetMoment)) {
                return false;
            }
            if (options.minDate && targetMoment.isBefore(options.minDate, granularity)) {
                return false;
            }
            if (options.maxDate && targetMoment.isAfter(options.maxDate, granularity)) {
                return false;
            }
            if (options.daysOfWeekDisabled && granularity === 'd' && options.daysOfWeekDisabled.indexOf(targetMoment.day()) !== -1) {
                return false;
            }
            if (options.disabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && isInDisabledHours(targetMoment)) {
                return false;
            }
            if (options.enabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && !isInEnabledHours(targetMoment)) {
                return false;
            }
            if (options.disabledTimeIntervals && (granularity === 'h' || granularity === 'm' || granularity === 's')) {
                var found = false;
                $.each(options.disabledTimeIntervals, function () {
                    if (targetMoment.isBetween(this[0], this[1])) {
                        found = true;
                        return false;
                    }
                });
                if (found) {
                    return false;
                }
            }
            return true;
        },
            fillMonths = function fillMonths() {
            var spans = [],
                monthsShort = viewDate.clone().startOf('y').startOf('d');
            while (monthsShort.isSame(viewDate, 'y')) {
                spans.push($('<span>').attr('data-action', 'selectMonth').addClass('month').text(monthsShort.format('MMM')));
                monthsShort.add(1, 'M');
            }
            widget.find('.datepicker-months td').empty().append(spans);
        },
            updateMonths = function updateMonths() {
            var monthsView = widget.find('.datepicker-months'),
                monthsViewHeader = monthsView.find('th'),
                months = monthsView.find('tbody').find('span');

            monthsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevYear);
            monthsViewHeader.eq(1).attr('title', options.tooltips.selectYear);
            monthsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextYear);

            monthsView.find('.disabled').removeClass('disabled');

            if (!isValid(viewDate.clone().subtract(1, 'y'), 'y')) {
                monthsViewHeader.eq(0).addClass('disabled');
            }

            monthsViewHeader.eq(1).text(viewDate.year());

            if (!isValid(viewDate.clone().add(1, 'y'), 'y')) {
                monthsViewHeader.eq(2).addClass('disabled');
            }

            months.removeClass('active');
            if (date.isSame(viewDate, 'y') && !unset) {
                months.eq(date.month()).addClass('active');
            }

            months.each(function (index) {
                if (!isValid(viewDate.clone().month(index), 'M')) {
                    $(this).addClass('disabled');
                }
            });
        },
            updateYears = function updateYears() {
            var yearsView = widget.find('.datepicker-years'),
                yearsViewHeader = yearsView.find('th'),
                startYear = viewDate.clone().subtract(5, 'y'),
                endYear = viewDate.clone().add(6, 'y'),
                html = '';

            yearsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevDecade);
            yearsViewHeader.eq(1).attr('title', options.tooltips.selectDecade);
            yearsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextDecade);

            yearsView.find('.disabled').removeClass('disabled');

            if (options.minDate && options.minDate.isAfter(startYear, 'y')) {
                yearsViewHeader.eq(0).addClass('disabled');
            }

            yearsViewHeader.eq(1).text(startYear.year() + '-' + endYear.year());

            if (options.maxDate && options.maxDate.isBefore(endYear, 'y')) {
                yearsViewHeader.eq(2).addClass('disabled');
            }

            while (!startYear.isAfter(endYear, 'y')) {
                html += '<span data-action="selectYear" class="year' + (startYear.isSame(date, 'y') && !unset ? ' active' : '') + (!isValid(startYear, 'y') ? ' disabled' : '') + '">' + startYear.year() + '</span>';
                startYear.add(1, 'y');
            }

            yearsView.find('td').html(html);
        },
            updateDecades = function updateDecades() {
            var decadesView = widget.find('.datepicker-decades'),
                decadesViewHeader = decadesView.find('th'),
                startDecade = moment({ y: viewDate.year() - viewDate.year() % 100 - 1 }),
                endDecade = startDecade.clone().add(100, 'y'),
                startedAt = startDecade.clone(),
                html = '';

            decadesViewHeader.eq(0).find('span').attr('title', options.tooltips.prevCentury);
            decadesViewHeader.eq(2).find('span').attr('title', options.tooltips.nextCentury);

            decadesView.find('.disabled').removeClass('disabled');

            if (startDecade.isSame(moment({ y: 1900 })) || options.minDate && options.minDate.isAfter(startDecade, 'y')) {
                decadesViewHeader.eq(0).addClass('disabled');
            }

            decadesViewHeader.eq(1).text(startDecade.year() + '-' + endDecade.year());

            if (startDecade.isSame(moment({ y: 2000 })) || options.maxDate && options.maxDate.isBefore(endDecade, 'y')) {
                decadesViewHeader.eq(2).addClass('disabled');
            }

            while (!startDecade.isAfter(endDecade, 'y')) {
                html += '<span data-action="selectDecade" class="decade' + (startDecade.isSame(date, 'y') ? ' active' : '') + (!isValid(startDecade, 'y') ? ' disabled' : '') + '" data-selection="' + (startDecade.year() + 6) + '">' + (startDecade.year() + 1) + ' - ' + (startDecade.year() + 12) + '</span>';
                startDecade.add(12, 'y');
            }
            html += '<span></span><span></span><span></span>'; //push the dangling block over, at least this way it's even

            decadesView.find('td').html(html);
            decadesViewHeader.eq(1).text(startedAt.year() + 1 + '-' + startDecade.year());
        },
            fillDate = function fillDate() {
            var daysView = widget.find('.datepicker-days'),
                daysViewHeader = daysView.find('th'),
                currentDate,
                html = [],
                row,
                clsName,
                i;

            if (!hasDate()) {
                return;
            }

            daysViewHeader.eq(0).find('span').attr('title', options.tooltips.prevMonth);
            daysViewHeader.eq(1).attr('title', options.tooltips.selectMonth);
            daysViewHeader.eq(2).find('span').attr('title', options.tooltips.nextMonth);

            daysView.find('.disabled').removeClass('disabled');
            daysViewHeader.eq(1).text(viewDate.format(options.dayViewHeaderFormat));

            if (!isValid(viewDate.clone().subtract(1, 'M'), 'M')) {
                daysViewHeader.eq(0).addClass('disabled');
            }
            if (!isValid(viewDate.clone().add(1, 'M'), 'M')) {
                daysViewHeader.eq(2).addClass('disabled');
            }

            currentDate = viewDate.clone().startOf('M').startOf('w').startOf('d');

            for (i = 0; i < 42; i++) {
                //always display 42 days (should show 6 weeks)
                if (currentDate.weekday() === 0) {
                    row = $('<tr>');
                    if (options.calendarWeeks) {
                        row.append('<td class="cw">' + currentDate.week() + '</td>');
                    }
                    html.push(row);
                }
                clsName = '';
                if (currentDate.isBefore(viewDate, 'M')) {
                    clsName += ' old';
                }
                if (currentDate.isAfter(viewDate, 'M')) {
                    clsName += ' new';
                }
                if (currentDate.isSame(date, 'd') && !unset) {
                    clsName += ' active';
                }
                if (!isValid(currentDate, 'd')) {
                    clsName += ' disabled';
                }
                if (currentDate.isSame(getMoment(), 'd')) {
                    clsName += ' today';
                }
                if (currentDate.day() === 0 || currentDate.day() === 6) {
                    clsName += ' weekend';
                }
                row.append('<td data-action="selectDay" data-day="' + currentDate.format('L') + '" class="day' + clsName + '">' + currentDate.date() + '</td>');
                currentDate.add(1, 'd');
            }

            daysView.find('tbody').empty().append(html);

            updateMonths();

            updateYears();

            updateDecades();
        },
            fillHours = function fillHours() {
            var table = widget.find('.timepicker-hours table'),
                currentHour = viewDate.clone().startOf('d'),
                html = [],
                row = $('<tr>');

            if (viewDate.hour() > 11 && !use24Hours) {
                currentHour.hour(12);
            }
            while (currentHour.isSame(viewDate, 'd') && (use24Hours || viewDate.hour() < 12 && currentHour.hour() < 12 || viewDate.hour() > 11)) {
                if (currentHour.hour() % 4 === 0) {
                    row = $('<tr>');
                    html.push(row);
                }
                row.append('<td data-action="selectHour" class="hour' + (!isValid(currentHour, 'h') ? ' disabled' : '') + '">' + currentHour.format(use24Hours ? 'HH' : 'hh') + '</td>');
                currentHour.add(1, 'h');
            }
            table.empty().append(html);
        },
            fillMinutes = function fillMinutes() {
            var table = widget.find('.timepicker-minutes table'),
                currentMinute = viewDate.clone().startOf('h'),
                html = [],
                row = $('<tr>'),
                step = options.stepping === 1 ? 5 : options.stepping;

            while (viewDate.isSame(currentMinute, 'h')) {
                if (currentMinute.minute() % (step * 4) === 0) {
                    row = $('<tr>');
                    html.push(row);
                }
                row.append('<td data-action="selectMinute" class="minute' + (!isValid(currentMinute, 'm') ? ' disabled' : '') + '">' + currentMinute.format('mm') + '</td>');
                currentMinute.add(step, 'm');
            }
            table.empty().append(html);
        },
            fillSeconds = function fillSeconds() {
            var table = widget.find('.timepicker-seconds table'),
                currentSecond = viewDate.clone().startOf('m'),
                html = [],
                row = $('<tr>');

            while (viewDate.isSame(currentSecond, 'm')) {
                if (currentSecond.second() % 20 === 0) {
                    row = $('<tr>');
                    html.push(row);
                }
                row.append('<td data-action="selectSecond" class="second' + (!isValid(currentSecond, 's') ? ' disabled' : '') + '">' + currentSecond.format('ss') + '</td>');
                currentSecond.add(5, 's');
            }

            table.empty().append(html);
        },
            fillTime = function fillTime() {
            var toggle,
                newDate,
                timeComponents = widget.find('.timepicker span[data-time-component]');

            if (!use24Hours) {
                toggle = widget.find('.timepicker [data-action=togglePeriod]');
                newDate = date.clone().add(date.hours() >= 12 ? -12 : 12, 'h');

                toggle.text(date.format('A'));

                if (isValid(newDate, 'h')) {
                    toggle.removeClass('disabled');
                } else {
                    toggle.addClass('disabled');
                }
            }
            timeComponents.filter('[data-time-component=hours]').text(date.format(use24Hours ? 'HH' : 'hh'));
            timeComponents.filter('[data-time-component=minutes]').text(date.format('mm'));
            timeComponents.filter('[data-time-component=seconds]').text(date.format('ss'));

            fillHours();
            fillMinutes();
            fillSeconds();
        },
            update = function update() {
            if (!widget) {
                return;
            }
            fillDate();
            fillTime();
        },
            setValue = function setValue(targetMoment) {
            var oldDate = unset ? null : date;

            // case of calling setValue(null or false)
            if (!targetMoment) {
                unset = true;
                input.val('');
                element.data('date', '');
                notifyEvent({
                    type: 'dp.change',
                    date: false,
                    oldDate: oldDate
                });
                update();
                return;
            }

            targetMoment = targetMoment.clone().locale(options.locale);

            if (options.stepping !== 1) {
                targetMoment.minutes(Math.round(targetMoment.minutes() / options.stepping) * options.stepping % 60).seconds(0);
            }

            if (isValid(targetMoment)) {
                date = targetMoment;
                viewDate = date.clone();
                input.val(date.format(actualFormat));
                element.data('date', date.format(actualFormat));
                unset = false;
                update();
                notifyEvent({
                    type: 'dp.change',
                    date: date.clone(),
                    oldDate: oldDate
                });
            } else {
                if (!options.keepInvalid) {
                    input.val(unset ? '' : date.format(actualFormat));
                }
                notifyEvent({
                    type: 'dp.error',
                    date: targetMoment
                });
            }
        },
            hide = function hide() {
            ///<summary>Hides the widget. Possibly will emit dp.hide</summary>
            var transitioning = false;
            if (!widget) {
                return picker;
            }
            // Ignore event if in the middle of a picker transition
            widget.find('.collapse').each(function () {
                var collapseData = $(this).data('collapse');
                if (collapseData && collapseData.transitioning) {
                    transitioning = true;
                    return false;
                }
                return true;
            });
            if (transitioning) {
                return picker;
            }
            if (component && component.hasClass('btn')) {
                component.toggleClass('active');
            }
            widget.hide();

            $(window).off('resize', place);
            widget.off('click', '[data-action]');
            widget.off('mousedown', false);

            widget.remove();
            widget = false;

            notifyEvent({
                type: 'dp.hide',
                date: date.clone()
            });

            input.blur();

            return picker;
        },
            clear = function clear() {
            setValue(null);
        },


        /********************************************************************************
         *
         * Widget UI interaction functions
         *
         ********************************************************************************/
        actions = {
            next: function next() {
                var navFnc = datePickerModes[currentViewMode].navFnc;
                viewDate.add(datePickerModes[currentViewMode].navStep, navFnc);
                fillDate();
                viewUpdate(navFnc);
            },

            previous: function previous() {
                var navFnc = datePickerModes[currentViewMode].navFnc;
                viewDate.subtract(datePickerModes[currentViewMode].navStep, navFnc);
                fillDate();
                viewUpdate(navFnc);
            },

            pickerSwitch: function pickerSwitch() {
                showMode(1);
            },

            selectMonth: function selectMonth(e) {
                var month = $(e.target).closest('tbody').find('span').index($(e.target));
                viewDate.month(month);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()).month(viewDate.month()));
                    if (!options.inline) {
                        hide();
                    }
                } else {
                    showMode(-1);
                    fillDate();
                }
                viewUpdate('M');
            },

            selectYear: function selectYear(e) {
                var year = parseInt($(e.target).text(), 10) || 0;
                viewDate.year(year);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()));
                    if (!options.inline) {
                        hide();
                    }
                } else {
                    showMode(-1);
                    fillDate();
                }
                viewUpdate('YYYY');
            },

            selectDecade: function selectDecade(e) {
                var year = parseInt($(e.target).data('selection'), 10) || 0;
                viewDate.year(year);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()));
                    if (!options.inline) {
                        hide();
                    }
                } else {
                    showMode(-1);
                    fillDate();
                }
                viewUpdate('YYYY');
            },

            selectDay: function selectDay(e) {
                var day = viewDate.clone();
                if ($(e.target).is('.old')) {
                    day.subtract(1, 'M');
                }
                if ($(e.target).is('.new')) {
                    day.add(1, 'M');
                }
                setValue(day.date(parseInt($(e.target).text(), 10)));
                if (!hasTime() && !options.keepOpen && !options.inline) {
                    hide();
                }
            },

            incrementHours: function incrementHours() {
                var newDate = date.clone().add(1, 'h');
                if (isValid(newDate, 'h')) {
                    setValue(newDate);
                }
            },

            incrementMinutes: function incrementMinutes() {
                var newDate = date.clone().add(options.stepping, 'm');
                if (isValid(newDate, 'm')) {
                    setValue(newDate);
                }
            },

            incrementSeconds: function incrementSeconds() {
                var newDate = date.clone().add(1, 's');
                if (isValid(newDate, 's')) {
                    setValue(newDate);
                }
            },

            decrementHours: function decrementHours() {
                var newDate = date.clone().subtract(1, 'h');
                if (isValid(newDate, 'h')) {
                    setValue(newDate);
                }
            },

            decrementMinutes: function decrementMinutes() {
                var newDate = date.clone().subtract(options.stepping, 'm');
                if (isValid(newDate, 'm')) {
                    setValue(newDate);
                }
            },

            decrementSeconds: function decrementSeconds() {
                var newDate = date.clone().subtract(1, 's');
                if (isValid(newDate, 's')) {
                    setValue(newDate);
                }
            },

            togglePeriod: function togglePeriod() {
                setValue(date.clone().add(date.hours() >= 12 ? -12 : 12, 'h'));
            },

            togglePicker: function togglePicker(e) {
                var $this = $(e.target),
                    $parent = $this.closest('ul'),
                    expanded = $parent.find('.in'),
                    closed = $parent.find('.collapse:not(.in)'),
                    collapseData;

                if (expanded && expanded.length) {
                    collapseData = expanded.data('collapse');
                    if (collapseData && collapseData.transitioning) {
                        return;
                    }
                    if (expanded.collapse) {
                        // if collapse plugin is available through bootstrap.js then use it
                        expanded.collapse('hide');
                        closed.collapse('show');
                    } else {
                        // otherwise just toggle in class on the two views
                        expanded.removeClass('in');
                        closed.addClass('in');
                    }
                    if ($this.is('span')) {
                        $this.toggleClass(options.icons.time + ' ' + options.icons.date);
                    } else {
                        $this.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);
                    }

                    // NOTE: uncomment if toggled state will be restored in show()
                    //if (component) {
                    //    component.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);
                    //}
                }
            },

            showPicker: function showPicker() {
                widget.find('.timepicker > div:not(.timepicker-picker)').hide();
                widget.find('.timepicker .timepicker-picker').show();
            },

            showHours: function showHours() {
                widget.find('.timepicker .timepicker-picker').hide();
                widget.find('.timepicker .timepicker-hours').show();
            },

            showMinutes: function showMinutes() {
                widget.find('.timepicker .timepicker-picker').hide();
                widget.find('.timepicker .timepicker-minutes').show();
            },

            showSeconds: function showSeconds() {
                widget.find('.timepicker .timepicker-picker').hide();
                widget.find('.timepicker .timepicker-seconds').show();
            },

            selectHour: function selectHour(e) {
                var hour = parseInt($(e.target).text(), 10);

                if (!use24Hours) {
                    if (date.hours() >= 12) {
                        if (hour !== 12) {
                            hour += 12;
                        }
                    } else {
                        if (hour === 12) {
                            hour = 0;
                        }
                    }
                }
                setValue(date.clone().hours(hour));
                actions.showPicker.call(picker);
            },

            selectMinute: function selectMinute(e) {
                setValue(date.clone().minutes(parseInt($(e.target).text(), 10)));
                actions.showPicker.call(picker);
            },

            selectSecond: function selectSecond(e) {
                setValue(date.clone().seconds(parseInt($(e.target).text(), 10)));
                actions.showPicker.call(picker);
            },

            clear: clear,

            today: function today() {
                var todaysDate = getMoment();
                if (isValid(todaysDate, 'd')) {
                    setValue(todaysDate);
                }
            },

            close: hide
        },
            doAction = function doAction(e) {
            if ($(e.currentTarget).is('.disabled')) {
                return false;
            }
            actions[$(e.currentTarget).data('action')].apply(picker, arguments);
            return false;
        },
            show = function show() {
            ///<summary>Shows the widget. Possibly will emit dp.show and dp.change</summary>
            var currentMoment,
                useCurrentGranularity = {
                'year': function year(m) {
                    return m.month(0).date(1).hours(0).seconds(0).minutes(0);
                },
                'month': function month(m) {
                    return m.date(1).hours(0).seconds(0).minutes(0);
                },
                'day': function day(m) {
                    return m.hours(0).seconds(0).minutes(0);
                },
                'hour': function hour(m) {
                    return m.seconds(0).minutes(0);
                },
                'minute': function minute(m) {
                    return m.seconds(0);
                }
            };

            if (input.prop('disabled') || !options.ignoreReadonly && input.prop('readonly') || widget) {
                return picker;
            }
            if (input.val() !== undefined && input.val().trim().length !== 0) {
                setValue(parseInputDate(input.val().trim()));
            } else if (options.useCurrent && unset && (input.is('input') && input.val().trim().length === 0 || options.inline)) {
                currentMoment = getMoment();
                if (typeof options.useCurrent === 'string') {
                    currentMoment = useCurrentGranularity[options.useCurrent](currentMoment);
                }
                setValue(currentMoment);
            }

            widget = getTemplate();

            fillDow();
            fillMonths();

            widget.find('.timepicker-hours').hide();
            widget.find('.timepicker-minutes').hide();
            widget.find('.timepicker-seconds').hide();

            update();
            showMode();

            $(window).on('resize', place);
            widget.on('click', '[data-action]', doAction); // this handles clicks on the widget
            widget.on('mousedown', false);

            if (component && component.hasClass('btn')) {
                component.toggleClass('active');
            }
            widget.show();
            place();

            if (options.focusOnShow && !input.is(':focus')) {
                input.focus();
            }

            notifyEvent({
                type: 'dp.show'
            });
            return picker;
        },
            toggle = function toggle() {
            /// <summary>Shows or hides the widget</summary>
            return widget ? hide() : show();
        },
            parseInputDate = function parseInputDate(inputDate) {
            if (options.parseInputDate === undefined) {
                if (moment.isMoment(inputDate) || inputDate instanceof Date) {
                    inputDate = moment(inputDate);
                } else {
                    inputDate = getMoment(inputDate);
                }
            } else {
                inputDate = options.parseInputDate(inputDate);
            }
            inputDate.locale(options.locale);
            return inputDate;
        },
            keydown = function keydown(e) {
            var handler = null,
                index,
                index2,
                pressedKeys = [],
                pressedModifiers = {},
                currentKey = e.which,
                keyBindKeys,
                allModifiersPressed,
                pressed = 'p';

            keyState[currentKey] = pressed;

            for (index in keyState) {
                if (keyState.hasOwnProperty(index) && keyState[index] === pressed) {
                    pressedKeys.push(index);
                    if (parseInt(index, 10) !== currentKey) {
                        pressedModifiers[index] = true;
                    }
                }
            }

            for (index in options.keyBinds) {
                if (options.keyBinds.hasOwnProperty(index) && typeof options.keyBinds[index] === 'function') {
                    keyBindKeys = index.split(' ');
                    if (keyBindKeys.length === pressedKeys.length && keyMap[currentKey] === keyBindKeys[keyBindKeys.length - 1]) {
                        allModifiersPressed = true;
                        for (index2 = keyBindKeys.length - 2; index2 >= 0; index2--) {
                            if (!(keyMap[keyBindKeys[index2]] in pressedModifiers)) {
                                allModifiersPressed = false;
                                break;
                            }
                        }
                        if (allModifiersPressed) {
                            handler = options.keyBinds[index];
                            break;
                        }
                    }
                }
            }

            if (handler) {
                handler.call(picker, widget);
                e.stopPropagation();
                e.preventDefault();
            }
        },
            keyup = function keyup(e) {
            keyState[e.which] = 'r';
            e.stopPropagation();
            e.preventDefault();
        },
            change = function change(e) {
            var val = $(e.target).val().trim(),
                parsedDate = val ? parseInputDate(val) : null;
            setValue(parsedDate);
            e.stopImmediatePropagation();
            return false;
        },
            attachDatePickerElementEvents = function attachDatePickerElementEvents() {
            input.on({
                'change': change,
                'blur': options.debug ? '' : hide,
                'keydown': keydown,
                'keyup': keyup,
                'focus': options.allowInputToggle ? show : ''
            });

            if (element.is('input')) {
                input.on({
                    'focus': show
                });
            } else if (component) {
                component.on('click', toggle);
                component.on('mousedown', false);
            }
        },
            detachDatePickerElementEvents = function detachDatePickerElementEvents() {
            input.off({
                'change': change,
                'blur': blur,
                'keydown': keydown,
                'keyup': keyup,
                'focus': options.allowInputToggle ? hide : ''
            });

            if (element.is('input')) {
                input.off({
                    'focus': show
                });
            } else if (component) {
                component.off('click', toggle);
                component.off('mousedown', false);
            }
        },
            indexGivenDates = function indexGivenDates(givenDatesArray) {
            // Store given enabledDates and disabledDates as keys.
            // This way we can check their existence in O(1) time instead of looping through whole array.
            // (for example: options.enabledDates['2014-02-27'] === true)
            var givenDatesIndexed = {};
            $.each(givenDatesArray, function () {
                var dDate = parseInputDate(this);
                if (dDate.isValid()) {
                    givenDatesIndexed[dDate.format('YYYY-MM-DD')] = true;
                }
            });
            return Object.keys(givenDatesIndexed).length ? givenDatesIndexed : false;
        },
            indexGivenHours = function indexGivenHours(givenHoursArray) {
            // Store given enabledHours and disabledHours as keys.
            // This way we can check their existence in O(1) time instead of looping through whole array.
            // (for example: options.enabledHours['2014-02-27'] === true)
            var givenHoursIndexed = {};
            $.each(givenHoursArray, function () {
                givenHoursIndexed[this] = true;
            });
            return Object.keys(givenHoursIndexed).length ? givenHoursIndexed : false;
        },
            initFormatting = function initFormatting() {
            var format = options.format || 'L LT';

            actualFormat = format.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput) {
                var newinput = date.localeData().longDateFormat(formatInput) || formatInput;
                return newinput.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput2) {
                    //temp fix for #740
                    return date.localeData().longDateFormat(formatInput2) || formatInput2;
                });
            });

            parseFormats = options.extraFormats ? options.extraFormats.slice() : [];
            if (parseFormats.indexOf(format) < 0 && parseFormats.indexOf(actualFormat) < 0) {
                parseFormats.push(actualFormat);
            }

            use24Hours = actualFormat.toLowerCase().indexOf('a') < 1 && actualFormat.replace(/\[.*?\]/g, '').indexOf('h') < 1;

            if (isEnabled('y')) {
                minViewModeNumber = 2;
            }
            if (isEnabled('M')) {
                minViewModeNumber = 1;
            }
            if (isEnabled('d')) {
                minViewModeNumber = 0;
            }

            currentViewMode = Math.max(minViewModeNumber, currentViewMode);

            if (!unset) {
                setValue(date);
            }
        };

        /********************************************************************************
         *
         * Public API functions
         * =====================
         *
         * Important: Do not expose direct references to private objects or the options
         * object to the outer world. Always return a clone when returning values or make
         * a clone when setting a private variable.
         *
         ********************************************************************************/
        picker.destroy = function () {
            ///<summary>Destroys the widget and removes all attached event listeners</summary>
            hide();
            detachDatePickerElementEvents();
            element.removeData('DateTimePicker');
            element.removeData('date');
        };

        picker.toggle = toggle;

        picker.show = show;

        picker.hide = hide;

        picker.disable = function () {
            ///<summary>Disables the input element, the component is attached to, by adding a disabled="true" attribute to it.
            ///If the widget was visible before that call it is hidden. Possibly emits dp.hide</summary>
            hide();
            if (component && component.hasClass('btn')) {
                component.addClass('disabled');
            }
            input.prop('disabled', true);
            return picker;
        };

        picker.enable = function () {
            ///<summary>Enables the input element, the component is attached to, by removing disabled attribute from it.</summary>
            if (component && component.hasClass('btn')) {
                component.removeClass('disabled');
            }
            input.prop('disabled', false);
            return picker;
        };

        picker.ignoreReadonly = function (ignoreReadonly) {
            if (arguments.length === 0) {
                return options.ignoreReadonly;
            }
            if (typeof ignoreReadonly !== 'boolean') {
                throw new TypeError('ignoreReadonly () expects a boolean parameter');
            }
            options.ignoreReadonly = ignoreReadonly;
            return picker;
        };

        picker.options = function (newOptions) {
            if (arguments.length === 0) {
                return $.extend(true, {}, options);
            }

            if (!(newOptions instanceof Object)) {
                throw new TypeError('options() options parameter should be an object');
            }
            $.extend(true, options, newOptions);
            $.each(options, function (key, value) {
                if (picker[key] !== undefined) {
                    picker[key](value);
                } else {
                    throw new TypeError('option ' + key + ' is not recognized!');
                }
            });
            return picker;
        };

        picker.date = function (newDate) {
            ///<signature helpKeyword="$.fn.datetimepicker.date">
            ///<summary>Returns the component's model current date, a moment object or null if not set.</summary>
            ///<returns type="Moment">date.clone()</returns>
            ///</signature>
            ///<signature>
            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>
            ///<param name="newDate" locid="$.fn.datetimepicker.date_p:newDate">Takes string, Date, moment, null parameter.</param>
            ///</signature>
            if (arguments.length === 0) {
                if (unset) {
                    return null;
                }
                return date.clone();
            }

            if (newDate !== null && typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {
                throw new TypeError('date() parameter must be one of [null, string, moment or Date]');
            }

            setValue(newDate === null ? null : parseInputDate(newDate));
            return picker;
        };

        picker.format = function (newFormat) {
            ///<summary>test su</summary>
            ///<param name="newFormat">info about para</param>
            ///<returns type="string|boolean">returns foo</returns>
            if (arguments.length === 0) {
                return options.format;
            }

            if (typeof newFormat !== 'string' && (typeof newFormat !== 'boolean' || newFormat !== false)) {
                throw new TypeError('format() expects a sting or boolean:false parameter ' + newFormat);
            }

            options.format = newFormat;
            if (actualFormat) {
                initFormatting(); // reinit formatting
            }
            return picker;
        };

        picker.timeZone = function (newZone) {
            if (arguments.length === 0) {
                return options.timeZone;
            }

            options.timeZone = newZone;

            return picker;
        };

        picker.dayViewHeaderFormat = function (newFormat) {
            if (arguments.length === 0) {
                return options.dayViewHeaderFormat;
            }

            if (typeof newFormat !== 'string') {
                throw new TypeError('dayViewHeaderFormat() expects a string parameter');
            }

            options.dayViewHeaderFormat = newFormat;
            return picker;
        };

        picker.extraFormats = function (formats) {
            if (arguments.length === 0) {
                return options.extraFormats;
            }

            if (formats !== false && !(formats instanceof Array)) {
                throw new TypeError('extraFormats() expects an array or false parameter');
            }

            options.extraFormats = formats;
            if (parseFormats) {
                initFormatting(); // reinit formatting
            }
            return picker;
        };

        picker.disabledDates = function (dates) {
            ///<signature helpKeyword="$.fn.datetimepicker.disabledDates">
            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>
            ///<returns type="array">options.disabledDates</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of
            ///options.enabledDates if such exist.</summary>
            ///<param name="dates" locid="$.fn.datetimepicker.disabledDates_p:dates">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.disabledDates ? $.extend({}, options.disabledDates) : options.disabledDates;
            }

            if (!dates) {
                options.disabledDates = false;
                update();
                return picker;
            }
            if (!(dates instanceof Array)) {
                throw new TypeError('disabledDates() expects an array parameter');
            }
            options.disabledDates = indexGivenDates(dates);
            options.enabledDates = false;
            update();
            return picker;
        };

        picker.enabledDates = function (dates) {
            ///<signature helpKeyword="$.fn.datetimepicker.enabledDates">
            ///<summary>Returns an array with the currently set enabled dates on the component.</summary>
            ///<returns type="array">options.enabledDates</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledDates if such exist.</summary>
            ///<param name="dates" locid="$.fn.datetimepicker.enabledDates_p:dates">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.enabledDates ? $.extend({}, options.enabledDates) : options.enabledDates;
            }

            if (!dates) {
                options.enabledDates = false;
                update();
                return picker;
            }
            if (!(dates instanceof Array)) {
                throw new TypeError('enabledDates() expects an array parameter');
            }
            options.enabledDates = indexGivenDates(dates);
            options.disabledDates = false;
            update();
            return picker;
        };

        picker.daysOfWeekDisabled = function (daysOfWeekDisabled) {
            if (arguments.length === 0) {
                return options.daysOfWeekDisabled.splice(0);
            }

            if (typeof daysOfWeekDisabled === 'boolean' && !daysOfWeekDisabled) {
                options.daysOfWeekDisabled = false;
                update();
                return picker;
            }

            if (!(daysOfWeekDisabled instanceof Array)) {
                throw new TypeError('daysOfWeekDisabled() expects an array parameter');
            }
            options.daysOfWeekDisabled = daysOfWeekDisabled.reduce(function (previousValue, currentValue) {
                currentValue = parseInt(currentValue, 10);
                if (currentValue > 6 || currentValue < 0 || isNaN(currentValue)) {
                    return previousValue;
                }
                if (previousValue.indexOf(currentValue) === -1) {
                    previousValue.push(currentValue);
                }
                return previousValue;
            }, []).sort();
            if (options.useCurrent && !options.keepInvalid) {
                var tries = 0;
                while (!isValid(date, 'd')) {
                    date.add(1, 'd');
                    if (tries === 7) {
                        throw 'Tried 7 times to find a valid date';
                    }
                    tries++;
                }
                setValue(date);
            }
            update();
            return picker;
        };

        picker.maxDate = function (maxDate) {
            if (arguments.length === 0) {
                return options.maxDate ? options.maxDate.clone() : options.maxDate;
            }

            if (typeof maxDate === 'boolean' && maxDate === false) {
                options.maxDate = false;
                update();
                return picker;
            }

            if (typeof maxDate === 'string') {
                if (maxDate === 'now' || maxDate === 'moment') {
                    maxDate = getMoment();
                }
            }

            var parsedDate = parseInputDate(maxDate);

            if (!parsedDate.isValid()) {
                throw new TypeError('maxDate() Could not parse date parameter: ' + maxDate);
            }
            if (options.minDate && parsedDate.isBefore(options.minDate)) {
                throw new TypeError('maxDate() date parameter is before options.minDate: ' + parsedDate.format(actualFormat));
            }
            options.maxDate = parsedDate;
            if (options.useCurrent && !options.keepInvalid && date.isAfter(maxDate)) {
                setValue(options.maxDate);
            }
            if (viewDate.isAfter(parsedDate)) {
                viewDate = parsedDate.clone().subtract(options.stepping, 'm');
            }
            update();
            return picker;
        };

        picker.minDate = function (minDate) {
            if (arguments.length === 0) {
                return options.minDate ? options.minDate.clone() : options.minDate;
            }

            if (typeof minDate === 'boolean' && minDate === false) {
                options.minDate = false;
                update();
                return picker;
            }

            if (typeof minDate === 'string') {
                if (minDate === 'now' || minDate === 'moment') {
                    minDate = getMoment();
                }
            }

            var parsedDate = parseInputDate(minDate);

            if (!parsedDate.isValid()) {
                throw new TypeError('minDate() Could not parse date parameter: ' + minDate);
            }
            if (options.maxDate && parsedDate.isAfter(options.maxDate)) {
                throw new TypeError('minDate() date parameter is after options.maxDate: ' + parsedDate.format(actualFormat));
            }
            options.minDate = parsedDate;
            if (options.useCurrent && !options.keepInvalid && date.isBefore(minDate)) {
                setValue(options.minDate);
            }
            if (viewDate.isBefore(parsedDate)) {
                viewDate = parsedDate.clone().add(options.stepping, 'm');
            }
            update();
            return picker;
        };

        picker.defaultDate = function (defaultDate) {
            ///<signature helpKeyword="$.fn.datetimepicker.defaultDate">
            ///<summary>Returns a moment with the options.defaultDate option configuration or false if not set</summary>
            ///<returns type="Moment">date.clone()</returns>
            ///</signature>
            ///<signature>
            ///<summary>Will set the picker's inital date. If a boolean:false value is passed the options.defaultDate parameter is cleared.</summary>
            ///<param name="defaultDate" locid="$.fn.datetimepicker.defaultDate_p:defaultDate">Takes a string, Date, moment, boolean:false</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.defaultDate ? options.defaultDate.clone() : options.defaultDate;
            }
            if (!defaultDate) {
                options.defaultDate = false;
                return picker;
            }

            if (typeof defaultDate === 'string') {
                if (defaultDate === 'now' || defaultDate === 'moment') {
                    defaultDate = getMoment();
                }
            }

            var parsedDate = parseInputDate(defaultDate);
            if (!parsedDate.isValid()) {
                throw new TypeError('defaultDate() Could not parse date parameter: ' + defaultDate);
            }
            if (!isValid(parsedDate)) {
                throw new TypeError('defaultDate() date passed is invalid according to component setup validations');
            }

            options.defaultDate = parsedDate;

            if (options.defaultDate && options.inline || input.val().trim() === '') {
                setValue(options.defaultDate);
            }
            return picker;
        };

        picker.locale = function (locale) {
            if (arguments.length === 0) {
                return options.locale;
            }

            if (!moment.localeData(locale)) {
                throw new TypeError('locale() locale ' + locale + ' is not loaded from moment locales!');
            }

            options.locale = locale;
            date.locale(options.locale);
            viewDate.locale(options.locale);

            if (actualFormat) {
                initFormatting(); // reinit formatting
            }
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.stepping = function (stepping) {
            if (arguments.length === 0) {
                return options.stepping;
            }

            stepping = parseInt(stepping, 10);
            if (isNaN(stepping) || stepping < 1) {
                stepping = 1;
            }
            options.stepping = stepping;
            return picker;
        };

        picker.useCurrent = function (useCurrent) {
            var useCurrentOptions = ['year', 'month', 'day', 'hour', 'minute'];
            if (arguments.length === 0) {
                return options.useCurrent;
            }

            if (typeof useCurrent !== 'boolean' && typeof useCurrent !== 'string') {
                throw new TypeError('useCurrent() expects a boolean or string parameter');
            }
            if (typeof useCurrent === 'string' && useCurrentOptions.indexOf(useCurrent.toLowerCase()) === -1) {
                throw new TypeError('useCurrent() expects a string parameter of ' + useCurrentOptions.join(', '));
            }
            options.useCurrent = useCurrent;
            return picker;
        };

        picker.collapse = function (collapse) {
            if (arguments.length === 0) {
                return options.collapse;
            }

            if (typeof collapse !== 'boolean') {
                throw new TypeError('collapse() expects a boolean parameter');
            }
            if (options.collapse === collapse) {
                return picker;
            }
            options.collapse = collapse;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.icons = function (icons) {
            if (arguments.length === 0) {
                return $.extend({}, options.icons);
            }

            if (!(icons instanceof Object)) {
                throw new TypeError('icons() expects parameter to be an Object');
            }
            $.extend(options.icons, icons);
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.tooltips = function (tooltips) {
            if (arguments.length === 0) {
                return $.extend({}, options.tooltips);
            }

            if (!(tooltips instanceof Object)) {
                throw new TypeError('tooltips() expects parameter to be an Object');
            }
            $.extend(options.tooltips, tooltips);
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.useStrict = function (useStrict) {
            if (arguments.length === 0) {
                return options.useStrict;
            }

            if (typeof useStrict !== 'boolean') {
                throw new TypeError('useStrict() expects a boolean parameter');
            }
            options.useStrict = useStrict;
            return picker;
        };

        picker.sideBySide = function (sideBySide) {
            if (arguments.length === 0) {
                return options.sideBySide;
            }

            if (typeof sideBySide !== 'boolean') {
                throw new TypeError('sideBySide() expects a boolean parameter');
            }
            options.sideBySide = sideBySide;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.viewMode = function (viewMode) {
            if (arguments.length === 0) {
                return options.viewMode;
            }

            if (typeof viewMode !== 'string') {
                throw new TypeError('viewMode() expects a string parameter');
            }

            if (viewModes.indexOf(viewMode) === -1) {
                throw new TypeError('viewMode() parameter must be one of (' + viewModes.join(', ') + ') value');
            }

            options.viewMode = viewMode;
            currentViewMode = Math.max(viewModes.indexOf(viewMode), minViewModeNumber);

            showMode();
            return picker;
        };

        picker.toolbarPlacement = function (toolbarPlacement) {
            if (arguments.length === 0) {
                return options.toolbarPlacement;
            }

            if (typeof toolbarPlacement !== 'string') {
                throw new TypeError('toolbarPlacement() expects a string parameter');
            }
            if (toolbarPlacements.indexOf(toolbarPlacement) === -1) {
                throw new TypeError('toolbarPlacement() parameter must be one of (' + toolbarPlacements.join(', ') + ') value');
            }
            options.toolbarPlacement = toolbarPlacement;

            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.widgetPositioning = function (widgetPositioning) {
            if (arguments.length === 0) {
                return $.extend({}, options.widgetPositioning);
            }

            if ({}.toString.call(widgetPositioning) !== '[object Object]') {
                throw new TypeError('widgetPositioning() expects an object variable');
            }
            if (widgetPositioning.horizontal) {
                if (typeof widgetPositioning.horizontal !== 'string') {
                    throw new TypeError('widgetPositioning() horizontal variable must be a string');
                }
                widgetPositioning.horizontal = widgetPositioning.horizontal.toLowerCase();
                if (horizontalModes.indexOf(widgetPositioning.horizontal) === -1) {
                    throw new TypeError('widgetPositioning() expects horizontal parameter to be one of (' + horizontalModes.join(', ') + ')');
                }
                options.widgetPositioning.horizontal = widgetPositioning.horizontal;
            }
            if (widgetPositioning.vertical) {
                if (typeof widgetPositioning.vertical !== 'string') {
                    throw new TypeError('widgetPositioning() vertical variable must be a string');
                }
                widgetPositioning.vertical = widgetPositioning.vertical.toLowerCase();
                if (verticalModes.indexOf(widgetPositioning.vertical) === -1) {
                    throw new TypeError('widgetPositioning() expects vertical parameter to be one of (' + verticalModes.join(', ') + ')');
                }
                options.widgetPositioning.vertical = widgetPositioning.vertical;
            }
            update();
            return picker;
        };

        picker.calendarWeeks = function (calendarWeeks) {
            if (arguments.length === 0) {
                return options.calendarWeeks;
            }

            if (typeof calendarWeeks !== 'boolean') {
                throw new TypeError('calendarWeeks() expects parameter to be a boolean value');
            }

            options.calendarWeeks = calendarWeeks;
            update();
            return picker;
        };

        picker.showTodayButton = function (showTodayButton) {
            if (arguments.length === 0) {
                return options.showTodayButton;
            }

            if (typeof showTodayButton !== 'boolean') {
                throw new TypeError('showTodayButton() expects a boolean parameter');
            }

            options.showTodayButton = showTodayButton;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.showClear = function (showClear) {
            if (arguments.length === 0) {
                return options.showClear;
            }

            if (typeof showClear !== 'boolean') {
                throw new TypeError('showClear() expects a boolean parameter');
            }

            options.showClear = showClear;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.widgetParent = function (widgetParent) {
            if (arguments.length === 0) {
                return options.widgetParent;
            }

            if (typeof widgetParent === 'string') {
                widgetParent = $(widgetParent);
            }

            if (widgetParent !== null && typeof widgetParent !== 'string' && !(widgetParent instanceof $)) {
                throw new TypeError('widgetParent() expects a string or a jQuery object parameter');
            }

            options.widgetParent = widgetParent;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.keepOpen = function (keepOpen) {
            if (arguments.length === 0) {
                return options.keepOpen;
            }

            if (typeof keepOpen !== 'boolean') {
                throw new TypeError('keepOpen() expects a boolean parameter');
            }

            options.keepOpen = keepOpen;
            return picker;
        };

        picker.focusOnShow = function (focusOnShow) {
            if (arguments.length === 0) {
                return options.focusOnShow;
            }

            if (typeof focusOnShow !== 'boolean') {
                throw new TypeError('focusOnShow() expects a boolean parameter');
            }

            options.focusOnShow = focusOnShow;
            return picker;
        };

        picker.inline = function (inline) {
            if (arguments.length === 0) {
                return options.inline;
            }

            if (typeof inline !== 'boolean') {
                throw new TypeError('inline() expects a boolean parameter');
            }

            options.inline = inline;
            return picker;
        };

        picker.clear = function () {
            clear();
            return picker;
        };

        picker.keyBinds = function (keyBinds) {
            options.keyBinds = keyBinds;
            return picker;
        };

        picker.getMoment = function (d) {
            return getMoment(d);
        };

        picker.debug = function (debug) {
            if (typeof debug !== 'boolean') {
                throw new TypeError('debug() expects a boolean parameter');
            }

            options.debug = debug;
            return picker;
        };

        picker.allowInputToggle = function (allowInputToggle) {
            if (arguments.length === 0) {
                return options.allowInputToggle;
            }

            if (typeof allowInputToggle !== 'boolean') {
                throw new TypeError('allowInputToggle() expects a boolean parameter');
            }

            options.allowInputToggle = allowInputToggle;
            return picker;
        };

        picker.showClose = function (showClose) {
            if (arguments.length === 0) {
                return options.showClose;
            }

            if (typeof showClose !== 'boolean') {
                throw new TypeError('showClose() expects a boolean parameter');
            }

            options.showClose = showClose;
            return picker;
        };

        picker.keepInvalid = function (keepInvalid) {
            if (arguments.length === 0) {
                return options.keepInvalid;
            }

            if (typeof keepInvalid !== 'boolean') {
                throw new TypeError('keepInvalid() expects a boolean parameter');
            }
            options.keepInvalid = keepInvalid;
            return picker;
        };

        picker.datepickerInput = function (datepickerInput) {
            if (arguments.length === 0) {
                return options.datepickerInput;
            }

            if (typeof datepickerInput !== 'string') {
                throw new TypeError('datepickerInput() expects a string parameter');
            }

            options.datepickerInput = datepickerInput;
            return picker;
        };

        picker.parseInputDate = function (parseInputDate) {
            if (arguments.length === 0) {
                return options.parseInputDate;
            }

            if (typeof parseInputDate !== 'function') {
                throw new TypeError('parseInputDate() sholud be as function');
            }

            options.parseInputDate = parseInputDate;

            return picker;
        };

        picker.disabledTimeIntervals = function (disabledTimeIntervals) {
            ///<signature helpKeyword="$.fn.datetimepicker.disabledTimeIntervals">
            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>
            ///<returns type="array">options.disabledTimeIntervals</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of
            ///options.enabledDates if such exist.</summary>
            ///<param name="dates" locid="$.fn.datetimepicker.disabledTimeIntervals_p:dates">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.disabledTimeIntervals ? $.extend({}, options.disabledTimeIntervals) : options.disabledTimeIntervals;
            }

            if (!disabledTimeIntervals) {
                options.disabledTimeIntervals = false;
                update();
                return picker;
            }
            if (!(disabledTimeIntervals instanceof Array)) {
                throw new TypeError('disabledTimeIntervals() expects an array parameter');
            }
            options.disabledTimeIntervals = disabledTimeIntervals;
            update();
            return picker;
        };

        picker.disabledHours = function (hours) {
            ///<signature helpKeyword="$.fn.datetimepicker.disabledHours">
            ///<summary>Returns an array with the currently set disabled hours on the component.</summary>
            ///<returns type="array">options.disabledHours</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of
            ///options.enabledHours if such exist.</summary>
            ///<param name="hours" locid="$.fn.datetimepicker.disabledHours_p:hours">Takes an [ int ] of values and disallows the user to select only from those hours.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.disabledHours ? $.extend({}, options.disabledHours) : options.disabledHours;
            }

            if (!hours) {
                options.disabledHours = false;
                update();
                return picker;
            }
            if (!(hours instanceof Array)) {
                throw new TypeError('disabledHours() expects an array parameter');
            }
            options.disabledHours = indexGivenHours(hours);
            options.enabledHours = false;
            if (options.useCurrent && !options.keepInvalid) {
                var tries = 0;
                while (!isValid(date, 'h')) {
                    date.add(1, 'h');
                    if (tries === 24) {
                        throw 'Tried 24 times to find a valid date';
                    }
                    tries++;
                }
                setValue(date);
            }
            update();
            return picker;
        };

        picker.enabledHours = function (hours) {
            ///<signature helpKeyword="$.fn.datetimepicker.enabledHours">
            ///<summary>Returns an array with the currently set enabled hours on the component.</summary>
            ///<returns type="array">options.enabledHours</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledHours if such exist.</summary>
            ///<param name="hours" locid="$.fn.datetimepicker.enabledHours_p:hours">Takes an [ int ] of values and allows the user to select only from those hours.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.enabledHours ? $.extend({}, options.enabledHours) : options.enabledHours;
            }

            if (!hours) {
                options.enabledHours = false;
                update();
                return picker;
            }
            if (!(hours instanceof Array)) {
                throw new TypeError('enabledHours() expects an array parameter');
            }
            options.enabledHours = indexGivenHours(hours);
            options.disabledHours = false;
            if (options.useCurrent && !options.keepInvalid) {
                var tries = 0;
                while (!isValid(date, 'h')) {
                    date.add(1, 'h');
                    if (tries === 24) {
                        throw 'Tried 24 times to find a valid date';
                    }
                    tries++;
                }
                setValue(date);
            }
            update();
            return picker;
        };

        picker.viewDate = function (newDate) {
            ///<signature helpKeyword="$.fn.datetimepicker.viewDate">
            ///<summary>Returns the component's model current viewDate, a moment object or null if not set.</summary>
            ///<returns type="Moment">viewDate.clone()</returns>
            ///</signature>
            ///<signature>
            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>
            ///<param name="newDate" locid="$.fn.datetimepicker.date_p:newDate">Takes string, viewDate, moment, null parameter.</param>
            ///</signature>
            if (arguments.length === 0) {
                return viewDate.clone();
            }

            if (!newDate) {
                viewDate = date.clone();
                return picker;
            }

            if (typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {
                throw new TypeError('viewDate() parameter must be one of [string, moment or Date]');
            }

            viewDate = parseInputDate(newDate);
            viewUpdate();
            return picker;
        };

        // initializing element and component attributes
        if (element.is('input')) {
            input = element;
        } else {
            input = element.find(options.datepickerInput);
            if (input.size() === 0) {
                input = element.find('input');
            } else if (!input.is('input')) {
                throw new Error('CSS class "' + options.datepickerInput + '" cannot be applied to non input element');
            }
        }

        if (element.hasClass('input-group')) {
            // in case there is more then one 'input-group-addon' Issue #48
            if (element.find('.datepickerbutton').size() === 0) {
                component = element.find('.input-group-addon');
            } else {
                component = element.find('.datepickerbutton');
            }
        }

        if (!options.inline && !input.is('input')) {
            throw new Error('Could not initialize DateTimePicker without an input element');
        }

        // Set defaults for date here now instead of in var declaration
        date = getMoment();
        viewDate = date.clone();

        $.extend(true, options, dataToOptions());

        picker.options(options);

        initFormatting();

        attachDatePickerElementEvents();

        if (input.prop('disabled')) {
            picker.disable();
        }
        if (input.is('input') && input.val().trim().length !== 0) {
            setValue(parseInputDate(input.val().trim()));
        } else if (options.defaultDate && input.attr('placeholder') === undefined) {
            setValue(options.defaultDate);
        }
        if (options.inline) {
            show();
        }
        return picker;
    };

    /********************************************************************************
     *
     * jQuery plugin constructor and defaults object
     *
     ********************************************************************************/

    $.fn.datetimepicker = function (options) {
        return this.each(function () {
            var $this = $(this);
            if (!$this.data('DateTimePicker')) {
                // create a private copy of the defaults object
                options = $.extend(true, {}, $.fn.datetimepicker.defaults, options);
                $this.data('DateTimePicker', dateTimePicker($this, options));
            }
        });
    };

    $.fn.datetimepicker.defaults = {
        timeZone: 'Etc/UTC',
        format: false,
        dayViewHeaderFormat: 'MMMM YYYY',
        extraFormats: false,
        stepping: 1,
        minDate: false,
        maxDate: false,
        useCurrent: true,
        collapse: true,
        locale: moment.locale(),
        defaultDate: false,
        disabledDates: false,
        enabledDates: false,
        icons: {
            time: 'glyphicon glyphicon-time',
            date: 'glyphicon glyphicon-calendar',
            up: 'glyphicon glyphicon-chevron-up',
            down: 'glyphicon glyphicon-chevron-down',
            previous: 'glyphicon glyphicon-chevron-left',
            next: 'glyphicon glyphicon-chevron-right',
            today: 'glyphicon glyphicon-screenshot',
            clear: 'glyphicon glyphicon-trash',
            close: 'glyphicon glyphicon-remove'
        },
        tooltips: {
            today: 'Go to today',
            clear: 'Clear selection',
            close: 'Close the picker',
            selectMonth: 'Select Month',
            prevMonth: 'Previous Month',
            nextMonth: 'Next Month',
            selectYear: 'Select Year',
            prevYear: 'Previous Year',
            nextYear: 'Next Year',
            selectDecade: 'Select Decade',
            prevDecade: 'Previous Decade',
            nextDecade: 'Next Decade',
            prevCentury: 'Previous Century',
            nextCentury: 'Next Century',
            pickHour: 'Pick Hour',
            incrementHour: 'Increment Hour',
            decrementHour: 'Decrement Hour',
            pickMinute: 'Pick Minute',
            incrementMinute: 'Increment Minute',
            decrementMinute: 'Decrement Minute',
            pickSecond: 'Pick Second',
            incrementSecond: 'Increment Second',
            decrementSecond: 'Decrement Second',
            togglePeriod: 'Toggle Period',
            selectTime: 'Select Time'
        },
        useStrict: false,
        sideBySide: false,
        daysOfWeekDisabled: false,
        calendarWeeks: false,
        viewMode: 'days',
        toolbarPlacement: 'default',
        showTodayButton: false,
        showClear: false,
        showClose: false,
        widgetPositioning: {
            horizontal: 'auto',
            vertical: 'auto'
        },
        widgetParent: null,
        ignoreReadonly: false,
        keepOpen: false,
        focusOnShow: true,
        inline: false,
        keepInvalid: false,
        datepickerInput: '.datepickerinput',
        keyBinds: {
            up: function up(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(7, 'd'));
                } else {
                    this.date(d.clone().add(this.stepping(), 'm'));
                }
            },
            down: function down(widget) {
                if (!widget) {
                    this.show();
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(7, 'd'));
                } else {
                    this.date(d.clone().subtract(this.stepping(), 'm'));
                }
            },
            'control up': function controlUp(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(1, 'y'));
                } else {
                    this.date(d.clone().add(1, 'h'));
                }
            },
            'control down': function controlDown(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(1, 'y'));
                } else {
                    this.date(d.clone().subtract(1, 'h'));
                }
            },
            left: function left(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(1, 'd'));
                }
            },
            right: function right(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(1, 'd'));
                }
            },
            pageUp: function pageUp(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(1, 'M'));
                }
            },
            pageDown: function pageDown(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(1, 'M'));
                }
            },
            enter: function enter() {
                this.hide();
            },
            escape: function escape() {
                this.hide();
            },
            //tab: function (widget) { //this break the flow of the form. disabling for now
            //    var toggle = widget.find('.picker-switch a[data-action="togglePicker"]');
            //    if(toggle.length > 0) toggle.click();
            //},
            'control space': function controlSpace(widget) {
                if (widget.find('.timepicker').is(':visible')) {
                    widget.find('.btn[data-action="togglePeriod"]').click();
                }
            },
            t: function t() {
                this.date(this.getMoment());
            },
            'delete': function _delete() {
                this.clear();
            }
        },
        debug: false,
        allowInputToggle: false,
        disabledTimeIntervals: false,
        disabledHours: false,
        enabledHours: false,
        viewDate: false
    };
});

},{"jquery":"jquery","moment":"moment"}],45:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// http://spin.js.org/#v2.3.2
!function (a, b) {
  "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = b() : "function" == typeof define && define.amd ? define(b) : a.Spinner = b();
}(undefined, function () {
  "use strict";
  function a(a, b) {
    var c,
        d = document.createElement(a || "div");for (c in b) {
      d[c] = b[c];
    }return d;
  }function b(a) {
    for (var b = 1, c = arguments.length; c > b; b++) {
      a.appendChild(arguments[b]);
    }return a;
  }function c(a, b, c, d) {
    var e = ["opacity", b, ~~(100 * a), c, d].join("-"),
        f = .01 + c / d * 100,
        g = Math.max(1 - (1 - a) / b * (100 - f), a),
        h = j.substring(0, j.indexOf("Animation")).toLowerCase(),
        i = h && "-" + h + "-" || "";return m[e] || (k.insertRule("@" + i + "keyframes " + e + "{0%{opacity:" + g + "}" + f + "%{opacity:" + a + "}" + (f + .01) + "%{opacity:1}" + (f + b) % 100 + "%{opacity:" + a + "}100%{opacity:" + g + "}}", k.cssRules.length), m[e] = 1), e;
  }function d(a, b) {
    var c,
        d,
        e = a.style;if (b = b.charAt(0).toUpperCase() + b.slice(1), void 0 !== e[b]) return b;for (d = 0; d < l.length; d++) {
      if (c = l[d] + b, void 0 !== e[c]) return c;
    }
  }function e(a, b) {
    for (var c in b) {
      a.style[d(a, c) || c] = b[c];
    }return a;
  }function f(a) {
    for (var b = 1; b < arguments.length; b++) {
      var c = arguments[b];for (var d in c) {
        void 0 === a[d] && (a[d] = c[d]);
      }
    }return a;
  }function g(a, b) {
    return "string" == typeof a ? a : a[b % a.length];
  }function h(a) {
    this.opts = f(a || {}, h.defaults, n);
  }function i() {
    function c(b, c) {
      return a("<" + b + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', c);
    }k.addRule(".spin-vml", "behavior:url(#default#VML)"), h.prototype.lines = function (a, d) {
      function f() {
        return e(c("group", { coordsize: k + " " + k, coordorigin: -j + " " + -j }), { width: k, height: k });
      }function h(a, h, i) {
        b(m, b(e(f(), { rotation: 360 / d.lines * a + "deg", left: ~~h }), b(e(c("roundrect", { arcsize: d.corners }), { width: j, height: d.scale * d.width, left: d.scale * d.radius, top: -d.scale * d.width >> 1, filter: i }), c("fill", { color: g(d.color, a), opacity: d.opacity }), c("stroke", { opacity: 0 }))));
      }var i,
          j = d.scale * (d.length + d.width),
          k = 2 * d.scale * j,
          l = -(d.width + d.length) * d.scale * 2 + "px",
          m = e(f(), { position: "absolute", top: l, left: l });if (d.shadow) for (i = 1; i <= d.lines; i++) {
        h(i, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
      }for (i = 1; i <= d.lines; i++) {
        h(i);
      }return b(a, m);
    }, h.prototype.opacity = function (a, b, c, d) {
      var e = a.firstChild;d = d.shadow && d.lines || 0, e && b + d < e.childNodes.length && (e = e.childNodes[b + d], e = e && e.firstChild, e = e && e.firstChild, e && (e.opacity = c));
    };
  }var j,
      k,
      l = ["webkit", "Moz", "ms", "O"],
      m = {},
      n = { lines: 12, length: 7, width: 5, radius: 10, scale: 1, corners: 1, color: "#000", opacity: .25, rotate: 0, direction: 1, speed: 1, trail: 100, fps: 20, zIndex: 2e9, className: "spinner", top: "50%", left: "50%", shadow: !1, hwaccel: !1, position: "absolute" };if (h.defaults = {}, f(h.prototype, { spin: function spin(b) {
      this.stop();var c = this,
          d = c.opts,
          f = c.el = a(null, { className: d.className });if (e(f, { position: d.position, width: 0, zIndex: d.zIndex, left: d.left, top: d.top }), b && b.insertBefore(f, b.firstChild || null), f.setAttribute("role", "progressbar"), c.lines(f, c.opts), !j) {
        var g,
            h = 0,
            i = (d.lines - 1) * (1 - d.direction) / 2,
            k = d.fps,
            l = k / d.speed,
            m = (1 - d.opacity) / (l * d.trail / 100),
            n = l / d.lines;!function o() {
          h++;for (var a = 0; a < d.lines; a++) {
            g = Math.max(1 - (h + (d.lines - a) * n) % l * m, d.opacity), c.opacity(f, a * d.direction + i, g, d);
          }c.timeout = c.el && setTimeout(o, ~~(1e3 / k));
        }();
      }return c;
    }, stop: function stop() {
      var a = this.el;return a && (clearTimeout(this.timeout), a.parentNode && a.parentNode.removeChild(a), this.el = void 0), this;
    }, lines: function lines(d, f) {
      function h(b, c) {
        return e(a(), { position: "absolute", width: f.scale * (f.length + f.width) + "px", height: f.scale * f.width + "px", background: b, boxShadow: c, transformOrigin: "left", transform: "rotate(" + ~~(360 / f.lines * k + f.rotate) + "deg) translate(" + f.scale * f.radius + "px,0)", borderRadius: (f.corners * f.scale * f.width >> 1) + "px" });
      }for (var i, k = 0, l = (f.lines - 1) * (1 - f.direction) / 2; k < f.lines; k++) {
        i = e(a(), { position: "absolute", top: 1 + ~(f.scale * f.width / 2) + "px", transform: f.hwaccel ? "translate3d(0,0,0)" : "", opacity: f.opacity, animation: j && c(f.opacity, f.trail, l + k * f.direction, f.lines) + " " + 1 / f.speed + "s linear infinite" }), f.shadow && b(i, e(h("#000", "0 0 4px #000"), { top: "2px" })), b(d, b(i, h(g(f.color, k), "0 0 1px rgba(0,0,0,.1)")));
      }return d;
    }, opacity: function opacity(a, b, c) {
      b < a.childNodes.length && (a.childNodes[b].style.opacity = c);
    } }), "undefined" != typeof document) {
    k = function () {
      var c = a("style", { type: "text/css" });return b(document.getElementsByTagName("head")[0], c), c.sheet || c.styleSheet;
    }();var o = e(a("group"), { behavior: "url(#default#VML)" });!d(o, "transform") && o.adj ? i() : j = d(o, "animation");
  }return h;
});

},{}],46:[function(require,module,exports){
'use strict';

//https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
if (window.Element && !Element.prototype.closest) {
    Element.prototype.closest = function (s) {
        var matches = (this.document || this.ownerDocument).querySelectorAll(s),
            i,
            el = this;
        do {
            i = matches.length;
            while (--i >= 0 && matches.item(i) !== el) {};
        } while (i < 0 && (el = el.parentElement));
        return el;
    };
}

Number.isInteger = Number.isInteger || function (value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

//https://gist.github.com/paulirish/1579671
var requestAnimationFramePolyfill = function () {
    var clock = Date.now();

    return function (callback) {

        var currentTime = Date.now();

        if (currentTime - clock > 16) {
            clock = currentTime;
            callback(currentTime);
        } else {
            setTimeout(function () {
                polyfill(callback);
            }, 0);
        }
    };
}();

window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || requestAnimationFramePolyfill;

if (!window.Intl) {
    require('intl');
    require('intl/locale-data/jsonp/en.js');
}

//http://www.javascriptkit.com/dhtmltutors/sticky-hover-issue-solutions.shtml
var touchsupport = 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
if (!touchsupport) {
    // browser doesn't support touch
    document.documentElement.classList.add("non-touch");
}

require('smoothscroll-polyfill').polyfill();

module.exports = true;

},{"intl":"intl","intl/locale-data/jsonp/en.js":259,"smoothscroll-polyfill":263}],47:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create({

    Error: require('../../lib/MyError'),

    Resource: require('./views/Resource'),

    ViewFactory: require('./factory/View'),

    Views: require('./.ViewMap'),

    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    initialize: function initialize() {
        var _this = this;

        this.content = document.querySelector('#content');

        window.onpopstate = this.handle.bind(this);

        this.user = require('./models/User');

        this.user.on('loggedIn', function () {
            return _this.onLogin();
        });

        this.userPromise = new Promise(function (resolve, reject) {
            return _this.user.fetch().done(resolve).fail(reject);
        });

        this.footer = this.ViewFactory.create('footer', { insertion: { el: this.content, method: 'after' } });

        this.views = {};

        this.handle();
    },
    handle: function handle() {
        this.handler(window.location.pathname.split('/').slice(1));
    },
    handleHeader: function handleHeader(resource) {
        var _this2 = this;

        if (/admin/.test(resource)) {
            if (this.adminHeader) {
                this.adminHeader.onNavigation();
            } else {
                this.adminHeader = this.ViewFactory.create('adminHeader', { insertion: { el: this.content, method: 'insertBefore' } }).on('signout', function () {
                    return _this2.onSignout();
                });
            }
        } else {
            if (this.adminHeader) {
                this.adminHeader.hide();
            }
            if (this.header) {
                return;
            } else {
                this.header = this.ViewFactory.create('header', { insertion: { el: this.content, method: 'insertBefore' } }).on('navigate', this.onViewNavigate.bind(this));
            }
        }
    },
    handleFooter: function handleFooter(resource) {
        this.footer.els.container.classList.toggle('fd-hidden', /admin/.test(resource));
    },
    handler: function handler(path) {
        var _this3 = this;

        if (path[0] === 'admin' && path[1]) return this.resourceHandler(path[1]);

        var name = this.pathToView(path[0]),
            view = this.Views[name] ? path[0] : 'home';

        if (this.resources[path[0]]) view = path[0];

        this.handleHeader(path[0]);
        this.handleFooter(path[0]);

        this.userPromise.then(function () {
            if (_this3.user.id && /admin/.test(path[0])) _this3.adminHeader.onUser(_this3.user);

            if (view === _this3.currentView) return _this3.views[view].onNavigation(path.slice(1));

            Promise.all(Object.keys(_this3.views).map(function (view) {
                return _this3.views[view].hide();
            })).then(function () {

                _this3.currentView = view;

                if (_this3.views[view]) return _this3.views[view].onNavigation(path);

                _this3.views[view] = !_this3.resources[view] ? _this3.ViewFactory.create(view, {
                    insertion: { el: _this3.content },
                    path: path
                }).on('navigate', function (route, options) {
                    return _this3.navigate(route, options);
                }).on('deleted', function () {
                    return delete _this3.views[view];
                }) : new _this3.resources[view].view(_extends({ factory: _this3.ViewFactory }, _this3.resources[view].options)).on('navigate', function (route, options) {
                    return _this3.navigate(route, options);
                });

                if (!/admin/.test(path[0])) document.body.scrollTop = 0;

                return Promise.resolve();
            });
        }).catch(function (err) {
            return new _this3.Error(err);
        });
    },
    navigate: function navigate(location) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (options.replace || options.up) {
            var path = ('' + window.location.pathname).split('/');
            path.pop();
            if (options.replace) path.push(location);
            location = path.join('/');
        } else if (options.append) {
            location = window.location.pathname + '/' + location;
        }

        if (location !== window.location.pathname) history.pushState({}, '', location);
        if (!options.silent) this.handle();
    },
    onLogin: function onLogin() {
        this.onUser(this.user);
    },
    onViewNavigate: function onViewNavigate(route) {
        this.navigate(route, { trigger: true });
    },
    onSignout: function onSignout() {
        var _this4 = this;

        Object.keys(this.views).forEach(function (name) {
            _this4.views[name].delete();
            delete _this4.views[name];
        });

        this.navigate("/");
    },
    onUser: function onUser(user) {
        if (this.adminHeader) this.adminHeader.onUser(this.user);
    },
    pathToView: function pathToView(path) {
        var _this5 = this;

        var hyphenSplit = path.split('-');
        return hyphenSplit.map(function (item) {
            return _this5.capitalizeFirstLetter(item);
        }).join('');
    },
    resourceHandler: function resourceHandler(resource) {
        var _this6 = this;

        this.handleHeader('admin/' + resource);
        this.handleFooter('admin/' + resource);

        this.userPromise.then(function () {

            if (_this6.user.id) _this6.adminHeader.onUser(_this6.user);

            Object.keys(_this6.views).forEach(function (key) {
                return _this6.views[key].hide();
            });

            if (_this6.views.resource) return _this6.views.resource.update(resource);

            _this6.views.resource = new _this6.Resource({ resource: resource });
        }).catch(function (err) {
            return new _this6.Error(err);
        });
    },


    resources: {
        admin: {
            view: require('./views/Admin'),
            options: {
                collection: {
                    comparator: "name",
                    model: require('./models/Resource'),
                    parse: function parse(response) {
                        return response.resource;
                    },
                    url: "/"
                },
                fetch: { headers: { accept: "application/ld+json" } }
            }
        },
        "sign-up": { view: require('./views/Signup'), options: {} }
    }

});

},{"../../lib/MyError":200,"./.ViewMap":3,"./factory/View":8,"./models/Resource":36,"./models/User":42,"./views/Admin":88,"./views/Resource":114,"./views/Signup":119}],48:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// http://spin.js.org/#v2.3.2
!function (a, b) {
  "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = b() : "function" == typeof define && define.amd ? define(b) : a.Spinner = b();
}(undefined, function () {
  "use strict";
  function a(a, b) {
    var c,
        d = document.createElement(a || "div");for (c in b) {
      d[c] = b[c];
    }return d;
  }function b(a) {
    for (var b = 1, c = arguments.length; c > b; b++) {
      a.appendChild(arguments[b]);
    }return a;
  }function c(a, b, c, d) {
    var e = ["opacity", b, ~~(100 * a), c, d].join("-"),
        f = .01 + c / d * 100,
        g = Math.max(1 - (1 - a) / b * (100 - f), a),
        h = j.substring(0, j.indexOf("Animation")).toLowerCase(),
        i = h && "-" + h + "-" || "";return m[e] || (k.insertRule("@" + i + "keyframes " + e + "{0%{opacity:" + g + "}" + f + "%{opacity:" + a + "}" + (f + .01) + "%{opacity:1}" + (f + b) % 100 + "%{opacity:" + a + "}100%{opacity:" + g + "}}", k.cssRules.length), m[e] = 1), e;
  }function d(a, b) {
    var c,
        d,
        e = a.style;if (b = b.charAt(0).toUpperCase() + b.slice(1), void 0 !== e[b]) return b;for (d = 0; d < l.length; d++) {
      if (c = l[d] + b, void 0 !== e[c]) return c;
    }
  }function e(a, b) {
    for (var c in b) {
      a.style[d(a, c) || c] = b[c];
    }return a;
  }function f(a) {
    for (var b = 1; b < arguments.length; b++) {
      var c = arguments[b];for (var d in c) {
        void 0 === a[d] && (a[d] = c[d]);
      }
    }return a;
  }function g(a, b) {
    return "string" == typeof a ? a : a[b % a.length];
  }function h(a) {
    this.opts = f(a || {}, h.defaults, n);
  }function i() {
    function c(b, c) {
      return a("<" + b + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', c);
    }k.addRule(".spin-vml", "behavior:url(#default#VML)"), h.prototype.lines = function (a, d) {
      function f() {
        return e(c("group", { coordsize: k + " " + k, coordorigin: -j + " " + -j }), { width: k, height: k });
      }function h(a, h, i) {
        b(m, b(e(f(), { rotation: 360 / d.lines * a + "deg", left: ~~h }), b(e(c("roundrect", { arcsize: d.corners }), { width: j, height: d.scale * d.width, left: d.scale * d.radius, top: -d.scale * d.width >> 1, filter: i }), c("fill", { color: g(d.color, a), opacity: d.opacity }), c("stroke", { opacity: 0 }))));
      }var i,
          j = d.scale * (d.length + d.width),
          k = 2 * d.scale * j,
          l = -(d.width + d.length) * d.scale * 2 + "px",
          m = e(f(), { position: "absolute", top: l, left: l });if (d.shadow) for (i = 1; i <= d.lines; i++) {
        h(i, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
      }for (i = 1; i <= d.lines; i++) {
        h(i);
      }return b(a, m);
    }, h.prototype.opacity = function (a, b, c, d) {
      var e = a.firstChild;d = d.shadow && d.lines || 0, e && b + d < e.childNodes.length && (e = e.childNodes[b + d], e = e && e.firstChild, e = e && e.firstChild, e && (e.opacity = c));
    };
  }var j,
      k,
      l = ["webkit", "Moz", "ms", "O"],
      m = {},
      n = { lines: 12, length: 7, width: 5, radius: 10, scale: 1, corners: 1, color: "#000", opacity: .25, rotate: 0, direction: 1, speed: 1, trail: 100, fps: 20, zIndex: 2e9, className: "spinner", top: "50%", left: "50%", shadow: !1, hwaccel: !1, position: "absolute" };if (h.defaults = {}, f(h.prototype, { spin: function spin(b) {
      this.stop();var c = this,
          d = c.opts,
          f = c.el = a(null, { className: d.className });if (e(f, { position: d.position, width: 0, zIndex: d.zIndex, left: d.left, top: d.top }), b && b.insertBefore(f, b.firstChild || null), f.setAttribute("role", "progressbar"), c.lines(f, c.opts), !j) {
        var g,
            h = 0,
            i = (d.lines - 1) * (1 - d.direction) / 2,
            k = d.fps,
            l = k / d.speed,
            m = (1 - d.opacity) / (l * d.trail / 100),
            n = l / d.lines;!function o() {
          h++;for (var a = 0; a < d.lines; a++) {
            g = Math.max(1 - (h + (d.lines - a) * n) % l * m, d.opacity), c.opacity(f, a * d.direction + i, g, d);
          }c.timeout = c.el && setTimeout(o, ~~(1e3 / k));
        }();
      }return c;
    }, stop: function stop() {
      var a = this.el;return a && (clearTimeout(this.timeout), a.parentNode && a.parentNode.removeChild(a), this.el = void 0), this;
    }, lines: function lines(d, f) {
      function h(b, c) {
        return e(a(), { position: "absolute", width: f.scale * (f.length + f.width) + "px", height: f.scale * f.width + "px", background: b, boxShadow: c, transformOrigin: "left", transform: "rotate(" + ~~(360 / f.lines * k + f.rotate) + "deg) translate(" + f.scale * f.radius + "px,0)", borderRadius: (f.corners * f.scale * f.width >> 1) + "px" });
      }for (var i, k = 0, l = (f.lines - 1) * (1 - f.direction) / 2; k < f.lines; k++) {
        i = e(a(), { position: "absolute", top: 1 + ~(f.scale * f.width / 2) + "px", transform: f.hwaccel ? "translate3d(0,0,0)" : "", opacity: f.opacity, animation: j && c(f.opacity, f.trail, l + k * f.direction, f.lines) + " " + 1 / f.speed + "s linear infinite" }), f.shadow && b(i, e(h("#000", "0 0 4px #000"), { top: "2px" })), b(d, b(i, h(g(f.color, k), "0 0 1px rgba(0,0,0,.1)")));
      }return d;
    }, opacity: function opacity(a, b, c) {
      b < a.childNodes.length && (a.childNodes[b].style.opacity = c);
    } }), "undefined" != typeof document) {
    k = function () {
      var c = a("style", { type: "text/css" });return b(document.getElementsByTagName("head")[0], c), c.sheet || c.styleSheet;
    }();var o = e(a("group"), { behavior: "url(#default#VML)" });!d(o, "transform") && o.adj ? i() : j = d(o, "animation");
  }return h;
});

},{}],49:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var alias1 = container.lambda,
                alias2 = container.escapeExpression;

            return "                        <th class=\"w" + alias2(alias1(depth0 != null ? depth0.width : depth0, depth0)) + "\" data-sort=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\">" + alias2(alias1(depth0 != null ? depth0.label : depth0, depth0)) + "</th>                    ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<div data-js=\"container\" class=\"col-sm-10 col-sm-offset-1\"><div class=\"sub-heading\">Resources</div><div class=\"row mytable\"><table data-js=\"table\"><thead data-js=\"header\"><tr class=\"clearfix\">                    " + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.fields : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "                </tr></thead><tbody data-js=\"body\"></tbody></table></div></div>";
        }, "useData": true });
};

},{}],50:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var stack1;

            return (stack1 = container.lambda(depth0, depth0)) != null ? stack1 : "";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<form class=\"form-horizontal create-instance\">" + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.fields : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "</form>";
        }, "useData": true });
};

},{}],51:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class='intro'>" + p.intro + "</div><p>" + p.paragraph + "</p>";
};

},{}],52:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<span class=\"help-block " + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" data-js=\"fieldError\">" + alias4((helper = (helper = helpers.error || (depth0 != null ? depth0.error : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "error", "hash": {}, "data": data }) : helper)) + "</span>";
        }, "useData": true });
};

},{}],53:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><select data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\"><option value=\"true\">True</option><option value=\"false\">False</option></select></div></div>";
        }, "useData": true });
};

},{}],54:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><div class=\"input-group date\"><input data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" type=\"text\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\"/><span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span></div></div></div>";
        }, "useData": true });
};

},{}],55:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><select data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\"><option value=\"0\">Sunday</option><option value=\"1\">Monday</option><option value=\"2\">Tuesday</option><option value=\"3\">Wednesday</option><option value=\"4\">Thursday</option><option value=\"5\">Friday</option><option value=\"6\">Saturday</option></select></div></div>";
        }, "useData": true });
};

},{}],56:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group file-upload\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><button type=\"button\" data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "Btn\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "-btn\" class=\"btn btn-primary upload-wrap " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\"><span>Upload File</span><input type=\"file\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" /></button><img class=\"preview\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "-preview\" data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "Preview\" /></div></div>";
        }, "useData": true });
};

},{}],57:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            return "password";
        }, "3": function _(container, depth0, helpers, partials, data) {
            return "text";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1,
                helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><input data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" type=\"" + ((stack1 = helpers["if"].call(alias1, depth0 != null ? depth0.password : depth0, { "name": "if", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.program(3, data, 0), "data": data })) != null ? stack1 : "") + "\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\"/></div></div>";
        }, "useData": true });
};

},{}],58:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><textarea data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" rows=\"4\"></textarea></div></div>";
        }, "useData": true });
};

},{}],59:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var stack1,
                helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "        <td class=\"w" + alias4((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "width", "hash": {}, "data": data }) : helper)) + " " + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\">" + ((stack1 = (helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "value", "hash": {}, "data": data }) : helper)) != null ? stack1 : "") + "</td>    ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1,
                helper,
                alias1 = depth0 != null ? depth0 : {};

            return "<tr data-id=\"" + container.escapeExpression((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing, typeof helper === "function" ? helper.call(alias1, { "name": "id", "hash": {}, "data": data }) : helper)) + "\"  class=\"clearfix\" data-js=\"container\">    " + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.values : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "</tr>";
        }, "useData": true });
};

},{}],60:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            return "<div data-js=\"invalidLoginError\" class=\"alert alert-danger\" role=\"alert\">Invalid Credentials</div>";
        }, "useData": true });
};

},{}],61:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var alias1 = container.lambda,
                alias2 = container.escapeExpression;

            return "            <div class=\"form-group\"><label for=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\" class=\"col-sm-3 control-label\">" + alias2(alias1(depth0 != null ? depth0.label : depth0, depth0)) + "</label><div class=\"col-sm-9\"><input type=\"" + alias2(alias1(depth0 != null ? depth0.type : depth0, depth0)) + "\" class=\"form-control\" data-js=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\"></div></div>        ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<div data-js=\"container\" class=\"container col-sm-4 col-sm-offset-4\"><div class=\"heading\">Login</div><form class=\"form-horizontal\">        " + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.fields : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </form><div class=\"text-center\"><button data-js=\"loginBtn\" type=\"button\" class=\"btn btn-primary\">Log In</button></div></div>";
        }, "useData": true });
};

},{}],62:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            return "<div data-js=\"container\" class=\"modal fade\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div data-js=\"header\" class=\"modal-header\"><button data-js=\"closeBtn\" type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\" data-js=\"title\"></h4></div><div data-js=\"body\" class=\"modal-body\"></div><div data-js=\"footer\" class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-js=\"cancelBtn\" data-dismiss=\"modal\">Close</button><button type=\"button\" class=\"btn btn-primary\" data-js=\"confirmBtn\">Save</button></div></div></div></div>";
        }, "useData": true });
};

},{}],63:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var alias1 = container.lambda,
                alias2 = container.escapeExpression;

            return "                        <th class=\"w" + alias2(alias1(depth0 != null ? depth0.width : depth0, depth0)) + "\" data-sort=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\">" + alias2(alias1(depth0 != null ? depth0.label : depth0, depth0)) + "</th>                    ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<div data-js=\"container\" class=\"col-sm-10 col-sm-offset-1 resource\"><div class=\"sub-heading\"><span data-js=\"subHeading\"></span><button data-js=\"createBtn\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-plus\"></span></button></div><div class=\"row mytable\"><button data-js=\"editBtn\" class=\"btn btn-primary edit-btn hide\"><span class=\"glyphicon glyphicon-pencil\"></span></button><button data-js=\"deleteBtn\" class=\"btn btn-primary delete-btn hide\"><span class=\"glyphicon glyphicon-remove\"></span></button><table data-js=\"table\"><thead data-js=\"header\"><tr class=\"clearfix\">                    " + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.fields : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "                </tr></thead><tbody data-js=\"body\"></tbody></table></div></div>";
        }, "useData": true });
};

},{}],64:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var alias1 = container.lambda,
                alias2 = container.escapeExpression;

            return "        <td class=\"w" + alias2(alias1(depth0 != null ? depth0.width : depth0, depth0)) + "\" data-js=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\">" + alias2(alias1(depth0 != null ? depth0.value : depth0, depth0)) + "</td>    ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<tr class=\"clearfix\" data-js=\"container\">    " + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.values : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "</tr>";
        }, "useData": true });
};

},{}],65:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            return "<div data-js=\"serverError\" class=\"alert alert-danger\" role=\"alert\">Unknown error, please try again or contact us at admin@wellpledge.com</div>";
        }, "useData": true });
};

},{}],66:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div data-js=\"container\" class=\"Signup\">\n    <h1>Sign Up</h1>\n    <h2 data-js=\"intro\">Welcome to our CSA Sign Up Page</h2>\n    <section>\n        <div data-js=\"walkthrough\"></div>\n        <div class=\"nav-arrows\">\n            <div data-js=\"leftBtn\">\n                <span class=\"glyphicon glyphicon-menu-left\"></span>\n                <span>Back</span>\n            </div>\n            <div data-js=\"rightBtn\">\n                <span>Next</span>\n                <span class=\"glyphicon glyphicon-menu-right\"></span>\n            </div>\n        </div>\n    </section>\n</div>";
};

},{}],67:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"DateSelection\" data-js=\"container\">\n    <div>Not going to be around?</div>\n    <div>Please choose any dates for which you will not be available to receive or pick up your share.</div>\n    <ul data-js=\"shares\"></ul>\n</div>";
};

},{}],68:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"Delivery\" data-js=\"container\">\n    <p>Please select a delivery option for your share(s).</p>\n    <ul data-js=\"shares\"></ul>\n</div>";
};

},{}],69:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li class=\"delivery-option\" data-id=\"" + p.id + "\" data-js=\"container\">\n    <div>" + p.label + "</div>\n    <div data-js=\"deliveryPrice\">" + p.price + " / week</span></div>\n</li>";
};

},{}],70:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"delivery-options\">\n    <div>\n        <div class=\"share-label\">\n            <div>" + p.label + "</div>\n            <div>\n                <span>" + p.humanStartdate + "</span>\n                <span>-</span>\n                <span>" + p.humanEnddate + "</span>\n            </div>\n            <div>" + p.duration + " weeks</div>\n        </div>\n        <div>\n            <div data-js=\"options\" class=\"options\"></div>\n            <div data-js=\"feedback\" class=\"feedback-messages\"></div>\n        </div>\n    </div>\n    <div data-js=\"dropoffs\"></div>\n    <div class=\"error\">Please select a valid option.</div>\n</li>";
};

},{}],71:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div data-js="container" class="dropoff">\n    <div>' + p.label + '</div>\n    <div>' + (p.venue || '') + '</div>\n    <div>' + p.street + '</div>\n    <div>' + p.cityStateZip + '</div>\n    <div>' + p.dayOfWeek + ' : ' + p.starttime + ' - ' + p.endtime + '</div>\n</div>';
};

},{}],72:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div class=\"dropoffs\" data-js=\"container\"></div>";
};

},{}],73:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div>On-farm pickup available " + p.dayOfWeek + " " + p.starttime + " - " + p.endtime + "</div>";
};

},{}],74:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div>Home delivery available " + p.dayOfWeek + " " + p.starttime + " - " + p.endtime + "</div>";
};

},{}],75:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"payment-option\">\n    <div>" + p.label + "</div>\n    <div>" + p.note + "</div>\n    <div class=\"method-total\"></div>    \n</li>";
};

},{}],76:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<ul class=\"payment-options\" data-js=\"container\"></ul>";
};

},{}],77:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div data-js="container" class="pickup-date ' + (p.selected ? 'selected' : '') + ' ' + (p.unselectable ? 'unselectable' : '') + '">\n    <div>' + p.dayOfWeek + '</div>\n    <div>' + p.month + '</div>\n    <div>' + p.dayOfMonth + '</div>\n</div>';
};

},{}],78:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"share-dates\">\n    <div>\n        <div class=\"share-label\">\n            <div>" + p.label + "</div>\n            <div>\n                <span>" + p.humanStartdate + "</span>\n                <span>-</span>\n                <span>" + p.humanEnddate + "</span>\n            </div>\n            <div>" + p.duration + " weeks</div>\n        </div>\n        <div data-js=\"dates\"></div>\n    </div>\n    <div class=\"error\">Please select at least one date to receive a share.</div>\n</li>";
};

},{}],79:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"share\" data-id=\"" + p.id + "\">\n    <div>\n        <div data-js=\"shareBox\"></div>\n        <div>" + p.description + "</div>\n    </div>\n</li>";
};

},{}],80:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var options = p.options.map(function (option) {
        return '<option value="' + option.id + '">' + option.label + '</option>';
    }).join(''),
        description = p.description ? '<span data-js="optionIcon" class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>' : '';

    return '' + ('<div data-js="container" class="share-option">\n    <div class="option-title">\n        <div>\n            <span>' + p.label + '</span>\n            ' + description + '\n       </div>\n        <div>\n            <select data-js="input" class="form-control">\n                ' + options + '\n            </select>    \n        </div>\n    </div>\n    <div class="total">\n        <div data-js="total"></div>\n    </div>\n</div>');
};

},{}],81:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"ShareOptions\" data-js=\"container\">\n    <p>Please make selections to customize your box</p>\n    <ul data-js=\"shares\"></ul>\n</div>";
};

},{}],82:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"Shares\" data-js=\"container\">\n    <p>As a member in our CSA program, you will receive a weekly box of fresh-picked, chemical-free produce all grown at Patchwork Gardens, right here in the Miami Valley.</p>\n    <p>If you\u2019re not quite sure you\u2019re ready for a CSA, check out our <span data-js=\"csaInfoBtn\" class=\"link\">CSA Program</span> page for more information</p>\n    <h2>Please select which season(s) you would like to join us</h2>\n    <ul data-js=\"shares\"></ul>\n    <div class=\"error\">Please select at least one share.</div>\n</div>";
};

},{}],83:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\">\n    <div data-js=\"row\" class=\"single-share\">\n        <div data-js=\"shareBox\"></div>\n        <div data-js=\"options\"></div>\n    </div>\n    <div><span>Share Total: </span><span data-js=\"total\"></span></div>\n</li>";
};

},{}],84:[function(require,module,exports){
'use strict';

module.exports = function (p) {

    var shares = p.shares.map(function (share) {

        var selectedOptions = share.selectedOptions.map(function (opt) {
            return '<div class="item-row">\n            <div>' + opt.optionName + '</div>\n            <div>\n                <span>' + opt.selectedOptionLabel + '</span>\n                <span>' + (p.unit || '') + '</span>\n            </div>\n            <div class="price">\n                <span>' + opt.price + '</span>\n                <span>per week</span>\n            </div>\n        </div>';
        }).join('');

        var groupdropoff = share.selectedDelivery.groupdropoff ? '<div class="item-row">\n            <div>Drop-off Location</div>\n            <div>' + share.selectedDelivery.groupdropoff + '</div>\n        </div>' : '';

        var skipDays = share.skipDays ? '<div>\n            <div class="section-title">Dates You Will Not Pickup</div>\n            <div class="pickup-dates">' + share.skipDays.join('') + '</div>\n        </div>' : '';

        return '' + ('<div class="share-summary">\n        <div>' + share.shareBox + '</div>\n        <div>\n            <div class="section-title">Share Options</div>\n            ' + selectedOptions + '\n        </div>\n        <div>\n            <div class="section-title">Delivery</div>\n            <div class="item-row">\n                <div>Method</div>\n                <div>' + share.selectedDelivery.deliveryType + '</div>\n                <div class="price">\n                    <span>' + share.selectedDelivery.weeklyCost + '</span>\n                    <span>per week</span>\n                </div>  \n            </div>\n            ' + groupdropoff + '\n            <div class="item-row">\n                <div>Address</div>\n                <div>' + share.selectedDelivery.address + '</div>\n            </div>\n            <div class="item-row">\n                <div>Pick-up Hours</div>\n                <div>\n                    <span>' + share.selectedDelivery.dayOfWeek + ' </span>\n                    <span>' + share.selectedDelivery.starttime + ' - ' + share.selectedDelivery.endtime + '</span>\n                </div>\n            </div>\n        </div>\n        <div>\n            <div class="section-title">Dates Selected for Delivery</div>\n            <div class="item-row">\n                <div>Number of weeks selected</div>\n                <div>' + share.weeksSelected + '</div>\n            </div>\n            <div class="pickup-dates">\n                ' + share.selectedDates.join('') + '\n            </div>\n        </div>\n        ' + skipDays + '\n        <div class="share-total">\n            <div class="section-title">Share Total</div>\n            <div>\n                <div>Weekly Price :</div>\n                <div>' + share.weeklyPrice + '</div>\n            </div>\n            <div>\n                <div>Number of Weeks :</div>\n                <div>' + share.weeksSelected + '</div>\n            </div>\n            <div>\n                <div>Share Total :</div>\n                <div>' + share.total + '</div>\n            </div>\n        </div>\n    </div>');
    }).join('');

    return '' + ('<div data-js="container" class="Summary ' + p.containerClass + '">\n    <div class="summaries">\n        ' + shares + '\n    </div>\n    <div data-js="grandTotal" class="grand-total"></div>\n    <div class="payment">    \n        <h2>Select a method of payment</h2>\n        <div data-js="paymentOptions"></div>\n        <form data-js="paymentForm" class="hide">\n            <div class="credit-card-info">\n                <label class="control-label number">Card Number</label>\n                <div>\n                    <input type="text" class="form-control" data-js="number" id="number">\n                    <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                </div>\n                <div>Visa, MasterCard, American Express, JCB, Discover, and Diners Club are accepted</div>\n            </div>\n            <div class="expiration">\n                <div>\n                    <label class="control-label">Exp Month</label>\n                    <div>\n                        <input type="number" class="form-control" data-js="exp_month" maxlength="2" size="3" placeholder="mm" id="exp_month">\n                        <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                    </div>\n                </div>\n                <div>\n                    <label class="control-label">Exp Year</label>\n                    <div>\n                        <input type="number" class="form-control" data-js="exp_year" maxlength="4" size="4" placeholder="yyyy" id="exp_year">\n                        <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <label class="control-label">CVC</label>\n                <div class="cvc">\n                    <input type="number" class="form-control" data-js="cvc" maxlength="4" size="4" id="cvc">\n                    <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                </div>\n            </div>\n        </form>\n        <div class="button-row">\n            <button data-js="signupBtn" class="disabled">Become a Member!</button>\n        </div>\n    </div>\n</div>');
};

},{}],85:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div>Because you have selected home delivery, and your address could not be validated automatically, we would like you to verify your address and zip code</div>\n    <form class=\"form-horizontal\">\n        <div class=\"form-group\">\n            <label class=\"col-sm-3 control-label\">Address</label>\n            <div class=\"col-sm-9\">\n                <input type=\"text\" class=\"form-control\" id=\"verifiedAddress\" value=\"" + p.address + "\">\n            </div>\n        </div>\n        <div id=\"zipCodeFormGroup\" class=\"form-group\">\n            <label class=\"col-sm-3 control-label\">Zip Code</label>\n            <div class=\"col-sm-9\">\n                <input type=\"text\" class=\"form-control\" id=\"verifiedZipCode\" value=\"" + p.zipCode + "\">\n                <span id=\"zipCodeHelpBlock\" class=\"help-block hide\">Invalid Zip Code for Home Delivery</span>\n            </div>\n        </div>\n    </form>\n</div>";
};

},{}],86:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {

    events: {
        link: 'click'
    },

    onLinkClick: function onLinkClick(e) {
        this.emit('navigate', e.target.getAttribute('data-name'));
    },


    tables: [{ name: 'Staff', el: 'staff', template: 'staffProfile' }],

    templates: {
        staffProfile: require('./templates/StaffProfile')
    }

});

},{"./__proto__":124,"./templates/StaffProfile":181,"./util/CustomContent":194}],87:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {

    Pikaday: require('pikaday'),

    Views: {
        buttonFlow: function buttonFlow() {
            return {
                model: Object.create(this.Model).constructor({
                    disabled: true,
                    states: {
                        start: [{ name: 'addTransaction', class: 'save-btn', text: 'Add Transaction', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmAdd', class: 'save-btn', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', class: 'reset-btn', nextState: 'start', text: 'Cancel', emit: true }]
                    }
                })
            };
        }
    },

    addTransaction: function addTransaction() {
        var _this = this;

        return this.model.post(_extends({ memberShareId: this.memberShareId }, this.model.attributes.reduce(function (memo, attr) {
            return _extends(memo, _defineProperty({}, attr, attr === 'created' ? _this.Moment(_this.els[attr].value, 'MMM D, YYYY').format('YYYY-MM-DD') : _this.els[attr].value));
        }, {}))).then(function () {
            return _this.Toast.showMessage('success', 'Transaction added!');
        }).catch(function (e) {
            _this.Error(e);_this.Toast.showMessage('error', 'Error adding transaction');
        });
    },
    onAddBlur: function onAddBlur(e) {
        isNaN(parseFloat(this.els.value.value)) ? this.els.form.classList.remove('active') : this.views.buttonFlow.enable();
    },
    onAddFocus: function onAddFocus(e) {
        this.els.form.classList.add('active');
    },
    onCancel: function onCancel() {
        this.reset();
        this.views.buttonFlow.disable();
    },
    postRender: function postRender() {
        var _this2 = this;

        this.model.attributes.forEach(function (attr) {
            _this2.els[attr].addEventListener('focus', function (e) {
                return _this2.onAddFocus(e);
            });
            _this2.els[attr].addEventListener('blur', function (e) {
                return _this2.onAddBlur(e);
            });
        });

        this.created = new this.Pikaday({ field: this.els.created, format: 'MMM D, YYYY' });

        this.views.buttonFlow.on('confirmAddClicked', function (e) {
            return _this2.addTransaction();
        });
        this.views.buttonFlow.on('cancelClicked', function (e) {
            return _this2.onCancel();
        });

        return this;
    },
    reset: function reset() {
        var _this3 = this;

        var now = this.Moment().format('MMM D, YYYY');
        this.model.attributes.forEach(function (attr) {
            return _this3.els[attr].value = attr === 'action' ? _this3.model.actions[0] : attr === 'created' ? now : '';
        });

        this.created.setMoment(now);
    },
    templateOpts: function templateOpts() {
        return { actions: this.model.actions };
    },
    update: function update(memberShareId) {
        this.memberShareId = memberShareId;
        this.reset();
    }
});

},{"./__proto__":124,"pikaday":"pikaday"}],88:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Table = require('./util/Table'),
    Admin = function Admin() {
    return Table.apply(this, arguments);
};

_extends(Admin.prototype, Table.prototype, {

    ItemView: require('./ResourceRow'),

    fields: [{ name: 'name', label: 'Name', width: 25 }, { name: 'label', label: 'Label', width: 25 }, { name: 'description', label: 'Description', width: 50 }],

    onItemClick: function onItemClick(model) {
        var _this = this;

        this.hide().then(function () {
            return _this.emit('navigate', '/admin/' + model.get('name'));
        }).catch(function (err) {
            return new _this.Error(err);
        });
    },


    requiresRole: 'admin',

    selection: true,

    template: require('../templates/admin')(require('handlebars'))

});

module.exports = Admin;

},{"../templates/admin":49,"./ResourceRow":115,"./util/Table":198,"handlebars":247}],89:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    events: {
        'signoutBtn': 'click'
    },

    templateOpts: { logo: '/static/img/logo.gif' },

    insertionMethod: 'before',

    onUser: function onUser() {
        this.els.name.textContent = this.user.get('name');
        this.els.userPanel.classList.remove('hide');
    },


    requiresLogin: false,

    onSignoutBtnClick: function onSignoutBtnClick() {
        document.cookie = 'patchworkjwt=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        this.user.clear();

        this.user.set(this.user.defaults);

        this.els.name.textContent = '';
        this.els.userPanel.classList.add('hide');

        this.emit('signout');
    }

});

},{"./__proto__":124}],90:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    events: {
        'collectionManagerBtn': 'click',
        'manageCustomerBtn': 'click',
        'reportingBtn': 'click'
    },

    model: {

        manageCustomer: { label: 'Manage Customers', roles: new Set(['admin']), url: 'manage-customer' },

        collectionManager: {
            label: 'Collection Manager',
            roles: new Set(['admin']),
            url: 'collection-manager'
        },

        reporting: { label: '~_~ Reporting ~_~', roles: new Set(['admin']), url: 'reporting' }
    },

    onCollectionManagerBtnClick: function onCollectionManagerBtnClick() {
        this.emit('navigate', 'admin-plus/collection-manager');
    },
    onManageCustomerBtnClick: function onManageCustomerBtnClick() {
        this.emit('navigate', 'admin-plus/manage-customer');
    },
    onNavigation: function onNavigation(path) {
        var _this = this;

        this.path = path;

        var key = this.keys.find(function (key) {
            return _this.model[key].url === path[0];
        });

        if (key !== undefined) return this.showView(key);

        Promise.all(Object.keys(this.model).map(function (key) {
            var view = _this.model[key].view;
            return view ? view.hide() : Promise.resolve();
        })).then(function () {
            _this.currentEl = _this.els.nav;return _this.showEl(_this.els.nav);
        }).catch(this.Error);
    },
    onReportingBtnClick: function onReportingBtnClick() {
        this.emit('navigate', 'admin-plus/reporting');
    },
    postRender: function postRender() {
        var _this2 = this;

        this.keys = Object.keys(this.model);

        this.keys.forEach(function (name, i) {
            if (_this2.user.get('roles').filter(function (role) {
                return _this2.model[name].roles.has(role);
            }).length) {
                _this2.slurpTemplate({ template: '<button data-js="' + name + 'Btn">' + _this2.model[name].label + '</button>', insertion: { el: _this2.els.nav } });
            }
        });

        this.currentEl = this.els.nav;

        if (this.path.length > 1) this.onNavigation(this.path.slice(1));

        return this;
    },
    showView: function showView(key) {
        var _this3 = this;

        return this.hideEl(this.currentEl).then(function () {
            _this3.model[key].view ? _this3.model[key].view.onNavigation(_this3.path.slice(1)) : _this3.model[key].view = _this3.factory.create(key, { insertion: { el: _this3.els.views }, path: _this3.path.slice(1) }).on('navigate', function (route, opts) {
                return _this3.emit('navigate', route, opts);
            });

            _this3.currentView = _this3.model[key].view;
            _this3.currentEl = _this3.model[key].view.getContainer();
            return Promise.resolve();
        }).catch(this.Error);
    },


    requiresLogin: true,

    requiresRole: 'admin'

});

},{"./__proto__":124}],91:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    disable: function disable() {
        var _this = this;

        Object.keys(this.model.data.states).forEach(function (stateName) {
            return _this.model.data.states[stateName].forEach(function (button) {
                var el = _this.els[button.name];
                el.removeEventListener('click', button.clickListener);
                el.classList.add('disabled');
            });
        });
    },
    enable: function enable() {
        var _this2 = this;

        Object.keys(this.model.data.states).forEach(function (stateName) {
            return _this2.model.data.states[stateName].forEach(function (button) {
                var el = _this2.els[button.name];
                el.addEventListener('click', button.clickListener);
                el.classList.remove('disabled');
            });
        });
    },
    getListener: function getListener(name, button) {
        var _this3 = this;

        return function (e) {
            if (button.nextState) e.fdNextState = _this3.onNextState(button.nextState);
            if (button.emit) _this3.emit(name + 'Clicked', e);
        };
    },
    onNextState: function onNextState(newState) {
        var _this4 = this;

        return this.hideEl(this.els[this.state]).then(function () {
            _this4.showEl(_this4.els[newState]);
            return Promise.resolve(_this4.state = newState);
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this5 = this;

        this.state = 'start';

        Object.keys(this.model.data.states).forEach(function (stateName) {
            return _this5.model.data.states[stateName].forEach(function (button) {
                var el = _this5.els[button.name];
                button.clickListener = _this5.getListener(button.name, button);
                if (!_this5.model.disabled) {
                    el.addEventListener('click', button.clickListener);
                }
            });
        });

        return this;
    }
});

},{"./__proto__":124}],92:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    model: require('../models/CollectionManager'),

    Collection: require('../models/Collection'),
    DocumentModel: require('../models/Document'),
    JsonPropertyModel: require('../models/JsonProperty'),
    //WebSocket: require('../WebSocket'),

    Templates: {
        Document: require('./templates/Document')
    },

    Views: {
        collections: function collections() {
            return {
                events: {
                    list: 'click'
                },
                model: Object.create(this.Model).constructor({
                    collection: Object.create(this.Collection),
                    delete: false,
                    fetch: true
                }),
                itemTemplate: function itemTemplate(collection) {
                    return '<span>' + collection.name + '</span>';
                },
                templateOpts: { heading: 'Collections', name: 'Collections', toggle: true }
            };
        },


        /*createCollection() {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create( this.Collection ).constructor(),
                templateOpts: { heading: 'Create Collection' }
            }
        },
         deleteCollection( model ) {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create( this.Collection ).constructor( model ),
                templateOpts: { message: `Delete "${model.name}" Collection?` }
            }
        },*/

        deleteDocument: function deleteDocument(document) {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create(this.DocumentModel).constructor(document, { resource: this.model.git('currentCollection') }),
                templateOpts: { message: 'Delete "' + (document.label || document.name) + '" from ' + this.model.git('currentCollection') + '?' }
            };
        },
        documentList: function documentList(model) {
            return {
                model: Object.create(this.Model).constructor(_extends(model, {
                    collection: Object.create(this.DocumentModel).constructor([], { resource: this.model.git('currentCollection') }),
                    isDocumentList: true,
                    pageSize: 100,
                    skip: 0,
                    sort: { 'label': 1 },
                    scrollPagination: true
                })),
                events: { list: 'click' },
                insertion: { el: this.els.mainPanel },
                itemTemplate: this.Templates.Document
            };
        },
        documentView: function documentView(model) {
            return {
                disallowEnterKeySubmission: true,
                insertion: { el: this.els.mainPanel },
                model: model,
                templateOpts: { heading: model.git('label') || model.git('name') },
                Views: {}
            };
        }
    },

    events: {
        createCollectionBtn: 'click',
        backBtn: 'click',
        resource: 'click',

        views: {
            collections: [['deleteClicked', function (collection) {
                var _this = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this.createView('deleter', 'deleteCollection', collection));
                }).catch(this.Error);
            }], ['fetched', function () {
                var _this2 = this;

                this.showProperView(true).then(function () {
                    return _this2.views.collections.hideItems([_this2.model.git('currentCollection')]);
                }).catch(this.Error);
            }], ['itemClicked', function (model) {
                var _this3 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this3.model.set('currentCollection', model.name));
                }).catch(this.Error);
            }], ['successfulDrop', function (data) {
                this.swapDocument({ document: data.dropped, to: data.droppedOn.name, from: this.model.git('currentCollection') }).catch(this.toastError.bind(this));
            }]],
            /*createCollection: [
                [ 'deleted', function() { this.model.set( 'currentView', 'documentList' ) } ],
                [ 'posted', function( collection ) { this.views.collections.add( collection ) } ]
            ],
            deleteCollection: [
                [ 'deleted', function() { this.model.set('currentView', 'documentList' ) } ],
                [ 'modelDeleted', function( model ) { this.views.collections.remove( model ) } ]
            ],*/
            deleteDocument: [['deleted', function () {
                this.model.set('currentView', 'documentList');
            }], ['modelDeleted', function (model) {
                var _this4 = this;

                this.views.documentList.remove(model);
                this.views.documentList.getCount().then(function (count) {
                    return _this4.updateCount(count);
                }).catch(this.Error);
            }]],
            documentList: [['addClicked', function () {
                var _this5 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this5.createView('form', 'documentView', _this5.createModel('documentView')));
                }).catch(this.Error);
            }], ['itemClicked', function (document) {
                this.onDocumentSelected(document);
            }],
            //[ 'dragStart', function( type ) { this.views.collections.showDroppable( type ) } ],
            //[ 'dropped', function( data ) { this.views.collections.hideDroppable(); this.views.collections.checkDrop( data ) } ],
            ['deleteClicked', function (document) {
                var _this6 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this6.createView('deleter', 'deleteDocument', document));
                }).catch(this.Error);
            }]],
            documentView: [['deleted', function (model) {
                this.model.set('currentView', 'documentList');
            }], ['put', function (model) {
                var _this7 = this;

                if (this.views.documentList.fetched) this.views.documentList.updateItem(this.createModel('documentView', model));
                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this7.model.set('currentView', 'documentList'));
                }).catch(this.Catch);
            }], ['posted', function (model) {
                var _this8 = this;

                if (this.views.documentList.fetched) this.views.documentList.add(model, true);
                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this8.model.set('currentView', 'documentList'));
                }).catch(this.Catch);
            }]]

        }
    },

    clearCurrentView: function clearCurrentView() {
        var currentView = this.model.git('currentView');

        return currentView !== 'documentList' ? this.views[currentView].delete({ silent: true }) : this.views[currentView].hide();
    },
    createDocumentList: function createDocumentList(collectionName) {
        var _this9 = this;

        var fetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var model = this.createModel('documentList');

        this.createView('list', 'documentList', model);
        this.views.documentList.getCount().then(function (count) {
            return _this9.updateCount(count);
        }).catch(this.Error);
        return this.views.collections.unhideItems().hideItems([this.model.git('currentCollection')]);
    },
    createModel: function createModel(type) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var collection = this.views.collections.collection.store.name[this.model.git('currentCollection')];

        if (type === 'documentList') return collection.clientData;

        var schema = this.model.git('currentCollection') === 'Pages' ? collection.documents.find(function (doc) {
            return doc.name === data.label.replace(' ', '');
        }).schema : collection.schema;

        return Object.create(this.Model).constructor(data, _extends({ resource: this.model.git('currentCollection') }, schema));
    },
    createView: function createView(type, name, model) {
        var _this10 = this;

        this.views[name] = this.factory.create(type, Reflect.apply(this.Views[name], this, [model]));

        if (this.events.views[name]) this.events.views[name].forEach(function (arr) {
            return _this10.views[name].on(arr[0], function (eventData) {
                return Reflect.apply(arr[1], _this10, [eventData]);
            });
        });
        this.model.set('currentView', name);
    },
    getDocument: function getDocument(collection, documentName) {
        return Object.create(this.Model).constructor({}, { resource: this.path[0] }).get({ query: { name: this.path[1] } });
    },
    onBackBtnClick: function onBackBtnClick() {
        this.emit('navigate', '/admin-plus');
    },
    onCreateCollectionBtnClick: function onCreateCollectionBtnClick() {
        var _this11 = this;

        this.clearCurrentView().then(function () {
            return Promise.resolve(_this11.createView('form', 'createCollection'));
        }).catch(this.Error);
    },
    onDocumentSelected: function onDocumentSelected(document) {
        var _this12 = this;

        return this.clearCurrentView().then(function () {
            return Promise.resolve(_this12.showDocumentView(document));
        }).catch(this.Error);
    },
    onNavigation: function onNavigation(path) {
        var _this13 = this;

        this.path = path;

        (this.isHidden() ? this.show() : Promise.resolve()).then(function () {
            return _this13.clearCurrentView();
        }).then(function () {
            return _this13.showProperView(false);
        }).catch(this.Error);
    },
    onResourceClick: function onResourceClick() {
        var _this14 = this;

        if (this.model.git('currentView') === 'documentList') return;

        this.clearCurrentView().then(function () {
            return Promise.resolve(_this14.model.set('currentView', 'documentList'));
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this15 = this;

        if (this.path.length > 0) this.model.set('currentCollection', this.path[0]);

        this.model.on('currentCollectionChanged', function () {
            return _this15.views.documentList.delete({ silent: true }).then(function () {
                return _this15.createDocumentList(_this15.model.git('currentCollection'));
            }).catch(_this15.Error);
        });

        this.model.on('currentViewChanged', function () {
            var currentView = _this15.model.git('currentView'),
                currentCollection = _this15.model.git('currentCollection'),
                path = currentView === 'documentView' ? '/' + currentCollection + '/' + _this15.views.documentView.model.git('name') : currentView === 'documentList' ? '/' + currentCollection : '';

            _this15.emit('navigate', '/admin-plus/collection-manager' + path, { silent: true });
            console.log('currentViewChanged');
            console.log(currentView);
            console.log(_this15.views.documentList.collection.data);
            console.log(currentView === 'documentList' && _this15.views.documentList.collection.data.length === 0);
            (currentView === 'documentList' && _this15.views.documentList.collection.data.length === 0 ? _this15.views.documentList.fetch() : Promise.resolve()).then(function () {
                return _this15.views[currentView].show();
            }).catch(_this15.Error);
        });

        return this;
    },
    showDocumentView: function showDocumentView(document) {
        this.createView('form', 'documentView', this.createModel('documentView', document));
    },
    showProperView: function showProperView() {
        var _this16 = this;

        console.log('showProperView');
        console.log(this.path);
        console.log(this.views.documentList);
        console.log(this.model.git('currentCollection'));
        return (this.views.documentList ? Promise.resolve() : this.createDocumentList(this.model.git('currentCollection'), this.path.length === 2 ? false : true)).then(function () {
            return _this16.path.length === 2 ? _this16.getDocument().then(function (document) {
                return Array.isArray(document) ? Promise.resolve(_this16.model.set('currentView', 'documentList')) : _this16.clearCurrentView().then(function () {
                    return Promise.resolve(_this16.showDocumentView(document, false));
                }).catch(_this16.Catch);
            }) : Promise.resolve(_this16.model.set('currentView', 'documentList'));
        });
    },
    swapDocument: function swapDocument(_ref) {
        var _this17 = this;

        var document = _ref.document,
            to = _ref.to,
            from = _ref.from;

        return this.Xhr({ method: 'PATCH', resource: 'Document', id: document._id, data: JSON.stringify({ to: to, from: from }) }).then(function () {
            return Promise.resolve(_this17.views.documentList.remove(document));
        });
    },
    toastError: function toastError(e) {
        this.Error(e);
        this.Toast.showMessage('error', 'Something went wrong. Please try again or contact Chris.');
    },
    updateCount: function updateCount(count) {
        this.els.resource.textContent = this.model.git('currentCollection') + ' (' + count + ')';
    }
});

},{"../models/Collection":10,"../models/CollectionManager":11,"../models/Document":21,"../models/JsonProperty":27,"./__proto__":124,"./templates/Document":157}],93:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {

    tables: [{ name: 'contactinfo', el: 'contactInfo', template: 'contact' }],

    templates: {
        contact: require('./templates/Location')
    }

});

},{"./__proto__":124,"./templates/Location":169,"./util/CustomContent":194}],94:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), require('./util/CustomContent'), {

    CurrentShare: require('../models/CurrentShare'),
    Shares: Object.create(require('../models/__proto__'), { resource: { value: 'Share' } }),
    ShareOptions: Object.create(require('../models/__proto__'), { resource: { value: 'shareoption' } }),

    events: {
        link: 'click',
        signupBtn: 'click'
    },

    hashToElement: {
        'how-do-i-know': 'howDoIKnow'
    },

    insertAddOnDescriptions: function insertAddOnDescriptions() {
        var _this = this;

        this.ShareOptions.data.filter(function (opt) {
            return opt.name !== 'Share size';
        }).forEach(function (shareOpt) {
            var addOnInfo = _this.CurrentShare.data.produceOptions.find(function (produceOpt) {
                return produceOpt.shareoptionid === shareOpt.id && produceOpt.name === 'one';
            });

            _this.slurpTemplate({
                template: _this.templates.csaItem(_extends(addOnInfo, { heading: shareOpt.name })),
                insertion: { el: _this.els.addOnItems }
            });
        });
    },
    insertDeliveryMatrix: function insertDeliveryMatrix() {
        this.slurpTemplate({
            template: this.templates.deliveryMatrix({
                deliveryOptions: this.CurrentShare.data.deliveryOptions,
                sizeOptions: this.CurrentShare.getSizeOptions()
            }),
            insertion: { el: this.els.deliveryMatrix }
        });
    },
    insertShareDescription: function insertShareDescription(share) {
        var deliveryOpts = this.CurrentShare.data.deliveryOptions,
            sharePrice = parseFloat(this.CurrentShare.data.produceOptions.find(function (opt) {
            return opt.prompt = 'Share size' && share.name === opt.name;
        }).price.replace('$', '')),
            lowPrice = sharePrice + parseFloat(this.CurrentShare.data.deliveryOptions[0].price.replace('$', '')),
            highPrice = sharePrice + parseFloat(this.CurrentShare.data.deliveryOptions[this.CurrentShare.data.deliveryOptions.length - 1].price.replace('$', '')),
            priceRange = '$' + lowPrice.toFixed(2) + ' - $' + highPrice.toFixed(2);

        this.slurpTemplate({
            template: this.templates.csaItem(_extends(share.shareDescription, { price: priceRange })),
            insertion: { el: this.els.shareDescriptions }
        });
    },
    insertShareExample: function insertShareExample(share) {
        this.slurpTemplate({
            template: this.templates.shareExample(share.shareExample),
            insertion: { el: this.els.shareExamples }
        });
    },
    onLinkClick: function onLinkClick(e) {
        console.log('onLinkClick');
        this.emit('navigate', e.target.getAttribute('data-name'));
    },
    onSignupBtnClick: function onSignupBtnClick() {
        this.emit('navigate', 'sign-up');
    },
    postRender: function postRender() {
        var _this2 = this;

        require('./util/CustomContent').postRender.call(this);

        if (window.location.hash) {
            this.els[this.hashToElement[window.location.hash.slice(1)]].scrollIntoView({ behavior: 'smooth' });
        }

        Promise.all([this.CurrentShare.get(), this.Shares.get(), this.ShareOptions.get()]).then(function () {
            _this2.insertDeliveryMatrix();

            _this2.Shares.data.forEach(function (share) {
                _this2.insertShareExample(share);
                _this2.insertShareDescription(share);
            });

            _this2.insertAddOnDescriptions();
        }).catch(this.Error);

        return this;
    },


    templates: {
        csaItem: require('./templates/CsaItem'),
        deliveryMatrix: require('./templates/deliveryMatrix'),
        shareExample: require('./templates/ShareExample')
    }

});

},{"../models/CurrentShare":15,"../models/__proto__":43,"./__proto__":124,"./templates/CsaItem":152,"./templates/ShareExample":179,"./templates/deliveryMatrix":185,"./util/CustomContent":194}],95:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    MemberFoodOmission: require('../models/MemberFoodOmission'),

    clear: function clear() {
        var _this = this;

        this.fields.forEach(function (field) {
            if (field.type !== 'select') _this.els[field.name].textContent = '';
        });

        this.els.infoTable.querySelectorAll('.edited').forEach(function (el) {
            return el.classList.remove('edited');
        });

        this.FoodOmission.clear();

        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');
    },


    events: {
        onpaymentplan: 'change',
        resetBtn: 'click',
        saveBtn: 'click'
    },

    fields: [{ table: 'person', type: 'text', name: 'name', label: 'Name' }, { table: 'person', type: 'text', name: 'email', label: 'Email' }, { table: 'person', type: 'text', name: 'secondaryEmail', label: 'Secondary Email' }, { table: 'member', type: 'text', name: 'phonenumber', label: 'Phone' }, { table: 'member', type: 'text', name: 'zipcode', label: 'Zip Code' }, { table: 'member', type: 'text', name: 'address', label: 'Address' }, { table: 'memberFoodOmission', type: 'select', name: 'neverReceive', label: 'Vegetable to Never Receive' }, { table: 'member', type: 'select', name: 'onpaymentplan', label: 'On Payment Plan' }],

    getTemplateOptions: function getTemplateOptions() {
        return { fields: this.fields };
    },
    handleBlur: function handleBlur(e) {
        var el = e.target,
            field = this.fields.find(function (field) {
            return field.name === el.getAttribute('data-name');
        }),
            fieldValue = el.textContent.trim(),
            modelValue = this.model[field.table].data[field.name] || '';

        if (fieldValue !== modelValue) {
            el.classList.add('edited');
            this.editedFields[field.name] = fieldValue || null;
            this.showEditSummary();
            this.emit('edited');
        } else if (this.editedFields[field.name] !== undefined) {
            el.classList.remove('edited');
            this.editedFields[field.name] = undefined;
            this.showEditSummary();
        }
    },
    hasEdits: function hasEdits() {
        var _this2 = this;

        return Object.keys(this.editedFields).filter(function (key) {
            return _this2.editedFields[key] !== undefined;
        }).length > 0;
    },
    handleEdit: function handleEdit(e) {
        this.els.resetBtn.classList.remove('fd-hidden');
    },
    handleOmissionChange: function handleOmissionChange(e, m) {
        var values = m.val(),
            name = values.length ? m.val()[0].name : '',
            originalName = this.MemberFoodOmission.data.length ? this.MemberFoodOmission.data[0].name : '';

        if (originalName !== name) {
            this.editedFields.neverReceive = name;
            this.emit('edited');
            this.showEditSummary();
        } else if (this.editedFields.neverReceive !== undefined) {
            this.editedFields.neverReceive = undefined;
            this.showEditSummary();
        }
    },
    onOnpaymentplanChange: function onOnpaymentplanChange(e) {
        var el = e.target,
            fieldValue = Boolean(el.value === "true"),
            modelValue = this.model.member.data.onpaymentplan;

        if (modelValue !== fieldValue) {
            el.classList.add('edited');
            this.editedFields['onpaymentplan'] = Boolean(el.value === "true");
            this.emit('edited');
            this.showEditSummary();
        } else if (this.editedFields.onpaymentplan !== undefined) {
            el.classList.remove('edited');
            this.editedFields.onpaymentplan = undefined;
            this.showEditSummary();
        }
    },
    onResetBtnClick: function onResetBtnClick() {
        this.reset(this.model);
    },
    onSaveBtnClick: function onSaveBtnClick() {
        var _this3 = this;

        var resourcesToUpdate = [];

        this.memberData = {};
        this.personData = {};
        this.memberFoodOmissionData = {};

        this.fields.forEach(function (field) {
            if (_this3.editedFields[field.name] !== undefined) {
                _this3[field.table + 'Data'][field.name] = _this3.editedFields[field.name];
                if (resourcesToUpdate.indexOf(field.table) === -1) resourcesToUpdate.push(field.table);
            }
        });

        return Promise.all(resourcesToUpdate.map(function (resource) {
            return _this3['update' + (resource.charAt(0).toUpperCase() + resource.slice(1))]();
        })).then(function () {
            _this3.els.resetBtn.classList.add('fd-hidden');
            _this3.els.editSummary.classList.add('fd-hidden');

            _this3.Toast.showMessage('success', 'Customer Info Updated!');
            _this3.update(_this3.model);
        }).catch(this.Error);
    },
    populateTable: function populateTable() {
        var _this4 = this;

        this.fields.forEach(function (field) {
            if (field.type !== 'select') _this4.els[field.name].textContent = _this4.model[field.table].data[field.name];
        });

        if (this.MemberFoodOmission.data.length) {
            var datum = this.MemberFoodOmission.data[0],
                index = this.FoodOmission.Foods.data.findIndex(function (food) {
                return food.produceid == datum.produceid && food.produceid !== null || food.producefamilyid == datum.producefamilyid && datum.produceid === null;
            });

            if (index !== -1) {
                var foodDatum = this.FoodOmission.Foods.data[index];
                datum.name = foodDatum.name;
                this.FoodOmission.ms.setSelection([_extends({}, foodDatum, { id: index })]);
            }
        }

        this.els.onpaymentplan.selectedIndex = this.model.member.data.onpaymentplan ? 0 : 1;
    },
    postRender: function postRender() {
        var _this5 = this;

        this.FoodOmission = this.factory.create('foodOmission', { insertion: { el: this.els.neverReceive, method: 'after' } });

        this.els.neverReceive.remove();

        this.FoodOmission.initializeFoodOmission().then(function () {
            _this5.FoodOmission.removeHelperText();
            _this5.FoodOmission.unstyle();

            _this5.FoodOmission.on('selectionChange', function (e, m) {
                return _this5.handleOmissionChange(e, m);
            });
        });

        this.els.infoTable.querySelectorAll('div[contenteditable=true]').forEach(function (el) {
            el.addEventListener('blur', function (e) {
                return _this5.handleBlur(e);
            });
        });

        this.on('edited', function (e) {
            return _this5.handleEdit(e);
        });

        return this;
    },
    reset: function reset(customer) {
        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');
        this.update(customer);
    },
    showEditSummary: function showEditSummary() {
        var _this6 = this;

        var hasEdits = this.hasEdits();

        this.els.changes.innerHTML = '';

        this.fields.forEach(function (field) {
            if (_this6.editedFields[field.name] !== undefined) {
                var oldValue = field.name === 'neverReceive' ? _this6.MemberFoodOmission.data.length ? _this6.MemberFoodOmission.data[0].name : '' : _this6.model[field.table].data[field.name];
                var newValue = _this6.editedFields[field.name];

                if (!oldValue && field.name !== 'onpaymentplan') oldValue = 'EMPTY';
                if (!newValue && field.name !== 'onpaymentplan') newValue = 'EMPTY';

                if (field.name === 'onpaymentplan') {
                    oldValue = oldValue.toString();
                    newValue = newValue.toString();
                }

                if (oldValue === 'EMPTY' && newValue === 'EMPTY') return;

                _this6.slurpTemplate({ insertion: { el: _this6.els.changes }, template: _this6.Templates.fieldEdit({ label: field.label, oldValue: oldValue, newValue: newValue }) });
            }
        });

        this.els.resetBtn.classList.toggle('fd-hidden', !hasEdits);
        this.els.editSummary.classList.toggle('fd-hidden', !hasEdits);
    },


    Templates: {
        fieldEdit: require('./templates/FieldEdit')
    },

    update: function update(customer) {
        var _this7 = this;

        this.clear();

        this.model = customer;
        this.editedFields = {};

        return this.MemberFoodOmission.get({ query: { memberid: customer.member.data.id } }).then(function () {
            return _this7.populateTable();
        }).then(function () {
            return _this7.show();
        }).catch(this.Error);
    },
    updateMember: function updateMember() {
        var _this8 = this;

        return this.Xhr({ method: 'PATCH', id: this.model.member.data.id, resource: 'member', data: JSON.stringify(this.memberData) }).then(function () {
            return Promise.resolve(Object.keys(_this8.memberData).forEach(function (field) {
                return _this8.model.member.data[field] = _this8.memberData[field];
            }));
        });
    },
    updateMemberFoodOmission: function updateMemberFoodOmission() {
        var _this9 = this;

        var foodIdx = this.FoodOmission.Foods.data.findIndex(function (datum) {
            return datum.name == _this9.memberFoodOmissionData.neverReceive;
        });

        if (foodIdx === -1) return this.MemberFoodOmission.delete(this.MemberFoodOmission.data[0].id);

        var msData = this.FoodOmission.Foods.data[foodIdx],
            data = { memberid: this.model.member.data.id, produceid: msData.produceid, producefamilyid: msData.produceid ? null : msData.producefamilyid };

        return this.MemberFoodOmission.data.length ? this.MemberFoodOmission.patch(this.MemberFoodOmission.data[0].id, data) : this.MemberFoodOmission.post(data);
    },
    updatePerson: function updatePerson() {
        var _this10 = this;

        return this.Xhr({ method: 'PATCH', id: this.model.person.data.id, resource: 'person', data: JSON.stringify(this.personData) }).then(function () {
            return Promise.resolve(Object.keys(_this10.personData).forEach(function (field) {
                return _this10.model.person.data[field] = _this10.personData[field];
            }));
        });
    }
});

},{"../models/MemberFoodOmission":30,"./__proto__":124,"./templates/FieldEdit":160}],96:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), require('./Submitter'), {

    events: {
        cancelBtn: 'click',
        submitBtn: 'click'
    },

    onCancelBtnClick: function onCancelBtnClick() {
        this.delete();
    },
    onSubmitBtnClick: function onSubmitBtnClick() {
        var _this = this;

        if (this.submitting) return;
        this.onSubmitStart();
        this.submit().then(function () {
            return Promise.resolve(_this.onSubmitEnd());
        }).then(function () {
            return _this.delete();
        }).catch(function (e) {
            return _this.handleSubmissionError(e);
        });
    },
    submit: function submit() {
        var _this2 = this;

        return this.model.delete().then(function (keyValue) {
            _this2.emit('modelDeleted', _this2.model.data);
            _this2.Toast.showMessage('success', _this2.toastSuccess || 'Success');
            return Promise.resolve();
        });
    }
});

},{"./Submitter":120,"./__proto__":124}],97:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('./__proto__'), {

    Icons: {
        error: require('./templates/lib/error')(),
        success: require('./templates/lib/checkmark')()
    },

    bindEvents: function bindEvents() {
        document.body.addEventListener('mousedown', this.onMouseDown);
        document.body.addEventListener('mouseup', this.onMouseUp);
        document.body.addEventListener('mousemove', this.onMouseMove);
    },
    listen: function listen() {
        this.listeners++;

        if (this.listeners === 1) this.bindEvents();
    },


    name: 'Dragger',

    postRender: function postRender() {
        var _this = this;

        this.listeners = 0;

        this.onMouseDown = function (e) {
            console.log('onMouseDown');_this.emit('mousedown', e);
        };
        this.onMouseUp = function (e) {
            return _this.emit('mouseup', e);
        };
        this.onMouseMove = function (e) {
            return _this.emit('mousemove', e);
        };

        return this;
    },
    stopListening: function stopListening() {
        this.listeners--;

        if (this.listeners === 0) this.unbindEvents();
    },


    template: require('./templates/Dragger'),

    unbindEvents: function unbindEvents() {
        document.body.removeEventListener('mousedown', this.onMouseDown);
        document.body.removeEventListener('mouseup', this.onMouseUp);
        document.body.removeEventListener('mousemove', this.onMouseMove);
    }
}), {}).constructor();

},{"./__proto__":124,"./templates/Dragger":158,"./templates/lib/checkmark":187,"./templates/lib/error":189}],98:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    $: require('jquery'),

    Foods: require('../models/Food'),

    clear: function clear() {
        this.ms.clear();
    },
    getMagicSuggest: function getMagicSuggest() {
        return this.ms;
    },
    initializeFoodOmission: function initializeFoodOmission() {
        var _this = this;

        return this.Foods.get().then(function () {
            if (!_this.Foods.data.length) return Promise.resolve();

            var data = _this.Foods.data.map(function (food, i) {
                return _extends({ id: i }, food);
            }),
                renderer = function renderer(data) {
                return data.produceid ? '<span class="' + (data.producefamilyid ? 'produce-in-family' : '') + '">' + data.name + '</span>' : '<span class="produce-family">All ' + data.name + '</span>';
            };

            _this.ms = _this.$(_this.els.container).magicSuggest({
                allowFreeEntries: false,
                data: data,
                highlight: false,
                placeholder: '',
                maxDropHeight: 200,
                maxSelection: 1,
                renderer: renderer,
                selectionRenderer: renderer,
                valueField: 'id'
            });

            _this.ms.val = function (value) {
                return value ? _this.ms.setSelection(value) : _this.ms.getSelection();
            };

            _this.$(_this.ms).on('selectionchange', function (e, m) {
                return _this.emit('selectionChange', e, m);
            });

            return Promise.resolve();
        }).catch(this.Error);
    },
    removeHelperText: function removeHelperText() {
        this.ms.helper[0].remove();
    },
    setPlaceholder: function setPlaceholder(text) {
        this.ms.input.attr('placeholder', text);
    },
    unstyle: function unstyle() {
        this.ms.container.removeClass('form-control');
    }
});

},{"../models/Food":25,"./__proto__":124,"jquery":"jquery"}],99:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {});

},{"./__proto__":124}],100:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Submitter = require('./Submitter');

module.exports = _extends({}, require('./__proto__'), Submitter, {

    events: _extends(Submitter.events, { previewBtn: 'click' }),

    onPreviewBtnClick: function onPreviewBtnClick(e) {
        console.log('onPreviewClick');
        console.log(e.target);
        console.log(e.target.nextElementSibling);
        console.log(e.target.parentElement.previousElementSibling);
        e.target.nextElementSibling.src = this.Format.ImageSrc(e.target.parentElement.previousElementSibling.value);
    },
    clear: function clear() {
        this.inputEls.forEach(function (el) {
            return el.value = '';
        });
    },
    getElementValue: function getElementValue(el, attribute) {
        if (attribute === undefined || !attribute.fk && attribute.range && typeof attribute.range === 'string') return el.value;
    },
    getFormValues: function getFormValues() {
        var _this = this;

        var attributes = this.model.attributes;

        var data = this.reducer(Object.keys(this.els), function (key) {
            return (/(INPUT|SELECT|TEXTAREA)/.test(_this.els[key].tagName) ? _defineProperty({}, key, _this.getElementValue(_this.els[key], attributes.find(function (attribute) {
                    return attribute.name === key;
                }))) : {}
            );
        });

        attributes.forEach(function (attribute) {
            if (attribute.fk) {
                data[attribute.fk] = _this.views[attribute.fk].getSelectedId();
            } else if (_typeof(attribute.range) === "object") {
                data[attribute.name] = _this.views[attribute.name].getFormValues();
            } else if (attribute.range === "List") {
                data[attribute.name] = Array.from(_this.views[attribute.name].els.list.children).map(function (itemEl) {
                    var selector = attribute.itemRange === 'Text' ? '.item textarea' : '.item input';
                    return _this.getElementValue(itemEl.querySelector(selector), { range: attribute.itemRange });
                });
            }
        });

        return data;
    },
    handleValidationError: function handleValidationError(attr) {
        this.Toast.showMessage('error', attr.error);
        this.els[attr.name].classList.add('error');
        this.onSubmitEnd();
    },
    initTypeAheads: function initTypeAheads() {
        var _this2 = this;

        this.model.attributes.forEach(function (attribute) {
            if (attribute.fk) _this2.views[attribute.fk].setResource(attribute.fk).initAutoComplete(_this2.model.git(attribute.fk));else if (_typeof(attribute.range) === "object") {
                _this2.Views[attribute.name] = {
                    disallowEnterKeySubmission: true,
                    model: Object.create(_this2.Model).constructor(_extends(_this2.model.data[attribute.name], { nested: !_this2.model.git('nested') }), { attributes: attribute.range }),
                    templateOpts: { hideButtonRow: true },
                    Views: {}
                };
                var el = _this2.els[attribute.name];
                delete _this2.els[attribute.name];
                _this2.subviewElements = [{ el: el, view: 'form', name: attribute.name }];
                _this2.renderSubviews();
            } else if (attribute.range === "List") {
                var collectionData = _this2.model.git(attribute.name) ? _this2.model.git(attribute.name).map(function (datum) {
                    return { value: datum };
                }) : [];

                _this2.Views[attribute.name] = {
                    model: Object.create(_this2.model).constructor({
                        add: true,
                        collection: Object.create(_this2.Model).constructor(collectionData, { meta: { key: 'value' } }),
                        delete: true,
                        isDocumentList: false,
                        draggable: 'listItem'
                    }),
                    itemTemplate: function itemTemplate(datum) {
                        return Reflect.apply(_this2.Format.GetFormField, _this2.Format, [{ range: attribute.itemRange }, datum.value]);
                    }
                };
                var _el = _this2.els[attribute.name];
                delete _this2.els[attribute.name];
                _this2.subviewElements = [{ el: _el, view: 'list', name: attribute.name }];
                _this2.renderSubviews();
                _this2.views[attribute.name].on('addClicked', function () {
                    return _this2.views[attribute.name].add({ value: '' });
                });
                _this2.views[attribute.name].on('deleteClicked', function (datum) {
                    return _this2.views[attribute.name].remove(datum);
                });
            } else if (attribute.range === "ImageUrl") {
                console.log('ImageUrl');
            }
        });
    },
    submit: function submit() {
        var _this3 = this;

        if (!this.model.validate(this.getFormValues())) return Promise.resolve();

        var isPost = !Boolean(this.model.data[this.key]);

        return (isPost ? this.model.post() : this.model.put(this.model.data[this.key], this.omit(this.model.data, [this.key]))).then(function () {
            _this3.emit(isPost ? 'posted' : 'put', _extends({}, _this3.model.data));
            _this3.model.data = {};
            _this3.clear();
            _this3.Toast.showMessage('success', _this3.toastSuccess || 'Success');
            return Promise.resolve();
        });
    },
    postRender: function postRender() {
        var _this4 = this;

        if (this.model.git('nested')) this.els.container.closest('.form-group').classList.add('vertical');
        this.inputEls = this.els.container.querySelectorAll('input, select');

        if (!this.disallowEnterKeySubmission) this.els.container.addEventListener('keyup', function (e) {
            if (e.keyCode === 13) _this4.onSubmitBtnClick();
        });

        this.inputEls.forEach(function (el) {
            return el.addEventListener('focus', function () {
                return el.classList.remove('error');
            });
        });

        if (this.model) {
            this.model.on('validationError', function (attr) {
                return _this4.handleValidationError(attr);
            });
            this.initTypeAheads();
            this.key = this.model.metadata ? this.model.metadata.key : '_id';
        }

        return this;
    }
});

},{"./Submitter":120,"./__proto__":124}],101:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {});

},{"./__proto__":124,"./util/CustomContent":194}],102:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Nav: require('../models/Nav'),

    events: {
        justify: 'click',
        nav: 'click',
        title: 'click'
    },

    onJustifyClick: function onJustifyClick() {
        this.els.nav.classList.toggle('is-mobile');
    },
    onNavClick: function onNavClick(e) {
        var el = e.target.closest('li');

        if (!el) return;

        this.emit('navigate', el.getAttribute('data-name'));

        if (this.els.nav.classList.contains('is-mobile')) this.els.nav.classList.remove('is-mobile');
    },
    onTitleClick: function onTitleClick() {
        this.emit('navigate', '/');
    },
    templateOpts: function templateOpts() {
        return { fields: this.Nav.data, home: { label: 'Patchwork Gardens', name: 'home' } };
    }
});

},{"../models/Nav":33,"./__proto__":124}],103:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {

    events: {
        joinBtn: 'click'
    },

    onJoinBtnClick: function onJoinBtnClick() {
        this.emit('navigate', 'sign-up');
    },
    postRender: function postRender() {
        var _this = this;

        this.on('imgLoaded', function () {
            return _this.els.container.classList.add('img-loaded');
        });

        return CustomContent.postRender.call(this);
    }
});

},{"./__proto__":124,"./util/CustomContent":194}],104:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('./util/ListItem'),
    InstanceRow = function InstanceRow() {
    this.files = [];
    return ListItem.apply(this, arguments);
};

_extends(InstanceRow.prototype, ListItem.prototype, {
    getFieldValue: function getFieldValue(field) {

        var modelValue = this.model.get(field),
            isFile = false;

        if (modelValue === null) return '';

        if ((typeof modelValue === 'undefined' ? 'undefined' : _typeof(modelValue)) === "object" && (modelValue.type === "file" || modelValue.type === "Buffer")) {
            if (modelValue.src) {
                return this.$('<img/>').attr({ src: modelValue.src }).css({ height: '50px' });
            } else if (modelValue.imageEl) {
                return modelValue.imageEl;
            } else {
                isFile = true;this.files.push(field);return '<span class="glyphicon glyphicon-picture"></span>';
            }
        }

        return (typeof modelValue === 'undefined' ? 'undefined' : _typeof(modelValue)) === "object" && modelValue !== null ? modelValue.value : modelValue;
    },
    getTemplateOptions: function getTemplateOptions() {
        var _this = this;

        return {
            id: this.model.id,
            values: this.fields.map(function (field) {
                return { name: field.name, value: _this.getFieldValue(field.name), width: field.width };
            })
        };
    },
    loadFileIfVisible: function loadFileIfVisible() {
        var top = this.templateData.container[0].getBoundingClientRect().top,
            visible = top >= 0 && top <= (window.innerHeight || document.documentElement.clientHeight),
            imageLoaderModel = { id: this.model.id, columns: this.files };

        if (visible) this.imageLoader.add(imageLoaderModel);
    },
    postRender: function postRender() {
        var _this2 = this;

        ListItem.prototype.postRender.call(this);
        this.model.on('change', function () {
            return Object.keys(_this2.model.attributes).forEach(function (field) {
                return _this2.templateData[field].html(_this2.getFieldValue(field));
            });
        });

        if (this.files.length) this.$(window).on(this.util.format('scroll.throttledLoad%s', this.model.id), this.throttledLoad.bind(this));
    },
    retrievedImage: function retrievedImage(field) {
        this.files = this._(this.files).reject(function (file) {
            return file === field;
        });
        if (this.files.length === 0) this.$(window).off(this.util.format('scroll.throttledLoad%s', this.model.id));
    },
    size: function size() {
        if (this.files.length) this.loadFileIfVisible();
    },
    throttledLoad: function throttledLoad() {
        this._.throttle(this.loadFileIfVisible(), 500);
    },


    template: require('../templates/instanceRow')(require('handlebars'))

});

module.exports = InstanceRow;

},{"../templates/instanceRow":59,"./util/ListItem":197,"handlebars":247}],105:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Super = require('./__proto__');

module.exports = _extends({}, Super, {
    add: function add(datum) {
        var _this = this;

        var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!this.collection) this.collection = Object.create(this.Model);

        var keyValue = datum[this.key];
        var insertion = { el: this.els.list };

        this.collection.add(datum);
        this.collection.store[this.key][keyValue] = datum;

        if (sort && this.collection.data.length !== 1) {
            this.collection.sort(this.model.git('sort'));
            var index = this.collection.data.findIndex(function (datum) {
                return datum[_this.key] == keyValue;
            });

            if (index !== -1) insertion = this.els.list.children.item(index) ? { method: 'insertBefore', el: this.els.list.children.item(index) } : { el: this.els.list };
        }

        this.updateStyle();

        if (this.itemTemplate) {
            this.slurpTemplate({
                insertion: insertion,
                renderSubviews: true,
                template: this.getItemTemplateResult(keyValue, datum)
            });

            //this.els.list.querySelector(`*[data-key="${keyValue}"]`).scrollIntoView( { behavior: 'smooth' } )

            return;
        }

        this.itemViews[keyValue] = this.factory.create(this.model.git('view'), { insertion: insertion, model: Object.create(this.collection.model).constructor(datum) }).on('deleted', function () {
            return _this.onDeleted(datum);
        });

        this.itemViews[keyValue].els.container.scrollIntoView({ behavior: 'smooth' });
    },
    getChildRectangles: function getChildRectangles(el) {
        return Array.from(el.children).map(function (item) {
            return { el: item, rectangle: item.getBoundingClientRect() };
        });
    },
    checkDrag: function checkDrag(e) {
        if (!this.dragging) return;
        console.log('checkDrag');

        e.preventDefault();

        this.Dragger.els.container.classList.remove('fd-hidden');
        this.Dragger.els.container.style.top = e.clientY + 5 + 'px';
        this.Dragger.els.container.style.left = e.clientX + 5 + 'px';

        if (this.model.git('draggable') !== 'listItem') return;

        var listItemRectangles = this.getChildRectangles(this.els.list),
            matchingItem = listItemRectangles.find(function (item) {
            return item.rectangle.right >= e.clientX && item.rectangle.left <= e.clientX && item.rectangle.bottom >= e.clientY && item.rectangle.top <= e.clientY;
        });

        if (!matchingItem || !matchingItem && this.dragoverEl || matchingItem && this.dragoverEl && matchingItem.el.isSameNode(this.dragging.el)) {
            if (this.dragoverEl) this.dragoverEl.classList.remove('dragover-top', 'dragover-bottom');
            this.dragoverEl = undefined;
            return;
        }

        if (matchingItem && !matchingItem.el.isSameNode(this.dragging.el)) {
            if (this.dragoverEl) this.dragoverEl.classList.remove('dragover-top', 'dragover-bottom');
            this.dragoverEl = matchingItem.el;
            var itemRect = matchingItem.el.querySelector('.item').getBoundingClientRect();

            if (e.clientY < itemRect.bottom - itemRect.height / 2) {
                if (this.dragoverEl.previousSibling && this.dragoverEl.previousSibling.isSameNode(this.dragging.el)) return;
                this.dragoverEl.classList.add('dragover-top');
            } else {
                if (this.dragoverEl.nextSibling && this.dragoverEl.nextSibling.isSameNode(this.dragging.el)) return;
                this.dragoverEl.classList.add('dragover-bottom');
            }
        }
    },
    checkDragEnd: function checkDragEnd(e) {
        if (!this.dragging) return;

        if (this.dragoverEl) {
            this.els.list.insertBefore(this.dragging.el, this.dragoverEl.classList.contains('dragover-top') ? this.dragoverEl : this.dragoverEl.nextSibling);
            this.dragoverEl.classList.remove('dragover-top', 'dragover-bottom');
            this.dragoverEl = undefined;
        }

        this.emit('dropped', { e: e, type: this.model.git('draggable'), model: this.dragging.model });
        this.dragging.el.classList.remove('is-dragging');
        this.els.list.classList.remove('is-dragging');
        this.Dragger.els.container.classList.add('fd-hidden');
        this.dragging = false;
    },
    checkDragStart: function checkDragStart(e) {
        console.log('checkDragStart');
        var closestList = e.target.closest('.List');
        if (closestList === null || !closestList.isSameNode(this.els.container)) return;

        var el = e.target.closest('.item');
        if (!el) return null;

        var model = this.collection.store[this.key][el.parentNode.getAttribute('data-key')];

        this.dragging = { el: el.parentNode, model: model };
        this.dragging.el.classList.add('is-dragging');
        this.els.list.classList.add('is-dragging');
        if (model.label) this.Dragger.els.container.textContent = 'Move ' + model.label + '.';
        this.emit('dragStart', this.model.git('draggable'));
    },
    checkDrop: function checkDrop(_ref) {
        var e = _ref.e,
            type = _ref.type,
            model = _ref.model;

        if (this.model.git('droppable') !== type) return;

        var el = e.target.closest('.item');

        if (!el) return;

        var localModel = this.collection.store[this.key][el.parentNode.getAttribute('data-key')];

        if (!localModel) return;

        this.emit('successfulDrop', { dropped: model, droppedOn: localModel });
    },
    fetch: function fetch() {
        var _this2 = this;

        var nextPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        this.fetching = true;
        if (nextPage) this.model.set('skip', this.model.git('skip') + this.model.git('pageSize'));

        return this.collection.get({ query: { skip: this.model.git('skip'), limit: this.model.git('pageSize'), sort: this.model.git('sort') } }).then(function (newData) {
            _this2.populateList(newData);
            _this2.fetched = true;
            _this2.fetching = false;
            _this2.emit('fetched');
            if (newData.length == 0 && nextPage) _this2.els.list.removeEventListener('scroll', _this2.onScrollPagination);
            return Promise.resolve();
        });
    },
    getCount: function getCount() {
        var _this3 = this;

        return this.collection.getCount().then(function () {
            return Promise.resolve(_this3.collection.meta.count);
        }).catch(this.Error);
    },
    getItemTemplateResult: function getItemTemplateResult(keyValue, datum) {
        var buttonsOnRight = this.model.git('delete') ? '<div class="buttons">' + this.deleteIcon + '</div>' : '',
            selection = this.toggleSelection ? '<div class="selection"><input data-js="checkbox" type="checkbox" /></div>' : '';

        return '' + ('<li data-key="' + keyValue + '">\n            ' + selection + '\n            <div class="item">' + this.itemTemplate(datum) + '</div>\n            ' + buttonsOnRight + '\n        </li>');
    },
    hide: function hide() {
        if (this.els.resetBtn) this.els.resetBtn.classList.add('fd-hidden');
        if (this.els.saveBtn) this.els.saveBtn.classList.add('fd-hidden');
        return Reflect.apply(Super.hide, this, []);
    },
    hideItems: function hideItems(keys) {
        var _this4 = this;

        return Promise.all(keys.map(function (key) {
            var el = _this4.els.list.querySelector('li[data-key="' + key + '"]');
            return el ? _this4.hideEl(el) : Promise.resolve();
        })).catch(this.Error);
    },
    hideList: function hideList() {
        var _this5 = this;

        return this.hideEl(this.els.list).then(function () {
            return Promise.resolve(_this5.els.toggle.classList.add('is-hidden'));
        }).catch(this.Error);
    },
    initializeDragDrop: function initializeDragDrop() {
        var _this6 = this;

        this.Dragger.on('mousedown', function (e) {
            return _this6.checkDragStart(e);
        });
        this.Dragger.on('mouseup', function (e) {
            return _this6.checkDragEnd(e);
        });
        this.Dragger.on('mousemove', function (e) {
            return _this6.checkDrag(e);
        });
        this.Dragger.listen();
    },
    initializeScrollPagination: function initializeScrollPagination() {
        var _this7 = this;

        var listEl = this.els.list;

        this.onScrollPagination = function (e) {
            if (_this7.fetching) return;
            if (_this7.scrollHeight - (listEl.scrollTop + _this7.offsetHeight) < 100) window.requestAnimationFrame(function () {
                return _this7.fetch(true).catch(_this7.Error);
            });
        };

        listEl.addEventListener('scroll', this.onScrollPagination);
    },
    empty: function empty() {
        this.els.list.innerHTML = '';
    },


    events: {
        addBtn: 'click',
        checkbox: 'change',
        goBackBtn: 'click',
        resetBtn: 'click',
        saveBtn: 'click',
        toggle: 'click'
    },

    getListItemKey: function getListItemKey(e) {
        var el = e.target.closest('.item');

        if (!el) return null;

        return this.collection.store[this.key][el.parentNode.getAttribute('data-key')];
    },
    hideDroppable: function hideDroppable() {
        this.els.list.classList.remove('is-droppable');
        Array.from(this.els.list.children).forEach(function (child) {
            return child.removeChild(child.lastChild);
        });
    },
    onAddBtnClick: function onAddBtnClick(e) {
        this.collection.model ? this.add(this.collection.model.CreateDefault()) : this.emit('addClicked');
    },
    onCheckboxChange: function onCheckboxChange(e) {
        var el = e.target.closest('LI');

        if (!el) return false;

        var model = this.collection.store[this.key][el.getAttribute('data-key')];
        event = 'toggled' + (e.target.checked ? 'On' : 'Off');

        if (!model) return;

        el.classList.toggle('checked', e.target.checked);

        this.emit(event, model);
    },
    onGoBackBtnClick: function onGoBackBtnClick(e) {
        this.emit('goBackClicked');
    },
    onItemMouseenter: function onItemMouseenter(e) {
        e.target.classList.add('mouseover');
    },
    onItemMouseleave: function onItemMouseleave(e) {
        e.target.classList.remove('mouseover');
    },
    onListClick: function onListClick(e) {
        var model = this.getListItemKey(e);

        if (!model) return;

        this.emit('itemClicked', model);
    },
    onListDblclick: function onListDblclick(e) {
        var model = this.getListItemKey(e);

        if (!model) return;

        this.emit('itemDblClicked', model);
    },
    onResetBtnClick: function onResetBtnClick() {
        this.emit('resetClicked');
    },
    onSaveBtnClick: function onSaveBtnClick() {
        var _this8 = this;

        if (this.model.git('view')) {
            this.emit('saveClicked', Object.keys(this.itemViews).map(function (key) {
                return _this8.itemViews[key].getProposedModel();
            }));
        }
    },
    onToggleClick: function onToggleClick() {
        this.els.list.classList.contains('fd-hidden') ? this.showList() : this.hideList();
    },
    populateList: function populateList(data) {
        var _this9 = this;

        data = data || this.collection.data;

        if (!Array.isArray(data)) data = [data];

        this.updateStyle();

        if (data.length === 0) return;

        if (this.model.git('view')) {
            var viewName = this.model.git('view');
            var fragment = data.reduce(function (fragment, datum) {
                var keyValue = datum[_this9.key];

                _this9.collection.store[_this9.key][keyValue] = datum;

                _this9.itemViews[keyValue] = _this9.factory.create(viewName, { model: Object.create(_this9.collection.model).constructor(datum), storeFragment: true }).on('deleted', function () {
                    return _this9.onDeleted(datum);
                });

                while (_this9.itemViews[keyValue].fragment.firstChild) {
                    fragment.appendChild(_this9.itemViews[keyValue].fragment.firstChild);
                }return fragment;
            }, document.createDocumentFragment());

            this.els.list.appendChild(fragment);
        } else {
            this.slurpTemplate({
                insertion: { el: this.els.list },
                renderSubviews: true,
                template: data.reduce(function (memo, datum) {
                    var keyValue = datum[_this9.key];
                    _this9.collection.store[_this9.key][keyValue] = datum;
                    return memo + _this9.getItemTemplateResult(keyValue, datum);
                }, '')
            });

            if (this.model.git('scrollPagination')) {
                this.scrollHeight = this.els.list.scrollHeight;this.offsetHeight = this.els.list.offsetHeight;
            }
        }
    },
    postRender: function postRender() {
        var _this10 = this;

        this.collection = this.model.git('collection') || Object.create(this.Model);
        this.key = this.collection.meta.key;

        if (this.collection) this.collection.store = _defineProperty({}, this.key, {});

        if (this.model.git('delete')) {
            this.deleteIcon = this.Format.GetIcon('garbage');
            this.els.list.addEventListener('click', function (e) {
                var target = e.target;
                if (target.tagName === 'svg' && target.classList.contains('garbage')) {
                    _this10.emit('deleteClicked', _this10.collection.store[_this10.key][target.closest('LI').getAttribute('data-key')]);
                }
            });
        }

        if (this.model.git('fetch')) this.fetch().catch(this.Error);

        if (this.model.git('scrollPagination')) this.initializeScrollPagination();

        this.updateStyle();

        if (this.collection.data.length) this.populateList();

        if (this.model.git('draggable')) this.initializeDragDrop();

        return this;
    },
    remove: function remove(datum) {
        this.collection.remove(datum);

        this.updateStyle();

        if (this.model.git('view')) {
            delete this.itemViews[datum[this.key]];
        } else {
            var child = this.els.list.querySelector('[data-key="' + datum[this.key] + '"]');

            if (child) this.els.list.removeChild(child);
        }

        return this;
    },
    show: function show() {
        if (this.els.resetBtn) this.els.resetBtn.classList.remove('fd-hidden');
        if (this.els.saveBtn) this.els.saveBtn.classList.remove('fd-hidden');
        return Reflect.apply(Super.show, this, []);
    },
    showList: function showList() {
        var _this11 = this;

        return this.showEl(this.els.list).then(function () {
            return Promise.resolve(_this11.els.toggle.classList.remove('is-hidden'));
        }).catch(this.Error);
    },
    showDroppable: function showDroppable(type) {
        var _this12 = this;

        this.els.list.classList.add('is-droppable');
        Array.from(this.els.list.children).forEach(function (child) {
            _this12.bindEvent('item', 'mouseenter', child);
            _this12.bindEvent('item', 'mouseleave', child);
            child.appendChild(_this12.htmlToFragment('<div class="drag">Drag here to move ' + type + '</div>'));
        });
    },
    unhideItems: function unhideItems() {
        var _this13 = this;

        Promise.all(Array.from(this.els.list.querySelectorAll('li.fd-hidden')).map(function (el) {
            return _this13.showEl(el);
        })).catch(this.Error);

        return this;
    },
    update: function update(items) {
        this.collection.constructor(items, { storeBy: [this.key] });

        if (this.itemTemplate) return this.removeChildren(this.els.list).populateList();

        this.empty();

        _extends(this, { itemViews: {} }).populateList();

        //window.scroll( { behavior: 'smooth', top: this.els.container.getBoundingClientRect().top + window.pageYOffset - 50 } )
        this.els.container.scrollIntoView({ behavior: 'smooth' });

        return this;
    },
    updateItem: function updateItem(model) {
        var keyValue = model.git(this.key);

        this.collection._put(keyValue, model.data);

        if (!this.model.git('view')) {
            var oldItem = this.els.list.querySelector('*[data-key="' + keyValue + '"]');
            this.slurpTemplate({
                insertion: { method: 'insertBefore', el: oldItem },
                renderSubviews: true,
                template: this.getItemTemplateResult(keyValue, model.data)
            });
            this.els.list.removeChild(oldItem);
        }
    },
    updateStyle: function updateStyle() {
        this.els.list.classList.toggle('no-items', this.collection.data.length === 0);
    }
});

},{"./__proto__":124}],106:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {

    events: {
        legend: 'click'
    },

    model: require('../models/Locations'),

    models: {
        groupLocation: require('../models/CurrentShare'),
        farmerMarket: require('../models/FarmerMarket'),
        retailOutlet: require('../models/RetailOutlet'),
        restaurant: require('../models/Restaurant'),
        farmPickup: require('../models/FarmPickup')
    },

    templates: {
        infoWindow: require('./templates/InfoWindow'),
        location: require('./templates/Location')
    },

    createDeliveryRange: function createDeliveryRange() {
        var overlayColor = this.model.attributes.find(function (attr) {
            return attr.name === 'deliveryRange';
        }).color;

        this.deliveryRange = new google.maps.Polygon({
            paths: this.model.data.deliveryRangeCoords,
            strokeColor: overlayColor,
            strokeOpacity: .3,
            strokeWeight: 1,
            fillColor: overlayColor,
            fillOpacity: .3,
            clickable: false
        });

        this.deliveryRange.setMap(this.map);
    },
    createMarkers: function createMarkers(data, category) {
        var _this = this;

        this.icons[category] = this.getIcon(category);
        this.markers[category] = [];

        data.forEach(function (datum) {
            if (!datum.location) return;

            var infowindow = new google.maps.InfoWindow({
                content: _this.templates.infoWindow(datum)
            });

            var marker = new google.maps.Marker({
                position: { lat: datum.location[0], lng: datum.location[1] },
                map: _this.map,
                draggable: false,
                icon: _this.icons[category],
                title: datum.name
            });

            _this.markers[category].push(marker);

            marker.addListener('click', function () {
                return infowindow.open(_this.map, marker);
            });
        });
    },
    fetchAndRender: function fetchAndRender() {
        var _this2 = this;

        var chain = Promise.resolve();

        Object.keys(this.models).forEach(function (name) {
            chain = chain.then(function () {
                return _this2.models[name].get().then(function () {
                    return name === 'groupLocation' ? _this2.models.groupLocation.getCurrentGroupDropoffs() : name === 'farmPickup' ? _this2.models.farmPickup.getHours() : Promise.resolve();
                }).then(function (dropoffData) {
                    var modelAttr = _this2.model.attributes.find(function (attr) {
                        return attr.name === name;
                    }),
                        data = dropoffData || _this2.models[name].data;

                    _this2.insertListLocations(data, _this2.els[modelAttr.el]);
                    _this2.createMarkers(data, name);

                    return Promise.resolve();
                }).catch(function (e) {
                    return Promise.resolve(console.log('Failed to retrieve ' + name + ' data.'));
                });
            });
        });
    },
    getIcon: function getIcon(category) {
        if (category === 'farmPickup') return '/static/img/favicon.png';

        var color = this.model.attributes.find(function (attr) {
            return category === attr.name;
        }).color;

        return {
            path: google.maps.SymbolPath.CIRCLE,
            strokeColor: color,
            fillColor: color,
            fillOpacity: 1,
            scale: 4
        };
    },
    initMap: function initMap() {
        var mapOpts = {
            center: { lat: 39.758948, lng: -84.191607 },
            zoom: 10,
            mapTypeControl: false
        };

        this.map = new google.maps.Map(this.els.map, mapOpts);

        this.markers = {};
        this.icons = {};

        this.createDeliveryRange();

        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(this.els.legend);

        this.fetchAndRender();
    },
    insertListLocations: function insertListLocations(data, el) {
        var _this3 = this;

        data.forEach(function (datum) {
            return _this3.slurpTemplate({
                template: _this3.templates.location(datum),
                insertion: { el: el }
            });
        });
    },
    onLegendClick: function onLegendClick(e) {
        if (e.target.tagName !== "INPUT") return;

        var category = e.target.getAttribute('data-name'),
            checked = e.target.checked;

        if (category === 'deliveryRange') return this.toggleDeliveryRange(checked);

        this.toggleMarkerCategory(category, checked);
    },
    postRender: function postRender() {
        if (window.google) {
            this.initMap();
        } else {
            window.initGMap = this.initMap;
        }

        return CustomContent.postRender.call(this);
    },
    templateOpts: function templateOpts() {
        return { categories: this.model.attributes };
    },
    toggleDeliveryRange: function toggleDeliveryRange(checked) {
        this.deliveryRange.setMap(checked ? this.map : null);
    },
    toggleMarkerCategory: function toggleMarkerCategory(category, checked) {
        var _this4 = this;

        this.markers[category].forEach(function (marker) {
            return marker.setMap(checked ? _this4.map : null);
        });
    }
});

},{"../models/CurrentShare":15,"../models/FarmPickup":23,"../models/FarmerMarket":24,"../models/Locations":28,"../models/Restaurant":37,"../models/RetailOutlet":38,"./__proto__":124,"./templates/InfoWindow":167,"./templates/Location":169,"./util/CustomContent":194}],107:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('./MyView'),
    Login = function Login() {
    return MyView.apply(this, arguments);
};

_extends(Login.prototype, MyView.prototype, require('./util/Form').prototype, {
    checkForEnter: function checkForEnter(e) {
        if (e.keyCode === 13) this.login();
    },


    events: {
        'loginBtn': { method: 'login' }
    },

    fields: [{
        name: "email",
        label: 'Email',
        type: 'text',
        validate: function validate(val) {
            return true;
        }
    }, {
        name: "password",
        label: 'Password',
        type: 'password',
        error: "Passwords must be at least 6 characters long.",
        validate: function validate(val) {
            return val.length >= 6;
        }
    }],

    getTemplateOptions: function getTemplateOptions() {
        return { fields: this.fields };
    },
    initialize: function initialize() {
        if (window.location.pathname === "/admin" || window.location.pathname === "/admin-plus") {
            _extends(this.fields[0], {
                label: 'Email or Username',
                error: "Username must be at least 6 characters long.",
                validate: function validate(val) {
                    return val.length >= 6;
                } });
        }

        MyView.prototype.initialize.call(this);
    },
    login: function login() {
        this.submitForm({ resource: "auth" });
    },


    name: "Login",

    onSubmissionResponse: function onSubmissionResponse(response) {

        if (Object.keys(response).length === 0) {
            return this.slurpTemplate({ template: this.templates.invalidLoginError(response), insertion: { $el: this.templateData.container } });
        }

        this.$(document).off('keyup', this.checkForEnter.bind(this));

        require('../models/User').set(response);
        this.emit("success", response);
        this.hide().done();
    },
    postRender: function postRender() {
        this.templateData.container.find('input').on('focus', this.removeErrors.bind(this));
        this.$(document).on('keyup', this.checkForEnter.bind(this));
    },


    requiresLogin: false,

    template: require('../templates/login')(require('handlebars'))

});

module.exports = new Login();

},{"../models/User":42,"../templates/login":61,"./MyView":111,"./util/Form":195,"handlebars":247}],108:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Customer: require('../models/Customer'),
    Delivery: require('../models/Delivery'),

    patchMemberShare: function patchMemberShare() {
        var _this = this;

        var weekPatch = this.views.weekOptions.getPatchData();

        var weekDetail = '',
            emailTo = [this.selectedCustomer.person.data.email];

        if (this.selectedCustomer.person.data.secondaryEmail) emailTo.push(this.selectedCustomer.person.data.secondaryEmail);

        if (weekPatch.addedDates.length || weekPatch.removedDates.length) {
            weekDetail += ' ( ';
        }

        if (weekPatch.addedDates.length) {
            var description = weekPatch.addedDates.map(function (date) {
                return date.slice(5);
            }).join(',');
            weekDetail += 'Added Weeks: ' + description;
            if (weekPatch.removedDates.length) {
                weekDetail += ', ';
            }
        }

        if (weekPatch.removedDates.length) {
            var _description = weekPatch.removedDates.map(function (date) {
                return date.slice(5);
            }).join(',');
            weekDetail += 'Removed Weeks: ' + _description;
        }

        if (weekPatch.addedDates.length || weekPatch.removedDates.length) {
            weekDetail += ' ) ';
        }

        this.Xhr({
            id: this.memberShareId,
            method: 'patch',
            resource: 'member-order',
            data: JSON.stringify({
                adjustment: this.views.sharePatch.getPatchData(),
                memberShareId: this.memberShareId,
                name: this.selectedCustomer.person.data.name,
                orderOptions: this.views.orderOptions.getPatchData(),
                shareLabel: this.selectedShare.label,
                weekOptions: weekPatch.allRemoved,
                weekDetail: weekDetail,
                to: emailTo
            })
        }).then(function () {
            _this.Toast.showMessage('success', 'Order Updated');
            _this.views.seasons.select(_this.memberShareId);
        }).catch(function (e) {
            console.log(e.stack || e);
            _this.Toast.showMessage('error', 'Update Failed');
        });
    },
    postRender: function postRender() {
        var _this2 = this;

        this.views.memberTypeahead.focus();

        this.views.memberTypeahead.on('customerSelected', function (customer) {
            _this2.selectedCustomer = customer;
            _this2.views.customerInfo.reset(customer);
            _this2.views.seasons.update(customer);
            _this2.views.orderOptions.hide();
            _this2.views.weekOptions.hide();
            _this2.views.transactions.hide();
            _this2.views.sharePatch.reset();
        });

        this.views.seasons.on('selected', function (data) {
            _this2.views.sharePatch.reset();
            _this2.selectedShare = data.share;
            _this2.memberShareId = _this2.selectedShare.membershareid;

            _this2.Delivery.get({
                query: {
                    membershareid: data.share.membershareid,
                    deliveryoptionid: { operation: 'join', value: { table: 'deliveryoption', column: 'id' } },
                    groupdropoffid: { operation: 'leftJoin', value: { table: 'groupdropoff', column: 'id' } }
                }
            }).then(function () {
                //TODO:If no delivery, Toast, or some UI
                _extends(data, { delivery: _this2.Delivery });
                _this2.views.orderOptions.update(data).then(function () {
                    return _this2.views.sharePatch.setOriginalWeeklyPrice(_this2.views.orderOptions.originalWeeklyPrice);
                }).catch(_this2.Error);
                _this2.views.weekOptions.update(data).then(function () {
                    return _this2.views.sharePatch.setWeeksAffected(_this2.views.weekOptions.getWeeksAffected());
                }).catch(_this2.Error);
                _this2.views.transactions.update(data);
            });
        });

        this.views.orderOptions.on('deliveryChanged', function (data) {
            _this2.views.sharePatch.setWeeksAffected(_this2.views.weekOptions.getWeeksAffected());
            _this2.views.weekOptions.updateDelivery(data);
        });

        this.views.orderOptions.on('reset', function (model) {
            _this2.views.weekOptions.update(model);
            _this2.views.sharePatch.onOptionsReset();
        });

        this.views.weekOptions.on('reset', function (model) {
            return _this2.views.sharePatch.onWeeksReset();
        });

        this.views.orderOptions.on('adjustment', function (data) {
            return _this2.views.sharePatch.onOptionsUpdate(data);
        });
        this.views.weekOptions.on('adjustment', function (data) {
            return _this2.views.sharePatch.onWeekUpdate(data);
        });

        this.views.sharePatch.on('patchMemberShare', function () {
            return _this2.patchMemberShare();
        });

        return this;
    },


    requiresLogin: true,

    requiresRole: 'admin'

});

},{"../models/Customer":16,"../models/Delivery":18,"./__proto__":124}],109:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {

    AutoComplete: require('../AutoComplete'),

    Customer: require('../models/Customer'),

    focus: function focus() {
        this.els.customerInput.focus();
    },
    postRender: function postRender() {
        var _this = this;

        new this.AutoComplete({
            delay: 500,
            selector: this.els.customerInput,
            minChars: 3,
            cache: false,
            source: function source(term, suggest) {
                _this.search('name', term.trim(), suggest).then(function (found) {
                    return found ? Promise.resolve(true) : _this.search('email', term, suggest);
                }).then(function (found) {
                    return found ? Promise.resolve(true) : _this.search('secondaryEmail', term, suggest);
                }).then(function (found) {
                    return found ? Promise.resolve(true) : suggest([]);
                }).catch(_this.Error);
            },
            onSelect: function onSelect(e, term, item) {
                _this.selectedCustomer = _this.Customer.data.find(function (datum) {
                    return datum.person.data[_this.attr] === term;
                });
                _this.emit('customerSelected', _this.selectedCustomer);
            }

        });

        return this;
    },
    search: function search(attr, term, suggest) {
        var _query,
            _this2 = this;

        console.log('search');
        console.log(attr);
        console.log(term);
        return this.Customer.get({ query: (_query = {}, _defineProperty(_query, attr, { operation: '~*', value: term }), _defineProperty(_query, 'id', { operation: 'join', value: { table: 'member', column: 'personid' } }), _query) }).then(function () {
            console.log(_this2.Customer.data);
            if (!_this2.Customer.data.length) return Promise.resolve(false);

            _this2.attr = attr;
            suggest(_this2.Customer.data.map(function (datum) {
                return datum.person.data[attr];
            }));
            return Promise.resolve(true);
        });
    }
});

},{"../AutoComplete":4,"../models/Customer":16,"./__proto__":124}],110:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), require('./util/CustomContent'), {});

},{"./__proto__":124,"./util/CustomContent":194}],111:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = function MyView(data) {
    return _extends(this, data).initialize();
};

_extends(MyView.prototype, require('events').EventEmitter.prototype, {

    Collection: require('backbone').Collection,

    Error: require('../MyError'),

    Model: require('backbone').Model,

    _: require('underscore'),

    $: require('jquery'),

    Xhr: require('../Xhr'),

    delegateEvents: function delegateEvents(key, el) {
        var _this = this;

        var type;

        if (!this.events[key]) return;

        type = Object.prototype.toString.call(this.events[key]);

        if (type === '[object Object]') {
            this.bindEvent(key, this.events[key], el);
        } else if (type === '[object Array]') {
            this.events[key].forEach(function (singleEvent) {
                return _this.bindEvent(key, singleEvent, el);
            });
        }
    },


    delete: function _delete() {
        if (this.templateData && this.templateData.container) {
            this.templateData.container.remove();
            this.emit("removed");
        }
    },

    format: {
        capitalizeFirstLetter: function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
    },

    getFormData: function getFormData() {
        var _this2 = this;

        this.formData = {};

        Object.keys(this.templateData).forEach(function (key) {
            var $el = _this2.templateData[key],
                val = $el.val();
            if (/INPUT|TEXTAREA|SELECT/.test($el.prop('tagName')) && val) _this2.formData[key] = val;
        });

        return this.formData;
    },

    getRouter: function getRouter() {
        return require('../router');
    },

    getTemplateOptions: function getTemplateOptions() {
        return {};
    },

    hide: function hide() {
        var _this3 = this;

        return new Promise(function (resolve, reject) {
            _this3.templateData.container.hide();
            resolve();
        });
    },
    initialize: function initialize() {
        var _this4 = this;

        if (!this.container) this.container = this.$('#content');

        this.router = this.getRouter();

        this.modalView = require('./modal');

        this.$(window).resize(this._.throttle(function () {
            return _this4.size();
        }, 500));

        if (this.requiresLogin && !this.user.id) {
            require('./Login').show().once("success", function (e) {
                console.log(_this4.router);
                _this4.router.onUser(_this4.user);

                if (_this4.requiresRole && !_this4._(_this4.user.get('roles')).contains(_this4.requiresRole)) {
                    return alert('You do not have access');
                }

                _this4.render();
            });
            return this;
        } else if (this.user.id && this.requiresRole) {
            if (!this._(this.user.get('roles')).contains(this.requiresRole)) {
                return alert('You do not have access');
            }
        }

        return this.render();
    },


    isHidden: function isHidden() {
        return this.templateData.container.css('display') === 'none';
    },

    moment: require('moment'),

    onNavigation: function onNavigation(path) {
        return this.show();
    },


    postRender: function postRender() {
        this.renderSubviews();
        return this;
    },

    Q: require('q'),

    render: function render() {
        this.slurpTemplate({
            template: this.template(this.getTemplateOptions()),
            insertion: { $el: this.insertionEl || this.container, method: this.insertionMethod } });

        this.size();

        this.postRender();

        return this;
    },


    renderSubviews: function renderSubviews() {
        var _this5 = this;

        Object.keys(this.subviews || []).forEach(function (key) {
            return _this5.subviews[key].forEach(function (subviewMeta) {
                _this5[subviewMeta.name] = new subviewMeta.view({ container: _this5.templateData[key] });
            });
        });
    },

    show: function show() {
        this.templateData.container.show();
        this.size();
        return this;
    },

    slurpEl: function slurpEl(el) {

        var key = el.attr('data-js');

        this.templateData[key] = this.templateData.hasOwnProperty(key) ? this.templateData[key].add(el) : el;

        el.removeAttr('data-js');

        if (this.events[key]) this.delegateEvents(key, el);

        return this;
    },

    slurpTemplate: function slurpTemplate(options) {
        var _this6 = this;

        var $html = this.$(options.template),
            selector = '[data-js]';

        if (this.templateData === undefined) this.templateData = {};

        $html.each(function (index, el) {
            var $el = _this6.$(el);
            if ($el.is(selector)) _this6.slurpEl($el);
        });

        $html.get().forEach(function (el) {
            _this6.$(el).find(selector).each(function (i, elToBeSlurped) {
                return _this6.slurpEl(_this6.$(elToBeSlurped));
            });
        });

        if (options && options.insertion) options.insertion.$el[options.insertion.method ? options.insertion.method : 'append']($html);

        return this;
    },

    bindEvent: function bindEvent(elementKey, eventData, el) {
        var elements = el ? el : this.templateData[elementKey];

        elements.on(eventData.event || 'click', eventData.selector, eventData.meta, this[eventData.method].bind(this));
    },

    events: {},

    isMouseOnEl: function isMouseOnEl(event, el) {

        var elOffset = el.offset(),
            elHeight = el.outerHeight(true),
            elWidth = el.outerWidth(true);

        if (event.pageX < elOffset.left || event.pageX > elOffset.left + elWidth || event.pageY < elOffset.top || event.pageY > elOffset.top + elHeight) {

            return false;
        }

        return true;
    },

    requiresLogin: true,

    size: function size() {
        undefined;
    },

    user: require('../models/User'),

    util: require('util')

});

module.exports = MyView;

},{"../MyError":6,"../Xhr":7,"../models/User":42,"../router":47,"./Login":107,"./modal":126,"backbone":"backbone","events":217,"jquery":"jquery","moment":"moment","q":262,"underscore":"underscore","util":266}],112:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Model = require('../models/__proto__');

module.exports = _extends({}, require('./__proto__'), {

    DeliveryOptions: Object.create(Model, { resource: { value: 'deliveryoption' } }),
    GroupDropoffs: Object.create(Model, { resource: { value: 'groupdropoff' } }),
    MemberSelection: require('../models/MemberSelection'),
    MemberShareOption: Object.create(Model, { resource: { value: 'membershareoption' } }),
    OrderOption: require('../models/OrderOption'),
    ShareOptionOption: require('../models/ShareOptionOption'),

    calculateWeeklyPrice: function calculateWeeklyPrice() {
        var optionPrice = this.MemberSelection.data.reduce(function (sum, selection) {
            return sum + Model.moneyToReal(selection.price);
        }, 0);
        return optionPrice + Model.moneyToReal(this.model.delivery.data[0].deliveryoption.price);
    },
    calculatePriceAdjustment: function calculatePriceAdjustment() {
        var _this = this;

        return Object.keys(this.editedFields).reduce(function (acc, key) {
            if (!_this.editedFields[key].newValue || key === 'groupOption') return acc;

            var oldPrice = void 0,
                newPrice = void 0,
                diff = void 0;

            if (key === 'deliveryOption') {
                oldPrice = _this.DeliveryOptions.data.find(function (option) {
                    return option.name === _this.editedFields[key].oldValue;
                }).price;
                newPrice = _this.DeliveryOptions.data.find(function (option) {
                    return option.name === _this.editedFields[key].newValue;
                }).price;
            } else {
                var shareOptionId = _this.OrderOption.data.find(function (option) {
                    return option.key === key;
                }).id;

                oldPrice = _this.ShareOptionOption.data.find(function (option) {
                    return option.name === _this.editedFields[key].oldValue && option.shareoptionid === shareOptionId;
                }).price;

                newPrice = _this.ShareOptionOption.data.find(function (option) {
                    return option.name === _this.editedFields[key].newValue && option.shareoptionid === shareOptionId;
                }).price;
            }

            diff = Model.moneyToReal(newPrice) - Model.moneyToReal(oldPrice);

            return acc + diff;
        }, 0);
    },
    clear: function clear() {
        this.els.changes.innerHTML = '';
        this.els.options.innerHTML = '';

        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');

        this.els = {
            editSummary: this.els.editSummary,
            changes: this.els.changes,
            container: this.els.container,
            seasonLabel: this.els.seasonLabel,
            options: this.els.options,
            resetBtn: this.els.resetBtn,
            newWeeklyPrice: this.els.newWeeklyPrice,
            originalWeeklyPrice: this.els.originalWeeklyPrice
        };
    },


    events: {
        options: 'change',
        resetBtn: 'click'
    },

    getAdjustmentDescription: function getAdjustmentDescription() {
        var _this2 = this;

        return Array.from(this.els.options.querySelectorAll('li.edited')).map(function (el) {
            var fieldName = el.getAttribute('data-name'),
                fieldLabel = _this2.capitalizeFirstLetter(fieldName),
                oldValue = _this2.editedFields[fieldName].oldValue ? _this2.editedFields[fieldName].oldValue.toString() : 'none',
                newValue = _this2.editedFields[fieldName].newValue.toString();

            return fieldLabel + ': ' + oldValue + ' to ' + newValue;
        }).join(', ');
    },
    getDeliveryData: function getDeliveryData() {
        var _this3 = this;

        var patchId = this.model.delivery.data[0].membersharedelivery.id,
            newDeliveryId = this.DeliveryOptions.data.find(function (option) {
            return option.name === _this3.editedFields.deliveryOption.newValue;
        }).id,
            dropoffId = this.editedFields.deliveryOption.newValue === 'group' ? this.GroupDropoffs.data.find(function (option) {
            return option.name === _this3.editedFields.groupOption.newValue;
        }).id : null;

        return {
            id: patchId,
            deliveryoptionid: newDeliveryId,
            groupdropoffid: dropoffId
        };
    },
    getShareOptionData: function getShareOptionData(key) {
        var _this4 = this;

        var shareOptionId = this.OrderOption.data.find(function (option) {
            return option.key === key;
        }).id,
            memberShareId = this.model.share.membershareid;

        var shareOptionOptionId = this.ShareOptionOption.data.find(function (option) {
            return option.name === _this4.editedFields[key].newValue && option.shareoptionid === shareOptionId;
        }).id;

        return {
            id: this.MemberSelection.data.find(function (memberSelection) {
                return shareOptionId == memberSelection.shareoptionid;
            }).membershareoptionid,
            shareoptionoptionid: shareOptionOptionId
        };
    },
    getPatchData: function getPatchData() {
        var _this5 = this;

        var rv = { membersharedelivery: this.editedFields.deliveryOption.newValue || this.editedFields.groupOption.newValue ? this.getDeliveryData() : {},
            membershareoption: []
        };

        Object.keys(this.editedFields).forEach(function (key) {
            if (!_this5.editedFields[key].newValue || key === 'deliveryOption' || key === 'groupOption') return;

            rv.membershareoption.push(_this5.getShareOptionData(key));
        });

        return rv;
    },
    onOptionsChange: function onOptionsChange(e) {
        var listItemEl = e.target.closest('li.editable'),
            shareOptionKey = listItemEl.getAttribute('data-name'),
            val = e.target.value;

        if (shareOptionKey === 'deliveryOption' && val !== 'group') this.emit('deliveryChanged', { deliveryOption: val });
        if (shareOptionKey === 'groupOption' && val !== 'none') this.emit('deliveryChanged', { deliveryOption: 'group', groupOption: val });

        if (shareOptionKey === 'deliveryOption') {
            if (val !== 'group') {
                this.els.groupOption.selectedIndex = 0;
                this.els.groupOption.disabled = true;
                this.els.groupOption.closest('li').classList.remove('edited');
                this.editedFields.groupOption.newValue = undefined;
            } else {
                this.els.groupOption.disabled = false;
            }
        }

        if (this.editedFields[shareOptionKey].oldValue === val) {
            this.editedFields[shareOptionKey].newValue = undefined;
            listItemEl.classList.remove('edited');
            return this.showEditSummary();
        }

        this.editedFields[shareOptionKey].newValue = val;
        listItemEl.classList.add('edited');

        this.els.resetBtn.classList.remove('fd-hidden');

        this.showEditSummary();
    },
    onResetBtnClick: function onResetBtnClick() {
        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');
        this.update(this.model);
        this.emit('reset', this.model);
    },
    renderDeliveryOptions: function renderDeliveryOptions() {
        var _this6 = this;

        var option = _extends({}, this.model.delivery.data[0]);

        this.slurpTemplate({ template: this.templates[this.optionTemplate]({ name: 'Delivery Option', id: 'deliveryOption' }), insertion: { el: this.els.options } });

        this.slurpTemplate({ template: this.templates[this.optionTemplate]({ name: 'Group Option', id: 'groupOption' }), insertion: { el: this.els.options } });

        if (this.optionTemplate === 'editableOption') {

            this.DeliveryOptions.data.forEach(function (option) {
                return _this6.slurpTemplate({ template: _this6.templates.selectOption(option), insertion: { el: _this6.els.deliveryOption } });
            });

            this.els.deliveryOption.querySelector('option[value=' + CSS.escape(option.deliveryoption.name)).selected = true;
            this.editedFields.deliveryOption = {};
            this.editedFields.deliveryOption.oldValue = this.els.deliveryOption.value;

            this.GroupDropoffs.data.unshift({ name: 'none', label: 'None' });
            this.GroupDropoffs.data.forEach(function (option) {
                return _this6.slurpTemplate({ template: _this6.templates.selectOption(option), insertion: { el: _this6.els.groupOption } });
            });

            if (!option.groupdropoff.id) {
                this.els.groupOption.selectedIndex = 0;
                this.els.groupOption.disabled = true;
            } else this.els.groupOption.querySelector('option[value=' + CSS.escape(option.groupdropoff.name)).selected = true;

            this.editedFields.groupOption = {};
            this.editedFields.groupOption.oldValue = this.els.groupOption.disabled ? undefined : this.els.groupOption.value;
        } else {
            this.els.deliveryOption.textContent = option.deliveryoption.label;
            this.els.groupOption.textContent = option.groupdropoff.label || 'N/A';
        }

        return this;
    },
    renderShareOptions: function renderShareOptions() {
        var _this7 = this;

        this.OrderOption.data.forEach(function (shareOption) {
            _this7.slurpTemplate({ template: _this7.templates[_this7.optionTemplate](shareOption), insertion: { el: _this7.els.options } });

            if (_this7.editable) {
                _this7.ShareOptionOption.data.forEach(function (option) {
                    if (option.shareoptionid === shareOption.id) _this7.slurpTemplate({
                        template: _this7.templates.selectOption(option), insertion: { el: _this7.els[shareOption.id] }
                    });
                });
            }
        });

        this.MemberSelection.data.forEach(function (selection) {
            if (_this7.editable) {
                var key = _this7.OrderOption.data.find(function (shareOption) {
                    return shareOption.id === selection.shareoptionid;
                }).key;
                _this7.els[selection.shareoptionid].querySelector('option[value=' + CSS.escape(selection.name)).selected = true;
                _this7.editedFields[key] = {};
                _this7.editedFields[key].oldValue = _this7.els[selection.shareoptionid].value;
            } else {
                _this7.els[selection.shareoptionid].textContent = selection.label;
            }
        });
    },
    showEditSummary: function showEditSummary() {
        var _this8 = this;

        var priceAdjustment = this.calculatePriceAdjustment(),
            edits = this.els.options.querySelectorAll('li.edited');

        this.els.changes.innerHTML = '';

        if (edits.length === 0) {
            this.emit('reset', this.model);
            this.els.resetBtn.classList.add('fd-hidden');
            return this.els.editSummary.classList.add('fd-hidden');
        }

        edits.forEach(function (el) {
            var fieldName = el.getAttribute('data-name'),
                fieldLabel = _this8.capitalizeFirstLetter(fieldName),
                oldValue = _this8.editedFields[fieldName].oldValue ? _this8.editedFields[fieldName].oldValue.toString() : 'none',
                newValue = _this8.editedFields[fieldName].newValue.toString();

            _this8.slurpTemplate({ insertion: { el: _this8.els.changes }, template: _this8.templates.fieldEdit({ label: fieldLabel, oldValue: oldValue, newValue: newValue }) });
        });

        this.els.originalWeeklyPrice.textContent = this.Currency.format(this.originalWeeklyPrice);
        this.els.newWeeklyPrice.textContent = this.Currency.format(this.originalWeeklyPrice + priceAdjustment);

        this.els.editSummary.classList.remove('fd-hidden');

        this.emit('adjustment', { description: this.getAdjustmentDescription(), originalWeeklyPrice: this.originalWeeklyPrice, priceAdjustment: priceAdjustment });
    },


    templates: {
        fieldEdit: require('./templates/FieldEdit'),
        archivedOption: function archivedOption(option) {
            return '<li><div class="cell">' + option.name + '</div><div class="cell" data-js="' + option.id + '"></div></li>';
        },
        editableOption: function editableOption(option) {
            return '<li data-name="' + (option.key || option.id) + '" class="editable"><span>' + option.name + '</span><select data-js="' + option.id + '"></select></li>';
        },
        selectOption: function selectOption(option) {
            return '<option value="' + option.name + '">' + option.label + '</option>';
        }
    },

    update: function update(_ref) {
        var _this9 = this;

        var customer = _ref.customer,
            delivery = _ref.delivery,
            share = _ref.share;

        this.clear();
        this.editedFields = {};

        this.model = arguments[0];

        this.editable = this.Moment() < this.Moment(share.enddate);
        this.optionTemplate = this.editable ? 'editableOption' : 'archivedOption';

        this.els.seasonLabel.textContent = share.label;

        return this.OrderOption.get({ query: { shareid: share.id, shareoptionid: { operation: 'join', value: { table: 'shareoption', column: 'id' } } } }).then(function () {
            return _this9.ShareOptionOption.get();
        }).then(function () {
            return _this9.MemberSelection.get({ query: { membershareid: share.membershareid, shareoptionoptionid: { operation: 'join', value: { table: 'shareoptionoption', column: 'id' } } } });
        }).then(function () {
            return _this9.renderShareOptions();
        }).then(function () {
            return _this9.DeliveryOptions.get();
        }).then(function () {
            return _this9.GroupDropoffs.get();
        }).then(function () {
            _this9.renderDeliveryOptions();
            _this9.originalWeeklyPrice = _this9.calculateWeeklyPrice();
            _this9.show();
            return Promise.resolve();
        });
    }
});

},{"../models/MemberSelection":32,"../models/OrderOption":34,"../models/ShareOptionOption":41,"../models/__proto__":43,"./__proto__":124,"./templates/FieldEdit":160}],113:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Pikaday: require('pikaday'),

    events: {
        exportBtn: 'click',
        viewBtn: 'click'
    },

    handleColumns: function handleColumns(rows) {
        var _this = this;

        var columns = this.els.columns;

        this.removeChildren(columns);

        this.columns = Object.keys(rows[0]);

        this.columns.forEach(function (column) {
            return _this.slurpTemplate({ template: '<li>' + column + '</li>', insertion: { el: columns } });
        });
    },
    handleRows: function handleRows(rows) {
        var _this2 = this;

        var rowsEl = this.els.rows;

        this.removeChildren(rowsEl);

        var template = rows.map(function (row) {
            var columns = _this2.columns.map(function (column) {
                return '<li>' + row[column] + '</li>';
            }).join('');
            return '<ol>' + columns + '</ol>';
        }).join('');

        this.slurpTemplate({ template: template, insertion: { el: rowsEl } });
    },
    noResults: function noResults() {
        this.els.empty.classList.remove('fd-hide');
    },
    onExportBtnClick: function onExportBtnClick() {
        var qs = { id: this.els.report.value, to: this.els.to.value, from: this.els.from.value, export: true };
        window.open('/report?' + window.encodeURIComponent(JSON.stringify(qs)));
    },
    onViewBtnClick: function onViewBtnClick() {
        var _this3 = this;

        this.Xhr({ method: 'get', resource: 'report', qs: JSON.stringify({ id: this.els.report.value, to: this.els.to.value, from: this.els.from.value }) }).then(function (result) {
            if (result.length == 0) return _this3.noResults();

            _this3.els.empty.classList.add('fd-hide');

            _this3.handleColumns(result);
            _this3.handleRows(result);
            return Promise.resolve();
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this4 = this;

        this.Reports = Object.create(this.Model, { resource: { value: 'report' } });

        this.Reports.get().then(function () {
            return _this4.Reports.data.forEach(function (report) {
                return _this4.slurpTemplate({ template: '<option value="' + report.id + '">' + report.label + '</option>', insertion: { el: _this4.els.report } });
            });
        }).catch(this.Error);

        new this.Pikaday({ field: this.els.from, format: 'YYYY-MM-DD' });
        new this.Pikaday({ field: this.els.to, format: 'YYYY-MM-DD' });

        return this;
    },
    removeChildren: function removeChildren(el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    }
});

},{"./__proto__":124,"pikaday":"pikaday"}],114:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Table = require('./util/Table'),
    Resource = function Resource() {
    this.spinner = new this.Spinner({
        color: '#fff',
        length: 15,
        scale: 0.25,
        width: 5
    }).spin();
    return Table.apply(this, arguments);
};

_extends(Resource.prototype, Table.prototype, {

    Instance: require('../models/Instance'),

    ItemView: require('./InstanceRow'),

    Spinner: require('../spin'),

    collection: function collection() {
        var _this = this;

        return {
            model: this.Instance,
            parse: function parse(response) {
                _this.label = response.label;
                _this.recordDescriptor = response.recordDescriptor;
                if (response.operation["@type"] === "Create") _this.createProperties = response.operation.expects.supportedProperty;
                return response[_this.resource];
            },
            url: this.util.format("/%s", this.resource)
        };
    },
    create: function create(data) {
        var _this2 = this;

        var files = [];

        this.createProperties.forEach(function (property) {
            var name = property.property;

            if (property.fk && _this2[property.fk.table + "Typeahead"]) {
                data[name] = _this2[property.fk.table + "Typeahead"][property.descriptor.path.length ? [property.descriptor.path[0].table, 'id'].join('.') : 'id'];
            }
            if (property.range === "File") {
                delete data[name];
                files.push({ name: name, data: _this2[name + "File"] });
            }
        });

        this.modalView.templateData.confirmBtn.append(this.spinner.spin().el).addClass('has-spinner');

        this.$.ajax({
            headers: { accept: 'application/json' },
            contentType: 'application/json',
            data: JSON.stringify(data),
            method: 'POST',
            url: this.util.format("/%s", this.resource)
        }).done(function (response, textStatus, jqXHR) {
            if (_this2.items.length === 0 && _this2.fields === undefined) _this2.setFields(response);

            Promise.all(files.map(function (file) {
                return _this2.uploadFile(file.name, file.data, response.id);
            })).then(function () {

                _this2.createProperties.forEach(function (property) {
                    var name = property.property;
                    if (property.fk && _this2[property.fk.table + "Typeahead"] && property.descriptor.path) {
                        response[[property.descriptor.table, property.descriptor.column.name].join('.')] = {
                            descriptor: property.descriptor,
                            table: property.fk.table,
                            id: response[name],
                            value: _this2[property.fk.table + "Typeahead"][property.descriptor.column.name] };
                    }
                });

                _this2.items.add(new _this2.Instance(response, { parse: true }));
                _this2.modalView.templateData.confirmBtn.removeClass('has-spinner');
                _this2.spinner.stop();
                _this2.modalView.hide({ reset: true });
            });
        });
    },
    deleteModel: function deleteModel() {
        var _this3 = this;

        this.$.ajax({
            headers: { accept: 'application/json' },
            contentType: 'application/json',
            method: 'DELETE',
            url: this.util.format("/%s/%s", this.resource, this.modelToDelete.id)
        }).done(function (response, textStatus, jqXHR) {
            _this3.items.remove(_this3.modelToDelete);
            _this3.modelToDelete = undefined;
            _this3.modalView.hide({ reset: true });
        });
    },
    edit: function edit(data) {
        var _this4 = this;

        var filePromises = [],
            modelAttrs = {};

        this.createProperties.forEach(function (property) {
            var name = property.property;

            if (property.fk) {
                var attribute;

                if (!_this4[property.fk.table + "Typeahead"]) {
                    delete data[name];return;
                }

                attribute = _this4.util.format('%s.%s', property.descriptor.table, property.descriptor.column.name);

                data[name] = _this4[property.fk.table + "Typeahead"][property.descriptor.path.length ? [property.descriptor.path[0].table, 'id'].join('.') : 'id'];

                _this4.modelToEdit.get(attribute).id = _this4[property.fk.table + "Typeahead"].id;
                _this4.modelToEdit.get(attribute).value = _this4[property.fk.table + "Typeahead"][property.descriptor.column.name];
            } else if (property.range === "File") {
                delete data[name];
                if (_this4[name + "File"] && _this4[name + "File"].length) {
                    _this4.modelToEdit.get(name).src = _this4[name + "Base64"];
                    filePromises.push(_this4.uploadFile(name, _this4[name + "File"], _this4.modelToEdit.id));
                }
            } else if (property.property === "dayofweek") {
                modelAttrs[property.property] = { raw: data[property.property], value: _this4.modelToEdit.DayOfWeekHash[data[property.property]] };
            } else {
                modelAttrs[property.property] = data[property.property];
            }
        });

        Promise.all(filePromises).then(function () {
            return _this4.$.ajax({
                headers: { accept: 'application/json' },
                contentType: 'application/json',
                data: JSON.stringify(data),
                method: 'PATCH',
                url: _this4.util.format("/%s/%d", _this4.resource, _this4.modelToEdit.id)
            }).done(function (response, textStatus, jqXHR) {
                _this4.modelToEdit.set(modelAttrs, { silent: true });
                _this4.modelToEdit.trigger('change', _this4.modelToEdit);
                _this4.modelToEdit = undefined;
                _this4.modalView.hide({ reset: true });
            });
        }).catch(function (err) {
            return console.log(err.stack || err);
        });
    },


    events: {
        createBtn: { method: 'showCreateDialog' },
        deleteBtn: { method: 'showDeleteDialog' },
        editBtn: { method: 'showEditDialog' },
        body: [{ event: 'mouseover', selector: 'tr', method: 'onRowMouseEnter' }, { event: 'mouseout', selector: 'tr', method: 'onRowMouseLeave' }]
    },

    fetch: { headers: { accept: "application/ld+json" } },

    getImage: function getImage(model) {
        var _this5 = this;

        var imageEl = new Image();

        imageEl.style.height = '50px';
        imageEl.onload = function () {
            if (_this5.itemViews[model.id]) {
                _this5.itemViews[model.id].templateData[model.column].html(imageEl);
                _this5.itemViews[model.id].retrievedImage(model.column);
            }
            if (_this5.items.get(model.id)) _this5.items.get(model.id).get(model.column).imageEl = imageEl;

            window.setTimeout(function () {
                return _this5.imageLoader.remove(model);
            }, 100);
        };

        imageEl.onerror = function () {
            return window.setTimeout(function () {
                return _this5.imageLoader.remove(model);
            }, 100);
        };

        imageEl.src = model.column === "jobdescription" ? '/static/img/pdf.svg' : this.util.format('/file/%s/%s/%d', this.resource, model.column, model.id);
    },
    getImageData: function getImageData(base64) {
        return base64.slice(base64.indexOf(',') + 1);
    },
    getLabel: function getLabel(property) {
        return this.format.capitalizeFirstLetter(property);
    },
    initDatepicker: function initDatepicker(property, modelValue) {
        var time, value;

        if (modelValue) value = modelValue.value;

        if (value && property.range === "Time") {
            time = value.slice(0, -2);
            value = /AM/.test(value) || time.slice(0, 1) === "12" ? time : this.util.format('%d:%s', parseInt(time.split(":")[0]) + 12, time.split(":")[1]);
        }

        this.$('#' + property.property).datetimepicker(property.range === "Time" ? { format: "h:mmA", defaultDate: value ? this.moment([this.moment().format('YYYY-MM-DD'), value].join(" ")) : "" } : { format: "YYYY-MM-DD", defaultDate: value && modelValue.raw ? this.moment(modelValue.raw).format('YYYY-MM-DD') : "" });
    },
    initFileUploader: function initFileUploader(property) {
        var _this6 = this;

        var name = property.property,
            $el = this.modalView.templateData[name],
            btn = this.modalView.templateData[property.property + "Btn"];

        this[property.property + "File"] === undefined;

        $el.on('change', function (e) {
            var reader = new FileReader();

            btn.addClass('has-spinner').append(_this6.spinner.spin().el);

            reader.onload = function (evt) {
                var imageData = _this6.getImageData(evt.target.result),
                    previewImageSrc = evt.target.result.slice(0, 20) === 'data:application/pdf' ? '/static/img/pdf.svg' : evt.target.result;

                _this6[property.property + "File"] = imageData;
                _this6[property.property + "Base64"] = evt.target.result;
                btn.removeClass('has-spinner');
                _this6.spinner.stop();
                _this6.$('#' + property.property + "-preview").attr({ src: previewImageSrc });
            };

            reader.readAsDataURL(e.originalEvent.target.files[0]);
        });
    },
    initTypeahead: function initTypeahead(property) {
        var _this7 = this;

        var bloodhound = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace(property.descriptor.column.name),
            identify: function identify(obj) {
                return obj.id;
            },
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            remote: {
                replace: function replace(url, query) {
                    return url.replace('%QUERY', encodeURIComponent(query));
                },
                url: this.util.format("/%s?%s=%QUERY&like=1&path=%s", property.descriptor.table, property.descriptor.column.name, encodeURIComponent(JSON.stringify(property.descriptor.path)))
            }
        }),
            el = this.$('#' + property.property);

        bloodhound.initialize();

        el.typeahead({ hint: true }, { display: function display(obj) {
                return obj[property.descriptor.column.name];
            }, source: bloodhound.ttAdapter() }).bind('typeahead:selected typeahead:autocompleted', function (obj, selected, name) {
            _this7[property.fk.table + "Typeahead"] = selected;
            el.one('change', function () {
                return _this7[property.fk.table + "Typeahead"] = undefined;
            });
        });
    },
    onRowMouseEnter: function onRowMouseEnter(e) {
        var row = this.$(e.currentTarget),
            top = row.position().top + 13;

        this.hoveredModel = this.items.get(row.attr('data-id'));
        this.templateData.editBtn.removeClass('hide');
        this.templateData.deleteBtn.removeClass('hide');

        this.templateData.editBtn.css({ top: top, left: '115px' });
        this.templateData.deleteBtn.css({ top: top, left: '135px' });
    },
    onRowMouseLeave: function onRowMouseLeave(e) {

        if (this.isMouseOnEl(e, this.templateData.deleteBtn) || this.isMouseOnEl(e, this.templateData.editBtn)) return;

        this.hoveredModel = undefined;

        this.templateData.deleteBtn.addClass('hide');
        this.templateData.editBtn.addClass('hide');
    },
    populateModalField: function populateModalField(property) {
        var el = this.modalView.templateData[property.property],
            img,
            modelValue;

        if (!el) return;
        if (property.range === 'File') {
            this.initFileUploader(property);
            img = this.itemViews[this.modelToEdit.id].templateData[property.property].find('img');
            if (img.length) this.modalView.templateData[property.property + "Preview"].replaceWith(img.clone(false).attr({ id: property.property + "-preview" }));
            return;
        }

        modelValue = this.modelToEdit.get(property.property);

        if (/Date|Time/.test(property.range)) {
            return this.initDatepicker(property, modelValue);
        } else if (property.property === 'dayofweek') {
            return el.val(modelValue.raw);
        } else if (!property.fk || !property.descriptor) {
            return el.val(typeof modelValue === "boolean" ? modelValue.toString() : modelValue);
        }

        this.initTypeahead(property);
        el.typeahead('val', this.modelToEdit.get([property.descriptor.table, property.descriptor.column.name].join('.')).value);
    },
    postRender: function postRender() {
        var _this8 = this;

        this.imageLoader = new (require('backbone').Collection)().on('add', function () {
            if (_this8.imageLoader.length === 1) _this8.processImageLoader();
        }).on('remove', function () {
            if (_this8.imageLoader.length) _this8.processImageLoader();
        });

        Table.prototype.postRender.call(this);
        this.items.on('reset', function () {
            return _this8.templateData.subHeading.text(_this8.label);
        });
    },
    processImageLoader: function processImageLoader() {
        var _this9 = this;

        var id = this.imageLoader.at(0).id,
            columns = this.imageLoader.at(0).get('columns');

        columns.forEach(function (column) {
            return _this9.getImage({ 'id': id, 'column': column });
        });
    },


    requiresRole: 'admin',

    setFields: function setFields(instance) {
        var _this10 = this;

        var keys = Object.keys(instance),
            width = Math.floor(100 / keys.length);
        this.fields = keys.map(function (key) {
            var field = { name: key, label: _this10.format.capitalizeFirstLetter(key), width: width };
            _this10.$(_this10.templateData.header.children('tr')[0]).append(_this10.templates.headerColumn.call(_this10, field));
            return field;
        });
    },
    showCreateDialog: function showCreateDialog() {
        var _this11 = this;

        var onShown = function onShown() {
            return _this11.createProperties.forEach(function (property) {
                if (property.fk && property.descriptor !== undefined) _this11.initTypeahead(property);else if (/Date|Time/.test(property.range)) _this11.initDatepicker(property);else if (property.range === "File") _this11.initFileUploader(property);
            });
        },
            onSubmit = function onSubmit(data) {
            return _this11.create(data);
        };

        this.modalView.show({
            body: this.templates.create({
                fields: this.createProperties.map(function (property) {
                    return _this11.templates[property.range]({
                        class: property.fk ? 'typeahead' : '',
                        label: _this11.getLabel(property.descriptor ? [property.descriptor.table, property.descriptor.column.name].join('.') : property.property),
                        name: property.property,
                        password: property.property === "password" ? true : false
                    });
                })
            }),
            title: this.util.format('Create %s', this.label)
        }).on('shown', onShown).on('submit', onSubmit).on('hidden', function () {
            _this11.modalView.removeListener('submit', onSubmit);
            _this11.modalView.removeListener('shown', onShown);
        });
    },
    showDeleteDialog: function showDeleteDialog() {
        var _this12 = this;

        var onSubmit = function onSubmit() {
            return _this12.deleteModel();
        };

        this.modelToDelete = this.hoveredModel;

        this.modalView.show({
            body: this.util.format('Are you sure you would like to delete %s?', this.modelToDelete.get(this.recordDescriptor) || "this record"),
            confirmText: 'Yes',
            title: this.util.format('Delete %s', this.label)
        }).on('submit', onSubmit).on('hidden', function () {
            _this12.modelToDelete = undefined;
            _this12.modalView.removeListener('submit', onSubmit);
        });
    },
    showEditDialog: function showEditDialog() {
        var _this13 = this;

        var populateModalFields = function populateModalFields() {
            return _this13.createProperties.forEach(function (property) {
                return _this13.populateModalField(property);
            });
        },
            onSubmit = function onSubmit(data) {
            return _this13.edit(data);
        };

        this.modelToEdit = this.hoveredModel;

        this.modalView.show({
            body: this.templates.create({
                fields: this.createProperties.map(function (property) {
                    return _this13.templates[property.property === "dayofweek" ? "DayOfWeek" : property.range]({
                        class: property.fk ? 'typeahead' : '',
                        name: property.property,
                        label: _this13.getLabel(property.descriptor ? [property.descriptor.table, property.descriptor.column.name].join('.') : property.property)
                    });
                })
            }),
            title: this.util.format('Edit %s', this.label)
        }).on('shown', populateModalFields).on('submit', onSubmit).on('hidden', function () {
            _this13.modalView.removeListener('shown', populateModalFields);
            _this13.modalView.removeListener('submit', onSubmit);
            _this13.modelToEdit = undefined;
        });
    },


    template: require('../templates/resource')(require('handlebars')),

    templates: _extends({}, Table.prototype.templates, {
        create: require('../templates/createInstance')(require('handlebars')),
        Boolean: require('../templates/form/Boolean')(require('handlebars')),
        Date: require('../templates/form/Date')(require('handlebars')),
        DayOfWeek: require('../templates/form/DayOfWeek')(require('handlebars')),
        File: require('../templates/form/File')(require('handlebars')),
        Float: require('../templates/form/Text')(require('handlebars')),
        Integer: require('../templates/form/Text')(require('handlebars')),
        Text: require('../templates/form/Text')(require('handlebars')),
        TextArea: require('../templates/form/TextArea')(require('handlebars')),
        Time: require('../templates/form/Date')(require('handlebars'))
    }),

    update: function update(resource) {
        var _this14 = this;

        this.resource = resource;

        this.items.reset(null);
        this.fields = [];
        this.$(this.templateData.header.children('tr')[0]).empty();

        this.createItems();

        this.items.on('reset', function () {
            _this14.templateData.subHeading.text(_this14.label);
        });

        this.fetchItems().show();
    },
    uploadFile: function uploadFile(name, data, id) {
        var _this15 = this;

        return new Promise(function (resolve, reject) {
            _this15.$.ajax({
                data: data,
                method: "POST",
                url: _this15.util.format("/file/%s/%s/%d", _this15.resource, name, id) }).done(function (response, textStatus, jqXHR) {
                return resolve();
            }).fail(function (jqXHR, textStatus, err) {
                return reject(err);
            });
        });
    }
});

module.exports = Resource;

},{"../models/Instance":26,"../spin":48,"../templates/createInstance":50,"../templates/form/Boolean":53,"../templates/form/Date":54,"../templates/form/DayOfWeek":55,"../templates/form/File":56,"../templates/form/Text":57,"../templates/form/TextArea":58,"../templates/resource":63,"./InstanceRow":104,"./util/Table":198,"backbone":"backbone","handlebars":247}],115:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('./util/ListItem'),
    ResourceRow = function ResourceRow() {
    return ListItem.apply(this, arguments);
};

_extends(ResourceRow.prototype, ListItem.prototype, {
    getTemplateOptions: function getTemplateOptions() {
        var _this = this;

        return {
            id: this.model.id,
            values: this.fields.map(function (field) {
                return { name: field.name, value: _this.model.get(field.name), width: field.width };
            })
        };
    },


    template: require('../templates/resourceRow')(require('handlebars'))

});

module.exports = ResourceRow;

},{"../templates/resourceRow":64,"./util/ListItem":197,"handlebars":247}],116:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    MemberSeason: require('../models/MemberSeason'),

    clear: function clear() {
        this.els.list.innerHTML = '';
    },


    events: {
        list: 'click'
    },

    insertShareLabels: function insertShareLabels() {
        var _this = this;

        var countPerShare = {};

        this.MemberSeason.data.forEach(function (season) {
            countPerShare[season.name] ? ++countPerShare[season.name] : countPerShare[season.name] = 1;
            if (countPerShare[season.name] > 1) season.count = countPerShare[season.name];

            _this.slurpTemplate({ template: _this.templates.ShareBox(season), insertion: { el: _this.els.list } });
        });
    },
    onListClick: function onListClick(e) {
        if (!e.target.closest('div.share-label')) return;

        if (this.currentSelection) this.currentSelection.classList.remove('selected');

        var el = e.target.closest('div.share-label');

        this.currentSelection = el;
        el.classList.add('selected');
        this.emit('selected', { customer: this.customer, share: this.MemberSeason.data.find(function (season) {
                return season.membershareid == el.getAttribute('data-id');
            }) });
    },
    select: function select(memberShareId) {
        this.els.list.querySelector('div.share-label[data-id="' + memberShareId + '"]').click();
    },


    templates: {
        ShareBox: require('./templates/ShareBox')
    },

    update: function update(customer) {
        var _this2 = this;

        this.customer = customer;

        this.clear();

        this.MemberSeason.get({ query: { memberid: customer.member.data.id, shareid: { operation: 'join', value: { table: 'share', column: 'id' } } } }).then(function () {
            return _this2.insertShareLabels();
        }).then(function () {
            return _this2.show();
        }).catch(this.Error);
    }
});

},{"../models/MemberSeason":31,"./__proto__":124,"./templates/ShareBox":178}],117:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },


    requiresLogin: false
});

},{"./__proto__":124}],118:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Views: {
        buttonFlow: function buttonFlow() {
            return {
                model: Object.create(this.Model).constructor({
                    states: {
                        start: [{ name: 'save', text: 'Save Changes', class: 'save-btn', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmBtn', class: 'save-btn', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', class: 'reset-btn', nextState: 'start', text: 'Cancel' }]
                    }
                })
            };
        }
    },

    displayTotal: function displayTotal() {
        this.total = 0;

        this.total += this.weeksRemovedPrice;
        this.total += this.weeksAddedPrice;

        if (this.weeklyPriceAdjustment) this.total += this.optionsAdjustment;

        this.els.adjustment.textContent = this.Currency.format(this.total);
        if (this.total < 0) this.els.adjustment.classList.add('is-negative');

        return this;
    },
    getWhitespace: function getWhitespace(count) {
        var rv = "";

        while (count > 0) {
            rv += " ";count--;
        }

        return rv;
    },
    getDescription: function getDescription() {
        var lineWidth = 100,
            lines = [['Weeks Removed: ' + this.els.weeksRemoved.textContent, 'Adjustment: ' + this.Currency.format(this.weeksRemovedPrice)], ['Weeks Added: ' + this.els.weeksAdded.textContent, 'Adjustment: ' + this.Currency.format(this.weeksAddedPrice)]];

        return ['' + lines[0][0] + this.getWhitespace(lineWidth - lines[0][0].length - lines[0][1].length) + lines[0][1], '' + lines[1][0] + this.getWhitespace(lineWidth - lines[1][0].length - lines[1][1].length) + lines[1][1], 'Options Update: ' + this.optionsDescription, 'Weekly price adjustment: ' + this.Currency.format(this.weeklyPriceAdjustment), 'Weeks affected: ' + this.weeksAffected].join('\n');
    },
    getPatchData: function getPatchData() {
        return {
            value: this.total,
            description: this.getDescription(),
            sendEmail: this.els.sendEmail.checked
        };
    },
    onOptionsReset: function onOptionsReset() {
        this.weeklyPriceAdjustment = false;
        this.els.options.classList.add('fd-hidden');

        this.els.weeklyAdjustment.textContent = this.Currency.format(0);
        this.els.shareOptionDescription.textContent = '';

        this.displayTotal();

        if (this.els.weeksRemoved.textContent == 0 && this.els.weeksAdded.textContent == 0) this.els.container.classList.add('fd-hidden');
    },
    onWeeksReset: function onWeeksReset() {
        this.onWeekUpdate({ added: 0, removed: 0 });
    },
    onOptionsUpdate: function onOptionsUpdate(_ref) {
        var description = _ref.description,
            priceAdjustment = _ref.priceAdjustment;


        this.optionsDescription = description;

        this.els.options.classList.remove('fd-hidden');

        this.weeklyPriceAdjustment = priceAdjustment;
        this.els.weeklyAdjustment.textContent = this.Currency.format(priceAdjustment);
        this.els.shareOptionDescription.textContent = description;

        this.updateOptionsAdjustment();

        this.displayTotal().show();
    },
    onWeekUpdate: function onWeekUpdate(_ref2) {
        var added = _ref2.added,
            removed = _ref2.removed;

        this.weeksAffected = this.originalWeeksAffected - removed;
        this.els.weeksAffected.textContent = this.weeksAffected;

        this.els.weeksRemoved.textContent = removed;
        this.els.weeksAdded.textContent = added;

        this.weeksAddedPrice = added * (this.originalWeeklyPrice + (this.weeklyPriceAdjustment || 0));
        this.els.weeksAddedPrice.textContent = this.Currency.format(this.weeksAddedPrice);

        this.weeksRemovedPrice = -1 * removed * this.originalWeeklyPrice;
        this.els.weeksRemovedPrice.textContent = this.Currency.format(this.weeksRemovedPrice);

        if (added == 0 && removed == 0 && !this.weeklyPriceAdjustment) return this.els.container.classList.add('fd-hidden');

        this.updateOptionsAdjustment();

        this.displayTotal().show();
    },
    postRender: function postRender() {
        var _this = this;

        this.optionsDescription = '';
        this.els.weeksAdded.textContent = 0;
        this.els.weeksRemoved.textContent = 0;
        this.weeksRemovedPrice = 0;
        this.weeksAddedPrice = 0;
        this.els.weeksRemovedPrice.textContent = this.Currency.format(this.weeksRemovedPrice);
        this.els.weeksAddedPrice.textContent = this.Currency.format(this.weeksAddedPrice);

        this.views.buttonFlow.on('confirmBtnClicked', function () {
            return _this.emit('patchMemberShare');
        });

        return this;
    },
    reset: function reset() {
        this.els.sendEmail.checked = false;
        this.optionsDescription = '';
        this.els.weeksAdded.textContent = 0;
        this.els.weeksRemoved.textContent = 0;
        this.weeksRemovedPrice = 0;
        this.els.weeksRemovedPrice.textContent = this.Currency.format(this.weeksRemovedPrice);
        this.els.weeklyAdjustment.textContent = this.Currency.format(0);
        this.weeklyPriceAdjustment = false;
        this.els.shareOptionDescription.textContent = '';
        this.hide();
    },
    setOriginalWeeklyPrice: function setOriginalWeeklyPrice(price) {
        this.originalWeeklyPrice = price;
    },
    setWeeksAffected: function setWeeksAffected(_ref3) {
        var selectable = _ref3.selectable,
            skipped = _ref3.skipped;

        this.originalWeeksAffected = selectable - skipped;
        this.weeksAffected = this.originalWeeksAffected;
        this.els.weeksAffected.textContent = this.weeksAffected;
    },
    updateOptionsAdjustment: function updateOptionsAdjustment() {
        this.optionsAdjustment = this.weeksAffected * this.weeklyPriceAdjustment;
        this.els.optionsAdjustment.textContent = this.Currency.format(this.optionsAdjustment);
        this.els.optionsAdjustment.classList.add(this.optionsAdjustment < 0 ? 'is-negative' : 'is-positive');
    }
});

},{"./__proto__":124}],119:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('./MyView'),
    Signup = function Signup() {
    return MyView.apply(this, arguments);
};

_extends(Signup.prototype, MyView.prototype, {
    done: function done() {
        this.templateData.leftBtn.hide();
        this.templateData.rightBtn.hide();
    },


    events: {
        'leftBtn': { method: 'goBack' },
        'rightBtn': { method: 'validateView' }
    },

    goBack: function goBack() {
        var _this = this;

        this.templateData.leftBtn.off();

        this.instances[this.views[this.currentIndex].name].hide();
        this.instances[this.views[this.currentIndex].name].templateData.container.removeClass('slide-in-left').removeClass('slide-in-right');

        this.currentIndex -= 1;

        this.state.signup.index = this.currentIndex;
        this.saveState();

        this.showProperView(true);

        window.setTimeout(function () {
            return _this.delegateEvents('leftBtn', _this.templateData.leftBtn);
        }, 1000);
    },


    instances: {},

    noShares: function noShares() {
        this.templateData.leftBtn.hide();
        this.templateData.rightBtn.hide();

        this.instances.shares.templateData.header.text('There are no shares available at this time');
    },
    postRender: function postRender() {

        this.signupData = {};

        this.state = this.user.get('state');

        if (this.state.signup && Object.keys(this.state.signup).length) return this.updateState(this.state.signup);

        if (!this.currentIndex) this.currentIndex = 0;
        this.state.signup = { index: this.currentIndex, shares: [] };
        this.showProperView();
    },


    requiresLogin: false,

    saveState: function saveState() {
        var _this2 = this;

        this.$.ajax({
            data: JSON.stringify({ state: this.state }),
            method: "PATCH",
            url: "/user" }).fail(function (e) {
            return new _this2.Error(e);
        });
    },
    serializeShare: function serializeShare(share) {
        return {
            id: share.id,
            selectedDelivery: share.get('selectedDelivery'),
            selectedOptions: share.get('selectedOptions'),
            skipDays: share.get('skipDays')
        };
    },
    showNext: function showNext() {
        var _this3 = this;

        this.instances[this.views[this.currentIndex].name].hide();
        this.instances[this.views[this.currentIndex].name].templateData.container.removeClass('slide-in-left').removeClass('slide-in-right');

        this.currentIndex += 1;

        this.state.signup.index = this.currentIndex;
        this.state.signup.shares = this.signupData.shares.map(function (share) {
            return _this3.serializeShare(share);
        });
        this.saveState();

        this.showProperView();
    },
    showProperNav: function showProperNav() {
        var left = this.templateData.leftBtn,
            right = this.templateData.rightBtn;

        if (this.currentIndex > 0) this.templateData.intro.text('Continue your CSA sign-up');
        if (this.currentIndex === 5) this.templateData.intro.text('Review your order and check out');

        if (this.currentIndex === 0) {
            left.hide();
            if (right.is(':hidden')) right.show();
        } else if (this.currentIndex === this.views.length - 1) {
            right.hide();
            if (left.is(':hidden')) left.show();
        } else {
            if (left.is(':hidden')) left.show();
            if (right.is(':hidden')) right.show();
        }
    },
    showProperView: function showProperView(back) {
        var _this4 = this;

        var currentViewName = this.views[this.currentIndex].name,
            klass = this.util.format('slide-in-%s', back ? 'left' : 'right');

        this.showProperNav();

        if (this.instances[currentViewName]) {
            this.instances[currentViewName].show().templateData.container.addClass(klass);
            if (this.instances[currentViewName].goBack) this.goBack();
            return;
        }

        this.instances[currentViewName] = new this.views[this.currentIndex].view({
            container: this.templateData.walkthrough,
            containerClass: klass,
            factory: this.factory,
            signupData: this.signupData
        });

        if (this.instances[currentViewName].templateData) this.instances[currentViewName].templateData.container.addClass(klass);

        if (this.views[this.currentIndex].on) {
            this.views[this.currentIndex].on.forEach(function (eventData) {
                return _this4.instances[currentViewName].on(eventData.event, function () {
                    return _this4[eventData.method]();
                });
            });
        }

        if (this.instances[currentViewName].goBack) this.goBack();

        return this;
    },


    template: require('../templates/signup'),

    updateState: function updateState(data) {
        var _this5 = this;

        this.currentIndex = data.index;

        this.instances.shares = new this.views[0].view({
            container: this.templateData.walkthrough,
            factory: this.factory,
            sessionShares: data.shares,
            signupData: this.signupData
        }).on('initialized', function () {
            return _this5.showProperView();
        });

        this.instances.shares.hide();
    },
    validateView: function validateView() {
        var _this6 = this;

        var view = this.instances[this.views[this.currentIndex].name];

        this.templateData.rightBtn.off();

        this.Q.when(view.validate()).then(function (result) {
            if (result) _this6.showNext();
        }).fail(function (e) {
            return new _this6.Error(e);
        }).done(function () {
            return window.setTimeout(function () {
                return _this6.delegateEvents('rightBtn', _this6.templateData.rightBtn);
            }, 1000);
        });
    },


    views: [{ name: 'shares', view: require('./signup/Shares'), on: [{ event: 'noShares', method: 'noShares' }] }, { name: 'memberInfo', view: require('./signup/MemberInfo') }, { name: 'shareOptions', view: require('./signup/ShareOptions') }, { name: 'delivery', view: require('./signup/Delivery') }, { name: 'dateSelection', view: require('./signup/DateSelection') }, { name: 'summary', view: require('./signup/Summary'), on: [{ event: 'done', method: 'done' }] }]

});

module.exports = Signup;

},{"../templates/signup":66,"./MyView":111,"./signup/DateSelection":127,"./signup/Delivery":128,"./signup/MemberInfo":133,"./signup/ShareOptions":140,"./signup/Shares":141,"./signup/Summary":143}],120:[function(require,module,exports){
'use strict';

module.exports = {

    events: {
        'cancelBtn': 'click',
        'submitBtn': 'click'
    },

    handleSubmissionError: function handleSubmissionError(e) {
        this.Toast.showMessage('error', this.toastError || 'Error');
        this.Error(e);
        this.onSubmitEnd();
    },
    onCancelBtnClick: function onCancelBtnClick() {
        this.delete().catch(this.Error);
    },
    onSubmitBtnClick: function onSubmitBtnClick() {
        var _this = this;

        if (this.submitting) return;
        this.onSubmitStart();
        this.submit().then(function () {
            return Promise.resolve(_this.onSubmitEnd());
        }).catch(function (e) {
            return _this.handleSubmissionError(e);
        });
    },
    onSubmitEnd: function onSubmitEnd() {
        this.submitting = false;
        this.els.submitBtn.classList.remove('submitting');
    },
    onSubmitStart: function onSubmitStart() {
        this.submitting = true;
        this.els.submitBtn.classList.add('submitting');
    }
};

},{}],121:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('./__proto__'), {

    Icons: {
        error: require('./templates/lib/error')(),
        success: require('./templates/lib/checkmark')()
    },

    insertion: { el: document.body },

    name: 'Toast',

    requiresLogin: false,

    showMessage: function showMessage(type, message) {
        var _this = this;

        return new Promise(function (resolve, reject) {
            if (/show/.test(_this.status)) return resolve();

            _this.resolution = resolve;

            if (type !== 'error') _this.els.container.classList.add('success');

            _this.els.message.textContent = message;
            _this.els.title.textContent = type === 'error' ? 'Error' : 'Success';
            _this.slurpTemplate({ insertion: { el: _this.els.icon }, template: type === 'error' ? _this.Icons.error : _this.Icons.success });

            _this.status = 'showing';

            _this.show(true).then(function () {
                return _this.hide(true);
            }).then(function () {
                return _this.teardown();
            }).catch(reject);
        });
    },
    teardown: function teardown() {
        if (this.els.container.classList.contains('success')) this.els.container.classList.remove('success');
        this.els.message.textContent = '';
        this.els.message.title = '';
        if (this.els.icon.firstChild) this.els.icon.removeChild(this.els.icon.firstChild);

        this.status = 'hidden';
        this.resolution();
    },


    template: require('./templates/Toast')

}), {}).constructor();

},{"./__proto__":124,"./templates/Toast":182,"./templates/lib/checkmark":187,"./templates/lib/error":189}],122:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {

    Pikaday: require('pikaday'),

    Templates: {
        Transaction: require('./templates/CsaTransaction'),
        EditTransaction: require('./templates/EditCsaTransaction')
    },

    Views: {
        editButtons: function editButtons() {
            return {
                model: Object.create(this.Model).constructor({
                    hide: true,
                    states: {
                        start: [{ name: 'edit', svg: require('./templates/lib/edit')(), emit: true, nextState: 'onEdit' }, { name: 'garbage', svg: require('./templates/lib/garbage')(), nextState: 'onDelete', emit: true }],
                        onDelete: [{ name: 'confirmDelete', class: 'link', 'text': 'Delete?', nextState: 'start', emit: 'true' }, { name: 'cancelDelete', svg: require('./templates/lib/ex')({ name: 'cancelDelete' }), nextState: 'start', emit: true }],
                        onEdit: [{ name: 'confirmEdit', class: 'link', 'text': 'Edit', emit: 'true', nextState: 'start' }, { name: 'cancelEdit', svg: require('./templates/lib/ex')({ name: 'cancelEdit' }), nextState: 'start', emit: true }]
                    }
                })
            };
        },
        emailButtons: function emailButtons() {
            return {
                model: Object.create(this.Model).constructor({
                    hide: true,
                    states: {
                        start: [{ name: 'sendEmail', class: 'save-btn', text: 'Send Email Reminder', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmEmail', class: 'save-btn', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', nextState: 'start', class: 'reset-btn', text: 'Cancel' }]
                    }
                })
            };
        },

        addTransaction: function addTransaction() {
            return { model: this.model };
        }
    },

    addTransaction: function addTransaction() {
        var _this = this;

        this.model.post(_extends({ memberShareId: this.share.membershareid }, this.model.attributes.reduce(function (memo, attr) {
            return _extends(memo, _defineProperty({}, attr, _this.els[attr].value));
        }, {}))).then(function (response) {
            _this.insertTransaction(response.id);
            _this.updateBalance();
            _this.Toast.showMessage('success', 'Transaction added!');
        }).catch(function (e) {
            _this.Error(e);_this.Toast.showMessage('error', 'Error adding transaction');
        });
    },
    clear: function clear() {
        this.els.transactions.innerHTML = '';
    },


    events: {
        list: 'click',
        transaction: ['mouseenter', 'mouseleave']
    },

    appendTransaction: function appendTransaction(transaction) {
        this.slurpTemplate({
            template: this.Templates.Transaction(transaction, { currency: this.Currency.format, moment: this.Moment }),
            insertion: { el: this.els.transactions }
        });
    },
    insertTransaction: function insertTransaction(transactionId) {
        var index = this.model.data.findIndex(function (datum) {
            return datum.id == transactionId;
        }),
            children = Array.from(this.els.transactions.children),
            insertion = index === 0 ? { el: children[0], method: 'insertBefore' } : { el: children[index - 1], method: 'after' };

        this.slurpTemplate({
            template: this.Templates.Transaction(this.model.data[index], { currency: this.Currency.format, moment: this.Moment }),
            insertion: insertion
        });
    },
    editTransaction: function editTransaction(e) {
        var _this2 = this;

        var el = e.target.closest('li'),
            id = el.getAttribute('data-id');

        return Promise.all([this.model.patch(id, this.model.attributes.reduce(function (memo, attr) {
            return _extends(memo, _defineProperty({}, attr, attr === 'created' ? _this2.Moment(_this2.els.editTransaction.querySelector('[data-attr="created"]').value, 'MMM D, YYYY').format('YYYY-MM-DD') : _this2.els.editTransaction.querySelector('[data-attr="' + attr + '"]').value));
        }, {})), e.fdNextState]).then(function (datum) {
            _this2.removeEditRow();
            _this2.moveOutEditButtons();
            el.remove();
            _this2.insertTransaction(id);
            _this2.updateBalance();
            _this2.Toast.showMessage('success', 'Transaction edited!');
        }).catch(function (e) {
            _this2.removeEditRow();
            _this2.Error(e);
            _this2.Toast.showMessage('error', 'Error editing transaction');
        });
    },
    deleteTransaction: function deleteTransaction(e) {
        var _this3 = this;

        var id = e.target.closest('li').getAttribute('data-id');

        Promise.all([this.model.delete(id), e.fdNextState]).then(function () {
            _this3.moveOutEditButtons();
            _this3.els.transactions.querySelector('li[data-id="' + id + '"]').remove();
            _this3.updateBalance();
            _this3.Toast.showMessage('success', 'Transaction deleted!');
        }).catch(function (e) {
            _this3.Error(e);
            _this3.Toast.showMessage('error', 'Error adding transaction');
        });
    },


    model: require('../models/CsaTransaction'),

    onAddBtnClick: function onAddBtnClick() {
        var _this4 = this;

        if (this.state === 'confirmDelete') {
            this.model.delete(this.markedForDeletion).then(function () {
                _this4.els.transactions.querySelector('li[data-id="' + _this4.markedForDeletion + '"]').remove();
                _this4.updateBalance();
                _this4.Toast.showMessage('success', 'Transaction deleted!');
                _this4.resetState();
            });
        } else if (this.state === 'confirming') {
            this.model.post(_extends({ memberShareId: this.share.membershareid }, this.model.attributes.reduce(function (memo, attr) {
                return _extends(memo, _defineProperty({}, attr, _this4.els[attr].value));
            }, {}))).then(function (response) {
                _this4.insertTransaction(response.id);
                _this4.updateBalance();
                _this4.Toast.showMessage('success', 'Transaction added!');
                _this4.resetState();
            }).catch(function (e) {
                _this4.Error(e);
                _this4.Toast.showMessage('error', 'Error adding transaction');
                _this4.resetState();
            });
        } else if (this.state === 'adding') {

            this.els.addBtn.textContent = 'Are you sure?';
            this.state = 'confirming';
        } else if (!this.state) {
            this.els.cancelBtn.classList.remove('hidden');
            this.els.addTransactionRow.classList.remove('hidden');

            this.state = 'adding';
        }
    },
    onExClick: function onExClick(e) {
        if (this.markedForDeletion) return;

        var item = e.target.closest('li');

        this.markedForDeletion = item.getAttribute('data-id');
        item.classList.add('marked');

        this.els.addBtn.textContent = 'Confirm Delete';
        this.els.cancelBtn.classList.remove('hidden');
        this.state = 'confirmDelete';
    },
    onListClick: function onListClick(e) {
        if (this.currentSelection) this.currentSelection.classList.remove('selected');

        var el = e.target;
        this.currentSelection = el;
        el.classList.add('selected');
        this.emit('selected', { customer: this.customer, share: this.MemberSeason.data.find(function (season) {
                return season.id == el.getAttribute('data-id');
            }) });
    },
    onTransactionMouseenter: function onTransactionMouseenter(e) {
        if (e.target.tagName !== "LI") return;
        if (this.views.editButtons.state !== 'start') return;
        e.target.children[0].appendChild(this.views.editButtons.els.container);
        this.views.editButtons.els.container.classList.remove('fd-hidden', 'fd-hide');
    },
    onTransactionMouseleave: function onTransactionMouseleave(e) {
        if (e.target.tagName !== "LI") return;
        if (this.views.editButtons.state !== 'start') return;
        this.moveOutEditButtons();
    },
    moveOutEditButtons: function moveOutEditButtons() {
        this.els.transactions.after(this.views.editButtons.els.container);
        this.views.editButtons.els.container.classList.add('fd-hidden');
    },
    postRender: function postRender() {
        var _this5 = this;

        this.views.emailButtons.on('confirmEmailClicked', function (e) {
            return _this5.sendMail();
        });

        this.views.editButtons.on('editClicked', function (e) {
            return _this5.createEditRow(e);
        });
        this.views.editButtons.on('cancelEditClicked', function (e) {
            return _this5.removeEditRow(e);
        });
        this.views.editButtons.on('confirmEditClicked', function (e) {
            return _this5.editTransaction(e);
        });

        this.views.editButtons.on('garbageClicked', function (e) {
            return _this5.toggleDeleteStyle(e, true);
        });
        this.views.editButtons.on('cancelDeleteClicked', function (e) {
            return _this5.toggleDeleteStyle(e, false);
        });
        this.views.editButtons.on('confirmDeleteClicked', function (e) {
            return _this5.deleteTransaction(e);
        });

        this.model.on('added', function (datum) {
            return _this5.onModelAdd(datum);
        });

        return this;
    },
    createEditRow: function createEditRow(e) {
        var _this6 = this;

        this.editedRow = e.target.closest('li');
        this.editedRow.classList.add('confirming-edit');

        var model = this.model.data.find(function (datum) {
            return datum.id == _this6.editedRow.getAttribute('data-id');
        });

        this.slurpTemplate({
            insertion: { el: this.editedRow, method: 'after' },
            template: this.Templates.EditTransaction(this.model.attributes.reduce(function (memo, attr) {
                return _extends(memo, _defineProperty({}, attr, attr === 'created' ? _this6.Moment(model.created).format('MMM D, YYYY') : model[attr]));
            }, { actions: this.model.actions }))
        });

        this.created = new this.Pikaday({ field: this.els.editTransaction.querySelector('input[data-attr="created"]'), format: 'MMM D, YYYY' });
    },
    removeEditRow: function removeEditRow(e) {
        this.editedRow.classList.remove('confirming-edit');
        this.editedRow = undefined;
        this.els.editTransaction.remove();
        delete this.els.editTransaction;
    },
    toggleDeleteStyle: function toggleDeleteStyle(e, value) {
        e.target.closest('li').classList.toggle('confirming-delete', value);
    },
    onCancelAddTransaction: function onCancelAddTransaction() {
        var _this7 = this;

        this.els.addTransactionRow.classList.add('hidden');
        this.model.attributes.forEach(function (attr) {
            return _this7.els[attr].value = attr === 'action' ? _this7.model.actions[0] : '';
        });
    },
    onModelAdd: function onModelAdd(datum) {
        this.insertTransaction(datum.id);
        this.updateBalance();
    },
    sendMail: function sendMail() {
        var _this8 = this;

        return this.Xhr({
            method: 'post',
            resource: 'mail',
            data: JSON.stringify({
                to: this.customer.person.email,
                subject: 'Patchwork Gardens ' + this.share.label + ' Balance',
                body: 'According to our records, you have an outstanding balance of ' + this.els.balance.textContent + '.\r\n\r\nPlease send payment at your earliest convenience to Patchwork Gardens, 9057 W Third St, Dayton OH 45417.\r\n\r\nIf you believe this is incorrect, please contact us by email or phone (937) 835-5807.\r\n\r\nThank You.'
            })
        }).then(function () {
            return _this8.Toast.showMessage('success', 'Email sent.');
        }).catch(function (e) {
            _this8.Error(e);_this8.Toast.showMessage('error', 'Error sending email.');
        });
    },
    update: function update(_ref) {
        var _this9 = this;

        var customer = _ref.customer,
            share = _ref.share;

        this.customer = customer;
        this.share = share;

        this.clear();

        this.model.get({ query: { memberShareId: share.membershareid } }).then(function () {
            return _this9.model.data.forEach(function (csaTransaction) {
                return _this9.appendTransaction(csaTransaction);
            });
        }).then(function () {
            return _this9.updateBalance().show();
        }).catch(this.Error);

        this.views.addTransaction.update(share.membershareid);
    },
    updateBalance: function updateBalance() {
        var balance = this.model.getBalance();
        this.els.balance.textContent = this.Currency.format(balance);

        if (balance > 0) {
            this.views.emailButtons.show();
        } else {
            this.views.emailButtons.hide();
        }

        return this;
    }
});

},{"../models/CsaTransaction":14,"./__proto__":124,"./templates/CsaTransaction":153,"./templates/EditCsaTransaction":159,"./templates/lib/edit":188,"./templates/lib/ex":190,"./templates/lib/garbage":191,"pikaday":"pikaday"}],123:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Super = require('./__proto__');

module.exports = _extends({}, Super, {

    DeliveryOption: Object.create(Super.Model, { resource: { value: 'deliveryoption' } }),
    GroupDropoffs: Object.create(Super.Model, { resource: { value: 'groupdropoff' } }),
    Route: Object.create(Super.Model, { resource: { value: 'deliveryroute' } }),
    SkipWeeks: Object.create(Super.Model, { resource: { value: 'membershareskipweek' } }),

    Share: require('../models/Share'),

    events: {
        dates: 'click',
        resetBtn: 'click'
    },

    clear: function clear() {
        this.els.dates.innerHTML = '';

        this.els.resetBtn.classList.add('hidden');
        this.els.editSummary.classList.add('hidden');
    },
    determineDates: function determineDates(dayOfWeek) {
        var _this = this;

        this.els.deliveryDay.textContent = this.Moment().isoWeekday(dayOfWeek).format('dddd');
        this.dates = [];

        if (!Number.isInteger(dayOfWeek)) return this;

        var now = this.Moment(),
            nextDeliveryCutoff = now,
            endDate = this.Moment(this.model.share.enddate);

        var deliveryDate = this.Moment(this.model.share.startdate),
            startDay = deliveryDate.day();

        while (startDay != dayOfWeek) {
            deliveryDate.add(1, 'days');
            startDay = this.Moment(deliveryDate).day();
        }

        while (endDate.diff(deliveryDate, 'days') >= 0) {
            var isSkipWeek = this.SkipWeeks.data.find(function (week) {
                return _this.Moment(week.date).week() === _this.Moment(deliveryDate).week();
            }) ? true : false;

            this.dates.push({
                date: this.Moment(deliveryDate),
                unselectable: Boolean(deliveryDate.diff(nextDeliveryCutoff) < 0),
                selected: !isSkipWeek
            });

            deliveryDate.add(7, 'days');
        }

        return this;
    },
    getPatchData: function getPatchData() {
        var _this2 = this;

        var addedDates = [],
            removedDates = [];

        Object.keys(this.changedDates).forEach(function (date) {
            var editedStatus = _this2.changedDates[date].editedStatus;

            if (!editedStatus) return;

            var formattedDate = _this2.Moment(date).format("YYYY-MM-DD");
            if (editedStatus === 'selected') addedDates.push(formattedDate);else removedDates.push(formattedDate);
        });

        return {
            addedDates: addedDates,
            removedDates: removedDates,
            allRemoved: Array.from(this.els.dates.querySelectorAll('li:not(.selected)')).map(function (el) {
                return _this2.Moment(el.getAttribute('data-date'), 'YYYYMMDD').format('YYYY-MM-DD');
            })
        };
    },
    getWeeksAffected: function getWeeksAffected() {
        var selectableDates = this.dates.filter(function (date) {
            return !date.unselectable;
        });
        return { selectable: selectableDates.length, skipped: selectableDates.filter(function (date) {
                return !date.selected;
            }).length };
    },
    getDayOfWeek: function getDayOfWeek() {
        var delivery = this.model.delivery.data[0];

        return delivery.groupdropoff.id ? this.Xhr({ method: 'get', resource: 'sharegroupdropoff', qs: JSON.stringify({ shareid: this.model.share.id, groupdropoffid: delivery.groupdropoff.id }) }).then(function (response) {
            return Promise.resolve(response[0].dayofweek);
        }) : delivery.deliveryoption.name === 'farm' ? this.Route.data.find(function (route) {
            return route.label == 'farm';
        }).dayofweek : this.Xhr({
            method: 'get',
            resource: 'zipcoderoute',
            qs: JSON.stringify({
                zipcode: this.model.customer.member.zipcode,
                routeid: { operation: 'join', value: { table: 'deliveryroute', column: 'id' } }
            })
        }).then(function (response) {
            return Promise.resolve(response[0]['deliveryroute.dayofweek']);
        });
    },
    getTotalDates: function getTotalDates() {
        return this.els.dates.querySelectorAll('li.selected').length;
    },
    onDatesClick: function onDatesClick(e) {
        var _this3 = this;

        var el = e.target.closest('li'),
            date = el.getAttribute('data-date');

        if (el.classList.contains('unselectable')) return;

        var editedStatus = void 0;

        if (!this.changedDates[date]) this.changedDates[date] = { initialStatus: el.classList.contains('selected') ? 'selected' : 'removed' };

        el.classList.toggle('selected');
        editedStatus = el.classList.contains('selected') ? 'selected' : 'removed';

        if (editedStatus !== this.changedDates[date].initialStatus) {
            this.changedDates[date].editedStatus = editedStatus;
            el.classList.add('edited');
            this.els.resetBtn.classList.remove('hidden');
        } else {
            this.changedDates[date].editedStatus = undefined;
            el.classList.remove('edited');
        }

        if (!Object.keys(this.changedDates).find(function (key) {
            return _this3.changedDates[key].editedStatus !== undefined;
        })) {
            this.els.resetBtn.classList.add('hidden');
            this.emit('reset', this.model);
            return this.els.editSummary.classList.add('hidden');
        }

        this.showEditSummary();
    },
    onResetBtnClick: function onResetBtnClick() {
        var _this4 = this;

        this.els.resetBtn.classList.add('hidden');
        this.els.editSummary.classList.add('hidden');

        Object.keys(this.changedDates).forEach(function (key) {
            if (_this4.changedDates[key].editedStatus) {
                var el = _this4.els.dates.querySelector('li[data-date=' + CSS.escape(key));
                el.classList.toggle('selected');
                el.classList.remove('edited');
            }
        });

        this.update(this.model);
        this.emit('reset', this.model);
    },
    renderDates: function renderDates() {
        var _this5 = this;

        this.dates.forEach(function (datum) {
            return _this5.slurpTemplate({ template: _this5.templates.date(datum), insertion: { el: _this5.els.dates } });
        });
        return this;
    },
    showEditSummary: function showEditSummary() {
        var _this6 = this;

        var result = 0,
            added = 0,
            removed = 0;

        this.els.selectedDates.innerHTML = '';
        this.els.removedDates.innerHTML = '';

        Object.keys(this.changedDates).forEach(function (date) {
            var editedStatus = _this6.changedDates[date].editedStatus;

            if (editedStatus) {

                editedStatus === 'selected' ? added += 1 : removed += 1;

                _this6.slurpTemplate({
                    insertion: { el: _this6.els[editedStatus + 'Dates'] },
                    template: _this6.templates.summaryColumn({ value: _this6.Moment(date).format("MMM D") })
                });
            }
        });

        result = added - removed;
        this.els.weekChange.textContent = result;
        this.els.weekChange.classList.toggle('is-negative', Boolean(result < 0));

        this.els.editSummary.classList.remove('hidden');

        this.emit('adjustment', { added: added, removed: removed });
    },


    templates: {
        date: require('./templates/DeliveryDate'),
        summaryColumn: function summaryColumn(date) {
            return '<li>' + date.value + '</li>';
        }
    },

    update: function update(_ref) {
        var _this7 = this;

        var customer = _ref.customer,
            delivery = _ref.delivery,
            share = _ref.share;

        if (this.updating) return;

        this.updating = true;

        this.model = arguments[0];

        this.changedDates = {};

        return this.Route.get().then(function () {
            return _this7.SkipWeeks.get({ query: { membershareid: share.membershareid } });
        }).then(function () {
            return _this7.getDayOfWeek();
        }).then(function (dayOfWeek) {
            _this7.clear();
            _this7.determineDates(dayOfWeek).renderDates().show();
            return Promise.resolve(_this7.updating = false);
        });
    },
    updateDelivery: function updateDelivery(data) {
        var _this8 = this;

        var modelCopy = JSON.parse(JSON.stringify(this.model));

        return this.DeliveryOption.get({ query: { name: data.deliveryOption } }).then(function () {
            if (_this8.DeliveryOption.data.length) modelCopy.delivery.data[0].deliveryoption = _this8.DeliveryOption.data[0];

            if (!data.groupOption) {
                Object.keys(modelCopy.delivery.data[0].groupdropoff).forEach(function (key) {
                    return modelCopy.delivery.data[0].groupdropoff[key] = null;
                });
            }

            return data.groupOption ? _this8.GroupDropoffs.get({ query: { name: data.groupOption } }).then(function () {
                if (_this8.GroupDropoffs.data.length) modelCopy.delivery.data[0].groupdropoff = _this8.GroupDropoffs.data[0];
                _this8.update(modelCopy);
            }) : _this8.update(modelCopy);
        }).catch(this.Error);
    }
});

},{"../models/Share":39,"./__proto__":124,"./templates/DeliveryDate":156}],124:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('../../../lib/MyObject').prototype, require('events').EventEmitter.prototype, {

    Currency: new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2
    }),

    Error: require('../../../lib/MyError'),

    Format: require('../Format'),

    Model: require('../models/__proto__'),

    Moment: require('moment'),

    OptimizedResize: require('./lib/OptimizedResize'),

    P: function P(fun) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var thisArg = arguments[2];
        return new Promise(function (resolve, reject) {
            return Reflect.apply(fun, thisArg || undefined, args.concat(function (e) {
                for (var _len = arguments.length, callback = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    callback[_key - 1] = arguments[_key];
                }

                return e ? reject(e) : resolve(callback);
            }));
        });
    },

    Xhr: require('../Xhr'),

    bindEvent: function bindEvent(key, event, el) {
        var _this = this;

        var els = el ? [el] : Array.isArray(this.els[key]) ? this.els[key] : [this.els[key]];
        els.forEach(function (el) {
            return el.addEventListener(event || 'click', function (e) {
                return _this['on' + _this.capitalizeFirstLetter(key) + _this.capitalizeFirstLetter(event)](e);
            });
        });
    },


    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    constructor: function constructor() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


        if (opts.events) {
            _extends(this.events, opts.events);delete opts.events;
        }
        _extends(this, opts);

        this.subviewElements = [];

        if (this.requiresLogin && !this.user.id) return this.handleLogin();
        if (this.user && !this.isAllowed(this.user.attributes)) return this.scootAway();

        return this.initialize().render();
    },
    delegateEvents: function delegateEvents(key, el) {
        var _this2 = this;

        var type = _typeof(this.events[key]);

        if (type === "string") {
            this.bindEvent(key, this.events[key], el);
        } else if (Array.isArray(this.events[key])) {
            this.events[key].forEach(function (eventObj) {
                return _this2.bindEvent(key, eventObj);
            });
        } else {
            this.bindEvent(key, this.events[key].event);
        }
    },
    delete: function _delete() {
        var _this3 = this;

        return this.hide().then(function () {
            _this3.els.container.parentNode.removeChild(_this3.els.container);
            return Promise.resolve(_this3.emit('deleted'));
        });
    },


    events: {},

    fadeInImage: function fadeInImage(el) {
        var _this4 = this;

        el.onload = function () {
            _this4.emit('imgLoaded', el);
            el.removeAttribute('data-src');
        };

        el.setAttribute('src', el.getAttribute('data-src'));
    },
    getContainer: function getContainer() {
        return this.els.container;
    },
    getData: function getData() {
        if (!this.model) this.model = Object.create(this.Model, { resource: { value: this.name } });

        return this.model.get();
    },
    getTemplateOptions: function getTemplateOptions() {
        var rv = _extends(this.user ? { user: this.user.data } : {}, this.Format);

        if (this.model) {
            rv.model = this.model.data;

            if (this.model.meta) rv.meta = this.model.meta;
            if (this.model.attributes) rv.attributes = this.model.attributes;
        }

        if (this.templateOpts) rv.opts = typeof this.templateOpts === 'function' ? this.templateOpts() : this.templateOpts || {};

        return rv;
    },
    handleLogin: function handleLogin() {
        var _this5 = this;

        require('./Login').show().once("success", function (userData) {
            if (!_this5.isAllowed(userData)) return _this5.scootAway();

            _this5.user.set(userData);
            _this5.user.trigger('loggedIn');

            return _this5.onLogin();
        });

        return this;
    },
    hide: function hide(isSlow) {
        var _this6 = this;

        if (!this.els || this.isHiding) return Promise.resolve();

        this.isHiding = true;
        return this.hideEl(this.els.container, isSlow).then(function () {
            return Promise.resolve(_this6.hiding = false);
        });
    },
    hideSync: function hideSync() {
        this.els.container.classList.add('fd-hidden');return this;
    },
    _hideEl: function _hideEl(el, resolve, hash, isSlow) {
        el.removeEventListener('animationend', this[hash]);
        el.classList.add('fd-hidden');
        el.classList.remove('animate-out' + (isSlow ? '-slow' : ''));
        delete this[hash];
        this.isHiding = false;
        resolve();
    },
    hideEl: function hideEl(el, isSlow) {
        var _this7 = this;

        if (this.isHidden(el)) return Promise.resolve();

        var time = new Date().getTime(),
            hash = time + 'Hide';

        return new Promise(function (resolve) {
            _this7[hash] = function (e) {
                return _this7._hideEl(el, resolve, hash, isSlow);
            };
            el.addEventListener('animationend', _this7[hash]);
            el.classList.add('animate-out' + (isSlow ? '-slow' : ''));
        });
    },
    htmlToFragment: function htmlToFragment(str) {
        var range = document.createRange();
        // make the parent of the first div in the document becomes the context node
        range.selectNode(document.getElementsByTagName("div").item(0));
        return range.createContextualFragment(str);
    },
    initialize: function initialize() {
        return _extends(this, { els: {}, slurp: { attr: 'data-js', view: 'data-view', name: 'data-name', img: 'data-src', bgImg: 'data-bg' }, views: {} });
    },
    insertToDom: function insertToDom(fragment, options) {
        var insertion = typeof options.insertion === 'function' ? options.insertion() : options.insertion;

        insertion.method === 'insertBefore' ? insertion.el.parentNode.insertBefore(fragment, insertion.el) : insertion.el[insertion.method || 'appendChild'](fragment);
    },
    isAllowed: function isAllowed(user) {
        if (!this.requiresRole) return true;
        return this.requiresRole && user.roles.includes(this.requiresRole);
    },
    isHidden: function isHidden(el) {
        return el ? el.classList.contains('fd-hidden') : this.els.container.classList.contains('fd-hidden');
    },
    loadBgImage: function loadBgImage(el) {
        var img = new Image();

        img.onload = function () {
            return el.classList.add('bg-loaded');
        };
        img.src = this.Format.ImageSrc(el.getAttribute('data-bg'));
    },
    onLogin: function onLogin() {
        this.initialize().render();
    },
    onNavigation: function onNavigation(path) {
        return this.show();
    },
    showNoAccess: function showNoAccess() {
        alert("No privileges, son");
        return this;
    },
    postRender: function postRender() {
        return this;
    },
    render: function render() {
        if (this.data) this.model = Object.create(this.Model, {}).constructor(this.data);

        this.slurpTemplate({
            insertion: this.insertion || { el: document.body },
            isView: true,
            storeFragment: this.storeFragment,
            template: this.template(this.getTemplateOptions(), { Moment: this.Moment })
        });

        this.renderSubviews();

        if (this.size) {
            this.size();this.OptimizedResize.add(this.size.bind(this));
        }

        return this.postRender();
    },
    renderSubviews: function renderSubviews() {
        var _this8 = this;

        this.subviewElements.forEach(function (obj) {
            var name = obj.name || obj.view;

            var opts = {};

            if (_this8.Views && _this8.Views[obj.view]) opts = _typeof(_this8.Views[obj.view]) === "object" ? _this8.Views[obj.view] : Reflect.apply(_this8.Views[obj.view], _this8, []);
            if (_this8.Views && _this8.Views[name]) opts = _typeof(_this8.Views[name]) === "object" ? _this8.Views[name] : Reflect.apply(_this8.Views[name], _this8, []);

            _this8.views[name] = _this8.factory.create(obj.view, _extends({ insertion: { el: obj.el, method: 'insertBefore' } }, opts));

            if (_this8.events.views) {
                if (_this8.events.views[name]) _this8.events.views[name].forEach(function (arr) {
                    return _this8.views[name].on(arr[0], function (eventData) {
                        return Reflect.apply(arr[1], _this8, [eventData]);
                    });
                });else if (_this8.events.views[obj.view]) _this8.events.views[obj.view].forEach(function (arr) {
                    return _this8.views[name].on(arr[0], function (eventData) {
                        return Reflect.apply(arr[1], _this8, [eventData]);
                    });
                });
            }

            if (obj.el.classList.contains('fd-hidden')) _this8.views[name].hideSync();
            obj.el.remove();
        });

        this.subviewElements = [];

        return this;
    },


    requiresLogin: false,

    scootAway: function scootAway() {
        var _this9 = this;

        this.Toast.show('error', 'You are not allowed here.  Sorry.').catch(function (e) {
            _this9.Error(e);_this9.emit('navigate', '/');
        }).then(function () {
            return _this9.emit('navigate', '/');
        });

        return this;
    },
    show: function show(isSlow) {
        return this.showEl(this.els.container, isSlow);
    },
    showSync: function showSync() {
        this.els.container.classList.remove('fd-hidden');return this;
    },
    _showEl: function _showEl(el, resolve, hash, isSlow) {
        el.removeEventListener('animationend', this[hash]);
        el.classList.remove('animate-in' + (isSlow ? '-slow' : ''));
        delete this[hash];
        resolve();
    },
    showEl: function showEl(el, isSlow) {
        var _this10 = this;

        var time = new Date().getTime(),
            hash = time + 'Show';

        return new Promise(function (resolve) {
            _this10[hash] = function (e) {
                return _this10._showEl(el, resolve, hash, isSlow);
            };
            el.addEventListener('animationend', _this10[hash]);
            el.classList.remove('fd-hidden');
            el.classList.add('animate-in' + (isSlow ? '-slow' : ''));
        });
    },
    slurpEl: function slurpEl(el) {
        var key = el.getAttribute(this.slurp.attr) || 'container';

        if (key === 'container') el.classList.add(this.name);

        this.els[key] = Array.isArray(this.els[key]) ? this.els[key].concat(el) : this.els[key] !== undefined ? [this.els[key], el] : el;

        el.removeAttribute(this.slurp.attr);

        if (this.events[key]) this.delegateEvents(key, el);
    },
    slurpTemplate: function slurpTemplate(options) {
        var _this11 = this;

        var fragment = this.htmlToFragment(options.template),
            selector = '[' + this.slurp.attr + ']',
            viewSelector = '[' + this.slurp.view + ']',
            imgSelector = '[' + this.slurp.img + ']',
            bgImgSelector = '[' + this.slurp.bgImg + ']',
            firstEl = fragment.querySelector('*');

        if (options.isView || firstEl.getAttribute(this.slurp.attr)) this.slurpEl(firstEl);

        Array.from(fragment.querySelectorAll(selector + ', ' + viewSelector + ', ' + imgSelector + ', ' + bgImgSelector)).forEach(function (el) {
            if (el.hasAttribute(_this11.slurp.attr)) {
                _this11.slurpEl(el);
            } else if (el.hasAttribute(_this11.slurp.img)) return _this11.fadeInImage(el);else if (el.hasAttribute(_this11.slurp.bgImg)) return _this11.loadBgImage(el);else if (el.hasAttribute(_this11.slurp.view)) {
                _this11.subviewElements.push({ el: el, view: el.getAttribute(_this11.slurp.view), name: el.getAttribute(_this11.slurp.name) });
            }
        });

        if (options.storeFragment) return _extends(this, { fragment: fragment });

        this.insertToDom(fragment, options);

        if (options.renderSubviews) this.renderSubviews();

        return this;
    }
});

},{"../../../lib/MyError":200,"../../../lib/MyObject":201,"../Format":5,"../Xhr":7,"../models/__proto__":43,"./Login":107,"./lib/OptimizedResize":125,"events":217,"moment":"moment"}],125:[function(require,module,exports){
'use strict';

module.exports = Object.create({
    add: function add(callback) {
        if (!this.callbacks.length) window.addEventListener('resize', this.onResize.bind(this));
        this.callbacks.push(callback);
    },
    onResize: function onResize() {
        if (this.running) return;

        this.running = true;

        window.requestAnimationFrame ? window.requestAnimationFrame(this.runCallbacks.bind(this)) : setTimeout(this.runCallbacks, 66);
    },
    runCallbacks: function runCallbacks() {
        this.callbacks = this.callbacks.filter(function (callback) {
            return callback();
        });
        this.running = false;
    }
}, { callbacks: { writable: true, value: [] }, running: { writable: true, value: false } });

},{}],126:[function(require,module,exports){
'use strict';

var MyView = require('./MyView'),
    Modal = function Modal() {
    return MyView.apply(this, arguments);
};

MyView.prototype._.extend(Modal.prototype, MyView.prototype, {
    checkForEnter: function checkForEnter(e) {
        if (e.keyCode === 13) this.emitConfirmation();
    },


    emitConfirmation: function emitConfirmation() {
        this.emit('submit', this.getFormData());
    },

    events: {
        'confirmBtn': { event: 'click', selector: '', method: 'emitConfirmation' }
    },

    hide: function hide(options) {

        this.templateData = this._.pick(this.templateData, this.templateDataKeys);

        this.templateData.container.modal('hide');

        this.templateData.title.text('');
        this.templateData.header.show();
        this.templateData.body.removeClass('hide').empty();
        this.templateData.footer.show();
        this.templateData.cancelBtn.show().text('Cancel');
        this.templateData.closeBtn.show();
        this.templateData.confirmBtn.show().text('Save');

        return this;
    },

    postRender: function postRender() {
        var _this = this;

        this.$(document).on('keyup', this.checkForEnter.bind(this));

        this.templateData.container.on('hidden.bs.modal', function () {
            _this.hide({ reset: true });
            _this.emit('hidden');
            _this.removeAllListeners('submit');
        });

        this.templateData.container.on('shown.bs.modal', function () {
            var firstInput = _this.$('.modal-body input:first');
            _this.emit('shown');
            if (firstInput.length && !/date/.test(firstInput.attr('id'))) firstInput.focus();
        });

        return this;
    },

    requiresLogin: false,

    show: function show(options) {

        this.templateDataKeys = Object.keys(this.templateData);

        var bsOpts = { show: true };

        if (options.title) {
            this.templateData.title.text(options.title);
            this.templateData.header.show();
        } else {
            this.templateData.header.hide();
        }

        if (options.body) {
            this.templateData.body.removeClass('hide');
            options.body.charAt(0) === '<' ? this.slurpTemplate({ template: options.body, insertion: { $el: this.templateData.body, method: 'append' } }) : this.templateData.body.html(options.body);
        } else if (!options.body && this.templateData.body.children().length === 0) {
            this.templateData.body.addClass('hide');
        }

        if (options.hideFooter) this.templateData.footer.hide();

        if (options.confirmText) this.templateData.confirmBtn.text(options.confirmText);

        if (options.hideCancelBtn) this.templateData.cancelBtn.hide();
        if (options.cancelText) this.templateData.cancelBtn.text(options.cancelText);

        if (options.static) {
            bsOpts.backdrop = 'static';
            bsOpts.keyboard = false;
            this.templateData.closeBtn.hide();
        }

        this.templateData.container.modal(bsOpts);

        return this;
    },


    template: require('../templates/modal')(require('handlebars')),

    updateContent: function updateContent(updates) {
        var _this2 = this;

        this._.updates.each(function (value, key) {
            return _this2.templateData[key].html(value);
        });
    }

});

module.exports = new Modal({ container: MyView.prototype.$('body') });

},{"../templates/modal":62,"./MyView":111,"handlebars":247}],127:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    DateSelection = function DateSelection() {
    return List.apply(this, arguments);
};

_extends(DateSelection.prototype, List.prototype, {

    ItemView: require('./PickupDates'),

    collection: { comparator: 'startEpoch' },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares };
    },
    itemModels: function itemModels() {
        return this.signupData.shares.models;
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.signupData.shares.on('add', function (share) {
            return _this.items.add(share);
        }).on('remove', function (share) {
            return _this.items.remove(share);
        });

        this.preValidate();
    },
    preValidate: function preValidate() {
        var _this2 = this;

        this.goBack = false;

        this.items.forEach(function (share) {
            var selectedDelivery = share.get('selectedDelivery');

            if (!Number.isInteger(selectedDelivery.dayofweek) || !selectedDelivery.starttime || !selectedDelivery.starttime) {
                share.set({ selectedDelivery: {} });
                _this2.goBack = true;
            }
        });
    },


    requiresLogin: false,

    selection: true,

    show: function show() {
        List.prototype.show.call(this);

        this.preValidate();

        return this;
    },


    template: require('../../templates/signup/dateSelection'),

    validate: function validate() {
        var _this3 = this;

        var valid = true,
            errorViews = [],
            targetErrorView = null;

        Object.keys(this.itemViews).forEach(function (id) {
            if (!_this3.itemViews[id].valid) {
                valid = false;
                errorViews.push(_this3.itemViews[id].templateData.container);
                _this3.itemViews[id].templateData.container.addClass('has-error');
            }
        });

        if (errorViews.length) {
            targetErrorView = errorViews.slice(-1)[0];
            this.$('html, body').animate({
                scrollTop: targetErrorView.offset().top
            }, 500);
        }

        if (valid) {
            //.reject( deliveryDay => deliveryDay.get('unselectable') )

            this.items.forEach(function (item) {
                return item.set('skipDays', _this3._(item.get('deliveryDates').reject(function (deliveryDay) {
                    return _this3.itemViews[item.id].selectedItems[deliveryDay.id] ? true : false;
                })).map(function (deliveryDay) {
                    return deliveryDay.id;
                }));
            });
        }

        return valid;
    }
});

module.exports = DateSelection;

},{"../../templates/signup/dateSelection":67,"../util/List":196,"./PickupDates":137}],128:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    Delivery = function Delivery() {
    return List.apply(this, arguments);
};

_extends(Delivery.prototype, List.prototype, {

    ItemView: require('./DeliveryOptions'),

    Models: {
        DeliveryRoute: require('../../models/DeliveryRoute')
    },

    collection: { comparator: 'startEpoch' },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares, signupData: this.signupData };
    },
    itemModels: function itemModels() {
        return this.signupData.shares.models;
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.signupData.shares.on('add', function (share) {
            return _this.items.add(share);
        }).on('remove', function (share) {
            return _this.items.remove(share);
        });
    },


    requiresLogin: false,

    template: require('../../templates/signup/delivery'),

    templates: {
        verifyAddress: require('../../templates/signup/verifyAddress')
    },

    validate: function validate() {
        var _this2 = this;

        var valid = true,
            errorViews = [],
            targetErrorView = null,
            homeDeliverySelected = false,
            addressModel = this.user.get('addressModel'),
            postalCode = addressModel && addressModel.postalCode ? addressModel.postalCode : undefined,
            deferred = this.Q.defer();

        Object.keys(this.itemViews).forEach(function (id) {
            if (!_this2.itemViews[id].valid) {
                valid = false;
                errorViews.push(_this2.itemViews[id].templateData.container);
                _this2.itemViews[id].templateData.container.addClass('has-error');
            }
        });

        if (!valid) return false;

        Object.keys(this.itemViews).forEach(function (id) {
            _this2.items.get(id).set('selectedDelivery', _extends({}, _this2.itemViews[id].selectedDelivery));
            if (_this2.itemViews[id].selectedDelivery.isHome) homeDeliverySelected = true;
        });

        if (errorViews.length) {
            targetErrorView = errorViews.slice(-1)[0];
            this.$('html, body').animate({
                scrollTop: targetErrorView.offset().top
            }, 500);
        }

        if (!valid) return false;

        if (homeDeliverySelected && this.user.get('customAddress')) {
            this.modalView.show({
                body: this.templates.verifyAddress({ address: this.user.get('address'), zipCode: postalCode }),
                title: 'Verify Adress' }).on('hidden', function () {

                Object.keys(_this2.itemViews).forEach(function (id) {
                    var selectedDelivery = _this2.items.get(id).get('selectedDelivery');
                    if (!selectedDelivery.dayofweek || !selectedDelivery.starttime || !selectedDelivery.endtime) deferred.reject();
                });

                deferred.resolve();
            }).on('submit', function () {
                var zipRoute = new (_this2.Model.extend({ parse: function parse(response) {
                        return response[0];
                    }, urlRoot: "/zipcoderoute" }))(),
                    homeDeliveryRoute = new _this2.Models.DeliveryRoute(),
                    userAttributes;

                _this2.$('#zipCodeFormGroup').removeClass('has-error');
                _this2.$('#zipCodeHelpBlock').addClass('hide');

                if (!_this2.$('#verifiedZipCode').val().length) {
                    _this2.$('#zipCodeFormGroup').addClass('has-error');
                    _this2.$('#zipCodeHelpBlock').removeClass('hide');
                    return;
                }

                _this2.Q(zipRoute.fetch({ data: { zipcode: _this2.$('#verifiedZipCode').val() } })).then(function () {
                    if (Object.keys(zipRoute.attributes).length === 0) {
                        _this2.$('#zipCodeFormGroup').addClass('has-error');
                        _this2.$('#zipCodeHelpBlock').removeClass('hide');
                        return;
                    }

                    return _this2.Q(homeDeliveryRoute.set({ id: zipRoute.get('routeid') }).fetch()).then(function () {
                        Object.keys(_this2.itemViews).forEach(function (id) {
                            var selectedDelivery = _extends({}, _this2.itemViews[id].selectedDelivery, homeDeliveryRoute.pick(['dayofweek', 'starttime', 'endtime']));
                            if (_this2.itemViews[id].selectedDelivery.isHome) {
                                _this2.items.get(id).set('selectedDelivery', selectedDelivery);
                                _this2.itemViews[id].selectedDelivery = selectedDelivery;
                                _this2.itemViews[id].showFeedback(_this2.itemViews[id].feedback.home(selectedDelivery));
                            }
                        });

                        userAttributes = _extends({}, _this2.user.attributes, {
                            address: _this2.$('#verifiedAddress').val(),
                            addressModel: _extends(_this2.user.get('addressModel') || {}, { postalCode: _this2.$('#verifiedZipCode').val(), types: ["street_address"] }),
                            customAddress: false
                        });

                        return _this2.Q(_this2.$.ajax({ data: JSON.stringify(userAttributes), method: "PATCH", url: "/user" }));
                    }).then(function () {
                        _this2.user.set(userAttributes, { silent: true });
                        _this2.modalView.templateData.container.modal('hide');
                        deferred.resolve(true);
                    });
                }).fail(function (e) {
                    console.log(e.stack || e);
                    deferred.reject(e);
                }).done();
            });

            return deferred.promise;
        }

        return true;
    }
});

module.exports = Delivery;

},{"../../models/DeliveryRoute":20,"../../templates/signup/delivery":68,"../../templates/signup/verifyAddress":85,"../util/List":196,"./DeliveryOptions":130}],129:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('../util/ListItem'),
    DeliveryOption = function DeliveryOption() {
    return ListItem.apply(this, arguments);
};

_extends(DeliveryOption.prototype, ListItem.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/deliveryOption')

});

module.exports = DeliveryOption;

},{"../../templates/signup/deliveryOption":69,"../util/ListItem":197}],130:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    DeliveryOptions = function DeliveryOptions() {
    return List.apply(this, arguments);
};

_extends(DeliveryOptions.prototype, List.prototype, {

    ItemView: require('./DeliveryOption'),

    Models: {
        DeliveryRoute: require('../../models/DeliveryRoute')
    },

    Views: {
        Dropoffs: require('./Dropoffs')
    },

    farmFeedback: function farmFeedback(model) {
        var _this = this;

        this.farmPickup = new (this.Models.DeliveryRoute.extend({ parse: function parse(response) {
                return _this.Models.DeliveryRoute.prototype.parse(response[0]);
            } }))();
        this.farmPickup.fetch({ data: { label: 'farm' } }).done(function () {
            if (Object.keys(_this.farmPickup.attributes).length === 0) {
                _this.valid = false;
                return _this.showFeedback(_this.feedback.noFarmRoute());
            }

            _this.showFeedback(_this.feedback.farm(_this.farmPickup.attributes));

            _this.selectedDelivery = _extends({}, { deliveryoptionid: model.id }, _this.farmPickup.pick(['dayofweek', 'starttime', 'endtime']));

            _this.valid = true;
        });
    },


    feedback: {
        home: require('../../templates/signup/homeDeliveryFeedback'),
        farm: require('../../templates/signup/farmPickupFeedback'),
        group: function group() {
            return "Please select a dropoff location below.";
        },
        invalidZip: function invalidZip(zipcode) {
            return this.util.format('Postal Code of %s is not in our delivery area.  Please contact us to discuss options.', zipcode);
        },
        noFarmRoute: function noFarmRoute() {
            return "There is currently an error with On-Farm Pickup selection.";
        }
    },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.options };
    },
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },
    groupFeedback: function groupFeedback(deliveryOption) {
        var _this2 = this;

        if (this.dropoffView) {
            if (!Object.keys(this.dropoffView.selectedItems).length) this.showFeedback(this.feedback.group());
            return this.dropoffView.templateData.container.show();
        }

        this.groupDropoffPromise.then(function () {

            if (!_this2.selectedDelivery || _this2.selectedDelivery && !_this2.selectedDelivery.groupdropoffid) _this2.showFeedback(_this2.feedback.group());

            _this2.dropoffView = new _this2.Views.Dropoffs({ container: _this2.templateData.dropoffs }).on('itemUnselected', function () {
                _this2.dropoffView.itemViews.forEach(function (view) {
                    if (view.templateData.container.is(':hidden')) view.templateData.container.show();
                });

                _this2.showFeedback(_this2.feedback.group());

                _this2.valid = false;
            }).on('itemSelected', function (model) {
                var selectedId = model.id;

                _this2.model.get('groupdropoffs').forEach(function (model) {
                    if (model.id !== selectedId) _this2.dropoffView.itemViews[model.id].templateData.container.hide();
                });

                _this2.selectedDelivery = _extends({}, { deliveryoptionid: deliveryOption.id, groupdropoffid: model.id }, model.pick(['dayofweek', 'starttime', 'endtime']));

                _this2.templateData.feedback.empty();

                _this2.valid = true;
            }).on('itemAdded', function (model) {
                var selectedDelivery = _this2.model.get('selectedDelivery');
                if (selectedDelivery && Object.keys(_this2.dropoffView.itemViews).length == _this2.dropoffView.items.length && _this2.dropoffView.itemViews[selectedDelivery.groupdropoffid]) {

                    _this2.dropoffView.selectItem(_this2.dropoffView.items.get(selectedDelivery.groupdropoffid));
                }
            });

            _this2.dropoffView.items.reset(_this2.model.get('groupdropoffs').models);

            if (_this2.model.get('groupdropoffs').length === 0) {
                _this2.dropoffView.templateData.container.text("No available group dropoff locations, please select another option");
            }
        }).fail(function (e) {
            return console.log(e.stack || e);
        }).done();
    },
    homeFeedback: function homeFeedback(deliveryOption) {
        var _this3 = this;

        var addressModel = this.user.get('addressModel'),
            userPostalCode = addressModel ? addressModel.postalCode : undefined;

        if (!userPostalCode) {

            this.showFeedback('<div>Because we could not lookup your address, we are currently unable to provide a delivery day for the week or time.  We will take care of this in the next step by having you verify your address.</div>');

            this.selectedDelivery = { deliveryoptionid: deliveryOption.id, isHome: true };

            return this.valid = true;
        }

        this.zipRoute = new (this.Model.extend({ parse: function parse(response) {
                return response[0];
            }, urlRoot: "/zipcoderoute" }))();
        this.homeDeliveryRoute = new this.Models.DeliveryRoute();

        this.zipRoute.fetch({ data: { zipcode: userPostalCode } }).fail(function (e) {
            return console.log(e.stack || e);
        }).done(function () {
            if (Object.keys(_this3.zipRoute.attributes).length === 0) {
                _this3.valid = false;
                return _this3.showFeedback(_this3.feedback.invalidZip.call(_this3, userPostalCode));
            }
            _this3.homeDeliveryRoute.set({ id: _this3.zipRoute.get('routeid') }).fetch().fail(function (e) {
                return console.log(e.stack || e);
            }).done(function () {
                _this3.showFeedback(_this3.feedback.home(_this3.homeDeliveryRoute.attributes));

                _this3.selectedDelivery = _extends({ deliveryoptionid: deliveryOption.id, isHome: true }, _this3.homeDeliveryRoute.pick(['dayofweek', 'starttime', 'endtime']));

                _this3.valid = true;
            });
        });
    },
    postRender: function postRender() {
        var _this4 = this;

        var share = this.model;

        this.selection = 'single';

        List.prototype.postRender.call(this);

        this.on('itemAdded', function (model) {
            var price = parseFloat(model.get('price').replace(/\$|,/g, "")),
                selectedDelivery = _this4.model.get('selectedDelivery');

            if (price == 0) _this4.itemViews[model.id].templateData.deliveryPrice.text("No charge");else if (price < 0) _this4.itemViews[model.id].templateData.deliveryPrice.text(_this4.util.format('Save %s per week', model.get('price').replace('-', '')));

            if (selectedDelivery && selectedDelivery.deliveryoptionid == model.id) _this4.selectItem(model);
        });

        share.getDeliveryOptions().then(function () {
            var deliveryOptions = share.get('deliveryoptions');

            _this4.items.reset(deliveryOptions.models);

            if (deliveryOptions.length === 0) _this4.templateData.options.text('This share does not have delivery options associated with it.  Please contact Patchwork and sign up for this particular share at a later date.');
        }).fail(function (e) {
            return console.log(e.stack || e);
        }).done();

        this.on('itemSelected', function (model) {
            _this4.templateData.container.removeClass('has-error');
            if (_this4.dropoffView && model.get('name') !== 'group') _this4.dropoffView.templateData.container.hide();
            _this4[_this4.util.format('%sFeedback', model.get('name'))](model);
        }).on('itemUnselected', function () {
            _this4.valid = false;
            _this4.templateData.feedback.empty();
            _this4.selectedDelivery = null;
            if (_this4.dropoffView) _this4.dropoffView.templateData.container.hide();
        });

        this.groupDropoffPromise = share.getGroupDropoffs();

        this.user.on('change:address', function () {
            var selectedIds = Object.keys(_this4.selectedItems);

            if (selectedIds.length === 0) return;

            _this4.unselectItem(_this4.items.get(selectedIds[0]));
        });
    },


    requiresLogin: false,

    showFeedback: function showFeedback(html) {
        this.templateData.feedback.html(html).show();
    },


    template: require('../../templates/signup/deliveryOptions')
});

module.exports = DeliveryOptions;

},{"../../models/DeliveryRoute":20,"../../templates/signup/deliveryOptions":70,"../../templates/signup/farmPickupFeedback":73,"../../templates/signup/homeDeliveryFeedback":74,"../util/List":196,"./DeliveryOption":129,"./Dropoffs":132}],131:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Item = require('../util/ListItem'),
    Dropoff = function Dropoff() {
    return Item.apply(this, arguments);
};

_extends(Dropoff.prototype, Item.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/dropoff')

});

module.exports = Dropoff;

},{"../../templates/signup/dropoff":71,"../util/ListItem":197}],132:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    Dropoffs = function Dropoffs() {
    return List.apply(this, arguments);
};

_extends(Dropoffs.prototype, List.prototype, {

    ItemView: require('./Dropoff'),

    requiresLogin: false,

    selection: 'single',

    template: require('../../templates/signup/dropoffs')

});

module.exports = Dropoffs;

},{"../../templates/signup/dropoffs":72,"../util/List":196,"./Dropoff":131}],133:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var View = require('../MyView'),
    Form = require('../util/Form').prototype,
    MemberInfo = function MemberInfo() {
    return View.apply(this, arguments);
};

_extends(MemberInfo.prototype, View.prototype, {

    MemberFoodOmission: require('../../models/MemberFoodOmission'),

    addressSelected: function addressSelected() {
        var place = this.addressAutoComplete.getPlace();

        this.templateData.address.val(place.formatted_address);
        this.showValid(this.templateData.address);

        this.user.set({
            address: place.formatted_address,
            addressModel: {
                postalCode: this._(place.address_components).find(function (component) {
                    return component.types[0] === "postal_code";
                }).short_name,
                types: place.types
            }
        });
    },


    emailRegex: Form.emailRegex,

    events: {
        'infoBtn': { method: 'showInfoModal' }
    },

    fields: [{
        name: 'name',
        label: 'Name',
        type: 'text',
        error: "Name is a required field.",
        validate: function validate(val) {
            return this.$.trim(val) !== '';
        }
    }, {
        name: 'email',
        label: 'Email',
        type: 'text',
        error: "Please enter a valid email address.",
        validate: function validate(val) {
            return this.emailRegex.test(val);
        }
    }, {
        name: 'phonenumber',
        label: 'Phone Number',
        type: 'text',
        error: "Please enter a valid phone number.",
        validate: function validate(val) {
            return val.length > 8;
        }
    }, {
        name: 'address',
        label: 'Address 1',
        type: 'text',
        error: "Please enter a valid address.",
        validate: function validate(val) {
            return this.validateAddress(val);
        }
    }, {
        name: 'extraaddress',
        label: 'Address 2',
        type: 'text',
        validate: function validate() {
            return true;
        }
    }, {
        name: 'password',
        label: 'Password',
        type: 'password',
        error: "Password must be at least six characters.",
        validate: function validate(val) {
            return this.user.isAdmin() || val.length > 5;
        }
    }, {
        name: 'repeatpassword',
        label: 'Repeat Password',
        type: 'password',
        error: "Passwords must match.",
        validate: function validate(val) {
            return this.user.isAdmin() || val === this.templateData.password.val();
        }
    }, {
        name: 'omission',
        label: 'Opt-out Vegetable',
        type: 'select',
        info: true,
        validate: function validate() {
            return true;
        }
    }, {
        name: 'heard',
        label: 'How you heard about us',
        type: 'text',
        validate: function validate() {
            return true;
        }
    }],

    geolocate: function geolocate() {
        var _this = this;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                return _this.addressAutoComplete.setBounds(new google.maps.Circle({
                    center: {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    },
                    radius: position.coords.accuracy }).getBounds());
            });
        }
    },
    getTemplateOptions: function getTemplateOptions() {
        return { fields: this.fields };
    },
    initAutocomplete: function initAutocomplete() {
        this.addressAutoComplete = new google.maps.places.Autocomplete(this.templateData.address.get(0), { types: ['address'] });

        this.addressAutoComplete.addListener('place_changed', this.addressSelected.bind(this));
    },
    postRender: function postRender() {
        var _this2 = this;

        var self = this;

        if (this.user.isAdmin()) {
            this.views = { memberTypeahead: this.factory.create('memberTypeahead', _extends({ insertion: { el: this.templateData.container.get(0).firstChild, method: 'insertBefore' } })) };
            this.views.memberTypeahead.focus();

            this.views.memberTypeahead.on('customerSelected', function (customer) {
                _this2.selectedCustomer = customer;
                _this2.templateData.name.val(customer.person.data.name);
                _this2.templateData.email.val(customer.person.data.secondaryEmail ? [customer.person.data.email, customer.person.data.secondaryEmail].join(', ') : customer.person.data.email);
                _this2.templateData.phonenumber.val(customer.member.data.phonenumber);
                _this2.templateData.address.val(customer.member.data.address);
                _this2.templateData.extraaddress.val(customer.member.data.extraaddress);
                _this2.templateData.heard.val(customer.member.data.heard);

                _this2.MemberFoodOmission.get({ query: { memberid: customer.member.data.id } }).then(function () {
                    if (_this2.MemberFoodOmission.data.length) {
                        var datum = _this2.MemberFoodOmission.data[0],
                            index = _this2.FoodOmission.Foods.data.findIndex(function (food) {
                            return food.produceid == datum.produceid && food.produceid !== null || food.producefamilyid == datum.producefamilyid && datum.produceid === null;
                        });

                        if (index !== -1) {
                            var foodDatum = _this2.FoodOmission.Foods.data[index];
                            datum.name = foodDatum.name;
                            _this2.FoodOmission.ms.setSelection([_extends({}, foodDatum, { id: index })]);
                        }
                    } else {
                        _this2.FoodOmission.clear();
                    }
                }).catch(function (e) {
                    _this2.Toast.showMessage('error', 'Error retrieving Food Omission Data');_this2.Error;
                });
            });
        }

        window.google && window.google.maps ? this.initAutocomplete() : window.initGMap = function () {
            return _this2.initAutocomplete();
        };

        this.templateData.address.attr('placeholder', '');

        this.FoodOmission = this.factory.create('foodOmission', { insertion: { el: this.templateData.omission.get(0), method: 'after' } });

        this.templateData.omission.remove();

        this.FoodOmission.initializeFoodOmission().then(function () {
            _this2.templateData.omission = _this2.FoodOmission.getMagicSuggest();

            _this2.fields.forEach(function (field) {
                if (_this2.user.has(field.name)) {
                    _this2.templateData[field.name].val(_this2.user.get(field.name));
                }
            });
        });

        this.templateData.container.find('form input').on('blur', function () {
            var $el = self.$(this),
                field = self._(self.fields).find(function (field) {
                return field.name === $el.attr('id');
            });

            if (field.name === 'address') {
                if (self.templateData.address.val() === '') self.showError($el, field.error);
                return;
            }

            self.Q.fcall(field.validate.bind(self, $el.val())).then(function (valid) {
                if (valid) {
                    self.showValid($el);
                } else {
                    self.showError($el, field.error);
                }
            });
        }).on('focus', function () {
            self.removeError(self.$(this));
        });
    },
    removeError: function removeError($el) {
        $el.parent().parent().removeClass('has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-remove');
        $el.siblings('.help-block').remove();
    },


    requiresLogin: false,

    showError: function showError($el, error) {
        var formGroup = $el.parent().parent();

        if (formGroup.hasClass('has-error')) return;

        formGroup.removeClass('has-success').addClass('has-feedback has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-ok').addClass('glyphicon-remove').after(Form.templates.fieldError({ error: error }));
    },
    showInfoModal: function showInfoModal() {
        var _this3 = this;

        this.Xhr({ method: 'get', resource: 'csacustomization' }).then(function (data) {
            return _this3.modalView.show({
                body: _this3.templates.csaCustomization(data[0]),
                hideFooter: true
            });
        }).catch(function (e) {
            return new _this3.Error(e);
        });
    },
    showValid: function showValid($el) {
        $el.parent().parent().removeClass('has-error').addClass('has-feedback has-success');
        $el.next().removeClass('hide').removeClass('glyphicon-remove').addClass('glyphicon-ok');
        $el.siblings('.help-block').remove();
    },


    template: require('../templates/MemberInfo'),

    templates: {
        csaCustomization: require('../../templates/csaCustomization')
    },

    validate: function validate() {
        var _this4 = this;

        var valid = true;

        if (this.templateData.container.find('has-error').length) return false;

        return this.Q.all(this.fields.map(function (field) {
            return _this4.Q.when(field.validate.call(_this4, _this4.templateData[field.name].val())).then(function (result) {
                if (result === false) {
                    valid = false;
                    _this4.showError(_this4.templateData[field.name], field.error);
                } else {
                    _this4.user.set(field.name, _this4.templateData[field.name].val());
                }
            });
        })).then(function () {
            if (valid && !_this4.user.isAdmin()) {
                return _this4.Q(_this4.$.ajax({
                    data: JSON.stringify(_this4.user.attributes),
                    method: "PATCH",
                    url: "/user" }));
            }
        }).then(function () {
            return valid;
        }).fail(function (e) {
            console.log(e.stack || e);return false;
        });
    },
    validateAddress: function validateAddress(address) {
        var addressModel, customAddress;

        if (this.$.trim(address).length === 0) return false;

        addressModel = this.user.get('addressModel');
        customAddress = address !== this.user.get('address') || !addressModel || !this._(addressModel.types).contains("street_address") ? true : false;

        this.user.set({ customAddress: customAddress });

        if (customAddress) this.user.set({ addressModel: {} });

        return true;
    }
});

module.exports = MemberInfo;

},{"../../models/MemberFoodOmission":30,"../../templates/csaCustomization":51,"../MyView":111,"../templates/MemberInfo":172,"../util/Form":195}],134:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('../util/ListItem'),
    PaymentOption = function PaymentOption() {
    return ListItem.apply(this, arguments);
};

_extends(PaymentOption.prototype, ListItem.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/paymentOption')

});

module.exports = PaymentOption;

},{"../../templates/signup/paymentOption":75,"../util/ListItem":197}],135:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    PaymentOptions = function PaymentOptions() {
    return List.apply(this, arguments);
};

_extends(PaymentOptions.prototype, List.prototype, {

    ItemView: require('./PaymentOption'),

    itemModels: [{ id: 1, name: 'cash', label: 'Cash or Check', note: 'Mail payment to Patchwork' }, { id: 2, name: 'card', label: 'Credit Card', note: 'Pay online.' }],

    requiresLogin: false,

    selection: 'single',

    template: require('../../templates/signup/paymentOptions')
});

module.exports = PaymentOptions;

},{"../../templates/signup/paymentOptions":76,"../util/List":196,"./PaymentOption":134}],136:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('../util/ListItem'),
    PickupDate = function PickupDate() {
    return ListItem.apply(this, arguments);
};

_extends(PickupDate.prototype, ListItem.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/pickupDate')

});

module.exports = PickupDate;

},{"../../templates/signup/pickupDate":77,"../util/ListItem":197}],137:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    PickupDates = function PickupDates() {
    return List.apply(this, arguments);
};

_extends(PickupDates.prototype, List.prototype, {

    ItemView: require('./PickupDate'),

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.dates };
    },
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },
    itemModels: function itemModels() {
        return this.model.getDeliveryDates().models;
    },
    postRender: function postRender() {
        var _this = this;

        this.valid = true;

        this.on('itemSelected', function (model) {
            _this.templateData.container.removeClass('has-error');
            _this.updateShare();
        });

        this.on('itemUnselected', function (model) {
            return _this.updateShare();
        });

        this.on('itemAdded', function () {
            if (_this.model.has('skipDays') && _this.model.get('skipDays').length && Object.keys(_this.itemViews).length == _this.items.length) {

                _this.model.set({ skipDays: _this.model.get('skipDays').filter(function (skipDayId) {
                        if (_this.items.get(skipDayId)) {
                            _this.unselectItem(_this.items.get(skipDayId));return true;
                        }
                        return false;
                    })
                });
            }
        });

        this.model.on('change:selectedDelivery', function () {
            return _this.items.reset(_this.itemModels());
        });

        List.prototype.postRender.call(this);
    },


    requiresLogin: false,

    selected: true,

    selection: 'multiSimple',

    template: require('../../templates/signup/pickupDates'),

    updateShare: function updateShare() {
        this.valid = Object.keys(this.selectedItems).length === 0 ? false : true;
    }
});

module.exports = PickupDates;

},{"../../templates/signup/pickupDates":78,"../util/List":196,"./PickupDate":136}],138:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('../util/ListItem'),
    Share = function Share() {
    return ListItem.apply(this, arguments);
};

_extends(Share.prototype, ListItem.prototype, {
    postRender: function postRender() {
        ListItem.prototype.postRender.call(this);

        this.factory.create('shareBox', { insertion: { el: this.templateData.shareBox.get(0) }, model: this.model });

        if (!this.user.isAdmin() && (/spring/i.test(this.model.get('name')) || /spring/i.test(this.model.get('label')))) {
            this.templateData.container.addClass('inactive').off('click');
        }

        return this;
    },


    requiresLogin: false,

    template: require('../../templates/signup/share')

});

module.exports = Share;

},{"../../templates/signup/share":79,"../util/ListItem":197}],139:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var View = require('../MyView'),
    ShareOption = function ShareOption() {
    return View.apply(this, arguments);
};

_extends(ShareOption.prototype, View.prototype, {

    events: {
        'optionIcon': { method: 'showOptionInfo' }
    },

    getTemplateOptions: function getTemplateOptions() {
        return _extends({}, this.model.attributes, { options: this.model.get('options').map(function (model) {
                return model.attributes;
            }) });
    },
    postRender: function postRender() {
        var _this = this;

        this.updateTotal();

        this.templateData.input.on('change', function () {
            _this.updateTotal();
            _this.emit('changed', _this.templateData.input.val());
        });
    },


    requiresLogin: false,

    showOptionInfo: function showOptionInfo() {
        this.modalView.show({
            title: this.model.get('name'),
            body: this.model.get('description'),
            hideFooter: true
        });
    },


    template: require('../../templates/signup/shareOption'),

    updateTotal: function updateTotal() {
        this.templateData.total.text(this.util.format('$%s per week', parseFloat(this.model.get('options').at(this.templateData.input.get(0).selectedIndex).get('price').replace(/\$|,/g, "")).toFixed(2)));
    }
});

module.exports = ShareOption;

},{"../../templates/signup/shareOption":80,"../MyView":111}],140:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    ShareOptions = function ShareOptions() {
    return List.apply(this, arguments);
};

_extends(ShareOptions.prototype, List.prototype, {

    ItemView: require('./SingleShareOptions'),

    collection: { comparator: 'startEpoch' },

    events: {},

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares, signupData: this.signupData, factory: this.factory };
    },
    itemModels: function itemModels() {
        return this.signupData.shares.models;
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.signupData.shares.on('add', function (share) {
            return _this.items.add(share);
        }).on('remove', function (share) {
            return _this.items.remove(share);
        });
    },


    requiresLogin: false,

    selection: true,

    template: require('../../templates/signup/shareOptions'),

    validate: function validate() {
        var _this2 = this;

        this.signupData.shares.forEach(function (share) {
            share.set('selectedOptions', share.get('shareoptions').map(function (shareOption) {
                return {
                    shareoptionid: shareOption.id,
                    shareoptionoptionid: _this2.itemViews[share.id].itemViews[shareOption.id].templateData.input.val()
                };
            }));
        });

        return true;
    }
});

module.exports = ShareOptions;

},{"../../templates/signup/shareOptions":81,"../util/List":196,"./SingleShareOptions":142}],141:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    ShareSelection = function ShareSelection() {
    return List.apply(this, arguments);
};

_extends(ShareSelection.prototype, List.prototype, {

    ItemView: require('./Share'),

    Models: {
        DeliveryDate: require('../../models/DeliveryDate'),
        Share: require('../../models/Share')
    },

    collection: { comparator: 'startEpoch', model: require('../../models/Share'), url: "/share" },

    events: {
        csaInfoBtn: { method: 'showCSAInfoPageInNewTab' }
    },

    fetch: { data: {
            display: true,
            enddate: JSON.stringify({ operation: '>', value: require('moment')().add(2, 'weeks').format('YYYY-MM-DD') }),
            signupcutoff: JSON.stringify({ operation: '>', value: require('moment')().format('YYYY-MM-DD') })
        } },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares, factory: this.factory };
    },
    isSeason: function isSeason(season, model) {
        var re = new RegExp(season, 'i');

        return Boolean(re.test(model.get('name')) || re.test(model.get('label')));
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.on('itemSelected', function (model) {
            _this.templateData.container.removeClass('has-error');
            if (!_this.user.isAdmin() && _this.isSeason('summer', model)) {
                _this.items.forEach(function (share) {
                    if (_this.isSeason('spring', share)) {
                        _this.itemViews[share.id].templateData.container.removeClass('inactive').on('click', function () {
                            return _this.itemViews[share.id].emit('clicked', _this.itemViews[share.id].model);
                        });
                    }
                });
            }
        });

        this.on('itemUnselected', function (model) {
            if (!_this.user.isAdmin() && _this.isSeason('summer', model)) {
                _this.items.forEach(function (share) {
                    if (_this.isSeason('spring', share)) {
                        _this.itemViews[share.id].templateData.container.addClass('inactive').off('click');
                        _this.unselectItem(share);
                    }
                });
            }
        });

        this.signupData.shares = new (this.Collection.extend({ comparator: 'startEpoch' }))();

        this.items.on('reset', function () {
            if (_this.items.length === 0) return _this.emit('noShares');
        });

        this.on('initialized', function () {
            return _this.items.forEach(function (item) {
                var sessionShare = _this.sessionShares.find(function (share) {
                    return share.id === item.id;
                });
                if (sessionShare) {
                    _this.selectItem(item);
                    _this.signupData.shares.add(item);
                    if (sessionShare.selectedOptions) item.set('selectedOptions', sessionShare.selectedOptions);
                    if (sessionShare.selectedDelivery) item.set('selectedDelivery', sessionShare.selectedDelivery);
                    if (sessionShare.skipDays) {
                        item.set('skipDays', sessionShare.skipDays);
                    }
                }
            });
        });

        if (this.sessionShares) {
            this.on('itemAdded', function () {
                if (Object.keys(_this.itemViews).length === _this.items.length) _this.emit('initialized');
            });
        }
    },


    requiresLogin: false,

    selection: true,

    showCSAInfoPageInNewTab: function showCSAInfoPageInNewTab() {
        window.open('/csa#how-do-i-know');
    },


    template: require('../../templates/signup/shares'),

    validate: function validate() {
        var _this2 = this;

        var prevShareIds = this.signupData.shares.map(function (share) {
            return share.id;
        }),
            selectedShareIds = Object.keys(this.selectedItems).map(function (id) {
            return parseInt(id);
        });

        if (selectedShareIds.length === 0) {
            this.templateData.container.addClass('has-error');return false;
        }

        this._(prevShareIds).difference(selectedShareIds).forEach(function (id) {
            var share = _this2.items.get(id);
            share.unset('selectedOptions');
            share.unset('selectedDelivery');
            share.unset('skipDays');
            _this2.signupData.shares.remove(share);
        });

        this._(selectedShareIds).difference(prevShareIds).forEach(function (id) {
            return _this2.signupData.shares.add(_this2.items.get(id));
        });

        return true;
    }
});

module.exports = ShareSelection;

},{"../../models/DeliveryDate":19,"../../models/Share":39,"../../templates/signup/shares":82,"../util/List":196,"./Share":138,"moment":"moment"}],142:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    SingleShareOptions = function SingleShareOptions() {
    return List.apply(this, arguments);
};

_extends(SingleShareOptions.prototype, List.prototype, {

    ItemView: require('./ShareOption'),

    getItemViewOptions: function getItemViewOptions() {
        return {
            container: this.templateData.options,
            share: this.model
        };
    },
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },
    postRender: function postRender() {
        var _this = this;

        var share = this.model;

        List.prototype.postRender.call(this);

        this.on('itemAdded', function (shareOption) {
            _this.itemViews[shareOption.id].on('changed', function () {
                return _this.updateTotal();
            });
            if (share.get('selectedOptions')) {
                share.get('selectedOptions').forEach(function (selectedOption) {
                    if (selectedOption.shareoptionid == shareOption.id) {
                        _this.itemViews[shareOption.id].templateData.input.val(selectedOption.shareoptionoptionid);
                    }
                });
            }
            if (Object.keys(_this.itemViews).length == _this.items.length) _this.updateTotal();
        });

        this.factory.create('shareBox', { insertion: { el: this.templateData.shareBox.get(0) }, model: share });

        //TODO: Write UI when no options exist.
        this.model.getShareOptions().then(function () {
            return share.get('shareoptions').forEach(function (shareoption) {
                return _this.items.add(shareoption);
            });
        }).fail(function (e) {
            return console.log(e.stack || e);
        });
    },


    requiresLogin: false,

    template: require('../../templates/signup/singleShareOptions'),

    updateTotal: function updateTotal() {
        var _this2 = this;

        var total = this.items.map(function (shareOption) {
            return parseFloat(shareOption.get('options').get(_this2.itemViews[shareOption.id].templateData.input.val()).get('price').replace(/\$|,/g, ""));
        }).reduce(function (a, b) {
            return a + b;
        }).toFixed(2);

        this.templateData.total.text(this.util.format('$%s per week', total));
    }
});

module.exports = SingleShareOptions;

},{"../../templates/signup/singleShareOptions":83,"../util/List":196,"./ShareOption":139}],143:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var View = require('../MyView'),
    Form = require('../util/Form').prototype,
    Summary = function Summary() {

    window.spinner = this.spinner = new this.Spinner({
        color: '#fff',
        lines: 7,
        length: 2,
        radius: 14,
        scale: 0.5
    });

    return View.apply(this, arguments);
};

_extends(Summary.prototype, View.prototype, {

    DayOfWeekMap: require('../../models/DeliveryRoute').prototype.dayOfWeekMap,

    ContactInfo: require('../../models/ContactInfo'),

    Spinner: require('../../plugins/spinner.js'),

    buildRequest: function buildRequest() {
        var addressModel = this.user.get('addressModel');

        return JSON.stringify({
            member: _extends(this.user.pick(['name', 'email', 'phonenumber', 'password', 'repeatpassword', 'address', 'extraaddress', 'heard', 'omission']), { zipcode: addressModel && addressModel.postalCode ? addressModel.postalCode : '' }),
            payment: this.paymentSelected === 'card' ? this.getFormData() : {},
            shares: this.buildShares(),
            total: this.fee ? this.grandTotalPlusFee : this.grandTotal,
            isAdmin: this.user.isAdmin()
        });
    },
    buildShares: function buildShares() {
        var _this = this;

        return this.signupData.shares.map(function (share) {
            var selectedWeeks = share.get('selectedDates').length,
                skipDays = share.get('skipDays'),
                skipDaysTotal = skipDays ? skipDays.length : 0;

            return {
                id: share.id,
                description: _this.util.format('From %s to %s you will be receiving fresh food for %d out of %d weeks.', share.get('humanStartdate'), share.get('humanEnddate'), selectedWeeks, selectedWeeks + skipDaysTotal),
                label: share.get('label'),
                options: share.get('selectedOptions'),
                delivery: _this._(share.get('selectedDelivery')).pick(['deliveryoptionid', 'groupdropoffid', 'description']),
                skipDays: skipDays ? skipDays.map(function (skipDayId) {
                    return share.get('deliveryDates').get(skipDayId).get('date');
                }) : undefined,
                total: share.get('total')
            };
        });
    },
    cardPaymentSelected: function cardPaymentSelected() {
        var _this2 = this;

        this.signupHandler = function () {
            if (_this2.validateCardInfo()) _this2.signup();
        };

        this.fee = false;
        this.paymentSelected = 'card';
        this.updateGrandTotal();

        this.templateData.paymentForm.removeClass('hide');

        this.enableSignupBtn();
    },
    cashPaymentSelected: function cashPaymentSelected() {
        var _this3 = this;

        this.signupHandler = function () {
            return _this3.signup();
        };

        this.fee = false;
        this.paymentSelected = 'cash';

        this.enableSignupBtn();
    },
    disableSignupBtn: function disableSignupBtn() {
        this.templateData.signupBtn.addClass('disabled').removeClass('btn-success').off('click');
    },
    enableSignupBtn: function enableSignupBtn() {
        this.templateData.signupBtn.removeClass('disabled').addClass('btn-success').off('click').one('click', this.signupHandler);
    },


    events: {
        'paymentForm': [{ event: 'blur', 'selector': 'input', method: 'onInputBlur' }, { event: 'focus', 'selector': 'input', method: 'onInputFocus' }]
    },

    fields: {
        number: {
            error: "Enter a card number",
            validate: function validate(val) {
                return this.$.trim(val).length > 0;
            }
        },
        "exp_month": {
            error: 'Enter the month in "MM" format',
            validate: function validate(val) {
                return val.length === 2;
            }
        },
        "exp_year": {
            error: 'Enter the year in "YYYY" format',
            validate: function validate(val) {
                return val.length === 4;
            }
        },
        cvc: {
            error: "Enter a cvc number",
            validate: function validate(val) {
                return this.$.trim(val).length > 0;
            }
        }
    },

    getTemplateOptions: function getTemplateOptions() {
        var _this4 = this;

        var spaceTwoTab = "\r\n\t\t";
        return {
            containerClass: this.containerClass,
            shares: this.signupData.shares.map(function (share) {

                var selectedDelivery = share.get('deliveryoptions').get(share.get('selectedDelivery').deliveryoptionid),
                    groupDropoff = share.get('selectedDelivery').groupdropoffid ? share.get('groupdropoffs').get(share.get('selectedDelivery').groupdropoffid) : undefined,
                    times = groupDropoff ? groupDropoff.pick(['starttime', 'endtime']) : _this4._(share.get('selectedDelivery')).pick(['starttime', 'endtime']),
                    shareOptionWeeklyTotal = share.get('selectedOptions').map(function (selectedOption) {
                    return parseFloat(share.get('shareoptions').get(selectedOption.shareoptionid).get('options').get(selectedOption.shareoptionoptionid).get('price').replace(/\$|,/g, ""));
                }).reduce(function (a, b) {
                    return a + b;
                }),
                    weeklyTotal = shareOptionWeeklyTotal + parseFloat(selectedDelivery.get('price').replace(/\$|,/g, "")),
                    address = selectedDelivery.get('name') === 'home' ? _this4.user.get('address') : groupDropoff ? groupDropoff.get('address') : _this4.ContactInfo.data.farmpickup;

                share.set({
                    selectedDelivery: _extends(share.get('selectedDelivery'), {
                        description: _this4.util.format('Delivery:%sMethod: %s%sDay/Time: %ss %s-%s%sPlace: %s%sCost: %s per week', spaceTwoTab, selectedDelivery.get('label'), spaceTwoTab, share.dayOfWeekMap[share.get('selectedDelivery').dayofweek], times.starttime, times.endtime, spaceTwoTab, address, spaceTwoTab, selectedDelivery.get('price')) }),
                    total: weeklyTotal * share.get('selectedDates').length
                });

                share.set('selectedOptions', share.get('selectedOptions').map(function (selectedOption) {
                    var shareOption = share.get('shareoptions').get(selectedOption.shareoptionid),
                        shareOptionOption = shareOption.get('options').get(selectedOption.shareoptionoptionid);

                    return _extends(selectedOption, {
                        description: _this4.util.format('%s: %s %s -- %s per week', shareOption.get('name'), shareOptionOption.get('label'), shareOptionOption.get('unit') || "", shareOptionOption.get('price'))
                    });
                }));

                return {
                    shareBox: _this4.templates.ShareBox(share.attributes),
                    selectedOptions: share.get('selectedOptions').map(function (selectedOption) {
                        var shareOption = share.get('shareoptions').get(selectedOption.shareoptionid),
                            shareOptionOption = shareOption.get('options').get(selectedOption.shareoptionoptionid);

                        return {
                            optionName: shareOption.get('name'),
                            price: shareOptionOption.get('price'),
                            selectedOptionLabel: shareOptionOption.get('label'),
                            unit: shareOptionOption.get('unit')
                        };
                    }),
                    selectedDelivery: {
                        deliveryType: selectedDelivery.get('label'),
                        weeklyCost: selectedDelivery.get('price'),
                        groupdropoff: groupDropoff ? groupDropoff.get('label') : undefined,
                        address: groupDropoff ? groupDropoff.get('street') + ', ' + groupDropoff.get('cityStateZip') : selectedDelivery.get('name') === 'farm' ? _this4.ContactInfo.data.farmpickup : _this4.user.get('address'),
                        dayOfWeek: _this4.DayOfWeekMap[share.get('selectedDelivery').dayofweek],
                        starttime: times.starttime,
                        endtime: times.endtime
                    },
                    weeklyPrice: _this4.util.format('$%s', weeklyTotal.toFixed(2)),
                    selectedDates: share.get('selectedDates').map(function (date) {
                        return _this4.templates.PickupDate(_extends({ selected: true }, date.attributes));
                    }),
                    weeksSelected: share.get('selectedDates').length,
                    skipDays: share.has('skipDays') ? share.get('skipDays').map(function (skipDayId) {
                        return _this4.templates.PickupDate(share.get('deliveryDates').get(skipDayId).attributes);
                    }) : undefined,
                    total: _this4.util.format('$%s', share.get('total').toFixed(2))
                };
            })
        };
    },
    onInputBlur: function onInputBlur(e) {
        var $el = this.$(e.currentTarget),
            field = this.fields[$el.attr('id')],
            result;

        result = field.validate.call(this, $el.val());

        if (result) {
            $el.parent().parent().removeClass('has-error').addClass('has-feedback has-success');
            $el.next().removeClass('hide').removeClass('glyphicon-remove').addClass('glyphicon-ok');
            $el.siblings('.help-block').remove();
        } else {
            this.showError($el, field.error);
            this.disableSignupBtn();
        }
    },
    onInputFocus: function onInputFocus(e) {
        var $el = this.$(e.currentTarget);
        if ($el.next().hasClass('glyphicon-remove')) this.removeError(this.$(e.currentTarget));
        if (this.templateData.paymentForm.find('.has-error').length === 0) this.enableSignupBtn();
    },
    paymentUnselected: function paymentUnselected() {

        this.fee = false;
        this.selectedPayment = undefined;
        this.updateGrandTotal();

        this.templateData.signupBtn.addClass('disabled').removeClass('btn-success').off('click');
        this.templateData.paymentForm.addClass('hide');
    },
    postRender: function postRender() {
        var _this5 = this;

        this.fee = false;
        this.selectedPayment = undefined;

        View.prototype.postRender.call(this);

        this.paymentOptions.on('itemSelected', function (model) {
            return _this5[_this5.util.format('%sPaymentSelected', model.get('name'))]();
        }).on('itemUnselected', function (model) {
            return _this5.paymentUnselected();
        });

        this.grandTotal = this.signupData.shares.map(function (share) {
            return share.get('total');
        }).reduce(function (a, b) {
            return a + b;
        });
        this.grandTotalPlusFee = this.grandTotal + this.grandTotal * .03;

        this.updateGrandTotal();
    },


    requiresLogin: false,

    removeError: function removeError($el) {
        if ($el.siblings('.help-block').length === 1) $el.parent().parent().removeClass('has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-remove');
        $el.siblings(this.util.format('.help-block.%s', $el.attr('id'))).remove();
    },
    render: function render() {
        var _this6 = this;

        var dataPromises = [];

        dataPromises.push(this.ContactInfo.get());

        this.signupData.shares.forEach(function (share) {
            if (!share.has('shareoptions')) dataPromises.push(share.getShareOptions());
            if (!share.has('deliveryoptions')) dataPromises.push(share.getDeliveryOptions());
            if (!share.has('groupdropoffs')) dataPromises.push(share.getGroupDropoffs());
            if (!share.has('deliveryDates')) dataPromises.push(share.getDeliveryDates());
        });

        this.Q.all(dataPromises).then(function () {
            _this6.signupData.shares.forEach(function (share) {
                return share.getSelectedDates();
            });
            View.prototype.render.call(_this6);
        }).fail(function (e) {
            return new _this6.Error(e);
        }).done();
    },
    show: function show() {
        this.templateData.container.empty().remove();
        this.render();
        return this;
    },
    showError: function showError($el, error) {
        var formGroup = $el.parent().parent();

        if ($el.next().hasClass('glyphicon-remove')) return;

        formGroup.removeClass('has-success').addClass('has-feedback has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-ok').addClass('glyphicon-remove').parent().append(Form.templates.fieldError({ error: error, name: $el.attr('id') }));
    },
    showErrorModal: function showErrorModal(opts) {
        var _this7 = this;

        this.modalView.show({
            title: 'Hmmm',
            body: opts && opts.error ? opts.error : 'There was a problem.  Please contact us at eat.patchworkgardens@gmail.com.  We apologize for the inconvenience',
            hideCancelBtn: true,
            confirmText: 'Okay' }).on('submit', function () {
            return _this7.modalView.hide();
        });
    },
    showSuccessModal: function showSuccessModal() {
        this.modalView.show({
            title: 'Great Success',
            body: this.util.format('Thanks for signing up.  We look forward to sharing the season with you. %s', Object.keys(this.getFormData()).length ? 'You should find a receipt in your email inbox' : ''),
            hideCancelBtn: true,
            confirmText: 'Okay' }).on('submit', function () {
            return window.location = '/';
        }).on('hidden', function () {
            return window.location = '/';
        });
    },
    signup: function signup() {
        var _this8 = this;

        this.templateData.signupBtn.off('click').addClass('has-spinner').append(this.spinner.spin().el);

        this.$.ajax({
            data: this.buildRequest(),
            headers: { 'Content-Type': 'application/json' },
            method: "POST",
            url: "/signup" }).done(function (response) {
            if (response.error) {
                _this8.showErrorModal({ error: response.error });
                _this8.templateData.signupBtn.off('click').one('click', _this8.signupHandler).text('Become a Member!');
                return;
            }
            _this8.emit('done');
            _this8.paymentOptions.removeAllListeners('itemSelected').removeAllListeners('itemUnselected');
            _this8.templateData.signupBtn.text('Thank you');
            _this8.showSuccessModal();
        }).fail(function () {
            _this8.showErrorModal();
            _this8.templateData.signupBtn.off('click').one('click', _this8.signupHandler).text('Become a Member!');
        }).always(function () {
            _this8.spinner.stop();
            _this8.templateData.signupBtn.removeClass('has-spinner');
        });
    },


    subviews: {
        paymentOptions: [{ name: 'paymentOptions', view: require('./PaymentOptions') }]
    },

    template: require('../../templates/signup/summary'),

    templates: {
        PickupDate: require('../../templates/signup/pickupDate'),
        ShareBox: require('../templates/ShareBox')
    },

    updateGrandTotal: function updateGrandTotal() {
        var total = this.fee ? this.grandTotalPlusFee : this.grandTotal;
        this.templateData.grandTotal.text('Grand Total :  ' + '$' + total.toFixed(2));

        this.$('.payment-option:first-child .method-total').text('Grand Total :  ' + '$' + this.grandTotal.toFixed(2));
        this.$('.payment-option:last-child .method-total').text('Grand Total :  ' + '$' + this.grandTotal.toFixed(2));
    },
    validateCardInfo: function validateCardInfo() {
        var _this9 = this;

        var valid = true;

        Object.keys(this.fields).forEach(function (key) {
            var result = _this9.fields[key].validate.call(_this9, _this9.templateData[key].val());

            if (!result) {
                _this9.showError(_this9.templateData[key], _this9.fields[key].error);
                valid = false;
            }
        });

        if (!valid) this.disableSignupBtn();

        return valid;
    }
});

module.exports = Summary;

},{"../../models/ContactInfo":12,"../../models/DeliveryRoute":20,"../../plugins/spinner.js":45,"../../templates/signup/pickupDate":77,"../../templates/signup/summary":84,"../MyView":111,"../templates/ShareBox":178,"../util/Form":195,"./PaymentOptions":135}],144:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>About</h1>\n    <section data-js=\"sectionOne\" class=\"striped\">\n        <h2></h2>\n    </section>\n    <section data-js=\"sectionTwo\">\n        <h2></h2>\n    </section>\n    <section data-js=\"sectionThree\" class=\"striped\">\n        <h2></h2>\n    </section>\n    <section data-js=\"sectionFour\">\n        <h2></h2>\n        <div class=\"staff\" data-js=\"staff\"></div>\n    </section>\n</div>";
};

},{}],145:[function(require,module,exports){
'use strict';

module.exports = function (p, _ref) {
    var Moment = _ref.Moment;

    var actions = p.opts.actions.map(function (action) {
        return '<option value="' + action + '">' + action + '</option>';
    }).join('');
    return '' + ('<div>\n    <form data-js="form">\n        <span></span>\n        <select data-js="action">' + actions + '</select>\n        <input type="text" data-js="value" placeholder="$0.00"/>\n        <input type="text" data-js="checkNumber"/>\n        <input type="text" data-js="created" value="' + Moment().format('MMM D, YYYY') + '" />\n        <input type="text" data-js="description" placeholder="description"/>\n    </form>\n    <div data-view="buttonFlow"></div>\n</div>');
};

},{}],146:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<nav data-js=\"container\" class=\"admin-header\">\n    <div class=\"clearfix hidden-xs\">\n        <div class=\"logo-container\">\n            <img src=\"" + p.opts.logo + "\"/>\n        </div>\n        <div data-js=\"userPanel\" class=\"pull-right hide\">\n            <button data-js=\"signoutBtn\" class=\"btn btn-link\">Sign Out</button>\n            <span data-js=\"name\"></span>\n            <span data-js=\"profileBtn\" class=\"glyphicon glyphicon-user hide\"></span>\n        </div>\n    </div>\n</nav>";
};

},{}],147:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div data-js=\"nav\"></div>\n    <div class=\"views\" data-js=\"views\"></div>\n</div>";
};

},{}],148:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var disabled = p.disabled ? 'disabled' : '';

    return '' + ('<section class="' + (p.hide ? 'fd-hidden fd-hide' : '') + '">') + Object.keys(p.model.states).map(function (stateName) {
        return '<div data-js="' + stateName + '" class="state ' + stateName + ' ' + (stateName === 'start' ? '' : 'fd-hidden fd-hide') + '">' + p.model.states[stateName].map(function (button) {
            return button.svg ? button.svg : '<button class="' + disabled + ' ' + (button.class || '') + ' "data-js="' + button.name + '">' + button.text + '</button>';
        }).join('') + '</div>';
    }).join('') + '</section>';
};

},{}],149:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<section>\n    <div class="left-panel" data-js="leftPanel">\n        <section>\n            <button class="link" data-js="backBtn">' + require('./lib/leftArrow')() + '<span>Back to Admin</span></button>\n        </section>\n        <section>\n            <button class="link" data-js="resource"></button>\n        </section>\n        <section>\n            <div data-view="list" data-name="collections"></div>\n            <button class="fd-hidden" data-js="createCollectionBtn" class="side-by-side link">\n                <span>+</span>\n                <span>Create Collection</span>\n            </button>\n        </section>\n    </div>\n    <div data-js="mainPanel" class="main-panel"></div>\n</section>';
};

},{"./lib/leftArrow":193}],150:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>Contact</h1>\n    <section>\n        <h2 data-js=\"intro\"></h2>\n        <div data-js=\"contactInfo\"></div>\n    </section>\n</div>";
};

},{}],151:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>CSA Program</h1>\n    <section data-js=\"aboutCSA\" class=\"about-csa\">\n        <h2></h2>\n    </section>\n    <div data-js=\"dividerImageOne\"></div>\n    <section data-js=\"csaFit\" class=\"csa-fit\">\n        <h2 data-js=\"howDoIKnow\"></h2>\n        <p></p>\n        <ul data-js=\"csaFitStatements\"></ul>\n    </section>\n    <section data-js=\"csaContents\" class=\"csa-contents\">\n        <h2></h2>\n        <p></p>\n        <div data-js=\"shareExamples\" class=\"share-examples\"></div>\n        <div data-js=\"shareDescriptions\" class=\"share-descriptions\"></div>\n        <p data-js=\"sharePriority\"></p>\n        <div class=\"button-row\">\n            <button class=\"btn-yellow\" data-js=\"signupBtn\" type=\"button\">Sign Up Now!</button>\n        </div>\n    </section>\n    <div data-js=\"dividerImageTwo\"></div>\n    <section data-js=\"csaDelivery\" class=\"delivery\">\n        <h2></h2>\n        <p></p>\n        <div class=\"delivery-matrix\" data-js=\"deliveryMatrix\"></div>\n    </section>\n    <section data-js=\"csaCustomization\">\n        <h2></h2>\n        <p><p>\n    </section>\n    <section data-js=\"addOns\">\n        <h2></h2>\n        <p></p>\n        <div data-js=\"addOnItems\" class=\"add-ons\"></div>\n    </section>\n    <section data-js=\"payment\">\n        <h2></h2>\n        <p></p>\n        <p data-js=\"payableTo\"></p>\n        <div data-js=\"contact\" class=\"contact\"></div>\n        <p data-js=\"emailUs\"></p>\n        <div class=\"button-row\">\n            <button class=\"btn-yellow\" data-js=\"signupBtn\" type=\"button\">Sign Up Now!</button>\n        </div>\n    </section>\n</div>";
};

},{}],152:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
    var price = p.unit ? p.price + ' per ' + p.unit : p.price;

    return '' + ('<div class="item-detail">\n    <div>\n        <span>' + p.heading + '</span>\n        <span>|</span>\n        <span>' + price + '</span>\n    </div>\n    <p>' + Format.ParseTextLinks(p.information || p.description) + '</p>\n</div>');
};

},{"../../Format":5}],153:[function(require,module,exports){
'use strict';

module.exports = function (p, format) {
    var negativeClass = p.isNegative ? 'negative' : '';

    return '' + ('<li data-js="transaction" data-id="' + p.id + '">\n    <span class="cell"></span>\n    <span data-attr="action" class="cell">' + p.action + '</span>\n    <span data-attr="value" class="cell ' + negativeClass + '">' + format.currency(Math.abs(p.value)) + '</span>\n    <span data-attr="checkNumber" class="cell">' + (p.checkNumber || '') + '</span>\n    <span data-attr="created" class="cell">' + format.moment(p.created).format('MMM D, YYYY') + '</span>\n    <span data-attr="description" class="cell">' + p.description + '</span>\n</li>');
};

},{}],154:[function(require,module,exports){
'use strict';

module.exports = function (p) {

    var rows = p.fields.map(function (field) {
        var rowValue = field.name === 'neverReceive' ? '<div data-js="neverReceive" class="cell"></div>' : field.name === 'onpaymentplan' ? '<select data-js="onpaymentplan" class="cell">\n                        <option value="true">True</option>\n                        <option value="false">False</option>\n                    </select>' : '<div data-name="' + field.name + '" data-js="' + field.name + '" class="cell" contenteditable="true"></div>';

        return '' + ('<div class="table-row ' + field.name + '">\n            <div class="cell">' + field.label + '</div>\n            ' + rowValue + '\n        </div>');
    }).join('');

    return '' + ('<div class="fd-hide fd-hidden section">\n        <div class="section-heading">\n            <h3>Customer Info</h3>\n            <button class="reset-btn fd-hidden" data-js="resetBtn">Reset</button>\n        </div>\n        <div class="content">\n            <div class="data">\n                <div data-js="infoTable" class="customer-table">' + rows + '</div>\n            </div>\n            <div data-js="editSummary" class="edit-summary fd-hidden">\n                <div>Summary of Changes</div>\n                <div data-js="changes"></div>\n                <div>\n                    <button class="save-btn" data-js="saveBtn">Save Changes</button>\n                </div>\n            </div>\n        </div>\n    </div>');
};

},{}],155:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
   var opts = _ref.opts;
   return "<section>\n    <p>" + opts.message + "</p>\n    <div class=\"button-row\">\n       <button data-js=\"submitBtn\" class=\"btn-submit\">Delete</button>\n       <button data-js=\"cancelBtn\" class=\"btn-cancel\">Cancel</button>\n    </div>\n</section>";
};

},{}],156:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<li data-date="' + p.date.format('YYYYMMDD') + '" class="delivery-date ' + (p.selected ? 'selected' : '') + ' ' + (p.unselectable ? 'unselectable' : '') + '">\n    <div>' + p.date.format('ddd') + '</div>\n    <div>' + p.date.format('MMM') + '</div>\n    <div>' + p.date.format('D') + '</div>\n</div>';
};

},{}],157:[function(require,module,exports){
"use strict";

module.exports = function (datum) {
    return "<div>\n    <span>" + (datum.label || datum.name) + "</span>\n</div>";
};

},{}],158:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<section class=\"no-select fd-hidden\">Dragging Item</section>";
};

},{}],159:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var actions = p.actions.map(function (action) {
        var selected = action === p.action ? 'selected="selected"' : '';
        return '<option value="' + action + '" ' + selected + '>' + action + '</option>';
    }).join('');
    return '' + ('<li data-js="editTransaction" class="edit-transaction">\n    <span></span>\n    <select data-attr="action">' + actions + '</select>\n    <input type="text" data-attr="value" value="' + p.value + '"/>\n    <input type="text" data-attr="checkNumber" value="' + (p.checkNumber || '') + '"/>\n    <input type="text" data-attr="created" value="' + (p.created || '') + '" />\n    <input type="text" data-attr="description" value="' + (p.description || '') + '"/>\n</li>');
};

},{}],160:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div>" + p.label + ": <span>" + p.oldValue + "</span>to<span>" + p.newValue + "</span></div>";
};

},{}],161:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div></div>";
};

},{}],162:[function(require,module,exports){
"use strict";

module.exports = function () {
    return "<div>\n    <p>A <a href='mailto:topherbaron@gmail.com'>FutureDays</a> Site</p>\n</div>";
};

},{}],163:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var heading = p.opts.heading ? '<div class="heading">' + p.opts.heading + '</div>' : '',
        prompt = p.opts.prompt ? '<div class="prompt">' + p.opts.prompt + '</div>' : '',
        fields = p.GetFormFields(p.attributes, p.model),
        buttonRow = p.opts.hideButtonRow ? '' : '<div class="btn-row">\n            <button class="btn-submit" data-js="submitBtn" type="button">\n                <span>' + (p.opts.submitText || 'Submit') + '</span>\n            </button>\n            <button class="btn-cancel" data-js="cancelBtn" type="button">\n                <span>' + (p.opts.cancelText || 'Cancel') + '</span>\n            </button>\n        </div>';

    return '<section>\n    ' + heading + '\n    <div class="form-box">\n        ' + prompt + '\n        <form>' + fields + '</form>\n        ' + buttonRow + '  \n    </div>\n</section>';
};

},{}],164:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>Get Involved</h1>\n    <section data-js=\"employment\" class=\"striped\">\n        <h2></h2>\n        <p></p>\n        <ul class=\"positions\" data-js=\"openPositions\"></ul>\n    </section>\n    <section class=\"internships\" data-js=\"internships\">\n        <h2></h2>\n        <p></p>\n        <div>\n            <div data-js=\"internDuties\">\n                <h3></h3>\n                <ul data-js=\"dutyList\"></ul>\n            </div>\n            <div data-js=\"internQualifications\">\n                <h3></h3>\n                <ul data-js=\"qualificationList\"></ul>\n            </div>\n            <div data-js=\"internCompensation\">\n                <h3></h3>\n                <ul data-js=\"compensationList\"></ul>\n            </div>\n        </div>\n        <p data-js=\"application\"></p>\n    </section>\n    <section data-js=\"volunteer\" class=\"striped\">\n        <h2></h2>\n        <p></p>\n    </section>\n</div>";
};

},{}],165:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var opts = _ref.opts,
        ImageSrc = _ref.ImageSrc;

    var fields = opts.fields.map(function (field) {
        return '<li data-name="' + field.name + '">' + field.label + '</li>';
    }).join('');

    return '' + ('<div>\n    <div>\n        <img data-src="' + ImageSrc('header_sun') + '" />\n    </div>\n    <div>\n        <div>\n            ' + require('./lib/justify') + '\n            <div data-js="title" data-name="' + opts.home.name + '">' + opts.home.label + '</div>\n        </div>\n        <ul data-js="nav">' + fields + '</ul>\n    </div>\n    <div>\n</div>');
};

},{"./lib/justify":192}],166:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div>\n    <img data-src="' + p.ImageSrc('cornucopia') + '" />\n    <div class="overlay">\n        <div data-js="slogan"></div>\n        <div>\n            <button class="btn-yellow" data-js="joinBtn" type="button">Join our CSA!</button>\n        </div>\n    </div>\n</div>';
};

},{}],167:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var website = p.url ? '<a target="_blank" href="' + p.url + '">Website</a>' : '',
        directions = p.street && p.cityStateZip ? '<a target="_blank" href="http://maps.google.com/?q=' + p.street + ', ' + p.cityStateZip + '">Directions</a>' : '';

    return '' + ('<div class="info-window">\n    <div>' + p.name + '</div>\n    <div>\n        <div>' + (p.street || '') + '</div>\n        <div>' + (p.cityStateZip || '') + '</div>\n        <div>' + (p.phonenumber || '') + '</div>\n    </div>\n    <div>\n        <div>' + directions + '</div>\n        <div>' + website + '</div>\n    </div>\n</div>');
};

},{}],168:[function(require,module,exports){
'use strict';

var getHeading = function getHeading() {
    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { opts: {} };

    if (!p.opts || !p.opts.name) return '';
    return p.opts.toggle ? '<div data-js="toggle" class="heading side-by-side toggle">\n            ' + p.GetIcon('caret-down') + '\n            <span>' + p.opts.name + '</span>\n          </div>' : '<h3 class="heading">' + p.opts.name + '</h3>';
};

module.exports = function (p) {
    var buttonClass = p.model.isDocumentList ? 'floating' : 'btn-yellow';

    return '' + ('<section>\n    ' + getHeading(p) + '\n    <ol data-js="list" class="list ' + (p.model.draggable || p.model.droppable ? 'no-select' : '') + '"></ol>\n    <div class="button-row">\n        ' + (p.model.reset ? '<button class="' + buttonClass + '" data-js="resetBtn" type="button">Reset</button>' : '') + '\n        ' + (p.model.save ? '<button class="' + buttonClass + '" data-js="saveBtn" type="button">Save</button>' : '') + '\n        ' + (p.model.add ? '<button class="' + buttonClass + '" data-js="addBtn" type="button">Add</button>' : '') + '\n    </div>\n</section>');
};

},{}],169:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var name = p.url ? '<div><a target="_blank" href="' + p.url + '">' + (p.name || '') + '</a></div>' : '<div>' + (p.name || '') + '</div>';
    var hours = p.hours ? p.hours.split(',').map(function (item) {
        return '<div>' + item + '</div>';
    }).join('') : '';

    return '' + ('<li class="location">\n    ' + name + '\n    <div>' + (p.label || '') + '</div>\n    <div>' + (p.venue || '') + '</div>\n    <div>' + (p.street || '') + '</div>\n    <div>' + (p.cityStateZip || '') + '</div>\n    <div>' + (p.phonenumber || '') + '</div>\n    <div><a href="mailto:' + p.email + '">' + (p.email || '') + '</a></div>\n    ' + hours + '\n</li>');
};

},{}],170:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var categories = p.opts.categories.map(function (attr) {
        return '<li>\n            <label>\n                <input data-name="' + attr.name + '" type="checkbox" checked />\n                <span></span>\n                <span class="' + attr.name + '">' + attr.label + '</span>\n            </label>\n        </li>';
    }).join('');

    return '' + ('<div>\n    <h1>Locations</h1>\n    <div>\n        <div class="map-wrap">\n            <div data-js="map"></div>\n            <ul class="legend" data-js="legend">\n                ' + categories + '\n            </ul>\n        </div>\n    </div>\n    <section>\n        <p data-js="intro"></p>\n    </section>\n    <section data-js="farmersMarkets" class="striped">\n        <h2></h2>\n        <p></p>\n        <ul data-js="farmerMarketsList"></ul>\n    </section>\n    <section data-js="retailOutlets">\n        <h2></h2>\n        <p></p>\n        <ul data-js="retailOutletsList"></ul>\n    </section>\n    <section data-js="restaurants" class="striped">\n        <h2></h2>\n        <p></p>\n        <ul data-js="restaurantsList"></ul>\n    </section>  \n    <section data-js="pickupLocations">\n        <h2></h2>\n        <p></p>\n        <ul data-js="groupLocationsList"></ul>\n        <div class="button-row">\n            <button class="btn-yellow" data-js="signupBtn" type="button">Sign Up Now!</button>\n        </div>\n    </section>\n</div>');
};

},{}],171:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div class=\"main-search\">\n        <div data-view=\"memberTypeahead\"></div>\n    </div>\n    <div data-view=\"customerInfo\"></div>\n    <div data-view=\"seasons\"></div>\n    <div data-view=\"orderOptions\"></div>\n    <div data-view=\"weekOptions\"></div>\n    <div data-view=\"sharePatch\"></div>\n    <div data-view=\"transactions\"></div>\n</div>";
};

},{}],172:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var fields = p.fields.map(function (field) {
        return '<div class="form-group">\n            <label for="' + field.name + '">' + field.label + '</label>\n            <div>\n                <input type="' + field.type + '" class="form-control" id="' + field.name + '" data-js="' + field.name + '">\n                <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n            </div>\n        </div>';
    }).join('');

    return '' + ('<div class="MemberInfo" data-js="container">\n    <p>Please provide us with some information about yourself</p>\n    <form>\n        ' + fields + '\n        <div style="display: none;"><input type="text" id="PreventChromeAutocomplete" name="PreventChromeAutocomplete" autocomplete="address-level4" /></div>\n    </form>\n</div>');
};

},{}],173:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <label class=\"form-label\">Search Customers</label>  \n    <input data-js=\"customerInput\" class=\"input-std type=\"text\">\n</div>";
};

},{}],174:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "";
};

},{}],175:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden section\">\n    <div class=\"section-heading\">\n        <h3>Order Options</h3>\n        <span data-js=\"seasonLabel\"></span>\n        <button class=\"reset-btn fd-hidden\" data-js=\"resetBtn\">Reset</button>\n    </div>\n    <div class=\"content\">\n        <div class=\"data\">\n            <ol data-js=\"options\"></ol>\n        </div>\n        <div data-js=\"editSummary\" class=\"edit-summary fd-hidden\">\n            <div>Summary of Changes</div>\n            <div data-js=\"changes\"></div>\n            <div>\n                <span>Weekly price adjustment: </span>\n                <span class=\"original-price\" data-js=\"originalWeeklyPrice\"></span>\n                <span>to</span>\n                <span class=\"new-price\" data-js=\"newWeeklyPrice\"></span>\n            </div>\n        </div>\n    </div>\n</div>";
};

},{}],176:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<section>\n    <h4>Reporting</h4>\n    <form>\n        <div>\n            <label>Name:</label>\n            <select data-js=\"report\"></select>\n        </div>\n        <div>\n            <label>From:</label>\n            <input type=\"text\" data-js=\"from\" />\n        </div>\n        <div>\n            <label>To:</label>\n            <input type=\"text\" data-js=\"to\" />\n        </div>\n        <div>\n            <button type=\"button\" data-js=\"viewBtn\" class=\"link\">View</button>\n            <button type=\"button\" data-js=\"exportBtn\" class=\"link\">Export</button>\n        </div>\n    </form>\n    <div class=\"results\" data-js=\"results\">\n        <h4 class=\"fd-hide\" data-js=\"empty\">No results</h4>\n        <ol class=\"columns\" data-js=\"columns\"></ol>\n        <div class=\"rows\" data-js=\"rows\"></div>\n    </div>\n</section>";
};

},{}],177:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden section\">\n    <div class=\"section-heading\">\n        <h3>All Seasons</h3>\n    </div>\n    <div class=\"table\">\n        <ol class=\"table-row\" data-js=\"list\"></ol>\n    </div>\n</div>";
};

},{}],178:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    var dataId = p.membershareid ? "data-id=\"" + p.membershareid + "\"" : "",
        count = p.count ? "<span>(" + p.count + ")</span>" : "";

    return "" + ("<div " + dataId + "\" class=\"share-label\">\n        <div><span>" + p.label + "</span> " + count + "</div>\n        <div>\n            <span>" + p.humanStartdate + "</span>\n            <span>-</span>\n            <span>" + p.humanEnddate + "</span>\n        </div>\n        <div>" + p.duration + " weeks</div>\n    </div>");
};

},{}],179:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
    return '<div>\n    <h4>' + p.heading + '</h4>\n    <div><img data-src="' + Format.ImageSrc(p.image) + '" /></div>\n    <div>' + p.listHeading + '</div>\n    <ul>' + Format.GetListItems(p.sampleList) + '</ul>\n</div>';
};

},{"../../Format":5}],180:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden\">\n    <div class=\"section-heading\">\n        <h3>Adjust Member Share Options</h3>\n    </div>\n    <div class=\"content\">\n        <div>\n            <ul>\n                <li class=\"clearfix line-item\">\n                    <span>Weeks Removed: </span>\n                    <span data-js=\"weeksRemoved\"></span>\n                    <span class=\"adjustment\">\n                        <span>Adjustment: </span>\n                        <span class=\"is-negative\" data-js=\"weeksRemovedPrice\"></span>\n                    </span>\n                </li>\n                <li class=\"line-item\">\n                    <span>Weeks Added: </span>\n                    <span data-js=\"weeksAdded\"></span>\n                    <span data-js=\"addedAdjustment\" class=\"adjustment\">\n                        <span>Adjustment: </span>\n                        <span class=\"is-positive\" data-js=\"weeksAddedPrice\"></span>\n                    </span>\n                </li>\n                <li data-js=\"options\" class=\"line-item fd-hidden\">\n                    <div>\n                        <span>Options Update: </span>\n                        <span data-js=\"shareOptionDescription\"></span>\n                    </div>\n                    <div>\n                        <span>Weekly price adjustment: </span>\n                        <span data-js=\"weeklyAdjustment\"></span>\n                    </div>\n                    <div>\n                        <span>Weeks affected: </span>\n                        <span data-js=\"weeksAffected\"></span>\n                        <span class=\"adjustment\">\n                            <span> Adjustment: </span>\n                            <span data-js=\"optionsAdjustment\"></span>\n                        </span>\n                    </div>\n                <li>\n                    <span>Total Adjustment: </span>\n                    <span data-js=\"adjustment\"></span>\n                </li>\n            </ul>\n            <div class=\"email\">\n                <label><input data-js=\"sendEmail\" type=\"checkbox\">Send Email</label>\n            </div>\n            <div data-view=\"buttonFlow\"></div>\n        </div>\n    </div>\n</div>";
};

},{}],181:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
    return '<div class="bio">\n    <div>\n        <img data-src="' + Format.ImageSrc(p.image) + '" />\n        <div class="overlay">\n            <div>' + (p.bio || '') + '</div>\n        </div>\n    </div>\n    <div>' + p.name + '</div>\n</div>';
};

},{"../../Format":5}],182:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "" + "<div class=\"clearfix fd-hide fd-hidden\">\n    <div data-js=\"icon\"></div>\n    <div>\n        <div data-js=\"title\"></div>\n        <div data-js=\"message\"></div>\n    </div>\n</div>";
};

},{}],183:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden section\">\n    <div class=\"heading\">\n        <span></span>\n        <h3>Transactions</h3>\n        <span>Value</span>\n        <span>Check #</span>\n        <span>Date</span>\n        <span>Description</span>\n    </div>\n    <ol data-js=\"transactions\"></ol>\n    <div data-view=\"buttonFlow\" data-name=\"editButtons\"></div>\n    <div data-view=\"addTransaction\"></div>\n    <div class=\"balance\">\n        <h3>Balance</h3>\n        <span data-js=\"balance\"></span>\n        <span></span>\n        <span>\n            <div data-view=\"buttonFlow\" data-name=\"emailButtons\"></div>\n        </span>\n    </div>\n</div>";
};

},{}],184:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden\">\n    <div class=\"section-heading\">\n        <h3>Week Options</h3>\n        <div>\n            <span>Delivery Day: </span>\n            <span data-js=\"deliveryDay\"></span>\n        </div>\n        <button class=\"reset-btn hidden\" data-js=\"resetBtn\">Reset</button>\n    </div>\n    <div class=\"content\">\n        <div class=\"data\">\n            <ol data-js=\"dates\"></ol>\n        </div>\n        <div data-js=\"editSummary\" class=\"edit-summary hidden\">\n            <div>Summary of Changes</div>\n            <div data-js=\"changes\">\n                <div class=\"column\">\n                    <div>Added Dates</div>\n                    <ol data-js=\"selectedDates\" class=\"added-dates\"></ol>\n                </div>\n                <div class=\"column\">\n                    <div>Removed Dates</div>\n                    <ol data-js=\"removedDates\" class=\"removed-dates\"></ol>\n                </div>\n            </div>\n            <div>\n                <span>Week count adjustment: </span>\n                <span class=\"price-change\" data-js=\"weekChange\"></span>\n            </div>\n        </div>\n    </div>\n</div>";
};

},{}],185:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var sizeOptions = p.sizeOptions.map(function (option) {
        return '<div class="cell">' + option.label + ' Share</div>';
    }).join(''),
        rows = p.deliveryOptions.map(function (deliveryOption) {
        return '<div>' + ('<div class="cell">' + deliveryOption.label + '</div>') + p.sizeOptions.map(function (sizeOption) {
            var price = (parseFloat(sizeOption.price.replace('$', '')) + parseFloat(deliveryOption.price.replace('$', ''))).toFixed(2);
            return '<div class="cell">$' + price + ' / box</div>';
        }).join('') + '</div>';
    }).join('');

    return '' + ('<div>\n    <div>\n        <div class="cell">Delivery Option</div>\n        ' + sizeOptions + '\n    </div>\n    ' + rows + '\n</div>');
};

},{}],186:[function(require,module,exports){
"use strict";

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	return "" + ("<svg class=\"caret-down\" version=\"1.1\" class=\"caret-down\" " + this.IconDataJs(p) + " xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 292.362 292.362\" style=\"enable-background:new 0 0 292.362 292.362;\"\n\t xml:space=\"preserve\">\n<g>\n\t<path d=\"M286.935,69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952,0-9.233,1.807-12.85,5.424\n\t\tC1.807,72.998,0,77.279,0,82.228c0,4.948,1.807,9.229,5.424,12.847l127.907,127.907c3.621,3.617,7.902,5.428,12.85,5.428\n\t\ts9.233-1.811,12.847-5.428L286.935,95.074c3.613-3.617,5.427-7.898,5.427-12.847C292.362,77.279,290.548,72.998,286.935,69.377z\"/>\n</g></svg>");
};

},{}],187:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg version="1.1" data-js="' + (p.name || 'checkmark') + '" class="checkmark" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="97.619px" height="97.618px" viewBox="0 0 97.619 97.618" style="enable-background:new 0 0 97.619 97.618;"\n\t xml:space="preserve">\n<g>\n\t<path d="M96.939,17.358L83.968,5.959c-0.398-0.352-0.927-0.531-1.449-0.494C81.99,5.5,81.496,5.743,81.146,6.142L34.1,59.688\n\t\tL17.372,37.547c-0.319-0.422-0.794-0.701-1.319-0.773c-0.524-0.078-1.059,0.064-1.481,0.385L0.794,47.567\n\t\tc-0.881,0.666-1.056,1.92-0.39,2.801l30.974,40.996c0.362,0.479,0.922,0.771,1.522,0.793c0.024,0,0.049,0,0.073,0\n\t\tc0.574,0,1.122-0.246,1.503-0.68l62.644-71.297C97.85,19.351,97.769,18.086,96.939,17.358z"/>\n</g></svg>';
};

},{}],188:[function(require,module,exports){
'use strict';

module.exports = function () {
  var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return '<svg data-js="' + (p.name || 'edit') + '" class="edit" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" version="1.1" x="0px" y="0px" viewBox="0 0 100 100"><g transform="translate(0,-952.36218)"><path style="opacity:1;color:#000000;fill:#000000;stroke:none;stroke-width:4;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;fill-opacity:1;stroke-dasharray:none" d="M 70 13 L 61.4375 21.5625 L 78.4375 38.5625 L 87 30 L 70 13 z M 58.59375 24.40625 L 20.4375 62.5625 L 37.4375 79.5625 L 75.59375 41.40625 L 58.59375 24.40625 z M 17.84375 65.65625 L 13 87 L 34.34375 82.15625 L 17.84375 65.65625 z " transform="translate(0,952.36218)"/></g></svg>';
};

},{}],189:[function(require,module,exports){
'use strict';

module.exports = function () {
    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return '<svg version="1.1" data-js="' + (p.name || 'error') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 18.978 18.978" style="enable-background:new 0 0 18.978 18.978;" xml:space="preserve">\n<g>\n    <path d="M16.088,1.675c-0.133-0.104-0.306-0.144-0.47-0.105c-0.013,0.002-1.261,0.29-2.594,0.29\n        c-1.788,0-2.789-0.476-2.975-1.415C9.999,0.191,9.779,0.007,9.521,0c-0.257-0.007-0.487,0.167-0.55,0.418\n        C8.727,1.386,7.71,1.877,5.95,1.877c-1.332,0-2.571-0.302-2.583-0.305c-0.166-0.04-0.34-0.004-0.474,0.102\n        C2.76,1.777,2.681,1.938,2.681,2.108v4.869c0,0.04,0.004,0.078,0.013,0.115c0.057,1.647,0.65,8.714,6.528,11.822\n        c0.08,0.043,0.169,0.064,0.258,0.064c0.092,0,0.183-0.021,0.266-0.066c5.74-3.137,6.445-10.115,6.532-11.791\n        c0.012-0.046,0.019-0.094,0.019-0.144V2.108C16.297,1.939,16.219,1.78,16.088,1.675z M15.19,6.857\n        c-0.007,0.031-0.012,0.064-0.013,0.097c-0.053,1.298-0.574,7.832-5.701,10.838c-5.215-2.965-5.646-9.526-5.68-10.83\n        c0-0.029-0.004-0.058-0.009-0.085V2.784C4.322,2.877,5.112,2.982,5.95,2.982c1.911,0,2.965-0.54,3.537-1.208\n        c0.553,0.661,1.599,1.191,3.536,1.191c0.839,0,1.631-0.101,2.166-0.188L15.19,6.857L15.19,6.857z"/>\n    <polygon points="10.241,11.237 10.529,5.311 8.449,5.311 8.75,11.237 \t\t"/>\n    <path d="M9.496,11.891c-0.694,0-1.178,0.498-1.178,1.189c0,0.682,0.471,1.191,1.178,1.191\n        c0.706,0,1.164-0.51,1.164-1.191C10.647,12.389,10.189,11.891,9.496,11.891z"/>\n</g></svg>';
};

},{}],190:[function(require,module,exports){
'use strict';

module.exports = function () {
  var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return '<svg class="ex" data-js="' + (p.name || 'ex') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve"><g><g><polygon points="405,136.798 375.202,107 256,226.202 136.798,107 107,136.798 226.202,256 107,375.202 136.798,405 256,285.798     375.202,405 405,375.202 285.798,256   "/></g></g></svg>';
};

},{}],191:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg version="1.1" class="garbage" data-js="' + (p.name || 'garbage') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 59 59" style="enable-background:new 0 0 59 59;" xml:space="preserve">\n<g><path d="M29.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C28.5,50.553,28.948,51,29.5,51z"/>\n\t<path d="M19.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C18.5,50.553,18.948,51,19.5,51z"/>\n\t<path d="M39.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C38.5,50.553,38.948,51,39.5,51z"/>\n\t<path d="M52.5,6H38.456c-0.11-1.25-0.495-3.358-1.813-4.711C35.809,0.434,34.751,0,33.499,0H23.5c-1.252,0-2.31,0.434-3.144,1.289\n\t\tC19.038,2.642,18.653,4.75,18.543,6H6.5c-0.552,0-1,0.447-1,1s0.448,1,1,1h2.041l1.915,46.021C10.493,55.743,11.565,59,15.364,59\n\t\th28.272c3.799,0,4.871-3.257,4.907-4.958L50.459,8H52.5c0.552,0,1-0.447,1-1S53.052,6,52.5,6z M21.792,2.681\n\t\tC22.24,2.223,22.799,2,23.5,2h9.999c0.701,0,1.26,0.223,1.708,0.681c0.805,0.823,1.128,2.271,1.24,3.319H20.553\n\t\tC20.665,4.952,20.988,3.504,21.792,2.681z M46.544,53.979C46.538,54.288,46.4,57,43.636,57H15.364\n\t\tc-2.734,0-2.898-2.717-2.909-3.042L10.542,8h37.915L46.544,53.979z"/>\n</g></svg>';
};

},{}],192:[function(require,module,exports){
"use strict";

module.exports = "<svg version=\"1.1\" data-js=\"justify\" class=\"justify\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"-2 -2 28 28\" style=\"enable-background:new 0 0 22.916 22.916;\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M22.416,22.828H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,22.828,22.416,22.828z\"/>\n\t<path d=\"M22.416,15.582H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,15.582,22.416,15.582z\"/>\n\t<path d=\"M22.416,8.335H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,8.335,22.416,8.335z\"/>\n\t<path d=\"M22.416,1.088H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,1.088,22.416,1.088z\"/></g></svg>";

},{}],193:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg class="left-arrow" data-js="' + (p.name || 'leftArrow') + '" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t viewBox="0 0 31.494 31.494" style="enable-background:new 0 0 31.494 31.494;" xml:space="preserve">\n<path style="fill:#1E201D;" d="M10.273,5.009c0.444-0.444,1.143-0.444,1.587,0c0.429,0.429,0.429,1.143,0,1.571l-8.047,8.047h26.554\n\tc0.619,0,1.127,0.492,1.127,1.111c0,0.619-0.508,1.127-1.127,1.127H3.813l8.047,8.032c0.429,0.444,0.429,1.159,0,1.587\n\tc-0.444,0.444-1.143,0.444-1.587,0l-9.952-9.952c-0.429-0.429-0.429-1.143,0-1.571L10.273,5.009z"/></svg>';
};

},{}],194:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = {

    Pages: Object.create(require('../../models/__proto__'), { resource: { value: 'Pages' } }),

    loadImageTable: function loadImageTable(table, model) {
        var _this = this;

        return new Promise(function (resolve, reject) {
            var imageEl = new Image();
            imageEl.src = _this.Format.ImageSrc(table.name + '-' + model.id);
            imageEl.onload = function () {
                model.tableName = table.name;

                _this.slurpTemplate({
                    insertion: { el: _this.els[table.el] },
                    template: _this.templates[table.template](model)
                });

                _this.emit('inserted' + table.name + 'Template');

                resolve();
            };
        });
    },
    loadTableData: function loadTableData(table) {
        var _this2 = this;

        console.log('loadTableData');
        console.log(table);
        this.models[table.name] = Object.create(require('../../models/__proto__'), { resource: { value: table.name } });

        this.models[table.name].get().then(function () {
            if (table.image) {
                var promise = Promise.resolve();
                _this2.models[table.name].data.forEach(function (model) {
                    return promise = promise.then(function () {
                        return _this2.loadImageTable(table, model);
                    });
                });
                return promise;
            } else {
                _this2.models[table.name].data.forEach(function (model) {
                    return _this2.slurpTemplate({
                        insertion: { el: _this2.els[table.el] },
                        template: _this2.templates[table.template](model)
                    });
                });

                _this2.emit('inserted' + table.name + 'Template');
            }
        }).catch(this.Error);
    },
    processObject: function processObject(name, data) {
        var _this3 = this;

        console.log('processObject');
        console.log(name);
        console.log(data);
        Object.keys(data).forEach(function (key) {
            var val = data[key];
            console.log(key);
            console.log(val);
            console.log(typeof val === 'undefined' ? 'undefined' : _typeof(val));
            if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') return Array.isArray(val) ? _this3.insertArrayData(name, key, val) : _this3.processObject(key, val);

            if (_this3.els[key]) return (/image/i.test(key) ? _this3.slurpTemplate({
                    insertion: { el: _this3.els[key] },
                    template: '<img data-src="' + _this3.Format.ImageSrc(data[key]) + '" />'
                }) : _this3.els[key].innerHTML = _this3.Format.ParseTextLinks(data[key])
            );

            if (_this3.nameToTagName[key]) {
                console.log('isHeading');
                console.log(_this3.els[name].querySelector(_this3.nameToSelector[key] || _this3.nameToTagName[key]));
                _this3.els[name].querySelector(_this3.nameToSelector[key] || _this3.nameToTagName[key]).innerHTML = _this3.Format.ParseTextLinks(data[key]);
            }
        });
    },
    insertArrayData: function insertArrayData(sectionName, key, data) {
        var _this4 = this;

        console.log('insertArrayData');
        console.log(sectionName);
        console.log(key);
        console.log(data);
        var el = this.els[key] || this.els[sectionName];
        console.log(el);
        data.forEach(function (datum) {
            return _this4.slurpTemplate({
                insertion: { el: el },
                template: '<' + (_this4.nameToTagName[key] || 'li') + '>' + _this4.Format.ParseTextLinks(datum) + '</' + (_this4.nameToTagName[key] || 'li') + '>'
            });
        });
    },


    nameToSelector: {
        heading: 'h2, h3, h4'
    },

    nameToTagName: {
        heading: 'h2',
        description: 'p'
    },

    postRender: function postRender() {
        var _this5 = this;

        console.log('custom content postRender');
        console.log(this.name);
        console.log(this.documentName);
        if (this.tables.length) {
            this.models = {};
            this.tables.forEach(function (table) {
                return _this5.loadTableData(table);
            });
        }

        this.Pages.get({ query: { name: this.documentName } }).then(function () {
            console.log(_this5.Pages.data);
            _this5.processObject(null, _this5.Pages.data);
        }).catch(this.Error);

        return this;
    },


    tables: []

};

},{"../../models/__proto__":43}],195:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('../MyView'),
    Form = function Form() {
    return MyView.apply(this, arguments);
};

_extends(Form.prototype, MyView.prototype, {

    emailRegex: /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,

    fields: [],

    onFormFail: function onFormFail(error) {
        console.log(error.stack || error);
        this.slurpTemplate({ template: this.templates.serverError(error), insertion: { $el: this.templateData.buttonRow, method: 'before' } });
    },

    onSubmissionResponse: function onSubmissionResponse() {},

    postForm: function postForm(data) {
        return this.Q(this.$.ajax({
            data: JSON.stringify(data.values) || JSON.stringify(this.getFormData()),
            headers: { token: this.user ? this.user.get('token') : '' },
            type: "POST",
            url: this.util.format("/%s", data.resource)
        }));
    },


    removeErrors: function removeErrors(e) {

        var input = this.$(e.target);
        input.parent().removeClass('has-error');
        input.next().remove();
    },

    submitForm: function submitForm(resource) {

        if (this.validateForm() === false) return;
        this.postForm(resource).then(this.onSubmissionResponse.bind(this)).fail(this.onFormFail.bind(this)).done();
    },

    templates: {
        fieldError: require('../../templates/fieldError')(require('handlebars')),
        invalidLoginError: require('../../templates/invalidLoginError')(require('handlebars')),
        serverError: require('../../templates/serverError')(require('handlebars'))
    },

    validateForm: function validateForm() {
        var valid = true;

        if (this.templateData.invalidLoginError) this.templateData.invalidLoginError.remove();
        if (this.templateData.serverError) this.templateData.serverError.remove();

        this.fields.forEach(function (field) {

            this.templateData[field.name].parent().removeClass('has-error');
            this.templateData[field.name].next().remove();

            if (field.validate.call(this, this.templateData[field.name].val()) === false) {
                valid = false;

                this.templateData[field.name].parent().addClass('has-error');
                this.slurpTemplate({ template: this.templates.fieldError(field), insertion: { $el: this.templateData[field.name].parent(), method: 'append' } });
            }
        }, this);

        return valid;
    },

    validatePassword: function validatePassword(val) {
        if (!val) return false;else return val.length >= 6;
    }
});

module.exports = Form;

},{"../../templates/fieldError":52,"../../templates/invalidLoginError":60,"../../templates/serverError":65,"../MyView":111,"handlebars":247}],196:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('../MyView'),
    ListView = function ListView() {
    return MyView.apply(this, arguments);
};

_extends(ListView.prototype, MyView.prototype, {

    addItem: function addItem(model) {
        var _this = this;

        this.itemViews[model.id] = new this.ItemView(_extends({ container: this.templateData.container, model: model, selection: this.selection }, this.getItemViewOptions())).on('removed', function () {
            return delete _this.itemViews[model.id];
        });

        this.emit('itemAdded', model);

        if (model.get('unselectable')) return;

        if (this.selection) this.itemViews[model.id].on('clicked', function (model) {
            return _this.onItemClick(model);
        });
        if (this.selected) this.onItemClick(model);
    },

    collection: {},

    createItems: function createItems() {
        var _this2 = this;

        this.items = new (this.Collection.extend(typeof this.collection === "function" ? this.collection() : this.collection))().on('reset', function () {
            return _this2.onItemsReset();
        }).on('add', function (item) {
            return _this2.addItem(item);
        }).on('remove', function (item) {
            return _this2.removeItem(item);
        }).on('update', function () {
            return _this2.noItemCheck();
        }).on('sort', function () {
            return _this2.reOrderDOM();
        });

        return this;
    },
    fetchItems: function fetchItems() {
        var _this3 = this;

        this.items.fetch(_extends({}, { reset: true }, this.fetch)).fail(function (err) {
            return console.log('Error fetching collection : ' + _this3.url + " -- " + err.stack || err);
        });

        return this;
    },


    getClosestClickedIndex: function getClosestClickedIndex(model) {
        var _this4 = this;

        var clickedIndex = this.items.indexOf(model),
            closest = undefined,
            maxDistance = 0,
            selectedIndexes = Object.keys(this.selectedItems).map(function (id) {
            return _this4.items.indexOf(_this4.items.get(id));
        }).sort();

        selectedIndexes.forEach(function (index) {
            var distance = Math.abs(index - clickedIndex);
            if (distance > maxDistance) {
                maxDistance = distance;closest = index;
            }
        });

        return closest;
    },

    getItemViewOptions: function getItemViewOptions() {
        return {};
    },

    handleKeydown: function handleKeydown(e) {

        this.pressedKey = e.which === 16 ? 'shift' : e.which === 17 || e.which === 91 ? 'ctrl' : undefined;
    },

    handleKeyup: function handleKeyup(e) {

        this.pressedKey = e.which === 16 && this.pressedKey === 'shift' ? undefined : (e.which === 17 || e.which === 91) && this.pressedKey === 'ctrl' ? undefined : this.pressedKey;
    },

    noItemCheck: function noItemCheck() {
        var container = this.getItemViewOptions().container || this.templateData.container;
        if (this.items.length === 0) container.addClass('no-items');else container.removeClass('no-items');
    },

    onItemClick: function onItemClick(model) {
        var method = this.util.format('%sselectItem', this.itemViews[model.id].templateData.container.hasClass('selected') && this.selection !== 'multiComplex' ? 'un' : '');

        this[method](model);
    },

    onItemsReset: function onItemsReset() {
        var _this5 = this;

        var listContainer = this.getItemViewOptions().container || this.templateData.container;

        listContainer.empty();
        this.itemViews = [];
        if (this.items.length && this.setFields) {
            this.setFields(this.items.at(0).attributes);
        }
        this.items.forEach(function (item) {
            return _this5.addItem(item);
        });
        this.noItemCheck();
    },
    postRender: function postRender() {
        var _this6 = this;

        if (this.selection === 'multiComplex') {

            this.$(document).on('keydown', this.handleKeydown.bind(this)).on('keyup', this.handleKeyup.bind(this));

            window.addEventListener("blur", function (e) {
                return _this6.pressedKey = undefined;
            });
            window.addEventListener("focus", function (e) {
                return _this6.pressedKey = undefined;
            });
        }

        this.itemViews = [];
        this.selectedItems = {};

        this.createItems();

        if (this.itemModels) this.items.reset(typeof this.itemModels === "function" ? this.itemModels() : this.itemModels);

        if (this.fetch) this.fetchItems();
    },
    removeItem: function removeItem(item) {
        if (this.itemViews[item.id].templateData.container.hasClass('selected')) this.unselectItem(item);
        this.itemViews[item.id].delete();
        delete this.itemViews[item.id];
    },


    reOrderDOM: function reOrderDOM() {
        var _this7 = this;

        var container = this.getItemViewOptions().container || this.templateData.container;
        this.items.forEach(function (item) {
            return container[_this7.reverseSort ? 'prepend' : 'append'](_this7.itemViews[item.id].templateData.container);
        });
    },

    scrollToBottom: function scrollToBottom() {
        var _this8 = this;

        var height;

        var intervalId = setInterval(function () {
            var newHeight = _this8.templateData.container.outerHeight(true);
            if (height === newHeight) {
                clearInterval(intervalId);
                _this8.container.scrollTop(_this8.container.prop('scrollHeight'));
            } else {
                height = _this8.templateData.container.outerHeight(true);
            }
        }, 100);
    },

    selectItem: function selectItem(model) {
        var _this9 = this;

        var selectedIds = Object.keys(this.selectedItems);

        if (this.pressedKey === undefined && this.selection === 'multiComplex' || this.selection === 'single') {
            selectedIds.forEach(function (id) {
                return _this9.unselectItem(_this9.selectedItems[id]);
            });
        }

        if (this.pressedKey === 'shift' && selectedIds.length) {
            var end = this.getClosestClickedIndex(model),
                start = this.items.indexOf(model);

            this._.range(start, end, start < end ? 1 : -1).forEach(function (index) {
                var itemToSelect = _this9.items.at(index);
                _this9.itemViews[itemToSelect.id].templateData.container.addClass('selected');
                _this9.selectedItems[itemToSelect.id] = itemToSelect;
                _this9.emit('itemSelected', itemToSelect);
            });
        } else {
            this.itemViews[model.id].templateData.container.addClass('selected');
            this.selectedItems[model.id] = model;
            this.emit('itemSelected', model);
        }
    },


    unselectItem: function unselectItem(model) {

        this.itemViews[model.id].templateData.container.removeClass('selected');

        delete this.selectedItems[model.id];

        this.emit('itemUnselected', model);
    }

});

module.exports = ListView;

},{"../MyView":111}],197:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('../MyView'),
    ListItem = function ListItem() {
	return MyView.apply(this, arguments);
};

_extends(ListItem.prototype, MyView.prototype, {
	getTemplateOptions: function getTemplateOptions() {
		return this.model.attributes;
	},
	postRender: function postRender() {
		var _this = this;

		if (this.selection) this.templateData.container.on('click', function () {
			return _this.emit('clicked', _this.model);
		});
	}
});

module.exports = ListItem;

},{"../MyView":111}],198:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('./List'),
    Table = function Table() {
    return List.apply(this, arguments);
};

_extends(Table.prototype, List.prototype, {

    events: {
        'header': { event: 'click', selector: 'th', method: 'sortByHeader' }
    },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.body, fields: this.fields, imageLoader: this.imageLoader, spinner: this.spinner };
    },
    getTemplateOptions: function getTemplateOptions() {
        return { fields: this.fields };
    },


    sortByHeader: function sortByHeader(e) {

        var comparator = this.$(e.currentTarget).attr('data-sort');

        this.reverseSort = comparator === this.items.comparator && this.reverseSort === false ? true : false;

        this.items.comparator = comparator;

        this.items.sort();
    },

    templates: {
        headerColumn: function headerColumn(data) {
            return this.util.format('<th class="w%s %s" data-sort="%s">%s</th>', data.width, data.name, data.name, data.label);
        }
    }

});

module.exports = Table;

},{"./List":196}],199:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./MyObject').prototype, {
    CreateDefault: function CreateDefault() {
        return this.reducer(this.attributes, function (attr) {
            return _defineProperty({}, attr.name, typeof attr.default === 'function' ? attr.default() : attr.default);
        });
    },


    attributes: [],

    data: {},

    constructor: function constructor() {
        var _this = this;

        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _extends(this, { store: {}, data: data }, opts);

        if (this.storeBy) {
            this.storeBy.forEach(function (key) {
                return _this.store[key] = {};
            });
            this._store();
        }

        return this;
    },


    meta: {},

    sort: function sort(opts) {
        var attr = Object.keys(opts)[0],
            value = opts[attr];

        this.data.sort(function (a, b) {
            return value ? a[attr] < b[attr] ? -1 : 1 : b[attr] < a[attr] ? -1 : 1;
        });

        return this;
    },
    _resetStore: function _resetStore(storeBy) {
        var _this2 = this;

        this.store = {};
        storeBy.forEach(function (attr) {
            return _this2.store[attr] = {};
        });
        this.storeBy = storeBy;
    },
    _store: function _store(data) {
        var _this3 = this;

        data = data || this.data;
        data.forEach(function (datum) {
            return _this3.storeBy.forEach(function (attr) {
                return _this3._storeAttr(datum, attr);
            });
        });
    },
    _storeAttr: function _storeAttr(datum, attr) {
        this.store[attr][datum[attr]] = this.store[attr][datum[attr]] ? Array.isArray(this.store[attr][datum[attr]]) ? this.store[attr][datum[attr]].concat(datum) : [this.store[attr][datum[attr]], datum] : datum;
    },
    _storeOne: function _storeOne(datum) {
        var _this4 = this;

        this.storeBy.forEach(function (attr) {
            return _this4._storeAttr(datum, attr);
        });
    }
});

},{"./MyObject":201}],200:[function(require,module,exports){
"use strict";

module.exports = function (err) {
  console.log(err.stack || err);
};

},{}],201:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MyObject = function MyObject(data) {
    return _extends(this, data);
};

_extends(MyObject.prototype, {

    Error: require('./MyError'),

    _: require('underscore'),

    format: require('util').format,

    moment: require('moment'),

    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    getIntRange: function getIntRange(int) {
        return Array.from(Array(int).keys());
    },
    getRandomInclusiveInteger: function getRandomInclusiveInteger(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    omit: function omit(obj, keys) {
        return Object.keys(obj).filter(function (key) {
            return !keys.includes(key);
        }).reduce(function (memo, key) {
            return _extends(memo, _defineProperty({}, key, obj[key]));
        }, {});
    },
    fdPick: function fdPick(obj, keys) {
        return keys.reduce(function (memo, key) {
            return _extends(memo, _defineProperty({}, key, obj[key]));
        }, {});
    },
    reducer: function reducer(arr, fn) {
        return arr.reduce(function (memo, item, i) {
            return _extends(memo, fn(item, i));
        }, {});
    },
    shuffleArray: function shuffleArray(arr) {
        var _this = this;

        var rv = Array.from(arr);

        rv.forEach(function (item, i) {
            if (i === rv.length - 1) return;
            var int = _this.getRandomInclusiveInteger(i, rv.length - 1),
                holder = rv[i];

            rv[i] = rv[int];
            rv[int] = holder;
        });

        return rv;
    },


    P: function P(fun) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var thisArg = arguments[2];
        return new Promise(function (resolve, reject) {
            return Reflect.apply(fun, thisArg || undefined, args.concat(function (e) {
                for (var _len = arguments.length, callback = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    callback[_key - 1] = arguments[_key];
                }

                return e ? reject(e) : resolve(callback);
            }));
        });
    },

    Q: require('q')

});

module.exports = MyObject;

},{"./MyError":200,"moment":"moment","q":262,"underscore":"underscore","util":266}],202:[function(require,module,exports){
(function (process,__filename){
/** vim: et:ts=4:sw=4:sts=4
 * @license amdefine 1.0.1 Copyright (c) 2011-2016, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/amdefine for details
 */

/*jslint node: true */
/*global module, process */
'use strict';

/**
 * Creates a define for node.
 * @param {Object} module the "module" object that is defined by Node for the
 * current module.
 * @param {Function} [requireFn]. Node's require function for the current module.
 * It only needs to be passed in Node versions before 0.5, when module.require
 * did not exist.
 * @returns {Function} a define function that is usable for the current node
 * module.
 */
function amdefine(module, requireFn) {
    'use strict';
    var defineCache = {},
        loaderCache = {},
        alreadyCalled = false,
        path = require('path'),
        makeRequire, stringRequire;

    /**
     * Trims the . and .. from an array of path segments.
     * It will keep a leading path segment if a .. will become
     * the first path segment, to help with module name lookups,
     * which act like paths, but can be remapped. But the end result,
     * all paths that use this function should look normalized.
     * NOTE: this method MODIFIES the input array.
     * @param {Array} ary the array of path segments.
     */
    function trimDots(ary) {
        var i, part;
        for (i = 0; ary[i]; i+= 1) {
            part = ary[i];
            if (part === '.') {
                ary.splice(i, 1);
                i -= 1;
            } else if (part === '..') {
                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                    //End of the line. Keep at least one non-dot
                    //path segment at the front so it can be mapped
                    //correctly to disk. Otherwise, there is likely
                    //no path mapping for a path starting with '..'.
                    //This can still fail, but catches the most reasonable
                    //uses of ..
                    break;
                } else if (i > 0) {
                    ary.splice(i - 1, 2);
                    i -= 2;
                }
            }
        }
    }

    function normalize(name, baseName) {
        var baseParts;

        //Adjust any relative paths.
        if (name && name.charAt(0) === '.') {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                baseParts = baseName.split('/');
                baseParts = baseParts.slice(0, baseParts.length - 1);
                baseParts = baseParts.concat(name.split('/'));
                trimDots(baseParts);
                name = baseParts.join('/');
            }
        }

        return name;
    }

    /**
     * Create the normalize() function passed to a loader plugin's
     * normalize method.
     */
    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(id) {
        function load(value) {
            loaderCache[id] = value;
        }

        load.fromText = function (id, text) {
            //This one is difficult because the text can/probably uses
            //define, and any relative paths and requires should be relative
            //to that id was it would be found on disk. But this would require
            //bootstrapping a module/require fairly deeply from node core.
            //Not sure how best to go about that yet.
            throw new Error('amdefine does not implement load.fromText');
        };

        return load;
    }

    makeRequire = function (systemRequire, exports, module, relId) {
        function amdRequire(deps, callback) {
            if (typeof deps === 'string') {
                //Synchronous, single module require('')
                return stringRequire(systemRequire, exports, module, deps, relId);
            } else {
                //Array of dependencies with a callback.

                //Convert the dependencies to modules.
                deps = deps.map(function (depName) {
                    return stringRequire(systemRequire, exports, module, depName, relId);
                });

                //Wait for next tick to call back the require call.
                if (callback) {
                    process.nextTick(function () {
                        callback.apply(null, deps);
                    });
                }
            }
        }

        amdRequire.toUrl = function (filePath) {
            if (filePath.indexOf('.') === 0) {
                return normalize(filePath, path.dirname(module.filename));
            } else {
                return filePath;
            }
        };

        return amdRequire;
    };

    //Favor explicit value, passed in if the module wants to support Node 0.4.
    requireFn = requireFn || function req() {
        return module.require.apply(module, arguments);
    };

    function runFactory(id, deps, factory) {
        var r, e, m, result;

        if (id) {
            e = loaderCache[id] = {};
            m = {
                id: id,
                uri: __filename,
                exports: e
            };
            r = makeRequire(requireFn, e, m, id);
        } else {
            //Only support one define call per file
            if (alreadyCalled) {
                throw new Error('amdefine with no module ID cannot be called more than once per file.');
            }
            alreadyCalled = true;

            //Use the real variables from node
            //Use module.exports for exports, since
            //the exports in here is amdefine exports.
            e = module.exports;
            m = module;
            r = makeRequire(requireFn, e, m, module.id);
        }

        //If there are dependencies, they are strings, so need
        //to convert them to dependency values.
        if (deps) {
            deps = deps.map(function (depName) {
                return r(depName);
            });
        }

        //Call the factory with the right dependencies.
        if (typeof factory === 'function') {
            result = factory.apply(m.exports, deps);
        } else {
            result = factory;
        }

        if (result !== undefined) {
            m.exports = result;
            if (id) {
                loaderCache[id] = m.exports;
            }
        }
    }

    stringRequire = function (systemRequire, exports, module, id, relId) {
        //Split the ID by a ! so that
        var index = id.indexOf('!'),
            originalId = id,
            prefix, plugin;

        if (index === -1) {
            id = normalize(id, relId);

            //Straight module lookup. If it is one of the special dependencies,
            //deal with it, otherwise, delegate to node.
            if (id === 'require') {
                return makeRequire(systemRequire, exports, module, relId);
            } else if (id === 'exports') {
                return exports;
            } else if (id === 'module') {
                return module;
            } else if (loaderCache.hasOwnProperty(id)) {
                return loaderCache[id];
            } else if (defineCache[id]) {
                runFactory.apply(null, defineCache[id]);
                return loaderCache[id];
            } else {
                if(systemRequire) {
                    return systemRequire(originalId);
                } else {
                    throw new Error('No module with ID: ' + id);
                }
            }
        } else {
            //There is a plugin in play.
            prefix = id.substring(0, index);
            id = id.substring(index + 1, id.length);

            plugin = stringRequire(systemRequire, exports, module, prefix, relId);

            if (plugin.normalize) {
                id = plugin.normalize(id, makeNormalize(relId));
            } else {
                //Normalize the ID normally.
                id = normalize(id, relId);
            }

            if (loaderCache[id]) {
                return loaderCache[id];
            } else {
                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});

                return loaderCache[id];
            }
        }
    };

    //Create a define function specific to the module asking for amdefine.
    function define(id, deps, factory) {
        if (Array.isArray(id)) {
            factory = deps;
            deps = id;
            id = undefined;
        } else if (typeof id !== 'string') {
            factory = id;
            id = deps = undefined;
        }

        if (deps && !Array.isArray(deps)) {
            factory = deps;
            deps = undefined;
        }

        if (!deps) {
            deps = ['require', 'exports', 'module'];
        }

        //Set up properties for this module. If an ID, then use
        //internal cache. If no ID, then use the external variables
        //for this node module.
        if (id) {
            //Put the module in deep freeze until there is a
            //require call for it.
            defineCache[id] = [id, deps, factory];
        } else {
            runFactory(id, deps, factory);
        }
    }

    //define.require, which has access to all the values in the
    //cache. Useful for AMD modules that all have IDs in the file,
    //but need to finally export a value to node based on one of those
    //IDs.
    define.require = function (id) {
        if (loaderCache[id]) {
            return loaderCache[id];
        }

        if (defineCache[id]) {
            runFactory.apply(null, defineCache[id]);
            return loaderCache[id];
        }
    };

    define.amd = {};

    return define;
}

module.exports = amdefine;

}).call(this,require('_process'),"/node_modules/amdefine/amdefine.js")

},{"_process":261,"path":260}],203:[function(require,module,exports){
// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
require('../../js/transition.js')
require('../../js/alert.js')
require('../../js/button.js')
require('../../js/carousel.js')
require('../../js/collapse.js')
require('../../js/dropdown.js')
require('../../js/modal.js')
require('../../js/tooltip.js')
require('../../js/popover.js')
require('../../js/scrollspy.js')
require('../../js/tab.js')
require('../../js/affix.js')
},{"../../js/affix.js":204,"../../js/alert.js":205,"../../js/button.js":206,"../../js/carousel.js":207,"../../js/collapse.js":208,"../../js/dropdown.js":209,"../../js/modal.js":210,"../../js/popover.js":211,"../../js/scrollspy.js":212,"../../js/tab.js":213,"../../js/tooltip.js":214,"../../js/transition.js":215}],204:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: affix.js v3.3.5
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.5'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

},{}],205:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: alert.js v3.3.5
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.5'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

},{}],206:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: button.js v3.3.5
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.5'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

},{}],207:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: carousel.js v3.3.5
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.5'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

},{}],208:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: collapse.js v3.3.5
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.5'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

},{}],209:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.5
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.5'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

},{}],210:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: modal.js v3.3.5
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.5'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

},{}],211:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: popover.js v3.3.5
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.5'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

},{}],212:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.5
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.5'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

},{}],213:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tab.js v3.3.5
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.5'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

},{}],214:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.5
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.5'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

},{}],215:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: transition.js v3.3.5
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

},{}],216:[function(require,module,exports){

},{}],217:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],218:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _handlebarsRuntime = require('./handlebars.runtime');

var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

// Compiler imports

var _handlebarsCompilerAst = require('./handlebars/compiler/ast');

var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

var _handlebarsCompilerBase = require('./handlebars/compiler/base');

var _handlebarsCompilerCompiler = require('./handlebars/compiler/compiler');

var _handlebarsCompilerJavascriptCompiler = require('./handlebars/compiler/javascript-compiler');

var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

var _handlebarsCompilerVisitor = require('./handlebars/compiler/visitor');

var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

var _handlebarsNoConflict = require('./handlebars/no-conflict');

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

var _create = _handlebarsRuntime2['default'].create;
function create() {
  var hb = _create();

  hb.compile = function (input, options) {
    return _handlebarsCompilerCompiler.compile(input, options, hb);
  };
  hb.precompile = function (input, options) {
    return _handlebarsCompilerCompiler.precompile(input, options, hb);
  };

  hb.AST = _handlebarsCompilerAst2['default'];
  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
  hb.Parser = _handlebarsCompilerBase.parser;
  hb.parse = _handlebarsCompilerBase.parse;

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst.Visitor = _handlebarsCompilerVisitor2['default'];

inst['default'] = inst;

exports['default'] = inst;
module.exports = exports['default'];


},{"./handlebars.runtime":219,"./handlebars/compiler/ast":221,"./handlebars/compiler/base":222,"./handlebars/compiler/compiler":224,"./handlebars/compiler/javascript-compiler":226,"./handlebars/compiler/visitor":229,"./handlebars/no-conflict":243}],219:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _handlebarsBase = require('./handlebars/base');

var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

var _handlebarsSafeString = require('./handlebars/safe-string');

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = require('./handlebars/exception');

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = require('./handlebars/utils');

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = require('./handlebars/runtime');

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = require('./handlebars/no-conflict');

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;

exports['default'] = inst;
module.exports = exports['default'];


},{"./handlebars/base":220,"./handlebars/exception":233,"./handlebars/no-conflict":243,"./handlebars/runtime":244,"./handlebars/safe-string":245,"./handlebars/utils":246}],220:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = require('./utils');

var _exception = require('./exception');

var _exception2 = _interopRequireDefault(_exception);

var _helpers = require('./helpers');

var _decorators = require('./decorators');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var VERSION = '4.0.10';
exports.VERSION = VERSION;
var COMPILER_REVISION = 7;

exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0'
};

exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: _logger2['default'],
  log: _logger2['default'].log,

  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }
      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },

  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },

  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }
      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  }
};

var log = _logger2['default'].log;

exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];


},{"./decorators":231,"./exception":233,"./helpers":234,"./logger":242,"./utils":246}],221:[function(require,module,exports){
'use strict';

exports.__esModule = true;
var AST = {
  // Public API used to evaluate derived attributes regarding AST nodes
  helpers: {
    // a mustache is definitely a helper if:
    // * it is an eligible helper, and
    // * it has at least one parameter or hash segment
    helperExpression: function helperExpression(node) {
      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
    },

    scopedId: function scopedId(path) {
      return (/^\.|this\b/.test(path.original)
      );
    },

    // an ID is simple if it only has one part, and that part is not
    // `..` or `this`.
    simpleId: function simpleId(path) {
      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
    }
  }
};

// Must be exported as an object rather than the root of the module as the jison lexer
// must modify the object to operate properly.
exports['default'] = AST;
module.exports = exports['default'];


},{}],222:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.parse = parse;
// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

var _whitespaceControl = require('./whitespace-control');

var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

var _utils = require('../utils');

exports.parser = _parser2['default'];

var yy = {};
_utils.extend(yy, Helpers);

function parse(input, options) {
  // Just return if an already-compiled AST was passed in.
  if (input.type === 'Program') {
    return input;
  }

  _parser2['default'].yy = yy;

  // Altering the shared object here, but this is ok as parser is a sync operation
  yy.locInfo = function (locInfo) {
    return new yy.SourceLocation(options && options.srcName, locInfo);
  };

  var strip = new _whitespaceControl2['default'](options);
  return strip.accept(_parser2['default'].parse(input));
}


},{"../utils":246,"./helpers":225,"./parser":227,"./whitespace-control":230}],223:[function(require,module,exports){
/* global define */
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

var SourceNode = undefined;

try {
  /* istanbul ignore next */
  if (typeof define !== 'function' || !define.amd) {
    // We don't support this in AMD environments. For these environments, we asusme that
    // they are running on the browser and thus have no need for the source-map library.
    var SourceMap = require('source-map');
    SourceNode = SourceMap.SourceNode;
  }
} catch (err) {}
/* NOP */

/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
if (!SourceNode) {
  SourceNode = function (line, column, srcFile, chunks) {
    this.src = '';
    if (chunks) {
      this.add(chunks);
    }
  };
  /* istanbul ignore next */
  SourceNode.prototype = {
    add: function add(chunks) {
      if (_utils.isArray(chunks)) {
        chunks = chunks.join('');
      }
      this.src += chunks;
    },
    prepend: function prepend(chunks) {
      if (_utils.isArray(chunks)) {
        chunks = chunks.join('');
      }
      this.src = chunks + this.src;
    },
    toStringWithSourceMap: function toStringWithSourceMap() {
      return { code: this.toString() };
    },
    toString: function toString() {
      return this.src;
    }
  };
}

function castChunk(chunk, codeGen, loc) {
  if (_utils.isArray(chunk)) {
    var ret = [];

    for (var i = 0, len = chunk.length; i < len; i++) {
      ret.push(codeGen.wrap(chunk[i], loc));
    }
    return ret;
  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
    // Handle primitives that the SourceNode will throw up on
    return chunk + '';
  }
  return chunk;
}

function CodeGen(srcFile) {
  this.srcFile = srcFile;
  this.source = [];
}

CodeGen.prototype = {
  isEmpty: function isEmpty() {
    return !this.source.length;
  },
  prepend: function prepend(source, loc) {
    this.source.unshift(this.wrap(source, loc));
  },
  push: function push(source, loc) {
    this.source.push(this.wrap(source, loc));
  },

  merge: function merge() {
    var source = this.empty();
    this.each(function (line) {
      source.add(['  ', line, '\n']);
    });
    return source;
  },

  each: function each(iter) {
    for (var i = 0, len = this.source.length; i < len; i++) {
      iter(this.source[i]);
    }
  },

  empty: function empty() {
    var loc = this.currentLocation || { start: {} };
    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
  },
  wrap: function wrap(chunk) {
    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

    if (chunk instanceof SourceNode) {
      return chunk;
    }

    chunk = castChunk(chunk, this, loc);

    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
  },

  functionCall: function functionCall(fn, type, params) {
    params = this.generateList(params);
    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
  },

  quotedString: function quotedString(str) {
    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
    .replace(/\u2029/g, '\\u2029') + '"';
  },

  objectLiteral: function objectLiteral(obj) {
    var pairs = [];

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        var value = castChunk(obj[key], this);
        if (value !== 'undefined') {
          pairs.push([this.quotedString(key), ':', value]);
        }
      }
    }

    var ret = this.generateList(pairs);
    ret.prepend('{');
    ret.add('}');
    return ret;
  },

  generateList: function generateList(entries) {
    var ret = this.empty();

    for (var i = 0, len = entries.length; i < len; i++) {
      if (i) {
        ret.add(',');
      }

      ret.add(castChunk(entries[i], this));
    }

    return ret;
  },

  generateArray: function generateArray(entries) {
    var ret = this.generateList(entries);
    ret.prepend('[');
    ret.add(']');

    return ret;
  }
};

exports['default'] = CodeGen;
module.exports = exports['default'];


},{"../utils":246,"source-map":248}],224:[function(require,module,exports){
/* eslint-disable new-cap */

'use strict';

exports.__esModule = true;
exports.Compiler = Compiler;
exports.precompile = precompile;
exports.compile = compile;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

var _utils = require('../utils');

var _ast = require('./ast');

var _ast2 = _interopRequireDefault(_ast);

var slice = [].slice;

function Compiler() {}

// the foundHelper register will disambiguate helper lookup from finding a
// function in a context. This is necessary for mustache compatibility, which
// requires that context functions in blocks are evaluated by blockHelperMissing,
// and then proceed as if the resulting value was provided to blockHelperMissing.

Compiler.prototype = {
  compiler: Compiler,

  equals: function equals(other) {
    var len = this.opcodes.length;
    if (other.opcodes.length !== len) {
      return false;
    }

    for (var i = 0; i < len; i++) {
      var opcode = this.opcodes[i],
          otherOpcode = other.opcodes[i];
      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
        return false;
      }
    }

    // We know that length is the same between the two arrays because they are directly tied
    // to the opcode behavior above.
    len = this.children.length;
    for (var i = 0; i < len; i++) {
      if (!this.children[i].equals(other.children[i])) {
        return false;
      }
    }

    return true;
  },

  guid: 0,

  compile: function compile(program, options) {
    this.sourceNode = [];
    this.opcodes = [];
    this.children = [];
    this.options = options;
    this.stringParams = options.stringParams;
    this.trackIds = options.trackIds;

    options.blockParams = options.blockParams || [];

    // These changes will propagate to the other compiler components
    var knownHelpers = options.knownHelpers;
    options.knownHelpers = {
      'helperMissing': true,
      'blockHelperMissing': true,
      'each': true,
      'if': true,
      'unless': true,
      'with': true,
      'log': true,
      'lookup': true
    };
    if (knownHelpers) {
      for (var _name in knownHelpers) {
        /* istanbul ignore else */
        if (_name in knownHelpers) {
          this.options.knownHelpers[_name] = knownHelpers[_name];
        }
      }
    }

    return this.accept(program);
  },

  compileProgram: function compileProgram(program) {
    var childCompiler = new this.compiler(),
        // eslint-disable-line new-cap
    result = childCompiler.compile(program, this.options),
        guid = this.guid++;

    this.usePartial = this.usePartial || result.usePartial;

    this.children[guid] = result;
    this.useDepths = this.useDepths || result.useDepths;

    return guid;
  },

  accept: function accept(node) {
    /* istanbul ignore next: Sanity code */
    if (!this[node.type]) {
      throw new _exception2['default']('Unknown type: ' + node.type, node);
    }

    this.sourceNode.unshift(node);
    var ret = this[node.type](node);
    this.sourceNode.shift();
    return ret;
  },

  Program: function Program(program) {
    this.options.blockParams.unshift(program.blockParams);

    var body = program.body,
        bodyLength = body.length;
    for (var i = 0; i < bodyLength; i++) {
      this.accept(body[i]);
    }

    this.options.blockParams.shift();

    this.isSimple = bodyLength === 1;
    this.blockParams = program.blockParams ? program.blockParams.length : 0;

    return this;
  },

  BlockStatement: function BlockStatement(block) {
    transformLiteralToPath(block);

    var program = block.program,
        inverse = block.inverse;

    program = program && this.compileProgram(program);
    inverse = inverse && this.compileProgram(inverse);

    var type = this.classifySexpr(block);

    if (type === 'helper') {
      this.helperSexpr(block, program, inverse);
    } else if (type === 'simple') {
      this.simpleSexpr(block);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('blockValue', block.path.original);
    } else {
      this.ambiguousSexpr(block, program, inverse);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('ambiguousBlockValue');
    }

    this.opcode('append');
  },

  DecoratorBlock: function DecoratorBlock(decorator) {
    var program = decorator.program && this.compileProgram(decorator.program);
    var params = this.setupFullMustacheParams(decorator, program, undefined),
        path = decorator.path;

    this.useDecorators = true;
    this.opcode('registerDecorator', params.length, path.original);
  },

  PartialStatement: function PartialStatement(partial) {
    this.usePartial = true;

    var program = partial.program;
    if (program) {
      program = this.compileProgram(partial.program);
    }

    var params = partial.params;
    if (params.length > 1) {
      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
    } else if (!params.length) {
      if (this.options.explicitPartialContext) {
        this.opcode('pushLiteral', 'undefined');
      } else {
        params.push({ type: 'PathExpression', parts: [], depth: 0 });
      }
    }

    var partialName = partial.name.original,
        isDynamic = partial.name.type === 'SubExpression';
    if (isDynamic) {
      this.accept(partial.name);
    }

    this.setupFullMustacheParams(partial, program, undefined, true);

    var indent = partial.indent || '';
    if (this.options.preventIndent && indent) {
      this.opcode('appendContent', indent);
      indent = '';
    }

    this.opcode('invokePartial', isDynamic, partialName, indent);
    this.opcode('append');
  },
  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
    this.PartialStatement(partialBlock);
  },

  MustacheStatement: function MustacheStatement(mustache) {
    this.SubExpression(mustache);

    if (mustache.escaped && !this.options.noEscape) {
      this.opcode('appendEscaped');
    } else {
      this.opcode('append');
    }
  },
  Decorator: function Decorator(decorator) {
    this.DecoratorBlock(decorator);
  },

  ContentStatement: function ContentStatement(content) {
    if (content.value) {
      this.opcode('appendContent', content.value);
    }
  },

  CommentStatement: function CommentStatement() {},

  SubExpression: function SubExpression(sexpr) {
    transformLiteralToPath(sexpr);
    var type = this.classifySexpr(sexpr);

    if (type === 'simple') {
      this.simpleSexpr(sexpr);
    } else if (type === 'helper') {
      this.helperSexpr(sexpr);
    } else {
      this.ambiguousSexpr(sexpr);
    }
  },
  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
    var path = sexpr.path,
        name = path.parts[0],
        isBlock = program != null || inverse != null;

    this.opcode('getContext', path.depth);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    path.strict = true;
    this.accept(path);

    this.opcode('invokeAmbiguous', name, isBlock);
  },

  simpleSexpr: function simpleSexpr(sexpr) {
    var path = sexpr.path;
    path.strict = true;
    this.accept(path);
    this.opcode('resolvePossibleLambda');
  },

  helperSexpr: function helperSexpr(sexpr, program, inverse) {
    var params = this.setupFullMustacheParams(sexpr, program, inverse),
        path = sexpr.path,
        name = path.parts[0];

    if (this.options.knownHelpers[name]) {
      this.opcode('invokeKnownHelper', params.length, name);
    } else if (this.options.knownHelpersOnly) {
      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
    } else {
      path.strict = true;
      path.falsy = true;

      this.accept(path);
      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
    }
  },

  PathExpression: function PathExpression(path) {
    this.addDepth(path.depth);
    this.opcode('getContext', path.depth);

    var name = path.parts[0],
        scoped = _ast2['default'].helpers.scopedId(path),
        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

    if (blockParamId) {
      this.opcode('lookupBlockParam', blockParamId, path.parts);
    } else if (!name) {
      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
      this.opcode('pushContext');
    } else if (path.data) {
      this.options.data = true;
      this.opcode('lookupData', path.depth, path.parts, path.strict);
    } else {
      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
    }
  },

  StringLiteral: function StringLiteral(string) {
    this.opcode('pushString', string.value);
  },

  NumberLiteral: function NumberLiteral(number) {
    this.opcode('pushLiteral', number.value);
  },

  BooleanLiteral: function BooleanLiteral(bool) {
    this.opcode('pushLiteral', bool.value);
  },

  UndefinedLiteral: function UndefinedLiteral() {
    this.opcode('pushLiteral', 'undefined');
  },

  NullLiteral: function NullLiteral() {
    this.opcode('pushLiteral', 'null');
  },

  Hash: function Hash(hash) {
    var pairs = hash.pairs,
        i = 0,
        l = pairs.length;

    this.opcode('pushHash');

    for (; i < l; i++) {
      this.pushParam(pairs[i].value);
    }
    while (i--) {
      this.opcode('assignToHash', pairs[i].key);
    }
    this.opcode('popHash');
  },

  // HELPERS
  opcode: function opcode(name) {
    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
  },

  addDepth: function addDepth(depth) {
    if (!depth) {
      return;
    }

    this.useDepths = true;
  },

  classifySexpr: function classifySexpr(sexpr) {
    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

    // a mustache is an eligible helper if:
    // * its id is simple (a single part, not `this` or `..`)
    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

    // if a mustache is an eligible helper but not a definite
    // helper, it is ambiguous, and will be resolved in a later
    // pass or at runtime.
    var isEligible = !isBlockParam && (isHelper || isSimple);

    // if ambiguous, we can possibly resolve the ambiguity now
    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
    if (isEligible && !isHelper) {
      var _name2 = sexpr.path.parts[0],
          options = this.options;

      if (options.knownHelpers[_name2]) {
        isHelper = true;
      } else if (options.knownHelpersOnly) {
        isEligible = false;
      }
    }

    if (isHelper) {
      return 'helper';
    } else if (isEligible) {
      return 'ambiguous';
    } else {
      return 'simple';
    }
  },

  pushParams: function pushParams(params) {
    for (var i = 0, l = params.length; i < l; i++) {
      this.pushParam(params[i]);
    }
  },

  pushParam: function pushParam(val) {
    var value = val.value != null ? val.value : val.original || '';

    if (this.stringParams) {
      if (value.replace) {
        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
      }

      if (val.depth) {
        this.addDepth(val.depth);
      }
      this.opcode('getContext', val.depth || 0);
      this.opcode('pushStringParam', value, val.type);

      if (val.type === 'SubExpression') {
        // SubExpressions get evaluated and passed in
        // in string params mode.
        this.accept(val);
      }
    } else {
      if (this.trackIds) {
        var blockParamIndex = undefined;
        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
          blockParamIndex = this.blockParamIndex(val.parts[0]);
        }
        if (blockParamIndex) {
          var blockParamChild = val.parts.slice(1).join('.');
          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
        } else {
          value = val.original || value;
          if (value.replace) {
            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
          }

          this.opcode('pushId', val.type, value);
        }
      }
      this.accept(val);
    }
  },

  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
    var params = sexpr.params;
    this.pushParams(params);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    if (sexpr.hash) {
      this.accept(sexpr.hash);
    } else {
      this.opcode('emptyHash', omitEmpty);
    }

    return params;
  },

  blockParamIndex: function blockParamIndex(name) {
    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
      var blockParams = this.options.blockParams[depth],
          param = blockParams && _utils.indexOf(blockParams, name);
      if (blockParams && param >= 0) {
        return [depth, param];
      }
    }
  }
};

function precompile(input, options, env) {
  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }

  var ast = env.parse(input, options),
      environment = new env.Compiler().compile(ast, options);
  return new env.JavaScriptCompiler().compile(environment, options);
}

function compile(input, options, env) {
  if (options === undefined) options = {};

  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
  }

  options = _utils.extend({}, options);
  if (!('data' in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }

  var compiled = undefined;

  function compileInput() {
    var ast = env.parse(input, options),
        environment = new env.Compiler().compile(ast, options),
        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
    return env.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  function ret(context, execOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled.call(this, context, execOptions);
  }
  ret._setup = function (setupOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._setup(setupOptions);
  };
  ret._child = function (i, data, blockParams, depths) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._child(i, data, blockParams, depths);
  };
  return ret;
}

function argEquals(a, b) {
  if (a === b) {
    return true;
  }

  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
    for (var i = 0; i < a.length; i++) {
      if (!argEquals(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
}

function transformLiteralToPath(sexpr) {
  if (!sexpr.path.parts) {
    var literal = sexpr.path;
    // Casting to string here to make false and 0 literal values play nicely with the rest
    // of the system.
    sexpr.path = {
      type: 'PathExpression',
      data: false,
      depth: 0,
      parts: [literal.original + ''],
      original: literal.original + '',
      loc: literal.loc
    };
  }
}


},{"../exception":233,"../utils":246,"./ast":221}],225:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.SourceLocation = SourceLocation;
exports.id = id;
exports.stripFlags = stripFlags;
exports.stripComment = stripComment;
exports.preparePath = preparePath;
exports.prepareMustache = prepareMustache;
exports.prepareRawBlock = prepareRawBlock;
exports.prepareBlock = prepareBlock;
exports.prepareProgram = prepareProgram;
exports.preparePartialBlock = preparePartialBlock;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

function validateClose(open, close) {
  close = close.path ? close.path.original : close;

  if (open.path.original !== close) {
    var errorNode = { loc: open.path.loc };

    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
  }
}

function SourceLocation(source, locInfo) {
  this.source = source;
  this.start = {
    line: locInfo.first_line,
    column: locInfo.first_column
  };
  this.end = {
    line: locInfo.last_line,
    column: locInfo.last_column
  };
}

function id(token) {
  if (/^\[.*\]$/.test(token)) {
    return token.substr(1, token.length - 2);
  } else {
    return token;
  }
}

function stripFlags(open, close) {
  return {
    open: open.charAt(2) === '~',
    close: close.charAt(close.length - 3) === '~'
  };
}

function stripComment(comment) {
  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
}

function preparePath(data, parts, loc) {
  loc = this.locInfo(loc);

  var original = data ? '@' : '',
      dig = [],
      depth = 0,
      depthString = '';

  for (var i = 0, l = parts.length; i < l; i++) {
    var part = parts[i].part,

    // If we have [] syntax then we do not treat path references as operators,
    // i.e. foo.[this] resolves to approximately context.foo['this']
    isLiteral = parts[i].original !== part;
    original += (parts[i].separator || '') + part;

    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
      if (dig.length > 0) {
        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
      } else if (part === '..') {
        depth++;
        depthString += '../';
      }
    } else {
      dig.push(part);
    }
  }

  return {
    type: 'PathExpression',
    data: data,
    depth: depth,
    parts: dig,
    original: original,
    loc: loc
  };
}

function prepareMustache(path, params, hash, open, strip, locInfo) {
  // Must use charAt to support IE pre-10
  var escapeFlag = open.charAt(3) || open.charAt(2),
      escaped = escapeFlag !== '{' && escapeFlag !== '&';

  var decorator = /\*/.test(open);
  return {
    type: decorator ? 'Decorator' : 'MustacheStatement',
    path: path,
    params: params,
    hash: hash,
    escaped: escaped,
    strip: strip,
    loc: this.locInfo(locInfo)
  };
}

function prepareRawBlock(openRawBlock, contents, close, locInfo) {
  validateClose(openRawBlock, close);

  locInfo = this.locInfo(locInfo);
  var program = {
    type: 'Program',
    body: contents,
    strip: {},
    loc: locInfo
  };

  return {
    type: 'BlockStatement',
    path: openRawBlock.path,
    params: openRawBlock.params,
    hash: openRawBlock.hash,
    program: program,
    openStrip: {},
    inverseStrip: {},
    closeStrip: {},
    loc: locInfo
  };
}

function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
  if (close && close.path) {
    validateClose(openBlock, close);
  }

  var decorator = /\*/.test(openBlock.open);

  program.blockParams = openBlock.blockParams;

  var inverse = undefined,
      inverseStrip = undefined;

  if (inverseAndProgram) {
    if (decorator) {
      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
    }

    if (inverseAndProgram.chain) {
      inverseAndProgram.program.body[0].closeStrip = close.strip;
    }

    inverseStrip = inverseAndProgram.strip;
    inverse = inverseAndProgram.program;
  }

  if (inverted) {
    inverted = inverse;
    inverse = program;
    program = inverted;
  }

  return {
    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
    path: openBlock.path,
    params: openBlock.params,
    hash: openBlock.hash,
    program: program,
    inverse: inverse,
    openStrip: openBlock.strip,
    inverseStrip: inverseStrip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}

function prepareProgram(statements, loc) {
  if (!loc && statements.length) {
    var firstLoc = statements[0].loc,
        lastLoc = statements[statements.length - 1].loc;

    /* istanbul ignore else */
    if (firstLoc && lastLoc) {
      loc = {
        source: firstLoc.source,
        start: {
          line: firstLoc.start.line,
          column: firstLoc.start.column
        },
        end: {
          line: lastLoc.end.line,
          column: lastLoc.end.column
        }
      };
    }
  }

  return {
    type: 'Program',
    body: statements,
    strip: {},
    loc: loc
  };
}

function preparePartialBlock(open, program, close, locInfo) {
  validateClose(open, close);

  return {
    type: 'PartialBlockStatement',
    name: open.path,
    params: open.params,
    hash: open.hash,
    program: program,
    openStrip: open.strip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}


},{"../exception":233}],226:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _base = require('../base');

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

var _utils = require('../utils');

var _codeGen = require('./code-gen');

var _codeGen2 = _interopRequireDefault(_codeGen);

function Literal(value) {
  this.value = value;
}

function JavaScriptCompiler() {}

JavaScriptCompiler.prototype = {
  // PUBLIC API: You can override these methods in a subclass to provide
  // alternative compiled forms for name lookup and buffering semantics
  nameLookup: function nameLookup(parent, name /* , type*/) {
    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
      return [parent, '.', name];
    } else {
      return [parent, '[', JSON.stringify(name), ']'];
    }
  },
  depthedLookup: function depthedLookup(name) {
    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
  },

  compilerInfo: function compilerInfo() {
    var revision = _base.COMPILER_REVISION,
        versions = _base.REVISION_CHANGES[revision];
    return [revision, versions];
  },

  appendToBuffer: function appendToBuffer(source, location, explicit) {
    // Force a source as this simplifies the merge logic.
    if (!_utils.isArray(source)) {
      source = [source];
    }
    source = this.source.wrap(source, location);

    if (this.environment.isSimple) {
      return ['return ', source, ';'];
    } else if (explicit) {
      // This is a case where the buffer operation occurs as a child of another
      // construct, generally braces. We have to explicitly output these buffer
      // operations to ensure that the emitted code goes in the correct location.
      return ['buffer += ', source, ';'];
    } else {
      source.appendToBuffer = true;
      return source;
    }
  },

  initializeBuffer: function initializeBuffer() {
    return this.quotedString('');
  },
  // END PUBLIC API

  compile: function compile(environment, options, context, asObject) {
    this.environment = environment;
    this.options = options;
    this.stringParams = this.options.stringParams;
    this.trackIds = this.options.trackIds;
    this.precompile = !asObject;

    this.name = this.environment.name;
    this.isChild = !!context;
    this.context = context || {
      decorators: [],
      programs: [],
      environments: []
    };

    this.preamble();

    this.stackSlot = 0;
    this.stackVars = [];
    this.aliases = {};
    this.registers = { list: [] };
    this.hashes = [];
    this.compileStack = [];
    this.inlineStack = [];
    this.blockParams = [];

    this.compileChildren(environment, options);

    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

    var opcodes = environment.opcodes,
        opcode = undefined,
        firstLoc = undefined,
        i = undefined,
        l = undefined;

    for (i = 0, l = opcodes.length; i < l; i++) {
      opcode = opcodes[i];

      this.source.currentLocation = opcode.loc;
      firstLoc = firstLoc || opcode.loc;
      this[opcode.opcode].apply(this, opcode.args);
    }

    // Flush any trailing content that might be pending.
    this.source.currentLocation = firstLoc;
    this.pushSource('');

    /* istanbul ignore next */
    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
      throw new _exception2['default']('Compile completed with content left on stack');
    }

    if (!this.decorators.isEmpty()) {
      this.useDecorators = true;

      this.decorators.prepend('var decorators = container.decorators;\n');
      this.decorators.push('return fn;');

      if (asObject) {
        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
      } else {
        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
        this.decorators.push('}\n');
        this.decorators = this.decorators.merge();
      }
    } else {
      this.decorators = undefined;
    }

    var fn = this.createFunctionContext(asObject);
    if (!this.isChild) {
      var ret = {
        compiler: this.compilerInfo(),
        main: fn
      };

      if (this.decorators) {
        ret.main_d = this.decorators; // eslint-disable-line camelcase
        ret.useDecorators = true;
      }

      var _context = this.context;
      var programs = _context.programs;
      var decorators = _context.decorators;

      for (i = 0, l = programs.length; i < l; i++) {
        if (programs[i]) {
          ret[i] = programs[i];
          if (decorators[i]) {
            ret[i + '_d'] = decorators[i];
            ret.useDecorators = true;
          }
        }
      }

      if (this.environment.usePartial) {
        ret.usePartial = true;
      }
      if (this.options.data) {
        ret.useData = true;
      }
      if (this.useDepths) {
        ret.useDepths = true;
      }
      if (this.useBlockParams) {
        ret.useBlockParams = true;
      }
      if (this.options.compat) {
        ret.compat = true;
      }

      if (!asObject) {
        ret.compiler = JSON.stringify(ret.compiler);

        this.source.currentLocation = { start: { line: 1, column: 0 } };
        ret = this.objectLiteral(ret);

        if (options.srcName) {
          ret = ret.toStringWithSourceMap({ file: options.destName });
          ret.map = ret.map && ret.map.toString();
        } else {
          ret = ret.toString();
        }
      } else {
        ret.compilerOptions = this.options;
      }

      return ret;
    } else {
      return fn;
    }
  },

  preamble: function preamble() {
    // track the last context pushed into place to allow skipping the
    // getContext opcode when it would be a noop
    this.lastContext = 0;
    this.source = new _codeGen2['default'](this.options.srcName);
    this.decorators = new _codeGen2['default'](this.options.srcName);
  },

  createFunctionContext: function createFunctionContext(asObject) {
    var varDeclarations = '';

    var locals = this.stackVars.concat(this.registers.list);
    if (locals.length > 0) {
      varDeclarations += ', ' + locals.join(', ');
    }

    // Generate minimizer alias mappings
    //
    // When using true SourceNodes, this will update all references to the given alias
    // as the source nodes are reused in situ. For the non-source node compilation mode,
    // aliases will not be used, but this case is already being run on the client and
    // we aren't concern about minimizing the template size.
    var aliasCount = 0;
    for (var alias in this.aliases) {
      // eslint-disable-line guard-for-in
      var node = this.aliases[alias];

      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
        node.children[0] = 'alias' + aliasCount;
      }
    }

    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

    if (this.useBlockParams || this.useDepths) {
      params.push('blockParams');
    }
    if (this.useDepths) {
      params.push('depths');
    }

    // Perform a second pass over the output to merge content when possible
    var source = this.mergeSource(varDeclarations);

    if (asObject) {
      params.push(source);

      return Function.apply(this, params);
    } else {
      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
    }
  },
  mergeSource: function mergeSource(varDeclarations) {
    var isSimple = this.environment.isSimple,
        appendOnly = !this.forceBuffer,
        appendFirst = undefined,
        sourceSeen = undefined,
        bufferStart = undefined,
        bufferEnd = undefined;
    this.source.each(function (line) {
      if (line.appendToBuffer) {
        if (bufferStart) {
          line.prepend('  + ');
        } else {
          bufferStart = line;
        }
        bufferEnd = line;
      } else {
        if (bufferStart) {
          if (!sourceSeen) {
            appendFirst = true;
          } else {
            bufferStart.prepend('buffer += ');
          }
          bufferEnd.add(';');
          bufferStart = bufferEnd = undefined;
        }

        sourceSeen = true;
        if (!isSimple) {
          appendOnly = false;
        }
      }
    });

    if (appendOnly) {
      if (bufferStart) {
        bufferStart.prepend('return ');
        bufferEnd.add(';');
      } else if (!sourceSeen) {
        this.source.push('return "";');
      }
    } else {
      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

      if (bufferStart) {
        bufferStart.prepend('return buffer + ');
        bufferEnd.add(';');
      } else {
        this.source.push('return buffer;');
      }
    }

    if (varDeclarations) {
      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
    }

    return this.source.merge();
  },

  // [blockValue]
  //
  // On stack, before: hash, inverse, program, value
  // On stack, after: return value of blockHelperMissing
  //
  // The purpose of this opcode is to take a block of the form
  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
  // replace it on the stack with the result of properly
  // invoking blockHelperMissing.
  blockValue: function blockValue(name) {
    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
        params = [this.contextName(0)];
    this.setupHelperArgs(name, 0, params);

    var blockName = this.popStack();
    params.splice(1, 0, blockName);

    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
  },

  // [ambiguousBlockValue]
  //
  // On stack, before: hash, inverse, program, value
  // Compiler value, before: lastHelper=value of last found helper, if any
  // On stack, after, if no lastHelper: same as [blockValue]
  // On stack, after, if lastHelper: value
  ambiguousBlockValue: function ambiguousBlockValue() {
    // We're being a bit cheeky and reusing the options value from the prior exec
    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
        params = [this.contextName(0)];
    this.setupHelperArgs('', 0, params, true);

    this.flushInline();

    var current = this.topStack();
    params.splice(1, 0, current);

    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
  },

  // [appendContent]
  //
  // On stack, before: ...
  // On stack, after: ...
  //
  // Appends the string value of `content` to the current buffer
  appendContent: function appendContent(content) {
    if (this.pendingContent) {
      content = this.pendingContent + content;
    } else {
      this.pendingLocation = this.source.currentLocation;
    }

    this.pendingContent = content;
  },

  // [append]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Coerces `value` to a String and appends it to the current buffer.
  //
  // If `value` is truthy, or 0, it is coerced into a string and appended
  // Otherwise, the empty string is appended
  append: function append() {
    if (this.isInline()) {
      this.replaceStack(function (current) {
        return [' != null ? ', current, ' : ""'];
      });

      this.pushSource(this.appendToBuffer(this.popStack()));
    } else {
      var local = this.popStack();
      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
      if (this.environment.isSimple) {
        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
      }
    }
  },

  // [appendEscaped]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Escape `value` and append it to the buffer
  appendEscaped: function appendEscaped() {
    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
  },

  // [getContext]
  //
  // On stack, before: ...
  // On stack, after: ...
  // Compiler value, after: lastContext=depth
  //
  // Set the value of the `lastContext` compiler value to the depth
  getContext: function getContext(depth) {
    this.lastContext = depth;
  },

  // [pushContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext, ...
  //
  // Pushes the value of the current context onto the stack.
  pushContext: function pushContext() {
    this.pushStackLiteral(this.contextName(this.lastContext));
  },

  // [lookupOnContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext[name], ...
  //
  // Looks up the value of `name` on the current context and pushes
  // it onto the stack.
  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
    var i = 0;

    if (!scoped && this.options.compat && !this.lastContext) {
      // The depthed query is expected to handle the undefined logic for the root level that
      // is implemented below, so we evaluate that directly in compat mode
      this.push(this.depthedLookup(parts[i++]));
    } else {
      this.pushContext();
    }

    this.resolvePath('context', parts, i, falsy, strict);
  },

  // [lookupBlockParam]
  //
  // On stack, before: ...
  // On stack, after: blockParam[name], ...
  //
  // Looks up the value of `parts` on the given block param and pushes
  // it onto the stack.
  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
    this.useBlockParams = true;

    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
    this.resolvePath('context', parts, 1);
  },

  // [lookupData]
  //
  // On stack, before: ...
  // On stack, after: data, ...
  //
  // Push the data lookup operator
  lookupData: function lookupData(depth, parts, strict) {
    if (!depth) {
      this.pushStackLiteral('data');
    } else {
      this.pushStackLiteral('container.data(data, ' + depth + ')');
    }

    this.resolvePath('data', parts, 0, true, strict);
  },

  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
    // istanbul ignore next

    var _this = this;

    if (this.options.strict || this.options.assumeObjects) {
      this.push(strictLookup(this.options.strict && strict, this, parts, type));
      return;
    }

    var len = parts.length;
    for (; i < len; i++) {
      /* eslint-disable no-loop-func */
      this.replaceStack(function (current) {
        var lookup = _this.nameLookup(current, parts[i], type);
        // We want to ensure that zero and false are handled properly if the context (falsy flag)
        // needs to have the special handling for these values.
        if (!falsy) {
          return [' != null ? ', lookup, ' : ', current];
        } else {
          // Otherwise we can use generic falsy handling
          return [' && ', lookup];
        }
      });
      /* eslint-enable no-loop-func */
    }
  },

  // [resolvePossibleLambda]
  //
  // On stack, before: value, ...
  // On stack, after: resolved value, ...
  //
  // If the `value` is a lambda, replace it on the stack by
  // the return value of the lambda
  resolvePossibleLambda: function resolvePossibleLambda() {
    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
  },

  // [pushStringParam]
  //
  // On stack, before: ...
  // On stack, after: string, currentContext, ...
  //
  // This opcode is designed for use in string mode, which
  // provides the string value of a parameter along with its
  // depth rather than resolving it immediately.
  pushStringParam: function pushStringParam(string, type) {
    this.pushContext();
    this.pushString(type);

    // If it's a subexpression, the string result
    // will be pushed after this opcode.
    if (type !== 'SubExpression') {
      if (typeof string === 'string') {
        this.pushString(string);
      } else {
        this.pushStackLiteral(string);
      }
    }
  },

  emptyHash: function emptyHash(omitEmpty) {
    if (this.trackIds) {
      this.push('{}'); // hashIds
    }
    if (this.stringParams) {
      this.push('{}'); // hashContexts
      this.push('{}'); // hashTypes
    }
    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
  },
  pushHash: function pushHash() {
    if (this.hash) {
      this.hashes.push(this.hash);
    }
    this.hash = { values: [], types: [], contexts: [], ids: [] };
  },
  popHash: function popHash() {
    var hash = this.hash;
    this.hash = this.hashes.pop();

    if (this.trackIds) {
      this.push(this.objectLiteral(hash.ids));
    }
    if (this.stringParams) {
      this.push(this.objectLiteral(hash.contexts));
      this.push(this.objectLiteral(hash.types));
    }

    this.push(this.objectLiteral(hash.values));
  },

  // [pushString]
  //
  // On stack, before: ...
  // On stack, after: quotedString(string), ...
  //
  // Push a quoted version of `string` onto the stack
  pushString: function pushString(string) {
    this.pushStackLiteral(this.quotedString(string));
  },

  // [pushLiteral]
  //
  // On stack, before: ...
  // On stack, after: value, ...
  //
  // Pushes a value onto the stack. This operation prevents
  // the compiler from creating a temporary variable to hold
  // it.
  pushLiteral: function pushLiteral(value) {
    this.pushStackLiteral(value);
  },

  // [pushProgram]
  //
  // On stack, before: ...
  // On stack, after: program(guid), ...
  //
  // Push a program expression onto the stack. This takes
  // a compile-time guid and converts it into a runtime-accessible
  // expression.
  pushProgram: function pushProgram(guid) {
    if (guid != null) {
      this.pushStackLiteral(this.programExpression(guid));
    } else {
      this.pushStackLiteral(null);
    }
  },

  // [registerDecorator]
  //
  // On stack, before: hash, program, params..., ...
  // On stack, after: ...
  //
  // Pops off the decorator's parameters, invokes the decorator,
  // and inserts the decorator into the decorators list.
  registerDecorator: function registerDecorator(paramSize, name) {
    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
        options = this.setupHelperArgs(name, paramSize);

    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
  },

  // [invokeHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // Pops off the helper's parameters, invokes the helper,
  // and pushes the helper's return value onto the stack.
  //
  // If the helper is not found, `helperMissing` is called.
  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
    var nonHelper = this.popStack(),
        helper = this.setupHelper(paramSize, name),
        simple = isSimple ? [helper.name, ' || '] : '';

    var lookup = ['('].concat(simple, nonHelper);
    if (!this.options.strict) {
      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
    }
    lookup.push(')');

    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
  },

  // [invokeKnownHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // This operation is used when the helper is known to exist,
  // so a `helperMissing` fallback is not required.
  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
    var helper = this.setupHelper(paramSize, name);
    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
  },

  // [invokeAmbiguous]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of disambiguation
  //
  // This operation is used when an expression like `{{foo}}`
  // is provided, but we don't know at compile-time whether it
  // is a helper or a path.
  //
  // This operation emits more code than the other options,
  // and can be avoided by passing the `knownHelpers` and
  // `knownHelpersOnly` flags at compile-time.
  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
    this.useRegister('helper');

    var nonHelper = this.popStack();

    this.emptyHash();
    var helper = this.setupHelper(0, name, helperCall);

    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
    if (!this.options.strict) {
      lookup[0] = '(helper = ';
      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
    }

    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
  },

  // [invokePartial]
  //
  // On stack, before: context, ...
  // On stack after: result of partial invocation
  //
  // This operation pops off a context, invokes a partial with that context,
  // and pushes the result of the invocation back.
  invokePartial: function invokePartial(isDynamic, name, indent) {
    var params = [],
        options = this.setupParams(name, 1, params);

    if (isDynamic) {
      name = this.popStack();
      delete options.name;
    }

    if (indent) {
      options.indent = JSON.stringify(indent);
    }
    options.helpers = 'helpers';
    options.partials = 'partials';
    options.decorators = 'container.decorators';

    if (!isDynamic) {
      params.unshift(this.nameLookup('partials', name, 'partial'));
    } else {
      params.unshift(name);
    }

    if (this.options.compat) {
      options.depths = 'depths';
    }
    options = this.objectLiteral(options);
    params.push(options);

    this.push(this.source.functionCall('container.invokePartial', '', params));
  },

  // [assignToHash]
  //
  // On stack, before: value, ..., hash, ...
  // On stack, after: ..., hash, ...
  //
  // Pops a value off the stack and assigns it to the current hash
  assignToHash: function assignToHash(key) {
    var value = this.popStack(),
        context = undefined,
        type = undefined,
        id = undefined;

    if (this.trackIds) {
      id = this.popStack();
    }
    if (this.stringParams) {
      type = this.popStack();
      context = this.popStack();
    }

    var hash = this.hash;
    if (context) {
      hash.contexts[key] = context;
    }
    if (type) {
      hash.types[key] = type;
    }
    if (id) {
      hash.ids[key] = id;
    }
    hash.values[key] = value;
  },

  pushId: function pushId(type, name, child) {
    if (type === 'BlockParam') {
      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
    } else if (type === 'PathExpression') {
      this.pushString(name);
    } else if (type === 'SubExpression') {
      this.pushStackLiteral('true');
    } else {
      this.pushStackLiteral('null');
    }
  },

  // HELPERS

  compiler: JavaScriptCompiler,

  compileChildren: function compileChildren(environment, options) {
    var children = environment.children,
        child = undefined,
        compiler = undefined;

    for (var i = 0, l = children.length; i < l; i++) {
      child = children[i];
      compiler = new this.compiler(); // eslint-disable-line new-cap

      var existing = this.matchExistingProgram(child);

      if (existing == null) {
        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
        var index = this.context.programs.length;
        child.index = index;
        child.name = 'program' + index;
        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
        this.context.decorators[index] = compiler.decorators;
        this.context.environments[index] = child;

        this.useDepths = this.useDepths || compiler.useDepths;
        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
        child.useDepths = this.useDepths;
        child.useBlockParams = this.useBlockParams;
      } else {
        child.index = existing.index;
        child.name = 'program' + existing.index;

        this.useDepths = this.useDepths || existing.useDepths;
        this.useBlockParams = this.useBlockParams || existing.useBlockParams;
      }
    }
  },
  matchExistingProgram: function matchExistingProgram(child) {
    for (var i = 0, len = this.context.environments.length; i < len; i++) {
      var environment = this.context.environments[i];
      if (environment && environment.equals(child)) {
        return environment;
      }
    }
  },

  programExpression: function programExpression(guid) {
    var child = this.environment.children[guid],
        programParams = [child.index, 'data', child.blockParams];

    if (this.useBlockParams || this.useDepths) {
      programParams.push('blockParams');
    }
    if (this.useDepths) {
      programParams.push('depths');
    }

    return 'container.program(' + programParams.join(', ') + ')';
  },

  useRegister: function useRegister(name) {
    if (!this.registers[name]) {
      this.registers[name] = true;
      this.registers.list.push(name);
    }
  },

  push: function push(expr) {
    if (!(expr instanceof Literal)) {
      expr = this.source.wrap(expr);
    }

    this.inlineStack.push(expr);
    return expr;
  },

  pushStackLiteral: function pushStackLiteral(item) {
    this.push(new Literal(item));
  },

  pushSource: function pushSource(source) {
    if (this.pendingContent) {
      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
      this.pendingContent = undefined;
    }

    if (source) {
      this.source.push(source);
    }
  },

  replaceStack: function replaceStack(callback) {
    var prefix = ['('],
        stack = undefined,
        createdStack = undefined,
        usedLiteral = undefined;

    /* istanbul ignore next */
    if (!this.isInline()) {
      throw new _exception2['default']('replaceStack on non-inline');
    }

    // We want to merge the inline statement into the replacement statement via ','
    var top = this.popStack(true);

    if (top instanceof Literal) {
      // Literals do not need to be inlined
      stack = [top.value];
      prefix = ['(', stack];
      usedLiteral = true;
    } else {
      // Get or create the current stack name for use by the inline
      createdStack = true;
      var _name = this.incrStack();

      prefix = ['((', this.push(_name), ' = ', top, ')'];
      stack = this.topStack();
    }

    var item = callback.call(this, stack);

    if (!usedLiteral) {
      this.popStack();
    }
    if (createdStack) {
      this.stackSlot--;
    }
    this.push(prefix.concat(item, ')'));
  },

  incrStack: function incrStack() {
    this.stackSlot++;
    if (this.stackSlot > this.stackVars.length) {
      this.stackVars.push('stack' + this.stackSlot);
    }
    return this.topStackName();
  },
  topStackName: function topStackName() {
    return 'stack' + this.stackSlot;
  },
  flushInline: function flushInline() {
    var inlineStack = this.inlineStack;
    this.inlineStack = [];
    for (var i = 0, len = inlineStack.length; i < len; i++) {
      var entry = inlineStack[i];
      /* istanbul ignore if */
      if (entry instanceof Literal) {
        this.compileStack.push(entry);
      } else {
        var stack = this.incrStack();
        this.pushSource([stack, ' = ', entry, ';']);
        this.compileStack.push(stack);
      }
    }
  },
  isInline: function isInline() {
    return this.inlineStack.length;
  },

  popStack: function popStack(wrapped) {
    var inline = this.isInline(),
        item = (inline ? this.inlineStack : this.compileStack).pop();

    if (!wrapped && item instanceof Literal) {
      return item.value;
    } else {
      if (!inline) {
        /* istanbul ignore next */
        if (!this.stackSlot) {
          throw new _exception2['default']('Invalid stack pop');
        }
        this.stackSlot--;
      }
      return item;
    }
  },

  topStack: function topStack() {
    var stack = this.isInline() ? this.inlineStack : this.compileStack,
        item = stack[stack.length - 1];

    /* istanbul ignore if */
    if (item instanceof Literal) {
      return item.value;
    } else {
      return item;
    }
  },

  contextName: function contextName(context) {
    if (this.useDepths && context) {
      return 'depths[' + context + ']';
    } else {
      return 'depth' + context;
    }
  },

  quotedString: function quotedString(str) {
    return this.source.quotedString(str);
  },

  objectLiteral: function objectLiteral(obj) {
    return this.source.objectLiteral(obj);
  },

  aliasable: function aliasable(name) {
    var ret = this.aliases[name];
    if (ret) {
      ret.referenceCount++;
      return ret;
    }

    ret = this.aliases[name] = this.source.wrap(name);
    ret.aliasable = true;
    ret.referenceCount = 1;

    return ret;
  },

  setupHelper: function setupHelper(paramSize, name, blockHelper) {
    var params = [],
        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
    var foundHelper = this.nameLookup('helpers', name, 'helper'),
        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : (container.nullContext || {})');

    return {
      params: params,
      paramsInit: paramsInit,
      name: foundHelper,
      callParams: [callContext].concat(params)
    };
  },

  setupParams: function setupParams(helper, paramSize, params) {
    var options = {},
        contexts = [],
        types = [],
        ids = [],
        objectArgs = !params,
        param = undefined;

    if (objectArgs) {
      params = [];
    }

    options.name = this.quotedString(helper);
    options.hash = this.popStack();

    if (this.trackIds) {
      options.hashIds = this.popStack();
    }
    if (this.stringParams) {
      options.hashTypes = this.popStack();
      options.hashContexts = this.popStack();
    }

    var inverse = this.popStack(),
        program = this.popStack();

    // Avoid setting fn and inverse if neither are set. This allows
    // helpers to do a check for `if (options.fn)`
    if (program || inverse) {
      options.fn = program || 'container.noop';
      options.inverse = inverse || 'container.noop';
    }

    // The parameters go on to the stack in order (making sure that they are evaluated in order)
    // so we need to pop them off the stack in reverse order
    var i = paramSize;
    while (i--) {
      param = this.popStack();
      params[i] = param;

      if (this.trackIds) {
        ids[i] = this.popStack();
      }
      if (this.stringParams) {
        types[i] = this.popStack();
        contexts[i] = this.popStack();
      }
    }

    if (objectArgs) {
      options.args = this.source.generateArray(params);
    }

    if (this.trackIds) {
      options.ids = this.source.generateArray(ids);
    }
    if (this.stringParams) {
      options.types = this.source.generateArray(types);
      options.contexts = this.source.generateArray(contexts);
    }

    if (this.options.data) {
      options.data = 'data';
    }
    if (this.useBlockParams) {
      options.blockParams = 'blockParams';
    }
    return options;
  },

  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
    var options = this.setupParams(helper, paramSize, params);
    options = this.objectLiteral(options);
    if (useRegister) {
      this.useRegister('options');
      params.push('options');
      return ['options=', options];
    } else if (params) {
      params.push(options);
      return '';
    } else {
      return options;
    }
  }
};

(function () {
  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for (var i = 0, l = reservedWords.length; i < l; i++) {
    compilerWords[reservedWords[i]] = true;
  }
})();

JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
};

function strictLookup(requireTerminal, compiler, parts, type) {
  var stack = compiler.popStack(),
      i = 0,
      len = parts.length;
  if (requireTerminal) {
    len--;
  }

  for (; i < len; i++) {
    stack = compiler.nameLookup(stack, parts[i], type);
  }

  if (requireTerminal) {
    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
  } else {
    return stack;
  }
}

exports['default'] = JavaScriptCompiler;
module.exports = exports['default'];


},{"../base":220,"../exception":233,"../utils":246,"./code-gen":223}],227:[function(require,module,exports){
// File ignored in coverage tests via setting in .istanbul.yml
/* Jison generated parser */
"use strict";

exports.__esModule = true;
var handlebars = (function () {
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
        /**/) {

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0 - 1];
                    break;
                case 2:
                    this.$ = yy.prepareProgram($$[$0]);
                    break;
                case 3:
                    this.$ = $$[$0];
                    break;
                case 4:
                    this.$ = $$[$0];
                    break;
                case 5:
                    this.$ = $$[$0];
                    break;
                case 6:
                    this.$ = $$[$0];
                    break;
                case 7:
                    this.$ = $$[$0];
                    break;
                case 8:
                    this.$ = $$[$0];
                    break;
                case 9:
                    this.$ = {
                        type: 'CommentStatement',
                        value: yy.stripComment($$[$0]),
                        strip: yy.stripFlags($$[$0], $$[$0]),
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 10:
                    this.$ = {
                        type: 'ContentStatement',
                        original: $$[$0],
                        value: $$[$0],
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 11:
                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 12:
                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
                    break;
                case 13:
                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
                    break;
                case 14:
                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
                    break;
                case 15:
                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 16:
                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 17:
                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 18:
                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
                    break;
                case 19:
                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
                    program.chained = true;

                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

                    break;
                case 20:
                    this.$ = $$[$0];
                    break;
                case 21:
                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
                    break;
                case 22:
                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                    break;
                case 23:
                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                    break;
                case 24:
                    this.$ = {
                        type: 'PartialStatement',
                        name: $$[$0 - 3],
                        params: $$[$0 - 2],
                        hash: $$[$0 - 1],
                        indent: '',
                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 25:
                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 26:
                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
                    break;
                case 27:
                    this.$ = $$[$0];
                    break;
                case 28:
                    this.$ = $$[$0];
                    break;
                case 29:
                    this.$ = {
                        type: 'SubExpression',
                        path: $$[$0 - 3],
                        params: $$[$0 - 2],
                        hash: $$[$0 - 1],
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 30:
                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 31:
                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 32:
                    this.$ = yy.id($$[$0 - 1]);
                    break;
                case 33:
                    this.$ = $$[$0];
                    break;
                case 34:
                    this.$ = $$[$0];
                    break;
                case 35:
                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 36:
                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
                    break;
                case 37:
                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
                    break;
                case 38:
                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
                    break;
                case 39:
                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
                    break;
                case 40:
                    this.$ = $$[$0];
                    break;
                case 41:
                    this.$ = $$[$0];
                    break;
                case 42:
                    this.$ = yy.preparePath(true, $$[$0], this._$);
                    break;
                case 43:
                    this.$ = yy.preparePath(false, $$[$0], this._$);
                    break;
                case 44:
                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
                    break;
                case 45:
                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
                    break;
                case 46:
                    this.$ = [];
                    break;
                case 47:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 48:
                    this.$ = [$$[$0]];
                    break;
                case 49:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 50:
                    this.$ = [];
                    break;
                case 51:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 58:
                    this.$ = [];
                    break;
                case 59:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 64:
                    this.$ = [];
                    break;
                case 65:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 70:
                    this.$ = [];
                    break;
                case 71:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 78:
                    this.$ = [];
                    break;
                case 79:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 82:
                    this.$ = [];
                    break;
                case 83:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 86:
                    this.$ = [];
                    break;
                case 87:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 90:
                    this.$ = [];
                    break;
                case 91:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 94:
                    this.$ = [];
                    break;
                case 95:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 98:
                    this.$ = [$$[$0]];
                    break;
                case 99:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 100:
                    this.$ = [$$[$0]];
                    break;
                case 101:
                    $$[$0 - 1].push($$[$0]);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
        parseError: function parseError(str, hash) {
            throw new Error(str);
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = "",
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || 1;
                if (typeof token !== "number") {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == "undefined") {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === "undefined" || !action.length || !action[0]) {
                    var errStr = "";
                    if (!recovering) {
                        expected = [];
                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
                            expected.push("'" + this.terminals_[p] + "'");
                        }
                        if (this.lexer.showPosition) {
                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        } else {
                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                        }
                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
                    }
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) recovering--;
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                        if (typeof r !== "undefined") {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };
    /* Jison generated lexer */
    var lexer = (function () {
        var lexer = { EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },
            setInput: function setInput(input) {
                this._input = input;
                this._more = this._less = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
                if (this.options.ranges) this.yylloc.range = [0, 0];
                this.offset = 0;
                return this;
            },
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) this.yylloc.range[1]++;

                this._input = this._input.slice(1);
                return ch;
            },
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) this.yylineno -= lines.length - 1;
                var r = this.yylloc.range;

                this.yylloc = { first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                return this;
            },
            more: function more() {
                this._more = true;
                return this;
            },
            less: function less(n) {
                this.unput(this.match.slice(n));
            },
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) this.done = true;

                var token, match, tempMatch, index, col, lines;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (!this.options.flex) break;
                    }
                }
                if (match) {
                    lines = match[0].match(/(?:\r\n?|\n).*/g);
                    if (lines) this.yylineno += lines.length;
                    this.yylloc = { first_line: this.yylloc.last_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.last_column,
                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
                    this.yytext += match[0];
                    this.match += match[0];
                    this.matches = match;
                    this.yyleng = this.yytext.length;
                    if (this.options.ranges) {
                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
                    }
                    this._more = false;
                    this._input = this._input.slice(match[0].length);
                    this.matched += match[0];
                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
                    if (this.done && this._input) this.done = false;
                    if (token) return token;else return;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
                }
            },
            lex: function lex() {
                var r = this.next();
                if (typeof r !== 'undefined') {
                    return r;
                } else {
                    return this.lex();
                }
            },
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            popState: function popState() {
                return this.conditionStack.pop();
            },
            _currentRules: function _currentRules() {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            },
            topState: function topState() {
                return this.conditionStack[this.conditionStack.length - 2];
            },
            pushState: function begin(condition) {
                this.begin(condition);
            } };
        lexer.options = {};
        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
        /**/) {

            function strip(start, end) {
                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
            }

            var YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
                case 0:
                    if (yy_.yytext.slice(-2) === "\\\\") {
                        strip(0, 1);
                        this.begin("mu");
                    } else if (yy_.yytext.slice(-1) === "\\") {
                        strip(0, 1);
                        this.begin("emu");
                    } else {
                        this.begin("mu");
                    }
                    if (yy_.yytext) return 15;

                    break;
                case 1:
                    return 15;
                    break;
                case 2:
                    this.popState();
                    return 15;

                    break;
                case 3:
                    this.begin('raw');return 15;
                    break;
                case 4:
                    this.popState();
                    // Should be using `this.topState()` below, but it currently
                    // returns the second top instead of the first top. Opened an
                    // issue about it at https://github.com/zaach/jison/issues/291
                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
                        return 15;
                    } else {
                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
                        return 'END_RAW_BLOCK';
                    }

                    break;
                case 5:
                    return 15;
                    break;
                case 6:
                    this.popState();
                    return 14;

                    break;
                case 7:
                    return 65;
                    break;
                case 8:
                    return 68;
                    break;
                case 9:
                    return 19;
                    break;
                case 10:
                    this.popState();
                    this.begin('raw');
                    return 23;

                    break;
                case 11:
                    return 55;
                    break;
                case 12:
                    return 60;
                    break;
                case 13:
                    return 29;
                    break;
                case 14:
                    return 47;
                    break;
                case 15:
                    this.popState();return 44;
                    break;
                case 16:
                    this.popState();return 44;
                    break;
                case 17:
                    return 34;
                    break;
                case 18:
                    return 39;
                    break;
                case 19:
                    return 51;
                    break;
                case 20:
                    return 48;
                    break;
                case 21:
                    this.unput(yy_.yytext);
                    this.popState();
                    this.begin('com');

                    break;
                case 22:
                    this.popState();
                    return 14;

                    break;
                case 23:
                    return 48;
                    break;
                case 24:
                    return 73;
                    break;
                case 25:
                    return 72;
                    break;
                case 26:
                    return 72;
                    break;
                case 27:
                    return 87;
                    break;
                case 28:
                    // ignore whitespace
                    break;
                case 29:
                    this.popState();return 54;
                    break;
                case 30:
                    this.popState();return 33;
                    break;
                case 31:
                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
                    break;
                case 32:
                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
                    break;
                case 33:
                    return 85;
                    break;
                case 34:
                    return 82;
                    break;
                case 35:
                    return 82;
                    break;
                case 36:
                    return 83;
                    break;
                case 37:
                    return 84;
                    break;
                case 38:
                    return 81;
                    break;
                case 39:
                    return 75;
                    break;
                case 40:
                    return 77;
                    break;
                case 41:
                    return 72;
                    break;
                case 42:
                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
                    break;
                case 43:
                    return 'INVALID';
                    break;
                case 44:
                    return 5;
                    break;
            }
        };
        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
})();exports["default"] = handlebars;
module.exports = exports["default"];


},{}],228:[function(require,module,exports){
/* eslint-disable new-cap */
'use strict';

exports.__esModule = true;
exports.print = print;
exports.PrintVisitor = PrintVisitor;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _visitor = require('./visitor');

var _visitor2 = _interopRequireDefault(_visitor);

function print(ast) {
  return new PrintVisitor().accept(ast);
}

function PrintVisitor() {
  this.padding = 0;
}

PrintVisitor.prototype = new _visitor2['default']();

PrintVisitor.prototype.pad = function (string) {
  var out = '';

  for (var i = 0, l = this.padding; i < l; i++) {
    out += '  ';
  }

  out += string + '\n';
  return out;
};

PrintVisitor.prototype.Program = function (program) {
  var out = '',
      body = program.body,
      i = undefined,
      l = undefined;

  if (program.blockParams) {
    var blockParams = 'BLOCK PARAMS: [';
    for (i = 0, l = program.blockParams.length; i < l; i++) {
      blockParams += ' ' + program.blockParams[i];
    }
    blockParams += ' ]';
    out += this.pad(blockParams);
  }

  for (i = 0, l = body.length; i < l; i++) {
    out += this.accept(body[i]);
  }

  this.padding--;

  return out;
};

PrintVisitor.prototype.MustacheStatement = function (mustache) {
  return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');
};
PrintVisitor.prototype.Decorator = function (mustache) {
  return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');
};

PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function (block) {
  var out = '';

  out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');
  this.padding++;
  out += this.pad(this.SubExpression(block));
  if (block.program) {
    out += this.pad('PROGRAM:');
    this.padding++;
    out += this.accept(block.program);
    this.padding--;
  }
  if (block.inverse) {
    if (block.program) {
      this.padding++;
    }
    out += this.pad('{{^}}');
    this.padding++;
    out += this.accept(block.inverse);
    this.padding--;
    if (block.program) {
      this.padding--;
    }
  }
  this.padding--;

  return out;
};

PrintVisitor.prototype.PartialStatement = function (partial) {
  var content = 'PARTIAL:' + partial.name.original;
  if (partial.params[0]) {
    content += ' ' + this.accept(partial.params[0]);
  }
  if (partial.hash) {
    content += ' ' + this.accept(partial.hash);
  }
  return this.pad('{{> ' + content + ' }}');
};
PrintVisitor.prototype.PartialBlockStatement = function (partial) {
  var content = 'PARTIAL BLOCK:' + partial.name.original;
  if (partial.params[0]) {
    content += ' ' + this.accept(partial.params[0]);
  }
  if (partial.hash) {
    content += ' ' + this.accept(partial.hash);
  }

  content += ' ' + this.pad('PROGRAM:');
  this.padding++;
  content += this.accept(partial.program);
  this.padding--;

  return this.pad('{{> ' + content + ' }}');
};

PrintVisitor.prototype.ContentStatement = function (content) {
  return this.pad("CONTENT[ '" + content.value + "' ]");
};

PrintVisitor.prototype.CommentStatement = function (comment) {
  return this.pad("{{! '" + comment.value + "' }}");
};

PrintVisitor.prototype.SubExpression = function (sexpr) {
  var params = sexpr.params,
      paramStrings = [],
      hash = undefined;

  for (var i = 0, l = params.length; i < l; i++) {
    paramStrings.push(this.accept(params[i]));
  }

  params = '[' + paramStrings.join(', ') + ']';

  hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';

  return this.accept(sexpr.path) + ' ' + params + hash;
};

PrintVisitor.prototype.PathExpression = function (id) {
  var path = id.parts.join('/');
  return (id.data ? '@' : '') + 'PATH:' + path;
};

PrintVisitor.prototype.StringLiteral = function (string) {
  return '"' + string.value + '"';
};

PrintVisitor.prototype.NumberLiteral = function (number) {
  return 'NUMBER{' + number.value + '}';
};

PrintVisitor.prototype.BooleanLiteral = function (bool) {
  return 'BOOLEAN{' + bool.value + '}';
};

PrintVisitor.prototype.UndefinedLiteral = function () {
  return 'UNDEFINED';
};

PrintVisitor.prototype.NullLiteral = function () {
  return 'NULL';
};

PrintVisitor.prototype.Hash = function (hash) {
  var pairs = hash.pairs,
      joinedPairs = [];

  for (var i = 0, l = pairs.length; i < l; i++) {
    joinedPairs.push(this.accept(pairs[i]));
  }

  return 'HASH{' + joinedPairs.join(', ') + '}';
};
PrintVisitor.prototype.HashPair = function (pair) {
  return pair.key + '=' + this.accept(pair.value);
};
/* eslint-enable new-cap */


},{"./visitor":229}],229:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

function Visitor() {
  this.parents = [];
}

Visitor.prototype = {
  constructor: Visitor,
  mutating: false,

  // Visits a given value. If mutating, will replace the value if necessary.
  acceptKey: function acceptKey(node, name) {
    var value = this.accept(node[name]);
    if (this.mutating) {
      // Hacky sanity check: This may have a few false positives for type for the helper
      // methods but will generally do the right thing without a lot of overhead.
      if (value && !Visitor.prototype[value.type]) {
        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
      }
      node[name] = value;
    }
  },

  // Performs an accept operation with added sanity check to ensure
  // required keys are not removed.
  acceptRequired: function acceptRequired(node, name) {
    this.acceptKey(node, name);

    if (!node[name]) {
      throw new _exception2['default'](node.type + ' requires ' + name);
    }
  },

  // Traverses a given array. If mutating, empty respnses will be removed
  // for child elements.
  acceptArray: function acceptArray(array) {
    for (var i = 0, l = array.length; i < l; i++) {
      this.acceptKey(array, i);

      if (!array[i]) {
        array.splice(i, 1);
        i--;
        l--;
      }
    }
  },

  accept: function accept(object) {
    if (!object) {
      return;
    }

    /* istanbul ignore next: Sanity code */
    if (!this[object.type]) {
      throw new _exception2['default']('Unknown type: ' + object.type, object);
    }

    if (this.current) {
      this.parents.unshift(this.current);
    }
    this.current = object;

    var ret = this[object.type](object);

    this.current = this.parents.shift();

    if (!this.mutating || ret) {
      return ret;
    } else if (ret !== false) {
      return object;
    }
  },

  Program: function Program(program) {
    this.acceptArray(program.body);
  },

  MustacheStatement: visitSubExpression,
  Decorator: visitSubExpression,

  BlockStatement: visitBlock,
  DecoratorBlock: visitBlock,

  PartialStatement: visitPartial,
  PartialBlockStatement: function PartialBlockStatement(partial) {
    visitPartial.call(this, partial);

    this.acceptKey(partial, 'program');
  },

  ContentStatement: function ContentStatement() /* content */{},
  CommentStatement: function CommentStatement() /* comment */{},

  SubExpression: visitSubExpression,

  PathExpression: function PathExpression() /* path */{},

  StringLiteral: function StringLiteral() /* string */{},
  NumberLiteral: function NumberLiteral() /* number */{},
  BooleanLiteral: function BooleanLiteral() /* bool */{},
  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
  NullLiteral: function NullLiteral() /* literal */{},

  Hash: function Hash(hash) {
    this.acceptArray(hash.pairs);
  },
  HashPair: function HashPair(pair) {
    this.acceptRequired(pair, 'value');
  }
};

function visitSubExpression(mustache) {
  this.acceptRequired(mustache, 'path');
  this.acceptArray(mustache.params);
  this.acceptKey(mustache, 'hash');
}
function visitBlock(block) {
  visitSubExpression.call(this, block);

  this.acceptKey(block, 'program');
  this.acceptKey(block, 'inverse');
}
function visitPartial(partial) {
  this.acceptRequired(partial, 'name');
  this.acceptArray(partial.params);
  this.acceptKey(partial, 'hash');
}

exports['default'] = Visitor;
module.exports = exports['default'];


},{"../exception":233}],230:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _visitor = require('./visitor');

var _visitor2 = _interopRequireDefault(_visitor);

function WhitespaceControl() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  this.options = options;
}
WhitespaceControl.prototype = new _visitor2['default']();

WhitespaceControl.prototype.Program = function (program) {
  var doStandalone = !this.options.ignoreStandalone;

  var isRoot = !this.isRootSeen;
  this.isRootSeen = true;

  var body = program.body;
  for (var i = 0, l = body.length; i < l; i++) {
    var current = body[i],
        strip = this.accept(current);

    if (!strip) {
      continue;
    }

    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
        openStandalone = strip.openStandalone && _isPrevWhitespace,
        closeStandalone = strip.closeStandalone && _isNextWhitespace,
        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

    if (strip.close) {
      omitRight(body, i, true);
    }
    if (strip.open) {
      omitLeft(body, i, true);
    }

    if (doStandalone && inlineStandalone) {
      omitRight(body, i);

      if (omitLeft(body, i)) {
        // If we are on a standalone node, save the indent info for partials
        if (current.type === 'PartialStatement') {
          // Pull out the whitespace from the final line
          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
        }
      }
    }
    if (doStandalone && openStandalone) {
      omitRight((current.program || current.inverse).body);

      // Strip out the previous content node if it's whitespace only
      omitLeft(body, i);
    }
    if (doStandalone && closeStandalone) {
      // Always strip the next node
      omitRight(body, i);

      omitLeft((current.inverse || current.program).body);
    }
  }

  return program;
};

WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
  this.accept(block.program);
  this.accept(block.inverse);

  // Find the inverse program that is involed with whitespace stripping.
  var program = block.program || block.inverse,
      inverse = block.program && block.inverse,
      firstInverse = inverse,
      lastInverse = inverse;

  if (inverse && inverse.chained) {
    firstInverse = inverse.body[0].program;

    // Walk the inverse chain to find the last inverse that is actually in the chain.
    while (lastInverse.chained) {
      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
    }
  }

  var strip = {
    open: block.openStrip.open,
    close: block.closeStrip.close,

    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
    // so our parent can determine if we actually are standalone
    openStandalone: isNextWhitespace(program.body),
    closeStandalone: isPrevWhitespace((firstInverse || program).body)
  };

  if (block.openStrip.close) {
    omitRight(program.body, null, true);
  }

  if (inverse) {
    var inverseStrip = block.inverseStrip;

    if (inverseStrip.open) {
      omitLeft(program.body, null, true);
    }

    if (inverseStrip.close) {
      omitRight(firstInverse.body, null, true);
    }
    if (block.closeStrip.open) {
      omitLeft(lastInverse.body, null, true);
    }

    // Find standalone else statments
    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
      omitLeft(program.body);
      omitRight(firstInverse.body);
    }
  } else if (block.closeStrip.open) {
    omitLeft(program.body, null, true);
  }

  return strip;
};

WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
  return mustache.strip;
};

WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
  /* istanbul ignore next */
  var strip = node.strip || {};
  return {
    inlineStandalone: true,
    open: strip.open,
    close: strip.close
  };
};

function isPrevWhitespace(body, i, isRoot) {
  if (i === undefined) {
    i = body.length;
  }

  // Nodes that end with newlines are considered whitespace (but are special
  // cased for strip operations)
  var prev = body[i - 1],
      sibling = body[i - 2];
  if (!prev) {
    return isRoot;
  }

  if (prev.type === 'ContentStatement') {
    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
  }
}
function isNextWhitespace(body, i, isRoot) {
  if (i === undefined) {
    i = -1;
  }

  var next = body[i + 1],
      sibling = body[i + 2];
  if (!next) {
    return isRoot;
  }

  if (next.type === 'ContentStatement') {
    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
  }
}

// Marks the node to the right of the position as omitted.
// I.e. {{foo}}' ' will mark the ' ' node as omitted.
//
// If i is undefined, then the first child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
function omitRight(body, i, multiple) {
  var current = body[i == null ? 0 : i + 1];
  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
    return;
  }

  var original = current.value;
  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
  current.rightStripped = current.value !== original;
}

// Marks the node to the left of the position as omitted.
// I.e. ' '{{foo}} will mark the ' ' node as omitted.
//
// If i is undefined then the last child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
function omitLeft(body, i, multiple) {
  var current = body[i == null ? body.length - 1 : i - 1];
  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
    return;
  }

  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
  var original = current.value;
  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
  current.leftStripped = current.value !== original;
  return current.leftStripped;
}

exports['default'] = WhitespaceControl;
module.exports = exports['default'];


},{"./visitor":229}],231:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _decoratorsInline = require('./decorators/inline');

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}


},{"./decorators/inline":232}],232:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

exports['default'] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;
    if (!props.partials) {
      props.partials = {};
      ret = function (context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;

    return ret;
  });
};

module.exports = exports['default'];


},{"../utils":246}],233:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      column = undefined;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  /* istanbul ignore else */
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line;

      // Work around issue under safari where we can't directly set the column value
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
      } else {
        this.column = column;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();

exports['default'] = Exception;
module.exports = exports['default'];


},{}],234:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _helpersBlockHelperMissing = require('./helpers/block-helper-missing');

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = require('./helpers/each');

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = require('./helpers/helper-missing');

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = require('./helpers/if');

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = require('./helpers/log');

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = require('./helpers/lookup');

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = require('./helpers/with');

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);
  _helpersEach2['default'](instance);
  _helpersHelperMissing2['default'](instance);
  _helpersIf2['default'](instance);
  _helpersLog2['default'](instance);
  _helpersLookup2['default'](instance);
  _helpersWith2['default'](instance);
}


},{"./helpers/block-helper-missing":235,"./helpers/each":236,"./helpers/helper-missing":237,"./helpers/if":238,"./helpers/log":239,"./helpers/lookup":240,"./helpers/with":241}],235:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

exports['default'] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = { data: data };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];


},{"../utils":246}],236:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = require('../utils');

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && typeof context === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else {
        var priorKey = undefined;

        for (var key in context) {
          if (context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey !== undefined) {
          execIteration(priorKey, i - 1, true);
        }
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];


},{"../exception":233,"../utils":246}],237:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('helperMissing', function () /* [args, ]options */{
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];


},{"../exception":233}],238:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

exports['default'] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function (conditional, options) {
    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
  });
};

module.exports = exports['default'];


},{"../utils":246}],239:[function(require,module,exports){
'use strict';

exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('log', function () /* message, options */{
    var args = [undefined],
        options = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;
    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }
    args[0] = level;

    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];


},{}],240:[function(require,module,exports){
'use strict';

exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('lookup', function (obj, field) {
    return obj && obj[field];
  });
};

module.exports = exports['default'];


},{}],241:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

exports['default'] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;
      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];


},{"../utils":246}],242:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('./utils');

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',

  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },

  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];
      if (!console[method]) {
        // eslint-disable-line no-console
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};

exports['default'] = logger;
module.exports = exports['default'];


},{"./utils":246}],243:[function(require,module,exports){
(function (global){
/* global window */
'use strict';

exports.__esModule = true;

exports['default'] = function (Handlebars) {
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */
  Handlebars.noConflict = function () {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }
    return Handlebars;
  };
};

module.exports = exports['default'];


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],244:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _utils = require('./utils');

var Utils = _interopRequireWildcard(_utils);

var _exception = require('./exception');

var _exception2 = _interopRequireDefault(_exception);

var _base = require('./base');

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
    }
  }
}

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
  }

  templateSpec.main.decorator = templateSpec.main_d;

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  }

  // Just add water
  var container = {
    strict: function strict(obj, name) {
      if (!(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },

    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }
      return programWrapper;
    },

    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    merge: function merge(param, common) {
      var obj = param || common;

      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }

      return obj;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context /*, options*/) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }
    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }
  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = container.merge(options.decorators, env.decorators);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;
  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data);
      // Wrapper function to get access to currentPartialBlock from the closure
      var fn = options.fn;
      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.
        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };
      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }
  return prog;
}


},{"./base":220,"./exception":233,"./utils":246}],245:[function(require,module,exports){
// Build out our basic SafeString type
'use strict';

exports.__esModule = true;
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports['default'] = SafeString;
module.exports = exports['default'];


},{}],246:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;
var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;

exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
/* eslint-disable func-style */
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  exports.isFunction = isFunction = function (value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
exports.isFunction = isFunction;

/* eslint-enable func-style */

/* istanbul ignore next */
var isArray = Array.isArray || function (value) {
  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}


},{}],247:[function(require,module,exports){
// USAGE:
// var handlebars = require('handlebars');
/* eslint-disable no-var */

// var local = handlebars.create();

var handlebars = require('../dist/cjs/handlebars')['default'];

var printer = require('../dist/cjs/handlebars/compiler/printer');
handlebars.PrintVisitor = printer.PrintVisitor;
handlebars.print = printer.print;

module.exports = handlebars;

// Publish a Node.js require() handler for .handlebars and .hbs files
function extension(module, filename) {
  var fs = require('fs');
  var templateString = fs.readFileSync(filename, 'utf8');
  module.exports = handlebars.compile(templateString);
}
/* istanbul ignore else */
if (typeof require !== 'undefined' && require.extensions) {
  require.extensions['.handlebars'] = extension;
  require.extensions['.hbs'] = extension;
}

},{"../dist/cjs/handlebars":218,"../dist/cjs/handlebars/compiler/printer":228,"fs":216}],248:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./source-map/source-node').SourceNode;

},{"./source-map/source-map-consumer":255,"./source-map/source-map-generator":256,"./source-map/source-node":257}],249:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet() {
    this._array = [];
    this._set = {};
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Return how many unique items are in this ArraySet. If duplicates have been
   * added, than those do not count towards the size.
   *
   * @returns Number
   */
  ArraySet.prototype.size = function ArraySet_size() {
    return Object.getOwnPropertyNames(this._set).length;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var isDuplicate = this.has(aStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      this._set[util.toSetString(aStr)] = idx;
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    return Object.prototype.hasOwnProperty.call(this._set,
                                                util.toSetString(aStr));
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (this.has(aStr)) {
      return this._set[util.toSetString(aStr)];
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };

  exports.ArraySet = ArraySet;

});

},{"./util":258,"amdefine":202}],250:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64 = require('./base64');

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (aIndex >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }

      digit = base64.decode(aStr.charCodeAt(aIndex++));
      if (digit === -1) {
        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
      }

      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
  };

});

},{"./base64":251,"amdefine":202}],251:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  exports.encode = function (number) {
    if (0 <= number && number < intToCharMap.length) {
      return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + aNumber);
  };

  /**
   * Decode a single base 64 character code digit to an integer. Returns -1 on
   * failure.
   */
  exports.decode = function (charCode) {
    var bigA = 65;     // 'A'
    var bigZ = 90;     // 'Z'

    var littleA = 97;  // 'a'
    var littleZ = 122; // 'z'

    var zero = 48;     // '0'
    var nine = 57;     // '9'

    var plus = 43;     // '+'
    var slash = 47;    // '/'

    var littleOffset = 26;
    var numberOffset = 52;

    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    if (bigA <= charCode && charCode <= bigZ) {
      return (charCode - bigA);
    }

    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    if (littleA <= charCode && charCode <= littleZ) {
      return (charCode - littleA + littleOffset);
    }

    // 52 - 61: 0123456789
    if (zero <= charCode && charCode <= nine) {
      return (charCode - zero + numberOffset);
    }

    // 62: +
    if (charCode == plus) {
      return 62;
    }

    // 63: /
    if (charCode == slash) {
      return 63;
    }

    // Invalid base64 digit.
    return -1;
  };

});

},{"amdefine":202}],252:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  exports.GREATEST_LOWER_BOUND = 1;
  exports.LEAST_UPPER_BOUND = 2;

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next-closest element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element than the one we are searching for, so we return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return mid;
    }
    else if (cmp > 0) {
      // Our needle is greater than aHaystack[mid].
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
      }

      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return mid;
      }
    }
    else {
      // Our needle is less than aHaystack[mid].
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
      }

      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the index of the closest element if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1;
    }

    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) {
      return -1;
    }

    // We have found either the exact element, or the next-closest element than
    // the one we are searching for. However, there may be more than one such
    // element. Make sure we always return the smallest of these.
    while (index - 1 >= 0) {
      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
        break;
      }
      --index;
    }

    return index;
  };

});

},{"amdefine":202}],253:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');

  /**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
  function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA ||
           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
  }

  /**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
  function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {generatedLine: -1, generatedColumn: 0};
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  MappingList.prototype.unsortedForEach =
    function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  MappingList.prototype.add = function MappingList_add(aMapping) {
    var mapping;
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositionsInflated);
      this._sorted = true;
    }
    return this._array;
  };

  exports.MappingList = MappingList;

});

},{"./util":258,"amdefine":202}],254:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  // It turns out that some (most?) JavaScript engines don't self-host
  // `Array.prototype.sort`. This makes sense because C++ will likely remain
  // faster than JS when doing raw CPU-intensive sorting. However, when using a
  // custom comparator function, calling back and forth between the VM's C++ and
  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
  // worse generated code for the comparator function than would be optimal. In
  // fact, when sorting with a comparator, these costs outweigh the benefits of
  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
  // a ~3500ms mean speed-up in `bench/bench.html`.

  /**
   * Swap the elements indexed by `x` and `y` in the array `ary`.
   *
   * @param {Array} ary
   *        The array.
   * @param {Number} x
   *        The index of the first item.
   * @param {Number} y
   *        The index of the second item.
   */
  function swap(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
  }

  /**
   * Returns a random integer within the range `low .. high` inclusive.
   *
   * @param {Number} low
   *        The lower bound on the range.
   * @param {Number} high
   *        The upper bound on the range.
   */
  function randomIntInRange(low, high) {
    return Math.round(low + (Math.random() * (high - low)));
  }

  /**
   * The Quick Sort algorithm.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   * @param {Number} p
   *        Start index of the array
   * @param {Number} r
   *        End index of the array
   */
  function doQuickSort(ary, comparator, p, r) {
    // If our lower bound is less than our upper bound, we (1) partition the
    // array into two pieces and (2) recurse on each half. If it is not, this is
    // the empty array and our base case.

    if (p < r) {
      // (1) Partitioning.
      //
      // The partitioning chooses a pivot between `p` and `r` and moves all
      // elements that are less than or equal to the pivot to the before it, and
      // all the elements that are greater than it after it. The effect is that
      // once partition is done, the pivot is in the exact place it will be when
      // the array is put in sorted order, and it will not need to be moved
      // again. This runs in O(n) time.

      // Always choose a random pivot so that an input array which is reverse
      // sorted does not cause O(n^2) running time.
      var pivotIndex = randomIntInRange(p, r);
      var i = p - 1;

      swap(ary, pivotIndex, r);
      var pivot = ary[r];

      // Immediately after `j` is incremented in this loop, the following hold
      // true:
      //
      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
      //
      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
      for (var j = p; j < r; j++) {
        if (comparator(ary[j], pivot) <= 0) {
          i += 1;
          swap(ary, i, j);
        }
      }

      swap(ary, i + 1, j);
      var q = i + 1;

      // (2) Recurse on each half.

      doQuickSort(ary, comparator, p, q - 1);
      doQuickSort(ary, comparator, q + 1, r);
    }
  }

  /**
   * Sort the given array in-place with the given comparator function.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   */
  exports.quickSort = function (ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
  };

});

},{"amdefine":202}],255:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');
  var binarySearch = require('./binary-search');
  var ArraySet = require('./array-set').ArraySet;
  var base64VLQ = require('./base64-vlq');
  var quickSort = require('./quick-sort').quickSort;

  function SourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    return sourceMap.sections != null
      ? new IndexedSourceMapConsumer(sourceMap)
      : new BasicSourceMapConsumer(sourceMap);
  }

  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
  }

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    get: function () {
      if (!this.__generatedMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    get: function () {
      if (!this.__originalMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  SourceMapConsumer.prototype._charIsMappingSeparator =
    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };

  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;

  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
  SourceMapConsumer.LEAST_UPPER_BOUND = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        if (source != null && sourceRoot != null) {
          source = util.join(sourceRoot, source);
        }
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };

  /**
   * Returns all generated line and column information for the original source,
   * line, and column provided. If no column is provided, returns all mappings
   * corresponding to a either the line we are searching for or the next
   * closest line that has any mappings. Otherwise, returns all mappings
   * corresponding to the given line and either the column we are searching for
   * or the next closest column that has any offsets.
   *
   * The only argument is an object with the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: Optional. the column number in the original source.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.allGeneratedPositionsFor =
    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, 'line');

      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
      // returns the index of the closest mapping less than the needle. By
      // setting needle.originalColumn to 0, we thus find the last mapping for
      // the given line, provided such a mapping exists.
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: line,
        originalColumn: util.getArg(aArgs, 'column', 0)
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }
      if (!this._sources.has(needle.source)) {
        return [];
      }
      needle.source = this._sources.indexOf(needle.source);

      var mappings = [];

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions,
                                    binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (aArgs.column === undefined) {
          var originalLine = mapping.originalLine;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we found. Since
          // mappings are sorted, this is guaranteed to find all mappings for
          // the line we found.
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we were searching for.
          // Since mappings are sorted, this is guaranteed to find all mappings for
          // the line we are searching for.
          while (mapping &&
                 mapping.originalLine === line &&
                 mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        }
      }

      return mappings;
    };

  exports.SourceMapConsumer = SourceMapConsumer;

  /**
   * A BasicSourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The only parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function BasicSourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    sources = sources.map(util.normalize);

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names, true);
    this._sources = ArraySet.fromArray(sources, true);

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this.file = file;
  }

  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

  /**
   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @returns BasicSourceMapConsumer
   */
  BasicSourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);

      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;

      // Because we are modifying the entries (by converting string sources and
      // names to indices into the sources and names ArraySets), we have to make
      // a copy of the entry or else bad things happen. Shared mutable state
      // strikes again! See github issue #191.

      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];

      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping;
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;

        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;

          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }

          destOriginalMappings.push(destMapping);
        }

        destGeneratedMappings.push(destMapping);
      }

      quickSort(smc.__originalMappings, util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  BasicSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._sources.toArray().map(function (s) {
        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
      }, this);
    }
  });

  /**
   * Provide the JIT with a nice shape / hidden class.
   */
  function Mapping() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
  }

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  BasicSourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;

      while (index < length) {
        if (aStr.charAt(index) === ';') {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        }
        else if (aStr.charAt(index) === ',') {
          index++;
        }
        else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;

          // Because each offset is encoded relative to the previous one,
          // many segments often have the same encoding. We can exploit this
          // fact by caching the parsed variable length fields of each segment,
          // allowing us to avoid a second parse if we encounter the same
          // segment again.
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);

          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }

            if (segment.length === 2) {
              throw new Error('Found a source, but no line and column');
            }

            if (segment.length === 3) {
              throw new Error('Found a source and line, but no column');
            }

            cachedSegments[str] = segment;
          }

          // Generated column.
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;

          if (segment.length > 1) {
            // Original source.
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];

            // Original line.
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;

            // Original column.
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;

            if (segment.length > 4) {
              // Original name.
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }

          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            originalMappings.push(mapping);
          }
        }
      }

      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;

      quickSort(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  BasicSourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator, aBias) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  BasicSourceMapConsumer.prototype.computeColumnSpans =
    function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];

        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];

          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }

        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
      }
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  BasicSourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._generatedMappings,
        "generatedLine",
        "generatedColumn",
        util.compareByGeneratedPositionsDeflated,
        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._generatedMappings[index];

        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, 'source', null);
          if (source !== null) {
            source = this._sources.at(source);
            if (this.sourceRoot != null) {
              source = util.join(this.sourceRoot, source);
            }
          }
          var name = util.getArg(mapping, 'name', null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source: source,
            line: util.getArg(mapping, 'originalLine', null),
            column: util.getArg(mapping, 'originalColumn', null),
            name: name
          };
        }
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
    function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() &&
        !this.sourcesContent.some(function (sc) { return sc == null; });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * availible.
   */
  BasicSourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }

      if (this.sourceRoot != null) {
        aSource = util.relative(this.sourceRoot, aSource);
      }

      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }

      var url;
      if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + aSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
        }
      }

      // This function is used recursively from
      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
      // don't want to throw if we can't find the source - we just want to
      // return null, so we provide a flag to exit gracefully.
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  BasicSourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, 'source');
      if (this.sourceRoot != null) {
        source = util.relative(this.sourceRoot, source);
      }
      if (!this._sources.has(source)) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      source = this._sources.indexOf(source);

      var needle = {
        source: source,
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          };
        }
      }

      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };

  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

  /**
   * An IndexedSourceMapConsumer instance represents a parsed source map which
   * we can query for information. It differs from BasicSourceMapConsumer in
   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
   * input.
   *
   * The only parameter is a raw source map (either as a JSON string, or already
   * parsed to an object). According to the spec for indexed source maps, they
   * have the following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - file: Optional. The generated file this source map is associated with.
   *   - sections: A list of section definitions.
   *
   * Each value under the "sections" field has two fields:
   *   - offset: The offset into the original specified at which this section
   *       begins to apply, defined as an object with a "line" and "column"
   *       field.
   *   - map: A source map definition. This source map could also be indexed,
   *       but doesn't have to be.
   *
   * Instead of the "map" field, it's also possible to have a "url" field
   * specifying a URL to retrieve a source map from, but that's currently
   * unsupported.
   *
   * Here's an example source map, taken from the source map spec[0], but
   * modified to omit a section which uses the "url" field.
   *
   *  {
   *    version : 3,
   *    file: "app.js",
   *    sections: [{
   *      offset: {line:100, column:10},
   *      map: {
   *        version : 3,
   *        file: "section.js",
   *        sources: ["foo.js", "bar.js"],
   *        names: ["src", "maps", "are", "fun"],
   *        mappings: "AAAA,E;;ABCDE;"
   *      }
   *    }],
   *  }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
   */
  function IndexedSourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sections = util.getArg(sourceMap, 'sections');

    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    this._sources = new ArraySet();
    this._names = new ArraySet();

    var lastOffset = {
      line: -1,
      column: 0
    };
    this._sections = sections.map(function (s) {
      if (s.url) {
        // The url field will require support for asynchronicity.
        // See https://github.com/mozilla/source-map/issues/16
        throw new Error('Support for url field in sections not implemented.');
      }
      var offset = util.getArg(s, 'offset');
      var offsetLine = util.getArg(offset, 'line');
      var offsetColumn = util.getArg(offset, 'column');

      if (offsetLine < lastOffset.line ||
          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
        throw new Error('Section offsets must be ordered and non-overlapping.');
      }
      lastOffset = offset;

      return {
        generatedOffset: {
          // The offset fields are 0-based, but we use 1-based indices when
          // encoding/decoding from VLQ.
          generatedLine: offsetLine + 1,
          generatedColumn: offsetColumn + 1
        },
        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
      }
    });
  }

  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

  /**
   * The version of the source mapping spec that we are consuming.
   */
  IndexedSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
    get: function () {
      var sources = [];
      for (var i = 0; i < this._sections.length; i++) {
        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
          sources.push(this._sections[i].consumer.sources[j]);
        }
      };
      return sources;
    }
  });

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  IndexedSourceMapConsumer.prototype.originalPositionFor =
    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      // Find the section containing the generated position we're trying to map
      // to an original position.
      var sectionIndex = binarySearch.search(needle, this._sections,
        function(needle, section) {
          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
          if (cmp) {
            return cmp;
          }

          return (needle.generatedColumn -
                  section.generatedOffset.generatedColumn);
        });
      var section = this._sections[sectionIndex];

      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }

      return section.consumer.originalPositionFor({
        line: needle.generatedLine -
          (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn -
          (section.generatedOffset.generatedLine === needle.generatedLine
           ? section.generatedOffset.generatedColumn - 1
           : 0),
        bias: aArgs.bias
      });
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function (s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  IndexedSourceMapConsumer.prototype.sourceContentFor =
    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  IndexedSourceMapConsumer.prototype.generatedPositionFor =
    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        // Only consider this section if the requested source is in the list of
        // sources of the consumer.
        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line +
              (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column +
              (section.generatedOffset.generatedLine === generatedPosition.line
               ? section.generatedOffset.generatedColumn - 1
               : 0)
          };
          return ret;
        }
      }

      return {
        line: null,
        column: null
      };
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  IndexedSourceMapConsumer.prototype._parseMappings =
    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[i];

          var source = section.consumer._sources.at(mapping.source);
          if (section.consumer.sourceRoot !== null) {
            source = util.join(section.consumer.sourceRoot, source);
          }
          this._sources.add(source);
          source = this._sources.indexOf(source);

          var name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);

          // The mappings coming from the consumer for the section have
          // generated positions relative to the start of the section, so we
          // need to offset them to be relative to the start of the concatenated
          // generated file.
          var adjustedMapping = {
            source: source,
            generatedLine: mapping.generatedLine +
              (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.column +
              (section.generatedOffset.generatedLine === mapping.generatedLine)
              ? section.generatedOffset.generatedColumn - 1
              : 0,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: name
          };

          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === 'number') {
            this.__originalMappings.push(adjustedMapping);
          }
        };
      };

      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };

  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

});

},{"./array-set":249,"./base64-vlq":250,"./binary-search":252,"./quick-sort":254,"./util":258,"amdefine":202}],256:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64VLQ = require('./base64-vlq');
  var util = require('./util');
  var ArraySet = require('./array-set').ArraySet;
  var MappingList = require('./mapping-list').MappingList;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }

  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }

      if (source != null && !this._sources.has(source)) {
        this._sources.add(source);
      }

      if (name != null && !this._names.has(name)) {
        this._names.add(name);
      }

      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = {};
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "sourceFile" relative if an absolute Url is passed.
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet();
      var newNames = new ArraySet();

      // Find mappings for the "sourceFile"
      this._mappings.unsortedForEach(function (mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source)
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var mapping;

      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            result += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            result += ',';
          }
        }

        result += base64VLQ.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source != null) {
          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
                                     - previousSource);
          previousSource = this._sources.indexOf(mapping.source);

          // lines are stored 0-based in SourceMap spec version 3
          result += base64VLQ.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          result += base64VLQ.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name != null) {
            result += base64VLQ.encode(this._names.indexOf(mapping.name)
                                       - previousName);
            previousName = this._names.indexOf(mapping.name);
          }
        }
      }

      return result;
    };

  SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
                                                    key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };

  exports.SourceMapGenerator = SourceMapGenerator;

});

},{"./array-set":249,"./base64-vlq":250,"./mapping-list":253,"./util":258,"amdefine":202}],257:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
  var util = require('./util');

  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Newline character code for charCodeAt() comparisons
  var NEWLINE_CODE = 10;

  // Private symbol for identifying `SourceNode`s when multiple versions of
  // the source-map library are loaded. This MUST NOT CHANGE across
  // versions!
  var isSourceNode = "$$$isSourceNode$$$";

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are removed from this array, by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var shiftNextLine = function() {
        var lineContents = remainingLines.shift();
        // The last line of a file might not have a newline.
        var newLine = remainingLines.shift() || "";
        return lineContents + newLine;
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            var code = "";
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[0];
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[0];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLines.length > 0) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath
            ? util.join(aRelativePath, mapping.source)
            : mapping.source;
          node.add(new SourceNode(mapping.originalLine,
                                  mapping.originalColumn,
                                  source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  exports.SourceNode = SourceNode;

});

},{"./source-map-generator":256,"./util":258,"amdefine":202}],258:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consequtive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = (path.charAt(0) === '/');

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }

    aRoot = aRoot.replace(/\/$/, '');

    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    var level = 0;
    while (aPath.indexOf(aRoot + '/') !== 0) {
      var index = aRoot.lastIndexOf("/");
      if (index < 0) {
        return aPath;
      }

      // If the only part of the root that is left is the scheme (i.e. http://,
      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
      // have exhausted all components, so the path is not relative to the root.
      aRoot = aRoot.slice(0, index);
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath;
      }

      ++level;
    }

    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
  }
  exports.relative = relative;

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    return '$' + aStr;
  }
  exports.toSetString = toSetString;

  function fromSetString(aStr) {
    return aStr.substr(1);
  }
  exports.fromSetString = fromSetString;

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = mappingA.source - mappingB.source;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    return mappingA.name - mappingB.name;
  };
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings with deflated source and name indices where
   * the generated positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp;
    }

    cmp = mappingA.source - mappingB.source;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return mappingA.name - mappingB.name;
  };
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

  function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0;
    }

    if (aStr1 > aStr2) {
      return 1;
    }

    return -1;
  }

  /**
   * Comparator between two mappings with inflated source and name strings where
   * the generated positions are compared.
   */
  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  };
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

});

},{"amdefine":202}],259:[function(require,module,exports){
IntlPolyfill.__addLocaleData({locale:"en",date:{ca:["gregory","buddhist","chinese","coptic","dangi","ethioaa","ethiopic","generic","hebrew","indian","islamic","islamicc","japanese","persian","roc"],hourNo0:true,hour12:true,formats:{short:"{1}, {0}",medium:"{1}, {0}",full:"{1} 'at' {0}",long:"{1} 'at' {0}",availableFormats:{"d":"d","E":"ccc",Ed:"d E",Ehm:"E h:mm a",EHm:"E HH:mm",Ehms:"E h:mm:ss a",EHms:"E HH:mm:ss",Gy:"y G",GyMMM:"MMM y G",GyMMMd:"MMM d, y G",GyMMMEd:"E, MMM d, y G","h":"h a","H":"HH",hm:"h:mm a",Hm:"HH:mm",hms:"h:mm:ss a",Hms:"HH:mm:ss",hmsv:"h:mm:ss a v",Hmsv:"HH:mm:ss v",hmv:"h:mm a v",Hmv:"HH:mm v","M":"L",Md:"M/d",MEd:"E, M/d",MMM:"LLL",MMMd:"MMM d",MMMEd:"E, MMM d",MMMMd:"MMMM d",ms:"mm:ss","y":"y",yM:"M/y",yMd:"M/d/y",yMEd:"E, M/d/y",yMMM:"MMM y",yMMMd:"MMM d, y",yMMMEd:"E, MMM d, y",yMMMM:"MMMM y",yQQQ:"QQQ y",yQQQQ:"QQQQ y"},dateFormats:{yMMMMEEEEd:"EEEE, MMMM d, y",yMMMMd:"MMMM d, y",yMMMd:"MMM d, y",yMd:"M/d/yy"},timeFormats:{hmmsszzzz:"h:mm:ss a zzzz",hmsz:"h:mm:ss a z",hms:"h:mm:ss a",hm:"h:mm a"}},calendars:{buddhist:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["BE"],short:["BE"],long:["BE"]},dayPeriods:{am:"AM",pm:"PM"}},chinese:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mo1","Mo2","Mo3","Mo4","Mo5","Mo6","Mo7","Mo8","Mo9","Mo10","Mo11","Mo12"],long:["Month1","Month2","Month3","Month4","Month5","Month6","Month7","Month8","Month9","Month10","Month11","Month12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},dayPeriods:{am:"AM",pm:"PM"}},coptic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"],long:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},dangi:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mo1","Mo2","Mo3","Mo4","Mo5","Mo6","Mo7","Mo8","Mo9","Mo10","Mo11","Mo12"],long:["Month1","Month2","Month3","Month4","Month5","Month6","Month7","Month8","Month9","Month10","Month11","Month12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},dayPeriods:{am:"AM",pm:"PM"}},ethiopic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},ethioaa:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0"],short:["ERA0"],long:["ERA0"]},dayPeriods:{am:"AM",pm:"PM"}},generic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"],long:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},gregory:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["B","A","BCE","CE"],short:["BC","AD","BCE","CE"],long:["Before Christ","Anno Domini","Before Common Era","Common Era"]},dayPeriods:{am:"AM",pm:"PM"}},hebrew:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13","7"],short:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"],long:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AM"],short:["AM"],long:["AM"]},dayPeriods:{am:"AM",pm:"PM"}},indian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"],long:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Saka"],short:["Saka"],long:["Saka"]},dayPeriods:{am:"AM",pm:"PM"}},islamic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},islamicc:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},japanese:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","M","T","S","H"],short:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"],long:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"]},dayPeriods:{am:"AM",pm:"PM"}},persian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"],long:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AP"],short:["AP"],long:["AP"]},dayPeriods:{am:"AM",pm:"PM"}},roc:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Before R.O.C.","Minguo"],short:["Before R.O.C.","Minguo"],long:["Before R.O.C.","Minguo"]},dayPeriods:{am:"AM",pm:"PM"}}}},number:{nu:["latn"],patterns:{decimal:{positivePattern:"{number}",negativePattern:"{minusSign}{number}"},currency:{positivePattern:"{currency}{number}",negativePattern:"{minusSign}{currency}{number}"},percent:{positivePattern:"{number}{percentSign}",negativePattern:"{minusSign}{number}{percentSign}"}},symbols:{latn:{decimal:".",group:",",nan:"NaN",plusSign:"+",minusSign:"-",percentSign:"%",infinity:"∞"}},currencies:{AUD:"A$",BRL:"R$",CAD:"CA$",CNY:"CN¥",EUR:"€",GBP:"£",HKD:"HK$",ILS:"₪",INR:"₹",JPY:"¥",KRW:"₩",MXN:"MX$",NZD:"NZ$",TWD:"NT$",USD:"$",VND:"₫",XAF:"FCFA",XCD:"EC$",XOF:"CFA",XPF:"CFPF"}}});
},{}],260:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":261}],261:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],262:[function(require,module,exports){
(function (process){
// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2017 Kris Kowal under the terms of the MIT
 * license found at https://github.com/kriskowal/q/blob/v1/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    "use strict";

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object" && typeof module === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
        // Prefer window over self for add-on scripts. Use self for
        // non-windowed contexts.
        var global = typeof window !== "undefined" ? window : self;

        // Get the `window` object, save the previous Q global
        // and initialize Q as a global.
        var previousQ = global.Q;
        global.Q = definition();

        // Add a noConflict function so Q can be removed from the
        // global namespace.
        global.Q.noConflict = function () {
            global.Q = previousQ;
            return this;
        };

    } else {
        throw new Error("This environment was not anticipated by Q. Please file a bug.");
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    // queue for late tasks, used by unhandled rejection tracking
    var laterQueue = [];

    function flush() {
        /* jshint loopfunc: true */
        var task, domain;

        while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }
            runSingle(task, domain);

        }
        while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
        }
        flushing = false;
    }
    // runs a single function in the async queue
    function runSingle(task, domain) {
        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process === "object" &&
        process.toString() === "[object process]" && process.nextTick) {
        // Ensure Q is in a real Node environment, with a `process.nextTick`.
        // To see through fake Node environments:
        // * Mocha test runner - exposes a `process` global without a `nextTick`
        // * Browserify - exposes a `process.nexTick` function that uses
        //   `setTimeout`. In this case `setImmediate` is preferred because
        //    it is faster. Browserify's `process.toString()` yields
        //   "[object Object]", while in a real Node environment
        //   `process.toString()` yields "[object process]".
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }
    // runs a task after all other tasks have been run
    // this is useful for unhandled rejection tracking that needs to happen
    // after all `then`d tasks have been run.
    nextTick.runAfter = function (task) {
        laterQueue.push(task);
        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };
    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {
    obj[prop] = descriptor.value;
    return obj;
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
                object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        var stack = filterStackString(concatedStacks);
        object_defineProperty(error, "stack", {value: stack, configurable: true});
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

/**
 * The counter is used to determine the stopping point for building
 * long stack traces. In makeStackTraceLong we walk backwards through
 * the linked list of promises, only stacks which were created before
 * the rejection are concatenated.
 */
var longStackCounter = 1;

// enable long stacks if Q_DEBUG is set
if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
            promise.stackCounter = longStackCounter++;
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;

        if (Q.longStackSupport && hasStacks) {
            // Only hold a reference to the new promise if long stacks
            // are enabled to reduce memory usage
            promise.source = newPromise;
        }

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Q can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
Q.race = race;
function race(answerPs) {
    return promise(function (resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function (answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var reportedUnhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }
    if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
            if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise);
                reportedUnhandledRejections.push(promise);
            }
        });
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise);
                if (atReport !== -1) {
                    process.emit("rejectionHandled", unhandledReasons[at], promise);
                    reportedUnhandledRejections.splice(atReport, 1);
                }
            });
        }
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var pendingCount = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++pendingCount;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--pendingCount === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (pendingCount === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Returns the first resolved promise of an array. Prior rejected promises are
 * ignored.  Rejects only if all promises are rejected.
 * @param {Array*} an array containing values or promises for values
 * @returns a promise fulfilled with the value of the first resolved promise,
 * or a rejected promise if all promises are rejected.
 */
Q.any = any;

function any(promises) {
    if (promises.length === 0) {
        return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
        var promise = promises[index];

        pendingCount++;

        when(promise, onFulfilled, onRejected, onProgress);
        function onFulfilled(result) {
            deferred.resolve(result);
        }
        function onRejected(err) {
            pendingCount--;
            if (pendingCount === 0) {
                err.message = ("Q can't get fulfillment value from any promise, all " +
                    "promises were rejected. Last error message: " + err.message);
                deferred.reject(err);
            }
        }
        function onProgress(progress) {
            deferred.notify({
                index: index,
                value: progress
            });
        }
    }, undefined);

    return deferred.promise;
}

Promise.prototype.any = function () {
    return any(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    if (!callback || typeof callback.apply !== "function") {
        throw new Error("Q can't apply finally callback");
    }
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    if (callback === undefined) {
        throw new Error("Q can't wrap an undefined function");
    }
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

Q.noConflict = function() {
    throw new Error("Q.noConflict only works when Q is used as a global");
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

}).call(this,require('_process'))

},{"_process":261}],263:[function(require,module,exports){
/*
 * smoothscroll polyfill - v0.3.5
 * https://iamdustan.github.io/smoothscroll
 * 2016 (c) Dustan Kasten, Jeremias Menichelli - MIT License
 */

(function(w, d, undefined) {
  'use strict';

  /*
   * aliases
   * w: window global object
   * d: document
   * undefined: undefined
   */

  // polyfill
  function polyfill() {
    // return when scrollBehavior interface is supported
    if ('scrollBehavior' in d.documentElement.style) {
      return;
    }

    /*
     * globals
     */
    var Element = w.HTMLElement || w.Element;
    var SCROLL_TIME = 468;

    /*
     * object gathering original scroll methods
     */
    var original = {
      scroll: w.scroll || w.scrollTo,
      scrollBy: w.scrollBy,
      elScroll: Element.prototype.scroll || scrollElement,
      scrollIntoView: Element.prototype.scrollIntoView
    };

    /*
     * define timing method
     */
    var now = w.performance && w.performance.now
      ? w.performance.now.bind(w.performance) : Date.now;

    /**
     * changes scroll position inside an element
     * @method scrollElement
     * @param {Number} x
     * @param {Number} y
     */
    function scrollElement(x, y) {
      this.scrollLeft = x;
      this.scrollTop = y;
    }

    /**
     * returns result of applying ease math function to a number
     * @method ease
     * @param {Number} k
     * @returns {Number}
     */
    function ease(k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    }

    /**
     * indicates if a smooth behavior should be applied
     * @method shouldBailOut
     * @param {Number|Object} x
     * @returns {Boolean}
     */
    function shouldBailOut(x) {
      if (typeof x !== 'object'
            || x === null
            || x.behavior === undefined
            || x.behavior === 'auto'
            || x.behavior === 'instant') {
        // first arg not an object/null
        // or behavior is auto, instant or undefined
        return true;
      }

      if (typeof x === 'object'
            && x.behavior === 'smooth') {
        // first argument is an object and behavior is smooth
        return false;
      }

      // throw error when behavior is not supported
      throw new TypeError('behavior not valid');
    }

    /**
     * finds scrollable parent of an element
     * @method findScrollableParent
     * @param {Node} el
     * @returns {Node} el
     */
    function findScrollableParent(el) {
      var isBody;
      var hasScrollableSpace;
      var hasVisibleOverflow;

      do {
        el = el.parentNode;

        // set condition variables
        isBody = el === d.body;
        hasScrollableSpace =
          el.clientHeight < el.scrollHeight ||
          el.clientWidth < el.scrollWidth;
        hasVisibleOverflow =
          w.getComputedStyle(el, null).overflow === 'visible';
      } while (!isBody && !(hasScrollableSpace && !hasVisibleOverflow));

      isBody = hasScrollableSpace = hasVisibleOverflow = null;

      return el;
    }

    /**
     * self invoked function that, given a context, steps through scrolling
     * @method step
     * @param {Object} context
     */
    function step(context) {
      var time = now();
      var value;
      var currentX;
      var currentY;
      var elapsed = (time - context.startTime) / SCROLL_TIME;

      // avoid elapsed times higher than one
      elapsed = elapsed > 1 ? 1 : elapsed;

      // apply easing to elapsed time
      value = ease(elapsed);

      currentX = context.startX + (context.x - context.startX) * value;
      currentY = context.startY + (context.y - context.startY) * value;

      context.method.call(context.scrollable, currentX, currentY);

      // scroll more if we have not reached our destination
      if (currentX !== context.x || currentY !== context.y) {
        w.requestAnimationFrame(step.bind(w, context));
      }
    }

    /**
     * scrolls window with a smooth behavior
     * @method smoothScroll
     * @param {Object|Node} el
     * @param {Number} x
     * @param {Number} y
     */
    function smoothScroll(el, x, y) {
      var scrollable;
      var startX;
      var startY;
      var method;
      var startTime = now();

      // define scroll context
      if (el === d.body) {
        scrollable = w;
        startX = w.scrollX || w.pageXOffset;
        startY = w.scrollY || w.pageYOffset;
        method = original.scroll;
      } else {
        scrollable = el;
        startX = el.scrollLeft;
        startY = el.scrollTop;
        method = scrollElement;
      }

      // scroll looping over a frame
      step({
        scrollable: scrollable,
        method: method,
        startTime: startTime,
        startX: startX,
        startY: startY,
        x: x,
        y: y
      });
    }

    /*
     * ORIGINAL METHODS OVERRIDES
     */

    // w.scroll and w.scrollTo
    w.scroll = w.scrollTo = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scroll.call(
          w,
          arguments[0].left || arguments[0],
          arguments[0].top || arguments[1]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left,
        ~~arguments[0].top
      );
    };

    // w.scrollBy
    w.scrollBy = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollBy.call(
          w,
          arguments[0].left || arguments[0],
          arguments[0].top || arguments[1]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left + (w.scrollX || w.pageXOffset),
        ~~arguments[0].top + (w.scrollY || w.pageYOffset)
      );
    };

    // Element.prototype.scroll and Element.prototype.scrollTo
    Element.prototype.scroll = Element.prototype.scrollTo = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.elScroll.call(
            this,
            arguments[0].left || arguments[0],
            arguments[0].top || arguments[1]
        );
        return;
      }

      var left = arguments[0].left;
      var top = arguments[0].top;

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
          this,
          this,
          typeof left === 'number' ? left : this.scrollLeft,
          typeof top === 'number' ? top : this.scrollTop
      );
    };

    // Element.prototype.scrollBy
    Element.prototype.scrollBy = function() {
      var arg0 = arguments[0];

      if (typeof arg0 === 'object') {
        this.scroll({
          left: arg0.left + this.scrollLeft,
          top: arg0.top + this.scrollTop,
          behavior: arg0.behavior
        });
      } else {
        this.scroll(
          this.scrollLeft + arg0,
          this.scrollTop + arguments[1]
        );
      }
    };

    // Element.prototype.scrollIntoView
    Element.prototype.scrollIntoView = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollIntoView.call(
          this,
          arguments[0] === undefined ? true : arguments[0]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      var scrollableParent = findScrollableParent(this);
      var parentRects = scrollableParent.getBoundingClientRect();
      var clientRects = this.getBoundingClientRect();

      if (scrollableParent !== d.body) {
        // reveal element inside parent
        smoothScroll.call(
          this,
          scrollableParent,
          scrollableParent.scrollLeft + clientRects.left - parentRects.left,
          scrollableParent.scrollTop + clientRects.top - parentRects.top
        );
        // reveal parent in viewport
        w.scrollBy({
          left: parentRects.left,
          top: parentRects.top,
          behavior: 'smooth'
        });
      } else {
        // reveal element in viewport
        w.scrollBy({
          left: clientRects.left,
          top: clientRects.top,
          behavior: 'smooth'
        });
      }
    };
  }

  if (typeof exports === 'object') {
    // commonjs
    module.exports = { polyfill: polyfill };
  } else {
    // global
    polyfill();
  }
})(window, document);

},{}],264:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],265:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],266:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":265,"_process":261,"inherits":264}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjbGllbnQvanMvLkljb25NYXAuanMiLCJjbGllbnQvanMvLlRlbXBsYXRlTWFwLmpzIiwiY2xpZW50L2pzLy5WaWV3TWFwLmpzIiwiY2xpZW50L2pzL0F1dG9Db21wbGV0ZS5qcyIsImNsaWVudC9qcy9Gb3JtYXQuanMiLCJjbGllbnQvanMvTXlFcnJvci5qcyIsImNsaWVudC9qcy9YaHIuanMiLCJjbGllbnQvanMvZmFjdG9yeS9WaWV3LmpzIiwiY2xpZW50L2pzL21haW4uanMiLCJjbGllbnQvanMvbW9kZWxzL0NvbGxlY3Rpb24uanMiLCJjbGllbnQvanMvbW9kZWxzL0NvbGxlY3Rpb25NYW5hZ2VyLmpzIiwiY2xpZW50L2pzL21vZGVscy9Db250YWN0SW5mby5qcyIsImNsaWVudC9qcy9tb2RlbHMvQ3NhRGVsaXZlcnkuanMiLCJjbGllbnQvanMvbW9kZWxzL0NzYVRyYW5zYWN0aW9uLmpzIiwiY2xpZW50L2pzL21vZGVscy9DdXJyZW50U2hhcmUuanMiLCJjbGllbnQvanMvbW9kZWxzL0N1c3RvbWVyLmpzIiwiY2xpZW50L2pzL21vZGVscy9EYXlPZldlZWsuanMiLCJjbGllbnQvanMvbW9kZWxzL0RlbGl2ZXJ5LmpzIiwiY2xpZW50L2pzL21vZGVscy9EZWxpdmVyeURhdGUuanMiLCJjbGllbnQvanMvbW9kZWxzL0RlbGl2ZXJ5Um91dGUuanMiLCJjbGllbnQvanMvbW9kZWxzL0RvY3VtZW50LmpzIiwiY2xpZW50L2pzL21vZGVscy9Ecm9wb2ZmLmpzIiwiY2xpZW50L2pzL21vZGVscy9GYXJtUGlja3VwLmpzIiwiY2xpZW50L2pzL21vZGVscy9GYXJtZXJNYXJrZXQuanMiLCJjbGllbnQvanMvbW9kZWxzL0Zvb2QuanMiLCJjbGllbnQvanMvbW9kZWxzL0luc3RhbmNlLmpzIiwiY2xpZW50L2pzL21vZGVscy9Kc29uUHJvcGVydHkuanMiLCJjbGllbnQvanMvbW9kZWxzL0xvY2F0aW9ucy5qcyIsImNsaWVudC9qcy9tb2RlbHMvTWVtYmVyLmpzIiwiY2xpZW50L2pzL21vZGVscy9NZW1iZXJGb29kT21pc3Npb24uanMiLCJjbGllbnQvanMvbW9kZWxzL01lbWJlclNlYXNvbi5qcyIsImNsaWVudC9qcy9tb2RlbHMvTWVtYmVyU2VsZWN0aW9uLmpzIiwiY2xpZW50L2pzL21vZGVscy9OYXYuanMiLCJjbGllbnQvanMvbW9kZWxzL09yZGVyT3B0aW9uLmpzIiwiY2xpZW50L2pzL21vZGVscy9QZXJzb24uanMiLCJjbGllbnQvanMvbW9kZWxzL1Jlc291cmNlLmpzIiwiY2xpZW50L2pzL21vZGVscy9SZXN0YXVyYW50LmpzIiwiY2xpZW50L2pzL21vZGVscy9SZXRhaWxPdXRsZXQuanMiLCJjbGllbnQvanMvbW9kZWxzL1NoYXJlLmpzIiwiY2xpZW50L2pzL21vZGVscy9TaGFyZUdyb3VwRHJvcG9mZi5qcyIsImNsaWVudC9qcy9tb2RlbHMvU2hhcmVPcHRpb25PcHRpb24uanMiLCJjbGllbnQvanMvbW9kZWxzL1VzZXIuanMiLCJjbGllbnQvanMvbW9kZWxzL19fcHJvdG9fXy5qcyIsImNsaWVudC9qcy9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5qcyIsImNsaWVudC9qcy9wbHVnaW5zL3NwaW5uZXIuanMiLCJjbGllbnQvanMvcG9seWZpbGwuanMiLCJjbGllbnQvanMvcm91dGVyLmpzIiwiY2xpZW50L2pzL3NwaW4uanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL2FkbWluLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9jcmVhdGVJbnN0YW5jZS5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvY3NhQ3VzdG9taXphdGlvbi5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvZmllbGRFcnJvci5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvZm9ybS9Cb29sZWFuLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9mb3JtL0RhdGUuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL2Zvcm0vRGF5T2ZXZWVrLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9mb3JtL0ZpbGUuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL2Zvcm0vVGV4dC5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvZm9ybS9UZXh0QXJlYS5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvaW5zdGFuY2VSb3cuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL2ludmFsaWRMb2dpbkVycm9yLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9sb2dpbi5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvbW9kYWwuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3Jlc291cmNlLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9yZXNvdXJjZVJvdy5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2VydmVyRXJyb3IuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL2RhdGVTZWxlY3Rpb24uanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC9kZWxpdmVyeS5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL2RlbGl2ZXJ5T3B0aW9uLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvZGVsaXZlcnlPcHRpb25zLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvZHJvcG9mZi5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL2Ryb3BvZmZzLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvZmFybVBpY2t1cEZlZWRiYWNrLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvaG9tZURlbGl2ZXJ5RmVlZGJhY2suanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC9wYXltZW50T3B0aW9uLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvcGF5bWVudE9wdGlvbnMuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC9waWNrdXBEYXRlLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvcGlja3VwRGF0ZXMuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC9zaGFyZS5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL3NoYXJlT3B0aW9uLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvc2hhcmVPcHRpb25zLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvc2hhcmVzLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvc2luZ2xlU2hhcmVPcHRpb25zLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvc3VtbWFyeS5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL3ZlcmlmeUFkZHJlc3MuanMiLCJjbGllbnQvanMvdmlld3MvQWJvdXQuanMiLCJjbGllbnQvanMvdmlld3MvQWRkVHJhbnNhY3Rpb24uanMiLCJjbGllbnQvanMvdmlld3MvQWRtaW4uanMiLCJjbGllbnQvanMvdmlld3MvQWRtaW5IZWFkZXIuanMiLCJjbGllbnQvanMvdmlld3MvQWRtaW5QbHVzLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0J1dHRvbkZsb3cuanMiLCJjbGllbnQvanMvdmlld3MvQ29sbGVjdGlvbk1hbmFnZXIuanMiLCJjbGllbnQvanMvdmlld3MvQ29udGFjdC5qcyIsImNsaWVudC9qcy92aWV3cy9Dc2EuanMiLCJjbGllbnQvanMvdmlld3MvQ3VzdG9tZXJJbmZvLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0RlbGV0ZXIuanMiLCJjbGllbnQvanMvdmlld3MvRHJhZ2dlci5qcyIsImNsaWVudC9qcy92aWV3cy9Gb29kT21pc3Npb24uanMiLCJjbGllbnQvanMvdmlld3MvRm9vdGVyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0Zvcm0uanMiLCJjbGllbnQvanMvdmlld3MvR2V0SW52b2x2ZWQuanMiLCJjbGllbnQvanMvdmlld3MvSGVhZGVyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0hvbWUuanMiLCJjbGllbnQvanMvdmlld3MvSW5zdGFuY2VSb3cuanMiLCJjbGllbnQvanMvdmlld3MvTGlzdC5qcyIsImNsaWVudC9qcy92aWV3cy9Mb2NhdGlvbnMuanMiLCJjbGllbnQvanMvdmlld3MvTG9naW4uanMiLCJjbGllbnQvanMvdmlld3MvTWFuYWdlQ3VzdG9tZXIuanMiLCJjbGllbnQvanMvdmlld3MvTWVtYmVyVHlwZWFoZWFkLmpzIiwiY2xpZW50L2pzL3ZpZXdzL01lbWJlcnMuanMiLCJjbGllbnQvanMvdmlld3MvTXlWaWV3LmpzIiwiY2xpZW50L2pzL3ZpZXdzL09yZGVyT3B0aW9ucy5qcyIsImNsaWVudC9qcy92aWV3cy9SZXBvcnRpbmcuanMiLCJjbGllbnQvanMvdmlld3MvUmVzb3VyY2UuanMiLCJjbGllbnQvanMvdmlld3MvUmVzb3VyY2VSb3cuanMiLCJjbGllbnQvanMvdmlld3MvU2Vhc29ucy5qcyIsImNsaWVudC9qcy92aWV3cy9TaGFyZUJveC5qcyIsImNsaWVudC9qcy92aWV3cy9TaGFyZVBhdGNoLmpzIiwiY2xpZW50L2pzL3ZpZXdzL1NpZ251cC5qcyIsImNsaWVudC9qcy92aWV3cy9TdWJtaXR0ZXIuanMiLCJjbGllbnQvanMvdmlld3MvVG9hc3QuanMiLCJjbGllbnQvanMvdmlld3MvVHJhbnNhY3Rpb25zLmpzIiwiY2xpZW50L2pzL3ZpZXdzL1dlZWtPcHRpb25zLmpzIiwiY2xpZW50L2pzL3ZpZXdzL19fcHJvdG9fXy5qcyIsImNsaWVudC9qcy92aWV3cy9saWIvT3B0aW1pemVkUmVzaXplLmpzIiwiY2xpZW50L2pzL3ZpZXdzL21vZGFsLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9EYXRlU2VsZWN0aW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9EZWxpdmVyeS5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvRGVsaXZlcnlPcHRpb24uanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL0RlbGl2ZXJ5T3B0aW9ucy5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvRHJvcG9mZi5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvRHJvcG9mZnMuanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL01lbWJlckluZm8uanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL1BheW1lbnRPcHRpb24uanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL1BheW1lbnRPcHRpb25zLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9QaWNrdXBEYXRlLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9QaWNrdXBEYXRlcy5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvU2hhcmUuanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL1NoYXJlT3B0aW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9TaGFyZU9wdGlvbnMuanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL1NoYXJlcy5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvU2luZ2xlU2hhcmVPcHRpb25zLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9TdW1tYXJ5LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9BYm91dC5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvQWRkVHJhbnNhY3Rpb24uanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0FkbWluSGVhZGVyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9BZG1pblBsdXMuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0J1dHRvbkZsb3cuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0NvbGxlY3Rpb25NYW5hZ2VyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9Db250YWN0LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9Dc2EuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0NzYUl0ZW0uanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0NzYVRyYW5zYWN0aW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9DdXN0b21lckluZm8uanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0RlbGV0ZXIuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0RlbGl2ZXJ5RGF0ZS5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvRG9jdW1lbnQuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0RyYWdnZXIuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0VkaXRDc2FUcmFuc2FjdGlvbi5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvRmllbGRFZGl0LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9Gb29kT21pc3Npb24uanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0Zvb3Rlci5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvRm9ybS5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvR2V0SW52b2x2ZWQuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0hlYWRlci5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvSG9tZS5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvSW5mb1dpbmRvdy5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvTGlzdC5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvTG9jYXRpb24uanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0xvY2F0aW9ucy5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvTWFuYWdlQ3VzdG9tZXIuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL01lbWJlckluZm8uanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL01lbWJlclR5cGVhaGVhZC5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvTWVtYmVycy5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvT3JkZXJPcHRpb25zLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9SZXBvcnRpbmcuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL1NlYXNvbnMuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL1NoYXJlQm94LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9TaGFyZUV4YW1wbGUuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL1NoYXJlUGF0Y2guanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL1N0YWZmUHJvZmlsZS5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvVG9hc3QuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL1RyYW5zYWN0aW9ucy5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvV2Vla09wdGlvbnMuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL2RlbGl2ZXJ5TWF0cml4LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9saWIvY2FyZXQtZG93bi5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvbGliL2NoZWNrbWFyay5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvbGliL2VkaXQuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL2xpYi9lcnJvci5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvbGliL2V4LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9saWIvZ2FyYmFnZS5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvbGliL2p1c3RpZnkuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL2xpYi9sZWZ0QXJyb3cuanMiLCJjbGllbnQvanMvdmlld3MvdXRpbC9DdXN0b21Db250ZW50LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3V0aWwvRm9ybS5qcyIsImNsaWVudC9qcy92aWV3cy91dGlsL0xpc3QuanMiLCJjbGllbnQvanMvdmlld3MvdXRpbC9MaXN0SXRlbS5qcyIsImNsaWVudC9qcy92aWV3cy91dGlsL1RhYmxlLmpzIiwibGliL01vZGVsLmpzIiwibGliL015RXJyb3IuanMiLCJsaWIvTXlPYmplY3QuanMiLCJub2RlX21vZHVsZXMvYW1kZWZpbmUvYW1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvanMvbnBtLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9hZmZpeC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvYWxlcnQuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2J1dHRvbi5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvY2Fyb3VzZWwuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2NvbGxhcHNlLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9kcm9wZG93bi5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvbW9kYWwuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3BvcG92ZXIuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3Njcm9sbHNweS5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvdGFiLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy90b29sdGlwLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy90cmFuc2l0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbGliL19lbXB0eS5qcyIsIm5vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy5ydW50aW1lLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvYmFzZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2FzdC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2Jhc2UuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9jb2RlLWdlbi5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvbXBpbGVyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvaGVscGVycy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2phdmFzY3JpcHQtY29tcGlsZXIuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9wYXJzZXIuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9wcmludGVyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvdmlzaXRvci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL3doaXRlc3BhY2UtY29udHJvbC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9kZWNvcmF0b3JzL2lubGluZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2Jsb2NrLWhlbHBlci1taXNzaW5nLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9oZWxwZXItbWlzc2luZy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2xvZy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy93aXRoLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvbG9nZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9uby1jb25mbGljdC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9zYWZlLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC9hcnJheS1zZXQuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC9iYXNlNjQtdmxxLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvYmFzZTY0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvYmluYXJ5LXNlYXJjaC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwL21hcHBpbmctbGlzdC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwL3F1aWNrLXNvcnQuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC9zb3VyY2UtbWFwLWNvbnN1bWVyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvc291cmNlLW1hcC1nZW5lcmF0b3IuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC9zb3VyY2Utbm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwL3V0aWwuanMiLCJub2RlX21vZHVsZXMvaW50bC9sb2NhbGUtZGF0YS9qc29ucC9lbi5qcyIsIm5vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3EvcS5qcyIsIm5vZGVfbW9kdWxlcy9zbW9vdGhzY3JvbGwtcG9seWZpbGwvZGlzdC9zbW9vdGhzY3JvbGwuanMiLCJub2RlX21vZHVsZXMvdXRpbC9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsT0FBTyxPQUFQLEdBQWU7QUFDZCxlQUFjLFFBQVEsa0NBQVIsQ0FEQTtBQUVkLGNBQWEsUUFBUSxpQ0FBUixDQUZDO0FBR2QsU0FBUSxRQUFRLDRCQUFSLENBSE07QUFJZCxVQUFTLFFBQVEsNkJBQVIsQ0FKSztBQUtkLE9BQU0sUUFBUSwwQkFBUixDQUxRO0FBTWQsWUFBVyxRQUFRLCtCQUFSLENBTkc7QUFPZCxZQUFXLFFBQVEsK0JBQVIsQ0FQRztBQVFkLGNBQWEsUUFBUSxpQ0FBUjtBQVJDLENBQWY7Ozs7O0FDQUEsT0FBTyxPQUFQLEdBQWU7QUFDZCxRQUFPLFFBQVEseUJBQVIsQ0FETztBQUVkLGlCQUFnQixRQUFRLGtDQUFSLENBRkY7QUFHZCxjQUFhLFFBQVEsK0JBQVIsQ0FIQztBQUlkLFlBQVcsUUFBUSw2QkFBUixDQUpHO0FBS2QsYUFBWSxRQUFRLDhCQUFSLENBTEU7QUFNZCxvQkFBbUIsUUFBUSxxQ0FBUixDQU5MO0FBT2QsVUFBUyxRQUFRLDJCQUFSLENBUEs7QUFRZCxNQUFLLFFBQVEsdUJBQVIsQ0FSUztBQVNkLFVBQVMsUUFBUSwyQkFBUixDQVRLO0FBVWQsaUJBQWdCLFFBQVEsa0NBQVIsQ0FWRjtBQVdkLGVBQWMsUUFBUSxnQ0FBUixDQVhBO0FBWWQsVUFBUyxRQUFRLDJCQUFSLENBWks7QUFhZCxlQUFjLFFBQVEsZ0NBQVIsQ0FiQTtBQWNkLFdBQVUsUUFBUSw0QkFBUixDQWRJO0FBZWQsVUFBUyxRQUFRLDJCQUFSLENBZks7QUFnQmQscUJBQW9CLFFBQVEsc0NBQVIsQ0FoQk47QUFpQmQsWUFBVyxRQUFRLDZCQUFSLENBakJHO0FBa0JkLGVBQWMsUUFBUSxnQ0FBUixDQWxCQTtBQW1CZCxTQUFRLFFBQVEsMEJBQVIsQ0FuQk07QUFvQmQsT0FBTSxR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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM3U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbGdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QyxFQUFFLEVBQUMsS0FBSyxFQUFDO0FBQzVlLG9CQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxF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Q0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6RSwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUN0RSwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkYsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RGLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDckosMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNySSwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3JJLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDL0UsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFDSCx3QkFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQzt3QkFDN0UsT0FBTyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pELDJCQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQzs7QUFFdkIsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7O0FBRXRFLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUM7QUFDMUUsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0SCwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RILDBCQUFNO0FB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QUssRUFBRTtBQUFFLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEFBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hHLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQzNELDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsc0JBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMxQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUIsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyxzQkFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUIsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEdBQUc7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxHQUFHO0FBQUMsc0JBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9CLDBCQUFNO0FBQUEsYUFDTDtTQUNBO0FBQ0QsYUFBSyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDO0FBQ3hnVyxzQkFBYyxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFB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QUFDaEIsMkJBQU8sRUFBRSxDQUFDOztBQUVaLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxDQUFDO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2pCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxDQUFDO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2pCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxDQUFDO0FBQUUsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQzJCLHdCQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDaEIsd0JBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEIsMkJBQU8sRUFBRSxDQUFDOztBQUU1QywwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQUFBQyxPQUFPLEVBQUUsQ0FBQztBQUNuQywwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQUFBQyxPQUFPLEVBQUUsQ0FBQztBQUNuQywwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUNMLHdCQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2Qix3QkFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2hCLHdCQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUNMLHdCQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDaEIsMkJBQU8sRUFBRSxDQUFDOztBQUVaLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFOztBQUNQLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxBQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ25DLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxBQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ25DLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsdUJBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQUMsT0FBTyxFQUFFLENBQUM7QUFDL0QsMEJBQU07QUFBQSxBQUNO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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9ZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsWEE7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2hPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN6aEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0VUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwibW9kdWxlLmV4cG9ydHM9e1xuXHRcImNhcmV0LWRvd25cIjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvbGliL2NhcmV0LWRvd24nKSxcblx0XCJjaGVja21hcmtcIjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvbGliL2NoZWNrbWFyaycpLFxuXHRcImVkaXRcIjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvbGliL2VkaXQnKSxcblx0XCJlcnJvclwiOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9saWIvZXJyb3InKSxcblx0XCJleFwiOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9saWIvZXgnKSxcblx0XCJnYXJiYWdlXCI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL2xpYi9nYXJiYWdlJyksXG5cdFwianVzdGlmeVwiOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9saWIvanVzdGlmeScpLFxuXHRcImxlZnRBcnJvd1wiOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9saWIvbGVmdEFycm93Jylcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG5cdEFib3V0OiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9BYm91dCcpLFxuXHRBZGRUcmFuc2FjdGlvbjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvQWRkVHJhbnNhY3Rpb24nKSxcblx0QWRtaW5IZWFkZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0FkbWluSGVhZGVyJyksXG5cdEFkbWluUGx1czogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvQWRtaW5QbHVzJyksXG5cdEJ1dHRvbkZsb3c6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0J1dHRvbkZsb3cnKSxcblx0Q29sbGVjdGlvbk1hbmFnZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0NvbGxlY3Rpb25NYW5hZ2VyJyksXG5cdENvbnRhY3Q6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0NvbnRhY3QnKSxcblx0Q3NhOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Dc2EnKSxcblx0Q3NhSXRlbTogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvQ3NhSXRlbScpLFxuXHRDc2FUcmFuc2FjdGlvbjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvQ3NhVHJhbnNhY3Rpb24nKSxcblx0Q3VzdG9tZXJJbmZvOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9DdXN0b21lckluZm8nKSxcblx0RGVsZXRlcjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvRGVsZXRlcicpLFxuXHREZWxpdmVyeURhdGU6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0RlbGl2ZXJ5RGF0ZScpLFxuXHREb2N1bWVudDogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvRG9jdW1lbnQnKSxcblx0RHJhZ2dlcjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvRHJhZ2dlcicpLFxuXHRFZGl0Q3NhVHJhbnNhY3Rpb246IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0VkaXRDc2FUcmFuc2FjdGlvbicpLFxuXHRGaWVsZEVkaXQ6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0ZpZWxkRWRpdCcpLFxuXHRGb29kT21pc3Npb246IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0Zvb2RPbWlzc2lvbicpLFxuXHRGb290ZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0Zvb3RlcicpLFxuXHRGb3JtOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Gb3JtJyksXG5cdEdldEludm9sdmVkOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9HZXRJbnZvbHZlZCcpLFxuXHRIZWFkZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0hlYWRlcicpLFxuXHRIb21lOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Ib21lJyksXG5cdEluZm9XaW5kb3c6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0luZm9XaW5kb3cnKSxcblx0TGlzdDogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvTGlzdCcpLFxuXHRMb2NhdGlvbjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvTG9jYXRpb24nKSxcblx0TG9jYXRpb25zOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Mb2NhdGlvbnMnKSxcblx0TWFuYWdlQ3VzdG9tZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL01hbmFnZUN1c3RvbWVyJyksXG5cdE1lbWJlckluZm86IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL01lbWJlckluZm8nKSxcblx0TWVtYmVyVHlwZWFoZWFkOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9NZW1iZXJUeXBlYWhlYWQnKSxcblx0TWVtYmVyczogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvTWVtYmVycycpLFxuXHRPcmRlck9wdGlvbnM6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL09yZGVyT3B0aW9ucycpLFxuXHRSZXBvcnRpbmc6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL1JlcG9ydGluZycpLFxuXHRTZWFzb25zOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9TZWFzb25zJyksXG5cdFNoYXJlQm94OiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9TaGFyZUJveCcpLFxuXHRTaGFyZUV4YW1wbGU6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL1NoYXJlRXhhbXBsZScpLFxuXHRTaGFyZVBhdGNoOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9TaGFyZVBhdGNoJyksXG5cdFN0YWZmUHJvZmlsZTogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvU3RhZmZQcm9maWxlJyksXG5cdFRvYXN0OiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Ub2FzdCcpLFxuXHRUcmFuc2FjdGlvbnM6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL1RyYW5zYWN0aW9ucycpLFxuXHRXZWVrT3B0aW9uczogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvV2Vla09wdGlvbnMnKSxcblx0ZGVsaXZlcnlNYXRyaXg6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL2RlbGl2ZXJ5TWF0cml4Jylcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG5cdEFib3V0OiByZXF1aXJlKCcuL3ZpZXdzL0Fib3V0JyksXG5cdEFkZFRyYW5zYWN0aW9uOiByZXF1aXJlKCcuL3ZpZXdzL0FkZFRyYW5zYWN0aW9uJyksXG5cdEFkbWluOiByZXF1aXJlKCcuL3ZpZXdzL0FkbWluJyksXG5cdEFkbWluSGVhZGVyOiByZXF1aXJlKCcuL3ZpZXdzL0FkbWluSGVhZGVyJyksXG5cdEFkbWluUGx1czogcmVxdWlyZSgnLi92aWV3cy9BZG1pblBsdXMnKSxcblx0QnV0dG9uRmxvdzogcmVxdWlyZSgnLi92aWV3cy9CdXR0b25GbG93JyksXG5cdENvbGxlY3Rpb25NYW5hZ2VyOiByZXF1aXJlKCcuL3ZpZXdzL0NvbGxlY3Rpb25NYW5hZ2VyJyksXG5cdENvbnRhY3Q6IHJlcXVpcmUoJy4vdmlld3MvQ29udGFjdCcpLFxuXHRDc2E6IHJlcXVpcmUoJy4vdmlld3MvQ3NhJyksXG5cdEN1c3RvbWVySW5mbzogcmVxdWlyZSgnLi92aWV3cy9DdXN0b21lckluZm8nKSxcblx0RGVsZXRlcjogcmVxdWlyZSgnLi92aWV3cy9EZWxldGVyJyksXG5cdERyYWdnZXI6IHJlcXVpcmUoJy4vdmlld3MvRHJhZ2dlcicpLFxuXHRGb29kT21pc3Npb246IHJlcXVpcmUoJy4vdmlld3MvRm9vZE9taXNzaW9uJyksXG5cdEZvb3RlcjogcmVxdWlyZSgnLi92aWV3cy9Gb290ZXInKSxcblx0Rm9ybTogcmVxdWlyZSgnLi92aWV3cy9Gb3JtJyksXG5cdEdldEludm9sdmVkOiByZXF1aXJlKCcuL3ZpZXdzL0dldEludm9sdmVkJyksXG5cdEhlYWRlcjogcmVxdWlyZSgnLi92aWV3cy9IZWFkZXInKSxcblx0SG9tZTogcmVxdWlyZSgnLi92aWV3cy9Ib21lJyksXG5cdEluc3RhbmNlUm93OiByZXF1aXJlKCcuL3ZpZXdzL0luc3RhbmNlUm93JyksXG5cdExpc3Q6IHJlcXVpcmUoJy4vdmlld3MvTGlzdCcpLFxuXHRMb2NhdGlvbnM6IHJlcXVpcmUoJy4vdmlld3MvTG9jYXRpb25zJyksXG5cdE1hbmFnZUN1c3RvbWVyOiByZXF1aXJlKCcuL3ZpZXdzL01hbmFnZUN1c3RvbWVyJyksXG5cdE1lbWJlclR5cGVhaGVhZDogcmVxdWlyZSgnLi92aWV3cy9NZW1iZXJUeXBlYWhlYWQnKSxcblx0TWVtYmVyczogcmVxdWlyZSgnLi92aWV3cy9NZW1iZXJzJyksXG5cdE15VmlldzogcmVxdWlyZSgnLi92aWV3cy9NeVZpZXcnKSxcblx0T3JkZXJPcHRpb25zOiByZXF1aXJlKCcuL3ZpZXdzL09yZGVyT3B0aW9ucycpLFxuXHRSZXBvcnRpbmc6IHJlcXVpcmUoJy4vdmlld3MvUmVwb3J0aW5nJyksXG5cdFJlc291cmNlOiByZXF1aXJlKCcuL3ZpZXdzL1Jlc291cmNlJyksXG5cdFJlc291cmNlUm93OiByZXF1aXJlKCcuL3ZpZXdzL1Jlc291cmNlUm93JyksXG5cdFNlYXNvbnM6IHJlcXVpcmUoJy4vdmlld3MvU2Vhc29ucycpLFxuXHRTaGFyZUJveDogcmVxdWlyZSgnLi92aWV3cy9TaGFyZUJveCcpLFxuXHRTaGFyZVBhdGNoOiByZXF1aXJlKCcuL3ZpZXdzL1NoYXJlUGF0Y2gnKSxcblx0U2lnbnVwOiByZXF1aXJlKCcuL3ZpZXdzL1NpZ251cCcpLFxuXHRTdWJtaXR0ZXI6IHJlcXVpcmUoJy4vdmlld3MvU3VibWl0dGVyJyksXG5cdFRvYXN0OiByZXF1aXJlKCcuL3ZpZXdzL1RvYXN0JyksXG5cdFRyYW5zYWN0aW9uczogcmVxdWlyZSgnLi92aWV3cy9UcmFuc2FjdGlvbnMnKSxcblx0V2Vla09wdGlvbnM6IHJlcXVpcmUoJy4vdmlld3MvV2Vla09wdGlvbnMnKSxcblx0bW9kYWw6IHJlcXVpcmUoJy4vdmlld3MvbW9kYWwnKVxufSIsIi8vIEphdmFTY3JpcHQgYXV0b0NvbXBsZXRlIHYxLjAuNFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1BpeGFiYXkvSmF2YVNjcmlwdC1hdXRvQ29tcGxldGVcbnZhciBhdXRvQ29tcGxldGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe2Z1bmN0aW9uIHQoZSx0KXtyZXR1cm4gZS5jbGFzc0xpc3Q/ZS5jbGFzc0xpc3QuY29udGFpbnModCk6bmV3IFJlZ0V4cChcIlxcXFxiXCIrdCtcIlxcXFxiXCIpLnRlc3QoZS5jbGFzc05hbWUpfWZ1bmN0aW9uIG8oZSx0LG8pe2UuYXR0YWNoRXZlbnQ/ZS5hdHRhY2hFdmVudChcIm9uXCIrdCxvKTplLmFkZEV2ZW50TGlzdGVuZXIodCxvKX1mdW5jdGlvbiBzKGUsdCxvKXtlLmRldGFjaEV2ZW50P2UuZGV0YWNoRXZlbnQoXCJvblwiK3Qsbyk6ZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsbyl9ZnVuY3Rpb24gbihlLHMsbixsKXtvKGx8fGRvY3VtZW50LHMsZnVuY3Rpb24obyl7Zm9yKHZhciBzLGw9by50YXJnZXR8fG8uc3JjRWxlbWVudDtsJiYhKHM9dChsLGUpKTspbD1sLnBhcmVudEVsZW1lbnQ7cyYmbi5jYWxsKGwsbyl9KX1pZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKXt2YXIgbD17c2VsZWN0b3I6MCxzb3VyY2U6MCxtaW5DaGFyczozLGRlbGF5OjE1MCxvZmZzZXRMZWZ0OjAsb2Zmc2V0VG9wOjEsY2FjaGU6MSxtZW51Q2xhc3M6XCJcIixyZW5kZXJJdGVtOmZ1bmN0aW9uKGUsdCl7dD10LnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZyxcIlxcXFwkJlwiKTt2YXIgbz1uZXcgUmVnRXhwKFwiKFwiK3Quc3BsaXQoXCIgXCIpLmpvaW4oXCJ8XCIpK1wiKVwiLFwiZ2lcIik7cmV0dXJuJzxkaXYgY2xhc3M9XCJhdXRvY29tcGxldGUtc3VnZ2VzdGlvblwiIGRhdGEtdmFsPVwiJytlKydcIj4nK2UucmVwbGFjZShvLFwiPGI+JDE8L2I+XCIpK1wiPC9kaXY+XCJ9LG9uU2VsZWN0OmZ1bmN0aW9uKCl7fX07Zm9yKHZhciBjIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShjKSYmKGxbY109ZVtjXSk7Zm9yKHZhciBhPVwib2JqZWN0XCI9PXR5cGVvZiBsLnNlbGVjdG9yP1tsLnNlbGVjdG9yXTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGwuc2VsZWN0b3IpLHU9MDt1PGEubGVuZ3RoO3UrKyl7dmFyIGk9YVt1XTtpLnNjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksaS5zYy5jbGFzc05hbWU9XCJhdXRvY29tcGxldGUtc3VnZ2VzdGlvbnMgXCIrbC5tZW51Q2xhc3MsaS5hdXRvY29tcGxldGVBdHRyPWkuZ2V0QXR0cmlidXRlKFwiYXV0b2NvbXBsZXRlXCIpLGkuc2V0QXR0cmlidXRlKFwiYXV0b2NvbXBsZXRlXCIsXCJvZmZcIiksaS5jYWNoZT17fSxpLmxhc3RfdmFsPVwiXCIsaS51cGRhdGVTQz1mdW5jdGlvbihlLHQpe3ZhciBvPWkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7aWYoaS5zYy5zdHlsZS5sZWZ0PU1hdGgucm91bmQoby5sZWZ0Kyh3aW5kb3cucGFnZVhPZmZzZXR8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KStsLm9mZnNldExlZnQpK1wicHhcIixpLnNjLnN0eWxlLnRvcD1NYXRoLnJvdW5kKG8uYm90dG9tKyh3aW5kb3cucGFnZVlPZmZzZXR8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApK2wub2Zmc2V0VG9wKStcInB4XCIsaS5zYy5zdHlsZS53aWR0aD1NYXRoLnJvdW5kKG8ucmlnaHQtby5sZWZ0KStcInB4XCIsIWUmJihpLnNjLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLGkuc2MubWF4SGVpZ2h0fHwoaS5zYy5tYXhIZWlnaHQ9cGFyc2VJbnQoKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlP2dldENvbXB1dGVkU3R5bGUoaS5zYyxudWxsKTppLnNjLmN1cnJlbnRTdHlsZSkubWF4SGVpZ2h0KSksaS5zYy5zdWdnZXN0aW9uSGVpZ2h0fHwoaS5zYy5zdWdnZXN0aW9uSGVpZ2h0PWkuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvblwiKS5vZmZzZXRIZWlnaHQpLGkuc2Muc3VnZ2VzdGlvbkhlaWdodCkpaWYodCl7dmFyIHM9aS5zYy5zY3JvbGxUb3Asbj10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcC1pLnNjLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtuK2kuc2Muc3VnZ2VzdGlvbkhlaWdodC1pLnNjLm1heEhlaWdodD4wP2kuc2Muc2Nyb2xsVG9wPW4raS5zYy5zdWdnZXN0aW9uSGVpZ2h0K3MtaS5zYy5tYXhIZWlnaHQ6MD5uJiYoaS5zYy5zY3JvbGxUb3A9bitzKX1lbHNlIGkuc2Muc2Nyb2xsVG9wPTB9LG8od2luZG93LFwicmVzaXplXCIsaS51cGRhdGVTQyksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpLnNjKSxuKFwiYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25cIixcIm1vdXNlbGVhdmVcIixmdW5jdGlvbigpe3ZhciBlPWkuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvbi5zZWxlY3RlZFwiKTtlJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5jbGFzc05hbWU9ZS5jbGFzc05hbWUucmVwbGFjZShcInNlbGVjdGVkXCIsXCJcIil9LDIwKX0saS5zYyksbihcImF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uXCIsXCJtb3VzZW92ZXJcIixmdW5jdGlvbigpe3ZhciBlPWkuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvbi5zZWxlY3RlZFwiKTtlJiYoZS5jbGFzc05hbWU9ZS5jbGFzc05hbWUucmVwbGFjZShcInNlbGVjdGVkXCIsXCJcIikpLHRoaXMuY2xhc3NOYW1lKz1cIiBzZWxlY3RlZFwifSxpLnNjKSxuKFwiYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25cIixcIm1vdXNlZG93blwiLGZ1bmN0aW9uKGUpe2lmKHQodGhpcyxcImF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uXCIpKXt2YXIgbz10aGlzLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsXCIpO2kudmFsdWU9byxsLm9uU2VsZWN0KGUsbyx0aGlzKSxpLnNjLnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9fSxpLnNjKSxpLmJsdXJIYW5kbGVyPWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25zOmhvdmVyXCIpfWNhdGNoKHQpe3ZhciBlPTB9ZT9pIT09ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCYmc2V0VGltZW91dChmdW5jdGlvbigpe2kuZm9jdXMoKX0sMjApOihpLmxhc3RfdmFsPWkudmFsdWUsaS5zYy5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnNjLnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9LDM1MCkpfSxvKGksXCJibHVyXCIsaS5ibHVySGFuZGxlcik7dmFyIHI9ZnVuY3Rpb24oZSl7dmFyIHQ9aS52YWx1ZTtpZihpLmNhY2hlW3RdPWUsZS5sZW5ndGgmJnQubGVuZ3RoPj1sLm1pbkNoYXJzKXtmb3IodmFyIG89XCJcIixzPTA7czxlLmxlbmd0aDtzKyspbys9bC5yZW5kZXJJdGVtKGVbc10sdCk7aS5zYy5pbm5lckhUTUw9byxpLnVwZGF0ZVNDKDApfWVsc2UgaS5zYy5zdHlsZS5kaXNwbGF5PVwibm9uZVwifTtpLmtleWRvd25IYW5kbGVyPWZ1bmN0aW9uKGUpe3ZhciB0PXdpbmRvdy5ldmVudD9lLmtleUNvZGU6ZS53aGljaDtpZigoNDA9PXR8fDM4PT10KSYmaS5zYy5pbm5lckhUTUwpe3ZhciBvLHM9aS5zYy5xdWVyeVNlbGVjdG9yKFwiLmF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uLnNlbGVjdGVkXCIpO3JldHVybiBzPyhvPTQwPT10P3MubmV4dFNpYmxpbmc6cy5wcmV2aW91c1NpYmxpbmcsbz8ocy5jbGFzc05hbWU9cy5jbGFzc05hbWUucmVwbGFjZShcInNlbGVjdGVkXCIsXCJcIiksby5jbGFzc05hbWUrPVwiIHNlbGVjdGVkXCIsaS52YWx1ZT1vLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsXCIpKToocy5jbGFzc05hbWU9cy5jbGFzc05hbWUucmVwbGFjZShcInNlbGVjdGVkXCIsXCJcIiksaS52YWx1ZT1pLmxhc3RfdmFsLG89MCkpOihvPTQwPT10P2kuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvblwiKTppLnNjLmNoaWxkTm9kZXNbaS5zYy5jaGlsZE5vZGVzLmxlbmd0aC0xXSxvLmNsYXNzTmFtZSs9XCIgc2VsZWN0ZWRcIixpLnZhbHVlPW8uZ2V0QXR0cmlidXRlKFwiZGF0YS12YWxcIikpLGkudXBkYXRlU0MoMCxvKSwhMX1pZigyNz09dClpLnZhbHVlPWkubGFzdF92YWwsaS5zYy5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Vsc2UgaWYoMTM9PXR8fDk9PXQpe3ZhciBzPWkuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvbi5zZWxlY3RlZFwiKTtzJiZcIm5vbmVcIiE9aS5zYy5zdHlsZS5kaXNwbGF5JiYobC5vblNlbGVjdChlLHMuZ2V0QXR0cmlidXRlKFwiZGF0YS12YWxcIikscyksc2V0VGltZW91dChmdW5jdGlvbigpe2kuc2Muc3R5bGUuZGlzcGxheT1cIm5vbmVcIn0sMjApKX19LG8oaSxcImtleWRvd25cIixpLmtleWRvd25IYW5kbGVyKSxpLmtleXVwSGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD13aW5kb3cuZXZlbnQ/ZS5rZXlDb2RlOmUud2hpY2g7aWYoIXR8fCgzNT50fHx0PjQwKSYmMTMhPXQmJjI3IT10KXt2YXIgbz1pLnZhbHVlO2lmKG8ubGVuZ3RoPj1sLm1pbkNoYXJzKXtpZihvIT1pLmxhc3RfdmFsKXtpZihpLmxhc3RfdmFsPW8sY2xlYXJUaW1lb3V0KGkudGltZXIpLGwuY2FjaGUpe2lmKG8gaW4gaS5jYWNoZSlyZXR1cm4gdm9pZCByKGkuY2FjaGVbb10pO2Zvcih2YXIgcz0xO3M8by5sZW5ndGgtbC5taW5DaGFycztzKyspe3ZhciBuPW8uc2xpY2UoMCxvLmxlbmd0aC1zKTtpZihuIGluIGkuY2FjaGUmJiFpLmNhY2hlW25dLmxlbmd0aClyZXR1cm4gdm9pZCByKFtdKX19aS50aW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bC5zb3VyY2UobyxyKX0sbC5kZWxheSl9fWVsc2UgaS5sYXN0X3ZhbD1vLGkuc2Muc3R5bGUuZGlzcGxheT1cIm5vbmVcIn19LG8oaSxcImtleXVwXCIsaS5rZXl1cEhhbmRsZXIpLGkuZm9jdXNIYW5kbGVyPWZ1bmN0aW9uKGUpe2kubGFzdF92YWw9XCJcXG5cIixpLmtleXVwSGFuZGxlcihlKX0sbC5taW5DaGFyc3x8byhpLFwiZm9jdXNcIixpLmZvY3VzSGFuZGxlcil9dGhpcy5kZXN0cm95PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPTA7ZTxhLmxlbmd0aDtlKyspe3ZhciB0PWFbZV07cyh3aW5kb3csXCJyZXNpemVcIix0LnVwZGF0ZVNDKSxzKHQsXCJibHVyXCIsdC5ibHVySGFuZGxlcikscyh0LFwiZm9jdXNcIix0LmZvY3VzSGFuZGxlcikscyh0LFwia2V5ZG93blwiLHQua2V5ZG93bkhhbmRsZXIpLHModCxcImtleXVwXCIsdC5rZXl1cEhhbmRsZXIpLHQuYXV0b2NvbXBsZXRlQXR0cj90LnNldEF0dHJpYnV0ZShcImF1dG9jb21wbGV0ZVwiLHQuYXV0b2NvbXBsZXRlQXR0cik6dC5yZW1vdmVBdHRyaWJ1dGUoXCJhdXRvY29tcGxldGVcIiksZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0LnNjKSx0PW51bGx9fX19cmV0dXJuIGV9KCk7IWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImF1dG9Db21wbGV0ZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGF1dG9Db21wbGV0ZX0pOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWF1dG9Db21wbGV0ZTp3aW5kb3cuYXV0b0NvbXBsZXRlPWF1dG9Db21wbGV0ZX0oKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIEN1cnJlbmN5OiBuZXcgSW50bC5OdW1iZXJGb3JtYXQoICdlbi1VUycsIHtcbiAgICAgIHN0eWxlOiAnY3VycmVuY3knLFxuICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyXG4gICAgfSApLFxuXG4gICAgR2V0Rm9ybUZpZWxkKCBkYXR1bSwgdmFsdWUgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCAnR2V0Rm9ybUZpZWxkJyApXG4gICAgICAgIGNvbnNvbGUubG9nKCBkYXR1bSApXG4gICAgICAgIGNvbnNvbGUubG9nKCB2YWx1ZSApXG4gICAgICAgIGNvbnN0IGljb24gPSBkYXR1bS5tZXRhZGF0YVxuICAgICAgICAgICAgPyBkYXR1bS5tZXRhZGF0YS5pY29uXG4gICAgICAgICAgICAgICAgPyB0aGlzLkljb25zWyBkYXR1bS5tZXRhZGF0YS5pY29uIF1cbiAgICAgICAgICAgICAgICA6IGBgXG4gICAgICAgICAgICA6IGBgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGRhdHVtLm1ldGFkYXRhID8gZGF0dW0ubWV0YWRhdGEub3B0aW9ucyA6IGZhbHNlXG5cbiAgICAgICAgdmFsdWUgPSAoIHZhbHVlID09PSB1bmRlZmluZWQgKSA/ICcnIDogdmFsdWVcblxuICAgICAgICBpZiggb3B0aW9ucyApIHtcbiAgICAgICAgICAgIGlmKCB0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyApIHsgb3B0aW9ucygpOyByZXR1cm4gdGhpcy5HZXRTZWxlY3QoIGRhdHVtLCBbIF0sIGljb24gKSB9XG4gICAgICAgICAgICBlbHNlIGlmKCBBcnJheS5pc0FycmF5KCBvcHRpb25zICkgKSByZXR1cm4gdGhpcy5HZXRTZWxlY3QoIGRhdHVtLCBvcHRpb25zLCBpY29uIClcbiAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIGNvbnN0IGxhYmVsID0gXG4gICAgICAgICAgICBkYXR1bS5mayB8fCBkYXR1bS5sYWJlbFxuICAgICAgICAgICAgICAgID8gYDxsYWJlbD4ke2RhdHVtLmZrIHx8IGRhdHVtLmxhYmVsfTwvbGFiZWw+YFxuICAgICAgICAgICAgICAgIDogYGBcblxuICAgICAgICBjb25zdCBpbWFnZSA9IGRhdHVtLnJhbmdlID09PSAnSW1hZ2VVcmwnXG4gICAgICAgICAgICA/IGA8ZGl2PjxidXR0b24gY2xhc3M9XCJidG4teWVsbG93XCIgZGF0YS1qcz1cInByZXZpZXdCdG5cIiB0eXBlPVwiYnV0dG9uXCI+UHJldmlldzwvYnV0dG9uPjxpbWcgZGF0YS1zcmM9XCIke3RoaXMuSW1hZ2VTcmMoIHZhbHVlICl9XCIgLz48L2Rpdj5gXG4gICAgICAgICAgICA6IGBgXG5cbiAgICAgICAgY29uc3QgaW5wdXQgPSBkYXR1bS5ma1xuICAgICAgICAgICAgPyBgPGRpdiBkYXRhLXZpZXc9XCJ0eXBlQWhlYWRcIiBkYXRhLW5hbWU9XCIke2RhdHVtLmZrfVwiPjwvZGl2PmBcbiAgICAgICAgICAgIDogZGF0dW0ucmFuZ2UgPT09ICdUZXh0J1xuICAgICAgICAgICAgICAgID8gYDx0ZXh0YXJlYSBkYXRhLWpzPVwiJHtkYXR1bS5uYW1lfVwiIHJvd3M9XCIzXCI+JHt2YWx1ZX08L3RleHRhcmVhPmBcbiAgICAgICAgICAgICAgICA6IGRhdHVtLnJhbmdlID09PSAnTGlzdCcgfHwgdHlwZW9mIGRhdHVtLnJhbmdlID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICAgICA/IGA8ZGl2IGRhdGEtanM9XCIke2RhdHVtLm5hbWV9XCIgZGF0YS1uYW1lPVwiJHtkYXR1bS5uYW1lfVwiPjwvZGl2PmBcbiAgICAgICAgICAgICAgICAgICAgOiBgPGlucHV0IHR5cGU9XCIke3RoaXMuUmFuZ2VUb0lucHV0VHlwZVsgZGF0dW0ucmFuZ2UgXX1cIiBkYXRhLWpzPVwiJHtkYXR1bS5uYW1lfVwiIHBsYWNlaG9sZGVyPVwiJHtkYXR1bS5sYWJlbCB8fCAnJ31cIiB2YWx1ZT1cIiR7dmFsdWV9XCIgLz5gXG5cbiAgICAgICAgcmV0dXJuIGBgICtcbiAgICAgICAgYDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwICR7aW1hZ2UgPyBgaGFzLWltYWdlYCA6IGBgfVwiPlxuICAgICAgICAgICAgJHtsYWJlbH1cbiAgICAgICAgICAgICR7aW5wdXR9XG4gICAgICAgICAgICAke2ltYWdlfVxuICAgICAgICAgICAgJHtpY29ufVxuICAgICAgICA8L2Rpdj5gXG4gICAgfSxcblxuICAgIEdldEZvcm1GaWVsZHMoIGRhdGEsIG1vZGVsPXt9ICkge1xuICAgICAgICBpZiggIWRhdGEgKSByZXR1cm4gYGBcblxuICAgICAgICByZXR1cm4gZGF0YS5tYXAoIGRhdHVtID0+IHRoaXMuR2V0Rm9ybUZpZWxkKCBkYXR1bSwgbW9kZWwgJiYgbW9kZWxbIGRhdHVtLm5hbWUgXSApICkuam9pbignJylcbiAgICB9LFxuXG4gICAgR2V0SWNvbiggbmFtZSwgb3B0cyApIHsgcmV0dXJuIFJlZmxlY3QuYXBwbHkoIHRoaXMuSWNvbnNbIG5hbWUgXSwgdGhpcywgWyBvcHRzIF0gKSB9LFxuXG4gICAgR2V0TGlzdEl0ZW1zKCBpdGVtcz1bXSwgb3B0cz17fSApIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcCggaXRlbSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gb3B0cy5kYXRhQXR0ciA/IGBkYXRhLSR7b3B0cy5kYXRhQXR0cn09XCIke2l0ZW1bIG9wdHMuZGF0YUF0dHIgXX1cImAgOiBgYFxuICAgICAgICAgICAgcmV0dXJuIGA8bGkgJHthdHRyfT4ke2l0ZW0ubGFiZWwgfHwgaXRlbX08L2xpPmAgXG4gICAgICAgIH0gKS5qb2luKCcnKVxuICAgIH0sXG5cbiAgICBHZXRTZWxlY3QoIGRhdHVtLCBvcHRpb25zRGF0YSwgaWNvbiApIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbnNEYXRhLmxlbmd0aCA/IHRoaXMuR2V0U2VsZWN0T3B0aW9ucyggb3B0aW9uc0RhdGEsIHsgdmFsdWVBdHRyOiAnbmFtZScgfSApIDogYGBcblxuICAgICAgICByZXR1cm4gYGAgK1xuICAgICAgICBgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgZGF0YS1qcz1cIiR7ZGF0dW0ubmFtZX1cIj5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHNlbGVjdGVkIHZhbHVlPiR7ZGF0dW0ubGFiZWx9PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgJHtvcHRpb25zfVxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAke2ljb259XG4gICAgICAgIDwvZGl2PmBcbiAgICB9LFxuXG4gICAgR2V0U2VsZWN0T3B0aW9ucyggb3B0aW9ucz1bXSwgb3B0cz17IHZhbHVlQXR0cjogJ3ZhbHVlJyB9ICkge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5tYXAoIG9wdGlvbiA9PiBgPG9wdGlvbiB2YWx1ZT1cIiR7b3B0aW9uWyBvcHRzLnZhbHVlQXR0ciBdfVwiPiR7b3B0aW9uLmxhYmVsfTwvb3B0aW9uPmAgKS5qb2luKCcnKVxuICAgIH0sXG5cbiAgICBJY29uczogcmVxdWlyZSgnLi8uSWNvbk1hcCcpLFxuICAgIFxuICAgIEljb25EYXRhSnMoIHAgKSB7IHJldHVybiBwLm5hbWUgPyBgZGF0YS1qcz1cIiR7cC5uYW1lfVwiYCA6IGBgIH0sXG5cbiAgICBJbWFnZVNyYyggbmFtZSApIHsgcmV0dXJuIGBodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vZG91YmxlLXF1aWxsLTMyNDMvJHtuYW1lfWAgfSxcblxuICAgIFBhcnNlVGV4dExpbmtzKCB0ZXh0ICkge1xuICAgICAgICBsZXQgc3RhcnQgPSB0ZXh0LmluZGV4T2YoJ3t7JyksXG4gICAgICAgICAgICBlbmQsIHJlc3QsIHRhcmdldCwga2V5LCB2YWx1ZSwgcmVwbGFjZW1lbnRcblxuICAgICAgICBpZiggc3RhcnQgPT09IC0xICkgcmV0dXJuIHRleHRcblxuICAgICAgICByZXN0ID0gdGV4dC5zbGljZSggc3RhcnQgKVxuICAgICAgICB0YXJnZXQgPSByZXN0LnNsaWNlKCAwLCByZXN0LmluZGV4T2YoJ30nKSArIDIgKVxuICAgICAgICBrZXkgPSB0YXJnZXQuc2xpY2UoIDIsIHRhcmdldC5pbmRleE9mKCc6JykgKVxuICAgICAgICB2YWx1ZSA9IHRhcmdldC5zbGljZSggdGFyZ2V0LmluZGV4T2YoJzonKSArIDEsIHRhcmdldC5pbmRleE9mKCd9JykgKVxuXG4gICAgICAgIHJlcGxhY2VtZW50ID0gL2VtYWlsL2kudGVzdCggdGFyZ2V0IClcbiAgICAgICAgICAgID8gYDxhIGhyZWY9XCJtYWlsdG86JHt2YWx1ZX1cIiBjbGFzcz1cImxpbmtcIj4ke2tleX08L2E+YFxuICAgICAgICAgICAgOiAvaHR0cC8udGVzdCggdmFsdWUgKVxuICAgICAgICAgICAgICAgID8gYDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIke3ZhbHVlfVwiIGNsYXNzPVwibGlua1wiPiR7a2V5fTwvYT5gXG4gICAgICAgICAgICAgICAgOiBgPHNwYW4gZGF0YS1qcz1cImxpbmtcIiBkYXRhLW5hbWU9XCIke3ZhbHVlfVwiIGNsYXNzPVwibGlua1wiPiR7a2V5fTwvc3Bhbj5gXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuUGFyc2VUZXh0TGlua3MoIHRleHQucmVwbGFjZSggdGFyZ2V0LCByZXBsYWNlbWVudCApIClcbiAgICB9LFxuXG4gICAgUmFuZ2UoIGludCApIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oIEFycmF5KCBpbnQgKS5rZXlzKCkgKVxuICAgIH0sXG5cbiAgICBSYW5nZVRvSW5wdXRUeXBlOiB7XG4gICAgICAgIEVtYWlsOiAnZW1haWwnLFxuICAgICAgICBJbWFnZVVybDogJ3RleHQnLFxuICAgICAgICBQYXNzd29yZDogJ3Bhc3N3b3JkJyxcbiAgICAgICAgU3RyaW5nOiAndGV4dCdcbiAgICB9XG5cbn1cbiIsInZhciBNeUVycm9yID0gZnVuY3Rpb24oIGVyciApIHsgcmV0dXJuIHRoaXMuaGFuZGxlKCBlcnIgKSB9XG5cbk9iamVjdC5hc3NpZ24oIE15RXJyb3IucHJvdG90eXBlLCB7XG4gICAgXG4gICAgaGFuZGxlOiBmdW5jdGlvbiggZXJyICkgeyBjb25zb2xlLmxvZyggZXJyLnN0YWNrIHx8IGVyciApIH1cblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gTXlFcnJvclxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi4vLi4vbGliL015T2JqZWN0JyksIHtcblxuICAgIFJlcXVlc3Q6IHtcblxuICAgICAgICBjb25zdHJ1Y3RvciggZGF0YSApIHtcbiAgICAgICAgICAgIGxldCByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuXG4gICAgICAgICAgICAgICAgcmVxLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBbIDUwMCwgNDA0LCA0MDEgXS5pbmNsdWRlcyggdGhpcy5zdGF0dXMgKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWplY3QoIHRoaXMucmVzcG9uc2UgKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZXNvbHZlKCBKU09OLnBhcnNlKHRoaXMucmVzcG9uc2UpIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIGRhdGEubWV0aG9kID09PSBcImdldFwiIHx8IGRhdGEubWV0aG9kID09PSBcIm9wdGlvbnNcIiApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHFzID0gZGF0YS5xcyA/IGA/JHtkYXRhLnFzfWAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICByZXEub3BlbiggZGF0YS5tZXRob2QsIGAvJHtkYXRhLnJlc291cmNlfSR7cXN9YCApXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SGVhZGVycyggcmVxLCBkYXRhLmhlYWRlcnMgKVxuICAgICAgICAgICAgICAgICAgICByZXEuc2VuZChudWxsKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBgLyR7ZGF0YS5yZXNvdXJjZX1gICsgKCBkYXRhLmlkID8gYC8ke2RhdGEuaWR9YCA6ICcnICk7XG4gICAgICAgICAgICAgICAgICAgIHJlcS5vcGVuKCBkYXRhLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBwYXRoLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEhlYWRlcnMoIHJlcSwgZGF0YS5oZWFkZXJzIClcbiAgICAgICAgICAgICAgICAgICAgcmVxLnNlbmQoIGRhdGEuZGF0YSB8fCBudWxsIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSxcblxuICAgICAgICBwbGFpbkVzY2FwZSggc1RleHQgKSB7XG4gICAgICAgICAgICAvKiBob3cgc2hvdWxkIEkgdHJlYXQgYSB0ZXh0L3BsYWluIGZvcm0gZW5jb2Rpbmc/IHdoYXQgY2hhcmFjdGVycyBhcmUgbm90IGFsbG93ZWQ/IHRoaXMgaXMgd2hhdCBJIHN1cHBvc2UuLi46ICovXG4gICAgICAgICAgICAvKiBcIjRcXDNcXDcgLSBFaW5zdGVpbiBzYWlkIEU9bWMyXCIgLS0tLT4gXCI0XFxcXDNcXFxcN1xcIC1cXCBFaW5zdGVpblxcIHNhaWRcXCBFXFw9bWMyXCIgKi9cbiAgICAgICAgICAgIHJldHVybiBzVGV4dC5yZXBsYWNlKC9bXFxzXFw9XFxcXF0vZywgXCJcXFxcJCZcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0SGVhZGVycyggcmVxLCBoZWFkZXJzPXt9ICkge1xuICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoIFwiQWNjZXB0XCIsIGhlYWRlcnMuYWNjZXB0IHx8ICdhcHBsaWNhdGlvbi9qc29uJyApXG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgaGVhZGVycy5jb250ZW50VHlwZSB8fCAndGV4dC9wbGFpbicgKVxuICAgICAgICAgICAgT2JqZWN0LmtleXMoIGhlYWRlcnMgKS5mb3JFYWNoKCBrZXkgPT4gcmVxLnNldFJlcXVlc3RIZWFkZXIoIGtleSwgaGVhZGVyc1sga2V5IF0gKSApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2ZhY3RvcnkoIGRhdGEgKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKCB0aGlzLlJlcXVlc3QsIHsgfSApLmNvbnN0cnVjdG9yKCBkYXRhIClcbiAgICB9LFxuXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAgICAgaWYoICFYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZEFzQmluYXJ5ICkge1xuICAgICAgICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kQXNCaW5hcnkgPSBmdW5jdGlvbihzRGF0YSkge1xuICAgICAgICAgICAgdmFyIG5CeXRlcyA9IHNEYXRhLmxlbmd0aCwgdWk4RGF0YSA9IG5ldyBVaW50OEFycmF5KG5CeXRlcyk7XG4gICAgICAgICAgICBmb3IgKHZhciBuSWR4ID0gMDsgbklkeCA8IG5CeXRlczsgbklkeCsrKSB7XG4gICAgICAgICAgICAgIHVpOERhdGFbbklkeF0gPSBzRGF0YS5jaGFyQ29kZUF0KG5JZHgpICYgMHhmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VuZCh1aThEYXRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZhY3RvcnkuYmluZCh0aGlzKVxuICAgIH1cblxufSApLCB7IH0gKS5jb25zdHJ1Y3RvcigpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUoIHtcblxuICAgIGNyZWF0ZSggcmF3TmFtZSwgb3B0cyApIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuX3Byb2Nlc3NOYW1lKCByYXdOYW1lIClcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShcbiAgICAgICAgICAgIHRoaXMuVmlld3NbIG5hbWUgXSxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oIHtcbiAgICAgICAgICAgICAgICBEcmFnZ2VyOiB7IHZhbHVlOiB0aGlzLkRyYWdnZXIgfSxcbiAgICAgICAgICAgICAgICBIZWFkZXI6IHsgdmFsdWU6IHRoaXMuSGVhZGVyIH0sXG4gICAgICAgICAgICAgICAgVG9hc3Q6IHsgdmFsdWU6IHRoaXMuVG9hc3QgfSxcbiAgICAgICAgICAgICAgICBkb2N1bWVudE5hbWU6IHsgdmFsdWU6IHJhd05hbWUgfSxcbiAgICAgICAgICAgICAgICBuYW1lOiB7IHZhbHVlOiBuYW1lIH0sXG4gICAgICAgICAgICAgICAgZmFjdG9yeTogeyB2YWx1ZTogdGhpcyB9LFxuICAgICAgICAgICAgICAgIHJhbmdlOiB7IHZhbHVlOiB0aGlzLnJhbmdlIH0sXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHsgdmFsdWU6IHRoaXMuVGVtcGxhdGVzWyBuYW1lIF0gfSxcbiAgICAgICAgICAgICAgICB1c2VyOiB7IHZhbHVlOiB0aGlzLlVzZXIgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgICkuY29uc3RydWN0b3IoIG9wdHMgKVxuICAgIH0sXG5cbiAgICBfcHJvY2Vzc05hbWUoIG5hbWUgKSB7XG4gICAgICAgIGxldCBoeXBoZW4gPSBuYW1lLmluZGV4T2YoJy0nKVxuICAgICAgICBpZiggaHlwaGVuICE9PSAtMSApIHJldHVybiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSwgaHlwaGVuICkgKyBuYW1lLmNoYXJBdChoeXBoZW4gKyAxKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggaHlwaGVuICsgMiApXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSlcbiAgICB9LFxuXG59LCB7XG4gICAgRHJhZ2dlcjogeyB2YWx1ZTogcmVxdWlyZSgnLi4vdmlld3MvRHJhZ2dlcicpIH0sXG4gICAgSGVhZGVyOiB7IHZhbHVlOiByZXF1aXJlKCcuLi92aWV3cy9IZWFkZXInKSB9LFxuICAgIFRlbXBsYXRlczogeyB2YWx1ZTogcmVxdWlyZSgnLi4vLlRlbXBsYXRlTWFwJykgfSxcbiAgICBUb2FzdDogeyB2YWx1ZTogcmVxdWlyZSgnLi4vdmlld3MvVG9hc3QnKSB9LFxuICAgIFVzZXI6IHsgdmFsdWU6IHJlcXVpcmUoJy4uL21vZGVscy9Vc2VyJykgfSxcbiAgICBWaWV3czogeyB2YWx1ZTogcmVxdWlyZSgnLi4vLlZpZXdNYXAnKSB9XG59IClcbiIsInZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcblxucmVxdWlyZSgnLi9wb2x5ZmlsbCcpXG5cbndpbmRvdy4kID0gd2luZG93LmpRdWVyeSA9ICRcbndpbmRvdy5pbml0R01hcCA9ICgpID0+IHRydWVcblxucmVxdWlyZSgnYm9vdHN0cmFwJylcbnJlcXVpcmUoJy4vcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXInKVxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICAgIHJlcXVpcmUoJy4vcm91dGVyJykuaW5pdGlhbGl6ZSgpXG4gICAgcmVxdWlyZSgnLi92aWV3cy9tb2RhbCcpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTmFtZScsXG4gICAgICAgICAgICByYW5nZTogJ1N0cmluZycsXG4gICAgICAgICAgICBlcnJvcjogJ1BsZWFzZSBlbnRlciBhIG5hbWUgd2l0aCBubyBzcGFjZXMuJyxcbiAgICAgICAgICAgIHZhbGlkYXRlOiB2YWwgPT4gdmFsLnRyaW0oKSAhPT0gJycgJiYgIS9cXHMvLnRlc3QodmFsKSxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB7IH1cbiAgICAgICAgfVxuICAgIF0sXG5cbiAgICBtZXRhOiB7XG4gICAgICAgIGtleTogJ25hbWUnXG4gICAgfSxcblxuICAgIHJlc291cmNlOiAnQ29sbGVjdGlvbidcbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QuYXNzaWduKCB7IH0sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIGRhdGE6IHtcbiAgICAgICAgY3VycmVudENvbGxlY3Rpb246ICdWaWV3cycsXG4gICAgICAgIGN1cnJlbnRWaWV3OiAnJ1xuICAgIH1cblxufSApIClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0LmFzc2lnbiggeyB9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBwYXJzZTogcmVzcG9uc2UgPT4gcmVzcG9uc2VbMF1cblxufSApLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnY29udGFjdGluZm8nIH0gfSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBkYXlPZldlZWtNYXA6IHJlcXVpcmUoJy4vRGF5T2ZXZWVrJyksXG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5tYXAoIHJvdyA9PiBPYmplY3QuYXNzaWduKCByb3csIHtcbiAgICAgICAgICAgIGRheU9mV2VlazogdGhpcy5kYXlPZldlZWtNYXBbIHJvdy5kYXlvZndlZWsgXSxcbiAgICAgICAgICAgIHN0YXJ0dGltZTogdGhpcy5tb21lbnQoIFsgdGhpcy5tb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgcm93LnN0YXJ0dGltZSBdLmpvaW4oJyAnKSApLmZvcm1hdCgnaDptbUEnKSxcbiAgICAgICAgICAgIGVuZHRpbWU6IHRoaXMubW9tZW50KCBbIHRoaXMubW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJyksIHJvdy5lbmR0aW1lIF0uam9pbignICcpICkuZm9ybWF0KCdoOm1tQScpXG4gICAgICAgIH0gKSApXG4gICAgfSxcblxuICAgIHJlc291cmNlOiBcImRlbGl2ZXJ5cm91dGVcIlxuXG59ICkiLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBhY3Rpb25zOiBbXG4gICAgICAgICdBZGp1c3RtZW50JyxcbiAgICAgICAgJ1BheW1lbnQnLFxuICAgICAgICAnUmVpbWJ1cnNlbWVudCcsXG4gICAgICAgICdTZWFzb24gU2lnbnVwJ1xuICAgIF0sXG5cbiAgICBhdHRyaWJ1dGVzOiBbICdhY3Rpb24nLCAndmFsdWUnLCAnY2hlY2tOdW1iZXInLCAnY3JlYXRlZCcsICdkZXNjcmlwdGlvbicgXSxcblxuICAgIGdldEJhbGFuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEucmVkdWNlKCAoIG1lbW8sIGRhdHVtICkgPT4ge1xuICAgICAgICAgICAgaWYoIGRhdHVtLmFjdGlvbiA9PT0gJ1BheW1lbnQnICkgbWVtbyAtPSBkYXR1bS52YWx1ZVxuICAgICAgICAgICAgZWxzZSBtZW1vICs9IGRhdHVtLnZhbHVlXG4gICAgICAgICAgICByZXR1cm4gbWVtb1xuICAgICAgICB9LCAwIClcbiAgICB9LFxuXG4gICAgaXNOZWdhdGl2ZSggcm93ICkge1xuICAgICAgICBpZiggcm93LmFjdGlvbiA9PT0gJ1BheW1lbnQnICkgcmV0dXJuIHRydWVcblxuICAgICAgICBpZiggcm93LmFjdGlvbiA9PT0gJ0FkanVzdG1lbnQnICYmIHJvdy52YWx1ZSA8IDAgKSByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJlc3BvbnNlID0gcmVzcG9uc2UubWFwKCByb3cgPT4gdGhpcy5wYXJzZU9uZSggcm93ICkgKVxuXG4gICAgICAgIGlmKCB0aGlzLnNvcnRBdHRyICkgcmVzcG9uc2Uuc29ydCggKCBhLCBiICkgPT4gYVsgdGhpcy5zb3J0QXR0ciBdID4gYlsgdGhpcy5zb3J0QXR0ciBdIClcblxuICAgICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICB9LFxuXG4gICAgcGFyc2VPbmUoIGRhdHVtICkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIGRhdHVtLFxuICAgICAgICAgICAgeyBpc05lZ2F0aXZlOiB0aGlzLmlzTmVnYXRpdmUoIGRhdHVtICkgfSxcbiAgICAgICAgICAgIHsgY3JlYXRlZDogdHlwZW9mIGRhdHVtLmNyZWF0ZWQgPT09ICdvYmplY3QnID8gZGF0dW0uY3JlYXRlZC5yYXcgOiBkYXR1bS5jcmVhdGVkIH1cbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICByZXNvdXJjZTogJ2NzYVRyYW5zYWN0aW9uJyxcblxuICAgIHNvcnRBdHRyOiAnY3JlYXRlZCdcblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBTaGFyZUdyb3VwRHJvcG9mZnM6IHJlcXVpcmUoJy4vU2hhcmVHcm91cERyb3BvZmYnKSxcblxuICAgIGdldEN1cnJlbnRHcm91cERyb3BvZmZzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5TaGFyZUdyb3VwRHJvcG9mZnMuZ2V0KCB7IHF1ZXJ5OiB7XG4gICAgICAgICAgICBzaGFyZWlkOiB0aGlzLmRhdGEuaWQsXG4gICAgICAgICAgICBncm91cGRyb3BvZmZpZDogeyBvcGVyYXRpb246ICdqb2luJywgdmFsdWU6IHsgdGFibGU6ICdncm91cGRyb3BvZmYnLCBjb2x1bW46ICdpZCcgfSB9XG4gICAgICAgIH0gfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICB0aGlzLlNoYXJlR3JvdXBEcm9wb2Zmcy5kYXRhLm1hcCggZGF0dW0gPT4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbigge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBkYXR1bVsgJ2dyb3VwZHJvcG9mZi5uYW1lJyBdLFxuICAgICAgICAgICAgICAgICAgICB2ZW51ZTogZGF0dW1bICdncm91cGRyb3BvZmYudmVudWUnIF0sXG4gICAgICAgICAgICAgICAgICAgIHN0cmVldDogZGF0dW1bICdncm91cGRyb3BvZmYuc3RyZWV0JyBdLFxuICAgICAgICAgICAgICAgICAgICBjaXR5U3RhdGVaaXA6IGRhdHVtWyAnZ3JvdXBkcm9wb2ZmLmNpdHlTdGF0ZVppcCcgXSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGRhdHVtLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICBob3VyczogYCR7ZGF0dW0uZGF5b2Z3ZWVrfSAke2RhdHVtLnN0YXJ0dGltZX0gLSAke2RhdHVtLmVuZHRpbWV9YFxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgKVxuICAgICAgICApIClcbiAgICB9LFxuXG4gICAgZ2V0U2l6ZU9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEucHJvZHVjZU9wdGlvbnMuZmlsdGVyKCBvcHRpb24gPT4gL3NpemUvaS50ZXN0KCBvcHRpb24ucHJvbXB0ICkgKVxuICAgIH0sXG5cbiAgICByZXNvdXJjZTogJ2N1cnJlbnRTaGFyZSdcblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgTWVtYmVyOiByZXF1aXJlKCcuL01lbWJlcicpLFxuICAgIFBlcnNvbjogcmVxdWlyZSgnLi9QZXJzb24nKSxcblxuICAgIHBhcnNlKCByZXNwb25zZSApIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm1hcCggcm93ID0+XG4gICAgICAgICAgICBPYmplY3Qua2V5cyggcm93ICkucmVkdWNlKFxuICAgICAgICAgICAgICAgICggbWVtbywga2V5ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGtleS5pbmRleE9mKCcuJylcbiAgICAgICAgICAgICAgICAgICAgbWVtb1sga2V5LnNsaWNlKDAsIGluZGV4KSBdLmRhdGFbIGtleS5zbGljZSggaW5kZXggKyAxICkgXSA9IHJvd1trZXldXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZW1vXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IG1lbWJlcjogT2JqZWN0LmNyZWF0ZSggdGhpcy5NZW1iZXIsIHsgZGF0YTogeyB2YWx1ZToge30gfSB9ICksXG4gICAgICAgICAgICAgICAgICBwZXJzb246IE9iamVjdC5jcmVhdGUoIHRoaXMuUGVyc29uLCB7IGRhdGE6IHsgdmFsdWU6IHt9IH0gfSApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIHJlc291cmNlOiAncGVyc29uJ1xuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIDA6ICdTdW5kYXknLFxuICAgIDE6ICdNb25kYXknLFxuICAgIDI6ICdUdWVzZGF5JyxcbiAgICAzOiAnV2VkbmVzZGF5JyxcbiAgICA0OiAnVGh1cnNkYXknLFxuICAgIDU6ICdGcmlkYXknLFxuICAgIDY6ICdTYXR1cmRheSdcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIHBhcnNlKCByZXNwb25zZSApIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm1hcCggcm93ID0+XG4gICAgICAgICAgICBPYmplY3Qua2V5cyggcm93ICkucmVkdWNlKFxuICAgICAgICAgICAgICAgICggbWVtbywga2V5ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGtleS5pbmRleE9mKCcuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZSA9IGtleS5zbGljZSgwLCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgaWYoICFtZW1vWyB0YWJsZSBdICkgbWVtb1sgdGFibGUgXSA9IHsgfVxuICAgICAgICAgICAgICAgICAgICBtZW1vWyB0YWJsZSBdWyBrZXkuc2xpY2UoIGluZGV4ICsgMSApIF0gPSByb3dba2V5XVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtb1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeyB9XG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdtZW1iZXJzaGFyZWRlbGl2ZXJ5J1xuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi4vLi4vLi4vbGliL015T2JqZWN0JykucHJvdG90eXBlLCB7XG5cbiAgICBwYXJzZSggbW9tZW50ICkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IG1vbWVudC5kYXlPZlllYXIoKSxcbiAgICAgICAgICAgIGRhdGU6IG1vbWVudC5mb3JtYXQoJ1lZWVktTU0tREQnKSxcbiAgICAgICAgICAgIGRheU9mV2VlazogbW9tZW50LmZvcm1hdCgnZGRkJyksXG4gICAgICAgICAgICBkYXlPZk1vbnRoOiBtb21lbnQuZm9ybWF0KCdEJyksXG4gICAgICAgICAgICBlcG9jaDogbW9tZW50LnVuaXgoKSxcbiAgICAgICAgICAgIG1vbnRoOiBtb21lbnQuZm9ybWF0KCdNTU0nKSxcbiAgICAgICAgICAgIG1vbnRoTnVtOiBtb21lbnQuZm9ybWF0KCdNJylcbiAgICAgICAgfVxuICAgIH1cblxufSApIClcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi4vLi4vLi4vbGliL015T2JqZWN0JykucHJvdG90eXBlLCB7XG5cbiAgICBkYXlPZldlZWtNYXA6IHJlcXVpcmUoJy4vRGF5T2ZXZWVrJyksXG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKCByZXNwb25zZSwge1xuXG4gICAgICAgICAgICBkYXlPZldlZWs6IHRoaXMuZGF5T2ZXZWVrTWFwWyByZXNwb25zZS5kYXlvZndlZWsgXSxcbiAgICAgICAgICAgIHN0YXJ0dGltZTogdGhpcy5tb21lbnQoIFsgdGhpcy5tb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgcmVzcG9uc2Uuc3RhcnR0aW1lIF0uam9pbignICcpICkuZm9ybWF0KCdoOm1tQScpLFxuICAgICAgICAgICAgZW5kdGltZTogdGhpcy5tb21lbnQoIFsgdGhpcy5tb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgcmVzcG9uc2UuZW5kdGltZSBdLmpvaW4oJyAnKSApLmZvcm1hdCgnaDptbUEnKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgdXJsUm9vdDogXCIvZGVsaXZlcnlyb3V0ZVwiXG59ICkgKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgYXR0cmlidXRlczoge1xuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgfSxcblxuICAgIG1ldGE6IHtcbiAgICAgICAga2V5OiAnX2lkJyxcbiAgICB9LFxuXG4gICAgdG9MaXN0KCBkb2N1bWVudCApIHtcbiAgICAgICAgZG9jdW1lbnQgPSBkb2N1bWVudCB8fCB0aGlzLmRhdGFcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKCBkb2N1bWVudCApLnNvcnQoKS5tYXAoIGtleSA9PiAoIHsga2V5LCB2YWx1ZTogZG9jdW1lbnRbIGtleSBdIH0gKSApXG4gICAgfSxcblxuICAgIHRvT2JqKCkge1xuICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLnJlZHVjZXIoIHRoaXMuZGF0YSwgZGF0dW0gPT4gKCB7IFsgZGF0dW0ua2V5IF06IGRhdHVtLnZhbHVlIH0gKSApXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi4vLi4vLi4vbGliL015T2JqZWN0JykucHJvdG90eXBlLCB7XG4gXG4gICAgZGF5T2ZXZWVrTWFwOiByZXF1aXJlKCcuL0RlbGl2ZXJ5Um91dGUnKS5wcm90b3R5cGUuZGF5T2ZXZWVrTWFwLFxuXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5vbiggJ2NoYW5nZTpkYXlvZndlZWsnLCAoKSA9PiB0aGlzLnVwZGF0ZVJlYWRhYmxlRGF5KCkgKVxuICAgIH0sXG5cbiAgICB1cGRhdGVSZWFkYWJsZURheSgpIHtcbiAgICAgICAgdGhpcy5zZXQoIHsgZGF5T2ZXZWVrOiB0aGlzLmRheU9mV2Vla01hcFsgdGhpcy5nZXQoJ2RheW9md2VlaycpIF0gfSApXG4gICAgfVxuXG59ICkgKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgQ3NhRGVsaXZlcnk6IHJlcXVpcmUoJy4vQ3NhRGVsaXZlcnknKSxcblxuICAgIGdldEhvdXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Dc2FEZWxpdmVyeS5nZXQoIHsgcXVlcnk6IHsgbGFiZWw6ICdmYXJtJyB9IH0gKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmFybVBpY2t1cCA9IHRoaXMuQ3NhRGVsaXZlcnkuZGF0YVswXVxuICAgICAgICAgICAgdGhpcy5kYXRhWzBdLmhvdXJzID0gYCR7ZmFybVBpY2t1cC5kYXlPZldlZWt9ICR7ZmFybVBpY2t1cC5zdGFydHRpbWV9IC0gJHtmYXJtUGlja3VwLmVuZHRpbWV9YFxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIH0gKSAgICAgICAgIFxuICAgIH0sXG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5tYXAoIHJvdyA9PiBPYmplY3QuYXNzaWduKCB7XG4gICAgICAgICAgICBuYW1lOiAnUGljay11cCBmcm9tIG91ciBmYXJtIScsXG4gICAgICAgICAgICBzdHJlZXQ6IHJvdy5mYXJtcGlja3VwLnNwbGl0KCcsJylbMF0sXG4gICAgICAgICAgICBjaXR5U3RhdGVaaXA6IHJvdy5jaXR5U3RhdGVaaXAsXG4gICAgICAgICAgICBsb2NhdGlvbjogSlNPTi5wYXJzZSggcm93LmxvY2F0aW9uICkuY29vcmRpbmF0ZXNcbiAgICAgICAgfSApIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdjb250YWN0aW5mbydcblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UubWFwKCByb3cgPT4gcm93LmxvY2F0aW9uXG4gICAgICAgICAgICA/IE9iamVjdC5hc3NpZ24oIHJvdywgeyBsb2NhdGlvbjogSlNPTi5wYXJzZSggcm93LmxvY2F0aW9uICkuY29vcmRpbmF0ZXMgfSApXG4gICAgICAgICAgICA6IHJvd1xuICAgICAgICApXG4gICAgfSxcblxuICAgIHJlc291cmNlOiAnZmFybWVybWFya2V0J1xuXG59ICkiLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICByZXNvdXJjZTogJ2Zvb2QnXG5cbn0gKSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIHtcblxuICAgIE1vbWVudDogcmVxdWlyZSgnbW9tZW50JyksXG5cbiAgICBEYXlPZldlZWtIYXNoOiB7XG4gICAgICAgIDA6ICdTdW5kYXknLFxuICAgICAgICAxOiAnTW9uZGF5JyxcbiAgICAgICAgMjogJ1R1ZXNkYXknLFxuICAgICAgICAzOiAnV2VkbmVzZGF5JyxcbiAgICAgICAgNDogJ1RodXJzZGF5JyxcbiAgICAgICAgNTogJ0ZyaWRheScsXG4gICAgICAgIDY6ICdTYXR1cmRheSdcbiAgICB9LFxuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuXG4gICAgICAgIE9iamVjdC5rZXlzKCByZXNwb25zZSApLmZvckVhY2goIGtleSA9PiB7XG4gICAgICAgICAgICB2YXIgaXNPYmplY3QgPSAoIHR5cGVvZiByZXNwb25zZVtrZXldID09PSAnb2JqZWN0JyApID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCByZXNwb25zZVsga2V5IF0gPT09IG51bGwgfHwgKCBpc09iamVjdCAmJiByZXNwb25zZVtrZXldLnJhdyA9PT0gbnVsbCApICkgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBpc09iamVjdCAmJiByZXNwb25zZVtrZXldLnR5cGUgPT09ICdkYXRldGltZScgKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2Vba2V5XS52YWx1ZSA9IHRoaXMuTW9tZW50KCByZXNwb25zZVtrZXldLnJhdyApLmZvcm1hdCgnZGRkZCwgTU1NTSBEbyBZWVlZLCBoOm1tOnNzIGEnKSB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBpc09iamVjdCAmJiByZXNwb25zZVtrZXldLnR5cGUgPT09ICdkYXRlJyApIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVtrZXldLnZhbHVlID0gdGhpcy5Nb21lbnQoIHJlc3BvbnNlW2tleV0ucmF3ICkuZm9ybWF0KCdkZGRkLCBNTU1NIERvIFlZWVknKSB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBpc09iamVjdCAmJiByZXNwb25zZVtrZXldLnR5cGUgPT09ICd0aW1lJyApIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVtrZXldLnZhbHVlID0gdGhpcy5Nb21lbnQoIFsgdGhpcy5Nb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgcmVzcG9uc2VbIGtleSBdLnJhdyBdLmpvaW4oJyAnKSApLmZvcm1hdCgnaDptbUEnKSB9XG5cbiAgICAgICAgICAgIGlmKCBrZXkgPT09ICdkYXlvZndlZWsnICkgeyByZXNwb25zZVsga2V5IF0gPSB7IHJhdzogcmVzcG9uc2Vba2V5XSwgdmFsdWU6IHRoaXMuRGF5T2ZXZWVrSGFzaFsgcmVzcG9uc2VbIGtleSBdIF0gfSB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZVxuICAgIH1cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgYXR0cmlidXRlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBga2V5LSR7bmV3IERhdGUoKS5nZXRUaW1lKCl9YCxcbiAgICAgICAgICAgIG5hbWU6ICdrZXknLFxuICAgICAgICAgICAgbGFiZWw6ICdLZXknXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICd2YWx1ZScsXG4gICAgICAgICAgICBuYW1lOiAndmFsdWUnLFxuICAgICAgICAgICAgbGFiZWw6ICdWYWx1ZSdcbiAgICAgICAgfVxuICAgIF0sXG5cbiAgICBkYXRhOiB7XG4gICAgfSxcblxuICAgIGlzRWRpdGFibGUoIGtleSApIHsgcmV0dXJuIGtleSAhPT0gJ19pZCcgfVxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgIHsgbmFtZTogJ2Zhcm1lck1hcmtldCcsIGVsOiAnZmFybWVyTWFya2V0c0xpc3QnLCBsYWJlbDogXCJGYXJtZXIncyBNYXJrZXRcIiwgY29sb3I6ICcjZWQxYzI0JyB9LFxuICAgICAgICB7IG5hbWU6ICdyZXRhaWxPdXRsZXQnLCBlbDogJ3JldGFpbE91dGxldHNMaXN0JywgbGFiZWw6ICdSZXRhaWwgT3V0bGV0JywgY29sb3I6ICcjZmZkZDE0JyB9LFxuICAgICAgICB7IG5hbWU6ICdyZXN0YXVyYW50JywgZWw6ICdyZXN0YXVyYW50c0xpc3QnLCBsYWJlbDogJ1Jlc3RhdXJhbnQnLCBjb2xvcjogJyMyMzFmMjAnIH0sXG4gICAgICAgIHsgbmFtZTogJ2dyb3VwTG9jYXRpb24nLCBlbDogJ2dyb3VwTG9jYXRpb25zTGlzdCcsIGxhYmVsOiAnR3JvdXAgTG9jYXRpb24nLCBjb2xvcjogJyNmODk0MWUnIH0sXG4gICAgICAgIHsgbmFtZTogJ2RlbGl2ZXJ5UmFuZ2UnLCBsYWJlbDogJ0RlbGl2ZXJ5IFJhbmdlJywgY29sb3I6ICcjZWQxYzI0JyB9LFxuICAgICAgICB7IG5hbWU6ICdmYXJtUGlja3VwJywgZWw6ICdncm91cExvY2F0aW9uc0xpc3QnLCBsYWJlbDogJ1BhdGNod29yayBHYXJkZW5zJ31cbiAgICBdLFxuXG4gICAgZGF0YToge1xuICAgICAgICBkZWxpdmVyeVJhbmdlQ29vcmRzOiBbXG4gICAgICAgICAgICB7IGxhdDogMzkuODcxNDM1LCBsbmc6IC04NC4zNjc4ODAgfSxcbiAgICAgICAgICAgIHsgbGF0OiAzOS45MDExMzIsIGxuZzogLTg0LjA5NzI3OSB9LFxuICAgICAgICAgICAgeyBsYXQ6IDM5LjkyNjgzNCwgbG5nOiAtODMuODA2NDIwIH0sXG4gICAgICAgICAgICB7IGxhdDogMzkuODEzMTA2LCBsbmc6IC04My44MTU3NTUgfSxcbiAgICAgICAgICAgIHsgbGF0OiAzOS43MjY3ODQsIGxuZzogLTgzLjc4ODk0MSB9LFxuICAgICAgICAgICAgeyBsYXQ6IDM5LjYxNTAzMiwgbG5nOiAtODQuMDA4NzAyIH0sICAgICAgICAgICBcbiAgICAgICAgICAgIHsgbGF0OiAzOS41MjYyNjAsIGxuZzogLTg0LjA4ODkwOSB9LFxuICAgICAgICAgICAgeyBsYXQ6IDM5LjU0MjUyOCwgbG5nOiAtODQuMjkzNjYwIH0sXG4gICAgICAgICAgICB7IGxhdDogMzkuNjAxMjc4LCBsbmc6IC04NC4zNjk4NzcgfVxuICAgICAgICBdXG4gICAgfVxuXG59ICkiLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICByZXNvdXJjZTogJ21lbWJlcidcblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICByZXNvdXJjZTogJ21lbWJlcmZvb2RvbWlzc2lvbidcblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UubWFwKCByb3cgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gdGhpcy5tb21lbnQoIHJvd1sgJ3NoYXJlLnN0YXJ0ZGF0ZScgXSApLFxuICAgICAgICAgICAgICAgICAgZW5kRGF0ZSA9IHRoaXMubW9tZW50KCByb3dbICdzaGFyZS5lbmRkYXRlJyBdIClcblxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKCByb3cgKS5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgKCBtZW1vLCBrZXkgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0ga2V5LmluZGV4T2YoJy4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUgPSBrZXkuc2xpY2UoMCwgaW5kZXgpXG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIHRhYmxlICE9PSAnc2hhcmUnICkgcmV0dXJuIG1lbW9cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbiggbWVtbywgeyBbIGtleS5zbGljZSggaW5kZXggKyAxICkgXTogcm93W2tleV0gfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IE1hdGguY2VpbCggZW5kRGF0ZS5kaWZmKCBzdGFydERhdGUsICdkYXlzJyApIC8gNyApLFxuICAgICAgICAgICAgICAgICAgICAgICAgaHVtYW5FbmRkYXRlOiBlbmREYXRlLmZvcm1hdChcIk1NTSBEXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaHVtYW5TdGFydGRhdGU6IHN0YXJ0RGF0ZS5mb3JtYXQoXCJNTU0gRFwiKVxuICAgICAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgbWVtYmVyc2hhcmVpZDogcm93WyAnbWVtYmVyc2hhcmUuaWQnIF0gfVxuICAgICAgICAgICAgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdtZW1iZXJzaGFyZSdcbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLm1hcCggcm93ID0+XG4gICAgICAgICAgICBPYmplY3Qua2V5cyggcm93ICkucmVkdWNlKFxuICAgICAgICAgICAgICAgICggbWVtbywga2V5ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGtleS5pbmRleE9mKCcuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZSA9IGtleS5zbGljZSgwLCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgaWYoIHRhYmxlICE9PSAnc2hhcmVvcHRpb25vcHRpb24nICkgcmV0dXJuIG1lbW9cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbiggbWVtbywgeyBbIGtleS5zbGljZSggaW5kZXggKyAxICkgXTogcm93W2tleV0gfSApXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IHNoYXJlb3B0aW9uaWQ6IHJvd1sgJ21lbWJlcnNoYXJlb3B0aW9uLnNoYXJlb3B0aW9uaWQnIF0sIG1lbWJlcnNoYXJlb3B0aW9uaWQ6IHJvd1sgJ21lbWJlcnNoYXJlb3B0aW9uLmlkJyBdIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICByZXNvdXJjZTogJ21lbWJlcnNoYXJlb3B0aW9uJ1xufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBkYXRhOiBbXG4gICAgICAgIHsgbGFiZWw6ICdBYm91dCcsIG5hbWU6ICdhYm91dCcgfSxcbiAgICAgICAgeyBsYWJlbDogJ0NTQSBQcm9ncmFtJywgbmFtZTogJ2NzYScgfSxcbiAgICAgICAgeyBsYWJlbDogJ0xvY2F0aW9ucycsIG5hbWU6ICdsb2NhdGlvbnMnIH0sXG4gICAgICAgIHsgbGFiZWw6ICdTaWduIFVwJywgbmFtZTogJ3NpZ24tdXAnIH0sXG4gICAgICAgIHsgbGFiZWw6ICdHZXQgSW52b2x2ZWQnLCBuYW1lOiAnZ2V0LWludm9sdmVkJyB9LFxuICAgICAgICB7IGxhYmVsOiAnQ29udGFjdCcsIG5hbWU6ICdjb250YWN0JyB9XG4gICAgXVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UubWFwKCByb3cgPT5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKCByb3cgKS5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgKCBtZW1vLCBrZXkgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0ga2V5LmluZGV4T2YoJy4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlID0ga2V5LnNsaWNlKDAsIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICBpZiggdGFibGUgIT09ICdzaGFyZW9wdGlvbicgKSByZXR1cm4gbWVtb1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKCBtZW1vLCB7IFsga2V5LnNsaWNlKCBpbmRleCArIDEgKSBdOiByb3dba2V5XSB9IClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgfSxcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICByZXNvdXJjZTogJ3NoYXJlb3B0aW9uc2hhcmUnXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIHJlc291cmNlOiAncGVyc29uJ1xuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIHsgaWRBdHRyaWJ1dGU6IFwiQGlkXCIgfSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5tYXAoIHJvdyA9PiByb3cubG9jYXRpb25cbiAgICAgICAgICAgID8gT2JqZWN0LmFzc2lnbiggcm93LCB7IGxvY2F0aW9uOiBKU09OLnBhcnNlKCByb3cubG9jYXRpb24gKS5jb29yZGluYXRlcyB9IClcbiAgICAgICAgICAgIDogcm93XG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdyZXN0YXVyYW50J1xuXG59ICkiLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5tYXAoIHJvdyA9PiByb3cubG9jYXRpb25cbiAgICAgICAgICAgID8gT2JqZWN0LmFzc2lnbiggcm93LCB7IGxvY2F0aW9uOiBKU09OLnBhcnNlKCByb3cubG9jYXRpb24gKS5jb29yZGluYXRlcyB9IClcbiAgICAgICAgICAgIDogcm93XG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdyZXRhaWxvdXRsZXQnXG5cbn0gKSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi4vLi4vLi4vbGliL015T2JqZWN0JykucHJvdG90eXBlLCB7XG5cbiAgICBDb2xsZWN0aW9uOiByZXF1aXJlKCdiYWNrYm9uZScpLkNvbGxlY3Rpb24sXG5cbiAgICBEZWxpdmVyeURhdGU6IHJlcXVpcmUoJy4vRGVsaXZlcnlEYXRlJyksXG5cbiAgICBEcm9wb2ZmOiByZXF1aXJlKCcuL0Ryb3BvZmYnKSxcblxuICAgIGRheU9mV2Vla01hcDogcmVxdWlyZSgnLi9EZWxpdmVyeVJvdXRlJykucHJvdG90eXBlLmRheU9mV2Vla01hcCxcblxuICAgIGRldGVybWluZU5leHREZWxpdmVyeUN1dG9mZiggZGF5T2ZXZWVrICkge1xuICAgICAgICBjb25zdCBuZXh0RGVsaXZlcnlEYXkgPSBkYXlPZldlZWsgPiA0ID8gMTUgOiA4XG4gICAgICAgIHJldHVybiB0aGlzLm1vbWVudCgpLmRheSggbmV4dERlbGl2ZXJ5RGF5ICkuaG91cigwKS5taW51dGUoMCkuc2Vjb25kKDApLm1pbGxpc2Vjb25kKDApXG4gICAgfSxcblxuICAgIGdldERlbGl2ZXJ5RGF0ZXMoKSB7XG4gICAgICAgIHZhciBkYXRlcyA9IFsgXSxcbiAgICAgICAgICAgIG5vdyA9IHRoaXMubW9tZW50KCksXG4gICAgICAgICAgICBkZWxpdmVyeURheSA9IHRoaXMuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JykuZGF5b2Z3ZWVrLFxuICAgICAgICAgICAgZGVsaXZlcnlEYXRlID0gdGhpcy5tb21lbnQoIHRoaXMuZ2V0KCdzdGFydGRhdGUnKSApLFxuICAgICAgICAgICAgZW5kRGF0ZSA9IHRoaXMubW9tZW50KCB0aGlzLmdldCgnZW5kZGF0ZScpICksXG4gICAgICAgICAgICBuZXh0RGVsaXZlcnlDdXRvZmYgPSB0aGlzLmRldGVybWluZU5leHREZWxpdmVyeUN1dG9mZiggbm93LmRheSgpICksXG4gICAgICAgICAgICBzdGFydERheSA9IHN0YXJ0RGF5ID0gZGVsaXZlcnlEYXRlLmRheSgpXG5cbiAgICAgICAgaWYoICEgTnVtYmVyLmlzSW50ZWdlciggZGVsaXZlcnlEYXkgKSApIHJldHVybiBuZXcgdGhpcy5Db2xsZWN0aW9uKFtdKVxuXG4gICAgICAgIHdoaWxlKCBzdGFydERheSAhPSBkZWxpdmVyeURheSApIHtcbiAgICAgICAgICAgIGRlbGl2ZXJ5RGF0ZS5hZGQoIDEsICdkYXlzJyApXG4gICAgICAgICAgICBzdGFydERheSA9IHRoaXMubW9tZW50KCBkZWxpdmVyeURhdGUgKS5kYXkoKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB3aGlsZSggZW5kRGF0ZS5kaWZmKCBkZWxpdmVyeURhdGUsICdkYXlzJyApID49IDAgKSB7XG4gICAgICAgICAgICB2YXIgbW9kZWwgPSBuZXcgdGhpcy5EZWxpdmVyeURhdGUoIGRlbGl2ZXJ5RGF0ZSwgeyBwYXJzZTogdHJ1ZSB9IClcbiAgICAgICAgICAgIGlmKCBkZWxpdmVyeURhdGUuZGlmZiggbmV4dERlbGl2ZXJ5Q3V0b2ZmICkgPCAwICkgbW9kZWwuc2V0KCB7IHVuc2VsZWN0YWJsZTogdHJ1ZSB9IClcbiAgICAgICAgICAgIGRhdGVzLnB1c2goIG1vZGVsIClcbiAgICAgICAgICAgIGRlbGl2ZXJ5RGF0ZS5hZGQoIDcsICdkYXlzJyApXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0KCB7IGRlbGl2ZXJ5RGF0ZXM6IG5ldyB0aGlzLkNvbGxlY3Rpb24oIGRhdGVzICkgfSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdkZWxpdmVyeURhdGVzJylcbiAgICB9LFxuXG4gICAgZ2V0RGVsaXZlcnlPcHRpb25zKCkge1xuXG4gICAgICAgIGlmKCB0aGlzLmhhcygnZGVsaXZlcnlvcHRpb25zJykgKSByZXR1cm4gdGhpcy5RKCB0aGlzLmdldCgnZGVsaXZlcnlvcHRpb25zJykgKVxuXG4gICAgICAgIHJldHVybiB0aGlzLlEoIG5ldyAoIHRoaXMuQ29sbGVjdGlvbi5leHRlbmQoIHsgdXJsOiBcIi9zaGFyZWRlbGl2ZXJ5b3B0aW9uXCIgfSApICkoKS5mZXRjaCggeyBkYXRhOiB7IHNoYXJlaWQ6IHRoaXMuaWQgfSB9ICkgKVxuICAgICAgICAudGhlbiggbWFwcGluZ3MgPT4ge1xuICAgICAgICAgICAgdmFyIGRlbGl2ZXJ5T3B0aW9ucyA9IG5ldyAoIHRoaXMuQ29sbGVjdGlvbi5leHRlbmQoIHsgdXJsOiBcIi9kZWxpdmVyeW9wdGlvblwiIH0gKSApKClcblxuICAgICAgICAgICAgdGhpcy5zZXQoIHsgZGVsaXZlcnlvcHRpb25zOiBkZWxpdmVyeU9wdGlvbnMgfSApXG5cbiAgICAgICAgICAgIGlmKCBtYXBwaW5ncy5sZW5ndGggPT09IDAgKSByZXR1cm4gdGhpcy5RKClcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUSggZGVsaXZlcnlPcHRpb25zLmZldGNoKCB7IGRhdGE6IHsgaWQ6IG1hcHBpbmdzLm1hcCggcmVjb3JkID0+IHJlY29yZC5kZWxpdmVyeW9wdGlvbmlkICkuam9pbignLCcpIH0gfSApIClcbiAgICAgICAgfSApXG4gICAgICAgIC5mYWlsKCBlID0+IGNvbnNvbGUubG9nKCBcIkdldHRpbmcgRGVsaXZlcnkgT3B0aW9ucyA6IFwiICsgZS5zdGFjayB8fCBlICkgKVxuICAgIH0sXG5cbiAgICBnZXRHcm91cERyb3BvZmZzKCkge1xuICAgICAgICB2YXIgbWFwcGluZ3MgPSBuZXcgKCB0aGlzLkNvbGxlY3Rpb24uZXh0ZW5kKCB7IHVybDogXCIvc2hhcmVncm91cGRyb3BvZmZcIiB9ICkgKSgpXG5cbiAgICAgICAgaWYoIHRoaXMuaGFzKCdncm91cGRyb3BvZmZzJykgKSByZXR1cm4gdGhpcy5RKCB0aGlzLmdldCgnZ3JvdXBkcm9wb2ZmcycpIClcblxuICAgICAgICByZXR1cm4gdGhpcy5RKCBtYXBwaW5ncy5mZXRjaCggeyBkYXRhOiB7IHNoYXJlaWQ6IHRoaXMuaWQgfSB9ICkgKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgdmFyIGdyb3VwRHJvcG9mZnNcblxuICAgICAgICAgICAgaWYoIG1hcHBpbmdzLmxlbmd0aCA9PT0gMCApIHJldHVyblxuXG4gICAgICAgICAgICBncm91cERyb3BvZmZzID0gbmV3ICggdGhpcy5Db2xsZWN0aW9uLmV4dGVuZCggeyBtb2RlbDogdGhpcy5Ecm9wb2ZmLCB1cmw6IFwiL2dyb3VwZHJvcG9mZlwiIH0gKSApKClcbiAgICAgICAgICAgIHRoaXMuc2V0KCB7IGdyb3VwZHJvcG9mZnM6IGdyb3VwRHJvcG9mZnMgfSApXG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLlEoIGdyb3VwRHJvcG9mZnMuZmV0Y2goIHsgZGF0YTogeyBpZDogbWFwcGluZ3MubWFwKCByZWNvcmQgPT4gcmVjb3JkLmdldCgnZ3JvdXBkcm9wb2ZmaWQnKSApLmpvaW4oJywnKSB9IH0gKSApXG4gICAgICAgIH0gKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiggbWFwcGluZ3MubGVuZ3RoID09PSAwICkgcmV0dXJuIHRoaXMuc2V0KCAnZ3JvdXBkcm9wb2ZmcycsIFtdIClcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmdldCgnZ3JvdXBkcm9wb2ZmcycpLmZvckVhY2goIGRyb3BvZmYgPT4geyBcbiAgICAgICAgICAgICAgICB2YXIgbWFwcGluZyA9IG1hcHBpbmdzLmZpbmQoIG1vZGVsID0+IG1vZGVsLmdldCgnZ3JvdXBkcm9wb2ZmaWQnKSA9PSBkcm9wb2ZmLmlkIClcblxuICAgICAgICAgICAgICAgIGRyb3BvZmYuc2V0KCB7XG4gICAgICAgICAgICAgICAgICAgIGRheW9md2VlazogbWFwcGluZy5nZXQoJ2RheW9md2VlaycpLFxuICAgICAgICAgICAgICAgICAgICBzdGFydHRpbWU6IHRoaXMudGltZVRvSHVtYW5UaW1lKCBtYXBwaW5nLmdldCgnc3RhcnR0aW1lJykgKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kdGltZTogdGhpcy50aW1lVG9IdW1hblRpbWUoIG1hcHBpbmcuZ2V0KCdlbmR0aW1lJykgKVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfSApIFxuICAgICAgICB9IClcbiAgICAgICAgLmZhaWwoIGUgPT4gY29uc29sZS5sb2coIFwiR2V0dGluZyBHcm91cCBEcm9wb2ZmcyA6IFwiICsgZS5zdGFjayB8fCBlICkgKVxuICAgIH0sXG5cbiAgICBnZXRTZWxlY3RlZERhdGVzKCkge1xuICAgICAgICB0aGlzLnNldCggeyBzZWxlY3RlZERhdGVzOlxuICAgICAgICAgICAgdGhpcy5fKCB0aGlzLmdldCgnZGVsaXZlcnlEYXRlcycpXG4gICAgICAgICAgICAgICAgLnJlamVjdCggZGVsaXZlcnlEYXkgPT4gZGVsaXZlcnlEYXkuZ2V0KCd1bnNlbGVjdGFibGUnKSApIClcbiAgICAgICAgICAgICAgICAucmVqZWN0KCBkZWxpdmVyeURheSA9PiB0aGlzLl8odGhpcy5nZXQoJ3NraXBEYXlzJykpLmNvbnRhaW5zKCBkZWxpdmVyeURheS5pZCApIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGdldFNoYXJlT3B0aW9ucygpIHtcbiAgICAgICAgXG4gICAgICAgIGlmKCB0aGlzLmhhcygnc2hhcmVvcHRpb25zJykgKSByZXR1cm4gdGhpcy5RKCB0aGlzLmdldCgnc2hhcmVvcHRpb25zJykgKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5RKCBuZXcgKCB0aGlzLkNvbGxlY3Rpb24uZXh0ZW5kKCB7IHVybDogXCIvc2hhcmVvcHRpb25zaGFyZVwiIH0gKSApKCkuZmV0Y2goIHsgZGF0YTogeyBzaGFyZWlkOiB0aGlzLmlkIH0gfSApIClcbiAgICAgICAgLnRoZW4oIG1hcHBpbmdzID0+IHtcbiAgICAgICAgICAgIHZhciBzaGFyZU9wdGlvbnNcblxuICAgICAgICAgICAgaWYoIG1hcHBpbmdzLmxlbmd0aCA9PT0gMCApIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzaGFyZU9wdGlvbnMgPSBuZXcgKCB0aGlzLkNvbGxlY3Rpb24uZXh0ZW5kKCB7IHVybDogXCIvc2hhcmVvcHRpb25cIiB9ICkgKSgpXG4gICAgICAgICAgICB0aGlzLnNldCggeyBzaGFyZW9wdGlvbnM6IHNoYXJlT3B0aW9ucyB9IClcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUSggc2hhcmVPcHRpb25zLmZldGNoKCB7IGRhdGE6IHsgaWQ6IG1hcHBpbmdzLm1hcCggcmVjb3JkID0+IHJlY29yZC5zaGFyZW9wdGlvbmlkICkuam9pbignLCcpIH0gfSApIClcbiAgICAgICAgfSApXG4gICAgICAgIC50aGVuKCAoKSA9PlxuICAgICAgICAgICAgdGhpcy5RLmFsbCggdGhpcy5nZXQoJ3NoYXJlb3B0aW9ucycpLm1hcCggc2hhcmVPcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgIHNoYXJlT3B0aW9uLnNldCggeyBvcHRpb25zOiBuZXcgKCB0aGlzLkNvbGxlY3Rpb24uZXh0ZW5kKCB7IGNvbXBhcmF0b3I6IHRoaXMuc2hhcmVPcHRpb25PcHRpb25Db21wYXJhdG9yLCB1cmw6IFwiL3NoYXJlb3B0aW9ub3B0aW9uXCIgfSApICkoKSB9IClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5RKCBzaGFyZU9wdGlvbi5nZXQoJ29wdGlvbnMnKS5mZXRjaCggeyBkYXRhOiB7IHNoYXJlb3B0aW9uaWQ6IHNoYXJlT3B0aW9uLmlkIH0gfSApIClcbiAgICAgICAgICAgIH0gKSApXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ2V0KCdzaGFyZW9wdGlvbnMnKS5jb21wYXJhdG9yID0gdGhpcy5zaGFyZU9wdGlvbkNvbXBhcmF0b3JcbiAgICAgICAgICAgIHRoaXMuZ2V0KCdzaGFyZW9wdGlvbnMnKS5zb3J0KClcbiAgICAgICAgfSApXG4gICAgICAgIC5mYWlsKCBlID0+IGNvbnNvbGUubG9nKCBcIkdldHRpbmcgU2hhcmUgT3B0aW9ucyA6IFwiICsgZS5zdGFjayB8fCBlICkgKVxuICAgIH0sXG5cbiAgICBtb25leVRvRmxvYXQoIG1vbmV5ICkgeyByZXR1cm4gcGFyc2VGbG9hdCggbW9uZXkucmVwbGFjZSgvXFwkfCwvZywgXCJcIikgKSB9LFxuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuICAgICAgICB2YXIgc3RhcnREYXRlID0gdGhpcy5tb21lbnQoIHJlc3BvbnNlLnN0YXJ0ZGF0ZSApLFxuICAgICAgICAgICAgZW5kRGF0ZSA9IHRoaXMubW9tZW50KCByZXNwb25zZS5lbmRkYXRlIClcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbiggcmVzcG9uc2UsIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBNYXRoLmNlaWwoIGVuZERhdGUuZGlmZiggc3RhcnREYXRlLCAnZGF5cycgKSAvIDcgKSxcbiAgICAgICAgICAgIGh1bWFuRW5kZGF0ZTogZW5kRGF0ZS5mb3JtYXQoXCJNTU0gRFwiKSxcbiAgICAgICAgICAgIGh1bWFuU3RhcnRkYXRlOiBzdGFydERhdGUuZm9ybWF0KFwiTU1NIERcIiksXG4gICAgICAgICAgICBzdGFydEVwb2NoOiBzdGFydERhdGUudW5peCgpXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBzaGFyZU9wdGlvbkNvbXBhcmF0b3IoIGEsIGIgKSB7XG4gICAgICAgIHZhciBtb25leVRvRmxvYXQgPSAoIG1vbmV5ICkgPT4gcGFyc2VGbG9hdCggbW9uZXkucmVwbGFjZSgvXFwkfCwvZywgXCJcIikgKSxcbiAgICAgICAgICAgIGFWYWwgPSBtb25leVRvRmxvYXQoIGEuZ2V0KCdvcHRpb25zJykuYXQoIGEuZ2V0KCdvcHRpb25zJykubGVuZ3RoIC0gMSApLmdldCgncHJpY2UnKSApLFxuICAgICAgICAgICAgYlZhbCA9IG1vbmV5VG9GbG9hdCggYi5nZXQoJ29wdGlvbnMnKS5hdCggYi5nZXQoJ29wdGlvbnMnKS5sZW5ndGggLSAxICkuZ2V0KCdwcmljZScpIClcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoIGFWYWwgPiBiVmFsIClcbiAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgIDogKCBiVmFsID4gYVZhbCApXG4gICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgOiAwXG4gICAgfSxcblxuICAgIHNoYXJlT3B0aW9uT3B0aW9uQ29tcGFyYXRvciggYSwgYiApIHtcbiAgICAgICAgdmFyIG1vbmV5VG9GbG9hdCA9ICggbW9uZXkgKSA9PiBwYXJzZUZsb2F0KCBtb25leS5yZXBsYWNlKC9cXCR8LC9nLCBcIlwiKSApLFxuICAgICAgICAgICAgYVZhbCA9IG1vbmV5VG9GbG9hdCggYS5nZXQoJ3ByaWNlJykgKSxcbiAgICAgICAgICAgIGJWYWwgPSBtb25leVRvRmxvYXQoIGIuZ2V0KCdwcmljZScpIClcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoIGFWYWwgPiBiVmFsIClcbiAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgOiAoIGJWYWwgPiBhVmFsIClcbiAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgOiAwXG4gICAgfSxcblxuICAgIHRpbWVUb0h1bWFuVGltZSggdGltZSApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9tZW50KCBbICcyMDE2LTEyLTEyJywgdGltZSBdLmpvaW4oJyAnKSApLmZvcm1hdCgnaDptbUEnKSBcbiAgICB9XG5cbn0gKSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBkYXlPZldlZWtNYXA6IHJlcXVpcmUoJy4vRGF5T2ZXZWVrJyksXG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5tYXAoIHJvdyA9PlxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbiggcm93LCB7XG4gICAgICAgICAgICAgICAgZGF5b2Z3ZWVrOiB0aGlzLmRheU9mV2Vla01hcFsgcm93WyAnc2hhcmVncm91cGRyb3BvZmYuZGF5b2Z3ZWVrJyBdIHx8IHJvdy5kYXlvZndlZWsgXSxcbiAgICAgICAgICAgICAgICBzdGFydHRpbWU6IHRoaXMubW9tZW50KCBbIHRoaXMubW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJyksIHJvd1sgJ3NoYXJlZ3JvdXBkcm9wb2ZmLnN0YXJ0dGltZScgXSB8fCByb3cuc3RhcnR0aW1lIF0uam9pbignICcpICkuZm9ybWF0KCdoOm1tQScpLFxuICAgICAgICAgICAgICAgIGVuZHRpbWU6IHRoaXMubW9tZW50KCBbIHRoaXMubW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJyksIHJvd1sgJ3NoYXJlZ3JvdXBkcm9wb2ZmLmVuZHRpbWUnIF0gfHwgcm93LmVuZHRpbWUgXS5qb2luKCcgJykgKS5mb3JtYXQoJ2g6bW1BJyksXG4gICAgICAgICAgICAgICAgbG9jYXRpb246IHJvdy5sb2NhdGlvbiA/IEpTT04ucGFyc2UoIHJvdy5sb2NhdGlvbiApLmNvb3JkaW5hdGVzIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9IClcbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICByZXNvdXJjZTogJ3NoYXJlZ3JvdXBkcm9wb2ZmJ1xuXG59ICkiLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICByZXNvdXJjZTogJ3NoYXJlb3B0aW9ub3B0aW9uJ1xufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IG5ldyAoIHJlcXVpcmUoJ2JhY2tib25lJykuTW9kZWwuZXh0ZW5kKCB7XG5cbiAgICBkZWZhdWx0czogeyBzdGF0ZToge30gfSxcblxuICAgIGlzQWRtaW4oKSB7XG4gICAgICAgIGNvbnN0IHJvbGVzID0gdGhpcy5nZXQoJ3JvbGVzJylcblxuICAgICAgICBpZiggISBBcnJheS5pc0FycmF5KCByb2xlcyApICkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgcmV0dXJuIHJvbGVzLmluY2x1ZGVzKCAnYWRtaW4nIClcbiAgICB9LFxuXG4gICAgdXJsKCkgeyByZXR1cm4gXCIvdXNlclwiIH1cblxufSApICkoKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7IH0sIHJlcXVpcmUoJy4uLy4uLy4uL2xpYi9Nb2RlbCcpLCByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXIucHJvdG90eXBlLCB7XG5cbiAgICBYaHI6IHJlcXVpcmUoJy4uL1hocicpLFxuXG4gICAgYWRkKCBkYXR1bSApIHtcbiAgICAgICAgdGhpcy5kYXRhLnB1c2goIGRhdHVtIClcblxuICAgICAgICBpZiggdGhpcy5zdG9yZUJ5ICkgdGhpcy5fc3RvcmVPbmUoIGRhdHVtIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBkZWxldGUoKSB7XG4gICAgICAgIGNvbnN0IGtleVZhbHVlID0gdGhpcy5kYXRhWyB0aGlzLm1ldGEua2V5IF1cbiAgICAgICAgcmV0dXJuIHRoaXMuWGhyKCB7IG1ldGhvZDogJ0RFTEVURScsIHJlc291cmNlOiB0aGlzLnJlc291cmNlLCBpZDoga2V5VmFsdWUgfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLm1ldGEua2V5XG5cbiAgICAgICAgICAgIGlmKCBBcnJheS5pc0FycmF5KCB0aGlzLmRhdGEgKSApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXR1bSA9IHRoaXMuZGF0YS5maW5kKCBkYXR1bSA9PiBkYXR1bVsga2V5IF0gPT0ga2V5VmFsdWUgKVxuXG4gICAgICAgICAgICAgICAgaWYoIHRoaXMuc3RvcmUgKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLnN0b3JlICkuZm9yRWFjaCggYXR0ciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JlWyBhdHRyIF1bIGRhdHVtWyBhdHRyIF0gXSA9IHRoaXMuc3RvcmVbIGF0dHIgXVsgZGF0dW1bIGF0dHIgXSBdLmZpbHRlciggZGF0dW0gPT4gZGF0dW1bIGtleSBdICE9IGtleVZhbHVlIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzLnN0b3JlWyBhdHRyIF1bIGRhdHVtWyBhdHRyIF0gXS5sZW5ndGggPT09IDAgKSB7IHRoaXMuc3RvcmVbIGF0dHIgXVsgZGF0dW1bIGF0dHIgXSBdID0gdW5kZWZpbmVkIH1cbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhLmZpbHRlciggZGF0dW0gPT4gZGF0dW1bIGtleSBdICE9IGtleVZhbHVlIClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggdGhpcy5kYXRhIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGdldCggb3B0cz17IHF1ZXJ5Ont9IH0gKSB7XG4gICAgICAgIGlmKCBvcHRzLnF1ZXJ5IHx8IHRoaXMucGFnaW5hdGlvbiApIE9iamVjdC5hc3NpZ24oIG9wdHMucXVlcnksIHRoaXMucGFnaW5hdGlvbiApXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuWGhyKCB7IG1ldGhvZDogb3B0cy5tZXRob2QgfHwgJ2dldCcsIHJlc291cmNlOiB0aGlzLnJlc291cmNlLCBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfHwge30sIHFzOiBvcHRzLnF1ZXJ5ID8gSlNPTi5zdHJpbmdpZnkoIG9wdHMucXVlcnkgKSA6IHVuZGVmaW5lZCB9IClcbiAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHtcblxuICAgICAgICAgICAgaWYoIEFycmF5LmlzQXJyYXkoIHRoaXMuZGF0YSApICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YS5jb25jYXQoIG9wdHMucGFyc2UgPyBvcHRzLnBhcnNlKCByZXNwb25zZSwgb3B0cy5zdG9yZUJ5ICkgOiByZXNwb25zZSApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKCBvcHRzLnN0b3JlQnkgKSB0aGlzLl9yZXNldFN0b3JlKCBvcHRzLnN0b3JlQnkgKVxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMucGFyc2UgPyB0aGlzLnBhcnNlKCByZXNwb25zZSwgb3B0cy5zdG9yZUJ5ICkgOiByZXNwb25zZVxuICAgICAgICAgICAgICAgIGlmKCBvcHRzLnN0b3JlQnkgKSB0aGlzLl9zdG9yZSgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZ290JylcblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggcmVzcG9uc2UgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgZ2V0Q291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhociggeyBtZXRob2Q6ICdnZXQnLCByZXNvdXJjZTogdGhpcy5yZXNvdXJjZSwgaGVhZGVyczogdGhpcy5oZWFkZXJzIHx8IHt9LCBxczogSlNPTi5zdHJpbmdpZnkoIHsgY291bnRPbmx5OiB0cnVlIH0gKSB9IClcbiAgICAgICAgLnRoZW4oICggeyByZXN1bHQgfSApID0+IHtcbiAgICAgICAgICAgIHRoaXMubWV0YS5jb3VudCA9IHJlc3VsdFxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggcmVzdWx0IClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGdpdCggYXR0ciApIHsgcmV0dXJuIHRoaXMuZGF0YVsgYXR0ciBdIH0sXG5cbiAgICBtb25leVRvUmVhbCggcHJpY2UgKSB7IHJldHVybiBwYXJzZUZsb2F0KCBwcmljZS5yZXBsYWNlKCAvXFwkfCwvZywgXCJcIiApICkgfSxcblxuICAgIHBhdGNoKCBpZCwgZGF0YSApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWGhyKCB7IG1ldGhvZDogJ3BhdGNoJywgaWQsIHJlc291cmNlOiB0aGlzLnJlc291cmNlLCBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfHwge30sIGRhdGE6IEpTT04uc3RyaW5naWZ5KCBkYXRhIHx8IHRoaXMuZGF0YSApIH0gKVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBBcnJheS5pc0FycmF5KCB0aGlzLmRhdGEgKSApIHsgXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhID8gdGhpcy5kYXRhLmNvbmNhdCggcmVzcG9uc2UgKSA6IFsgcmVzcG9uc2UgXVxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLnN0b3JlICkgT2JqZWN0LmtleXMoIHRoaXMuc3RvcmUgKS5mb3JFYWNoKCBhdHRyID0+IHRoaXMuX3N0b3JlKCByZXNwb25zZSwgYXR0ciApIClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gcmVzcG9uc2VcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggcmVzcG9uc2UgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgX3B1dCgga2V5VmFsdWUsIGRhdGEgKSB7XG4gICAgICAgIGxldCBpdGVtID0gdGhpcy5kYXRhLmZpbmQoIGRhdHVtID0+IGRhdHVtWyB0aGlzLm1ldGEua2V5IF0gPT0ga2V5VmFsdWUgKTtcbiAgICAgICAgaWYoIGl0ZW0gKSBpdGVtID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgcHV0KCBpZCwgZGF0YSApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWGhyKCB7IG1ldGhvZDogJ3B1dCcsIGlkLCByZXNvdXJjZTogdGhpcy5yZXNvdXJjZSwgaGVhZGVyczogdGhpcy5oZWFkZXJzIHx8IHt9LCBkYXRhOiBKU09OLnN0cmluZ2lmeSggZGF0YSApIH0gKVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBBcnJheS5pc0FycmF5KCB0aGlzLmRhdGEgKSApIHsgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHJlc3BvbnNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHJlc3BvbnNlIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHBvc3QoIG1vZGVsICkge1xuICAgICAgICByZXR1cm4gdGhpcy5YaHIoIHsgbWV0aG9kOiAncG9zdCcsIHJlc291cmNlOiB0aGlzLnJlc291cmNlLCBoZWFkZXJzOiBPYmplY3QuYXNzaWduKCB7IHYyOiB0cnVlIH0sIHRoaXMuaGVhZGVycyB8fCB7fSApLCBkYXRhOiBKU09OLnN0cmluZ2lmeSggbW9kZWwgfHwgdGhpcy5kYXRhICkgfSApXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBBcnJheS5pc0FycmF5KCB0aGlzLmRhdGEgKSApIHsgXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhID8gdGhpcy5kYXRhLmNvbmNhdCggcmVzcG9uc2UgKSA6IFsgcmVzcG9uc2UgXVxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLnN0b3JlICkgT2JqZWN0LmtleXMoIHRoaXMuc3RvcmUgKS5mb3JFYWNoKCBhdHRyID0+IHRoaXMuX3N0b3JlKCByZXNwb25zZSwgYXR0ciApIClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gcmVzcG9uc2VcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggcmVzcG9uc2UgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgcmVtb3ZlKCBpdGVtICkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZGF0YS5maW5kSW5kZXgoIGRhdHVtID0+IEpTT04uc3RyaW5naWZ5KCBkYXR1bSApID09PSBKU09OLnN0cmluZ2lmeSggaXRlbSApIClcblxuICAgICAgICBpZiggaW5kZXggPT09IC0xICkgcmV0dXJuXG5cbiAgICAgICAgdGhpcy5kYXRhLnNwbGljZSggaW5kZXgsIDEgKVxuICAgIH0sXG5cbiAgICBzZXQoIGF0dHIsIHZhbHVlICkge1xuICAgICAgICB0aGlzLmRhdGFbIGF0dHIgXSA9IHZhbHVlXG4gICAgICAgIHRoaXMuZW1pdCggYCR7YXR0cn1DaGFuZ2VkYCApXG4gICAgfSxcblxuICAgIHZhbGlkYXRlKCBkYXRhICkge1xuICAgICAgICBsZXQgdmFsaWQgPSB0cnVlXG4gICAgICAgXG4gICAgICAgIE9iamVjdC5rZXlzKCBkYXRhICkuZm9yRWFjaCggbmFtZSA9PiB7IFxuICAgICAgICAgICAgY29uc3QgdmFsID0gZGF0YVsgbmFtZSBdLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5maW5kKCBhdHRyID0+IGF0dHIubmFtZSA9PT0gbmFtZSApICAgICAgIFxuICAgIFxuICAgICAgICAgICAgaWYoIGF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkIHx8ICFhdHRyaWJ1dGUudmFsaWRhdGUgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhWyBuYW1lIF0gPSB2YWxcbiAgICAgICAgICAgICAgICAgICAgPyB0eXBlb2YgdmFsID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsLnRyaW0oKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbFxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSBlbHNlIGlmKCB2YWxpZCAmJiAhdGhpcy52YWxpZGF0ZURhdHVtKCBhdHRyaWJ1dGUsIHZhbCApICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCggJ3ZhbGlkYXRpb25FcnJvcicsIGF0dHJpYnV0ZSApXG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgfSBlbHNlIGlmKCB0aGlzLnZhbGlkYXRlRGF0dW0oIGF0dHJpYnV0ZSwgdmFsICkgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhWyBuYW1lIF0gPSB2YWwudHJpbSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiB2YWxpZFxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZURhdHVtKCBhdHRyLCB2YWwgKSB7XG4gICAgICAgIHJldHVybiBhdHRyLnZhbGlkYXRlLmNhbGwoIHRoaXMsIHZhbC50cmltKCkgKVxuICAgIH1cblxufSApXG4iLCIvKiEgdmVyc2lvbiA6IDQuMTcuMzdcbiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiBib290c3RyYXAtZGF0ZXRpbWVqc1xuIGh0dHBzOi8vZ2l0aHViLmNvbS9Fb25hc2Rhbi9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXJcbiBDb3B5cmlnaHQgKGMpIDIwMTUgSm9uYXRoYW4gUGV0ZXJzb25cbiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuLypcbiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuIENvcHlyaWdodCAoYykgMjAxNSBKb25hdGhhbiBQZXRlcnNvblxuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qZ2xvYmFsIGRlZmluZTpmYWxzZSAqL1xuLypnbG9iYWwgZXhwb3J0czpmYWxzZSAqL1xuLypnbG9iYWwgcmVxdWlyZTpmYWxzZSAqL1xuLypnbG9iYWwgalF1ZXJ5OmZhbHNlICovXG4vKmdsb2JhbCBtb21lbnQ6ZmFsc2UgKi9cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRCBpcyB1c2VkIC0gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5JywgJ21vbWVudCddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdtb21lbnQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTmVpdGhlciBBTUQgbm9yIENvbW1vbkpTIHVzZWQuIFVzZSBnbG9iYWwgdmFyaWFibGVzLlxuICAgICAgICBpZiAodHlwZW9mIGpRdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93ICdib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIgcmVxdWlyZXMgalF1ZXJ5IHRvIGJlIGxvYWRlZCBmaXJzdCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBtb21lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyAnYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyIHJlcXVpcmVzIE1vbWVudC5qcyB0byBiZSBsb2FkZWQgZmlyc3QnO1xuICAgICAgICB9XG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5LCBtb21lbnQpO1xuICAgIH1cbn0oZnVuY3Rpb24gKCQsIG1vbWVudCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAoIW1vbWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlciByZXF1aXJlcyBNb21lbnQuanMgdG8gYmUgbG9hZGVkIGZpcnN0Jyk7XG4gICAgfVxuXG4gICAgdmFyIGRhdGVUaW1lUGlja2VyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHBpY2tlciA9IHt9LFxuICAgICAgICAgICAgZGF0ZSxcbiAgICAgICAgICAgIHZpZXdEYXRlLFxuICAgICAgICAgICAgdW5zZXQgPSB0cnVlLFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICBjb21wb25lbnQgPSBmYWxzZSxcbiAgICAgICAgICAgIHdpZGdldCA9IGZhbHNlLFxuICAgICAgICAgICAgdXNlMjRIb3VycyxcbiAgICAgICAgICAgIG1pblZpZXdNb2RlTnVtYmVyID0gMCxcbiAgICAgICAgICAgIGFjdHVhbEZvcm1hdCxcbiAgICAgICAgICAgIHBhcnNlRm9ybWF0cyxcbiAgICAgICAgICAgIGN1cnJlbnRWaWV3TW9kZSxcbiAgICAgICAgICAgIGRhdGVQaWNrZXJNb2RlcyA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNsc05hbWU6ICdkYXlzJyxcbiAgICAgICAgICAgICAgICAgICAgbmF2Rm5jOiAnTScsXG4gICAgICAgICAgICAgICAgICAgIG5hdlN0ZXA6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZTogJ21vbnRocycsXG4gICAgICAgICAgICAgICAgICAgIG5hdkZuYzogJ3knLFxuICAgICAgICAgICAgICAgICAgICBuYXZTdGVwOiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNsc05hbWU6ICd5ZWFycycsXG4gICAgICAgICAgICAgICAgICAgIG5hdkZuYzogJ3knLFxuICAgICAgICAgICAgICAgICAgICBuYXZTdGVwOiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjbHNOYW1lOiAnZGVjYWRlcycsXG4gICAgICAgICAgICAgICAgICAgIG5hdkZuYzogJ3knLFxuICAgICAgICAgICAgICAgICAgICBuYXZTdGVwOiAxMDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdmlld01vZGVzID0gWydkYXlzJywgJ21vbnRocycsICd5ZWFycycsICdkZWNhZGVzJ10sXG4gICAgICAgICAgICB2ZXJ0aWNhbE1vZGVzID0gWyd0b3AnLCAnYm90dG9tJywgJ2F1dG8nXSxcbiAgICAgICAgICAgIGhvcml6b250YWxNb2RlcyA9IFsnbGVmdCcsICdyaWdodCcsICdhdXRvJ10sXG4gICAgICAgICAgICB0b29sYmFyUGxhY2VtZW50cyA9IFsnZGVmYXVsdCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgICAgICAgICBrZXlNYXAgPSB7XG4gICAgICAgICAgICAgICAgJ3VwJzogMzgsXG4gICAgICAgICAgICAgICAgMzg6ICd1cCcsXG4gICAgICAgICAgICAgICAgJ2Rvd24nOiA0MCxcbiAgICAgICAgICAgICAgICA0MDogJ2Rvd24nLFxuICAgICAgICAgICAgICAgICdsZWZ0JzogMzcsXG4gICAgICAgICAgICAgICAgMzc6ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICAncmlnaHQnOiAzOSxcbiAgICAgICAgICAgICAgICAzOTogJ3JpZ2h0JyxcbiAgICAgICAgICAgICAgICAndGFiJzogOSxcbiAgICAgICAgICAgICAgICA5OiAndGFiJyxcbiAgICAgICAgICAgICAgICAnZXNjYXBlJzogMjcsXG4gICAgICAgICAgICAgICAgMjc6ICdlc2NhcGUnLFxuICAgICAgICAgICAgICAgICdlbnRlcic6IDEzLFxuICAgICAgICAgICAgICAgIDEzOiAnZW50ZXInLFxuICAgICAgICAgICAgICAgICdwYWdlVXAnOiAzMyxcbiAgICAgICAgICAgICAgICAzMzogJ3BhZ2VVcCcsXG4gICAgICAgICAgICAgICAgJ3BhZ2VEb3duJzogMzQsXG4gICAgICAgICAgICAgICAgMzQ6ICdwYWdlRG93bicsXG4gICAgICAgICAgICAgICAgJ3NoaWZ0JzogMTYsXG4gICAgICAgICAgICAgICAgMTY6ICdzaGlmdCcsXG4gICAgICAgICAgICAgICAgJ2NvbnRyb2wnOiAxNyxcbiAgICAgICAgICAgICAgICAxNzogJ2NvbnRyb2wnLFxuICAgICAgICAgICAgICAgICdzcGFjZSc6IDMyLFxuICAgICAgICAgICAgICAgIDMyOiAnc3BhY2UnLFxuICAgICAgICAgICAgICAgICd0JzogODQsXG4gICAgICAgICAgICAgICAgODQ6ICd0JyxcbiAgICAgICAgICAgICAgICAnZGVsZXRlJzogNDYsXG4gICAgICAgICAgICAgICAgNDY6ICdkZWxldGUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAga2V5U3RhdGUgPSB7fSxcblxuICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogUHJpdmF0ZSBmdW5jdGlvbnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgICAgICAgICBnZXRNb21lbnQgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHZhciB0ekVuYWJsZWQgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuTW9tZW50LFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Wm9uZU9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5jb21pbmdab25lT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICB0aW1lWm9uZUluZGljYXRvcixcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVdpdGhUaW1lWm9uZUluZm87XG5cbiAgICAgICAgICAgICAgICBpZiAobW9tZW50LnR6ICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy50aW1lWm9uZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMudGltZVpvbmUgIT09IG51bGwgJiYgb3B0aW9ucy50aW1lWm9uZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgdHpFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGQgPT09IHVuZGVmaW5lZCB8fCBkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ekVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybk1vbWVudCA9IG1vbWVudCgpLnR6KG9wdGlvbnMudGltZVpvbmUpLnN0YXJ0T2YoJ2QnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybk1vbWVudCA9IG1vbWVudCgpLnN0YXJ0T2YoJ2QnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ekVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRab25lT2Zmc2V0ID0gbW9tZW50KCkudHoob3B0aW9ucy50aW1lWm9uZSkudXRjT2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNvbWluZ1pvbmVPZmZzZXQgPSBtb21lbnQoZCwgcGFyc2VGb3JtYXRzLCBvcHRpb25zLnVzZVN0cmljdCkudXRjT2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5jb21pbmdab25lT2Zmc2V0ICE9PSBjdXJyZW50Wm9uZU9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVab25lSW5kaWNhdG9yID0gbW9tZW50KCkudHoob3B0aW9ucy50aW1lWm9uZSkuZm9ybWF0KCdaJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVdpdGhUaW1lWm9uZUluZm8gPSBtb21lbnQoZCwgcGFyc2VGb3JtYXRzLCBvcHRpb25zLnVzZVN0cmljdCkuZm9ybWF0KCdZWVlZLU1NLUREW1RdSEg6bW06c3MnKSArIHRpbWVab25lSW5kaWNhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybk1vbWVudCA9IG1vbWVudChkYXRlV2l0aFRpbWVab25lSW5mbywgcGFyc2VGb3JtYXRzLCBvcHRpb25zLnVzZVN0cmljdCkudHoob3B0aW9ucy50aW1lWm9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybk1vbWVudCA9IG1vbWVudChkLCBwYXJzZUZvcm1hdHMsIG9wdGlvbnMudXNlU3RyaWN0KS50eihvcHRpb25zLnRpbWVab25lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybk1vbWVudCA9IG1vbWVudChkLCBwYXJzZUZvcm1hdHMsIG9wdGlvbnMudXNlU3RyaWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuTW9tZW50O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzRW5hYmxlZCA9IGZ1bmN0aW9uIChncmFudWxhcml0eSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JhbnVsYXJpdHkgIT09ICdzdHJpbmcnIHx8IGdyYW51bGFyaXR5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaXNFbmFibGVkIGV4cGVjdHMgYSBzaW5nbGUgY2hhcmFjdGVyIHN0cmluZyBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoIChncmFudWxhcml0eSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3R1YWxGb3JtYXQuaW5kZXhPZignWScpICE9PSAtMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0dWFsRm9ybWF0LmluZGV4T2YoJ00nKSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbEZvcm1hdC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2QnKSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3R1YWxGb3JtYXQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdoJykgIT09IC0xO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3R1YWxGb3JtYXQuaW5kZXhPZignbScpICE9PSAtMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0dWFsRm9ybWF0LmluZGV4T2YoJ3MnKSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhc1RpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChpc0VuYWJsZWQoJ2gnKSB8fCBpc0VuYWJsZWQoJ20nKSB8fCBpc0VuYWJsZWQoJ3MnKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYXNEYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoaXNFbmFibGVkKCd5JykgfHwgaXNFbmFibGVkKCdNJykgfHwgaXNFbmFibGVkKCdkJykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0RGF0ZVBpY2tlclRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBoZWFkVGVtcGxhdGUgPSAkKCc8dGhlYWQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGg+JykuYWRkQ2xhc3MoJ3ByZXYnKS5hdHRyKCdkYXRhLWFjdGlvbicsICdwcmV2aW91cycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JykuYWRkQ2xhc3Mob3B0aW9ucy5pY29ucy5wcmV2aW91cykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0aD4nKS5hZGRDbGFzcygncGlja2VyLXN3aXRjaCcpLmF0dHIoJ2RhdGEtYWN0aW9uJywgJ3BpY2tlclN3aXRjaCcpLmF0dHIoJ2NvbHNwYW4nLCAob3B0aW9ucy5jYWxlbmRhcldlZWtzID8gJzYnIDogJzUnKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGg+JykuYWRkQ2xhc3MoJ25leHQnKS5hdHRyKCdkYXRhLWFjdGlvbicsICduZXh0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLm5leHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgY29udFRlbXBsYXRlID0gJCgnPHRib2R5PicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpLmF0dHIoJ2NvbHNwYW4nLCAob3B0aW9ucy5jYWxlbmRhcldlZWtzID8gJzgnIDogJzcnKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICQoJzxkaXY+JykuYWRkQ2xhc3MoJ2RhdGVwaWNrZXItZGF5cycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0YWJsZT4nKS5hZGRDbGFzcygndGFibGUtY29uZGVuc2VkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGhlYWRUZW1wbGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0Ym9keT4nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAkKCc8ZGl2PicpLmFkZENsYXNzKCdkYXRlcGlja2VyLW1vbnRocycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0YWJsZT4nKS5hZGRDbGFzcygndGFibGUtY29uZGVuc2VkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGhlYWRUZW1wbGF0ZS5jbG9uZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoY29udFRlbXBsYXRlLmNsb25lKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgJCgnPGRpdj4nKS5hZGRDbGFzcygnZGF0ZXBpY2tlci15ZWFycycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0YWJsZT4nKS5hZGRDbGFzcygndGFibGUtY29uZGVuc2VkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGhlYWRUZW1wbGF0ZS5jbG9uZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoY29udFRlbXBsYXRlLmNsb25lKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgJCgnPGRpdj4nKS5hZGRDbGFzcygnZGF0ZXBpY2tlci1kZWNhZGVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRhYmxlPicpLmFkZENsYXNzKCd0YWJsZS1jb25kZW5zZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoaGVhZFRlbXBsYXRlLmNsb25lKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChjb250VGVtcGxhdGUuY2xvbmUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFRpbWVQaWNrZXJNYWluVGVtcGxhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvcFJvdyA9ICQoJzx0cj4nKSxcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlUm93ID0gJCgnPHRyPicpLFxuICAgICAgICAgICAgICAgICAgICBib3R0b21Sb3cgPSAkKCc8dHI+Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCdoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JykuYXR0cih7aHJlZjogJyMnLCB0YWJpbmRleDogJy0xJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5pbmNyZW1lbnRIb3VyfSkuYWRkQ2xhc3MoJ2J0bicpLmF0dHIoJ2RhdGEtYWN0aW9uJywgJ2luY3JlbWVudEhvdXJzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicpLmFkZENsYXNzKG9wdGlvbnMuaWNvbnMudXApKSkpO1xuICAgICAgICAgICAgICAgICAgICBtaWRkbGVSb3cuYXBwZW5kKCQoJzx0ZD4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcygndGltZXBpY2tlci1ob3VyJykuYXR0cih7J2RhdGEtdGltZS1jb21wb25lbnQnOidob3VycycsICd0aXRsZSc6IG9wdGlvbnMudG9vbHRpcHMucGlja0hvdXJ9KS5hdHRyKCdkYXRhLWFjdGlvbicsICdzaG93SG91cnMnKSkpO1xuICAgICAgICAgICAgICAgICAgICBib3R0b21Sb3cuYXBwZW5kKCQoJzx0ZD4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nKS5hdHRyKHtocmVmOiAnIycsIHRhYmluZGV4OiAnLTEnLCAndGl0bGUnOiBvcHRpb25zLnRvb2x0aXBzLmRlY3JlbWVudEhvdXJ9KS5hZGRDbGFzcygnYnRuJykuYXR0cignZGF0YS1hY3Rpb24nLCAnZGVjcmVtZW50SG91cnMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JykuYWRkQ2xhc3Mob3B0aW9ucy5pY29ucy5kb3duKSkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzRW5hYmxlZCgnbScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0VuYWJsZWQoJ2gnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wUm93LmFwcGVuZCgkKCc8dGQ+JykuYWRkQ2xhc3MoJ3NlcGFyYXRvcicpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pZGRsZVJvdy5hcHBlbmQoJCgnPHRkPicpLmFkZENsYXNzKCdzZXBhcmF0b3InKS5odG1sKCc6JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tUm93LmFwcGVuZCgkKCc8dGQ+JykuYWRkQ2xhc3MoJ3NlcGFyYXRvcicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0b3BSb3cuYXBwZW5kKCQoJzx0ZD4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nKS5hdHRyKHtocmVmOiAnIycsIHRhYmluZGV4OiAnLTEnLCAndGl0bGUnOiBvcHRpb25zLnRvb2x0aXBzLmluY3JlbWVudE1pbnV0ZX0pLmFkZENsYXNzKCdidG4nKS5hdHRyKCdkYXRhLWFjdGlvbicsICdpbmNyZW1lbnRNaW51dGVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicpLmFkZENsYXNzKG9wdGlvbnMuaWNvbnMudXApKSkpO1xuICAgICAgICAgICAgICAgICAgICBtaWRkbGVSb3cuYXBwZW5kKCQoJzx0ZD4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcygndGltZXBpY2tlci1taW51dGUnKS5hdHRyKHsnZGF0YS10aW1lLWNvbXBvbmVudCc6ICdtaW51dGVzJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5waWNrTWludXRlfSkuYXR0cignZGF0YS1hY3Rpb24nLCAnc2hvd01pbnV0ZXMnKSkpO1xuICAgICAgICAgICAgICAgICAgICBib3R0b21Sb3cuYXBwZW5kKCQoJzx0ZD4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nKS5hdHRyKHtocmVmOiAnIycsIHRhYmluZGV4OiAnLTEnLCAndGl0bGUnOiBvcHRpb25zLnRvb2x0aXBzLmRlY3JlbWVudE1pbnV0ZX0pLmFkZENsYXNzKCdidG4nKS5hdHRyKCdkYXRhLWFjdGlvbicsICdkZWNyZW1lbnRNaW51dGVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicpLmFkZENsYXNzKG9wdGlvbnMuaWNvbnMuZG93bikpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0VuYWJsZWQoJ3MnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCdtJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcFJvdy5hcHBlbmQoJCgnPHRkPicpLmFkZENsYXNzKCdzZXBhcmF0b3InKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRkbGVSb3cuYXBwZW5kKCQoJzx0ZD4nKS5hZGRDbGFzcygnc2VwYXJhdG9yJykuaHRtbCgnOicpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbVJvdy5hcHBlbmQoJCgnPHRkPicpLmFkZENsYXNzKCdzZXBhcmF0b3InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG9wUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JykuYXR0cih7aHJlZjogJyMnLCB0YWJpbmRleDogJy0xJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5pbmNyZW1lbnRTZWNvbmR9KS5hZGRDbGFzcygnYnRuJykuYXR0cignZGF0YS1hY3Rpb24nLCAnaW5jcmVtZW50U2Vjb25kcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLnVwKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JykuYWRkQ2xhc3MoJ3RpbWVwaWNrZXItc2Vjb25kJykuYXR0cih7J2RhdGEtdGltZS1jb21wb25lbnQnOiAnc2Vjb25kcycsICd0aXRsZSc6IG9wdGlvbnMudG9vbHRpcHMucGlja1NlY29uZH0pLmF0dHIoJ2RhdGEtYWN0aW9uJywgJ3Nob3dTZWNvbmRzJykpKTtcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JykuYXR0cih7aHJlZjogJyMnLCB0YWJpbmRleDogJy0xJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5kZWNyZW1lbnRTZWNvbmR9KS5hZGRDbGFzcygnYnRuJykuYXR0cignZGF0YS1hY3Rpb24nLCAnZGVjcmVtZW50U2Vjb25kcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLmRvd24pKSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdXNlMjRIb3Vycykge1xuICAgICAgICAgICAgICAgICAgICB0b3BSb3cuYXBwZW5kKCQoJzx0ZD4nKS5hZGRDbGFzcygnc2VwYXJhdG9yJykpO1xuICAgICAgICAgICAgICAgICAgICBtaWRkbGVSb3cuYXBwZW5kKCQoJzx0ZD4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YnV0dG9uPicpLmFkZENsYXNzKCdidG4gYnRuLXByaW1hcnknKS5hdHRyKHsnZGF0YS1hY3Rpb24nOiAndG9nZ2xlUGVyaW9kJywgdGFiaW5kZXg6ICctMScsICd0aXRsZSc6IG9wdGlvbnMudG9vbHRpcHMudG9nZ2xlUGVyaW9kfSkpKTtcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tUm93LmFwcGVuZCgkKCc8dGQ+JykuYWRkQ2xhc3MoJ3NlcGFyYXRvcicpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJCgnPGRpdj4nKS5hZGRDbGFzcygndGltZXBpY2tlci1waWNrZXInKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0YWJsZT4nKS5hZGRDbGFzcygndGFibGUtY29uZGVuc2VkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoW3RvcFJvdywgbWlkZGxlUm93LCBib3R0b21Sb3ddKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRUaW1lUGlja2VyVGVtcGxhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhvdXJzVmlldyA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoJ3RpbWVwaWNrZXItaG91cnMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGFibGU+JykuYWRkQ2xhc3MoJ3RhYmxlLWNvbmRlbnNlZCcpKSxcbiAgICAgICAgICAgICAgICAgICAgbWludXRlc1ZpZXcgPSAkKCc8ZGl2PicpLmFkZENsYXNzKCd0aW1lcGlja2VyLW1pbnV0ZXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGFibGU+JykuYWRkQ2xhc3MoJ3RhYmxlLWNvbmRlbnNlZCcpKSxcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kc1ZpZXcgPSAkKCc8ZGl2PicpLmFkZENsYXNzKCd0aW1lcGlja2VyLXNlY29uZHMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGFibGU+JykuYWRkQ2xhc3MoJ3RhYmxlLWNvbmRlbnNlZCcpKSxcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gW2dldFRpbWVQaWNrZXJNYWluVGVtcGxhdGUoKV07XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCdoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goaG91cnNWaWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzRW5hYmxlZCgnbScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKG1pbnV0ZXNWaWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzRW5hYmxlZCgncycpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKHNlY29uZHNWaWV3KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0VG9vbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcm93ID0gW107XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1RvZGF5QnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKCQoJzx0ZD4nKS5hcHBlbmQoJCgnPGE+JykuYXR0cih7J2RhdGEtYWN0aW9uJzondG9kYXknLCAndGl0bGUnOiBvcHRpb25zLnRvb2x0aXBzLnRvZGF5fSkuYXBwZW5kKCQoJzxzcGFuPicpLmFkZENsYXNzKG9wdGlvbnMuaWNvbnMudG9kYXkpKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2lkZUJ5U2lkZSAmJiBoYXNEYXRlKCkgJiYgaGFzVGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKCQoJzx0ZD4nKS5hcHBlbmQoJCgnPGE+JykuYXR0cih7J2RhdGEtYWN0aW9uJzondG9nZ2xlUGlja2VyJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5zZWxlY3RUaW1lfSkuYXBwZW5kKCQoJzxzcGFuPicpLmFkZENsYXNzKG9wdGlvbnMuaWNvbnMudGltZSkpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dDbGVhcikge1xuICAgICAgICAgICAgICAgICAgICByb3cucHVzaCgkKCc8dGQ+JykuYXBwZW5kKCQoJzxhPicpLmF0dHIoeydkYXRhLWFjdGlvbic6J2NsZWFyJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5jbGVhcn0pLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLmNsZWFyKSkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0Nsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKCQoJzx0ZD4nKS5hcHBlbmQoJCgnPGE+JykuYXR0cih7J2RhdGEtYWN0aW9uJzonY2xvc2UnLCAndGl0bGUnOiBvcHRpb25zLnRvb2x0aXBzLmNsb3NlfSkuYXBwZW5kKCQoJzxzcGFuPicpLmFkZENsYXNzKG9wdGlvbnMuaWNvbnMuY2xvc2UpKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJCgnPHRhYmxlPicpLmFkZENsYXNzKCd0YWJsZS1jb25kZW5zZWQnKS5hcHBlbmQoJCgnPHRib2R5PicpLmFwcGVuZCgkKCc8dHI+JykuYXBwZW5kKHJvdykpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoJ2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgZHJvcGRvd24tbWVudScpLFxuICAgICAgICAgICAgICAgICAgICBkYXRlVmlldyA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoJ2RhdGVwaWNrZXInKS5hcHBlbmQoZ2V0RGF0ZVBpY2tlclRlbXBsYXRlKCkpLFxuICAgICAgICAgICAgICAgICAgICB0aW1lVmlldyA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoJ3RpbWVwaWNrZXInKS5hcHBlbmQoZ2V0VGltZVBpY2tlclRlbXBsYXRlKCkpLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gJCgnPHVsPicpLmFkZENsYXNzKCdsaXN0LXVuc3R5bGVkJyksXG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXIgPSAkKCc8bGk+JykuYWRkQ2xhc3MoJ3BpY2tlci1zd2l0Y2gnICsgKG9wdGlvbnMuY29sbGFwc2UgPyAnIGFjY29yZGlvbi10b2dnbGUnIDogJycpKS5hcHBlbmQoZ2V0VG9vbGJhcigpKTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmlubGluZSkge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5yZW1vdmVDbGFzcygnZHJvcGRvd24tbWVudScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh1c2UyNEhvdXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLmFkZENsYXNzKCd1c2V0d2VudHlmb3VyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0VuYWJsZWQoJ3MnKSAmJiAhdXNlMjRIb3Vycykge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5hZGRDbGFzcygnd2lkZXInKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaWRlQnlTaWRlICYmIGhhc0RhdGUoKSAmJiBoYXNUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYWRkQ2xhc3MoJ3RpbWVwaWNrZXItc2JzJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2xiYXJQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5hcHBlbmQodG9vbGJhcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnPGRpdj4nKS5hZGRDbGFzcygncm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGRhdGVWaWV3LmFkZENsYXNzKCdjb2wtbWQtNicpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQodGltZVZpZXcuYWRkQ2xhc3MoJ2NvbC1tZC02JykpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2xiYXJQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5hcHBlbmQodG9vbGJhcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2xiYXJQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kKHRvb2xiYXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaGFzRGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kKCQoJzxsaT4nKS5hZGRDbGFzcygob3B0aW9ucy5jb2xsYXBzZSAmJiBoYXNUaW1lKCkgPyAnY29sbGFwc2UgaW4nIDogJycpKS5hcHBlbmQoZGF0ZVZpZXcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbGJhclBsYWNlbWVudCA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kKHRvb2xiYXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaGFzVGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kKCQoJzxsaT4nKS5hZGRDbGFzcygob3B0aW9ucy5jb2xsYXBzZSAmJiBoYXNEYXRlKCkgPyAnY29sbGFwc2UnIDogJycpKS5hcHBlbmQodGltZVZpZXcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbGJhclBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudC5hcHBlbmQodG9vbGJhcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5hcHBlbmQoY29udGVudCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkYXRhVG9PcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBlRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YU9wdGlvbnMgPSB7fTtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmlzKCdpbnB1dCcpIHx8IG9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIGVEYXRhID0gZWxlbWVudC5kYXRhKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZURhdGEgPSBlbGVtZW50LmZpbmQoJ2lucHV0JykuZGF0YSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlRGF0YS5kYXRlT3B0aW9ucyAmJiBlRGF0YS5kYXRlT3B0aW9ucyBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhT3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIGRhdGFPcHRpb25zLCBlRGF0YS5kYXRlT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSAnZGF0ZScgKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlRGF0YVthdHRyaWJ1dGVOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhT3B0aW9uc1trZXldID0gZURhdGFbYXR0cmlidXRlTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YU9wdGlvbnM7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwbGFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSAoY29tcG9uZW50IHx8IGVsZW1lbnQpLnBvc2l0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IChjb21wb25lbnQgfHwgZWxlbWVudCkub2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsID0gb3B0aW9ucy53aWRnZXRQb3NpdGlvbmluZy52ZXJ0aWNhbCxcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbCA9IG9wdGlvbnMud2lkZ2V0UG9zaXRpb25pbmcuaG9yaXpvbnRhbCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50O1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMud2lkZ2V0UGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IG9wdGlvbnMud2lkZ2V0UGFyZW50LmFwcGVuZCh3aWRnZXQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5pcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LmFmdGVyKHdpZGdldCkucGFyZW50KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmlubGluZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LmFwcGVuZCh3aWRnZXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbigpLmZpcnN0KCkuYWZ0ZXIod2lkZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUb3AgYW5kIGJvdHRvbSBsb2dpY1xuICAgICAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQudG9wICsgd2lkZ2V0LmhlaWdodCgpICogMS41ID49ICQod2luZG93KS5oZWlnaHQoKSArICQod2luZG93KS5zY3JvbGxUb3AoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LmhlaWdodCgpICsgZWxlbWVudC5vdXRlckhlaWdodCgpIDwgb2Zmc2V0LnRvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwgPSAndG9wJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsID0gJ2JvdHRvbSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBMZWZ0IGFuZCByaWdodCBsb2dpY1xuICAgICAgICAgICAgICAgIGlmIChob3Jpem9udGFsID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudC53aWR0aCgpIDwgb2Zmc2V0LmxlZnQgKyB3aWRnZXQub3V0ZXJXaWR0aCgpIC8gMiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LmxlZnQgKyB3aWRnZXQub3V0ZXJXaWR0aCgpID4gJCh3aW5kb3cpLndpZHRoKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b250YWwgPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbCA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LmFkZENsYXNzKCd0b3AnKS5yZW1vdmVDbGFzcygnYm90dG9tJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LmFkZENsYXNzKCdib3R0b20nKS5yZW1vdmVDbGFzcygndG9wJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGhvcml6b250YWwgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LmFkZENsYXNzKCdwdWxsLXJpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LnJlbW92ZUNsYXNzKCdwdWxsLXJpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgZmlyc3QgcGFyZW50IGVsZW1lbnQgdGhhdCBoYXMgYSByZWxhdGl2ZSBjc3MgcG9zaXRpb25pbmdcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LmNzcygncG9zaXRpb24nKSAhPT0gJ3JlbGF0aXZlJykge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJykgPT09ICdyZWxhdGl2ZSc7XG4gICAgICAgICAgICAgICAgICAgIH0pLmZpcnN0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRldGltZXBpY2tlciBjb21wb25lbnQgc2hvdWxkIGJlIHBsYWNlZCB3aXRoaW4gYSByZWxhdGl2ZSBwb3NpdGlvbmVkIGNvbnRhaW5lcicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdpZGdldC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHZlcnRpY2FsID09PSAndG9wJyA/ICdhdXRvJyA6IHBvc2l0aW9uLnRvcCArIGVsZW1lbnQub3V0ZXJIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiB2ZXJ0aWNhbCA9PT0gJ3RvcCcgPyBwb3NpdGlvbi50b3AgKyBlbGVtZW50Lm91dGVySGVpZ2h0KCkgOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGhvcml6b250YWwgPT09ICdsZWZ0JyA/IChwYXJlbnQgPT09IGVsZW1lbnQgPyAwIDogcG9zaXRpb24ubGVmdCkgOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBob3Jpem9udGFsID09PSAnbGVmdCcgPyAnYXV0bycgOiBwYXJlbnQub3V0ZXJXaWR0aCgpIC0gZWxlbWVudC5vdXRlcldpZHRoKCkgLSAocGFyZW50ID09PSBlbGVtZW50ID8gMCA6IHBvc2l0aW9uLmxlZnQpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBub3RpZnlFdmVudCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2RwLmNoYW5nZScgJiYgKChlLmRhdGUgJiYgZS5kYXRlLmlzU2FtZShlLm9sZERhdGUpKSB8fCAoIWUuZGF0ZSAmJiAhZS5vbGREYXRlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbGVtZW50LnRyaWdnZXIoZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB2aWV3VXBkYXRlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSAnWVlZWSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vdGlmeUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RwLnVwZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZSxcbiAgICAgICAgICAgICAgICAgICAgdmlld0RhdGU6IHZpZXdEYXRlLmNsb25lKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNob3dNb2RlID0gZnVuY3Rpb24gKGRpcikge1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRpcikge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Vmlld01vZGUgPSBNYXRoLm1heChtaW5WaWV3TW9kZU51bWJlciwgTWF0aC5taW4oMywgY3VycmVudFZpZXdNb2RlICsgZGlyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlciA+IGRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRlcGlja2VyLScgKyBkYXRlUGlja2VyTW9kZXNbY3VycmVudFZpZXdNb2RlXS5jbHNOYW1lKS5zaG93KCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWxsRG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciByb3cgPSAkKCc8dHI+JyksXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gdmlld0RhdGUuY2xvbmUoKS5zdGFydE9mKCd3Jykuc3RhcnRPZignZCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2FsZW5kYXJXZWVrcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kKCQoJzx0aD4nKS5hZGRDbGFzcygnY3cnKS50ZXh0KCcjJykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50RGF0ZS5pc0JlZm9yZSh2aWV3RGF0ZS5jbG9uZSgpLmVuZE9mKCd3JykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmQoJCgnPHRoPicpLmFkZENsYXNzKCdkb3cnKS50ZXh0KGN1cnJlbnREYXRlLmZvcm1hdCgnZGQnKSkpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZS5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGhlYWQnKS5hcHBlbmQocm93KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzSW5EaXNhYmxlZERhdGVzID0gZnVuY3Rpb24gKHRlc3REYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGlzYWJsZWREYXRlc1t0ZXN0RGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKV0gPT09IHRydWU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0luRW5hYmxlZERhdGVzID0gZnVuY3Rpb24gKHRlc3REYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlZERhdGVzW3Rlc3REYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpXSA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzSW5EaXNhYmxlZEhvdXJzID0gZnVuY3Rpb24gKHRlc3REYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGlzYWJsZWRIb3Vyc1t0ZXN0RGF0ZS5mb3JtYXQoJ0gnKV0gPT09IHRydWU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0luRW5hYmxlZEhvdXJzID0gZnVuY3Rpb24gKHRlc3REYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlZEhvdXJzW3Rlc3REYXRlLmZvcm1hdCgnSCcpXSA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzVmFsaWQgPSBmdW5jdGlvbiAodGFyZ2V0TW9tZW50LCBncmFudWxhcml0eSkge1xuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0TW9tZW50LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRpc2FibGVkRGF0ZXMgJiYgZ3JhbnVsYXJpdHkgPT09ICdkJyAmJiBpc0luRGlzYWJsZWREYXRlcyh0YXJnZXRNb21lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZW5hYmxlZERhdGVzICYmIGdyYW51bGFyaXR5ID09PSAnZCcgJiYgIWlzSW5FbmFibGVkRGF0ZXModGFyZ2V0TW9tZW50KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1pbkRhdGUgJiYgdGFyZ2V0TW9tZW50LmlzQmVmb3JlKG9wdGlvbnMubWluRGF0ZSwgZ3JhbnVsYXJpdHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubWF4RGF0ZSAmJiB0YXJnZXRNb21lbnQuaXNBZnRlcihvcHRpb25zLm1heERhdGUsIGdyYW51bGFyaXR5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRheXNPZldlZWtEaXNhYmxlZCAmJiBncmFudWxhcml0eSA9PT0gJ2QnICYmIG9wdGlvbnMuZGF5c09mV2Vla0Rpc2FibGVkLmluZGV4T2YodGFyZ2V0TW9tZW50LmRheSgpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kaXNhYmxlZEhvdXJzICYmIChncmFudWxhcml0eSA9PT0gJ2gnIHx8IGdyYW51bGFyaXR5ID09PSAnbScgfHwgZ3JhbnVsYXJpdHkgPT09ICdzJykgJiYgaXNJbkRpc2FibGVkSG91cnModGFyZ2V0TW9tZW50KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmVuYWJsZWRIb3VycyAmJiAoZ3JhbnVsYXJpdHkgPT09ICdoJyB8fCBncmFudWxhcml0eSA9PT0gJ20nIHx8IGdyYW51bGFyaXR5ID09PSAncycpICYmICFpc0luRW5hYmxlZEhvdXJzKHRhcmdldE1vbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kaXNhYmxlZFRpbWVJbnRlcnZhbHMgJiYgKGdyYW51bGFyaXR5ID09PSAnaCcgfHwgZ3JhbnVsYXJpdHkgPT09ICdtJyB8fCBncmFudWxhcml0eSA9PT0gJ3MnKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TW9tZW50LmlzQmV0d2Vlbih0aGlzWzBdLCB0aGlzWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZpbGxNb250aHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNwYW5zID0gW10sXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoc1Nob3J0ID0gdmlld0RhdGUuY2xvbmUoKS5zdGFydE9mKCd5Jykuc3RhcnRPZignZCcpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChtb250aHNTaG9ydC5pc1NhbWUodmlld0RhdGUsICd5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3BhbnMucHVzaCgkKCc8c3Bhbj4nKS5hdHRyKCdkYXRhLWFjdGlvbicsICdzZWxlY3RNb250aCcpLmFkZENsYXNzKCdtb250aCcpLnRleHQobW9udGhzU2hvcnQuZm9ybWF0KCdNTU0nKSkpO1xuICAgICAgICAgICAgICAgICAgICBtb250aHNTaG9ydC5hZGQoMSwgJ00nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLW1vbnRocyB0ZCcpLmVtcHR5KCkuYXBwZW5kKHNwYW5zKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHVwZGF0ZU1vbnRocyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbW9udGhzVmlldyA9IHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlci1tb250aHMnKSxcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzVmlld0hlYWRlciA9IG1vbnRoc1ZpZXcuZmluZCgndGgnKSxcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzID0gbW9udGhzVmlldy5maW5kKCd0Ym9keScpLmZpbmQoJ3NwYW4nKTtcblxuICAgICAgICAgICAgICAgIG1vbnRoc1ZpZXdIZWFkZXIuZXEoMCkuZmluZCgnc3BhbicpLmF0dHIoJ3RpdGxlJywgb3B0aW9ucy50b29sdGlwcy5wcmV2WWVhcik7XG4gICAgICAgICAgICAgICAgbW9udGhzVmlld0hlYWRlci5lcSgxKS5hdHRyKCd0aXRsZScsIG9wdGlvbnMudG9vbHRpcHMuc2VsZWN0WWVhcik7XG4gICAgICAgICAgICAgICAgbW9udGhzVmlld0hlYWRlci5lcSgyKS5maW5kKCdzcGFuJykuYXR0cigndGl0bGUnLCBvcHRpb25zLnRvb2x0aXBzLm5leHRZZWFyKTtcblxuICAgICAgICAgICAgICAgIG1vbnRoc1ZpZXcuZmluZCgnLmRpc2FibGVkJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQodmlld0RhdGUuY2xvbmUoKS5zdWJ0cmFjdCgxLCAneScpLCAneScpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vbnRoc1ZpZXdIZWFkZXIuZXEoMCkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbW9udGhzVmlld0hlYWRlci5lcSgxKS50ZXh0KHZpZXdEYXRlLnllYXIoKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQodmlld0RhdGUuY2xvbmUoKS5hZGQoMSwgJ3knKSwgJ3knKSkge1xuICAgICAgICAgICAgICAgICAgICBtb250aHNWaWV3SGVhZGVyLmVxKDIpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1vbnRocy5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGUuaXNTYW1lKHZpZXdEYXRlLCAneScpICYmICF1bnNldCkge1xuICAgICAgICAgICAgICAgICAgICBtb250aHMuZXEoZGF0ZS5tb250aCgpKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbW9udGhzLmVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCh2aWV3RGF0ZS5jbG9uZSgpLm1vbnRoKGluZGV4KSwgJ00nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlWWVhcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHllYXJzVmlldyA9IHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlci15ZWFycycpLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyc1ZpZXdIZWFkZXIgPSB5ZWFyc1ZpZXcuZmluZCgndGgnKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRZZWFyID0gdmlld0RhdGUuY2xvbmUoKS5zdWJ0cmFjdCg1LCAneScpLFxuICAgICAgICAgICAgICAgICAgICBlbmRZZWFyID0gdmlld0RhdGUuY2xvbmUoKS5hZGQoNiwgJ3knKSxcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgeWVhcnNWaWV3SGVhZGVyLmVxKDApLmZpbmQoJ3NwYW4nKS5hdHRyKCd0aXRsZScsIG9wdGlvbnMudG9vbHRpcHMucHJldkRlY2FkZSk7XG4gICAgICAgICAgICAgICAgeWVhcnNWaWV3SGVhZGVyLmVxKDEpLmF0dHIoJ3RpdGxlJywgb3B0aW9ucy50b29sdGlwcy5zZWxlY3REZWNhZGUpO1xuICAgICAgICAgICAgICAgIHllYXJzVmlld0hlYWRlci5lcSgyKS5maW5kKCdzcGFuJykuYXR0cigndGl0bGUnLCBvcHRpb25zLnRvb2x0aXBzLm5leHREZWNhZGUpO1xuXG4gICAgICAgICAgICAgICAgeWVhcnNWaWV3LmZpbmQoJy5kaXNhYmxlZCcpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubWluRGF0ZSAmJiBvcHRpb25zLm1pbkRhdGUuaXNBZnRlcihzdGFydFllYXIsICd5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgeWVhcnNWaWV3SGVhZGVyLmVxKDApLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHllYXJzVmlld0hlYWRlci5lcSgxKS50ZXh0KHN0YXJ0WWVhci55ZWFyKCkgKyAnLScgKyBlbmRZZWFyLnllYXIoKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tYXhEYXRlICYmIG9wdGlvbnMubWF4RGF0ZS5pc0JlZm9yZShlbmRZZWFyLCAneScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHllYXJzVmlld0hlYWRlci5lcSgyKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoIXN0YXJ0WWVhci5pc0FmdGVyKGVuZFllYXIsICd5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPHNwYW4gZGF0YS1hY3Rpb249XCJzZWxlY3RZZWFyXCIgY2xhc3M9XCJ5ZWFyJyArIChzdGFydFllYXIuaXNTYW1lKGRhdGUsICd5JykgJiYgIXVuc2V0ID8gJyBhY3RpdmUnIDogJycpICsgKCFpc1ZhbGlkKHN0YXJ0WWVhciwgJ3knKSA/ICcgZGlzYWJsZWQnIDogJycpICsgJ1wiPicgKyBzdGFydFllYXIueWVhcigpICsgJzwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgICAgICBzdGFydFllYXIuYWRkKDEsICd5Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgeWVhcnNWaWV3LmZpbmQoJ3RkJykuaHRtbChodG1sKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHVwZGF0ZURlY2FkZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY2FkZXNWaWV3ID0gd2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLWRlY2FkZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgZGVjYWRlc1ZpZXdIZWFkZXIgPSBkZWNhZGVzVmlldy5maW5kKCd0aCcpLFxuICAgICAgICAgICAgICAgICAgICBzdGFydERlY2FkZSA9IG1vbWVudCh7eTogdmlld0RhdGUueWVhcigpIC0gKHZpZXdEYXRlLnllYXIoKSAlIDEwMCkgLSAxfSksXG4gICAgICAgICAgICAgICAgICAgIGVuZERlY2FkZSA9IHN0YXJ0RGVjYWRlLmNsb25lKCkuYWRkKDEwMCwgJ3knKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZEF0ID0gc3RhcnREZWNhZGUuY2xvbmUoKSxcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgZGVjYWRlc1ZpZXdIZWFkZXIuZXEoMCkuZmluZCgnc3BhbicpLmF0dHIoJ3RpdGxlJywgb3B0aW9ucy50b29sdGlwcy5wcmV2Q2VudHVyeSk7XG4gICAgICAgICAgICAgICAgZGVjYWRlc1ZpZXdIZWFkZXIuZXEoMikuZmluZCgnc3BhbicpLmF0dHIoJ3RpdGxlJywgb3B0aW9ucy50b29sdGlwcy5uZXh0Q2VudHVyeSk7XG5cbiAgICAgICAgICAgICAgICBkZWNhZGVzVmlldy5maW5kKCcuZGlzYWJsZWQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGFydERlY2FkZS5pc1NhbWUobW9tZW50KHt5OiAxOTAwfSkpIHx8IChvcHRpb25zLm1pbkRhdGUgJiYgb3B0aW9ucy5taW5EYXRlLmlzQWZ0ZXIoc3RhcnREZWNhZGUsICd5JykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2FkZXNWaWV3SGVhZGVyLmVxKDApLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlY2FkZXNWaWV3SGVhZGVyLmVxKDEpLnRleHQoc3RhcnREZWNhZGUueWVhcigpICsgJy0nICsgZW5kRGVjYWRlLnllYXIoKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhcnREZWNhZGUuaXNTYW1lKG1vbWVudCh7eTogMjAwMH0pKSB8fCAob3B0aW9ucy5tYXhEYXRlICYmIG9wdGlvbnMubWF4RGF0ZS5pc0JlZm9yZShlbmREZWNhZGUsICd5JykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2FkZXNWaWV3SGVhZGVyLmVxKDIpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdoaWxlICghc3RhcnREZWNhZGUuaXNBZnRlcihlbmREZWNhZGUsICd5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPHNwYW4gZGF0YS1hY3Rpb249XCJzZWxlY3REZWNhZGVcIiBjbGFzcz1cImRlY2FkZScgKyAoc3RhcnREZWNhZGUuaXNTYW1lKGRhdGUsICd5JykgPyAnIGFjdGl2ZScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKCFpc1ZhbGlkKHN0YXJ0RGVjYWRlLCAneScpID8gJyBkaXNhYmxlZCcgOiAnJykgKyAnXCIgZGF0YS1zZWxlY3Rpb249XCInICsgKHN0YXJ0RGVjYWRlLnllYXIoKSArIDYpICsgJ1wiPicgKyAoc3RhcnREZWNhZGUueWVhcigpICsgMSkgKyAnIC0gJyArIChzdGFydERlY2FkZS55ZWFyKCkgKyAxMikgKyAnPC9zcGFuPic7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGVjYWRlLmFkZCgxMiwgJ3knKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPHNwYW4+PC9zcGFuPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+JzsgLy9wdXNoIHRoZSBkYW5nbGluZyBibG9jayBvdmVyLCBhdCBsZWFzdCB0aGlzIHdheSBpdCdzIGV2ZW5cblxuICAgICAgICAgICAgICAgIGRlY2FkZXNWaWV3LmZpbmQoJ3RkJykuaHRtbChodG1sKTtcbiAgICAgICAgICAgICAgICBkZWNhZGVzVmlld0hlYWRlci5lcSgxKS50ZXh0KChzdGFydGVkQXQueWVhcigpICsgMSkgKyAnLScgKyAoc3RhcnREZWNhZGUueWVhcigpKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWxsRGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF5c1ZpZXcgPSB3aWRnZXQuZmluZCgnLmRhdGVwaWNrZXItZGF5cycpLFxuICAgICAgICAgICAgICAgICAgICBkYXlzVmlld0hlYWRlciA9IGRheXNWaWV3LmZpbmQoJ3RoJyksXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLFxuICAgICAgICAgICAgICAgICAgICBodG1sID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgICAgIGlmICghaGFzRGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkYXlzVmlld0hlYWRlci5lcSgwKS5maW5kKCdzcGFuJykuYXR0cigndGl0bGUnLCBvcHRpb25zLnRvb2x0aXBzLnByZXZNb250aCk7XG4gICAgICAgICAgICAgICAgZGF5c1ZpZXdIZWFkZXIuZXEoMSkuYXR0cigndGl0bGUnLCBvcHRpb25zLnRvb2x0aXBzLnNlbGVjdE1vbnRoKTtcbiAgICAgICAgICAgICAgICBkYXlzVmlld0hlYWRlci5lcSgyKS5maW5kKCdzcGFuJykuYXR0cigndGl0bGUnLCBvcHRpb25zLnRvb2x0aXBzLm5leHRNb250aCk7XG5cbiAgICAgICAgICAgICAgICBkYXlzVmlldy5maW5kKCcuZGlzYWJsZWQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICBkYXlzVmlld0hlYWRlci5lcSgxKS50ZXh0KHZpZXdEYXRlLmZvcm1hdChvcHRpb25zLmRheVZpZXdIZWFkZXJGb3JtYXQpKTtcblxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCh2aWV3RGF0ZS5jbG9uZSgpLnN1YnRyYWN0KDEsICdNJyksICdNJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF5c1ZpZXdIZWFkZXIuZXEoMCkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCh2aWV3RGF0ZS5jbG9uZSgpLmFkZCgxLCAnTScpLCAnTScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRheXNWaWV3SGVhZGVyLmVxKDIpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gdmlld0RhdGUuY2xvbmUoKS5zdGFydE9mKCdNJykuc3RhcnRPZigndycpLnN0YXJ0T2YoJ2QnKTtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA0MjsgaSsrKSB7IC8vYWx3YXlzIGRpc3BsYXkgNDIgZGF5cyAoc2hvdWxkIHNob3cgNiB3ZWVrcylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnREYXRlLndlZWtkYXkoKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gJCgnPHRyPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2FsZW5kYXJXZWVrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmQoJzx0ZCBjbGFzcz1cImN3XCI+JyArIGN1cnJlbnREYXRlLndlZWsoKSArICc8L3RkPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudERhdGUuaXNCZWZvcmUodmlld0RhdGUsICdNJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsc05hbWUgKz0gJyBvbGQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RGF0ZS5pc0FmdGVyKHZpZXdEYXRlLCAnTScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbHNOYW1lICs9ICcgbmV3JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudERhdGUuaXNTYW1lKGRhdGUsICdkJykgJiYgIXVuc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbHNOYW1lICs9ICcgYWN0aXZlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQoY3VycmVudERhdGUsICdkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsc05hbWUgKz0gJyBkaXNhYmxlZCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnREYXRlLmlzU2FtZShnZXRNb21lbnQoKSwgJ2QnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSArPSAnIHRvZGF5JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudERhdGUuZGF5KCkgPT09IDAgfHwgY3VycmVudERhdGUuZGF5KCkgPT09IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsc05hbWUgKz0gJyB3ZWVrZW5kJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kKCc8dGQgZGF0YS1hY3Rpb249XCJzZWxlY3REYXlcIiBkYXRhLWRheT1cIicgKyBjdXJyZW50RGF0ZS5mb3JtYXQoJ0wnKSArICdcIiBjbGFzcz1cImRheScgKyBjbHNOYW1lICsgJ1wiPicgKyBjdXJyZW50RGF0ZS5kYXRlKCkgKyAnPC90ZD4nKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudERhdGUuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGF5c1ZpZXcuZmluZCgndGJvZHknKS5lbXB0eSgpLmFwcGVuZChodG1sKTtcblxuICAgICAgICAgICAgICAgIHVwZGF0ZU1vbnRocygpO1xuXG4gICAgICAgICAgICAgICAgdXBkYXRlWWVhcnMoKTtcblxuICAgICAgICAgICAgICAgIHVwZGF0ZURlY2FkZXMoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZpbGxIb3VycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXItaG91cnMgdGFibGUnKSxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEhvdXIgPSB2aWV3RGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ2QnKSxcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IFtdLFxuICAgICAgICAgICAgICAgICAgICByb3cgPSAkKCc8dHI+Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodmlld0RhdGUuaG91cigpID4gMTEgJiYgIXVzZTI0SG91cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEhvdXIuaG91cigxMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50SG91ci5pc1NhbWUodmlld0RhdGUsICdkJykgJiYgKHVzZTI0SG91cnMgfHwgKHZpZXdEYXRlLmhvdXIoKSA8IDEyICYmIGN1cnJlbnRIb3VyLmhvdXIoKSA8IDEyKSB8fCB2aWV3RGF0ZS5ob3VyKCkgPiAxMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRIb3VyLmhvdXIoKSAlIDQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9ICQoJzx0cj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaChyb3cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmQoJzx0ZCBkYXRhLWFjdGlvbj1cInNlbGVjdEhvdXJcIiBjbGFzcz1cImhvdXInICsgKCFpc1ZhbGlkKGN1cnJlbnRIb3VyLCAnaCcpID8gJyBkaXNhYmxlZCcgOiAnJykgKyAnXCI+JyArIGN1cnJlbnRIb3VyLmZvcm1hdCh1c2UyNEhvdXJzID8gJ0hIJyA6ICdoaCcpICsgJzwvdGQ+Jyk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIb3VyLmFkZCgxLCAnaCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YWJsZS5lbXB0eSgpLmFwcGVuZChodG1sKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZpbGxNaW51dGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IHdpZGdldC5maW5kKCcudGltZXBpY2tlci1taW51dGVzIHRhYmxlJyksXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNaW51dGUgPSB2aWV3RGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ2gnKSxcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IFtdLFxuICAgICAgICAgICAgICAgICAgICByb3cgPSAkKCc8dHI+JyksXG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBvcHRpb25zLnN0ZXBwaW5nID09PSAxID8gNSA6IG9wdGlvbnMuc3RlcHBpbmc7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAodmlld0RhdGUuaXNTYW1lKGN1cnJlbnRNaW51dGUsICdoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRNaW51dGUubWludXRlKCkgJSAoc3RlcCAqIDQpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3cgPSAkKCc8dHI+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2gocm93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kKCc8dGQgZGF0YS1hY3Rpb249XCJzZWxlY3RNaW51dGVcIiBjbGFzcz1cIm1pbnV0ZScgKyAoIWlzVmFsaWQoY3VycmVudE1pbnV0ZSwgJ20nKSA/ICcgZGlzYWJsZWQnIDogJycpICsgJ1wiPicgKyBjdXJyZW50TWludXRlLmZvcm1hdCgnbW0nKSArICc8L3RkPicpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWludXRlLmFkZChzdGVwLCAnbScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YWJsZS5lbXB0eSgpLmFwcGVuZChodG1sKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZpbGxTZWNvbmRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IHdpZGdldC5maW5kKCcudGltZXBpY2tlci1zZWNvbmRzIHRhYmxlJyksXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZWNvbmQgPSB2aWV3RGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ20nKSxcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IFtdLFxuICAgICAgICAgICAgICAgICAgICByb3cgPSAkKCc8dHI+Jyk7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAodmlld0RhdGUuaXNTYW1lKGN1cnJlbnRTZWNvbmQsICdtJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTZWNvbmQuc2Vjb25kKCkgJSAyMCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gJCgnPHRyPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZCgnPHRkIGRhdGEtYWN0aW9uPVwic2VsZWN0U2Vjb25kXCIgY2xhc3M9XCJzZWNvbmQnICsgKCFpc1ZhbGlkKGN1cnJlbnRTZWNvbmQsICdzJykgPyAnIGRpc2FibGVkJyA6ICcnKSArICdcIj4nICsgY3VycmVudFNlY29uZC5mb3JtYXQoJ3NzJykgKyAnPC90ZD4nKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNlY29uZC5hZGQoNSwgJ3MnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YWJsZS5lbXB0eSgpLmFwcGVuZChodG1sKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZpbGxUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0b2dnbGUsIG5ld0RhdGUsIHRpbWVDb21wb25lbnRzID0gd2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyIHNwYW5bZGF0YS10aW1lLWNvbXBvbmVudF0nKTtcblxuICAgICAgICAgICAgICAgIGlmICghdXNlMjRIb3Vycykge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGUgPSB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXIgW2RhdGEtYWN0aW9uPXRvZ2dsZVBlcmlvZF0nKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0ZSA9IGRhdGUuY2xvbmUoKS5hZGQoKGRhdGUuaG91cnMoKSA+PSAxMikgPyAtMTIgOiAxMiwgJ2gnKTtcblxuICAgICAgICAgICAgICAgICAgICB0b2dnbGUudGV4dChkYXRlLmZvcm1hdCgnQScpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZChuZXdEYXRlLCAnaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGltZUNvbXBvbmVudHMuZmlsdGVyKCdbZGF0YS10aW1lLWNvbXBvbmVudD1ob3Vyc10nKS50ZXh0KGRhdGUuZm9ybWF0KHVzZTI0SG91cnMgPyAnSEgnIDogJ2hoJykpO1xuICAgICAgICAgICAgICAgIHRpbWVDb21wb25lbnRzLmZpbHRlcignW2RhdGEtdGltZS1jb21wb25lbnQ9bWludXRlc10nKS50ZXh0KGRhdGUuZm9ybWF0KCdtbScpKTtcbiAgICAgICAgICAgICAgICB0aW1lQ29tcG9uZW50cy5maWx0ZXIoJ1tkYXRhLXRpbWUtY29tcG9uZW50PXNlY29uZHNdJykudGV4dChkYXRlLmZvcm1hdCgnc3MnKSk7XG5cbiAgICAgICAgICAgICAgICBmaWxsSG91cnMoKTtcbiAgICAgICAgICAgICAgICBmaWxsTWludXRlcygpO1xuICAgICAgICAgICAgICAgIGZpbGxTZWNvbmRzKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaWxsRGF0ZSgpO1xuICAgICAgICAgICAgICAgIGZpbGxUaW1lKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZXRWYWx1ZSA9IGZ1bmN0aW9uICh0YXJnZXRNb21lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkRGF0ZSA9IHVuc2V0ID8gbnVsbCA6IGRhdGU7XG5cbiAgICAgICAgICAgICAgICAvLyBjYXNlIG9mIGNhbGxpbmcgc2V0VmFsdWUobnVsbCBvciBmYWxzZSlcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldE1vbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB1bnNldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZGF0YSgnZGF0ZScsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgbm90aWZ5RXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RwLmNoYW5nZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZERhdGU6IG9sZERhdGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0TW9tZW50ID0gdGFyZ2V0TW9tZW50LmNsb25lKCkubG9jYWxlKG9wdGlvbnMubG9jYWxlKTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnN0ZXBwaW5nICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldE1vbWVudC5taW51dGVzKChNYXRoLnJvdW5kKHRhcmdldE1vbWVudC5taW51dGVzKCkgLyBvcHRpb25zLnN0ZXBwaW5nKSAqIG9wdGlvbnMuc3RlcHBpbmcpICUgNjApLnNlY29uZHMoMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQodGFyZ2V0TW9tZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlID0gdGFyZ2V0TW9tZW50O1xuICAgICAgICAgICAgICAgICAgICB2aWV3RGF0ZSA9IGRhdGUuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQudmFsKGRhdGUuZm9ybWF0KGFjdHVhbEZvcm1hdCkpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRhdGEoJ2RhdGUnLCBkYXRlLmZvcm1hdChhY3R1YWxGb3JtYXQpKTtcbiAgICAgICAgICAgICAgICAgICAgdW5zZXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkcC5jaGFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF0ZS5jbG9uZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkRGF0ZTogb2xkRGF0ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMua2VlcEludmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbCh1bnNldCA/ICcnIDogZGF0ZS5mb3JtYXQoYWN0dWFsRm9ybWF0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbm90aWZ5RXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RwLmVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IHRhcmdldE1vbWVudFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vLzxzdW1tYXJ5PkhpZGVzIHRoZSB3aWRnZXQuIFBvc3NpYmx5IHdpbGwgZW1pdCBkcC5oaWRlPC9zdW1tYXJ5PlxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKCF3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIGV2ZW50IGlmIGluIHRoZSBtaWRkbGUgb2YgYSBwaWNrZXIgdHJhbnNpdGlvblxuICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcuY29sbGFwc2UnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxhcHNlRGF0YSA9ICQodGhpcykuZGF0YSgnY29sbGFwc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxhcHNlRGF0YSAmJiBjb2xsYXBzZURhdGEudHJhbnNpdGlvbmluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQuaGFzQ2xhc3MoJ2J0bicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdpZGdldC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCBwbGFjZSk7XG4gICAgICAgICAgICAgICAgd2lkZ2V0Lm9mZignY2xpY2snLCAnW2RhdGEtYWN0aW9uXScpO1xuICAgICAgICAgICAgICAgIHdpZGdldC5vZmYoJ21vdXNlZG93bicsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHdpZGdldC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB3aWRnZXQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIG5vdGlmeUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RwLmhpZGUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRlOiBkYXRlLmNsb25lKClcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlucHV0LmJsdXIoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZXRWYWx1ZShudWxsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFdpZGdldCBVSSBpbnRlcmFjdGlvbiBmdW5jdGlvbnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgICAgICAgICBhY3Rpb25zID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hdkZuYyA9IGRhdGVQaWNrZXJNb2Rlc1tjdXJyZW50Vmlld01vZGVdLm5hdkZuYztcbiAgICAgICAgICAgICAgICAgICAgdmlld0RhdGUuYWRkKGRhdGVQaWNrZXJNb2Rlc1tjdXJyZW50Vmlld01vZGVdLm5hdlN0ZXAsIG5hdkZuYyk7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdVcGRhdGUobmF2Rm5jKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hdkZuYyA9IGRhdGVQaWNrZXJNb2Rlc1tjdXJyZW50Vmlld01vZGVdLm5hdkZuYztcbiAgICAgICAgICAgICAgICAgICAgdmlld0RhdGUuc3VidHJhY3QoZGF0ZVBpY2tlck1vZGVzW2N1cnJlbnRWaWV3TW9kZV0ubmF2U3RlcCwgbmF2Rm5jKTtcbiAgICAgICAgICAgICAgICAgICAgZmlsbERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdmlld1VwZGF0ZShuYXZGbmMpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBwaWNrZXJTd2l0Y2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd01vZGUoMSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNlbGVjdE1vbnRoOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbW9udGggPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCd0Ym9keScpLmZpbmQoJ3NwYW4nKS5pbmRleCgkKGUudGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdEYXRlLm1vbnRoKG1vbnRoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWaWV3TW9kZSA9PT0gbWluVmlld01vZGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKGRhdGUuY2xvbmUoKS55ZWFyKHZpZXdEYXRlLnllYXIoKSkubW9udGgodmlld0RhdGUubW9udGgoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmlubGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dNb2RlKC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmlld1VwZGF0ZSgnTScpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZWxlY3RZZWFyOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KCQoZS50YXJnZXQpLnRleHQoKSwgMTApIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdEYXRlLnllYXIoeWVhcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Vmlld01vZGUgPT09IG1pblZpZXdNb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlLmNsb25lKCkueWVhcih2aWV3RGF0ZS55ZWFyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TW9kZSgtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZpZXdVcGRhdGUoJ1lZWVknKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2VsZWN0RGVjYWRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KCQoZS50YXJnZXQpLmRhdGEoJ3NlbGVjdGlvbicpLCAxMCkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgdmlld0RhdGUueWVhcih5ZWFyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWaWV3TW9kZSA9PT0gbWluVmlld01vZGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKGRhdGUuY2xvbmUoKS55ZWFyKHZpZXdEYXRlLnllYXIoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmlubGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dNb2RlKC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmlld1VwZGF0ZSgnWVlZWScpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZWxlY3REYXk6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXkgPSB2aWV3RGF0ZS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJChlLnRhcmdldCkuaXMoJy5vbGQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF5LnN1YnRyYWN0KDEsICdNJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKCcubmV3JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheS5hZGQoMSwgJ00nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXkuZGF0ZShwYXJzZUludCgkKGUudGFyZ2V0KS50ZXh0KCksIDEwKSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc1RpbWUoKSAmJiAhb3B0aW9ucy5rZWVwT3BlbiAmJiAhb3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBpbmNyZW1lbnRIb3VyczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGF0ZSA9IGRhdGUuY2xvbmUoKS5hZGQoMSwgJ2gnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQobmV3RGF0ZSwgJ2gnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUobmV3RGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50TWludXRlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGF0ZSA9IGRhdGUuY2xvbmUoKS5hZGQob3B0aW9ucy5zdGVwcGluZywgJ20nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQobmV3RGF0ZSwgJ20nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUobmV3RGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50U2Vjb25kczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGF0ZSA9IGRhdGUuY2xvbmUoKS5hZGQoMSwgJ3MnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQobmV3RGF0ZSwgJ3MnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUobmV3RGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZGVjcmVtZW50SG91cnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RhdGUgPSBkYXRlLmNsb25lKCkuc3VidHJhY3QoMSwgJ2gnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQobmV3RGF0ZSwgJ2gnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUobmV3RGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZGVjcmVtZW50TWludXRlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGF0ZSA9IGRhdGUuY2xvbmUoKS5zdWJ0cmFjdChvcHRpb25zLnN0ZXBwaW5nLCAnbScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZChuZXdEYXRlLCAnbScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShuZXdEYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBkZWNyZW1lbnRTZWNvbmRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdEYXRlID0gZGF0ZS5jbG9uZSgpLnN1YnRyYWN0KDEsICdzJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKG5ld0RhdGUsICdzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKG5ld0RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHRvZ2dsZVBlcmlvZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlLmNsb25lKCkuYWRkKChkYXRlLmhvdXJzKCkgPj0gMTIpID8gLTEyIDogMTIsICdoJykpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB0b2dnbGVQaWNrZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQoZS50YXJnZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJHBhcmVudCA9ICR0aGlzLmNsb3Nlc3QoJ3VsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZCA9ICRwYXJlbnQuZmluZCgnLmluJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZWQgPSAkcGFyZW50LmZpbmQoJy5jb2xsYXBzZTpub3QoLmluKScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VEYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBhbmRlZCAmJiBleHBhbmRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlRGF0YSA9IGV4cGFuZGVkLmRhdGEoJ2NvbGxhcHNlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VEYXRhICYmIGNvbGxhcHNlRGF0YS50cmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4cGFuZGVkLmNvbGxhcHNlKSB7IC8vIGlmIGNvbGxhcHNlIHBsdWdpbiBpcyBhdmFpbGFibGUgdGhyb3VnaCBib290c3RyYXAuanMgdGhlbiB1c2UgaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZC5jb2xsYXBzZSgnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlZC5jb2xsYXBzZSgnc2hvdycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gb3RoZXJ3aXNlIGp1c3QgdG9nZ2xlIGluIGNsYXNzIG9uIHRoZSB0d28gdmlld3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZC5yZW1vdmVDbGFzcygnaW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZWQuYWRkQ2xhc3MoJ2luJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRoaXMuaXMoJ3NwYW4nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnRvZ2dsZUNsYXNzKG9wdGlvbnMuaWNvbnMudGltZSArICcgJyArIG9wdGlvbnMuaWNvbnMuZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoJ3NwYW4nKS50b2dnbGVDbGFzcyhvcHRpb25zLmljb25zLnRpbWUgKyAnICcgKyBvcHRpb25zLmljb25zLmRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiB1bmNvbW1lbnQgaWYgdG9nZ2xlZCBzdGF0ZSB3aWxsIGJlIHJlc3RvcmVkIGluIHNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBjb21wb25lbnQuZmluZCgnc3BhbicpLnRvZ2dsZUNsYXNzKG9wdGlvbnMuaWNvbnMudGltZSArICcgJyArIG9wdGlvbnMuaWNvbnMuZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzaG93UGlja2VyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlciA+IGRpdjpub3QoLnRpbWVwaWNrZXItcGlja2VyKScpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyIC50aW1lcGlja2VyLXBpY2tlcicpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2hvd0hvdXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1waWNrZXInKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1ob3VycycpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2hvd01pbnV0ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyIC50aW1lcGlja2VyLXBpY2tlcicpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyIC50aW1lcGlja2VyLW1pbnV0ZXMnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNob3dTZWNvbmRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1waWNrZXInKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1zZWNvbmRzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZWxlY3RIb3VyOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaG91ciA9IHBhcnNlSW50KCQoZS50YXJnZXQpLnRleHQoKSwgMTApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXNlMjRIb3Vycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUuaG91cnMoKSA+PSAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3VyICE9PSAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlLmNsb25lKCkuaG91cnMoaG91cikpO1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zLnNob3dQaWNrZXIuY2FsbChwaWNrZXIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZWxlY3RNaW51dGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKGRhdGUuY2xvbmUoKS5taW51dGVzKHBhcnNlSW50KCQoZS50YXJnZXQpLnRleHQoKSwgMTApKSk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnMuc2hvd1BpY2tlci5jYWxsKHBpY2tlcik7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNlbGVjdFNlY29uZDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZS5jbG9uZSgpLnNlY29uZHMocGFyc2VJbnQoJChlLnRhcmdldCkudGV4dCgpLCAxMCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucy5zaG93UGlja2VyLmNhbGwocGlja2VyKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgY2xlYXI6IGNsZWFyLFxuXG4gICAgICAgICAgICAgICAgdG9kYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZGF5c0RhdGUgPSBnZXRNb21lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQodG9kYXlzRGF0ZSwgJ2QnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUodG9kYXlzRGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgY2xvc2U6IGhpZGVcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRvQWN0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoJChlLmN1cnJlbnRUYXJnZXQpLmlzKCcuZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFjdGlvbnNbJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2FjdGlvbicpXS5hcHBseShwaWNrZXIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLy88c3VtbWFyeT5TaG93cyB0aGUgd2lkZ2V0LiBQb3NzaWJseSB3aWxsIGVtaXQgZHAuc2hvdyBhbmQgZHAuY2hhbmdlPC9zdW1tYXJ5PlxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50TW9tZW50LFxuICAgICAgICAgICAgICAgICAgICB1c2VDdXJyZW50R3JhbnVsYXJpdHkgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAneWVhcic6IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0ubW9udGgoMCkuZGF0ZSgxKS5ob3VycygwKS5zZWNvbmRzKDApLm1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21vbnRoJzogZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5kYXRlKDEpLmhvdXJzKDApLnNlY29uZHMoMCkubWludXRlcygwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGF5JzogZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5ob3VycygwKS5zZWNvbmRzKDApLm1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2hvdXInOiBmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLnNlY29uZHMoMCkubWludXRlcygwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWludXRlJzogZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5zZWNvbmRzKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnByb3AoJ2Rpc2FibGVkJykgfHwgKCFvcHRpb25zLmlnbm9yZVJlYWRvbmx5ICYmIGlucHV0LnByb3AoJ3JlYWRvbmx5JykpIHx8IHdpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsKCkgIT09IHVuZGVmaW5lZCAmJiBpbnB1dC52YWwoKS50cmltKCkubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKHBhcnNlSW5wdXREYXRlKGlucHV0LnZhbCgpLnRyaW0oKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy51c2VDdXJyZW50ICYmIHVuc2V0ICYmICgoaW5wdXQuaXMoJ2lucHV0JykgJiYgaW5wdXQudmFsKCkudHJpbSgpLmxlbmd0aCA9PT0gMCkgfHwgb3B0aW9ucy5pbmxpbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNb21lbnQgPSBnZXRNb21lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnVzZUN1cnJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9tZW50ID0gdXNlQ3VycmVudEdyYW51bGFyaXR5W29wdGlvbnMudXNlQ3VycmVudF0oY3VycmVudE1vbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoY3VycmVudE1vbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2lkZ2V0ID0gZ2V0VGVtcGxhdGUoKTtcblxuICAgICAgICAgICAgICAgIGZpbGxEb3coKTtcbiAgICAgICAgICAgICAgICBmaWxsTW9udGhzKCk7XG5cbiAgICAgICAgICAgICAgICB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXItaG91cnMnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyLW1pbnV0ZXMnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyLXNlY29uZHMnKS5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICBzaG93TW9kZSgpO1xuXG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBwbGFjZSk7XG4gICAgICAgICAgICAgICAgd2lkZ2V0Lm9uKCdjbGljaycsICdbZGF0YS1hY3Rpb25dJywgZG9BY3Rpb24pOyAvLyB0aGlzIGhhbmRsZXMgY2xpY2tzIG9uIHRoZSB3aWRnZXRcbiAgICAgICAgICAgICAgICB3aWRnZXQub24oJ21vdXNlZG93bicsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50Lmhhc0NsYXNzKCdidG4nKSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aWRnZXQuc2hvdygpO1xuICAgICAgICAgICAgICAgIHBsYWNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5mb2N1c09uU2hvdyAmJiAhaW5wdXQuaXMoJzpmb2N1cycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbm90aWZ5RXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZHAuc2hvdydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vLyA8c3VtbWFyeT5TaG93cyBvciBoaWRlcyB0aGUgd2lkZ2V0PC9zdW1tYXJ5PlxuICAgICAgICAgICAgICAgIHJldHVybiAod2lkZ2V0ID8gaGlkZSgpIDogc2hvdygpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHBhcnNlSW5wdXREYXRlID0gZnVuY3Rpb24gKGlucHV0RGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnBhcnNlSW5wdXREYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vbWVudC5pc01vbWVudChpbnB1dERhdGUpIHx8IGlucHV0RGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RGF0ZSA9IG1vbWVudChpbnB1dERhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXREYXRlID0gZ2V0TW9tZW50KGlucHV0RGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dERhdGUgPSBvcHRpb25zLnBhcnNlSW5wdXREYXRlKGlucHV0RGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlucHV0RGF0ZS5sb2NhbGUob3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dERhdGU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBrZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICBpbmRleDIsXG4gICAgICAgICAgICAgICAgICAgIHByZXNzZWRLZXlzID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHByZXNzZWRNb2RpZmllcnMgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEtleSA9IGUud2hpY2gsXG4gICAgICAgICAgICAgICAgICAgIGtleUJpbmRLZXlzLFxuICAgICAgICAgICAgICAgICAgICBhbGxNb2RpZmllcnNQcmVzc2VkLFxuICAgICAgICAgICAgICAgICAgICBwcmVzc2VkID0gJ3AnO1xuXG4gICAgICAgICAgICAgICAga2V5U3RhdGVbY3VycmVudEtleV0gPSBwcmVzc2VkO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpbmRleCBpbiBrZXlTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5U3RhdGUuaGFzT3duUHJvcGVydHkoaW5kZXgpICYmIGtleVN0YXRlW2luZGV4XSA9PT0gcHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc3NlZEtleXMucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoaW5kZXgsIDEwKSAhPT0gY3VycmVudEtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNzZWRNb2RpZmllcnNbaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaW5kZXggaW4gb3B0aW9ucy5rZXlCaW5kcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5rZXlCaW5kcy5oYXNPd25Qcm9wZXJ0eShpbmRleCkgJiYgdHlwZW9mIChvcHRpb25zLmtleUJpbmRzW2luZGV4XSkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleUJpbmRLZXlzID0gaW5kZXguc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlCaW5kS2V5cy5sZW5ndGggPT09IHByZXNzZWRLZXlzLmxlbmd0aCAmJiBrZXlNYXBbY3VycmVudEtleV0gPT09IGtleUJpbmRLZXlzW2tleUJpbmRLZXlzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTW9kaWZpZXJzUHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleDIgPSBrZXlCaW5kS2V5cy5sZW5ndGggLSAyOyBpbmRleDIgPj0gMDsgaW5kZXgyLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoa2V5TWFwW2tleUJpbmRLZXlzW2luZGV4Ml1dIGluIHByZXNzZWRNb2RpZmllcnMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxNb2RpZmllcnNQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsTW9kaWZpZXJzUHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gb3B0aW9ucy5rZXlCaW5kc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbChwaWNrZXIsIHdpZGdldCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBrZXl1cCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAga2V5U3RhdGVbZS53aGljaF0gPSAncic7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSAkKGUudGFyZ2V0KS52YWwoKS50cmltKCksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUgPSB2YWwgPyBwYXJzZUlucHV0RGF0ZSh2YWwpIDogbnVsbDtcbiAgICAgICAgICAgICAgICBzZXRWYWx1ZShwYXJzZWREYXRlKTtcbiAgICAgICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGF0dGFjaERhdGVQaWNrZXJFbGVtZW50RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlucHV0Lm9uKHtcbiAgICAgICAgICAgICAgICAgICAgJ2NoYW5nZSc6IGNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgJ2JsdXInOiBvcHRpb25zLmRlYnVnID8gJycgOiBoaWRlLFxuICAgICAgICAgICAgICAgICAgICAna2V5ZG93bic6IGtleWRvd24sXG4gICAgICAgICAgICAgICAgICAgICdrZXl1cCc6IGtleXVwLFxuICAgICAgICAgICAgICAgICAgICAnZm9jdXMnOiBvcHRpb25zLmFsbG93SW5wdXRUb2dnbGUgPyBzaG93IDogJydcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmlzKCdpbnB1dCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0Lm9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb2N1cyc6IHNob3dcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lm9uKCdjbGljaycsIHRvZ2dsZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5vbignbW91c2Vkb3duJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRldGFjaERhdGVQaWNrZXJFbGVtZW50RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlucHV0Lm9mZih7XG4gICAgICAgICAgICAgICAgICAgICdjaGFuZ2UnOiBjaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICdibHVyJzogYmx1cixcbiAgICAgICAgICAgICAgICAgICAgJ2tleWRvd24nOiBrZXlkb3duLFxuICAgICAgICAgICAgICAgICAgICAna2V5dXAnOiBrZXl1cCxcbiAgICAgICAgICAgICAgICAgICAgJ2ZvY3VzJzogb3B0aW9ucy5hbGxvd0lucHV0VG9nZ2xlID8gaGlkZSA6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5vZmYoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZvY3VzJzogc2hvd1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQub2ZmKCdjbGljaycsIHRvZ2dsZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5vZmYoJ21vdXNlZG93bicsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbmRleEdpdmVuRGF0ZXMgPSBmdW5jdGlvbiAoZ2l2ZW5EYXRlc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgZ2l2ZW4gZW5hYmxlZERhdGVzIGFuZCBkaXNhYmxlZERhdGVzIGFzIGtleXMuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyB3YXkgd2UgY2FuIGNoZWNrIHRoZWlyIGV4aXN0ZW5jZSBpbiBPKDEpIHRpbWUgaW5zdGVhZCBvZiBsb29waW5nIHRocm91Z2ggd2hvbGUgYXJyYXkuXG4gICAgICAgICAgICAgICAgLy8gKGZvciBleGFtcGxlOiBvcHRpb25zLmVuYWJsZWREYXRlc1snMjAxNC0wMi0yNyddID09PSB0cnVlKVxuICAgICAgICAgICAgICAgIHZhciBnaXZlbkRhdGVzSW5kZXhlZCA9IHt9O1xuICAgICAgICAgICAgICAgICQuZWFjaChnaXZlbkRhdGVzQXJyYXksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGREYXRlID0gcGFyc2VJbnB1dERhdGUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkRGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuRGF0ZXNJbmRleGVkW2REYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKE9iamVjdC5rZXlzKGdpdmVuRGF0ZXNJbmRleGVkKS5sZW5ndGgpID8gZ2l2ZW5EYXRlc0luZGV4ZWQgOiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluZGV4R2l2ZW5Ib3VycyA9IGZ1bmN0aW9uIChnaXZlbkhvdXJzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAvLyBTdG9yZSBnaXZlbiBlbmFibGVkSG91cnMgYW5kIGRpc2FibGVkSG91cnMgYXMga2V5cy5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIHdheSB3ZSBjYW4gY2hlY2sgdGhlaXIgZXhpc3RlbmNlIGluIE8oMSkgdGltZSBpbnN0ZWFkIG9mIGxvb3BpbmcgdGhyb3VnaCB3aG9sZSBhcnJheS5cbiAgICAgICAgICAgICAgICAvLyAoZm9yIGV4YW1wbGU6IG9wdGlvbnMuZW5hYmxlZEhvdXJzWycyMDE0LTAyLTI3J10gPT09IHRydWUpXG4gICAgICAgICAgICAgICAgdmFyIGdpdmVuSG91cnNJbmRleGVkID0ge307XG4gICAgICAgICAgICAgICAgJC5lYWNoKGdpdmVuSG91cnNBcnJheSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnaXZlbkhvdXJzSW5kZXhlZFt0aGlzXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChPYmplY3Qua2V5cyhnaXZlbkhvdXJzSW5kZXhlZCkubGVuZ3RoKSA/IGdpdmVuSG91cnNJbmRleGVkIDogZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbml0Rm9ybWF0dGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQgfHwgJ0wgTFQnO1xuXG4gICAgICAgICAgICAgICAgYWN0dWFsRm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZywgZnVuY3Rpb24gKGZvcm1hdElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdpbnB1dCA9IGRhdGUubG9jYWxlRGF0YSgpLmxvbmdEYXRlRm9ybWF0KGZvcm1hdElucHV0KSB8fCBmb3JtYXRJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld2lucHV0LnJlcGxhY2UoLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZywgZnVuY3Rpb24gKGZvcm1hdElucHV0MikgeyAvL3RlbXAgZml4IGZvciAjNzQwXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZS5sb2NhbGVEYXRhKCkubG9uZ0RhdGVGb3JtYXQoZm9ybWF0SW5wdXQyKSB8fCBmb3JtYXRJbnB1dDI7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICBwYXJzZUZvcm1hdHMgPSBvcHRpb25zLmV4dHJhRm9ybWF0cyA/IG9wdGlvbnMuZXh0cmFGb3JtYXRzLnNsaWNlKCkgOiBbXTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGb3JtYXRzLmluZGV4T2YoZm9ybWF0KSA8IDAgJiYgcGFyc2VGb3JtYXRzLmluZGV4T2YoYWN0dWFsRm9ybWF0KSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGb3JtYXRzLnB1c2goYWN0dWFsRm9ybWF0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB1c2UyNEhvdXJzID0gKGFjdHVhbEZvcm1hdC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2EnKSA8IDEgJiYgYWN0dWFsRm9ybWF0LnJlcGxhY2UoL1xcWy4qP1xcXS9nLCAnJykuaW5kZXhPZignaCcpIDwgMSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCd5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluVmlld01vZGVOdW1iZXIgPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCdNJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluVmlld01vZGVOdW1iZXIgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCdkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluVmlld01vZGVOdW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3TW9kZSA9IE1hdGgubWF4KG1pblZpZXdNb2RlTnVtYmVyLCBjdXJyZW50Vmlld01vZGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF1bnNldCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAgKlxuICAgICAgICAgKiBQdWJsaWMgQVBJIGZ1bmN0aW9uc1xuICAgICAgICAgKiA9PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICpcbiAgICAgICAgICogSW1wb3J0YW50OiBEbyBub3QgZXhwb3NlIGRpcmVjdCByZWZlcmVuY2VzIHRvIHByaXZhdGUgb2JqZWN0cyBvciB0aGUgb3B0aW9uc1xuICAgICAgICAgKiBvYmplY3QgdG8gdGhlIG91dGVyIHdvcmxkLiBBbHdheXMgcmV0dXJuIGEgY2xvbmUgd2hlbiByZXR1cm5pbmcgdmFsdWVzIG9yIG1ha2VcbiAgICAgICAgICogYSBjbG9uZSB3aGVuIHNldHRpbmcgYSBwcml2YXRlIHZhcmlhYmxlLlxuICAgICAgICAgKlxuICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgICAgIHBpY2tlci5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8vPHN1bW1hcnk+RGVzdHJveXMgdGhlIHdpZGdldCBhbmQgcmVtb3ZlcyBhbGwgYXR0YWNoZWQgZXZlbnQgbGlzdGVuZXJzPC9zdW1tYXJ5PlxuICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgZGV0YWNoRGF0ZVBpY2tlckVsZW1lbnRFdmVudHMoKTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YSgnRGF0ZVRpbWVQaWNrZXInKTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YSgnZGF0ZScpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci50b2dnbGUgPSB0b2dnbGU7XG5cbiAgICAgICAgcGlja2VyLnNob3cgPSBzaG93O1xuXG4gICAgICAgIHBpY2tlci5oaWRlID0gaGlkZTtcblxuICAgICAgICBwaWNrZXIuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PkRpc2FibGVzIHRoZSBpbnB1dCBlbGVtZW50LCB0aGUgY29tcG9uZW50IGlzIGF0dGFjaGVkIHRvLCBieSBhZGRpbmcgYSBkaXNhYmxlZD1cInRydWVcIiBhdHRyaWJ1dGUgdG8gaXQuXG4gICAgICAgICAgICAvLy9JZiB0aGUgd2lkZ2V0IHdhcyB2aXNpYmxlIGJlZm9yZSB0aGF0IGNhbGwgaXQgaXMgaGlkZGVuLiBQb3NzaWJseSBlbWl0cyBkcC5oaWRlPC9zdW1tYXJ5PlxuICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQuaGFzQ2xhc3MoJ2J0bicpKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5wdXQucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PkVuYWJsZXMgdGhlIGlucHV0IGVsZW1lbnQsIHRoZSBjb21wb25lbnQgaXMgYXR0YWNoZWQgdG8sIGJ5IHJlbW92aW5nIGRpc2FibGVkIGF0dHJpYnV0ZSBmcm9tIGl0Ljwvc3VtbWFyeT5cbiAgICAgICAgICAgIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50Lmhhc0NsYXNzKCdidG4nKSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlucHV0LnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuaWdub3JlUmVhZG9ubHkgPSBmdW5jdGlvbiAoaWdub3JlUmVhZG9ubHkpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuaWdub3JlUmVhZG9ubHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlnbm9yZVJlYWRvbmx5ICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpZ25vcmVSZWFkb25seSAoKSBleHBlY3RzIGEgYm9vbGVhbiBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuaWdub3JlUmVhZG9ubHkgPSBpZ25vcmVSZWFkb25seTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLm9wdGlvbnMgPSBmdW5jdGlvbiAobmV3T3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIShuZXdPcHRpb25zIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMoKSBvcHRpb25zIHBhcmFtZXRlciBzaG91bGQgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBvcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChwaWNrZXJba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBpY2tlcltrZXldKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIGtleSArICcgaXMgbm90IHJlY29nbml6ZWQhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5kYXRlID0gZnVuY3Rpb24gKG5ld0RhdGUpIHtcbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmUgaGVscEtleXdvcmQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRhdGVcIj5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlJldHVybnMgdGhlIGNvbXBvbmVudCdzIG1vZGVsIGN1cnJlbnQgZGF0ZSwgYSBtb21lbnQgb2JqZWN0IG9yIG51bGwgaWYgbm90IHNldC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cmV0dXJucyB0eXBlPVwiTW9tZW50XCI+ZGF0ZS5jbG9uZSgpPC9yZXR1cm5zPlxuICAgICAgICAgICAgLy8vPC9zaWduYXR1cmU+XG4gICAgICAgICAgICAvLy88c2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHN1bW1hcnk+U2V0cyB0aGUgY29tcG9uZW50cyBtb2RlbCBjdXJyZW50IG1vbWVudCB0byBpdC4gUGFzc2luZyBhIG51bGwgdmFsdWUgdW5zZXRzIHRoZSBjb21wb25lbnRzIG1vZGVsIGN1cnJlbnQgbW9tZW50LiBQYXJzaW5nIG9mIHRoZSBuZXdEYXRlIHBhcmFtZXRlciBpcyBtYWRlIHVzaW5nIG1vbWVudCBsaWJyYXJ5IHdpdGggdGhlIG9wdGlvbnMuZm9ybWF0IGFuZCBvcHRpb25zLnVzZVN0cmljdCBjb21wb25lbnRzIGNvbmZpZ3VyYXRpb24uPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHBhcmFtIG5hbWU9XCJuZXdEYXRlXCIgbG9jaWQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRhdGVfcDpuZXdEYXRlXCI+VGFrZXMgc3RyaW5nLCBEYXRlLCBtb21lbnQsIG51bGwgcGFyYW1ldGVyLjwvcGFyYW0+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZS5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmV3RGF0ZSAhPT0gbnVsbCAmJiB0eXBlb2YgbmV3RGF0ZSAhPT0gJ3N0cmluZycgJiYgIW1vbWVudC5pc01vbWVudChuZXdEYXRlKSAmJiAhKG5ld0RhdGUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGUoKSBwYXJhbWV0ZXIgbXVzdCBiZSBvbmUgb2YgW251bGwsIHN0cmluZywgbW9tZW50IG9yIERhdGVdJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFZhbHVlKG5ld0RhdGUgPT09IG51bGwgPyBudWxsIDogcGFyc2VJbnB1dERhdGUobmV3RGF0ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZm9ybWF0ID0gZnVuY3Rpb24gKG5ld0Zvcm1hdCkge1xuICAgICAgICAgICAgLy8vPHN1bW1hcnk+dGVzdCBzdTwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLzxwYXJhbSBuYW1lPVwibmV3Rm9ybWF0XCI+aW5mbyBhYm91dCBwYXJhPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLzxyZXR1cm5zIHR5cGU9XCJzdHJpbmd8Ym9vbGVhblwiPnJldHVybnMgZm9vPC9yZXR1cm5zPlxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgodHlwZW9mIG5ld0Zvcm1hdCAhPT0gJ3N0cmluZycpICYmICgodHlwZW9mIG5ld0Zvcm1hdCAhPT0gJ2Jvb2xlYW4nKSB8fCAobmV3Rm9ybWF0ICE9PSBmYWxzZSkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZm9ybWF0KCkgZXhwZWN0cyBhIHN0aW5nIG9yIGJvb2xlYW46ZmFsc2UgcGFyYW1ldGVyICcgKyBuZXdGb3JtYXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdCA9IG5ld0Zvcm1hdDtcbiAgICAgICAgICAgIGlmIChhY3R1YWxGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICBpbml0Rm9ybWF0dGluZygpOyAvLyByZWluaXQgZm9ybWF0dGluZ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIudGltZVpvbmUgPSBmdW5jdGlvbiAobmV3Wm9uZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50aW1lWm9uZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy50aW1lWm9uZSA9IG5ld1pvbmU7XG5cbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmRheVZpZXdIZWFkZXJGb3JtYXQgPSBmdW5jdGlvbiAobmV3Rm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRheVZpZXdIZWFkZXJGb3JtYXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3Rm9ybWF0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RheVZpZXdIZWFkZXJGb3JtYXQoKSBleHBlY3RzIGEgc3RyaW5nIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLmRheVZpZXdIZWFkZXJGb3JtYXQgPSBuZXdGb3JtYXQ7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5leHRyYUZvcm1hdHMgPSBmdW5jdGlvbiAoZm9ybWF0cykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5leHRyYUZvcm1hdHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3JtYXRzICE9PSBmYWxzZSAmJiAhKGZvcm1hdHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleHRyYUZvcm1hdHMoKSBleHBlY3RzIGFuIGFycmF5IG9yIGZhbHNlIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLmV4dHJhRm9ybWF0cyA9IGZvcm1hdHM7XG4gICAgICAgICAgICBpZiAocGFyc2VGb3JtYXRzKSB7XG4gICAgICAgICAgICAgICAgaW5pdEZvcm1hdHRpbmcoKTsgLy8gcmVpbml0IGZvcm1hdHRpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmRpc2FibGVkRGF0ZXMgPSBmdW5jdGlvbiAoZGF0ZXMpIHtcbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmUgaGVscEtleXdvcmQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRpc2FibGVkRGF0ZXNcIj5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgY3VycmVudGx5IHNldCBkaXNhYmxlZCBkYXRlcyBvbiB0aGUgY29tcG9uZW50Ljwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLzxyZXR1cm5zIHR5cGU9XCJhcnJheVwiPm9wdGlvbnMuZGlzYWJsZWREYXRlczwvcmV0dXJucz5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlNldHRpbmcgdGhpcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgb3B0aW9ucy5taW5EYXRlLCBvcHRpb25zLm1heERhdGUgY29uZmlndXJhdGlvbi4gQWxzbyBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgY29uZmlndXJhdGlvbiBvZlxuICAgICAgICAgICAgLy8vb3B0aW9ucy5lbmFibGVkRGF0ZXMgaWYgc3VjaCBleGlzdC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cGFyYW0gbmFtZT1cImRhdGVzXCIgbG9jaWQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRpc2FibGVkRGF0ZXNfcDpkYXRlc1wiPlRha2VzIGFuIFsgc3RyaW5nIG9yIERhdGUgb3IgbW9tZW50IF0gb2YgdmFsdWVzIGFuZCBhbGxvd3MgdGhlIHVzZXIgdG8gc2VsZWN0IG9ubHkgZnJvbSB0aG9zZSBkYXlzLjwvcGFyYW0+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zLmRpc2FibGVkRGF0ZXMgPyAkLmV4dGVuZCh7fSwgb3B0aW9ucy5kaXNhYmxlZERhdGVzKSA6IG9wdGlvbnMuZGlzYWJsZWREYXRlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmRpc2FibGVkRGF0ZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoZGF0ZXMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkaXNhYmxlZERhdGVzKCkgZXhwZWN0cyBhbiBhcnJheSBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuZGlzYWJsZWREYXRlcyA9IGluZGV4R2l2ZW5EYXRlcyhkYXRlcyk7XG4gICAgICAgICAgICBvcHRpb25zLmVuYWJsZWREYXRlcyA9IGZhbHNlO1xuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5lbmFibGVkRGF0ZXMgPSBmdW5jdGlvbiAoZGF0ZXMpIHtcbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmUgaGVscEtleXdvcmQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmVuYWJsZWREYXRlc1wiPlxuICAgICAgICAgICAgLy8vPHN1bW1hcnk+UmV0dXJucyBhbiBhcnJheSB3aXRoIHRoZSBjdXJyZW50bHkgc2V0IGVuYWJsZWQgZGF0ZXMgb24gdGhlIGNvbXBvbmVudC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cmV0dXJucyB0eXBlPVwiYXJyYXlcIj5vcHRpb25zLmVuYWJsZWREYXRlczwvcmV0dXJucz5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlNldHRpbmcgdGhpcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgb3B0aW9ucy5taW5EYXRlLCBvcHRpb25zLm1heERhdGUgY29uZmlndXJhdGlvbi4gQWxzbyBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgY29uZmlndXJhdGlvbiBvZiBvcHRpb25zLmRpc2FibGVkRGF0ZXMgaWYgc3VjaCBleGlzdC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cGFyYW0gbmFtZT1cImRhdGVzXCIgbG9jaWQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmVuYWJsZWREYXRlc19wOmRhdGVzXCI+VGFrZXMgYW4gWyBzdHJpbmcgb3IgRGF0ZSBvciBtb21lbnQgXSBvZiB2YWx1ZXMgYW5kIGFsbG93cyB0aGUgdXNlciB0byBzZWxlY3Qgb25seSBmcm9tIHRob3NlIGRheXMuPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG9wdGlvbnMuZW5hYmxlZERhdGVzID8gJC5leHRlbmQoe30sIG9wdGlvbnMuZW5hYmxlZERhdGVzKSA6IG9wdGlvbnMuZW5hYmxlZERhdGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFkYXRlcykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZW5hYmxlZERhdGVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGRhdGVzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5hYmxlZERhdGVzKCkgZXhwZWN0cyBhbiBhcnJheSBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuZW5hYmxlZERhdGVzID0gaW5kZXhHaXZlbkRhdGVzKGRhdGVzKTtcbiAgICAgICAgICAgIG9wdGlvbnMuZGlzYWJsZWREYXRlcyA9IGZhbHNlO1xuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5kYXlzT2ZXZWVrRGlzYWJsZWQgPSBmdW5jdGlvbiAoZGF5c09mV2Vla0Rpc2FibGVkKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRheXNPZldlZWtEaXNhYmxlZC5zcGxpY2UoMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgodHlwZW9mIGRheXNPZldlZWtEaXNhYmxlZCA9PT0gJ2Jvb2xlYW4nKSAmJiAhZGF5c09mV2Vla0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kYXlzT2ZXZWVrRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIShkYXlzT2ZXZWVrRGlzYWJsZWQgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXlzT2ZXZWVrRGlzYWJsZWQoKSBleHBlY3RzIGFuIGFycmF5IHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5kYXlzT2ZXZWVrRGlzYWJsZWQgPSBkYXlzT2ZXZWVrRGlzYWJsZWQucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBwYXJzZUludChjdXJyZW50VmFsdWUsIDEwKTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID4gNiB8fCBjdXJyZW50VmFsdWUgPCAwIHx8IGlzTmFOKGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1ZhbHVlLmluZGV4T2YoY3VycmVudFZhbHVlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZS5wdXNoKGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xuICAgICAgICAgICAgfSwgW10pLnNvcnQoKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnVzZUN1cnJlbnQgJiYgIW9wdGlvbnMua2VlcEludmFsaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJpZXMgPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlICghaXNWYWxpZChkYXRlLCAnZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmllcyA9PT0gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ1RyaWVkIDcgdGltZXMgdG8gZmluZCBhIHZhbGlkIGRhdGUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyaWVzKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFZhbHVlKGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5tYXhEYXRlID0gZnVuY3Rpb24gKG1heERhdGUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMubWF4RGF0ZSA/IG9wdGlvbnMubWF4RGF0ZS5jbG9uZSgpIDogb3B0aW9ucy5tYXhEYXRlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKHR5cGVvZiBtYXhEYXRlID09PSAnYm9vbGVhbicpICYmIG1heERhdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5tYXhEYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXhEYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlmIChtYXhEYXRlID09PSAnbm93JyB8fCBtYXhEYXRlID09PSAnbW9tZW50Jykge1xuICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0gZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IHBhcnNlSW5wdXREYXRlKG1heERhdGUpO1xuXG4gICAgICAgICAgICBpZiAoIXBhcnNlZERhdGUuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4RGF0ZSgpIENvdWxkIG5vdCBwYXJzZSBkYXRlIHBhcmFtZXRlcjogJyArIG1heERhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWluRGF0ZSAmJiBwYXJzZWREYXRlLmlzQmVmb3JlKG9wdGlvbnMubWluRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXhEYXRlKCkgZGF0ZSBwYXJhbWV0ZXIgaXMgYmVmb3JlIG9wdGlvbnMubWluRGF0ZTogJyArIHBhcnNlZERhdGUuZm9ybWF0KGFjdHVhbEZvcm1hdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5tYXhEYXRlID0gcGFyc2VkRGF0ZTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnVzZUN1cnJlbnQgJiYgIW9wdGlvbnMua2VlcEludmFsaWQgJiYgZGF0ZS5pc0FmdGVyKG1heERhdGUpKSB7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUob3B0aW9ucy5tYXhEYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2aWV3RGF0ZS5pc0FmdGVyKHBhcnNlZERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdmlld0RhdGUgPSBwYXJzZWREYXRlLmNsb25lKCkuc3VidHJhY3Qob3B0aW9ucy5zdGVwcGluZywgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIubWluRGF0ZSA9IGZ1bmN0aW9uIChtaW5EYXRlKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLm1pbkRhdGUgPyBvcHRpb25zLm1pbkRhdGUuY2xvbmUoKSA6IG9wdGlvbnMubWluRGF0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgbWluRGF0ZSA9PT0gJ2Jvb2xlYW4nKSAmJiBtaW5EYXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubWluRGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWluRGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluRGF0ZSA9PT0gJ25vdycgfHwgbWluRGF0ZSA9PT0gJ21vbWVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluRGF0ZSA9IGdldE1vbWVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBhcnNlZERhdGUgPSBwYXJzZUlucHV0RGF0ZShtaW5EYXRlKTtcblxuICAgICAgICAgICAgaWYgKCFwYXJzZWREYXRlLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pbkRhdGUoKSBDb3VsZCBub3QgcGFyc2UgZGF0ZSBwYXJhbWV0ZXI6ICcgKyBtaW5EYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1heERhdGUgJiYgcGFyc2VkRGF0ZS5pc0FmdGVyKG9wdGlvbnMubWF4RGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaW5EYXRlKCkgZGF0ZSBwYXJhbWV0ZXIgaXMgYWZ0ZXIgb3B0aW9ucy5tYXhEYXRlOiAnICsgcGFyc2VkRGF0ZS5mb3JtYXQoYWN0dWFsRm9ybWF0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLm1pbkRhdGUgPSBwYXJzZWREYXRlO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMudXNlQ3VycmVudCAmJiAhb3B0aW9ucy5rZWVwSW52YWxpZCAmJiBkYXRlLmlzQmVmb3JlKG1pbkRhdGUpKSB7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUob3B0aW9ucy5taW5EYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2aWV3RGF0ZS5pc0JlZm9yZShwYXJzZWREYXRlKSkge1xuICAgICAgICAgICAgICAgIHZpZXdEYXRlID0gcGFyc2VkRGF0ZS5jbG9uZSgpLmFkZChvcHRpb25zLnN0ZXBwaW5nLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5kZWZhdWx0RGF0ZSA9IGZ1bmN0aW9uIChkZWZhdWx0RGF0ZSkge1xuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZSBoZWxwS2V5d29yZD1cIiQuZm4uZGF0ZXRpbWVwaWNrZXIuZGVmYXVsdERhdGVcIj5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlJldHVybnMgYSBtb21lbnQgd2l0aCB0aGUgb3B0aW9ucy5kZWZhdWx0RGF0ZSBvcHRpb24gY29uZmlndXJhdGlvbiBvciBmYWxzZSBpZiBub3Qgc2V0PC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHJldHVybnMgdHlwZT1cIk1vbWVudFwiPmRhdGUuY2xvbmUoKTwvcmV0dXJucz5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PldpbGwgc2V0IHRoZSBwaWNrZXIncyBpbml0YWwgZGF0ZS4gSWYgYSBib29sZWFuOmZhbHNlIHZhbHVlIGlzIHBhc3NlZCB0aGUgb3B0aW9ucy5kZWZhdWx0RGF0ZSBwYXJhbWV0ZXIgaXMgY2xlYXJlZC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cGFyYW0gbmFtZT1cImRlZmF1bHREYXRlXCIgbG9jaWQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRlZmF1bHREYXRlX3A6ZGVmYXVsdERhdGVcIj5UYWtlcyBhIHN0cmluZywgRGF0ZSwgbW9tZW50LCBib29sZWFuOmZhbHNlPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kZWZhdWx0RGF0ZSA/IG9wdGlvbnMuZGVmYXVsdERhdGUuY2xvbmUoKSA6IG9wdGlvbnMuZGVmYXVsdERhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRlZmF1bHREYXRlKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kZWZhdWx0RGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGVmYXVsdERhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHREYXRlID09PSAnbm93JyB8fCBkZWZhdWx0RGF0ZSA9PT0gJ21vbWVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdERhdGUgPSBnZXRNb21lbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJzZWREYXRlID0gcGFyc2VJbnB1dERhdGUoZGVmYXVsdERhdGUpO1xuICAgICAgICAgICAgaWYgKCFwYXJzZWREYXRlLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RlZmF1bHREYXRlKCkgQ291bGQgbm90IHBhcnNlIGRhdGUgcGFyYW1ldGVyOiAnICsgZGVmYXVsdERhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKHBhcnNlZERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGVmYXVsdERhdGUoKSBkYXRlIHBhc3NlZCBpcyBpbnZhbGlkIGFjY29yZGluZyB0byBjb21wb25lbnQgc2V0dXAgdmFsaWRhdGlvbnMnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5kZWZhdWx0RGF0ZSA9IHBhcnNlZERhdGU7XG5cbiAgICAgICAgICAgIGlmICgob3B0aW9ucy5kZWZhdWx0RGF0ZSAmJiBvcHRpb25zLmlubGluZSkgfHwgaW5wdXQudmFsKCkudHJpbSgpID09PSAnJykge1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKG9wdGlvbnMuZGVmYXVsdERhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIubG9jYWxlID0gZnVuY3Rpb24gKGxvY2FsZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5sb2NhbGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghbW9tZW50LmxvY2FsZURhdGEobG9jYWxlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xvY2FsZSgpIGxvY2FsZSAnICsgbG9jYWxlICsgJyBpcyBub3QgbG9hZGVkIGZyb20gbW9tZW50IGxvY2FsZXMhJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMubG9jYWxlID0gbG9jYWxlO1xuICAgICAgICAgICAgZGF0ZS5sb2NhbGUob3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICAgICAgdmlld0RhdGUubG9jYWxlKG9wdGlvbnMubG9jYWxlKTtcblxuICAgICAgICAgICAgaWYgKGFjdHVhbEZvcm1hdCkge1xuICAgICAgICAgICAgICAgIGluaXRGb3JtYXR0aW5nKCk7IC8vIHJlaW5pdCBmb3JtYXR0aW5nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLnN0ZXBwaW5nID0gZnVuY3Rpb24gKHN0ZXBwaW5nKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnN0ZXBwaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGVwcGluZyA9IHBhcnNlSW50KHN0ZXBwaW5nLCAxMCk7XG4gICAgICAgICAgICBpZiAoaXNOYU4oc3RlcHBpbmcpIHx8IHN0ZXBwaW5nIDwgMSkge1xuICAgICAgICAgICAgICAgIHN0ZXBwaW5nID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuc3RlcHBpbmcgPSBzdGVwcGluZztcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLnVzZUN1cnJlbnQgPSBmdW5jdGlvbiAodXNlQ3VycmVudCkge1xuICAgICAgICAgICAgdmFyIHVzZUN1cnJlbnRPcHRpb25zID0gWyd5ZWFyJywgJ21vbnRoJywgJ2RheScsICdob3VyJywgJ21pbnV0ZSddO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy51c2VDdXJyZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKHR5cGVvZiB1c2VDdXJyZW50ICE9PSAnYm9vbGVhbicpICYmICh0eXBlb2YgdXNlQ3VycmVudCAhPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndXNlQ3VycmVudCgpIGV4cGVjdHMgYSBib29sZWFuIG9yIHN0cmluZyBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXNlQ3VycmVudCA9PT0gJ3N0cmluZycgJiYgdXNlQ3VycmVudE9wdGlvbnMuaW5kZXhPZih1c2VDdXJyZW50LnRvTG93ZXJDYXNlKCkpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VzZUN1cnJlbnQoKSBleHBlY3RzIGEgc3RyaW5nIHBhcmFtZXRlciBvZiAnICsgdXNlQ3VycmVudE9wdGlvbnMuam9pbignLCAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnVzZUN1cnJlbnQgPSB1c2VDdXJyZW50O1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuY29sbGFwc2UgPSBmdW5jdGlvbiAoY29sbGFwc2UpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuY29sbGFwc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sbGFwc2UgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NvbGxhcHNlKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb2xsYXBzZSA9PT0gY29sbGFwc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5jb2xsYXBzZSA9IGNvbGxhcHNlO1xuICAgICAgICAgICAgaWYgKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5pY29ucyA9IGZ1bmN0aW9uIChpY29ucykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIG9wdGlvbnMuaWNvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIShpY29ucyBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpY29ucygpIGV4cGVjdHMgcGFyYW1ldGVyIHRvIGJlIGFuIE9iamVjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJC5leHRlbmQob3B0aW9ucy5pY29ucywgaWNvbnMpO1xuICAgICAgICAgICAgaWYgKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci50b29sdGlwcyA9IGZ1bmN0aW9uICh0b29sdGlwcykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIG9wdGlvbnMudG9vbHRpcHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoISh0b29sdGlwcyBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0b29sdGlwcygpIGV4cGVjdHMgcGFyYW1ldGVyIHRvIGJlIGFuIE9iamVjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJC5leHRlbmQob3B0aW9ucy50b29sdGlwcywgdG9vbHRpcHMpO1xuICAgICAgICAgICAgaWYgKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci51c2VTdHJpY3QgPSBmdW5jdGlvbiAodXNlU3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnVzZVN0cmljdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB1c2VTdHJpY3QgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VzZVN0cmljdCgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy51c2VTdHJpY3QgPSB1c2VTdHJpY3Q7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5zaWRlQnlTaWRlID0gZnVuY3Rpb24gKHNpZGVCeVNpZGUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2lkZUJ5U2lkZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzaWRlQnlTaWRlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaWRlQnlTaWRlKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnNpZGVCeVNpZGUgPSBzaWRlQnlTaWRlO1xuICAgICAgICAgICAgaWYgKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci52aWV3TW9kZSA9IGZ1bmN0aW9uICh2aWV3TW9kZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy52aWV3TW9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2aWV3TW9kZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aWV3TW9kZSgpIGV4cGVjdHMgYSBzdHJpbmcgcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2aWV3TW9kZXMuaW5kZXhPZih2aWV3TW9kZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmlld01vZGUoKSBwYXJhbWV0ZXIgbXVzdCBiZSBvbmUgb2YgKCcgKyB2aWV3TW9kZXMuam9pbignLCAnKSArICcpIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMudmlld01vZGUgPSB2aWV3TW9kZTtcbiAgICAgICAgICAgIGN1cnJlbnRWaWV3TW9kZSA9IE1hdGgubWF4KHZpZXdNb2Rlcy5pbmRleE9mKHZpZXdNb2RlKSwgbWluVmlld01vZGVOdW1iZXIpO1xuXG4gICAgICAgICAgICBzaG93TW9kZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIudG9vbGJhclBsYWNlbWVudCA9IGZ1bmN0aW9uICh0b29sYmFyUGxhY2VtZW50KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRvb2xiYXJQbGFjZW1lbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9vbGJhclBsYWNlbWVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0b29sYmFyUGxhY2VtZW50KCkgZXhwZWN0cyBhIHN0cmluZyBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b29sYmFyUGxhY2VtZW50cy5pbmRleE9mKHRvb2xiYXJQbGFjZW1lbnQpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Rvb2xiYXJQbGFjZW1lbnQoKSBwYXJhbWV0ZXIgbXVzdCBiZSBvbmUgb2YgKCcgKyB0b29sYmFyUGxhY2VtZW50cy5qb2luKCcsICcpICsgJykgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMudG9vbGJhclBsYWNlbWVudCA9IHRvb2xiYXJQbGFjZW1lbnQ7XG5cbiAgICAgICAgICAgIGlmICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIud2lkZ2V0UG9zaXRpb25pbmcgPSBmdW5jdGlvbiAod2lkZ2V0UG9zaXRpb25pbmcpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBvcHRpb25zLndpZGdldFBvc2l0aW9uaW5nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCh7fSkudG9TdHJpbmcuY2FsbCh3aWRnZXRQb3NpdGlvbmluZykgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignd2lkZ2V0UG9zaXRpb25pbmcoKSBleHBlY3RzIGFuIG9iamVjdCB2YXJpYWJsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdpZGdldFBvc2l0aW9uaW5nLmhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHdpZGdldFBvc2l0aW9uaW5nLmhvcml6b250YWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3dpZGdldFBvc2l0aW9uaW5nKCkgaG9yaXpvbnRhbCB2YXJpYWJsZSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdpZGdldFBvc2l0aW9uaW5nLmhvcml6b250YWwgPSB3aWRnZXRQb3NpdGlvbmluZy5ob3Jpem9udGFsLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGhvcml6b250YWxNb2Rlcy5pbmRleE9mKHdpZGdldFBvc2l0aW9uaW5nLmhvcml6b250YWwpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd3aWRnZXRQb3NpdGlvbmluZygpIGV4cGVjdHMgaG9yaXpvbnRhbCBwYXJhbWV0ZXIgdG8gYmUgb25lIG9mICgnICsgaG9yaXpvbnRhbE1vZGVzLmpvaW4oJywgJykgKyAnKScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zLndpZGdldFBvc2l0aW9uaW5nLmhvcml6b250YWwgPSB3aWRnZXRQb3NpdGlvbmluZy5ob3Jpem9udGFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdpZGdldFBvc2l0aW9uaW5nLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aWRnZXRQb3NpdGlvbmluZy52ZXJ0aWNhbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignd2lkZ2V0UG9zaXRpb25pbmcoKSB2ZXJ0aWNhbCB2YXJpYWJsZSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdpZGdldFBvc2l0aW9uaW5nLnZlcnRpY2FsID0gd2lkZ2V0UG9zaXRpb25pbmcudmVydGljYWwudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAodmVydGljYWxNb2Rlcy5pbmRleE9mKHdpZGdldFBvc2l0aW9uaW5nLnZlcnRpY2FsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignd2lkZ2V0UG9zaXRpb25pbmcoKSBleHBlY3RzIHZlcnRpY2FsIHBhcmFtZXRlciB0byBiZSBvbmUgb2YgKCcgKyB2ZXJ0aWNhbE1vZGVzLmpvaW4oJywgJykgKyAnKScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zLndpZGdldFBvc2l0aW9uaW5nLnZlcnRpY2FsID0gd2lkZ2V0UG9zaXRpb25pbmcudmVydGljYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmNhbGVuZGFyV2Vla3MgPSBmdW5jdGlvbiAoY2FsZW5kYXJXZWVrcykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5jYWxlbmRhcldlZWtzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGVuZGFyV2Vla3MgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhbGVuZGFyV2Vla3MoKSBleHBlY3RzIHBhcmFtZXRlciB0byBiZSBhIGJvb2xlYW4gdmFsdWUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5jYWxlbmRhcldlZWtzID0gY2FsZW5kYXJXZWVrcztcbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuc2hvd1RvZGF5QnV0dG9uID0gZnVuY3Rpb24gKHNob3dUb2RheUJ1dHRvbikge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5zaG93VG9kYXlCdXR0b247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2hvd1RvZGF5QnV0dG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaG93VG9kYXlCdXR0b24oKSBleHBlY3RzIGEgYm9vbGVhbiBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5zaG93VG9kYXlCdXR0b24gPSBzaG93VG9kYXlCdXR0b247XG4gICAgICAgICAgICBpZiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLnNob3dDbGVhciA9IGZ1bmN0aW9uIChzaG93Q2xlYXIpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2hvd0NsZWFyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNob3dDbGVhciAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2hvd0NsZWFyKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuc2hvd0NsZWFyID0gc2hvd0NsZWFyO1xuICAgICAgICAgICAgaWYgKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci53aWRnZXRQYXJlbnQgPSBmdW5jdGlvbiAod2lkZ2V0UGFyZW50KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLndpZGdldFBhcmVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aWRnZXRQYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgd2lkZ2V0UGFyZW50ID0gJCh3aWRnZXRQYXJlbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAod2lkZ2V0UGFyZW50ICE9PSBudWxsICYmICh0eXBlb2Ygd2lkZ2V0UGFyZW50ICE9PSAnc3RyaW5nJyAmJiAhKHdpZGdldFBhcmVudCBpbnN0YW5jZW9mICQpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3dpZGdldFBhcmVudCgpIGV4cGVjdHMgYSBzdHJpbmcgb3IgYSBqUXVlcnkgb2JqZWN0IHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLndpZGdldFBhcmVudCA9IHdpZGdldFBhcmVudDtcbiAgICAgICAgICAgIGlmICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIua2VlcE9wZW4gPSBmdW5jdGlvbiAoa2VlcE9wZW4pIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMua2VlcE9wZW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Yga2VlcE9wZW4gIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2tlZXBPcGVuKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMua2VlcE9wZW4gPSBrZWVwT3BlbjtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmZvY3VzT25TaG93ID0gZnVuY3Rpb24gKGZvY3VzT25TaG93KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmZvY3VzT25TaG93O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZvY3VzT25TaG93ICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdmb2N1c09uU2hvdygpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLmZvY3VzT25TaG93ID0gZm9jdXNPblNob3c7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5pbmxpbmUgPSBmdW5jdGlvbiAoaW5saW5lKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmlubGluZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbmxpbmUgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lubGluZSgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLmlubGluZSA9IGlubGluZTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xlYXIoKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmtleUJpbmRzID0gZnVuY3Rpb24gKGtleUJpbmRzKSB7XG4gICAgICAgICAgICBvcHRpb25zLmtleUJpbmRzID0ga2V5QmluZHM7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5nZXRNb21lbnQgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE1vbWVudChkKTtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZGVidWcgPSBmdW5jdGlvbiAoZGVidWcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGVidWcgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RlYnVnKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuZGVidWcgPSBkZWJ1ZztcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmFsbG93SW5wdXRUb2dnbGUgPSBmdW5jdGlvbiAoYWxsb3dJbnB1dFRvZ2dsZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5hbGxvd0lucHV0VG9nZ2xlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFsbG93SW5wdXRUb2dnbGUgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FsbG93SW5wdXRUb2dnbGUoKSBleHBlY3RzIGEgYm9vbGVhbiBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5hbGxvd0lucHV0VG9nZ2xlID0gYWxsb3dJbnB1dFRvZ2dsZTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLnNob3dDbG9zZSA9IGZ1bmN0aW9uIChzaG93Q2xvc2UpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2hvd0Nsb3NlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNob3dDbG9zZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2hvd0Nsb3NlKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuc2hvd0Nsb3NlID0gc2hvd0Nsb3NlO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIua2VlcEludmFsaWQgPSBmdW5jdGlvbiAoa2VlcEludmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMua2VlcEludmFsaWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Yga2VlcEludmFsaWQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2tlZXBJbnZhbGlkKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmtlZXBJbnZhbGlkID0ga2VlcEludmFsaWQ7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5kYXRlcGlja2VySW5wdXQgPSBmdW5jdGlvbiAoZGF0ZXBpY2tlcklucHV0KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRhdGVwaWNrZXJJbnB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRlcGlja2VySW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0ZXBpY2tlcklucHV0KCkgZXhwZWN0cyBhIHN0cmluZyBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5kYXRlcGlja2VySW5wdXQgPSBkYXRlcGlja2VySW5wdXQ7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5wYXJzZUlucHV0RGF0ZSA9IGZ1bmN0aW9uIChwYXJzZUlucHV0RGF0ZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5wYXJzZUlucHV0RGF0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZUlucHV0RGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlSW5wdXREYXRlKCkgc2hvbHVkIGJlIGFzIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMucGFyc2VJbnB1dERhdGUgPSBwYXJzZUlucHV0RGF0ZTtcblxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzID0gZnVuY3Rpb24gKGRpc2FibGVkVGltZUludGVydmFscykge1xuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZSBoZWxwS2V5d29yZD1cIiQuZm4uZGF0ZXRpbWVwaWNrZXIuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzXCI+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5SZXR1cm5zIGFuIGFycmF5IHdpdGggdGhlIGN1cnJlbnRseSBzZXQgZGlzYWJsZWQgZGF0ZXMgb24gdGhlIGNvbXBvbmVudC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cmV0dXJucyB0eXBlPVwiYXJyYXlcIj5vcHRpb25zLmRpc2FibGVkVGltZUludGVydmFsczwvcmV0dXJucz5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlNldHRpbmcgdGhpcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgb3B0aW9ucy5taW5EYXRlLCBvcHRpb25zLm1heERhdGUgY29uZmlndXJhdGlvbi4gQWxzbyBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgY29uZmlndXJhdGlvbiBvZlxuICAgICAgICAgICAgLy8vb3B0aW9ucy5lbmFibGVkRGF0ZXMgaWYgc3VjaCBleGlzdC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cGFyYW0gbmFtZT1cImRhdGVzXCIgbG9jaWQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRpc2FibGVkVGltZUludGVydmFsc19wOmRhdGVzXCI+VGFrZXMgYW4gWyBzdHJpbmcgb3IgRGF0ZSBvciBtb21lbnQgXSBvZiB2YWx1ZXMgYW5kIGFsbG93cyB0aGUgdXNlciB0byBzZWxlY3Qgb25seSBmcm9tIHRob3NlIGRheXMuPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG9wdGlvbnMuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzID8gJC5leHRlbmQoe30sIG9wdGlvbnMuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzKSA6IG9wdGlvbnMuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFkaXNhYmxlZFRpbWVJbnRlcnZhbHMpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmRpc2FibGVkVGltZUludGVydmFscyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShkaXNhYmxlZFRpbWVJbnRlcnZhbHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkaXNhYmxlZFRpbWVJbnRlcnZhbHMoKSBleHBlY3RzIGFuIGFycmF5IHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5kaXNhYmxlZFRpbWVJbnRlcnZhbHMgPSBkaXNhYmxlZFRpbWVJbnRlcnZhbHM7XG4gICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmRpc2FibGVkSG91cnMgPSBmdW5jdGlvbiAoaG91cnMpIHtcbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmUgaGVscEtleXdvcmQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRpc2FibGVkSG91cnNcIj5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgY3VycmVudGx5IHNldCBkaXNhYmxlZCBob3VycyBvbiB0aGUgY29tcG9uZW50Ljwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLzxyZXR1cm5zIHR5cGU9XCJhcnJheVwiPm9wdGlvbnMuZGlzYWJsZWRIb3VyczwvcmV0dXJucz5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlNldHRpbmcgdGhpcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgb3B0aW9ucy5taW5EYXRlLCBvcHRpb25zLm1heERhdGUgY29uZmlndXJhdGlvbi4gQWxzbyBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgY29uZmlndXJhdGlvbiBvZlxuICAgICAgICAgICAgLy8vb3B0aW9ucy5lbmFibGVkSG91cnMgaWYgc3VjaCBleGlzdC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cGFyYW0gbmFtZT1cImhvdXJzXCIgbG9jaWQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRpc2FibGVkSG91cnNfcDpob3Vyc1wiPlRha2VzIGFuIFsgaW50IF0gb2YgdmFsdWVzIGFuZCBkaXNhbGxvd3MgdGhlIHVzZXIgdG8gc2VsZWN0IG9ubHkgZnJvbSB0aG9zZSBob3Vycy48L3BhcmFtPlxuICAgICAgICAgICAgLy8vPC9zaWduYXR1cmU+XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAob3B0aW9ucy5kaXNhYmxlZEhvdXJzID8gJC5leHRlbmQoe30sIG9wdGlvbnMuZGlzYWJsZWRIb3VycykgOiBvcHRpb25zLmRpc2FibGVkSG91cnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWhvdXJzKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kaXNhYmxlZEhvdXJzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGhvdXJzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGlzYWJsZWRIb3VycygpIGV4cGVjdHMgYW4gYXJyYXkgcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmRpc2FibGVkSG91cnMgPSBpbmRleEdpdmVuSG91cnMoaG91cnMpO1xuICAgICAgICAgICAgb3B0aW9ucy5lbmFibGVkSG91cnMgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnVzZUN1cnJlbnQgJiYgIW9wdGlvbnMua2VlcEludmFsaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJpZXMgPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlICghaXNWYWxpZChkYXRlLCAnaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUuYWRkKDEsICdoJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmllcyA9PT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93ICdUcmllZCAyNCB0aW1lcyB0byBmaW5kIGEgdmFsaWQgZGF0ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZXMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmVuYWJsZWRIb3VycyA9IGZ1bmN0aW9uIChob3Vycykge1xuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZSBoZWxwS2V5d29yZD1cIiQuZm4uZGF0ZXRpbWVwaWNrZXIuZW5hYmxlZEhvdXJzXCI+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5SZXR1cm5zIGFuIGFycmF5IHdpdGggdGhlIGN1cnJlbnRseSBzZXQgZW5hYmxlZCBob3VycyBvbiB0aGUgY29tcG9uZW50Ljwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLzxyZXR1cm5zIHR5cGU9XCJhcnJheVwiPm9wdGlvbnMuZW5hYmxlZEhvdXJzPC9yZXR1cm5zPlxuICAgICAgICAgICAgLy8vPC9zaWduYXR1cmU+XG4gICAgICAgICAgICAvLy88c2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHN1bW1hcnk+U2V0dGluZyB0aGlzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBvcHRpb25zLm1pbkRhdGUsIG9wdGlvbnMubWF4RGF0ZSBjb25maWd1cmF0aW9uLiBBbHNvIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiByZW1vdmVzIHRoZSBjb25maWd1cmF0aW9uIG9mIG9wdGlvbnMuZGlzYWJsZWRIb3VycyBpZiBzdWNoIGV4aXN0Ljwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLzxwYXJhbSBuYW1lPVwiaG91cnNcIiBsb2NpZD1cIiQuZm4uZGF0ZXRpbWVwaWNrZXIuZW5hYmxlZEhvdXJzX3A6aG91cnNcIj5UYWtlcyBhbiBbIGludCBdIG9mIHZhbHVlcyBhbmQgYWxsb3dzIHRoZSB1c2VyIHRvIHNlbGVjdCBvbmx5IGZyb20gdGhvc2UgaG91cnMuPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG9wdGlvbnMuZW5hYmxlZEhvdXJzID8gJC5leHRlbmQoe30sIG9wdGlvbnMuZW5hYmxlZEhvdXJzKSA6IG9wdGlvbnMuZW5hYmxlZEhvdXJzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFob3Vycykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZW5hYmxlZEhvdXJzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGhvdXJzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5hYmxlZEhvdXJzKCkgZXhwZWN0cyBhbiBhcnJheSBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuZW5hYmxlZEhvdXJzID0gaW5kZXhHaXZlbkhvdXJzKGhvdXJzKTtcbiAgICAgICAgICAgIG9wdGlvbnMuZGlzYWJsZWRIb3VycyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMudXNlQ3VycmVudCAmJiAhb3B0aW9ucy5rZWVwSW52YWxpZCkge1xuICAgICAgICAgICAgICAgIHZhciB0cmllcyA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKCFpc1ZhbGlkKGRhdGUsICdoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZS5hZGQoMSwgJ2gnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyaWVzID09PSAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ1RyaWVkIDI0IHRpbWVzIHRvIGZpbmQgYSB2YWxpZCBkYXRlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmllcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIudmlld0RhdGUgPSBmdW5jdGlvbiAobmV3RGF0ZSkge1xuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZSBoZWxwS2V5d29yZD1cIiQuZm4uZGF0ZXRpbWVwaWNrZXIudmlld0RhdGVcIj5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlJldHVybnMgdGhlIGNvbXBvbmVudCdzIG1vZGVsIGN1cnJlbnQgdmlld0RhdGUsIGEgbW9tZW50IG9iamVjdCBvciBudWxsIGlmIG5vdCBzZXQuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHJldHVybnMgdHlwZT1cIk1vbWVudFwiPnZpZXdEYXRlLmNsb25lKCk8L3JldHVybnM+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmU+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5TZXRzIHRoZSBjb21wb25lbnRzIG1vZGVsIGN1cnJlbnQgbW9tZW50IHRvIGl0LiBQYXNzaW5nIGEgbnVsbCB2YWx1ZSB1bnNldHMgdGhlIGNvbXBvbmVudHMgbW9kZWwgY3VycmVudCBtb21lbnQuIFBhcnNpbmcgb2YgdGhlIG5ld0RhdGUgcGFyYW1ldGVyIGlzIG1hZGUgdXNpbmcgbW9tZW50IGxpYnJhcnkgd2l0aCB0aGUgb3B0aW9ucy5mb3JtYXQgYW5kIG9wdGlvbnMudXNlU3RyaWN0IGNvbXBvbmVudHMgY29uZmlndXJhdGlvbi48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cGFyYW0gbmFtZT1cIm5ld0RhdGVcIiBsb2NpZD1cIiQuZm4uZGF0ZXRpbWVwaWNrZXIuZGF0ZV9wOm5ld0RhdGVcIj5UYWtlcyBzdHJpbmcsIHZpZXdEYXRlLCBtb21lbnQsIG51bGwgcGFyYW1ldGVyLjwvcGFyYW0+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdEYXRlLmNsb25lKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghbmV3RGF0ZSkge1xuICAgICAgICAgICAgICAgIHZpZXdEYXRlID0gZGF0ZS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3RGF0ZSAhPT0gJ3N0cmluZycgJiYgIW1vbWVudC5pc01vbWVudChuZXdEYXRlKSAmJiAhKG5ld0RhdGUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZpZXdEYXRlKCkgcGFyYW1ldGVyIG11c3QgYmUgb25lIG9mIFtzdHJpbmcsIG1vbWVudCBvciBEYXRlXScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2aWV3RGF0ZSA9IHBhcnNlSW5wdXREYXRlKG5ld0RhdGUpO1xuICAgICAgICAgICAgdmlld1VwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBpbml0aWFsaXppbmcgZWxlbWVudCBhbmQgY29tcG9uZW50IGF0dHJpYnV0ZXNcbiAgICAgICAgaWYgKGVsZW1lbnQuaXMoJ2lucHV0JykpIHtcbiAgICAgICAgICAgIGlucHV0ID0gZWxlbWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0ID0gZWxlbWVudC5maW5kKG9wdGlvbnMuZGF0ZXBpY2tlcklucHV0KTtcbiAgICAgICAgICAgIGlmIChpbnB1dC5zaXplKCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGVsZW1lbnQuZmluZCgnaW5wdXQnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlucHV0LmlzKCdpbnB1dCcpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDU1MgY2xhc3MgXCInICsgb3B0aW9ucy5kYXRlcGlja2VySW5wdXQgKyAnXCIgY2Fubm90IGJlIGFwcGxpZWQgdG8gbm9uIGlucHV0IGVsZW1lbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKCdpbnB1dC1ncm91cCcpKSB7XG4gICAgICAgICAgICAvLyBpbiBjYXNlIHRoZXJlIGlzIG1vcmUgdGhlbiBvbmUgJ2lucHV0LWdyb3VwLWFkZG9uJyBJc3N1ZSAjNDhcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmZpbmQoJy5kYXRlcGlja2VyYnV0dG9uJykuc2l6ZSgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50ID0gZWxlbWVudC5maW5kKCcuaW5wdXQtZ3JvdXAtYWRkb24nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50ID0gZWxlbWVudC5maW5kKCcuZGF0ZXBpY2tlcmJ1dHRvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmlubGluZSAmJiAhaW5wdXQuaXMoJ2lucHV0JykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGluaXRpYWxpemUgRGF0ZVRpbWVQaWNrZXIgd2l0aG91dCBhbiBpbnB1dCBlbGVtZW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgZGVmYXVsdHMgZm9yIGRhdGUgaGVyZSBub3cgaW5zdGVhZCBvZiBpbiB2YXIgZGVjbGFyYXRpb25cbiAgICAgICAgZGF0ZSA9IGdldE1vbWVudCgpO1xuICAgICAgICB2aWV3RGF0ZSA9IGRhdGUuY2xvbmUoKTtcblxuICAgICAgICAkLmV4dGVuZCh0cnVlLCBvcHRpb25zLCBkYXRhVG9PcHRpb25zKCkpO1xuXG4gICAgICAgIHBpY2tlci5vcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIGluaXRGb3JtYXR0aW5nKCk7XG5cbiAgICAgICAgYXR0YWNoRGF0ZVBpY2tlckVsZW1lbnRFdmVudHMoKTtcblxuICAgICAgICBpZiAoaW5wdXQucHJvcCgnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgcGlja2VyLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQuaXMoJ2lucHV0JykgJiYgaW5wdXQudmFsKCkudHJpbSgpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgc2V0VmFsdWUocGFyc2VJbnB1dERhdGUoaW5wdXQudmFsKCkudHJpbSgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5kZWZhdWx0RGF0ZSAmJiBpbnB1dC5hdHRyKCdwbGFjZWhvbGRlcicpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNldFZhbHVlKG9wdGlvbnMuZGVmYXVsdERhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmlubGluZSkge1xuICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgfTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqXG4gICAgICogalF1ZXJ5IHBsdWdpbiBjb25zdHJ1Y3RvciBhbmQgZGVmYXVsdHMgb2JqZWN0XG4gICAgICpcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAkLmZuLmRhdGV0aW1lcGlja2VyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICAgICAgaWYgKCEkdGhpcy5kYXRhKCdEYXRlVGltZVBpY2tlcicpKSB7XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgcHJpdmF0ZSBjb3B5IG9mIHRoZSBkZWZhdWx0cyBvYmplY3RcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sICQuZm4uZGF0ZXRpbWVwaWNrZXIuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ0RhdGVUaW1lUGlja2VyJywgZGF0ZVRpbWVQaWNrZXIoJHRoaXMsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICQuZm4uZGF0ZXRpbWVwaWNrZXIuZGVmYXVsdHMgPSB7XG4gICAgICAgIHRpbWVab25lOiAnRXRjL1VUQycsXG4gICAgICAgIGZvcm1hdDogZmFsc2UsXG4gICAgICAgIGRheVZpZXdIZWFkZXJGb3JtYXQ6ICdNTU1NIFlZWVknLFxuICAgICAgICBleHRyYUZvcm1hdHM6IGZhbHNlLFxuICAgICAgICBzdGVwcGluZzogMSxcbiAgICAgICAgbWluRGF0ZTogZmFsc2UsXG4gICAgICAgIG1heERhdGU6IGZhbHNlLFxuICAgICAgICB1c2VDdXJyZW50OiB0cnVlLFxuICAgICAgICBjb2xsYXBzZTogdHJ1ZSxcbiAgICAgICAgbG9jYWxlOiBtb21lbnQubG9jYWxlKCksXG4gICAgICAgIGRlZmF1bHREYXRlOiBmYWxzZSxcbiAgICAgICAgZGlzYWJsZWREYXRlczogZmFsc2UsXG4gICAgICAgIGVuYWJsZWREYXRlczogZmFsc2UsXG4gICAgICAgIGljb25zOiB7XG4gICAgICAgICAgICB0aW1lOiAnZ2x5cGhpY29uIGdseXBoaWNvbi10aW1lJyxcbiAgICAgICAgICAgIGRhdGU6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyJyxcbiAgICAgICAgICAgIHVwOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwJyxcbiAgICAgICAgICAgIGRvd246ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bicsXG4gICAgICAgICAgICBwcmV2aW91czogJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0JyxcbiAgICAgICAgICAgIG5leHQ6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHQnLFxuICAgICAgICAgICAgdG9kYXk6ICdnbHlwaGljb24gZ2x5cGhpY29uLXNjcmVlbnNob3QnLFxuICAgICAgICAgICAgY2xlYXI6ICdnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoJyxcbiAgICAgICAgICAgIGNsb3NlOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUnXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgICAgICB0b2RheTogJ0dvIHRvIHRvZGF5JyxcbiAgICAgICAgICAgIGNsZWFyOiAnQ2xlYXIgc2VsZWN0aW9uJyxcbiAgICAgICAgICAgIGNsb3NlOiAnQ2xvc2UgdGhlIHBpY2tlcicsXG4gICAgICAgICAgICBzZWxlY3RNb250aDogJ1NlbGVjdCBNb250aCcsXG4gICAgICAgICAgICBwcmV2TW9udGg6ICdQcmV2aW91cyBNb250aCcsXG4gICAgICAgICAgICBuZXh0TW9udGg6ICdOZXh0IE1vbnRoJyxcbiAgICAgICAgICAgIHNlbGVjdFllYXI6ICdTZWxlY3QgWWVhcicsXG4gICAgICAgICAgICBwcmV2WWVhcjogJ1ByZXZpb3VzIFllYXInLFxuICAgICAgICAgICAgbmV4dFllYXI6ICdOZXh0IFllYXInLFxuICAgICAgICAgICAgc2VsZWN0RGVjYWRlOiAnU2VsZWN0IERlY2FkZScsXG4gICAgICAgICAgICBwcmV2RGVjYWRlOiAnUHJldmlvdXMgRGVjYWRlJyxcbiAgICAgICAgICAgIG5leHREZWNhZGU6ICdOZXh0IERlY2FkZScsXG4gICAgICAgICAgICBwcmV2Q2VudHVyeTogJ1ByZXZpb3VzIENlbnR1cnknLFxuICAgICAgICAgICAgbmV4dENlbnR1cnk6ICdOZXh0IENlbnR1cnknLFxuICAgICAgICAgICAgcGlja0hvdXI6ICdQaWNrIEhvdXInLFxuICAgICAgICAgICAgaW5jcmVtZW50SG91cjogJ0luY3JlbWVudCBIb3VyJyxcbiAgICAgICAgICAgIGRlY3JlbWVudEhvdXI6ICdEZWNyZW1lbnQgSG91cicsXG4gICAgICAgICAgICBwaWNrTWludXRlOiAnUGljayBNaW51dGUnLFxuICAgICAgICAgICAgaW5jcmVtZW50TWludXRlOiAnSW5jcmVtZW50IE1pbnV0ZScsXG4gICAgICAgICAgICBkZWNyZW1lbnRNaW51dGU6ICdEZWNyZW1lbnQgTWludXRlJyxcbiAgICAgICAgICAgIHBpY2tTZWNvbmQ6ICdQaWNrIFNlY29uZCcsXG4gICAgICAgICAgICBpbmNyZW1lbnRTZWNvbmQ6ICdJbmNyZW1lbnQgU2Vjb25kJyxcbiAgICAgICAgICAgIGRlY3JlbWVudFNlY29uZDogJ0RlY3JlbWVudCBTZWNvbmQnLFxuICAgICAgICAgICAgdG9nZ2xlUGVyaW9kOiAnVG9nZ2xlIFBlcmlvZCcsXG4gICAgICAgICAgICBzZWxlY3RUaW1lOiAnU2VsZWN0IFRpbWUnXG4gICAgICAgIH0sXG4gICAgICAgIHVzZVN0cmljdDogZmFsc2UsXG4gICAgICAgIHNpZGVCeVNpZGU6IGZhbHNlLFxuICAgICAgICBkYXlzT2ZXZWVrRGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICBjYWxlbmRhcldlZWtzOiBmYWxzZSxcbiAgICAgICAgdmlld01vZGU6ICdkYXlzJyxcbiAgICAgICAgdG9vbGJhclBsYWNlbWVudDogJ2RlZmF1bHQnLFxuICAgICAgICBzaG93VG9kYXlCdXR0b246IGZhbHNlLFxuICAgICAgICBzaG93Q2xlYXI6IGZhbHNlLFxuICAgICAgICBzaG93Q2xvc2U6IGZhbHNlLFxuICAgICAgICB3aWRnZXRQb3NpdGlvbmluZzoge1xuICAgICAgICAgICAgaG9yaXpvbnRhbDogJ2F1dG8nLFxuICAgICAgICAgICAgdmVydGljYWw6ICdhdXRvJ1xuICAgICAgICB9LFxuICAgICAgICB3aWRnZXRQYXJlbnQ6IG51bGwsXG4gICAgICAgIGlnbm9yZVJlYWRvbmx5OiBmYWxzZSxcbiAgICAgICAga2VlcE9wZW46IGZhbHNlLFxuICAgICAgICBmb2N1c09uU2hvdzogdHJ1ZSxcbiAgICAgICAgaW5saW5lOiBmYWxzZSxcbiAgICAgICAga2VlcEludmFsaWQ6IGZhbHNlLFxuICAgICAgICBkYXRlcGlja2VySW5wdXQ6ICcuZGF0ZXBpY2tlcmlucHV0JyxcbiAgICAgICAga2V5QmluZHM6IHtcbiAgICAgICAgICAgIHVwOiBmdW5jdGlvbiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZGF0ZSgpIHx8IHRoaXMuZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlcicpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkLmNsb25lKCkuc3VidHJhY3QoNywgJ2QnKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKGQuY2xvbmUoKS5hZGQodGhpcy5zdGVwcGluZygpLCAnbScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZG93bjogZnVuY3Rpb24gKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkID0gdGhpcy5kYXRlKCkgfHwgdGhpcy5nZXRNb21lbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAod2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyJykuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKGQuY2xvbmUoKS5hZGQoNywgJ2QnKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKGQuY2xvbmUoKS5zdWJ0cmFjdCh0aGlzLnN0ZXBwaW5nKCksICdtJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnY29udHJvbCB1cCc6IGZ1bmN0aW9uICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkID0gdGhpcy5kYXRlKCkgfHwgdGhpcy5nZXRNb21lbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAod2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyJykuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKGQuY2xvbmUoKS5zdWJ0cmFjdCgxLCAneScpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoZC5jbG9uZSgpLmFkZCgxLCAnaCcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2NvbnRyb2wgZG93bic6IGZ1bmN0aW9uICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkID0gdGhpcy5kYXRlKCkgfHwgdGhpcy5nZXRNb21lbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAod2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyJykuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKGQuY2xvbmUoKS5hZGQoMSwgJ3knKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKGQuY2xvbmUoKS5zdWJ0cmFjdCgxLCAnaCcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVmdDogZnVuY3Rpb24gKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGQgPSB0aGlzLmRhdGUoKSB8fCB0aGlzLmdldE1vbWVudCgpO1xuICAgICAgICAgICAgICAgIGlmICh3aWRnZXQuZmluZCgnLmRhdGVwaWNrZXInKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoZC5jbG9uZSgpLnN1YnRyYWN0KDEsICdkJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByaWdodDogZnVuY3Rpb24gKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGQgPSB0aGlzLmRhdGUoKSB8fCB0aGlzLmdldE1vbWVudCgpO1xuICAgICAgICAgICAgICAgIGlmICh3aWRnZXQuZmluZCgnLmRhdGVwaWNrZXInKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoZC5jbG9uZSgpLmFkZCgxLCAnZCcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFnZVVwOiBmdW5jdGlvbiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZGF0ZSgpIHx8IHRoaXMuZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlcicpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkLmNsb25lKCkuc3VidHJhY3QoMSwgJ00nKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2VEb3duOiBmdW5jdGlvbiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZGF0ZSgpIHx8IHRoaXMuZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlcicpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkLmNsb25lKCkuYWRkKDEsICdNJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVzY2FwZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vdGFiOiBmdW5jdGlvbiAod2lkZ2V0KSB7IC8vdGhpcyBicmVhayB0aGUgZmxvdyBvZiB0aGUgZm9ybS4gZGlzYWJsaW5nIGZvciBub3dcbiAgICAgICAgICAgIC8vICAgIHZhciB0b2dnbGUgPSB3aWRnZXQuZmluZCgnLnBpY2tlci1zd2l0Y2ggYVtkYXRhLWFjdGlvbj1cInRvZ2dsZVBpY2tlclwiXScpO1xuICAgICAgICAgICAgLy8gICAgaWYodG9nZ2xlLmxlbmd0aCA+IDApIHRvZ2dsZS5jbGljaygpO1xuICAgICAgICAgICAgLy99LFxuICAgICAgICAgICAgJ2NvbnRyb2wgc3BhY2UnOiBmdW5jdGlvbiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpZGdldC5maW5kKCcudGltZXBpY2tlcicpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcuYnRuW2RhdGEtYWN0aW9uPVwidG9nZ2xlUGVyaW9kXCJdJykuY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSh0aGlzLmdldE1vbWVudCgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICBhbGxvd0lucHV0VG9nZ2xlOiBmYWxzZSxcbiAgICAgICAgZGlzYWJsZWRUaW1lSW50ZXJ2YWxzOiBmYWxzZSxcbiAgICAgICAgZGlzYWJsZWRIb3VyczogZmFsc2UsXG4gICAgICAgIGVuYWJsZWRIb3VyczogZmFsc2UsXG4gICAgICAgIHZpZXdEYXRlOiBmYWxzZVxuICAgIH07XG59KSk7XG4iLCIvLyBodHRwOi8vc3Bpbi5qcy5vcmcvI3YyLjMuMlxuIWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YigpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoYik6YS5TcGlubmVyPWIoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEoYSxiKXt2YXIgYyxkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYXx8XCJkaXZcIik7Zm9yKGMgaW4gYilkW2NdPWJbY107cmV0dXJuIGR9ZnVuY3Rpb24gYihhKXtmb3IodmFyIGI9MSxjPWFyZ3VtZW50cy5sZW5ndGg7Yz5iO2IrKylhLmFwcGVuZENoaWxkKGFyZ3VtZW50c1tiXSk7cmV0dXJuIGF9ZnVuY3Rpb24gYyhhLGIsYyxkKXt2YXIgZT1bXCJvcGFjaXR5XCIsYix+figxMDAqYSksYyxkXS5qb2luKFwiLVwiKSxmPS4wMStjL2QqMTAwLGc9TWF0aC5tYXgoMS0oMS1hKS9iKigxMDAtZiksYSksaD1qLnN1YnN0cmluZygwLGouaW5kZXhPZihcIkFuaW1hdGlvblwiKSkudG9Mb3dlckNhc2UoKSxpPWgmJlwiLVwiK2grXCItXCJ8fFwiXCI7cmV0dXJuIG1bZV18fChrLmluc2VydFJ1bGUoXCJAXCIraStcImtleWZyYW1lcyBcIitlK1wiezAle29wYWNpdHk6XCIrZytcIn1cIitmK1wiJXtvcGFjaXR5OlwiK2ErXCJ9XCIrKGYrLjAxKStcIiV7b3BhY2l0eToxfVwiKyhmK2IpJTEwMCtcIiV7b3BhY2l0eTpcIithK1wifTEwMCV7b3BhY2l0eTpcIitnK1wifX1cIixrLmNzc1J1bGVzLmxlbmd0aCksbVtlXT0xKSxlfWZ1bmN0aW9uIGQoYSxiKXt2YXIgYyxkLGU9YS5zdHlsZTtpZihiPWIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYi5zbGljZSgxKSx2b2lkIDAhPT1lW2JdKXJldHVybiBiO2ZvcihkPTA7ZDxsLmxlbmd0aDtkKyspaWYoYz1sW2RdK2Isdm9pZCAwIT09ZVtjXSlyZXR1cm4gY31mdW5jdGlvbiBlKGEsYil7Zm9yKHZhciBjIGluIGIpYS5zdHlsZVtkKGEsYyl8fGNdPWJbY107cmV0dXJuIGF9ZnVuY3Rpb24gZihhKXtmb3IodmFyIGI9MTtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKXt2YXIgYz1hcmd1bWVudHNbYl07Zm9yKHZhciBkIGluIGMpdm9pZCAwPT09YVtkXSYmKGFbZF09Y1tkXSl9cmV0dXJuIGF9ZnVuY3Rpb24gZyhhLGIpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBhP2E6YVtiJWEubGVuZ3RoXX1mdW5jdGlvbiBoKGEpe3RoaXMub3B0cz1mKGF8fHt9LGguZGVmYXVsdHMsbil9ZnVuY3Rpb24gaSgpe2Z1bmN0aW9uIGMoYixjKXtyZXR1cm4gYShcIjxcIitiKycgeG1sbnM9XCJ1cm46c2NoZW1hcy1taWNyb3NvZnQuY29tOnZtbFwiIGNsYXNzPVwic3Bpbi12bWxcIj4nLGMpfWsuYWRkUnVsZShcIi5zcGluLXZtbFwiLFwiYmVoYXZpb3I6dXJsKCNkZWZhdWx0I1ZNTClcIiksaC5wcm90b3R5cGUubGluZXM9ZnVuY3Rpb24oYSxkKXtmdW5jdGlvbiBmKCl7cmV0dXJuIGUoYyhcImdyb3VwXCIse2Nvb3Jkc2l6ZTprK1wiIFwiK2ssY29vcmRvcmlnaW46LWorXCIgXCIrLWp9KSx7d2lkdGg6ayxoZWlnaHQ6a30pfWZ1bmN0aW9uIGgoYSxoLGkpe2IobSxiKGUoZigpLHtyb3RhdGlvbjozNjAvZC5saW5lcyphK1wiZGVnXCIsbGVmdDp+fmh9KSxiKGUoYyhcInJvdW5kcmVjdFwiLHthcmNzaXplOmQuY29ybmVyc30pLHt3aWR0aDpqLGhlaWdodDpkLnNjYWxlKmQud2lkdGgsbGVmdDpkLnNjYWxlKmQucmFkaXVzLHRvcDotZC5zY2FsZSpkLndpZHRoPj4xLGZpbHRlcjppfSksYyhcImZpbGxcIix7Y29sb3I6ZyhkLmNvbG9yLGEpLG9wYWNpdHk6ZC5vcGFjaXR5fSksYyhcInN0cm9rZVwiLHtvcGFjaXR5OjB9KSkpKX12YXIgaSxqPWQuc2NhbGUqKGQubGVuZ3RoK2Qud2lkdGgpLGs9MipkLnNjYWxlKmosbD0tKGQud2lkdGgrZC5sZW5ndGgpKmQuc2NhbGUqMitcInB4XCIsbT1lKGYoKSx7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDpsLGxlZnQ6bH0pO2lmKGQuc2hhZG93KWZvcihpPTE7aTw9ZC5saW5lcztpKyspaChpLC0yLFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkJsdXIocGl4ZWxyYWRpdXM9MixtYWtlc2hhZG93PTEsc2hhZG93b3BhY2l0eT0uMylcIik7Zm9yKGk9MTtpPD1kLmxpbmVzO2krKyloKGkpO3JldHVybiBiKGEsbSl9LGgucHJvdG90eXBlLm9wYWNpdHk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5maXJzdENoaWxkO2Q9ZC5zaGFkb3cmJmQubGluZXN8fDAsZSYmYitkPGUuY2hpbGROb2Rlcy5sZW5ndGgmJihlPWUuY2hpbGROb2Rlc1tiK2RdLGU9ZSYmZS5maXJzdENoaWxkLGU9ZSYmZS5maXJzdENoaWxkLGUmJihlLm9wYWNpdHk9YykpfX12YXIgaixrLGw9W1wid2Via2l0XCIsXCJNb3pcIixcIm1zXCIsXCJPXCJdLG09e30sbj17bGluZXM6MTIsbGVuZ3RoOjcsd2lkdGg6NSxyYWRpdXM6MTAsc2NhbGU6MSxjb3JuZXJzOjEsY29sb3I6XCIjMDAwXCIsb3BhY2l0eTouMjUscm90YXRlOjAsZGlyZWN0aW9uOjEsc3BlZWQ6MSx0cmFpbDoxMDAsZnBzOjIwLHpJbmRleDoyZTksY2xhc3NOYW1lOlwic3Bpbm5lclwiLHRvcDpcIjUwJVwiLGxlZnQ6XCI1MCVcIixzaGFkb3c6ITEsaHdhY2NlbDohMSxwb3NpdGlvbjpcImFic29sdXRlXCJ9O2lmKGguZGVmYXVsdHM9e30sZihoLnByb3RvdHlwZSx7c3BpbjpmdW5jdGlvbihiKXt0aGlzLnN0b3AoKTt2YXIgYz10aGlzLGQ9Yy5vcHRzLGY9Yy5lbD1hKG51bGwse2NsYXNzTmFtZTpkLmNsYXNzTmFtZX0pO2lmKGUoZix7cG9zaXRpb246ZC5wb3NpdGlvbix3aWR0aDowLHpJbmRleDpkLnpJbmRleCxsZWZ0OmQubGVmdCx0b3A6ZC50b3B9KSxiJiZiLmluc2VydEJlZm9yZShmLGIuZmlyc3RDaGlsZHx8bnVsbCksZi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJwcm9ncmVzc2JhclwiKSxjLmxpbmVzKGYsYy5vcHRzKSwhail7dmFyIGcsaD0wLGk9KGQubGluZXMtMSkqKDEtZC5kaXJlY3Rpb24pLzIsaz1kLmZwcyxsPWsvZC5zcGVlZCxtPSgxLWQub3BhY2l0eSkvKGwqZC50cmFpbC8xMDApLG49bC9kLmxpbmVzOyFmdW5jdGlvbiBvKCl7aCsrO2Zvcih2YXIgYT0wO2E8ZC5saW5lczthKyspZz1NYXRoLm1heCgxLShoKyhkLmxpbmVzLWEpKm4pJWwqbSxkLm9wYWNpdHkpLGMub3BhY2l0eShmLGEqZC5kaXJlY3Rpb24raSxnLGQpO2MudGltZW91dD1jLmVsJiZzZXRUaW1lb3V0KG8sfn4oMWUzL2spKX0oKX1yZXR1cm4gY30sc3RvcDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWw7cmV0dXJuIGEmJihjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSxhLnBhcmVudE5vZGUmJmEucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhKSx0aGlzLmVsPXZvaWQgMCksdGhpc30sbGluZXM6ZnVuY3Rpb24oZCxmKXtmdW5jdGlvbiBoKGIsYyl7cmV0dXJuIGUoYSgpLHtwb3NpdGlvbjpcImFic29sdXRlXCIsd2lkdGg6Zi5zY2FsZSooZi5sZW5ndGgrZi53aWR0aCkrXCJweFwiLGhlaWdodDpmLnNjYWxlKmYud2lkdGgrXCJweFwiLGJhY2tncm91bmQ6Yixib3hTaGFkb3c6Yyx0cmFuc2Zvcm1PcmlnaW46XCJsZWZ0XCIsdHJhbnNmb3JtOlwicm90YXRlKFwiK35+KDM2MC9mLmxpbmVzKmsrZi5yb3RhdGUpK1wiZGVnKSB0cmFuc2xhdGUoXCIrZi5zY2FsZSpmLnJhZGl1cytcInB4LDApXCIsYm9yZGVyUmFkaXVzOihmLmNvcm5lcnMqZi5zY2FsZSpmLndpZHRoPj4xKStcInB4XCJ9KX1mb3IodmFyIGksaz0wLGw9KGYubGluZXMtMSkqKDEtZi5kaXJlY3Rpb24pLzI7azxmLmxpbmVzO2srKylpPWUoYSgpLHtwb3NpdGlvbjpcImFic29sdXRlXCIsdG9wOjErfihmLnNjYWxlKmYud2lkdGgvMikrXCJweFwiLHRyYW5zZm9ybTpmLmh3YWNjZWw/XCJ0cmFuc2xhdGUzZCgwLDAsMClcIjpcIlwiLG9wYWNpdHk6Zi5vcGFjaXR5LGFuaW1hdGlvbjpqJiZjKGYub3BhY2l0eSxmLnRyYWlsLGwraypmLmRpcmVjdGlvbixmLmxpbmVzKStcIiBcIisxL2Yuc3BlZWQrXCJzIGxpbmVhciBpbmZpbml0ZVwifSksZi5zaGFkb3cmJmIoaSxlKGgoXCIjMDAwXCIsXCIwIDAgNHB4ICMwMDBcIikse3RvcDpcIjJweFwifSkpLGIoZCxiKGksaChnKGYuY29sb3IsayksXCIwIDAgMXB4IHJnYmEoMCwwLDAsLjEpXCIpKSk7cmV0dXJuIGR9LG9wYWNpdHk6ZnVuY3Rpb24oYSxiLGMpe2I8YS5jaGlsZE5vZGVzLmxlbmd0aCYmKGEuY2hpbGROb2Rlc1tiXS5zdHlsZS5vcGFjaXR5PWMpfX0pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCl7az1mdW5jdGlvbigpe3ZhciBjPWEoXCJzdHlsZVwiLHt0eXBlOlwidGV4dC9jc3NcIn0pO3JldHVybiBiKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXSxjKSxjLnNoZWV0fHxjLnN0eWxlU2hlZXR9KCk7dmFyIG89ZShhKFwiZ3JvdXBcIikse2JlaGF2aW9yOlwidXJsKCNkZWZhdWx0I1ZNTClcIn0pOyFkKG8sXCJ0cmFuc2Zvcm1cIikmJm8uYWRqP2koKTpqPWQobyxcImFuaW1hdGlvblwiKX1yZXR1cm4gaH0pOyIsIi8vaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvY2xvc2VzdFxuaWYgKHdpbmRvdy5FbGVtZW50ICYmICFFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0KSB7XG4gICAgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCA9IFxuICAgIGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAodGhpcy5kb2N1bWVudCB8fCB0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwocyksXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgZWwgPSB0aGlzO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpID0gbWF0Y2hlcy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoLS1pID49IDAgJiYgbWF0Y2hlcy5pdGVtKGkpICE9PSBlbCkge307XG4gICAgICAgIH0gd2hpbGUgKChpIDwgMCkgJiYgKGVsID0gZWwucGFyZW50RWxlbWVudCkpOyBcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH07XG59XG5cbk51bWJlci5pc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgXG4gICAgaXNGaW5pdGUodmFsdWUpICYmIFxuICAgIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn1cblxuXG4vL2h0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC8xNTc5NjcxXG5jb25zdCByZXF1ZXN0QW5pbWF0aW9uRnJhbWVQb2x5ZmlsbCA9ICgoKSA9PiB7XG4gICAgbGV0IGNsb2NrID0gRGF0ZS5ub3coKTtcblxuICAgIHJldHVybiAoY2FsbGJhY2spID0+IHtcblxuICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lIC0gY2xvY2sgPiAxNikge1xuICAgICAgICAgICAgY2xvY2sgPSBjdXJyZW50VGltZTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHBvbHlmaWxsKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICAgIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWVQb2x5ZmlsbFxuXG5pZiggISB3aW5kb3cuSW50bCApIHtcbiAgICByZXF1aXJlKCdpbnRsJylcbiAgICByZXF1aXJlKCdpbnRsL2xvY2FsZS1kYXRhL2pzb25wL2VuLmpzJylcbn1cblxuLy9odHRwOi8vd3d3LmphdmFzY3JpcHRraXQuY29tL2RodG1sdHV0b3JzL3N0aWNreS1ob3Zlci1pc3N1ZS1zb2x1dGlvbnMuc2h0bWxcbmNvbnN0IHRvdWNoc3VwcG9ydCA9ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHx8IChuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKSB8fCAobmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwKVxuaWYgKCF0b3VjaHN1cHBvcnQpeyAvLyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0b3VjaFxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibm9uLXRvdWNoXCIpXG59XG5cbnJlcXVpcmUoJ3Ntb290aHNjcm9sbC1wb2x5ZmlsbCcpLnBvbHlmaWxsKClcblxubW9kdWxlLmV4cG9ydHMgPSB0cnVlXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUoIHtcblxuICAgIEVycm9yOiByZXF1aXJlKCcuLi8uLi9saWIvTXlFcnJvcicpLFxuXG4gICAgUmVzb3VyY2U6IHJlcXVpcmUoJy4vdmlld3MvUmVzb3VyY2UnKSxcblxuICAgIFZpZXdGYWN0b3J5OiByZXF1aXJlKCcuL2ZhY3RvcnkvVmlldycpLFxuXG4gICAgVmlld3M6IHJlcXVpcmUoJy4vLlZpZXdNYXAnKSxcblxuICAgIGNhcGl0YWxpemVGaXJzdExldHRlcjogc3RyaW5nID0+IHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKSxcblxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb250ZW50JylcblxuICAgICAgICB3aW5kb3cub25wb3BzdGF0ZSA9IHRoaXMuaGFuZGxlLmJpbmQodGhpcylcblxuICAgICAgICB0aGlzLnVzZXIgPSByZXF1aXJlKCcuL21vZGVscy9Vc2VyJylcblxuICAgICAgICB0aGlzLnVzZXIub24oICdsb2dnZWRJbicsICgpID0+IHRoaXMub25Mb2dpbigpIClcblxuICAgICAgICB0aGlzLnVzZXJQcm9taXNlID0gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4gdGhpcy51c2VyLmZldGNoKCkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApIClcblxuICAgICAgICB0aGlzLmZvb3RlciA9IHRoaXMuVmlld0ZhY3RvcnkuY3JlYXRlKCAnZm9vdGVyJywgeyBpbnNlcnRpb246IHsgZWw6IHRoaXMuY29udGVudCwgbWV0aG9kOiAnYWZ0ZXInIH0gfSApXG5cbiAgICAgICAgdGhpcy52aWV3cyA9IHsgfVxuXG4gICAgICAgIHRoaXMuaGFuZGxlKClcbiAgICB9LFxuXG4gICAgaGFuZGxlKCkge1xuICAgICAgICB0aGlzLmhhbmRsZXIoIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpLnNsaWNlKDEpIClcbiAgICB9LFxuXG4gICAgaGFuZGxlSGVhZGVyKCByZXNvdXJjZSApIHtcbiAgICAgICAgaWYoIC9hZG1pbi8udGVzdChyZXNvdXJjZSkgKSB7XG4gICAgICAgICAgICBpZiggdGhpcy5hZG1pbkhlYWRlciApIHsgdGhpcy5hZG1pbkhlYWRlci5vbk5hdmlnYXRpb24oKSB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkbWluSGVhZGVyID0gdGhpcy5WaWV3RmFjdG9yeS5jcmVhdGUoICdhZG1pbkhlYWRlcicsIHsgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmNvbnRlbnQsIG1ldGhvZDogJ2luc2VydEJlZm9yZScgfSB9IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCAnc2lnbm91dCcsICgpID0+IHRoaXMub25TaWdub3V0KCkgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYoIHRoaXMuYWRtaW5IZWFkZXIgKSB7IHRoaXMuYWRtaW5IZWFkZXIuaGlkZSgpIH1cbiAgICAgICAgICAgIGlmKCB0aGlzLmhlYWRlciApIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5WaWV3RmFjdG9yeS5jcmVhdGUoICdoZWFkZXInLCB7IGluc2VydGlvbjogeyBlbDogdGhpcy5jb250ZW50LCBtZXRob2Q6ICdpbnNlcnRCZWZvcmUnIH0gfSApXG4gICAgICAgICAgICAgICAgICAgIC5vbiggJ25hdmlnYXRlJywgdGhpcy5vblZpZXdOYXZpZ2F0ZS5iaW5kKHRoaXMpIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBoYW5kbGVGb290ZXIoIHJlc291cmNlICkge1xuICAgICAgICB0aGlzLmZvb3Rlci5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoICdmZC1oaWRkZW4nLCAvYWRtaW4vLnRlc3QoIHJlc291cmNlICkgKVxuICAgIH0sXG5cbiAgICBoYW5kbGVyKCBwYXRoICkge1xuICAgICAgICBpZiggcGF0aFswXSA9PT0gJ2FkbWluJyAmJiBwYXRoWzFdICkgcmV0dXJuIHRoaXMucmVzb3VyY2VIYW5kbGVyKCBwYXRoWzFdIClcblxuICAgICAgICBsZXQgbmFtZSA9IHRoaXMucGF0aFRvVmlldyggcGF0aFswXSApLFxuICAgICAgICAgICAgdmlldyA9IHRoaXMuVmlld3NbIG5hbWUgXSA/IHBhdGhbMF0gOiAnaG9tZSdcblxuICAgICAgICBpZiggdGhpcy5yZXNvdXJjZXNbIHBhdGhbMF0gXSApIHZpZXcgPSBwYXRoWzBdXG5cbiAgICAgICAgdGhpcy5oYW5kbGVIZWFkZXIoIHBhdGhbMF0gKVxuICAgICAgICB0aGlzLmhhbmRsZUZvb3RlciggcGF0aFswXSApXG4gICAgICBcbiAgICAgICAgdGhpcy51c2VyUHJvbWlzZS50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICBpZiggdGhpcy51c2VyLmlkICYmIC9hZG1pbi8udGVzdCggcGF0aFswXSApICkgdGhpcy5hZG1pbkhlYWRlci5vblVzZXIoIHRoaXMudXNlciApXG5cbiAgICAgICAgICAgIGlmKCB2aWV3ID09PSB0aGlzLmN1cnJlbnRWaWV3ICkgcmV0dXJuIHRoaXMudmlld3NbIHZpZXcgXS5vbk5hdmlnYXRpb24oIHBhdGguc2xpY2UoMSkgKVxuXG4gICAgICAgICAgICBQcm9taXNlLmFsbCggT2JqZWN0LmtleXMoIHRoaXMudmlld3MgKS5tYXAoIHZpZXcgPT4gdGhpcy52aWV3c1sgdmlldyBdLmhpZGUoKSApIClcbiAgICAgICAgICAgIC50aGVuKCAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdmlld1xuXG4gICAgICAgICAgICAgICAgaWYoIHRoaXMudmlld3NbIHZpZXcgXSApIHJldHVybiB0aGlzLnZpZXdzWyB2aWV3IF0ub25OYXZpZ2F0aW9uKCBwYXRoIClcblxuICAgICAgICAgICAgICAgIHRoaXMudmlld3NbIHZpZXcgXSA9ICF0aGlzLnJlc291cmNlc1sgdmlldyBdXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5WaWV3RmFjdG9yeS5jcmVhdGUoIHZpZXcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGlvbjogeyBlbDogdGhpcy5jb250ZW50IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgICAgICAgLm9uKCAnbmF2aWdhdGUnLCAoIHJvdXRlLCBvcHRpb25zICkgPT4gdGhpcy5uYXZpZ2F0ZSggcm91dGUsIG9wdGlvbnMgKSApXG4gICAgICAgICAgICAgICAgICAgICAgLm9uKCAnZGVsZXRlZCcsICgpID0+IGRlbGV0ZSB0aGlzLnZpZXdzWyB2aWV3IF0gKVxuICAgICAgICAgICAgICAgICAgICA6IG5ldyAoIHRoaXMucmVzb3VyY2VzWyB2aWV3IF0udmlldyApKCBPYmplY3QuYXNzaWduKCB7IGZhY3Rvcnk6IHRoaXMuVmlld0ZhY3RvcnkgfSwgdGhpcy5yZXNvdXJjZXNbIHZpZXcgXS5vcHRpb25zICkgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCAnbmF2aWdhdGUnLCAoIHJvdXRlLCBvcHRpb25zICkgPT4gdGhpcy5uYXZpZ2F0ZSggcm91dGUsIG9wdGlvbnMgKSApXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiggIS9hZG1pbi8udGVzdCggcGF0aFswXSApICkgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCBlcnIgPT4gbmV3IHRoaXMuRXJyb3IoZXJyKSApXG4gICAgfSxcblxuICAgIG5hdmlnYXRlKCBsb2NhdGlvbiwgb3B0aW9ucz17fSApIHtcbiAgICAgICAgaWYoIG9wdGlvbnMucmVwbGFjZSB8fCBvcHRpb25zLnVwICkge1xuICAgICAgICAgICAgbGV0IHBhdGggPSBgJHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9YC5zcGxpdCgnLycpXG4gICAgICAgICAgICBwYXRoLnBvcCgpXG4gICAgICAgICAgICBpZiggb3B0aW9ucy5yZXBsYWNlICkgcGF0aC5wdXNoKCBsb2NhdGlvbiApXG4gICAgICAgICAgICBsb2NhdGlvbiA9IHBhdGguam9pbignLycpXG4gICAgICAgIH0gZWxzZSBpZiggb3B0aW9ucy5hcHBlbmQgKSB7IGxvY2F0aW9uID0gYCR7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfS8ke2xvY2F0aW9ufWAgfVxuXG4gICAgICAgIGlmKCBsb2NhdGlvbiAhPT0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICkgaGlzdG9yeS5wdXNoU3RhdGUoIHt9LCAnJywgbG9jYXRpb24gKVxuICAgICAgICBpZiggIW9wdGlvbnMuc2lsZW50ICkgdGhpcy5oYW5kbGUoKVxuICAgIH0sXG5cbiAgICBvbkxvZ2luKCkgeyB0aGlzLm9uVXNlciggdGhpcy51c2VyICkgfSxcblxuICAgIG9uVmlld05hdmlnYXRlKCByb3V0ZSApIHsgdGhpcy5uYXZpZ2F0ZSggcm91dGUsIHsgdHJpZ2dlcjogdHJ1ZSB9ICkgfSxcblxuICAgIG9uU2lnbm91dCgpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMudmlld3MgKS5mb3JFYWNoKCBuYW1lID0+IHtcbiAgICAgICAgICAgIHRoaXMudmlld3NbIG5hbWUgXS5kZWxldGUoKVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMudmlld3NbbmFtZV0gXG4gICAgICAgIH0gKVxuICAgIFxuICAgICAgICB0aGlzLm5hdmlnYXRlKCBcIi9cIiApXG4gICAgfSxcblxuICAgIG9uVXNlciggdXNlciApIHtcbiAgICAgICAgaWYoIHRoaXMuYWRtaW5IZWFkZXIgKSB0aGlzLmFkbWluSGVhZGVyLm9uVXNlciggdGhpcy51c2VyIClcbiAgICB9LFxuXG4gICAgcGF0aFRvVmlldyggcGF0aCApIHtcbiAgICAgICAgY29uc3QgaHlwaGVuU3BsaXQgPSBwYXRoLnNwbGl0KCctJylcbiAgICAgICAgcmV0dXJuIGh5cGhlblNwbGl0Lm1hcCggaXRlbSA9PiB0aGlzLmNhcGl0YWxpemVGaXJzdExldHRlciggaXRlbSApICkuam9pbignJylcbiAgICB9LFxuICAgIFxuICAgIHJlc291cmNlSGFuZGxlciggcmVzb3VyY2UgKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlSGVhZGVyKCBgYWRtaW4vJHtyZXNvdXJjZX1gIClcbiAgICAgICAgdGhpcy5oYW5kbGVGb290ZXIoIGBhZG1pbi8ke3Jlc291cmNlfWAgKVxuXG4gICAgICAgIHRoaXMudXNlclByb21pc2UudGhlbiggKCkgPT4ge1xuXG4gICAgICAgICAgICBpZiggdGhpcy51c2VyLmlkICkgdGhpcy5hZG1pbkhlYWRlci5vblVzZXIoIHRoaXMudXNlciApXG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLnZpZXdzICkuZm9yRWFjaCgga2V5ID0+IHRoaXMudmlld3Nba2V5XS5oaWRlKCkgKVxuXG4gICAgICAgICAgICBpZiggdGhpcy52aWV3cy5yZXNvdXJjZSApIHJldHVybiB0aGlzLnZpZXdzLnJlc291cmNlLnVwZGF0ZSggcmVzb3VyY2UgKVxuXG4gICAgICAgICAgICB0aGlzLnZpZXdzLnJlc291cmNlID0gbmV3IHRoaXMuUmVzb3VyY2UoIHsgcmVzb3VyY2U6IHJlc291cmNlIH0gKVxuXG4gICAgICAgIH0gKS5jYXRjaCggZXJyID0+IG5ldyB0aGlzLkVycm9yKGVycikgKVxuICAgIH0sXG5cbiAgICByZXNvdXJjZXM6IHtcbiAgICAgICAgYWRtaW46IHtcbiAgICAgICAgICAgIHZpZXc6IHJlcXVpcmUoJy4vdmlld3MvQWRtaW4nKSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhcmF0b3I6IFwibmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogcmVxdWlyZSgnLi9tb2RlbHMvUmVzb3VyY2UnKSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2U6IHJlc3BvbnNlID0+IHJlc3BvbnNlLnJlc291cmNlLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmZXRjaDogeyBoZWFkZXJzOiB7IGFjY2VwdDogXCJhcHBsaWNhdGlvbi9sZCtqc29uXCIgfSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2lnbi11cFwiOiB7IHZpZXc6IHJlcXVpcmUoJy4vdmlld3MvU2lnbnVwJyksIG9wdGlvbnM6IHsgfSB9LFxuICAgIH1cblxufSApXG4iLCIvLyBodHRwOi8vc3Bpbi5qcy5vcmcvI3YyLjMuMlxuIWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YigpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoYik6YS5TcGlubmVyPWIoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEoYSxiKXt2YXIgYyxkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYXx8XCJkaXZcIik7Zm9yKGMgaW4gYilkW2NdPWJbY107cmV0dXJuIGR9ZnVuY3Rpb24gYihhKXtmb3IodmFyIGI9MSxjPWFyZ3VtZW50cy5sZW5ndGg7Yz5iO2IrKylhLmFwcGVuZENoaWxkKGFyZ3VtZW50c1tiXSk7cmV0dXJuIGF9ZnVuY3Rpb24gYyhhLGIsYyxkKXt2YXIgZT1bXCJvcGFjaXR5XCIsYix+figxMDAqYSksYyxkXS5qb2luKFwiLVwiKSxmPS4wMStjL2QqMTAwLGc9TWF0aC5tYXgoMS0oMS1hKS9iKigxMDAtZiksYSksaD1qLnN1YnN0cmluZygwLGouaW5kZXhPZihcIkFuaW1hdGlvblwiKSkudG9Mb3dlckNhc2UoKSxpPWgmJlwiLVwiK2grXCItXCJ8fFwiXCI7cmV0dXJuIG1bZV18fChrLmluc2VydFJ1bGUoXCJAXCIraStcImtleWZyYW1lcyBcIitlK1wiezAle29wYWNpdHk6XCIrZytcIn1cIitmK1wiJXtvcGFjaXR5OlwiK2ErXCJ9XCIrKGYrLjAxKStcIiV7b3BhY2l0eToxfVwiKyhmK2IpJTEwMCtcIiV7b3BhY2l0eTpcIithK1wifTEwMCV7b3BhY2l0eTpcIitnK1wifX1cIixrLmNzc1J1bGVzLmxlbmd0aCksbVtlXT0xKSxlfWZ1bmN0aW9uIGQoYSxiKXt2YXIgYyxkLGU9YS5zdHlsZTtpZihiPWIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYi5zbGljZSgxKSx2b2lkIDAhPT1lW2JdKXJldHVybiBiO2ZvcihkPTA7ZDxsLmxlbmd0aDtkKyspaWYoYz1sW2RdK2Isdm9pZCAwIT09ZVtjXSlyZXR1cm4gY31mdW5jdGlvbiBlKGEsYil7Zm9yKHZhciBjIGluIGIpYS5zdHlsZVtkKGEsYyl8fGNdPWJbY107cmV0dXJuIGF9ZnVuY3Rpb24gZihhKXtmb3IodmFyIGI9MTtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKXt2YXIgYz1hcmd1bWVudHNbYl07Zm9yKHZhciBkIGluIGMpdm9pZCAwPT09YVtkXSYmKGFbZF09Y1tkXSl9cmV0dXJuIGF9ZnVuY3Rpb24gZyhhLGIpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBhP2E6YVtiJWEubGVuZ3RoXX1mdW5jdGlvbiBoKGEpe3RoaXMub3B0cz1mKGF8fHt9LGguZGVmYXVsdHMsbil9ZnVuY3Rpb24gaSgpe2Z1bmN0aW9uIGMoYixjKXtyZXR1cm4gYShcIjxcIitiKycgeG1sbnM9XCJ1cm46c2NoZW1hcy1taWNyb3NvZnQuY29tOnZtbFwiIGNsYXNzPVwic3Bpbi12bWxcIj4nLGMpfWsuYWRkUnVsZShcIi5zcGluLXZtbFwiLFwiYmVoYXZpb3I6dXJsKCNkZWZhdWx0I1ZNTClcIiksaC5wcm90b3R5cGUubGluZXM9ZnVuY3Rpb24oYSxkKXtmdW5jdGlvbiBmKCl7cmV0dXJuIGUoYyhcImdyb3VwXCIse2Nvb3Jkc2l6ZTprK1wiIFwiK2ssY29vcmRvcmlnaW46LWorXCIgXCIrLWp9KSx7d2lkdGg6ayxoZWlnaHQ6a30pfWZ1bmN0aW9uIGgoYSxoLGkpe2IobSxiKGUoZigpLHtyb3RhdGlvbjozNjAvZC5saW5lcyphK1wiZGVnXCIsbGVmdDp+fmh9KSxiKGUoYyhcInJvdW5kcmVjdFwiLHthcmNzaXplOmQuY29ybmVyc30pLHt3aWR0aDpqLGhlaWdodDpkLnNjYWxlKmQud2lkdGgsbGVmdDpkLnNjYWxlKmQucmFkaXVzLHRvcDotZC5zY2FsZSpkLndpZHRoPj4xLGZpbHRlcjppfSksYyhcImZpbGxcIix7Y29sb3I6ZyhkLmNvbG9yLGEpLG9wYWNpdHk6ZC5vcGFjaXR5fSksYyhcInN0cm9rZVwiLHtvcGFjaXR5OjB9KSkpKX12YXIgaSxqPWQuc2NhbGUqKGQubGVuZ3RoK2Qud2lkdGgpLGs9MipkLnNjYWxlKmosbD0tKGQud2lkdGgrZC5sZW5ndGgpKmQuc2NhbGUqMitcInB4XCIsbT1lKGYoKSx7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDpsLGxlZnQ6bH0pO2lmKGQuc2hhZG93KWZvcihpPTE7aTw9ZC5saW5lcztpKyspaChpLC0yLFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkJsdXIocGl4ZWxyYWRpdXM9MixtYWtlc2hhZG93PTEsc2hhZG93b3BhY2l0eT0uMylcIik7Zm9yKGk9MTtpPD1kLmxpbmVzO2krKyloKGkpO3JldHVybiBiKGEsbSl9LGgucHJvdG90eXBlLm9wYWNpdHk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5maXJzdENoaWxkO2Q9ZC5zaGFkb3cmJmQubGluZXN8fDAsZSYmYitkPGUuY2hpbGROb2Rlcy5sZW5ndGgmJihlPWUuY2hpbGROb2Rlc1tiK2RdLGU9ZSYmZS5maXJzdENoaWxkLGU9ZSYmZS5maXJzdENoaWxkLGUmJihlLm9wYWNpdHk9YykpfX12YXIgaixrLGw9W1wid2Via2l0XCIsXCJNb3pcIixcIm1zXCIsXCJPXCJdLG09e30sbj17bGluZXM6MTIsbGVuZ3RoOjcsd2lkdGg6NSxyYWRpdXM6MTAsc2NhbGU6MSxjb3JuZXJzOjEsY29sb3I6XCIjMDAwXCIsb3BhY2l0eTouMjUscm90YXRlOjAsZGlyZWN0aW9uOjEsc3BlZWQ6MSx0cmFpbDoxMDAsZnBzOjIwLHpJbmRleDoyZTksY2xhc3NOYW1lOlwic3Bpbm5lclwiLHRvcDpcIjUwJVwiLGxlZnQ6XCI1MCVcIixzaGFkb3c6ITEsaHdhY2NlbDohMSxwb3NpdGlvbjpcImFic29sdXRlXCJ9O2lmKGguZGVmYXVsdHM9e30sZihoLnByb3RvdHlwZSx7c3BpbjpmdW5jdGlvbihiKXt0aGlzLnN0b3AoKTt2YXIgYz10aGlzLGQ9Yy5vcHRzLGY9Yy5lbD1hKG51bGwse2NsYXNzTmFtZTpkLmNsYXNzTmFtZX0pO2lmKGUoZix7cG9zaXRpb246ZC5wb3NpdGlvbix3aWR0aDowLHpJbmRleDpkLnpJbmRleCxsZWZ0OmQubGVmdCx0b3A6ZC50b3B9KSxiJiZiLmluc2VydEJlZm9yZShmLGIuZmlyc3RDaGlsZHx8bnVsbCksZi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJwcm9ncmVzc2JhclwiKSxjLmxpbmVzKGYsYy5vcHRzKSwhail7dmFyIGcsaD0wLGk9KGQubGluZXMtMSkqKDEtZC5kaXJlY3Rpb24pLzIsaz1kLmZwcyxsPWsvZC5zcGVlZCxtPSgxLWQub3BhY2l0eSkvKGwqZC50cmFpbC8xMDApLG49bC9kLmxpbmVzOyFmdW5jdGlvbiBvKCl7aCsrO2Zvcih2YXIgYT0wO2E8ZC5saW5lczthKyspZz1NYXRoLm1heCgxLShoKyhkLmxpbmVzLWEpKm4pJWwqbSxkLm9wYWNpdHkpLGMub3BhY2l0eShmLGEqZC5kaXJlY3Rpb24raSxnLGQpO2MudGltZW91dD1jLmVsJiZzZXRUaW1lb3V0KG8sfn4oMWUzL2spKX0oKX1yZXR1cm4gY30sc3RvcDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWw7cmV0dXJuIGEmJihjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSxhLnBhcmVudE5vZGUmJmEucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhKSx0aGlzLmVsPXZvaWQgMCksdGhpc30sbGluZXM6ZnVuY3Rpb24oZCxmKXtmdW5jdGlvbiBoKGIsYyl7cmV0dXJuIGUoYSgpLHtwb3NpdGlvbjpcImFic29sdXRlXCIsd2lkdGg6Zi5zY2FsZSooZi5sZW5ndGgrZi53aWR0aCkrXCJweFwiLGhlaWdodDpmLnNjYWxlKmYud2lkdGgrXCJweFwiLGJhY2tncm91bmQ6Yixib3hTaGFkb3c6Yyx0cmFuc2Zvcm1PcmlnaW46XCJsZWZ0XCIsdHJhbnNmb3JtOlwicm90YXRlKFwiK35+KDM2MC9mLmxpbmVzKmsrZi5yb3RhdGUpK1wiZGVnKSB0cmFuc2xhdGUoXCIrZi5zY2FsZSpmLnJhZGl1cytcInB4LDApXCIsYm9yZGVyUmFkaXVzOihmLmNvcm5lcnMqZi5zY2FsZSpmLndpZHRoPj4xKStcInB4XCJ9KX1mb3IodmFyIGksaz0wLGw9KGYubGluZXMtMSkqKDEtZi5kaXJlY3Rpb24pLzI7azxmLmxpbmVzO2srKylpPWUoYSgpLHtwb3NpdGlvbjpcImFic29sdXRlXCIsdG9wOjErfihmLnNjYWxlKmYud2lkdGgvMikrXCJweFwiLHRyYW5zZm9ybTpmLmh3YWNjZWw/XCJ0cmFuc2xhdGUzZCgwLDAsMClcIjpcIlwiLG9wYWNpdHk6Zi5vcGFjaXR5LGFuaW1hdGlvbjpqJiZjKGYub3BhY2l0eSxmLnRyYWlsLGwraypmLmRpcmVjdGlvbixmLmxpbmVzKStcIiBcIisxL2Yuc3BlZWQrXCJzIGxpbmVhciBpbmZpbml0ZVwifSksZi5zaGFkb3cmJmIoaSxlKGgoXCIjMDAwXCIsXCIwIDAgNHB4ICMwMDBcIikse3RvcDpcIjJweFwifSkpLGIoZCxiKGksaChnKGYuY29sb3IsayksXCIwIDAgMXB4IHJnYmEoMCwwLDAsLjEpXCIpKSk7cmV0dXJuIGR9LG9wYWNpdHk6ZnVuY3Rpb24oYSxiLGMpe2I8YS5jaGlsZE5vZGVzLmxlbmd0aCYmKGEuY2hpbGROb2Rlc1tiXS5zdHlsZS5vcGFjaXR5PWMpfX0pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCl7az1mdW5jdGlvbigpe3ZhciBjPWEoXCJzdHlsZVwiLHt0eXBlOlwidGV4dC9jc3NcIn0pO3JldHVybiBiKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXSxjKSxjLnNoZWV0fHxjLnN0eWxlU2hlZXR9KCk7dmFyIG89ZShhKFwiZ3JvdXBcIikse2JlaGF2aW9yOlwidXJsKCNkZWZhdWx0I1ZNTClcIn0pOyFkKG8sXCJ0cmFuc2Zvcm1cIikmJm8uYWRqP2koKTpqPWQobyxcImFuaW1hdGlvblwiKX1yZXR1cm4gaH0pOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSGFuZGxlYmFycykge1xuXG5yZXR1cm4gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XFxcIndcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAud2lkdGggOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGRhdGEtc29ydD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjwvdGg+ICAgICAgICAgICAgICAgICAgICBcIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjxkaXYgZGF0YS1qcz1cXFwiY29udGFpbmVyXFxcIiBjbGFzcz1cXFwiY29sLXNtLTEwIGNvbC1zbS1vZmZzZXQtMVxcXCI+PGRpdiBjbGFzcz1cXFwic3ViLWhlYWRpbmdcXFwiPlJlc291cmNlczwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdyBteXRhYmxlXFxcIj48dGFibGUgZGF0YS1qcz1cXFwidGFibGVcXFwiPjx0aGVhZCBkYXRhLWpzPVxcXCJoZWFkZXJcXFwiPjx0ciBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPiAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiB7fSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmllbGRzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICA8L3RyPjwvdGhlYWQ+PHRib2R5IGRhdGEtanM9XFxcImJvZHlcXFwiPjwvdGJvZHk+PC90YWJsZT48L2Rpdj48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSGFuZGxlYmFycykge1xuXG5yZXR1cm4gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiAoKHN0YWNrMSA9IGNvbnRhaW5lci5sYW1iZGEoZGVwdGgwLCBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8Zm9ybSBjbGFzcz1cXFwiZm9ybS1ob3Jpem9udGFsIGNyZWF0ZS1pbnN0YW5jZVxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiB7fSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmllbGRzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZm9ybT5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG59OyIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuICAgIGA8ZGl2IGNsYXNzPSdpbnRybyc+JHtwLmludHJvfTwvZGl2PjxwPiR7cC5wYXJhZ3JhcGh9PC9wPmAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCI8c3BhbiBjbGFzcz1cXFwiaGVscC1ibG9jayBcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGRhdGEtanM9XFxcImZpZWxkRXJyb3JcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5lcnJvciB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZXJyb3IgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImVycm9yXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvc3Bhbj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSGFuZGxlYmFycykge1xuXG5yZXR1cm4gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiB7fSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPjxsYWJlbCBmb3I9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImNvbC1zbS0zIGNvbnRyb2wtbGFiZWxcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5sYWJlbCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImxhYmVsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvbGFiZWw+PGRpdiBjbGFzcz1cXFwiY29sLXNtLTlcXFwiPjxzZWxlY3QgZGF0YS1qcz1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVyc1tcImNsYXNzXCJdIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMFtcImNsYXNzXCJdIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJjbGFzc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGlkPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiPjxvcHRpb24gdmFsdWU9XFxcInRydWVcXFwiPlRydWU8L29wdGlvbj48b3B0aW9uIHZhbHVlPVxcXCJmYWxzZVxcXCI+RmFsc2U8L29wdGlvbj48L3NlbGVjdD48L2Rpdj48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSGFuZGxlYmFycykge1xuXG5yZXR1cm4gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiB7fSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPjxsYWJlbCBmb3I9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImNvbC1zbS0zIGNvbnRyb2wtbGFiZWxcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5sYWJlbCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImxhYmVsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvbGFiZWw+PGRpdiBjbGFzcz1cXFwiY29sLXNtLTlcXFwiPjxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwIGRhdGVcXFwiPjxpbnB1dCBkYXRhLWpzPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzW1wiY2xhc3NcIl0gfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwW1wiY2xhc3NcIl0gOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImNsYXNzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgdHlwZT1cXFwidGV4dFxcXCIgaWQ9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIvPjxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1hZGRvblxcXCI+PHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2FsZW5kYXJcXFwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+PC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj48bGFiZWwgZm9yPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJjb2wtc20tMyBjb250cm9sLWxhYmVsXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubGFiZWwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJsYWJlbFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2xhYmVsPjxkaXYgY2xhc3M9XFxcImNvbC1zbS05XFxcIj48c2VsZWN0IGRhdGEtanM9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbCBcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnNbXCJjbGFzc1wiXSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDBbXCJjbGFzc1wiXSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiY2xhc3NcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj48b3B0aW9uIHZhbHVlPVxcXCIwXFxcIj5TdW5kYXk8L29wdGlvbj48b3B0aW9uIHZhbHVlPVxcXCIxXFxcIj5Nb25kYXk8L29wdGlvbj48b3B0aW9uIHZhbHVlPVxcXCIyXFxcIj5UdWVzZGF5PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT1cXFwiM1xcXCI+V2VkbmVzZGF5PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT1cXFwiNFxcXCI+VGh1cnNkYXk8L29wdGlvbj48b3B0aW9uIHZhbHVlPVxcXCI1XFxcIj5GcmlkYXk8L29wdGlvbj48b3B0aW9uIHZhbHVlPVxcXCI2XFxcIj5TYXR1cmRheTwvb3B0aW9uPjwvc2VsZWN0PjwvZGl2PjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IHt9LCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBmaWxlLXVwbG9hZFxcXCI+PGxhYmVsIGZvcj1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiY29sLXNtLTMgY29udHJvbC1sYWJlbFxcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmxhYmVsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibGFiZWxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9sYWJlbD48ZGl2IGNsYXNzPVxcXCJjb2wtc20tOVxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGRhdGEtanM9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIkJ0blxcXCIgaWQ9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIi1idG5cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnkgdXBsb2FkLXdyYXAgXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzW1wiY2xhc3NcIl0gfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwW1wiY2xhc3NcIl0gOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImNsYXNzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+PHNwYW4+VXBsb2FkIEZpbGU8L3NwYW4+PGlucHV0IHR5cGU9XFxcImZpbGVcXFwiIGlkPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGRhdGEtanM9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgLz48L2J1dHRvbj48aW1nIGNsYXNzPVxcXCJwcmV2aWV3XFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiLXByZXZpZXdcXFwiIGRhdGEtanM9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlByZXZpZXdcXFwiIC8+PC9kaXY+PC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwicGFzc3dvcmRcIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCJ0ZXh0XCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiB7fSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPjxsYWJlbCBmb3I9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImNvbC1zbS0zIGNvbnRyb2wtbGFiZWxcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5sYWJlbCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImxhYmVsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvbGFiZWw+PGRpdiBjbGFzcz1cXFwiY29sLXNtLTlcXFwiPjxpbnB1dCBkYXRhLWpzPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzW1wiY2xhc3NcIl0gfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwW1wiY2xhc3NcIl0gOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImNsYXNzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgdHlwZT1cXFwiXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYXNzd29yZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIi8+PC9kaXY+PC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj48bGFiZWwgZm9yPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJjb2wtc20tMyBjb250cm9sLWxhYmVsXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubGFiZWwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJsYWJlbFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2xhYmVsPjxkaXYgY2xhc3M9XFxcImNvbC1zbS05XFxcIj48dGV4dGFyZWEgZGF0YS1qcz1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVyc1tcImNsYXNzXCJdIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMFtcImNsYXNzXCJdIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJjbGFzc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGlkPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIHJvd3M9XFxcIjRcXFwiPjwvdGV4dGFyZWE+PC9kaXY+PC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiB7fSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgPHRkIGNsYXNzPVxcXCJ3XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLndpZHRoIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC53aWR0aCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwid2lkdGhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgZGF0YS1qcz1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj5cIlxuICAgICsgKChzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnZhbHVlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC52YWx1ZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwidmFsdWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvdGQ+ICAgIFwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge307XG5cbiAgcmV0dXJuIFwiPHRyIGRhdGEtaWQ9XFxcIlwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiAgY2xhc3M9XFxcImNsZWFyZml4XFxcIiBkYXRhLWpzPVxcXCJjb250YWluZXJcXFwiPiAgICBcIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3RyPlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxkaXYgZGF0YS1qcz1cXFwiaW52YWxpZExvZ2luRXJyb3JcXFwiIGNsYXNzPVxcXCJhbGVydCBhbGVydC1kYW5nZXJcXFwiIHJvbGU9XFxcImFsZXJ0XFxcIj5JbnZhbGlkIENyZWRlbnRpYWxzPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+PGxhYmVsIGZvcj1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJjb2wtc20tMyBjb250cm9sLWxhYmVsXFxcIj5cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L2xhYmVsPjxkaXYgY2xhc3M9XFxcImNvbC1zbS05XFxcIj48aW5wdXQgdHlwZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnR5cGUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGRhdGEtanM9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIj48L2Rpdj48L2Rpdj4gICAgICAgIFwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBkYXRhLWpzPVxcXCJjb250YWluZXJcXFwiIGNsYXNzPVxcXCJjb250YWluZXIgY29sLXNtLTQgY29sLXNtLW9mZnNldC00XFxcIj48ZGl2IGNsYXNzPVxcXCJoZWFkaW5nXFxcIj5Mb2dpbjwvZGl2Pjxmb3JtIGNsYXNzPVxcXCJmb3JtLWhvcml6b250YWxcXFwiPiAgICAgICAgXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiB7fSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmllbGRzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICA8L2Zvcm0+PGRpdiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiPjxidXR0b24gZGF0YS1qcz1cXFwibG9naW5CdG5cXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCI+TG9nIEluPC9idXR0b24+PC9kaXY+PC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBkYXRhLWpzPVxcXCJjb250YWluZXJcXFwiIGNsYXNzPVxcXCJtb2RhbCBmYWRlXFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1kaWFsb2dcXFwiPjxkaXYgY2xhc3M9XFxcIm1vZGFsLWNvbnRlbnRcXFwiPjxkaXYgZGF0YS1qcz1cXFwiaGVhZGVyXFxcIiBjbGFzcz1cXFwibW9kYWwtaGVhZGVyXFxcIj48YnV0dG9uIGRhdGEtanM9XFxcImNsb3NlQnRuXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJjbG9zZVxcXCIgZGF0YS1kaXNtaXNzPVxcXCJtb2RhbFxcXCIgYXJpYS1sYWJlbD1cXFwiQ2xvc2VcXFwiPjxzcGFuIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPjxoNCBjbGFzcz1cXFwibW9kYWwtdGl0bGVcXFwiIGRhdGEtanM9XFxcInRpdGxlXFxcIj48L2g0PjwvZGl2PjxkaXYgZGF0YS1qcz1cXFwiYm9keVxcXCIgY2xhc3M9XFxcIm1vZGFsLWJvZHlcXFwiPjwvZGl2PjxkaXYgZGF0YS1qcz1cXFwiZm9vdGVyXFxcIiBjbGFzcz1cXFwibW9kYWwtZm9vdGVyXFxcIj48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1qcz1cXFwiY2FuY2VsQnRuXFxcIiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIj5DbG9zZTwvYnV0dG9uPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBkYXRhLWpzPVxcXCJjb25maXJtQnRuXFxcIj5TYXZlPC9idXR0b24+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVxcXCJ3XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLndpZHRoIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBkYXRhLXNvcnQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIj5cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L3RoPiAgICAgICAgICAgICAgICAgICAgXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8ZGl2IGRhdGEtanM9XFxcImNvbnRhaW5lclxcXCIgY2xhc3M9XFxcImNvbC1zbS0xMCBjb2wtc20tb2Zmc2V0LTEgcmVzb3VyY2VcXFwiPjxkaXYgY2xhc3M9XFxcInN1Yi1oZWFkaW5nXFxcIj48c3BhbiBkYXRhLWpzPVxcXCJzdWJIZWFkaW5nXFxcIj48L3NwYW4+PGJ1dHRvbiBkYXRhLWpzPVxcXCJjcmVhdGVCdG5cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXNcXFwiPjwvc3Bhbj48L2J1dHRvbj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3cgbXl0YWJsZVxcXCI+PGJ1dHRvbiBkYXRhLWpzPVxcXCJlZGl0QnRuXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IGVkaXQtYnRuIGhpZGVcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXBlbmNpbFxcXCI+PC9zcGFuPjwvYnV0dG9uPjxidXR0b24gZGF0YS1qcz1cXFwiZGVsZXRlQnRuXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IGRlbGV0ZS1idG4gaGlkZVxcXCI+PHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlXFxcIj48L3NwYW4+PC9idXR0b24+PHRhYmxlIGRhdGEtanM9XFxcInRhYmxlXFxcIj48dGhlYWQgZGF0YS1qcz1cXFwiaGVhZGVyXFxcIj48dHIgY2xhc3M9XFxcImNsZWFyZml4XFxcIj4gICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpZWxkcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgPC90cj48L3RoZWFkPjx0Ym9keSBkYXRhLWpzPVxcXCJib2R5XFxcIj48L3Rib2R5PjwvdGFibGU+PC9kaXY+PC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICA8dGQgY2xhc3M9XFxcIndcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAud2lkdGggOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGRhdGEtanM9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIj5cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudmFsdWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L3RkPiAgICBcIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjx0ciBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiIGRhdGEtanM9XFxcImNvbnRhaW5lclxcXCI+ICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3RyPlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxkaXYgZGF0YS1qcz1cXFwic2VydmVyRXJyb3JcXFwiIGNsYXNzPVxcXCJhbGVydCBhbGVydC1kYW5nZXJcXFwiIHJvbGU9XFxcImFsZXJ0XFxcIj5Vbmtub3duIGVycm9yLCBwbGVhc2UgdHJ5IGFnYWluIG9yIGNvbnRhY3QgdXMgYXQgYWRtaW5Ad2VsbHBsZWRnZS5jb208L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG59OyIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXYgZGF0YS1qcz1cImNvbnRhaW5lclwiIGNsYXNzPVwiU2lnbnVwXCI+XG4gICAgPGgxPlNpZ24gVXA8L2gxPlxuICAgIDxoMiBkYXRhLWpzPVwiaW50cm9cIj5XZWxjb21lIHRvIG91ciBDU0EgU2lnbiBVcCBQYWdlPC9oMj5cbiAgICA8c2VjdGlvbj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwid2Fsa3Rocm91Z2hcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5hdi1hcnJvd3NcIj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cImxlZnRCdG5cIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tbWVudS1sZWZ0XCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuPkJhY2s8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cInJpZ2h0QnRuXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4+TmV4dDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tbWVudS1yaWdodFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG48L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdiBjbGFzcz1cIkRhdGVTZWxlY3Rpb25cIiBkYXRhLWpzPVwiY29udGFpbmVyXCI+XG4gICAgPGRpdj5Ob3QgZ29pbmcgdG8gYmUgYXJvdW5kPzwvZGl2PlxuICAgIDxkaXY+UGxlYXNlIGNob29zZSBhbnkgZGF0ZXMgZm9yIHdoaWNoIHlvdSB3aWxsIG5vdCBiZSBhdmFpbGFibGUgdG8gcmVjZWl2ZSBvciBwaWNrIHVwIHlvdXIgc2hhcmUuPC9kaXY+XG4gICAgPHVsIGRhdGEtanM9XCJzaGFyZXNcIj48L3VsPlxuPC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXYgY2xhc3M9XCJEZWxpdmVyeVwiIGRhdGEtanM9XCJjb250YWluZXJcIj5cbiAgICA8cD5QbGVhc2Ugc2VsZWN0IGEgZGVsaXZlcnkgb3B0aW9uIGZvciB5b3VyIHNoYXJlKHMpLjwvcD5cbiAgICA8dWwgZGF0YS1qcz1cInNoYXJlc1wiPjwvdWw+XG48L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGxpIGNsYXNzPVwiZGVsaXZlcnktb3B0aW9uXCIgZGF0YS1pZD1cIiR7cC5pZH1cIiBkYXRhLWpzPVwiY29udGFpbmVyXCI+XG4gICAgPGRpdj4ke3AubGFiZWx9PC9kaXY+XG4gICAgPGRpdiBkYXRhLWpzPVwiZGVsaXZlcnlQcmljZVwiPiR7cC5wcmljZX0gLyB3ZWVrPC9zcGFuPjwvZGl2PlxuPC9saT5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGxpIGRhdGEtanM9XCJjb250YWluZXJcIiBjbGFzcz1cImRlbGl2ZXJ5LW9wdGlvbnNcIj5cbiAgICA8ZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2hhcmUtbGFiZWxcIj5cbiAgICAgICAgICAgIDxkaXY+JHtwLmxhYmVsfTwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4ke3AuaHVtYW5TdGFydGRhdGV9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuPi08L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4+JHtwLmh1bWFuRW5kZGF0ZX08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+JHtwLmR1cmF0aW9ufSB3ZWVrczwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cIm9wdGlvbnNcIiBjbGFzcz1cIm9wdGlvbnNcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cImZlZWRiYWNrXCIgY2xhc3M9XCJmZWVkYmFjay1tZXNzYWdlc1wiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGRhdGEtanM9XCJkcm9wb2Zmc1wiPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJlcnJvclwiPlBsZWFzZSBzZWxlY3QgYSB2YWxpZCBvcHRpb24uPC9kaXY+XG48L2xpPmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2IGRhdGEtanM9XCJjb250YWluZXJcIiBjbGFzcz1cImRyb3BvZmZcIj5cbiAgICA8ZGl2PiR7cC5sYWJlbH08L2Rpdj5cbiAgICA8ZGl2PiR7cC52ZW51ZSB8fCAnJ308L2Rpdj5cbiAgICA8ZGl2PiR7cC5zdHJlZXR9PC9kaXY+XG4gICAgPGRpdj4ke3AuY2l0eVN0YXRlWmlwfTwvZGl2PlxuICAgIDxkaXY+JHtwLmRheU9mV2Vla30gOiAke3Auc3RhcnR0aW1lfSAtICR7cC5lbmR0aW1lfTwvZGl2PlxuPC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBgPGRpdiBjbGFzcz1cImRyb3BvZmZzXCIgZGF0YS1qcz1cImNvbnRhaW5lclwiPjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4gYDxkaXY+T24tZmFybSBwaWNrdXAgYXZhaWxhYmxlICR7cC5kYXlPZldlZWt9ICR7cC5zdGFydHRpbWV9IC0gJHtwLmVuZHRpbWV9PC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBgPGRpdj5Ib21lIGRlbGl2ZXJ5IGF2YWlsYWJsZSAke3AuZGF5T2ZXZWVrfSAke3Auc3RhcnR0aW1lfSAtICR7cC5lbmR0aW1lfTwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8bGkgZGF0YS1qcz1cImNvbnRhaW5lclwiIGNsYXNzPVwicGF5bWVudC1vcHRpb25cIj5cbiAgICA8ZGl2PiR7cC5sYWJlbH08L2Rpdj5cbiAgICA8ZGl2PiR7cC5ub3RlfTwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJtZXRob2QtdG90YWxcIj48L2Rpdj4gICAgXG48L2xpPmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBgPHVsIGNsYXNzPVwicGF5bWVudC1vcHRpb25zXCIgZGF0YS1qcz1cImNvbnRhaW5lclwiPjwvdWw+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXYgZGF0YS1qcz1cImNvbnRhaW5lclwiIGNsYXNzPVwicGlja3VwLWRhdGUgJHtwLnNlbGVjdGVkID8gJ3NlbGVjdGVkJyA6ICcnfSAke3AudW5zZWxlY3RhYmxlID8gJ3Vuc2VsZWN0YWJsZScgOiAnJ31cIj5cbiAgICA8ZGl2PiR7cC5kYXlPZldlZWt9PC9kaXY+XG4gICAgPGRpdj4ke3AubW9udGh9PC9kaXY+XG4gICAgPGRpdj4ke3AuZGF5T2ZNb250aH08L2Rpdj5cbjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8bGkgZGF0YS1qcz1cImNvbnRhaW5lclwiIGNsYXNzPVwic2hhcmUtZGF0ZXNcIj5cbiAgICA8ZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2hhcmUtbGFiZWxcIj5cbiAgICAgICAgICAgIDxkaXY+JHtwLmxhYmVsfTwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4ke3AuaHVtYW5TdGFydGRhdGV9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuPi08L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4+JHtwLmh1bWFuRW5kZGF0ZX08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+JHtwLmR1cmF0aW9ufSB3ZWVrczwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwiZGF0ZXNcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZXJyb3JcIj5QbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBkYXRlIHRvIHJlY2VpdmUgYSBzaGFyZS48L2Rpdj5cbjwvbGk+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxsaSBkYXRhLWpzPVwiY29udGFpbmVyXCIgY2xhc3M9XCJzaGFyZVwiIGRhdGEtaWQ9XCIke3AuaWR9XCI+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwic2hhcmVCb3hcIj48L2Rpdj5cbiAgICAgICAgPGRpdj4ke3AuZGVzY3JpcHRpb259PC9kaXY+XG4gICAgPC9kaXY+XG48L2xpPmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBwLm9wdGlvbnMubWFwKCBvcHRpb24gPT4gYDxvcHRpb24gdmFsdWU9XCIke29wdGlvbi5pZH1cIj4ke29wdGlvbi5sYWJlbH08L29wdGlvbj5gICkuam9pbignJyksXG4gICAgICAgIGRlc2NyaXB0aW9uID0gcC5kZXNjcmlwdGlvbiA/IGA8c3BhbiBkYXRhLWpzPVwib3B0aW9uSWNvblwiIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1pbmZvLXNpZ25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+YCA6IGBgXG5cbnJldHVybiBgYCArXG5gPGRpdiBkYXRhLWpzPVwiY29udGFpbmVyXCIgY2xhc3M9XCJzaGFyZS1vcHRpb25cIj5cbiAgICA8ZGl2IGNsYXNzPVwib3B0aW9uLXRpdGxlXCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8c3Bhbj4ke3AubGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgJHtkZXNjcmlwdGlvbn1cbiAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxzZWxlY3QgZGF0YS1qcz1cImlucHV0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cbiAgICAgICAgICAgICAgICAke29wdGlvbnN9XG4gICAgICAgICAgICA8L3NlbGVjdD4gICAgXG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0b3RhbFwiPlxuICAgICAgICA8ZGl2IGRhdGEtanM9XCJ0b3RhbFwiPjwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+YFxufSIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXYgY2xhc3M9XCJTaGFyZU9wdGlvbnNcIiBkYXRhLWpzPVwiY29udGFpbmVyXCI+XG4gICAgPHA+UGxlYXNlIG1ha2Ugc2VsZWN0aW9ucyB0byBjdXN0b21pemUgeW91ciBib3g8L3A+XG4gICAgPHVsIGRhdGEtanM9XCJzaGFyZXNcIj48L3VsPlxuPC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXYgY2xhc3M9XCJTaGFyZXNcIiBkYXRhLWpzPVwiY29udGFpbmVyXCI+XG4gICAgPHA+QXMgYSBtZW1iZXIgaW4gb3VyIENTQSBwcm9ncmFtLCB5b3Ugd2lsbCByZWNlaXZlIGEgd2Vla2x5IGJveCBvZiBmcmVzaC1waWNrZWQsIGNoZW1pY2FsLWZyZWUgcHJvZHVjZSBhbGwgZ3Jvd24gYXQgUGF0Y2h3b3JrIEdhcmRlbnMsIHJpZ2h0IGhlcmUgaW4gdGhlIE1pYW1pIFZhbGxleS48L3A+XG4gICAgPHA+SWYgeW914oCZcmUgbm90IHF1aXRlIHN1cmUgeW914oCZcmUgcmVhZHkgZm9yIGEgQ1NBLCBjaGVjayBvdXQgb3VyIDxzcGFuIGRhdGEtanM9XCJjc2FJbmZvQnRuXCIgY2xhc3M9XCJsaW5rXCI+Q1NBIFByb2dyYW08L3NwYW4+IHBhZ2UgZm9yIG1vcmUgaW5mb3JtYXRpb248L3A+XG4gICAgPGgyPlBsZWFzZSBzZWxlY3Qgd2hpY2ggc2Vhc29uKHMpIHlvdSB3b3VsZCBsaWtlIHRvIGpvaW4gdXM8L2gyPlxuICAgIDx1bCBkYXRhLWpzPVwic2hhcmVzXCI+PC91bD5cbiAgICA8ZGl2IGNsYXNzPVwiZXJyb3JcIj5QbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBzaGFyZS48L2Rpdj5cbjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8bGkgZGF0YS1qcz1cImNvbnRhaW5lclwiPlxuICAgIDxkaXYgZGF0YS1qcz1cInJvd1wiIGNsYXNzPVwic2luZ2xlLXNoYXJlXCI+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cInNoYXJlQm94XCI+PC9kaXY+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cIm9wdGlvbnNcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2PjxzcGFuPlNoYXJlIFRvdGFsOiA8L3NwYW4+PHNwYW4gZGF0YS1qcz1cInRvdGFsXCI+PC9zcGFuPjwvZGl2PlxuPC9saT5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcblxuY29uc3Qgc2hhcmVzID0gcC5zaGFyZXMubWFwKCBzaGFyZSA9PiB7XG5cbiAgICBjb25zdCBzZWxlY3RlZE9wdGlvbnMgPSBzaGFyZS5zZWxlY3RlZE9wdGlvbnMubWFwKCBvcHQgPT5cbiAgICAgICAgYDxkaXYgY2xhc3M9XCJpdGVtLXJvd1wiPlxuICAgICAgICAgICAgPGRpdj4ke29wdC5vcHRpb25OYW1lfTwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4ke29wdC5zZWxlY3RlZE9wdGlvbkxhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4ke3AudW5pdCB8fCAnJ308L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmljZVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuPiR7b3B0LnByaWNlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3Bhbj5wZXIgd2Vlazwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5gXG4gICAgKS5qb2luKCcnKVxuXG4gICAgY29uc3QgZ3JvdXBkcm9wb2ZmID0gc2hhcmUuc2VsZWN0ZWREZWxpdmVyeS5ncm91cGRyb3BvZmZcbiAgICAgICAgPyBgPGRpdiBjbGFzcz1cIml0ZW0tcm93XCI+XG4gICAgICAgICAgICA8ZGl2PkRyb3Atb2ZmIExvY2F0aW9uPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PiR7c2hhcmUuc2VsZWN0ZWREZWxpdmVyeS5ncm91cGRyb3BvZmZ9PC9kaXY+XG4gICAgICAgIDwvZGl2PmBcbiAgICAgICAgOiBgYFxuXG4gICAgY29uc3Qgc2tpcERheXMgPSBzaGFyZS5za2lwRGF5c1xuICAgICAgICA/IGA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNlY3Rpb24tdGl0bGVcIj5EYXRlcyBZb3UgV2lsbCBOb3QgUGlja3VwPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGlja3VwLWRhdGVzXCI+JHtzaGFyZS5za2lwRGF5cy5qb2luKCcnKX08L2Rpdj5cbiAgICAgICAgPC9kaXY+YFxuICAgICAgICA6IGBgXG5cbiAgICByZXR1cm4gYGAgK1xuICAgIGA8ZGl2IGNsYXNzPVwic2hhcmUtc3VtbWFyeVwiPlxuICAgICAgICA8ZGl2PiR7c2hhcmUuc2hhcmVCb3h9PC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi10aXRsZVwiPlNoYXJlIE9wdGlvbnM8L2Rpdj5cbiAgICAgICAgICAgICR7c2VsZWN0ZWRPcHRpb25zfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLXRpdGxlXCI+RGVsaXZlcnk8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLXJvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXY+TWV0aG9kPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj4ke3NoYXJlLnNlbGVjdGVkRGVsaXZlcnkuZGVsaXZlcnlUeXBlfTwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmljZVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ke3NoYXJlLnNlbGVjdGVkRGVsaXZlcnkud2Vla2x5Q29zdH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPnBlciB3ZWVrPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PiAgXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICR7Z3JvdXBkcm9wb2ZmfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW0tcm93XCI+XG4gICAgICAgICAgICAgICAgPGRpdj5BZGRyZXNzPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj4ke3NoYXJlLnNlbGVjdGVkRGVsaXZlcnkuYWRkcmVzc308L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW0tcm93XCI+XG4gICAgICAgICAgICAgICAgPGRpdj5QaWNrLXVwIEhvdXJzPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtzaGFyZS5zZWxlY3RlZERlbGl2ZXJ5LmRheU9mV2Vla30gPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ke3NoYXJlLnNlbGVjdGVkRGVsaXZlcnkuc3RhcnR0aW1lfSAtICR7c2hhcmUuc2VsZWN0ZWREZWxpdmVyeS5lbmR0aW1lfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLXRpdGxlXCI+RGF0ZXMgU2VsZWN0ZWQgZm9yIERlbGl2ZXJ5PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1yb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2Pk51bWJlciBvZiB3ZWVrcyBzZWxlY3RlZDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+JHtzaGFyZS53ZWVrc1NlbGVjdGVkfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGlja3VwLWRhdGVzXCI+XG4gICAgICAgICAgICAgICAgJHtzaGFyZS5zZWxlY3RlZERhdGVzLmpvaW4oJycpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAke3NraXBEYXlzfVxuICAgICAgICA8ZGl2IGNsYXNzPVwic2hhcmUtdG90YWxcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLXRpdGxlXCI+U2hhcmUgVG90YWw8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5XZWVrbHkgUHJpY2UgOjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+JHtzaGFyZS53ZWVrbHlQcmljZX08L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8ZGl2Pk51bWJlciBvZiBXZWVrcyA6PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj4ke3NoYXJlLndlZWtzU2VsZWN0ZWR9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5TaGFyZSBUb3RhbCA6PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj4ke3NoYXJlLnRvdGFsfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmBcbn0gKS5qb2luKCcnKVxuXG5yZXR1cm4gYGAgK1xuYDxkaXYgZGF0YS1qcz1cImNvbnRhaW5lclwiIGNsYXNzPVwiU3VtbWFyeSAke3AuY29udGFpbmVyQ2xhc3N9XCI+XG4gICAgPGRpdiBjbGFzcz1cInN1bW1hcmllc1wiPlxuICAgICAgICAke3NoYXJlc31cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGRhdGEtanM9XCJncmFuZFRvdGFsXCIgY2xhc3M9XCJncmFuZC10b3RhbFwiPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJwYXltZW50XCI+ICAgIFxuICAgICAgICA8aDI+U2VsZWN0IGEgbWV0aG9kIG9mIHBheW1lbnQ8L2gyPlxuICAgICAgICA8ZGl2IGRhdGEtanM9XCJwYXltZW50T3B0aW9uc1wiPjwvZGl2PlxuICAgICAgICA8Zm9ybSBkYXRhLWpzPVwicGF5bWVudEZvcm1cIiBjbGFzcz1cImhpZGVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjcmVkaXQtY2FyZC1pbmZvXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbCBudW1iZXJcIj5DYXJkIE51bWJlcjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBkYXRhLWpzPVwibnVtYmVyXCIgaWQ9XCJudW1iZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZm9ybS1jb250cm9sLWZlZWRiYWNrIGhpZGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5WaXNhLCBNYXN0ZXJDYXJkLCBBbWVyaWNhbiBFeHByZXNzLCBKQ0IsIERpc2NvdmVyLCBhbmQgRGluZXJzIENsdWIgYXJlIGFjY2VwdGVkPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJleHBpcmF0aW9uXCI+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPkV4cCBNb250aDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgZGF0YS1qcz1cImV4cF9tb250aFwiIG1heGxlbmd0aD1cIjJcIiBzaXplPVwiM1wiIHBsYWNlaG9sZGVyPVwibW1cIiBpZD1cImV4cF9tb250aFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZm9ybS1jb250cm9sLWZlZWRiYWNrIGhpZGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj5FeHAgWWVhcjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgZGF0YS1qcz1cImV4cF95ZWFyXCIgbWF4bGVuZ3RoPVwiNFwiIHNpemU9XCI0XCIgcGxhY2Vob2xkZXI9XCJ5eXl5XCIgaWQ9XCJleHBfeWVhclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZm9ybS1jb250cm9sLWZlZWRiYWNrIGhpZGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj5DVkM8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjdmNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGRhdGEtanM9XCJjdmNcIiBtYXhsZW5ndGg9XCI0XCIgc2l6ZT1cIjRcIiBpZD1cImN2Y1wiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBmb3JtLWNvbnRyb2wtZmVlZGJhY2sgaGlkZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tcm93XCI+XG4gICAgICAgICAgICA8YnV0dG9uIGRhdGEtanM9XCJzaWdudXBCdG5cIiBjbGFzcz1cImRpc2FibGVkXCI+QmVjb21lIGEgTWVtYmVyITwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2PlxuICAgIDxkaXY+QmVjYXVzZSB5b3UgaGF2ZSBzZWxlY3RlZCBob21lIGRlbGl2ZXJ5LCBhbmQgeW91ciBhZGRyZXNzIGNvdWxkIG5vdCBiZSB2YWxpZGF0ZWQgYXV0b21hdGljYWxseSwgd2Ugd291bGQgbGlrZSB5b3UgdG8gdmVyaWZ5IHlvdXIgYWRkcmVzcyBhbmQgemlwIGNvZGU8L2Rpdj5cbiAgICA8Zm9ybSBjbGFzcz1cImZvcm0taG9yaXpvbnRhbFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLXNtLTMgY29udHJvbC1sYWJlbFwiPkFkZHJlc3M8L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cInZlcmlmaWVkQWRkcmVzc1wiIHZhbHVlPVwiJHtwLmFkZHJlc3N9XCI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJ6aXBDb2RlRm9ybUdyb3VwXCIgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtc20tMyBjb250cm9sLWxhYmVsXCI+WmlwIENvZGU8L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cInZlcmlmaWVkWmlwQ29kZVwiIHZhbHVlPVwiJHtwLnppcENvZGV9XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJ6aXBDb2RlSGVscEJsb2NrXCIgY2xhc3M9XCJoZWxwLWJsb2NrIGhpZGVcIj5JbnZhbGlkIFppcCBDb2RlIGZvciBIb21lIERlbGl2ZXJ5PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbjwvZGl2PmAiLCJjb25zdCBDdXN0b21Db250ZW50ID0gcmVxdWlyZSgnLi91dGlsL0N1c3RvbUNvbnRlbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCBDdXN0b21Db250ZW50LCB7XG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgbGluazogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBvbkxpbmtDbGljayggZSApIHtcbiAgICAgICAgdGhpcy5lbWl0KCAnbmF2aWdhdGUnLCBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpIClcbiAgICB9LFxuXG4gICAgdGFibGVzOiBbIFxuICAgICAgICB7IG5hbWU6ICdTdGFmZicsIGVsOiAnc3RhZmYnLCB0ZW1wbGF0ZTogJ3N0YWZmUHJvZmlsZScgfVxuICAgIF0sXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgc3RhZmZQcm9maWxlOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9TdGFmZlByb2ZpbGUnKVxuICAgIH1cblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBQaWthZGF5OiByZXF1aXJlKCdwaWthZGF5JyksXG5cbiAgICBWaWV3czoge1xuICAgICAgICBidXR0b25GbG93KCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgbW9kZWw6IE9iamVjdC5jcmVhdGUoIHRoaXMuTW9kZWwgKS5jb25zdHJ1Y3Rvcigge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogWyB7IG5hbWU6ICdhZGRUcmFuc2FjdGlvbicsIGNsYXNzOiAnc2F2ZS1idG4nLCB0ZXh0OiAnQWRkIFRyYW5zYWN0aW9uJywgbmV4dFN0YXRlOiAnY29uZmlybScgfSBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybTogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ2NvbmZpcm1BZGQnLCBjbGFzczogJ3NhdmUtYnRuJywgdGV4dDogJ0FyZSB5b3UgU3VyZT8nLCBlbWl0OiB0cnVlLCBuZXh0U3RhdGU6ICdzdGFydCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdjYW5jZWwnLCBjbGFzczogJ3Jlc2V0LWJ0bicsIG5leHRTdGF0ZTogJ3N0YXJ0JywgdGV4dDogJ0NhbmNlbCcsIGVtaXQ6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYWRkVHJhbnNhY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnBvc3QoIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICB7IG1lbWJlclNoYXJlSWQ6IHRoaXMubWVtYmVyU2hhcmVJZCB9LFxuICAgICAgICAgICAgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLnJlZHVjZSggKCBtZW1vLCBhdHRyICkgPT5cbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKCBtZW1vLCB7IFsgYXR0ciBdOlxuICAgICAgICAgICAgICAgICAgICBhdHRyID09PSAnY3JlYXRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5Nb21lbnQoIHRoaXMuZWxzW2F0dHJdLnZhbHVlLCAnTU1NIEQsIFlZWVknICkuZm9ybWF0KCdZWVlZLU1NLUREJykgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZWxzW2F0dHJdLnZhbHVlXG4gICAgICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgICAgIHsgfVxuICAgICAgICAgICAgKSBcbiAgICAgICAgKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnc3VjY2VzcycsICdUcmFuc2FjdGlvbiBhZGRlZCEnICkgKVxuICAgICAgICAuY2F0Y2goIGUgPT4geyB0aGlzLkVycm9yKGUpOyB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnZXJyb3InLCAnRXJyb3IgYWRkaW5nIHRyYW5zYWN0aW9uJyApIH0gKVxuICAgIH0sXG5cbiAgICBvbkFkZEJsdXIoZSkge1xuICAgICAgICBpc05hTiggcGFyc2VGbG9hdCggdGhpcy5lbHMudmFsdWUudmFsdWUgKSApXG4gICAgICAgICAgICA/IHRoaXMuZWxzLmZvcm0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICAgICAgICAgIDogdGhpcy52aWV3cy5idXR0b25GbG93LmVuYWJsZSgpXG4gICAgfSxcblxuICAgIG9uQWRkRm9jdXMoZSkge1xuICAgICAgICB0aGlzLmVscy5mb3JtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgfSxcblxuICAgIG9uQ2FuY2VsKCkge1xuICAgICAgICB0aGlzLnJlc2V0KClcbiAgICAgICAgdGhpcy52aWV3cy5idXR0b25GbG93LmRpc2FibGUoKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMuZm9yRWFjaCggYXR0ciA9PiB7XG4gICAgICAgICAgICB0aGlzLmVsc1sgYXR0ciBdLmFkZEV2ZW50TGlzdGVuZXIoICdmb2N1cycsIGUgPT4gdGhpcy5vbkFkZEZvY3VzKGUpIClcbiAgICAgICAgICAgIHRoaXMuZWxzWyBhdHRyIF0uYWRkRXZlbnRMaXN0ZW5lciggJ2JsdXInLCBlID0+IHRoaXMub25BZGRCbHVyKGUpIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5jcmVhdGVkID0gbmV3IHRoaXMuUGlrYWRheSggeyBmaWVsZDogdGhpcy5lbHMuY3JlYXRlZCwgZm9ybWF0OiAnTU1NIEQsIFlZWVknIH0gKVxuXG4gICAgICAgIHRoaXMudmlld3MuYnV0dG9uRmxvdy5vbiggJ2NvbmZpcm1BZGRDbGlja2VkJywgZSA9PiB0aGlzLmFkZFRyYW5zYWN0aW9uKCkgKVxuICAgICAgICB0aGlzLnZpZXdzLmJ1dHRvbkZsb3cub24oICdjYW5jZWxDbGlja2VkJywgZSA9PiB0aGlzLm9uQ2FuY2VsKCkgKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlc2V0KCkge1xuICAgICAgICBjb25zdCBub3cgPSB0aGlzLk1vbWVudCgpLmZvcm1hdCgnTU1NIEQsIFlZWVknKVxuICAgICAgICB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMuZm9yRWFjaCggYXR0ciA9PlxuICAgICAgICAgICAgdGhpcy5lbHNbIGF0dHIgXS52YWx1ZSA9XG4gICAgICAgICAgICAgICAgYXR0ciA9PT0gJ2FjdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLm1vZGVsLmFjdGlvbnNbMF1cbiAgICAgICAgICAgICAgICAgICAgOiBhdHRyID09PSAnY3JlYXRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbm93XG4gICAgICAgICAgICAgICAgICAgICAgICA6ICcnIClcblxuICAgICAgICB0aGlzLmNyZWF0ZWQuc2V0TW9tZW50KCBub3cgKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZU9wdHMoKSB7XG4gICAgICAgIHJldHVybiB7IGFjdGlvbnM6IHRoaXMubW9kZWwuYWN0aW9ucyB9XG4gICAgfSxcblxuICAgIHVwZGF0ZSggbWVtYmVyU2hhcmVJZCApIHtcbiAgICAgICAgdGhpcy5tZW1iZXJTaGFyZUlkID0gbWVtYmVyU2hhcmVJZFxuICAgICAgICB0aGlzLnJlc2V0KClcbiAgICB9XG59IClcbiIsInZhciBUYWJsZSA9IHJlcXVpcmUoJy4vdXRpbC9UYWJsZScpLFxuICAgIEFkbWluID0gZnVuY3Rpb24oKSB7IHJldHVybiBUYWJsZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBBZG1pbi5wcm90b3R5cGUsIFRhYmxlLnByb3RvdHlwZSwge1xuXG4gICAgSXRlbVZpZXc6IHJlcXVpcmUoJy4vUmVzb3VyY2VSb3cnKSxcblxuICAgIGZpZWxkczogW1xuICAgICAgICB7IG5hbWU6ICduYW1lJywgbGFiZWw6ICdOYW1lJywgd2lkdGg6IDI1IH0sXG4gICAgICAgIHsgbmFtZTogJ2xhYmVsJywgbGFiZWw6ICdMYWJlbCcsIHdpZHRoOiAyNSB9LFxuICAgICAgICB7IG5hbWU6ICdkZXNjcmlwdGlvbicsIGxhYmVsOiAnRGVzY3JpcHRpb24nLCB3aWR0aDogNTAgfVxuICAgIF0sXG4gICAgXG4gICAgb25JdGVtQ2xpY2soIG1vZGVsICkge1xuICAgICAgICB0aGlzLmhpZGUoKS50aGVuKCAoKSA9PiB0aGlzLmVtaXQoICduYXZpZ2F0ZScsIGAvYWRtaW4vJHttb2RlbC5nZXQoJ25hbWUnKX1gICkgKVxuICAgICAgICAuY2F0Y2goIGVyciA9PiBuZXcgdGhpcy5FcnJvciggZXJyICkgKVxuICAgIH0sXG5cbiAgICByZXF1aXJlc1JvbGU6ICdhZG1pbicsXG5cbiAgICBzZWxlY3Rpb246IHRydWUsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2FkbWluJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApXG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFkbWluXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSggJy4vX19wcm90b19fJyApLCB7XG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgJ3NpZ25vdXRCdG4nOiAnY2xpY2snXG4gICAgfSxcblxuICAgIHRlbXBsYXRlT3B0czogeyBsb2dvOiAnL3N0YXRpYy9pbWcvbG9nby5naWYnIH0sXG5cbiAgICBpbnNlcnRpb25NZXRob2Q6ICdiZWZvcmUnLFxuXG4gICAgb25Vc2VyKCkge1xuICAgICAgICB0aGlzLmVscy5uYW1lLnRleHRDb250ZW50ID0gdGhpcy51c2VyLmdldCgnbmFtZScpXG4gICAgICAgIHRoaXMuZWxzLnVzZXJQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCAnaGlkZScgKVxuICAgIH0sXG4gICAgXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICBvblNpZ25vdXRCdG5DbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9ICdwYXRjaHdvcmtqd3Q9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDEgR01UOyc7XG4gICAgICAgIHRoaXMudXNlci5jbGVhcigpXG5cbiAgICAgICAgdGhpcy51c2VyLnNldCggdGhpcy51c2VyLmRlZmF1bHRzIClcblxuICAgICAgICB0aGlzLmVscy5uYW1lLnRleHRDb250ZW50ID0gJydcbiAgICAgICAgdGhpcy5lbHMudXNlclBhbmVsLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxuXG4gICAgICAgIHRoaXMuZW1pdCgnc2lnbm91dCcpXG4gICAgfVxuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIGV2ZW50czoge1xuICAgICAgICAnY29sbGVjdGlvbk1hbmFnZXJCdG4nOiAnY2xpY2snLFxuICAgICAgICAnbWFuYWdlQ3VzdG9tZXJCdG4nOiAnY2xpY2snLFxuICAgICAgICAncmVwb3J0aW5nQnRuJzogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBtb2RlbDoge1xuXG4gICAgICAgIG1hbmFnZUN1c3RvbWVyOiB7IGxhYmVsOiAnTWFuYWdlIEN1c3RvbWVycycsIHJvbGVzOiBuZXcgU2V0KCBbICdhZG1pbicgXSApLCB1cmw6ICdtYW5hZ2UtY3VzdG9tZXInIH0sXG5cbiAgICAgICAgY29sbGVjdGlvbk1hbmFnZXI6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ29sbGVjdGlvbiBNYW5hZ2VyJyxcbiAgICAgICAgICAgIHJvbGVzOiBuZXcgU2V0KCBbICdhZG1pbicgXSApLFxuICAgICAgICAgICAgdXJsOiAnY29sbGVjdGlvbi1tYW5hZ2VyJ1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlcG9ydGluZzogeyBsYWJlbDogJ35ffiBSZXBvcnRpbmcgfl9+Jywgcm9sZXM6IG5ldyBTZXQoIFsgJ2FkbWluJyBdICksIHVybDogJ3JlcG9ydGluZycgfVxuICAgIH0sXG5cbiAgICBvbkNvbGxlY3Rpb25NYW5hZ2VyQnRuQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuZW1pdCggJ25hdmlnYXRlJywgJ2FkbWluLXBsdXMvY29sbGVjdGlvbi1tYW5hZ2VyJyApXG4gICAgfSxcblxuICAgIG9uTWFuYWdlQ3VzdG9tZXJCdG5DbGljaygpIHtcbiAgICAgICAgdGhpcy5lbWl0KCAnbmF2aWdhdGUnLCAnYWRtaW4tcGx1cy9tYW5hZ2UtY3VzdG9tZXInIClcbiAgICB9LFxuXG4gICAgb25OYXZpZ2F0aW9uKCBwYXRoICkge1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoXG5cbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXlzLmZpbmQoIGtleSA9PiB0aGlzLm1vZGVsWyBrZXkgXS51cmwgPT09IHBhdGhbMF0gKVxuXG4gICAgICAgIGlmKCBrZXkgIT09IHVuZGVmaW5lZCApIHJldHVybiB0aGlzLnNob3dWaWV3KCBrZXkgKVxuXG4gICAgICAgIFByb21pc2UuYWxsKCBPYmplY3Qua2V5cyggdGhpcy5tb2RlbCApLm1hcCgga2V5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLm1vZGVsWyBrZXkgXS52aWV3XG4gICAgICAgICAgICByZXR1cm4gdmlldyA/IHZpZXcuaGlkZSgpIDogUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgfSApIClcbiAgICAgICAgLnRoZW4oICgpID0+IHsgdGhpcy5jdXJyZW50RWwgPSB0aGlzLmVscy5uYXY7IHJldHVybiB0aGlzLnNob3dFbCggdGhpcy5lbHMubmF2ICkgfSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgfSxcblxuICAgIG9uUmVwb3J0aW5nQnRuQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuZW1pdCggJ25hdmlnYXRlJywgJ2FkbWluLXBsdXMvcmVwb3J0aW5nJyApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMua2V5cyA9IE9iamVjdC5rZXlzKCB0aGlzLm1vZGVsIClcblxuICAgICAgICB0aGlzLmtleXMuZm9yRWFjaCggKCBuYW1lLCBpICkgPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMudXNlci5nZXQoJ3JvbGVzJykuZmlsdGVyKCByb2xlID0+IHRoaXMubW9kZWxbIG5hbWUgXS5yb2xlcy5oYXMoIHJvbGUgKSApLmxlbmd0aCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IGA8YnV0dG9uIGRhdGEtanM9XCIke25hbWV9QnRuXCI+JHt0aGlzLm1vZGVsWyBuYW1lIF0ubGFiZWx9PC9idXR0b24+YCwgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5uYXYgfSB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5jdXJyZW50RWwgPSB0aGlzLmVscy5uYXZcblxuICAgICAgICBpZiggdGhpcy5wYXRoLmxlbmd0aCA+IDEgKSB0aGlzLm9uTmF2aWdhdGlvbiggdGhpcy5wYXRoLnNsaWNlKCAxICkgKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHNob3dWaWV3KCBrZXkgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhpZGVFbCggdGhpcy5jdXJyZW50RWwgKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb2RlbFsga2V5IF0udmlldyBcbiAgICAgICAgICAgICAgICA/IHRoaXMubW9kZWxbIGtleSBdLnZpZXcub25OYXZpZ2F0aW9uKCB0aGlzLnBhdGguc2xpY2UoIDEgKSApXG4gICAgICAgICAgICAgICAgOiB0aGlzLm1vZGVsWyBrZXkgXS52aWV3ID0gdGhpcy5mYWN0b3J5LmNyZWF0ZSgga2V5LCB7IGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMudmlld3MgfSwgcGF0aDogdGhpcy5wYXRoLnNsaWNlKDEpIH0gKVxuICAgICAgICAgICAgICAgICAgICAub24oICduYXZpZ2F0ZScsICggcm91dGUsIG9wdHMgKSA9PiB0aGlzLmVtaXQoICduYXZpZ2F0ZScsIHJvdXRlLCBvcHRzICkgKVxuICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFZpZXcgPSB0aGlzLm1vZGVsWyBrZXkgXS52aWV3XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRFbCA9IHRoaXMubW9kZWxbIGtleSBdLnZpZXcuZ2V0Q29udGFpbmVyKClcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogdHJ1ZSxcblxuICAgIHJlcXVpcmVzUm9sZTogJ2FkbWluJ1xuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLm1vZGVsLmRhdGEuc3RhdGVzICkuZm9yRWFjaCggc3RhdGVOYW1lID0+XG4gICAgICAgICAgIHRoaXMubW9kZWwuZGF0YS5zdGF0ZXNbIHN0YXRlTmFtZSBdLmZvckVhY2goIGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZWxzWyBidXR0b24ubmFtZSBdXG4gICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCBidXR0b24uY2xpY2tMaXN0ZW5lciApXG4gICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpXG4gICAgICAgICAgIH0gKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMubW9kZWwuZGF0YS5zdGF0ZXMgKS5mb3JFYWNoKCBzdGF0ZU5hbWUgPT5cbiAgICAgICAgICAgdGhpcy5tb2RlbC5kYXRhLnN0YXRlc1sgc3RhdGVOYW1lIF0uZm9yRWFjaCggYnV0dG9uID0+IHtcbiAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbHNbIGJ1dHRvbi5uYW1lIF1cbiAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIGJ1dHRvbi5jbGlja0xpc3RlbmVyIClcbiAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgZ2V0TGlzdGVuZXIoIG5hbWUsIGJ1dHRvbiApIHtcbiAgICAgICAgcmV0dXJuIGUgPT4ge1xuICAgICAgICAgICAgaWYoIGJ1dHRvbi5uZXh0U3RhdGUgKSBlLmZkTmV4dFN0YXRlID0gdGhpcy5vbk5leHRTdGF0ZSggYnV0dG9uLm5leHRTdGF0ZSApXG4gICAgICAgICAgICBpZiggYnV0dG9uLmVtaXQgKSB0aGlzLmVtaXQoIGAke25hbWV9Q2xpY2tlZGAsIGUgKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uTmV4dFN0YXRlKCBuZXdTdGF0ZSApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlkZUVsKCB0aGlzLmVsc1sgdGhpcy5zdGF0ZSBdIClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0VsKCB0aGlzLmVsc1sgbmV3U3RhdGUgXSApXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLnN0YXRlID0gbmV3U3RhdGUgKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICdzdGFydCdcblxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5tb2RlbC5kYXRhLnN0YXRlcyApLmZvckVhY2goIHN0YXRlTmFtZSA9PlxuICAgICAgICAgICB0aGlzLm1vZGVsLmRhdGEuc3RhdGVzWyBzdGF0ZU5hbWUgXS5mb3JFYWNoKCBidXR0b24gPT4ge1xuICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsc1sgYnV0dG9uLm5hbWUgXVxuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGlja0xpc3RlbmVyID0gdGhpcy5nZXRMaXN0ZW5lciggYnV0dG9uLm5hbWUsIGJ1dHRvbiApXG4gICAgICAgICAgICAgICAgaWYoICF0aGlzLm1vZGVsLmRpc2FibGVkICkgeyBlbC5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCBidXR0b24uY2xpY2tMaXN0ZW5lciApIH1cbiAgICAgICAgICAgfSApXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7IH0sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIG1vZGVsOiByZXF1aXJlKCcuLi9tb2RlbHMvQ29sbGVjdGlvbk1hbmFnZXInKSxcblxuICAgIENvbGxlY3Rpb246IHJlcXVpcmUoJy4uL21vZGVscy9Db2xsZWN0aW9uJyksXG4gICAgRG9jdW1lbnRNb2RlbDogcmVxdWlyZSgnLi4vbW9kZWxzL0RvY3VtZW50JyksXG4gICAgSnNvblByb3BlcnR5TW9kZWw6IHJlcXVpcmUoJy4uL21vZGVscy9Kc29uUHJvcGVydHknKSxcbiAgICAvL1dlYlNvY2tldDogcmVxdWlyZSgnLi4vV2ViU29ja2V0JyksXG5cbiAgICBUZW1wbGF0ZXM6IHtcbiAgICAgICAgRG9jdW1lbnQ6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL0RvY3VtZW50JylcbiAgICB9LFxuXG4gICAgVmlld3M6IHtcblxuICAgICAgICBjb2xsZWN0aW9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3Q6ICdjbGljaydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLk1vZGVsICkuY29uc3RydWN0b3IoIHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogT2JqZWN0LmNyZWF0ZSggdGhpcy5Db2xsZWN0aW9uICksXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZldGNoOiB0cnVlXG4gICAgICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgICAgIGl0ZW1UZW1wbGF0ZTogY29sbGVjdGlvbiA9PiBgPHNwYW4+JHtjb2xsZWN0aW9uLm5hbWV9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVPcHRzOiB7IGhlYWRpbmc6ICdDb2xsZWN0aW9ucycsIG5hbWU6ICdDb2xsZWN0aW9ucycsIHRvZ2dsZTogdHJ1ZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypjcmVhdGVDb2xsZWN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLm1haW5QYW5lbCB9LFxuICAgICAgICAgICAgICAgIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLkNvbGxlY3Rpb24gKS5jb25zdHJ1Y3RvcigpLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlT3B0czogeyBoZWFkaW5nOiAnQ3JlYXRlIENvbGxlY3Rpb24nIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVDb2xsZWN0aW9uKCBtb2RlbCApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5tYWluUGFuZWwgfSxcbiAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Db2xsZWN0aW9uICkuY29uc3RydWN0b3IoIG1vZGVsICksXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVPcHRzOiB7IG1lc3NhZ2U6IGBEZWxldGUgXCIke21vZGVsLm5hbWV9XCIgQ29sbGVjdGlvbj9gIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwqL1xuXG4gICAgICAgIGRlbGV0ZURvY3VtZW50KCBkb2N1bWVudCApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5tYWluUGFuZWwgfSxcbiAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Eb2N1bWVudE1vZGVsICkuY29uc3RydWN0b3IoIGRvY3VtZW50LCB7IHJlc291cmNlOiB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSB9ICksXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVPcHRzOiB7IG1lc3NhZ2U6IGBEZWxldGUgXCIke2RvY3VtZW50LmxhYmVsIHx8IGRvY3VtZW50Lm5hbWV9XCIgZnJvbSAke3RoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicpfT9gIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkb2N1bWVudExpc3QoIG1vZGVsICkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKCBPYmplY3QuYXNzaWduKCBtb2RlbCwge1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBPYmplY3QuY3JlYXRlKCB0aGlzLkRvY3VtZW50TW9kZWwgKS5jb25zdHJ1Y3RvciggWyBdLCB7IHJlc291cmNlOiB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSB9ICksXG4gICAgICAgICAgICAgICAgICAgIGlzRG9jdW1lbnRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZTogMTAwLFxuICAgICAgICAgICAgICAgICAgICBza2lwOiAwLFxuICAgICAgICAgICAgICAgICAgICBzb3J0OiB7ICdsYWJlbCc6IDEgfSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUGFnaW5hdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0gKSApLFxuICAgICAgICAgICAgICAgIGV2ZW50czogeyBsaXN0OiAnY2xpY2snIH0sXG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5tYWluUGFuZWwgfSxcbiAgICAgICAgICAgICAgICBpdGVtVGVtcGxhdGU6IHRoaXMuVGVtcGxhdGVzLkRvY3VtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZG9jdW1lbnRWaWV3KCBtb2RlbCApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGlzYWxsb3dFbnRlcktleVN1Ym1pc3Npb246IHRydWUsXG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5tYWluUGFuZWwgfSxcbiAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZU9wdHM6IHsgaGVhZGluZzogbW9kZWwuZ2l0KCdsYWJlbCcpIHx8IG1vZGVsLmdpdCgnbmFtZScpIH0sXG4gICAgICAgICAgICAgICAgVmlld3M6IHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGNyZWF0ZUNvbGxlY3Rpb25CdG46ICdjbGljaycsXG4gICAgICAgIGJhY2tCdG46ICdjbGljaycsXG4gICAgICAgIHJlc291cmNlOiAnY2xpY2snLFxuXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uczogW1xuICAgICAgICAgICAgICAgIFsgJ2RlbGV0ZUNsaWNrZWQnLFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oIGNvbGxlY3Rpb24gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckN1cnJlbnRWaWV3KClcbiAgICAgICAgICAgICAgICAgICAgICAudGhlbiggKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLmNyZWF0ZVZpZXcoICdkZWxldGVyJywgJ2RlbGV0ZUNvbGxlY3Rpb24nLCBjb2xsZWN0aW9uICkgKSApXG4gICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFsgJ2ZldGNoZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93UHJvcGVyVmlldyggdHJ1ZSApXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLmhpZGVJdGVtcyggWyB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSBdICkgKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgICAgICAgICAgICAgIH0gXSxcbiAgICAgICAgICAgICAgICBbICdpdGVtQ2xpY2tlZCcsIGZ1bmN0aW9uKCBtb2RlbCApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckN1cnJlbnRWaWV3KClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oICgpID0+IFByb21pc2UucmVzb2x2ZSggdGhpcy5tb2RlbC5zZXQoICdjdXJyZW50Q29sbGVjdGlvbicsIG1vZGVsLm5hbWUgKSApIClcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICAgICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICAgICAgWyAnc3VjY2Vzc2Z1bERyb3AnLCBmdW5jdGlvbiggZGF0YSApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwRG9jdW1lbnQoIHsgZG9jdW1lbnQ6IGRhdGEuZHJvcHBlZCwgdG86IGRhdGEuZHJvcHBlZE9uLm5hbWUsIGZyb206IHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicgKSB9IClcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCB0aGlzLnRvYXN0RXJyb3IuYmluZCh0aGlzKSApXG4gICAgICAgICAgICAgICAgfSBdXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLypjcmVhdGVDb2xsZWN0aW9uOiBbXG4gICAgICAgICAgICAgICAgWyAnZGVsZXRlZCcsIGZ1bmN0aW9uKCkgeyB0aGlzLm1vZGVsLnNldCggJ2N1cnJlbnRWaWV3JywgJ2RvY3VtZW50TGlzdCcgKSB9IF0sXG4gICAgICAgICAgICAgICAgWyAncG9zdGVkJywgZnVuY3Rpb24oIGNvbGxlY3Rpb24gKSB7IHRoaXMudmlld3MuY29sbGVjdGlvbnMuYWRkKCBjb2xsZWN0aW9uICkgfSBdXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZGVsZXRlQ29sbGVjdGlvbjogW1xuICAgICAgICAgICAgICAgIFsgJ2RlbGV0ZWQnLCBmdW5jdGlvbigpIHsgdGhpcy5tb2RlbC5zZXQoJ2N1cnJlbnRWaWV3JywgJ2RvY3VtZW50TGlzdCcgKSB9IF0sXG4gICAgICAgICAgICAgICAgWyAnbW9kZWxEZWxldGVkJywgZnVuY3Rpb24oIG1vZGVsICkgeyB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLnJlbW92ZSggbW9kZWwgKSB9IF1cbiAgICAgICAgICAgIF0sKi9cbiAgICAgICAgICAgIGRlbGV0ZURvY3VtZW50OiBbXG4gICAgICAgICAgICAgICAgWyAnZGVsZXRlZCcsIGZ1bmN0aW9uKCkgeyB0aGlzLm1vZGVsLnNldCgnY3VycmVudFZpZXcnLCAnZG9jdW1lbnRMaXN0JyApIH0gXSxcbiAgICAgICAgICAgICAgICBbICdtb2RlbERlbGV0ZWQnLCBmdW5jdGlvbiggbW9kZWwgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LnJlbW92ZSggbW9kZWwgKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdzLmRvY3VtZW50TGlzdC5nZXRDb3VudCgpLnRoZW4oIGNvdW50ID0+IHRoaXMudXBkYXRlQ291bnQoY291bnQpICkuY2F0Y2godGhpcy5FcnJvcilcbiAgICAgICAgICAgICAgICB9IF1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkb2N1bWVudExpc3Q6IFtcbiAgICAgICAgICAgICAgICBbICdhZGRDbGlja2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDdXJyZW50VmlldygpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlVmlldyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZG9jdW1lbnRWaWV3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVNb2RlbCggJ2RvY3VtZW50VmlldycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgWyAnaXRlbUNsaWNrZWQnLCBmdW5jdGlvbiggZG9jdW1lbnQgKSB7IHRoaXMub25Eb2N1bWVudFNlbGVjdGVkKCBkb2N1bWVudCApIH0gXSxcbiAgICAgICAgICAgICAgICAvL1sgJ2RyYWdTdGFydCcsIGZ1bmN0aW9uKCB0eXBlICkgeyB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLnNob3dEcm9wcGFibGUoIHR5cGUgKSB9IF0sXG4gICAgICAgICAgICAgICAgLy9bICdkcm9wcGVkJywgZnVuY3Rpb24oIGRhdGEgKSB7IHRoaXMudmlld3MuY29sbGVjdGlvbnMuaGlkZURyb3BwYWJsZSgpOyB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLmNoZWNrRHJvcCggZGF0YSApIH0gXSxcbiAgICAgICAgICAgICAgICBbICdkZWxldGVDbGlja2VkJyxcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBkb2N1bWVudCApIHsgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDdXJyZW50VmlldygpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMuY3JlYXRlVmlldyggJ2RlbGV0ZXInLCAnZGVsZXRlRG9jdW1lbnQnLCBkb2N1bWVudCApICkgKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkb2N1bWVudFZpZXc6IFtcbiAgICAgICAgICAgICAgICBbICdkZWxldGVkJywgZnVuY3Rpb24oIG1vZGVsICkgeyB0aGlzLm1vZGVsLnNldCggJ2N1cnJlbnRWaWV3JywgJ2RvY3VtZW50TGlzdCcgKSB9IF0sXG4gICAgICAgICAgICAgICAgWyAncHV0JywgZnVuY3Rpb24oIG1vZGVsICkge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy52aWV3cy5kb2N1bWVudExpc3QuZmV0Y2hlZCApIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LnVwZGF0ZUl0ZW0oIHRoaXMuY3JlYXRlTW9kZWwoICdkb2N1bWVudFZpZXcnLCBtb2RlbCApIClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckN1cnJlbnRWaWV3KCkudGhlbiggKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLm1vZGVsLnNldCgnY3VycmVudFZpZXcnLCAnZG9jdW1lbnRMaXN0JykgKSApLmNhdGNoKHRoaXMuQ2F0Y2gpXG5cbiAgICAgICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICAgICAgWyAncG9zdGVkJywgZnVuY3Rpb24oIG1vZGVsICkge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy52aWV3cy5kb2N1bWVudExpc3QuZmV0Y2hlZCApIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LmFkZCggbW9kZWwsIHRydWUgKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ3VycmVudFZpZXcoKS50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMubW9kZWwuc2V0KCdjdXJyZW50VmlldycsICdkb2N1bWVudExpc3QnKSApICkuY2F0Y2godGhpcy5DYXRjaClcbiAgICAgICAgICAgICAgICB9IF1cbiAgICAgICAgICAgIF1cblxuICAgICAgICB9XG4gICAgfSxcbiAgICBcbiAgICBjbGVhckN1cnJlbnRWaWV3KCkge1xuICAgICAgICBjb25zdCBjdXJyZW50VmlldyA9IHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50VmlldycpO1xuXG4gICAgICAgIHJldHVybiAoIGN1cnJlbnRWaWV3ICE9PSAnZG9jdW1lbnRMaXN0J1xuICAgICAgICAgICAgPyB0aGlzLnZpZXdzWyBjdXJyZW50VmlldyBdLmRlbGV0ZSggeyBzaWxlbnQ6IHRydWUgfSApXG4gICAgICAgICAgICA6IHRoaXMudmlld3NbIGN1cnJlbnRWaWV3IF0uaGlkZSgpXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgY3JlYXRlRG9jdW1lbnRMaXN0KCBjb2xsZWN0aW9uTmFtZSwgZmV0Y2g9dHJ1ZSApIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmNyZWF0ZU1vZGVsKCAnZG9jdW1lbnRMaXN0JyApXG5cbiAgICAgICAgdGhpcy5jcmVhdGVWaWV3KCAnbGlzdCcsICdkb2N1bWVudExpc3QnLCBtb2RlbCApXG4gICAgICAgIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LmdldENvdW50KCkudGhlbiggY291bnQgPT4gdGhpcy51cGRhdGVDb3VudChjb3VudCkgKS5jYXRjaCh0aGlzLkVycm9yKVxuICAgICAgICByZXR1cm4gdGhpcy52aWV3cy5jb2xsZWN0aW9ucy51bmhpZGVJdGVtcygpLmhpZGVJdGVtcyggWyB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSBdIClcbiAgICB9LFxuXG4gICAgY3JlYXRlTW9kZWwoIHR5cGUsIGRhdGE9e30gKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLmNvbGxlY3Rpb24uc3RvcmUubmFtZVsgdGhpcy5tb2RlbC5naXQoJ2N1cnJlbnRDb2xsZWN0aW9uJykgXVxuXG4gICAgICAgIGlmKCB0eXBlID09PSAnZG9jdW1lbnRMaXN0JyApIHJldHVybiBjb2xsZWN0aW9uLmNsaWVudERhdGFcblxuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSA9PT0gJ1BhZ2VzJ1xuICAgICAgICAgICAgICAgID8gY29sbGVjdGlvbi5kb2N1bWVudHMuZmluZCggZG9jID0+IGRvYy5uYW1lID09PSBkYXRhLmxhYmVsLnJlcGxhY2UoICcgJywgJycgKSApLnNjaGVtYVxuICAgICAgICAgICAgICAgIDogY29sbGVjdGlvbi5zY2hlbWFcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oIHsgcmVzb3VyY2U6IHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicpIH0sIHNjaGVtYSApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgY3JlYXRlVmlldyggdHlwZSwgbmFtZSwgbW9kZWwgKSB7XG4gICAgICAgIHRoaXMudmlld3NbIG5hbWUgXSA9IHRoaXMuZmFjdG9yeS5jcmVhdGUoIHR5cGUsIFJlZmxlY3QuYXBwbHkoIHRoaXMuVmlld3NbIG5hbWUgXSwgdGhpcywgWyBtb2RlbCBdICkgKVxuXG4gICAgICAgIGlmKCB0aGlzLmV2ZW50cy52aWV3c1sgbmFtZSBdICkgdGhpcy5ldmVudHMudmlld3NbIG5hbWUgXS5mb3JFYWNoKCBhcnIgPT4gdGhpcy52aWV3c1sgbmFtZSBdLm9uKCBhcnJbMF0sIGV2ZW50RGF0YSA9PiBSZWZsZWN0LmFwcGx5KCBhcnJbMV0sIHRoaXMsIFsgZXZlbnREYXRhIF0gKSApIClcbiAgICAgICAgdGhpcy5tb2RlbC5zZXQoICdjdXJyZW50VmlldycsIG5hbWUgKVxuICAgIH0sXG5cbiAgICBnZXREb2N1bWVudCggY29sbGVjdGlvbiwgZG9jdW1lbnROYW1lICkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKCB7fSwgeyByZXNvdXJjZTogdGhpcy5wYXRoWzBdIH0gKS5nZXQoIHsgcXVlcnk6IHsgbmFtZTogdGhpcy5wYXRoWzFdIH0gfSApXG4gICAgfSxcblxuICAgIG9uQmFja0J0bkNsaWNrKCkgeyB0aGlzLmVtaXQoICduYXZpZ2F0ZScsICcvYWRtaW4tcGx1cycgKSB9LFxuXG4gICAgb25DcmVhdGVDb2xsZWN0aW9uQnRuQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuY2xlYXJDdXJyZW50VmlldygpXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMuY3JlYXRlVmlldyggJ2Zvcm0nLCAnY3JlYXRlQ29sbGVjdGlvbicgKSApIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgb25Eb2N1bWVudFNlbGVjdGVkKCBkb2N1bWVudCApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xlYXJDdXJyZW50VmlldygpXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMuc2hvd0RvY3VtZW50VmlldyggZG9jdW1lbnQgKSApIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgb25OYXZpZ2F0aW9uKCBwYXRoICkge1xuXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG5cbiAgICAgICAgKCB0aGlzLmlzSGlkZGVuKCkgPyB0aGlzLnNob3coKSA6IFByb21pc2UucmVzb2x2ZSgpIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuY2xlYXJDdXJyZW50VmlldygpIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuc2hvd1Byb3BlclZpZXcoIGZhbHNlICkgKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKSBcbiAgICB9LFxuXG4gICAgb25SZXNvdXJjZUNsaWNrKCkge1xuICAgICAgICBpZiggdGhpcy5tb2RlbC5naXQoJ2N1cnJlbnRWaWV3JykgPT09ICdkb2N1bWVudExpc3QnICkgcmV0dXJuXG5cbiAgICAgICAgdGhpcy5jbGVhckN1cnJlbnRWaWV3KClcbiAgICAgICAgLnRoZW4oICgpID0+IFByb21pc2UucmVzb2x2ZSggdGhpcy5tb2RlbC5zZXQoJ2N1cnJlbnRWaWV3JywgJ2RvY3VtZW50TGlzdCcpICkgKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICBpZiggdGhpcy5wYXRoLmxlbmd0aCA+IDAgKSB0aGlzLm1vZGVsLnNldCggJ2N1cnJlbnRDb2xsZWN0aW9uJywgdGhpcy5wYXRoWzBdIClcblxuICAgICAgICB0aGlzLm1vZGVsLm9uKCAnY3VycmVudENvbGxlY3Rpb25DaGFuZ2VkJywgKCkgPT5cbiAgICAgICAgICAgIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LmRlbGV0ZSggeyBzaWxlbnQ6IHRydWUgfSApXG4gICAgICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5jcmVhdGVEb2N1bWVudExpc3QoIHRoaXMubW9kZWwuZ2l0KCAnY3VycmVudENvbGxlY3Rpb24nKSApIClcbiAgICAgICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgICAgIClcblxuICAgICAgICB0aGlzLm1vZGVsLm9uKCAnY3VycmVudFZpZXdDaGFuZ2VkJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFZpZXcgPSB0aGlzLm1vZGVsLmdpdCgnY3VycmVudFZpZXcnKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29sbGVjdGlvbiA9IHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicpLFxuICAgICAgICAgICAgICAgIHBhdGggPSBjdXJyZW50VmlldyA9PT0gJ2RvY3VtZW50VmlldydcbiAgICAgICAgICAgICAgICAgICAgPyBgLyR7Y3VycmVudENvbGxlY3Rpb259LyR7dGhpcy52aWV3cy5kb2N1bWVudFZpZXcubW9kZWwuZ2l0KCduYW1lJyl9YFxuICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnRWaWV3ID09PSAnZG9jdW1lbnRMaXN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBgLyR7Y3VycmVudENvbGxlY3Rpb259YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBgYFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmVtaXQoICduYXZpZ2F0ZScsIGAvYWRtaW4tcGx1cy9jb2xsZWN0aW9uLW1hbmFnZXIke3BhdGh9YCwgeyBzaWxlbnQ6IHRydWUgfSApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coICdjdXJyZW50Vmlld0NoYW5nZWQnIClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCBjdXJyZW50VmlldyApXG4gICAgICAgICAgICBjb25zb2xlLmxvZyggdGhpcy52aWV3cy5kb2N1bWVudExpc3QuY29sbGVjdGlvbi5kYXRhIClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCBjdXJyZW50VmlldyA9PT0gJ2RvY3VtZW50TGlzdCcgJiYgdGhpcy52aWV3cy5kb2N1bWVudExpc3QuY29sbGVjdGlvbi5kYXRhLmxlbmd0aCA9PT0gMCApO1xuICAgICAgICAgICAgKCBjdXJyZW50VmlldyA9PT0gJ2RvY3VtZW50TGlzdCcgJiYgdGhpcy52aWV3cy5kb2N1bWVudExpc3QuY29sbGVjdGlvbi5kYXRhLmxlbmd0aCA9PT0gMCA/IHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LmZldGNoKCkgOiBQcm9taXNlLnJlc29sdmUoKSApXG4gICAgICAgICAgICAudGhlbiggKCkgPT4gdGhpcy52aWV3c1sgY3VycmVudFZpZXcgXS5zaG93KCkgKVxuICAgICAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgc2hvd0RvY3VtZW50VmlldyggZG9jdW1lbnQgKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlVmlldyhcbiAgICAgICAgICAgICdmb3JtJyxcbiAgICAgICAgICAgICdkb2N1bWVudFZpZXcnLFxuICAgICAgICAgICAgdGhpcy5jcmVhdGVNb2RlbCggJ2RvY3VtZW50VmlldycsIGRvY3VtZW50IClcbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICBzaG93UHJvcGVyVmlldygpIHtcbiAgICAgICAgY29uc29sZS5sb2coICdzaG93UHJvcGVyVmlldycgKVxuICAgICAgICBjb25zb2xlLmxvZyggdGhpcy5wYXRoIClcbiAgICAgICAgY29uc29sZS5sb2coIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0IClcbiAgICAgICAgY29uc29sZS5sb2coIHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicpIClcbiAgICAgICAgcmV0dXJuICh0aGlzLnZpZXdzLmRvY3VtZW50TGlzdCA/IFByb21pc2UucmVzb2x2ZSgpIDogdGhpcy5jcmVhdGVEb2N1bWVudExpc3QoIHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicpLCB0aGlzLnBhdGgubGVuZ3RoID09PSAyID8gZmFsc2UgOiB0cnVlICkgKVxuICAgICAgICAudGhlbiggKCkgPT5cbiAgICAgICAgICAgIHRoaXMucGF0aC5sZW5ndGggPT09IDJcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0RG9jdW1lbnQoKVxuICAgICAgICAgICAgICAgICAgLnRoZW4oIGRvY3VtZW50ID0+XG4gICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KCBkb2N1bWVudCApXG4gICAgICAgICAgICAgICAgICAgICAgPyBQcm9taXNlLnJlc29sdmUoIHRoaXMubW9kZWwuc2V0KCAnY3VycmVudFZpZXcnLCAnZG9jdW1lbnRMaXN0JyApIClcbiAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xlYXJDdXJyZW50VmlldygpLnRoZW4oICgpID0+IFByb21pc2UucmVzb2x2ZSggdGhpcy5zaG93RG9jdW1lbnRWaWV3KCBkb2N1bWVudCwgZmFsc2UgKSApICkuY2F0Y2goIHRoaXMuQ2F0Y2ggKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoIHRoaXMubW9kZWwuc2V0KCAnY3VycmVudFZpZXcnLCAnZG9jdW1lbnRMaXN0JyApIClcbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICBzd2FwRG9jdW1lbnQoIHsgZG9jdW1lbnQsIHRvLCBmcm9tIH0gKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhociggeyBtZXRob2Q6ICdQQVRDSCcsIHJlc291cmNlOiAnRG9jdW1lbnQnLCBpZDogZG9jdW1lbnQuX2lkLCBkYXRhOiBKU09OLnN0cmluZ2lmeSggeyB0bywgZnJvbSB9ICkgfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LnJlbW92ZSggZG9jdW1lbnQgKSApIClcbiAgICB9LFxuXG4gICAgdG9hc3RFcnJvcihlKSB7XG4gICAgICAgIHRoaXMuRXJyb3IoZSk7XG4gICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdlcnJvcicsIGBTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2FpbiBvciBjb250YWN0IENocmlzLmAgKVxuICAgIH0sXG5cbiAgICB1cGRhdGVDb3VudCggY291bnQgKSB7XG4gICAgICAgIHRoaXMuZWxzLnJlc291cmNlLnRleHRDb250ZW50ID0gYCR7dGhpcy5tb2RlbC5naXQoJ2N1cnJlbnRDb2xsZWN0aW9uJyl9ICgke2NvdW50fSlgXG4gICAgfVxuXG59IClcbiIsImNvbnN0IEN1c3RvbUNvbnRlbnQgPSByZXF1aXJlKCcuL3V0aWwvQ3VzdG9tQ29udGVudCcpXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIEN1c3RvbUNvbnRlbnQsIHtcblxuICAgIHRhYmxlczogWyB7IG5hbWU6ICdjb250YWN0aW5mbycsIGVsOiAnY29udGFjdEluZm8nLCB0ZW1wbGF0ZTogJ2NvbnRhY3QnfSBdLFxuXG4gICAgdGVtcGxhdGVzOiB7XG4gICAgICAgIGNvbnRhY3Q6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL0xvY2F0aW9uJylcbiAgICB9XG5cbn0gKSIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHJlcXVpcmUoJy4vdXRpbC9DdXN0b21Db250ZW50JyksIHtcblxuICAgIEN1cnJlbnRTaGFyZTogcmVxdWlyZSgnLi4vbW9kZWxzL0N1cnJlbnRTaGFyZScpLFxuICAgIFNoYXJlczogT2JqZWN0LmNyZWF0ZSggcmVxdWlyZSgnLi4vbW9kZWxzL19fcHJvdG9fXycpLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnU2hhcmUnIH0gfSApLFxuICAgIFNoYXJlT3B0aW9uczogT2JqZWN0LmNyZWF0ZSggcmVxdWlyZSgnLi4vbW9kZWxzL19fcHJvdG9fXycpLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnc2hhcmVvcHRpb24nIH0gfSApLFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGxpbms6ICdjbGljaycsXG4gICAgICAgIHNpZ251cEJ0bjogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBoYXNoVG9FbGVtZW50OiB7XG4gICAgICAgICdob3ctZG8taS1rbm93JzogJ2hvd0RvSUtub3cnLFxuICAgIH0sXG5cbiAgICBpbnNlcnRBZGRPbkRlc2NyaXB0aW9ucygpIHtcbiAgICAgICAgdGhpcy5TaGFyZU9wdGlvbnMuZGF0YS5maWx0ZXIoIG9wdCA9PiBvcHQubmFtZSAhPT0gJ1NoYXJlIHNpemUnICkuZm9yRWFjaCggc2hhcmVPcHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWRkT25JbmZvID0gdGhpcy5DdXJyZW50U2hhcmUuZGF0YS5wcm9kdWNlT3B0aW9ucy5maW5kKCBwcm9kdWNlT3B0ID0+IHByb2R1Y2VPcHQuc2hhcmVvcHRpb25pZCA9PT0gc2hhcmVPcHQuaWQgJiYgcHJvZHVjZU9wdC5uYW1lID09PSAnb25lJyApXG5cbiAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5jc2FJdGVtKCBPYmplY3QuYXNzaWduKCBhZGRPbkluZm8sIHsgaGVhZGluZzogc2hhcmVPcHQubmFtZSB9ICkgKSxcbiAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLmFkZE9uSXRlbXMgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBpbnNlcnREZWxpdmVyeU1hdHJpeCgpIHtcbiAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXMuZGVsaXZlcnlNYXRyaXgoIHtcbiAgICAgICAgICAgICAgICBkZWxpdmVyeU9wdGlvbnM6IHRoaXMuQ3VycmVudFNoYXJlLmRhdGEuZGVsaXZlcnlPcHRpb25zLFxuICAgICAgICAgICAgICAgIHNpemVPcHRpb25zOiB0aGlzLkN1cnJlbnRTaGFyZS5nZXRTaXplT3B0aW9ucygpXG4gICAgICAgICAgICB9ICksXG4gICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLmRlbGl2ZXJ5TWF0cml4IH1cbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGluc2VydFNoYXJlRGVzY3JpcHRpb24oIHNoYXJlICkge1xuICAgICAgICBjb25zdCBkZWxpdmVyeU9wdHMgPSB0aGlzLkN1cnJlbnRTaGFyZS5kYXRhLmRlbGl2ZXJ5T3B0aW9ucyxcbiAgICAgICAgICAgIHNoYXJlUHJpY2UgPSBwYXJzZUZsb2F0KCB0aGlzLkN1cnJlbnRTaGFyZS5kYXRhLnByb2R1Y2VPcHRpb25zLmZpbmQoIG9wdCA9PiBvcHQucHJvbXB0ID0gJ1NoYXJlIHNpemUnICYmIHNoYXJlLm5hbWUgPT09IG9wdC5uYW1lICkucHJpY2UucmVwbGFjZSgnJCcsJycpICksXG4gICAgICAgICAgICBsb3dQcmljZSA9IHNoYXJlUHJpY2UgKyBwYXJzZUZsb2F0KCB0aGlzLkN1cnJlbnRTaGFyZS5kYXRhLmRlbGl2ZXJ5T3B0aW9uc1swXS5wcmljZS5yZXBsYWNlKCckJywnJykgKSxcbiAgICAgICAgICAgIGhpZ2hQcmljZSA9IHNoYXJlUHJpY2UgKyBwYXJzZUZsb2F0KCB0aGlzLkN1cnJlbnRTaGFyZS5kYXRhLmRlbGl2ZXJ5T3B0aW9uc1sgdGhpcy5DdXJyZW50U2hhcmUuZGF0YS5kZWxpdmVyeU9wdGlvbnMubGVuZ3RoIC0gMSBdLnByaWNlLnJlcGxhY2UoJyQnLCcnKSApLFxuICAgICAgICAgICAgcHJpY2VSYW5nZSA9IGAkJHtsb3dQcmljZS50b0ZpeGVkKDIpfSAtICQke2hpZ2hQcmljZS50b0ZpeGVkKDIpfWBcblxuICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5jc2FJdGVtKCBPYmplY3QuYXNzaWduKCBzaGFyZS5zaGFyZURlc2NyaXB0aW9uLCB7IHByaWNlOiBwcmljZVJhbmdlIH0gKSApLFxuICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5zaGFyZURlc2NyaXB0aW9ucyB9XG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBpbnNlcnRTaGFyZUV4YW1wbGUoIHNoYXJlICkge1xuICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5zaGFyZUV4YW1wbGUoIHNoYXJlLnNoYXJlRXhhbXBsZSApLFxuICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5zaGFyZUV4YW1wbGVzIH1cbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIG9uTGlua0NsaWNrKCBlICkge1xuICAgICAgICBjb25zb2xlLmxvZyggJ29uTGlua0NsaWNrJyApXG4gICAgICAgIHRoaXMuZW1pdCggJ25hdmlnYXRlJywgZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSApXG4gICAgfSxcblxuICAgIG9uU2lnbnVwQnRuQ2xpY2soKSB7IHRoaXMuZW1pdCggJ25hdmlnYXRlJywgJ3NpZ24tdXAnICkgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHJlcXVpcmUoJy4vdXRpbC9DdXN0b21Db250ZW50JykucG9zdFJlbmRlci5jYWxsKHRoaXMpXG5cbiAgICAgICAgaWYoIHdpbmRvdy5sb2NhdGlvbi5oYXNoICkge1xuICAgICAgICAgICAgdGhpcy5lbHNbIHRoaXMuaGFzaFRvRWxlbWVudFsgd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSkgXSBdLnNjcm9sbEludG9WaWV3KCB7IGJlaGF2aW9yOiAnc21vb3RoJyB9IClcbiAgICAgICAgfVxuXG4gICAgICAgIFByb21pc2UuYWxsKCBbIHRoaXMuQ3VycmVudFNoYXJlLmdldCgpLCB0aGlzLlNoYXJlcy5nZXQoKSwgdGhpcy5TaGFyZU9wdGlvbnMuZ2V0KCkgXSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmluc2VydERlbGl2ZXJ5TWF0cml4KClcblxuICAgICAgICAgICAgdGhpcy5TaGFyZXMuZGF0YS5mb3JFYWNoKCBzaGFyZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRTaGFyZUV4YW1wbGUoIHNoYXJlIClcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydFNoYXJlRGVzY3JpcHRpb24oIHNoYXJlIClcbiAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICB0aGlzLmluc2VydEFkZE9uRGVzY3JpcHRpb25zKClcbiAgICAgICAgfSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgdGVtcGxhdGVzOiB7XG4gICAgICAgIGNzYUl0ZW06IHJlcXVpcmUoJy4vdGVtcGxhdGVzL0NzYUl0ZW0nKSxcbiAgICAgICAgZGVsaXZlcnlNYXRyaXg6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL2RlbGl2ZXJ5TWF0cml4JyksXG4gICAgICAgIHNoYXJlRXhhbXBsZTogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvU2hhcmVFeGFtcGxlJylcbiAgICB9XG5cbn0gKSIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIE1lbWJlckZvb2RPbWlzc2lvbjogcmVxdWlyZSgnLi4vbW9kZWxzL01lbWJlckZvb2RPbWlzc2lvbicpLFxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuZmllbGRzLmZvckVhY2goIGZpZWxkID0+IHtcbiAgICAgICAgICAgIGlmKCBmaWVsZC50eXBlICE9PSAnc2VsZWN0JyApIHRoaXMuZWxzWyBmaWVsZC5uYW1lIF0udGV4dENvbnRlbnQgPSAnJ1xuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLmVscy5pbmZvVGFibGUucXVlcnlTZWxlY3RvckFsbCgnLmVkaXRlZCcpLmZvckVhY2goIGVsID0+IGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2VkaXRlZCcpIClcblxuICAgICAgICB0aGlzLkZvb2RPbWlzc2lvbi5jbGVhcigpXG5cbiAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LmFkZCggJ2ZkLWhpZGRlbicgKVxuICAgICAgICB0aGlzLmVscy5lZGl0U3VtbWFyeS5jbGFzc0xpc3QuYWRkKCAnZmQtaGlkZGVuJyApXG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuICAgICAgICBvbnBheW1lbnRwbGFuOiAnY2hhbmdlJyxcbiAgICAgICAgcmVzZXRCdG46ICdjbGljaycsXG4gICAgICAgIHNhdmVCdG46ICdjbGljaydcbiAgICB9LFxuXG4gICAgZmllbGRzOiBbXG4gICAgICAgIHsgdGFibGU6ICdwZXJzb24nLCB0eXBlOiAndGV4dCcsIG5hbWU6ICduYW1lJywgbGFiZWw6ICdOYW1lJyB9LFxuICAgICAgICB7IHRhYmxlOiAncGVyc29uJywgdHlwZTogJ3RleHQnLCBuYW1lOiAnZW1haWwnLCBsYWJlbDogJ0VtYWlsJyB9LFxuICAgICAgICB7IHRhYmxlOiAncGVyc29uJywgdHlwZTogJ3RleHQnLCBuYW1lOiAnc2Vjb25kYXJ5RW1haWwnLCBsYWJlbDogJ1NlY29uZGFyeSBFbWFpbCcgfSxcbiAgICAgICAgeyB0YWJsZTogJ21lbWJlcicsIHR5cGU6ICd0ZXh0JywgbmFtZTogJ3Bob25lbnVtYmVyJywgbGFiZWw6ICdQaG9uZScgfSxcbiAgICAgICAgeyB0YWJsZTogJ21lbWJlcicsIHR5cGU6ICd0ZXh0JywgbmFtZTogJ3ppcGNvZGUnLCBsYWJlbDogJ1ppcCBDb2RlJyB9LFxuICAgICAgICB7IHRhYmxlOiAnbWVtYmVyJywgdHlwZTogJ3RleHQnLCBuYW1lOiAnYWRkcmVzcycsIGxhYmVsOiAnQWRkcmVzcycgfSxcbiAgICAgICAgeyB0YWJsZTogJ21lbWJlckZvb2RPbWlzc2lvbicsIHR5cGU6ICdzZWxlY3QnLCBuYW1lOiAnbmV2ZXJSZWNlaXZlJywgbGFiZWw6ICdWZWdldGFibGUgdG8gTmV2ZXIgUmVjZWl2ZScgfSxcbiAgICAgICAgeyB0YWJsZTogJ21lbWJlcicsIHR5cGU6ICdzZWxlY3QnLCBuYW1lOiAnb25wYXltZW50cGxhbicsIGxhYmVsOiAnT24gUGF5bWVudCBQbGFuJyB9XG4gICAgXSxcblxuICAgIGdldFRlbXBsYXRlT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHsgZmllbGRzOiB0aGlzLmZpZWxkcyB9XG4gICAgfSxcblxuICAgIGhhbmRsZUJsdXIoIGUgKSB7XG4gICAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQsXG4gICAgICAgICAgICAgIGZpZWxkID0gdGhpcy5maWVsZHMuZmluZCggZmllbGQgPT4gZmllbGQubmFtZSA9PT0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSApLFxuICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gZWwudGV4dENvbnRlbnQudHJpbSgpLFxuICAgICAgICAgICAgICBtb2RlbFZhbHVlID0gdGhpcy5tb2RlbFsgZmllbGQudGFibGUgXS5kYXRhWyBmaWVsZC5uYW1lIF0gfHwgJydcblxuICAgICAgICBpZiggZmllbGRWYWx1ZSAhPT0gbW9kZWxWYWx1ZSApIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2VkaXRlZCcpXG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGQubmFtZSBdID0gZmllbGRWYWx1ZSB8fCBudWxsXG4gICAgICAgICAgICB0aGlzLnNob3dFZGl0U3VtbWFyeSgpXG4gICAgICAgICAgICB0aGlzLmVtaXQoICdlZGl0ZWQnIClcbiAgICAgICAgfSBlbHNlIGlmKCB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGQubmFtZSBdICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0ZWQnKVxuICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHNbIGZpZWxkLm5hbWUgXSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgdGhpcy5zaG93RWRpdFN1bW1hcnkoKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGhhc0VkaXRzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoIHRoaXMuZWRpdGVkRmllbGRzICkuZmlsdGVyKCBrZXkgPT4gdGhpcy5lZGl0ZWRGaWVsZHNbIGtleSBdICE9PSB1bmRlZmluZWQgKS5sZW5ndGggPiAwXG4gICAgfSxcblxuICAgIGhhbmRsZUVkaXQoIGUgKSB7IHRoaXMuZWxzLnJlc2V0QnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGRlbicpIH0sXG5cbiAgICBoYW5kbGVPbWlzc2lvbkNoYW5nZSggZSwgbSApIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gbS52YWwoKSxcbiAgICAgICAgICAgIG5hbWUgPSB2YWx1ZXMubGVuZ3RoID8gbS52YWwoKVswXS5uYW1lIDogJycsXG4gICAgICAgICAgICBvcmlnaW5hbE5hbWUgPSB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5kYXRhLmxlbmd0aCA/IHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmRhdGFbMF0ubmFtZSA6ICcnXG4gICAgICAgXG4gICAgICAgIGlmKCBvcmlnaW5hbE5hbWUgIT09IG5hbWUgKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkcy5uZXZlclJlY2VpdmUgPSBuYW1lXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2VkaXRlZCcpXG4gICAgICAgICAgICB0aGlzLnNob3dFZGl0U3VtbWFyeSgpXG4gICAgICAgIH0gZWxzZSBpZiggdGhpcy5lZGl0ZWRGaWVsZHMubmV2ZXJSZWNlaXZlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkcy5uZXZlclJlY2VpdmUgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIHRoaXMuc2hvd0VkaXRTdW1tYXJ5KClcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbk9ucGF5bWVudHBsYW5DaGFuZ2UoIGUgKSB7XG4gICAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQsXG4gICAgICAgICAgICBmaWVsZFZhbHVlID0gQm9vbGVhbiggZWwudmFsdWUgPT09IFwidHJ1ZVwiICksXG4gICAgICAgICAgICBtb2RlbFZhbHVlID0gdGhpcy5tb2RlbC5tZW1iZXIuZGF0YS5vbnBheW1lbnRwbGFuXG5cbiAgICAgICAgaWYoIG1vZGVsVmFsdWUgIT09IGZpZWxkVmFsdWUgKSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdlZGl0ZWQnKVxuICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHNbICdvbnBheW1lbnRwbGFuJyBdID0gQm9vbGVhbiggZWwudmFsdWUgPT09IFwidHJ1ZVwiIClcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZWRpdGVkJylcbiAgICAgICAgICAgIHRoaXMuc2hvd0VkaXRTdW1tYXJ5KClcbiAgICAgICAgfSBlbHNlIGlmKCB0aGlzLmVkaXRlZEZpZWxkcy5vbnBheW1lbnRwbGFuICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0ZWQnKVxuICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHMub25wYXltZW50cGxhbiA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgdGhpcy5zaG93RWRpdFN1bW1hcnkoKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uUmVzZXRCdG5DbGljaygpIHsgdGhpcy5yZXNldCggdGhpcy5tb2RlbCApIH0sXG5cbiAgICBvblNhdmVCdG5DbGljaygpIHtcbiAgICAgICAgY29uc3QgcmVzb3VyY2VzVG9VcGRhdGUgPSBbIF1cblxuICAgICAgICB0aGlzLm1lbWJlckRhdGEgPSB7IH1cbiAgICAgICAgdGhpcy5wZXJzb25EYXRhID0geyB9XG4gICAgICAgIHRoaXMubWVtYmVyRm9vZE9taXNzaW9uRGF0YSA9IHsgfVxuXG4gICAgICAgIHRoaXMuZmllbGRzLmZvckVhY2goIGZpZWxkID0+IHtcbiAgICAgICAgICAgIGlmKCB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGQubmFtZSBdICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICAgICAgdGhpc1sgYCR7ZmllbGQudGFibGV9RGF0YWAgXVsgZmllbGQubmFtZSBdID0gdGhpcy5lZGl0ZWRGaWVsZHNbIGZpZWxkLm5hbWUgXVxuICAgICAgICAgICAgICAgIGlmKCByZXNvdXJjZXNUb1VwZGF0ZS5pbmRleE9mKCBmaWVsZC50YWJsZSApID09PSAtMSApIHJlc291cmNlc1RvVXBkYXRlLnB1c2goIGZpZWxkLnRhYmxlIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKCByZXNvdXJjZXNUb1VwZGF0ZS5tYXAoIHJlc291cmNlID0+IHRoaXNbIGB1cGRhdGUke3Jlc291cmNlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcmVzb3VyY2Uuc2xpY2UoMSl9YCBdKCkgKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICAgICAgdGhpcy5lbHMuZWRpdFN1bW1hcnkuY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcblxuICAgICAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ3N1Y2Nlc3MnLCAnQ3VzdG9tZXIgSW5mbyBVcGRhdGVkIScgKVxuICAgICAgICAgICAgdGhpcy51cGRhdGUoIHRoaXMubW9kZWwgKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgcG9wdWxhdGVUYWJsZSgpIHtcbiAgICAgICAgdGhpcy5maWVsZHMuZm9yRWFjaCggZmllbGQgPT4ge1xuICAgICAgICAgICAgaWYoIGZpZWxkLnR5cGUgIT09ICdzZWxlY3QnICkgdGhpcy5lbHNbIGZpZWxkLm5hbWUgXS50ZXh0Q29udGVudCA9IHRoaXMubW9kZWxbIGZpZWxkLnRhYmxlIF0uZGF0YVsgZmllbGQubmFtZSBdXG4gICAgICAgIH0gKVxuXG4gICAgICAgIGlmKCB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5kYXRhLmxlbmd0aCApIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdHVtID0gdGhpcy5NZW1iZXJGb29kT21pc3Npb24uZGF0YVswXSxcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuRm9vZE9taXNzaW9uLkZvb2RzLmRhdGEuZmluZEluZGV4KCBmb29kID0+XG4gICAgICAgICAgICAgICAgICAgICggZm9vZC5wcm9kdWNlaWQgPT0gZGF0dW0ucHJvZHVjZWlkICYmIGZvb2QucHJvZHVjZWlkICE9PSBudWxsICkgfHxcbiAgICAgICAgICAgICAgICAgICAgKCBmb29kLnByb2R1Y2VmYW1pbHlpZCA9PSBkYXR1bS5wcm9kdWNlZmFtaWx5aWQgJiYgZGF0dW0ucHJvZHVjZWlkID09PSBudWxsICkgKVxuXG4gICAgICAgICAgICBpZiggaW5kZXggIT09IC0xICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvb2REYXR1bSA9IHRoaXMuRm9vZE9taXNzaW9uLkZvb2RzLmRhdGFbIGluZGV4IF1cbiAgICAgICAgICAgICAgICBkYXR1bS5uYW1lID0gZm9vZERhdHVtLm5hbWVcbiAgICAgICAgICAgICAgICB0aGlzLkZvb2RPbWlzc2lvbi5tcy5zZXRTZWxlY3Rpb24oIFsgT2JqZWN0LmFzc2lnbigge30sIGZvb2REYXR1bSwgeyBpZDogaW5kZXggfSApIF0gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbHMub25wYXltZW50cGxhbi5zZWxlY3RlZEluZGV4ID0gdGhpcy5tb2RlbC5tZW1iZXIuZGF0YS5vbnBheW1lbnRwbGFuID8gMCA6IDFcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcblxuICAgICAgICB0aGlzLkZvb2RPbWlzc2lvbiA9IHRoaXMuZmFjdG9yeS5jcmVhdGUoICdmb29kT21pc3Npb24nLCB7IGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMubmV2ZXJSZWNlaXZlLCBtZXRob2Q6ICdhZnRlcicgfSB9IClcblxuICAgICAgICB0aGlzLmVscy5uZXZlclJlY2VpdmUucmVtb3ZlKClcblxuICAgICAgICB0aGlzLkZvb2RPbWlzc2lvbi5pbml0aWFsaXplRm9vZE9taXNzaW9uKClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuRm9vZE9taXNzaW9uLnJlbW92ZUhlbHBlclRleHQoKVxuICAgICAgICAgICAgdGhpcy5Gb29kT21pc3Npb24udW5zdHlsZSgpXG5cbiAgICAgICAgICAgIHRoaXMuRm9vZE9taXNzaW9uLm9uKCAnc2VsZWN0aW9uQ2hhbmdlJywgKCBlLCBtICkgPT4gdGhpcy5oYW5kbGVPbWlzc2lvbkNoYW5nZSggZSwgbSApIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5lbHMuaW5mb1RhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ2Rpdltjb250ZW50ZWRpdGFibGU9dHJ1ZV0nKS5mb3JFYWNoKCBlbCA9PiB7XG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCAnYmx1cicsIGUgPT4gdGhpcy5oYW5kbGVCbHVyKGUpIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5vbiggJ2VkaXRlZCcsIGUgPT4gdGhpcy5oYW5kbGVFZGl0KCBlICkgKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlc2V0KCBjdXN0b21lciApIHtcbiAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICAgICAgdGhpcy5lbHMuZWRpdFN1bW1hcnkuY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICAgICAgdGhpcy51cGRhdGUoIGN1c3RvbWVyIClcbiAgICB9LFxuXG4gICAgc2hvd0VkaXRTdW1tYXJ5KCkge1xuICAgICAgICBjb25zdCBoYXNFZGl0cyA9IHRoaXMuaGFzRWRpdHMoKVxuXG4gICAgICAgIHRoaXMuZWxzLmNoYW5nZXMuaW5uZXJIVE1MID0gJydcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZmllbGRzLmZvckVhY2goIGZpZWxkID0+IHtcbiAgICAgICAgICAgIGlmKCB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGQubmFtZSBdICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9sZFZhbHVlID0gKCBmaWVsZC5uYW1lID09PSAnbmV2ZXJSZWNlaXZlJyApXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5NZW1iZXJGb29kT21pc3Npb24uZGF0YS5sZW5ndGggPyB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5kYXRhWzBdLm5hbWUgOiAnJ1xuICAgICAgICAgICAgICAgICAgICA6IHRoaXMubW9kZWxbIGZpZWxkLnRhYmxlIF0uZGF0YVsgZmllbGQubmFtZSBdXG4gICAgICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0gdGhpcy5lZGl0ZWRGaWVsZHNbIGZpZWxkLm5hbWUgXVxuXG4gICAgICAgICAgICAgICAgaWYoICEgb2xkVmFsdWUgJiYgZmllbGQubmFtZSAhPT0gJ29ucGF5bWVudHBsYW4nICkgb2xkVmFsdWUgPSAnRU1QVFknXG4gICAgICAgICAgICAgICAgaWYoICEgbmV3VmFsdWUgJiYgZmllbGQubmFtZSAhPT0gJ29ucGF5bWVudHBsYW4nICkgbmV3VmFsdWUgPSAnRU1QVFknXG5cbiAgICAgICAgICAgICAgICBpZiggZmllbGQubmFtZSA9PT0gJ29ucGF5bWVudHBsYW4nICkge1xuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IG9sZFZhbHVlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIG9sZFZhbHVlID09PSAnRU1QVFknICYmIG5ld1ZhbHVlID09PSAnRU1QVFknICkgcmV0dXJuXG5cbiAgICAgICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5jaGFuZ2VzIH0sIHRlbXBsYXRlOiB0aGlzLlRlbXBsYXRlcy5maWVsZEVkaXQoIHsgbGFiZWw6IGZpZWxkLmxhYmVsLCBvbGRWYWx1ZSwgbmV3VmFsdWUgfSApIH0gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QudG9nZ2xlKCAnZmQtaGlkZGVuJywgIWhhc0VkaXRzIClcbiAgICAgICAgdGhpcy5lbHMuZWRpdFN1bW1hcnkuY2xhc3NMaXN0LnRvZ2dsZSggJ2ZkLWhpZGRlbicsICFoYXNFZGl0cyApXG4gICAgfSxcblxuICAgIFRlbXBsYXRlczoge1xuICAgICAgICBmaWVsZEVkaXQ6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL0ZpZWxkRWRpdCcpXG4gICAgfSxcbiAgICBcbiAgICB1cGRhdGUoIGN1c3RvbWVyICkge1xuICAgICAgICB0aGlzLmNsZWFyKClcblxuICAgICAgICB0aGlzLm1vZGVsID0gY3VzdG9tZXJcbiAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHMgPSB7IH1cblxuICAgICAgICByZXR1cm4gdGhpcy5NZW1iZXJGb29kT21pc3Npb24uZ2V0KCB7IHF1ZXJ5OiB7IG1lbWJlcmlkOiBjdXN0b21lci5tZW1iZXIuZGF0YS5pZCB9IH0gKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5wb3B1bGF0ZVRhYmxlKCkgKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5zaG93KCkgKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgIH0sXG5cbiAgICB1cGRhdGVNZW1iZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhociggeyBtZXRob2Q6ICdQQVRDSCcsIGlkOiB0aGlzLm1vZGVsLm1lbWJlci5kYXRhLmlkLCByZXNvdXJjZTogJ21lbWJlcicsIGRhdGE6IEpTT04uc3RyaW5naWZ5KCB0aGlzLm1lbWJlckRhdGEgKSB9IClcbiAgICAgICAgLnRoZW4oICgpID0+XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMubWVtYmVyRGF0YSApLmZvckVhY2goIGZpZWxkID0+IHRoaXMubW9kZWwubWVtYmVyLmRhdGFbIGZpZWxkIF0gPSB0aGlzLm1lbWJlckRhdGFbIGZpZWxkIF0gKVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIHVwZGF0ZU1lbWJlckZvb2RPbWlzc2lvbigpIHtcbiAgICAgICAgY29uc3QgZm9vZElkeCA9IHRoaXMuRm9vZE9taXNzaW9uLkZvb2RzLmRhdGEuZmluZEluZGV4KCBkYXR1bSA9PiBkYXR1bS5uYW1lID09IHRoaXMubWVtYmVyRm9vZE9taXNzaW9uRGF0YS5uZXZlclJlY2VpdmUgKVxuXG4gICAgICAgIGlmKCBmb29kSWR4ID09PSAtMSApIHJldHVybiB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5kZWxldGUoIHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmRhdGFbMF0uaWQgKVxuXG4gICAgICAgIGNvbnN0IG1zRGF0YSA9IHRoaXMuRm9vZE9taXNzaW9uLkZvb2RzLmRhdGFbIGZvb2RJZHggXSxcbiAgICAgICAgICAgIGRhdGEgPSB7IG1lbWJlcmlkOiB0aGlzLm1vZGVsLm1lbWJlci5kYXRhLmlkLCBwcm9kdWNlaWQ6IG1zRGF0YS5wcm9kdWNlaWQsIHByb2R1Y2VmYW1pbHlpZDogbXNEYXRhLnByb2R1Y2VpZCA/IG51bGwgOiBtc0RhdGEucHJvZHVjZWZhbWlseWlkIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5NZW1iZXJGb29kT21pc3Npb24uZGF0YS5sZW5ndGhcbiAgICAgICAgICAgID8gdGhpcy5NZW1iZXJGb29kT21pc3Npb24ucGF0Y2goIHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmRhdGFbMF0uaWQsIGRhdGEgKVxuICAgICAgICAgICAgOiB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5wb3N0KCBkYXRhIClcbiAgICB9LFxuXG4gICAgdXBkYXRlUGVyc29uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5YaHIoIHsgbWV0aG9kOiAnUEFUQ0gnLCBpZDogdGhpcy5tb2RlbC5wZXJzb24uZGF0YS5pZCwgcmVzb3VyY2U6ICdwZXJzb24nLCBkYXRhOiBKU09OLnN0cmluZ2lmeSggdGhpcy5wZXJzb25EYXRhICkgfSApXG4gICAgICAgIC50aGVuKCAoKSA9PlxuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLnBlcnNvbkRhdGEgKS5mb3JFYWNoKCBmaWVsZCA9PiB0aGlzLm1vZGVsLnBlcnNvbi5kYXRhWyBmaWVsZCBdID0gdGhpcy5wZXJzb25EYXRhWyBmaWVsZCBdIClcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgIH1cblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwgcmVxdWlyZSgnLi9TdWJtaXR0ZXInKSwge1xuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGNhbmNlbEJ0bjogJ2NsaWNrJyxcbiAgICAgICAgc3VibWl0QnRuOiAnY2xpY2snLFxuICAgIH0sXG5cbiAgICBvbkNhbmNlbEJ0bkNsaWNrKCkge1xuICAgICAgICB0aGlzLmRlbGV0ZSgpXG4gICAgfSxcblxuICAgIG9uU3VibWl0QnRuQ2xpY2soKSB7XG4gICAgICAgIGlmKCB0aGlzLnN1Ym1pdHRpbmcgKSByZXR1cm5cbiAgICAgICAgdGhpcy5vblN1Ym1pdFN0YXJ0KClcbiAgICAgICAgdGhpcy5zdWJtaXQoKVxuICAgICAgICAudGhlbiggKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLm9uU3VibWl0RW5kKCkgKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLmRlbGV0ZSgpIClcbiAgICAgICAgLmNhdGNoKCBlID0+IHRoaXMuaGFuZGxlU3VibWlzc2lvbkVycm9yKGUpIClcbiAgICB9LFxuXG4gICAgc3VibWl0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5kZWxldGUoKVxuICAgICAgICAudGhlbigga2V5VmFsdWUgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCAnbW9kZWxEZWxldGVkJywgdGhpcy5tb2RlbC5kYXRhIClcbiAgICAgICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdzdWNjZXNzJywgdGhpcy50b2FzdFN1Y2Nlc3MgfHwgYFN1Y2Nlc3NgIClcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICB9IClcbiAgICB9XG5cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgSWNvbnM6IHtcbiAgICAgICAgZXJyb3I6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL2xpYi9lcnJvcicpKCksXG4gICAgICAgIHN1Y2Nlc3M6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL2xpYi9jaGVja21hcmsnKSgpXG4gICAgfSxcbiAgICBcbiAgICBiaW5kRXZlbnRzKCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duIClcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwIClcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSApXG4gICAgfSxcblxuICAgIGxpc3RlbigpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMrK1xuXG4gICAgICAgIGlmKCB0aGlzLmxpc3RlbmVycyA9PT0gMSApIHRoaXMuYmluZEV2ZW50cygpXG4gICAgfSxcblxuICAgIG5hbWU6ICdEcmFnZ2VyJyxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gMFxuXG4gICAgICAgIHRoaXMub25Nb3VzZURvd24gPSBlID0+IHsgY29uc29sZS5sb2coICdvbk1vdXNlRG93bicgKTsgdGhpcy5lbWl0KCdtb3VzZWRvd24nLCBlKSB9XG4gICAgICAgIHRoaXMub25Nb3VzZVVwID0gZSA9PiB0aGlzLmVtaXQoJ21vdXNldXAnLCBlKVxuICAgICAgICB0aGlzLm9uTW91c2VNb3ZlID0gZSA9PiB0aGlzLmVtaXQoJ21vdXNlbW92ZScsIGUpXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgc3RvcExpc3RlbmluZygpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMtLVxuXG4gICAgICAgIGlmKCB0aGlzLmxpc3RlbmVycyA9PT0gMCApIHRoaXMudW5iaW5kRXZlbnRzKClcbiAgICB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL0RyYWdnZXInKSxcblxuICAgIHVuYmluZEV2ZW50cygpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93biApXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcCApXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUgKVxuXG4gICAgfVxuXG59ICksIHsgfSApLmNvbnN0cnVjdG9yKClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgICQ6IHJlcXVpcmUoJ2pxdWVyeScpLFxuXG4gICAgRm9vZHM6IHJlcXVpcmUoJy4uL21vZGVscy9Gb29kJyksXG5cbiAgICBjbGVhcigpIHsgdGhpcy5tcy5jbGVhcigpIH0sXG5cbiAgICBnZXRNYWdpY1N1Z2dlc3QoKSB7IHJldHVybiB0aGlzLm1zIH0sXG5cbiAgICBpbml0aWFsaXplRm9vZE9taXNzaW9uKCkgeyAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5Gb29kcy5nZXQoKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgaWYoICEgdGhpcy5Gb29kcy5kYXRhLmxlbmd0aCApIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5Gb29kcy5kYXRhLm1hcCggKCBmb29kLCBpICkgPT4gT2JqZWN0LmFzc2lnbiggeyBpZDogaSB9LCBmb29kICkgKSxcbiAgICAgICAgICAgICAgICAgIHJlbmRlcmVyID0gIGRhdGEgPT4gXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHJvZHVjZWlkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGA8c3BhbiBjbGFzcz1cIiR7ZGF0YS5wcm9kdWNlZmFtaWx5aWQgPyAncHJvZHVjZS1pbi1mYW1pbHknIDogJyd9XCI+JHtkYXRhLm5hbWV9PC9zcGFuPmBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYDxzcGFuIGNsYXNzPVwicHJvZHVjZS1mYW1pbHlcIj5BbGwgJHtkYXRhLm5hbWV9PC9zcGFuPmBcblxuICAgICAgICAgICAgdGhpcy5tcyA9IHRoaXMuJCggdGhpcy5lbHMuY29udGFpbmVyICkubWFnaWNTdWdnZXN0KCB7XG4gICAgICAgICAgICAgICAgYWxsb3dGcmVlRW50cmllczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnJyxcbiAgICAgICAgICAgICAgICBtYXhEcm9wSGVpZ2h0OiAyMDAsXG4gICAgICAgICAgICAgICAgbWF4U2VsZWN0aW9uOiAxLFxuICAgICAgICAgICAgICAgIHJlbmRlcmVyLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvblJlbmRlcmVyOiByZW5kZXJlcixcbiAgICAgICAgICAgICAgICB2YWx1ZUZpZWxkOiAnaWQnXG4gICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgdGhpcy5tcy52YWwgPSB2YWx1ZSA9PlxuICAgICAgICAgICAgICAgIHZhbHVlID8gdGhpcy5tcy5zZXRTZWxlY3Rpb24oIHZhbHVlICkgOiB0aGlzLm1zLmdldFNlbGVjdGlvbigpXG5cbiAgICAgICAgICAgIHRoaXMuJCh0aGlzLm1zKS5vbiggJ3NlbGVjdGlvbmNoYW5nZScsICggZSwgbSApID0+IHRoaXMuZW1pdCggJ3NlbGVjdGlvbkNoYW5nZScsIGUsIG0gKSApXG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgcmVtb3ZlSGVscGVyVGV4dCgpIHsgdGhpcy5tcy5oZWxwZXJbMF0ucmVtb3ZlKCkgfSxcblxuICAgIHNldFBsYWNlaG9sZGVyKCB0ZXh0ICkgeyB0aGlzLm1zLmlucHV0LmF0dHIoICdwbGFjZWhvbGRlcicsIHRleHQgKSB9LFxuXG4gICAgdW5zdHlsZSgpIHsgdGhpcy5tcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ2Zvcm0tY29udHJvbCcpIH1cblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cblxufSApXG4iLCJjb25zdCBTdWJtaXR0ZXIgPSByZXF1aXJlKCcuL1N1Ym1pdHRlcicpXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiggeyB9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCBTdWJtaXR0ZXIsIHtcblxuICAgIGV2ZW50czogT2JqZWN0LmFzc2lnbiggU3VibWl0dGVyLmV2ZW50cywgeyBwcmV2aWV3QnRuOiAnY2xpY2snIH0gKSxcblxuICAgIG9uUHJldmlld0J0bkNsaWNrKCBlICkge1xuICAgICAgICBjb25zb2xlLmxvZyggJ29uUHJldmlld0NsaWNrJyApXG4gICAgICAgIGNvbnNvbGUubG9nKCBlLnRhcmdldCApXG4gICAgICAgIGNvbnNvbGUubG9nKCBlLnRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcgKVxuICAgICAgICBjb25zb2xlLmxvZyggZS50YXJnZXQucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIClcbiAgICAgICAgZS50YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnNyYyA9IHRoaXMuRm9ybWF0LkltYWdlU3JjKCBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcudmFsdWUgKVxuICAgIH0sXG5cbiAgICBjbGVhcigpIHsgdGhpcy5pbnB1dEVscy5mb3JFYWNoKCBlbCA9PiBlbC52YWx1ZSA9ICcnICkgfSxcblxuICAgIGdldEVsZW1lbnRWYWx1ZSggZWwsIGF0dHJpYnV0ZSApIHtcbiAgICAgICAgaWYoIGF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkIHx8ICggIWF0dHJpYnV0ZS5mayAmJiBhdHRyaWJ1dGUucmFuZ2UgJiYgdHlwZW9mIGF0dHJpYnV0ZS5yYW5nZSA9PT0gJ3N0cmluZycgKSApIHJldHVybiBlbC52YWx1ZVxuICAgIH0sXG5cbiAgICBnZXRGb3JtVmFsdWVzKCkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzXG5cbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLnJlZHVjZXIoIE9iamVjdC5rZXlzKCB0aGlzLmVscyApLCBrZXkgPT5cbiAgICAgICAgICAgIC8oSU5QVVR8U0VMRUNUfFRFWFRBUkVBKS8udGVzdCggdGhpcy5lbHNbIGtleSBdLnRhZ05hbWUgKVxuICAgICAgICAgICAgICAgID8geyBba2V5XTogdGhpcy5nZXRFbGVtZW50VmFsdWUoIHRoaXMuZWxzWyBrZXkgXSwgYXR0cmlidXRlcy5maW5kKCBhdHRyaWJ1dGUgPT4gYXR0cmlidXRlLm5hbWUgPT09IGtleSApICkgfVxuICAgICAgICAgICAgICAgIDogeyB9XG4gICAgICAgIClcblxuICAgICAgICBhdHRyaWJ1dGVzLmZvckVhY2goIGF0dHJpYnV0ZSA9PiB7XG4gICAgICAgICAgICBpZiggYXR0cmlidXRlLmZrICkgeyBkYXRhWyBhdHRyaWJ1dGUuZmsgXSA9IHRoaXMudmlld3NbIGF0dHJpYnV0ZS5mayBdLmdldFNlbGVjdGVkSWQoKSB9XG4gICAgICAgICAgICBlbHNlIGlmKCB0eXBlb2YgYXR0cmlidXRlLnJhbmdlID09PSBcIm9iamVjdFwiICkgeyBkYXRhWyBhdHRyaWJ1dGUubmFtZSBdID0gdGhpcy52aWV3c1sgYXR0cmlidXRlLm5hbWUgXS5nZXRGb3JtVmFsdWVzKCkgfVxuICAgICAgICAgICAgZWxzZSBpZiggYXR0cmlidXRlLnJhbmdlID09PSBcIkxpc3RcIiApIHtcbiAgICAgICAgICAgICAgICBkYXRhWyBhdHRyaWJ1dGUubmFtZSBdID0gQXJyYXkuZnJvbSggdGhpcy52aWV3c1sgYXR0cmlidXRlLm5hbWUgXS5lbHMubGlzdC5jaGlsZHJlbiApLm1hcCggaXRlbUVsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBhdHRyaWJ1dGUuaXRlbVJhbmdlID09PSAnVGV4dCcgPyAnLml0ZW0gdGV4dGFyZWEnIDogJy5pdGVtIGlucHV0J1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRFbGVtZW50VmFsdWUoIGl0ZW1FbC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApLCB7IHJhbmdlOiBhdHRyaWJ1dGUuaXRlbVJhbmdlIH0gKVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gZGF0YVxuICAgIH0sXG5cbiAgICBoYW5kbGVWYWxpZGF0aW9uRXJyb3IoIGF0dHIgKSB7XG4gICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdlcnJvcicsIGF0dHIuZXJyb3IgKVxuICAgICAgICB0aGlzLmVsc1sgYXR0ci5uYW1lIF0uY2xhc3NMaXN0LmFkZCggJ2Vycm9yJyApXG4gICAgICAgIHRoaXMub25TdWJtaXRFbmQoKVxuICAgIH0sXG5cbiAgICBpbml0VHlwZUFoZWFkcygpIHtcbiAgICAgICAgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLmZvckVhY2goIGF0dHJpYnV0ZSA9PiB7XG4gICAgICAgICAgICBpZiggYXR0cmlidXRlLmZrICkgdGhpcy52aWV3c1sgYXR0cmlidXRlLmZrIF0uc2V0UmVzb3VyY2UoIGF0dHJpYnV0ZS5mayApLmluaXRBdXRvQ29tcGxldGUoIHRoaXMubW9kZWwuZ2l0KCBhdHRyaWJ1dGUuZmsgKSApXG4gICAgICAgICAgICBlbHNlIGlmKCB0eXBlb2YgYXR0cmlidXRlLnJhbmdlID09PSBcIm9iamVjdFwiICkge1xuICAgICAgICAgICAgICAgIHRoaXMuVmlld3NbIGF0dHJpYnV0ZS5uYW1lIF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc2FsbG93RW50ZXJLZXlTdWJtaXNzaW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKCBPYmplY3QuYXNzaWduKCB0aGlzLm1vZGVsLmRhdGFbIGF0dHJpYnV0ZS5uYW1lIF0sIHsgbmVzdGVkOiAhdGhpcy5tb2RlbC5naXQoJ25lc3RlZCcpIH0gKSwgeyBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGUucmFuZ2UgfSApLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZU9wdHM6IHsgaGlkZUJ1dHRvblJvdzogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICBWaWV3czogeyB9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZWxzWyBhdHRyaWJ1dGUubmFtZSBdXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZWxzWyBhdHRyaWJ1dGUubmFtZSBdXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ2aWV3RWxlbWVudHMgPSBbIHsgZWwsIHZpZXc6ICdmb3JtJywgbmFtZTogYXR0cmlidXRlLm5hbWUgfSBdXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTdWJ2aWV3cygpXG4gICAgICAgICAgICB9IGVsc2UgaWYoIGF0dHJpYnV0ZS5yYW5nZSA9PT0gXCJMaXN0XCIgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbkRhdGEgPSB0aGlzLm1vZGVsLmdpdCggYXR0cmlidXRlLm5hbWUgKSA/IHRoaXMubW9kZWwuZ2l0KCBhdHRyaWJ1dGUubmFtZSApLm1hcCggZGF0dW0gPT4gKCB7IHZhbHVlOiBkYXR1bSB9ICkgKSA6IFsgXTtcblxuICAgICAgICAgICAgICAgIHRoaXMuVmlld3NbIGF0dHJpYnV0ZS5uYW1lIF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLm1vZGVsICkuY29uc3RydWN0b3IoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IE9iamVjdC5jcmVhdGUoIHRoaXMuTW9kZWwgKS5jb25zdHJ1Y3RvciggY29sbGVjdGlvbkRhdGEsIHsgbWV0YTogeyBrZXk6ICd2YWx1ZScgfSB9ICksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RvY3VtZW50TGlzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6ICdsaXN0SXRlbSdcbiAgICAgICAgICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgICAgICAgICBpdGVtVGVtcGxhdGU6IGRhdHVtID0+IFJlZmxlY3QuYXBwbHkoIHRoaXMuRm9ybWF0LkdldEZvcm1GaWVsZCwgdGhpcy5Gb3JtYXQsIFsgeyByYW5nZTogYXR0cmlidXRlLml0ZW1SYW5nZSB9LCBkYXR1bS52YWx1ZSBdIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsc1sgYXR0cmlidXRlLm5hbWUgXVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmVsc1sgYXR0cmlidXRlLm5hbWUgXVxuICAgICAgICAgICAgICAgIHRoaXMuc3Vidmlld0VsZW1lbnRzID0gWyB7IGVsLCB2aWV3OiAnbGlzdCcsIG5hbWU6IGF0dHJpYnV0ZS5uYW1lIH0gXVxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU3Vidmlld3MoKVxuICAgICAgICAgICAgICAgIHRoaXMudmlld3NbIGF0dHJpYnV0ZS5uYW1lIF0ub24oICdhZGRDbGlja2VkJywgKCkgPT4gdGhpcy52aWV3c1sgYXR0cmlidXRlLm5hbWUgXS5hZGQoIHsgdmFsdWU6ICcnIH0gKSApXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3c1sgYXR0cmlidXRlLm5hbWUgXS5vbiggJ2RlbGV0ZUNsaWNrZWQnLCBkYXR1bSA9PiB0aGlzLnZpZXdzWyBhdHRyaWJ1dGUubmFtZSBdLnJlbW92ZSggZGF0dW0gKSApXG4gICAgICAgICAgICB9IGVsc2UgaWYoIGF0dHJpYnV0ZS5yYW5nZSA9PT0gXCJJbWFnZVVybFwiICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnSW1hZ2VVcmwnIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHN1Ym1pdCgpIHtcbiAgICAgICAgaWYoICEgdGhpcy5tb2RlbC52YWxpZGF0ZSggdGhpcy5nZXRGb3JtVmFsdWVzKCkgKSApIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXG4gICAgICAgIGNvbnN0IGlzUG9zdCA9ICFCb29sZWFuKCB0aGlzLm1vZGVsLmRhdGFbIHRoaXMua2V5IF0gIClcblxuICAgICAgICByZXR1cm4gKCBpc1Bvc3QgPyB0aGlzLm1vZGVsLnBvc3QoKSA6IHRoaXMubW9kZWwucHV0KCB0aGlzLm1vZGVsLmRhdGFbIHRoaXMua2V5IF0sIHRoaXMub21pdCggdGhpcy5tb2RlbC5kYXRhLCBbIHRoaXMua2V5IF0gKSApIClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCggaXNQb3N0ID8gJ3Bvc3RlZCcgOiAncHV0JywgT2JqZWN0LmFzc2lnbigge30sIHRoaXMubW9kZWwuZGF0YSApIClcbiAgICAgICAgICAgIHRoaXMubW9kZWwuZGF0YSA9IHsgfVxuICAgICAgICAgICAgdGhpcy5jbGVhcigpXG4gICAgICAgICAgICB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnc3VjY2VzcycsIHRoaXMudG9hc3RTdWNjZXNzIHx8IGBTdWNjZXNzYCApXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIGlmKCB0aGlzLm1vZGVsLmdpdCgnbmVzdGVkJykgKSB0aGlzLmVscy5jb250YWluZXIuY2xvc2VzdCgnLmZvcm0tZ3JvdXAnKS5jbGFzc0xpc3QuYWRkKCd2ZXJ0aWNhbCcpXG4gICAgICAgIHRoaXMuaW5wdXRFbHMgPSB0aGlzLmVscy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQsIHNlbGVjdCcpXG5cbiAgICAgICAgaWYoICF0aGlzLmRpc2FsbG93RW50ZXJLZXlTdWJtaXNzaW9uICkgdGhpcy5lbHMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoICdrZXl1cCcsIGUgPT4geyBpZiggZS5rZXlDb2RlID09PSAxMyApIHRoaXMub25TdWJtaXRCdG5DbGljaygpIH0gKVxuXG4gICAgICAgIHRoaXMuaW5wdXRFbHMuZm9yRWFjaCggZWwgPT5cbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoICdmb2N1cycsICgpID0+IGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2Vycm9yJykgKVxuICAgICAgICApXG5cbiAgICAgICAgaWYoIHRoaXMubW9kZWwgKXtcbiAgICAgICAgICAgIHRoaXMubW9kZWwub24oICd2YWxpZGF0aW9uRXJyb3InLCBhdHRyID0+IHRoaXMuaGFuZGxlVmFsaWRhdGlvbkVycm9yKCBhdHRyICkgKVxuICAgICAgICAgICAgdGhpcy5pbml0VHlwZUFoZWFkcygpXG4gICAgICAgICAgICB0aGlzLmtleSA9IHRoaXMubW9kZWwubWV0YWRhdGEgPyB0aGlzLm1vZGVsLm1ldGFkYXRhLmtleSA6ICdfaWQnXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcyBcbiAgICB9XG59IClcbiIsImNvbnN0IEN1c3RvbUNvbnRlbnQgPSByZXF1aXJlKCcuL3V0aWwvQ3VzdG9tQ29udGVudCcpXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIEN1c3RvbUNvbnRlbnQsIHtcblxuXG5cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgTmF2OiByZXF1aXJlKCAnLi4vbW9kZWxzL05hdicpLFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGp1c3RpZnk6ICdjbGljaycsXG4gICAgICAgIG5hdjogJ2NsaWNrJyxcbiAgICAgICAgdGl0bGU6ICdjbGljaydcbiAgICB9LFxuXG4gICAgb25KdXN0aWZ5Q2xpY2soKSB7IHRoaXMuZWxzLm5hdi5jbGFzc0xpc3QudG9nZ2xlKCdpcy1tb2JpbGUnKSB9LFxuXG4gICAgb25OYXZDbGljayggZSApIHtcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldC5jbG9zZXN0KCdsaScpXG5cbiAgICAgICAgaWYoICFlbCApIHJldHVyblxuXG4gICAgICAgIHRoaXMuZW1pdCggJ25hdmlnYXRlJywgZWwuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSApXG5cbiAgICAgICAgaWYoIHRoaXMuZWxzLm5hdi5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLW1vYmlsZScpICkgdGhpcy5lbHMubmF2LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLW1vYmlsZScpXG4gICAgfSxcblxuICAgIG9uVGl0bGVDbGljaygpIHsgdGhpcy5lbWl0KCAnbmF2aWdhdGUnLCAnLycgKSB9LFxuXG4gICAgdGVtcGxhdGVPcHRzKCkge1xuICAgICAgICByZXR1cm4geyBmaWVsZHM6IHRoaXMuTmF2LmRhdGEsIGhvbWU6IHsgbGFiZWw6ICdQYXRjaHdvcmsgR2FyZGVucycsIG5hbWU6ICdob21lJyB9IH1cbiAgICB9XG5cbn0gKVxuIiwiY29uc3QgQ3VzdG9tQ29udGVudCA9IHJlcXVpcmUoJy4vdXRpbC9DdXN0b21Db250ZW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwgQ3VzdG9tQ29udGVudCwge1xuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGpvaW5CdG46ICdjbGljaydcbiAgICB9LFxuXG4gICAgb25Kb2luQnRuQ2xpY2soKSB7IHRoaXMuZW1pdCggJ25hdmlnYXRlJywgJ3NpZ24tdXAnICkgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMub24oICdpbWdMb2FkZWQnLCAoKSA9PiB0aGlzLmVscy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaW1nLWxvYWRlZCcpIClcblxuICAgICAgICByZXR1cm4gQ3VzdG9tQ29udGVudC5wb3N0UmVuZGVyLmNhbGwodGhpcylcbiAgICB9XG5cbn0gKVxuIiwidmFyIExpc3RJdGVtID0gcmVxdWlyZSgnLi91dGlsL0xpc3RJdGVtJyksXG4gICAgSW5zdGFuY2VSb3cgPSBmdW5jdGlvbigpIHsgXG4gICAgICAgIHRoaXMuZmlsZXMgPSBbIF1cbiAgICAgICAgcmV0dXJuIExpc3RJdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKVxuICAgIH1cblxuT2JqZWN0LmFzc2lnbiggSW5zdGFuY2VSb3cucHJvdG90eXBlLCBMaXN0SXRlbS5wcm90b3R5cGUsIHtcblxuICAgIGdldEZpZWxkVmFsdWUoIGZpZWxkICkge1xuICAgICAgICBcbiAgICAgICAgdmFyIG1vZGVsVmFsdWUgPSB0aGlzLm1vZGVsLmdldChmaWVsZCksXG4gICAgICAgICAgICBpc0ZpbGUgPSBmYWxzZVxuICAgICAgICBcbiAgICAgICAgaWYoIG1vZGVsVmFsdWUgPT09IG51bGwgKSByZXR1cm4gJydcblxuICAgICAgICBpZiggdHlwZW9mIG1vZGVsVmFsdWUgPT09IFwib2JqZWN0XCIgJiYgKCBtb2RlbFZhbHVlLnR5cGUgPT09IFwiZmlsZVwiIHx8IG1vZGVsVmFsdWUudHlwZSA9PT0gXCJCdWZmZXJcIiApICkge1xuICAgICAgICAgICAgaWYoIG1vZGVsVmFsdWUuc3JjICkgeyByZXR1cm4gdGhpcy4kKCc8aW1nLz4nKS5hdHRyKCB7IHNyYzogbW9kZWxWYWx1ZS5zcmMgfSApLmNzcyggeyBoZWlnaHQ6ICc1MHB4JyB9ICkgfVxuICAgICAgICAgICAgZWxzZSBpZiggbW9kZWxWYWx1ZS5pbWFnZUVsICkgeyByZXR1cm4gbW9kZWxWYWx1ZS5pbWFnZUVsIH1cbiAgICAgICAgICAgIGVsc2UgeyBpc0ZpbGUgPSB0cnVlOyB0aGlzLmZpbGVzLnB1c2goIGZpZWxkICk7IHJldHVybiAnPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBpY3R1cmVcIj48L3NwYW4+JyB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKCB0eXBlb2YgbW9kZWxWYWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBtb2RlbFZhbHVlICE9PSBudWxsIClcbiAgICAgICAgICAgID8gbW9kZWxWYWx1ZS52YWx1ZVxuICAgICAgICAgICAgOiBtb2RlbFZhbHVlXG4gICAgfSxcblxuICAgIGdldFRlbXBsYXRlT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLm1vZGVsLmlkLFxuICAgICAgICAgICAgdmFsdWVzOiB0aGlzLmZpZWxkcy5tYXAoIGZpZWxkID0+ICggeyBuYW1lOiBmaWVsZC5uYW1lLCB2YWx1ZTogdGhpcy5nZXRGaWVsZFZhbHVlKCBmaWVsZC5uYW1lICksIHdpZHRoOiBmaWVsZC53aWR0aCB9ICkgKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGxvYWRGaWxlSWZWaXNpYmxlKCkgeyAgICAgICBcbiAgICAgICAgdmFyIHRvcCA9IHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AsXG4gICAgICAgICAgICB2aXNpYmxlID0gKCB0b3AgPj0gMCAmJiB0b3AgPD0gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSApLFxuICAgICAgICAgICAgaW1hZ2VMb2FkZXJNb2RlbCA9IHsgaWQ6IHRoaXMubW9kZWwuaWQsIGNvbHVtbnM6IHRoaXMuZmlsZXMgfVxuICAgICAgICBcbiAgICAgICAgaWYoIHZpc2libGUgKSB0aGlzLmltYWdlTG9hZGVyLmFkZCggaW1hZ2VMb2FkZXJNb2RlbCApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIExpc3RJdGVtLnByb3RvdHlwZS5wb3N0UmVuZGVyLmNhbGwodGhpcylcbiAgICAgICAgdGhpcy5tb2RlbC5vbiggJ2NoYW5nZScsICgpID0+XG4gICAgICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5tb2RlbC5hdHRyaWJ1dGVzICkuZm9yRWFjaCggZmllbGQgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YVsgZmllbGQgXS5odG1sKCB0aGlzLmdldEZpZWxkVmFsdWUoIGZpZWxkICkgKVxuICAgICAgICAgICAgKSApXG4gICAgICAgIFxuICAgICAgICBpZiggdGhpcy5maWxlcy5sZW5ndGggKSB0aGlzLiQod2luZG93KVxuICAgICAgICAgICAgLm9uKCB0aGlzLnV0aWwuZm9ybWF0KCAnc2Nyb2xsLnRocm90dGxlZExvYWQlcycsIHRoaXMubW9kZWwuaWQgKSwgdGhpcy50aHJvdHRsZWRMb2FkLmJpbmQodGhpcykgKVxuICAgIH0sXG5cbiAgICByZXRyaWV2ZWRJbWFnZSggZmllbGQgKSB7XG4gICAgICAgIHRoaXMuZmlsZXMgPSB0aGlzLl8oIHRoaXMuZmlsZXMgKS5yZWplY3QoIGZpbGUgPT4gZmlsZSA9PT0gZmllbGQgKVxuICAgICAgICBpZiggdGhpcy5maWxlcy5sZW5ndGggPT09IDAgKSB0aGlzLiQod2luZG93KVxuICAgICAgICAgICAgLm9mZiggdGhpcy51dGlsLmZvcm1hdCggJ3Njcm9sbC50aHJvdHRsZWRMb2FkJXMnLCB0aGlzLm1vZGVsLmlkICkgKVxuICAgIH0sXG5cbiAgICBzaXplKCkgeyBpZiggdGhpcy5maWxlcy5sZW5ndGggKSB0aGlzLmxvYWRGaWxlSWZWaXNpYmxlKCkgfSxcblxuICAgIHRocm90dGxlZExvYWQoKSB7IHRoaXMuXy50aHJvdHRsZSggdGhpcy5sb2FkRmlsZUlmVmlzaWJsZSgpLCA1MDAgKSB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9pbnN0YW5jZVJvdycpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBJbnN0YW5jZVJvd1xuIiwiY29uc3QgU3VwZXIgPSByZXF1aXJlKCcuL19fcHJvdG9fXycpXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiggeyB9LCBTdXBlciwge1xuXG4gICAgYWRkKCBkYXR1bSwgc29ydD1mYWxzZSApIHtcbiAgICAgICAgaWYoICF0aGlzLmNvbGxlY3Rpb24gKSB0aGlzLmNvbGxlY3Rpb24gPSBPYmplY3QuY3JlYXRlKCB0aGlzLk1vZGVsIClcblxuICAgICAgICBjb25zdCBrZXlWYWx1ZSA9IGRhdHVtWyB0aGlzLmtleSBdXG4gICAgICAgIGxldCBpbnNlcnRpb24gPSB7IGVsOiB0aGlzLmVscy5saXN0IH1cblxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24uYWRkKCBkYXR1bSApXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5zdG9yZVsgdGhpcy5rZXkgXVsga2V5VmFsdWUgXSA9IGRhdHVtXG5cbiAgICAgICAgaWYoIHNvcnQgJiYgdGhpcy5jb2xsZWN0aW9uLmRhdGEubGVuZ3RoICE9PSAxICkge1xuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uLnNvcnQoIHRoaXMubW9kZWwuZ2l0KCdzb3J0JykgKVxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jb2xsZWN0aW9uLmRhdGEuZmluZEluZGV4KCBkYXR1bSA9PiBkYXR1bVt0aGlzLmtleV0gPT0ga2V5VmFsdWUgKVxuXG4gICAgICAgICAgICBpZiggaW5kZXggIT09IC0xICkgaW5zZXJ0aW9uID0gdGhpcy5lbHMubGlzdC5jaGlsZHJlbi5pdGVtKGluZGV4KVxuICAgICAgICAgICAgICAgID8geyBtZXRob2Q6ICdpbnNlcnRCZWZvcmUnLCBlbDogdGhpcy5lbHMubGlzdC5jaGlsZHJlbi5pdGVtKCBpbmRleCApIH1cbiAgICAgICAgICAgICAgICA6IHsgZWw6IHRoaXMuZWxzLmxpc3QgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlKClcblxuICAgICAgICBpZiggdGhpcy5pdGVtVGVtcGxhdGUgKSB7XG4gICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRpb24sXG4gICAgICAgICAgICAgICAgcmVuZGVyU3Vidmlld3M6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMuZ2V0SXRlbVRlbXBsYXRlUmVzdWx0KCBrZXlWYWx1ZSwgZGF0dW0gKVxuICAgICAgICAgICAgfSApXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdGhpcy5lbHMubGlzdC5xdWVyeVNlbGVjdG9yKGAqW2RhdGEta2V5PVwiJHtrZXlWYWx1ZX1cIl1gKS5zY3JvbGxJbnRvVmlldyggeyBiZWhhdmlvcjogJ3Ntb290aCcgfSApXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pdGVtVmlld3NbIGtleVZhbHVlIF0gPVxuICAgICAgICAgICAgdGhpcy5mYWN0b3J5LmNyZWF0ZSggdGhpcy5tb2RlbC5naXQoJ3ZpZXcnKSwgeyBpbnNlcnRpb24sIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLmNvbGxlY3Rpb24ubW9kZWwgKS5jb25zdHJ1Y3RvciggZGF0dW0gKSB9IClcbiAgICAgICAgICAgIC5vbiggJ2RlbGV0ZWQnLCAoKSA9PiB0aGlzLm9uRGVsZXRlZCggZGF0dW0gKSApXG4gICAgICAgXG4gICAgICAgIHRoaXMuaXRlbVZpZXdzWyBrZXlWYWx1ZSBdLmVscy5jb250YWluZXIuc2Nyb2xsSW50b1ZpZXcoIHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0gKVxuICAgIH0sXG5cbiAgICBnZXRDaGlsZFJlY3RhbmdsZXMoIGVsICkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSggZWwuY2hpbGRyZW4gKS5tYXAoIGl0ZW0gPT5cbiAgICAgICAgICAgICggeyBlbDogaXRlbSwgcmVjdGFuZ2xlOiBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIH0gKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIGNoZWNrRHJhZyggZSApIHtcbiAgICAgICAgaWYoICF0aGlzLmRyYWdnaW5nICkgcmV0dXJuXG4gICAgICAgIGNvbnNvbGUubG9nKCAnY2hlY2tEcmFnJyApXG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAgICAgdGhpcy5EcmFnZ2VyLmVscy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnZmQtaGlkZGVuJylcbiAgICAgICAgdGhpcy5EcmFnZ2VyLmVscy5jb250YWluZXIuc3R5bGUudG9wID0gYCR7ZS5jbGllbnRZKzV9cHhgXG4gICAgICAgIHRoaXMuRHJhZ2dlci5lbHMuY29udGFpbmVyLnN0eWxlLmxlZnQgPSBgJHtlLmNsaWVudFgrNX1weGBcblxuICAgICAgICBpZiggdGhpcy5tb2RlbC5naXQoJ2RyYWdnYWJsZScpICE9PSAnbGlzdEl0ZW0nICkgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgbGlzdEl0ZW1SZWN0YW5nbGVzID0gdGhpcy5nZXRDaGlsZFJlY3RhbmdsZXMoIHRoaXMuZWxzLmxpc3QgKSxcbiAgICAgICAgICAgIG1hdGNoaW5nSXRlbSA9IGxpc3RJdGVtUmVjdGFuZ2xlcy5maW5kKCBpdGVtID0+XG4gICAgICAgICAgICAgICAgaXRlbS5yZWN0YW5nbGUucmlnaHQgPj0gZS5jbGllbnRYICYmIGl0ZW0ucmVjdGFuZ2xlLmxlZnQgPD0gZS5jbGllbnRYICYmIGl0ZW0ucmVjdGFuZ2xlLmJvdHRvbSA+PSBlLmNsaWVudFkgJiYgaXRlbS5yZWN0YW5nbGUudG9wIDw9IGUuY2xpZW50WVxuICAgICAgICApXG5cbiAgICAgICAgaWYoICFtYXRjaGluZ0l0ZW0gfHwgKCAhbWF0Y2hpbmdJdGVtICYmIHRoaXMuZHJhZ292ZXJFbCApIHx8ICggbWF0Y2hpbmdJdGVtICYmIHRoaXMuZHJhZ292ZXJFbCAmJiBtYXRjaGluZ0l0ZW0uZWwuaXNTYW1lTm9kZSggdGhpcy5kcmFnZ2luZy5lbCApICkgKSB7XG4gICAgICAgICAgICBpZiggdGhpcy5kcmFnb3ZlckVsICkgdGhpcy5kcmFnb3ZlckVsLmNsYXNzTGlzdC5yZW1vdmUoICdkcmFnb3Zlci10b3AnLCAnZHJhZ292ZXItYm90dG9tJyApXG4gICAgICAgICAgICB0aGlzLmRyYWdvdmVyRWwgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIG1hdGNoaW5nSXRlbSAmJiAhbWF0Y2hpbmdJdGVtLmVsLmlzU2FtZU5vZGUoIHRoaXMuZHJhZ2dpbmcuZWwgKSApIHtcbiAgICAgICAgICAgIGlmKCB0aGlzLmRyYWdvdmVyRWwgKSB0aGlzLmRyYWdvdmVyRWwuY2xhc3NMaXN0LnJlbW92ZSggJ2RyYWdvdmVyLXRvcCcsICdkcmFnb3Zlci1ib3R0b20nIClcbiAgICAgICAgICAgIHRoaXMuZHJhZ292ZXJFbCA9IG1hdGNoaW5nSXRlbS5lbFxuICAgICAgICAgICAgY29uc3QgaXRlbVJlY3QgPSBtYXRjaGluZ0l0ZW0uZWwucXVlcnlTZWxlY3RvcignLml0ZW0nKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgICAgICAgICBpZiggZS5jbGllbnRZIDwgKCBpdGVtUmVjdC5ib3R0b20gLSBpdGVtUmVjdC5oZWlnaHQgLyAyICkgKSB7XG4gICAgICAgICAgICAgICAgaWYoIHRoaXMuZHJhZ292ZXJFbC5wcmV2aW91c1NpYmxpbmcgJiYgdGhpcy5kcmFnb3ZlckVsLnByZXZpb3VzU2libGluZy5pc1NhbWVOb2RlKCB0aGlzLmRyYWdnaW5nLmVsICkgKSByZXR1cm5cbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdvdmVyRWwuY2xhc3NMaXN0LmFkZCgnZHJhZ292ZXItdG9wJylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYoIHRoaXMuZHJhZ292ZXJFbC5uZXh0U2libGluZyAmJiB0aGlzLmRyYWdvdmVyRWwubmV4dFNpYmxpbmcuaXNTYW1lTm9kZSggdGhpcy5kcmFnZ2luZy5lbCApICkgcmV0dXJuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnb3ZlckVsLmNsYXNzTGlzdC5hZGQoJ2RyYWdvdmVyLWJvdHRvbScpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBjaGVja0RyYWdFbmQoIGUgKSB7XG4gICAgICAgIGlmKCAhdGhpcy5kcmFnZ2luZyApIHJldHVyblxuXG4gICAgICAgIGlmKCB0aGlzLmRyYWdvdmVyRWwgKSB7XG4gICAgICAgICAgICB0aGlzLmVscy5saXN0Lmluc2VydEJlZm9yZSggdGhpcy5kcmFnZ2luZy5lbCwgdGhpcy5kcmFnb3ZlckVsLmNsYXNzTGlzdC5jb250YWlucygnZHJhZ292ZXItdG9wJykgPyB0aGlzLmRyYWdvdmVyRWwgOiB0aGlzLmRyYWdvdmVyRWwubmV4dFNpYmxpbmcgKVxuICAgICAgICAgICAgdGhpcy5kcmFnb3ZlckVsLmNsYXNzTGlzdC5yZW1vdmUoICdkcmFnb3Zlci10b3AnLCAnZHJhZ292ZXItYm90dG9tJyApXG4gICAgICAgICAgICB0aGlzLmRyYWdvdmVyRWwgPSB1bmRlZmluZWRcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZW1pdCggJ2Ryb3BwZWQnLCB7IGUsIHR5cGU6IHRoaXMubW9kZWwuZ2l0KCdkcmFnZ2FibGUnKSwgbW9kZWw6IHRoaXMuZHJhZ2dpbmcubW9kZWwgfSApXG4gICAgICAgIHRoaXMuZHJhZ2dpbmcuZWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dpbmcnKVxuICAgICAgICB0aGlzLmVscy5saXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRyYWdnaW5nJylcblx0XHR0aGlzLkRyYWdnZXIuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICB0aGlzLmRyYWdnaW5nID0gZmFsc2VcbiAgICB9LFxuXG4gICAgY2hlY2tEcmFnU3RhcnQoIGUgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCAnY2hlY2tEcmFnU3RhcnQnIClcbiAgICAgICAgY29uc3QgY2xvc2VzdExpc3QgPSBlLnRhcmdldC5jbG9zZXN0KCcuTGlzdCcpXG4gICAgICAgIGlmKCBjbG9zZXN0TGlzdCA9PT0gbnVsbCB8fCAoICFjbG9zZXN0TGlzdC5pc1NhbWVOb2RlKCB0aGlzLmVscy5jb250YWluZXIgKSApICkgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgICAgIGlmKCAhZWwgKSByZXR1cm4gbnVsbFxuXG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5jb2xsZWN0aW9uLnN0b3JlWyB0aGlzLmtleSBdWyBlbC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1rZXknKSBdXG5cbiAgICAgICAgdGhpcy5kcmFnZ2luZyA9IHsgZWw6IGVsLnBhcmVudE5vZGUsIG1vZGVsIH1cbiAgICAgICAgdGhpcy5kcmFnZ2luZy5lbC5jbGFzc0xpc3QuYWRkKCdpcy1kcmFnZ2luZycpXG4gICAgICAgIHRoaXMuZWxzLmxpc3QuY2xhc3NMaXN0LmFkZCgnaXMtZHJhZ2dpbmcnKVxuICAgICAgICBpZiggbW9kZWwubGFiZWwgKSB0aGlzLkRyYWdnZXIuZWxzLmNvbnRhaW5lci50ZXh0Q29udGVudCA9IGBNb3ZlICR7bW9kZWwubGFiZWx9LmBcbiAgICAgICAgdGhpcy5lbWl0KCAnZHJhZ1N0YXJ0JywgdGhpcy5tb2RlbC5naXQoJ2RyYWdnYWJsZScpIClcblxuICAgIH0sXG5cbiAgICBjaGVja0Ryb3AoIHsgZSwgdHlwZSwgbW9kZWwgfSApIHtcbiAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2l0KCdkcm9wcGFibGUnKSAhPT0gdHlwZSApIHJldHVyblxuXG4gICAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQuY2xvc2VzdCgnLml0ZW0nKVxuXG4gICAgICAgIGlmKCAhZWwgKSByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxvY2FsTW9kZWwgPSB0aGlzLmNvbGxlY3Rpb24uc3RvcmVbIHRoaXMua2V5IF1bIGVsLnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWtleScpIF1cblxuICAgICAgICBpZiggIWxvY2FsTW9kZWwgKSByZXR1cm5cblxuICAgICAgICB0aGlzLmVtaXQoICdzdWNjZXNzZnVsRHJvcCcsIHsgZHJvcHBlZDogbW9kZWwsIGRyb3BwZWRPbjogbG9jYWxNb2RlbCB9IClcbiAgICB9LFxuXG4gICAgZmV0Y2goIG5leHRQYWdlPWZhbHNlICkge1xuICAgICAgICB0aGlzLmZldGNoaW5nID0gdHJ1ZVxuICAgICAgICBpZiggbmV4dFBhZ2UgKSB0aGlzLm1vZGVsLnNldCggJ3NraXAnLCB0aGlzLm1vZGVsLmdpdCgnc2tpcCcpICsgdGhpcy5tb2RlbC5naXQoJ3BhZ2VTaXplJykgKVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24uZ2V0KCB7IHF1ZXJ5OiB7IHNraXA6IHRoaXMubW9kZWwuZ2l0KCdza2lwJyksIGxpbWl0OiB0aGlzLm1vZGVsLmdpdCgncGFnZVNpemUnKSwgc29ydDogdGhpcy5tb2RlbC5naXQoJ3NvcnQnKSB9IH0gKVxuICAgICAgICAudGhlbiggbmV3RGF0YSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRlTGlzdCggbmV3RGF0YSApXG4gICAgICAgICAgICB0aGlzLmZldGNoZWQgPSB0cnVlXG4gICAgICAgICAgICB0aGlzLmZldGNoaW5nID0gZmFsc2VcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZmV0Y2hlZCcpXG4gICAgICAgICAgICBpZiggbmV3RGF0YS5sZW5ndGggPT0gMCAmJiBuZXh0UGFnZSApIHRoaXMuZWxzLmxpc3QucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIHRoaXMub25TY3JvbGxQYWdpbmF0aW9uIClcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgZ2V0Q291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24uZ2V0Q291bnQoKVxuICAgICAgICAudGhlbiggKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLmNvbGxlY3Rpb24ubWV0YS5jb3VudCApIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgZ2V0SXRlbVRlbXBsYXRlUmVzdWx0KCBrZXlWYWx1ZSwgZGF0dW0gKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnNPblJpZ2h0ID0gdGhpcy5tb2RlbC5naXQoJ2RlbGV0ZScpID8gYDxkaXYgY2xhc3M9XCJidXR0b25zXCI+JHt0aGlzLmRlbGV0ZUljb259PC9kaXY+YCA6IGBgLFxuICAgICAgICAgICAgc2VsZWN0aW9uID0gdGhpcy50b2dnbGVTZWxlY3Rpb24gPyBgPGRpdiBjbGFzcz1cInNlbGVjdGlvblwiPjxpbnB1dCBkYXRhLWpzPVwiY2hlY2tib3hcIiB0eXBlPVwiY2hlY2tib3hcIiAvPjwvZGl2PmAgOiBgYFxuXG4gICAgICAgIHJldHVybiBgYCArXG4gICAgICAgIGA8bGkgZGF0YS1rZXk9XCIke2tleVZhbHVlfVwiPlxuICAgICAgICAgICAgJHtzZWxlY3Rpb259XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbVwiPiR7dGhpcy5pdGVtVGVtcGxhdGUoIGRhdHVtICl9PC9kaXY+XG4gICAgICAgICAgICAke2J1dHRvbnNPblJpZ2h0fVxuICAgICAgICA8L2xpPmBcbiAgICB9LFxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgaWYoIHRoaXMuZWxzLnJlc2V0QnRuICkgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICAgICAgaWYoIHRoaXMuZWxzLnNhdmVCdG4gKSB0aGlzLmVscy5zYXZlQnRuLmNsYXNzTGlzdC5hZGQoJ2ZkLWhpZGRlbicpXG4gICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KCBTdXBlci5oaWRlLCB0aGlzLCBbIF0gKVxuICAgIH0sXG5cbiAgICBoaWRlSXRlbXMoIGtleXMgKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgICAgIGtleXMubWFwKCBrZXkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbHMubGlzdC5xdWVyeVNlbGVjdG9yKGBsaVtkYXRhLWtleT1cIiR7a2V5fVwiXWApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsID8gdGhpcy5oaWRlRWwoIGVsICkgOiBQcm9taXNlLnJlc29sdmUoKSBcbiAgICAgICAgICAgIH0gKVxuICAgICAgICApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgfSxcblxuICAgIGhpZGVMaXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaWRlRWwoIHRoaXMuZWxzLmxpc3QgKVxuICAgICAgICAudGhlbiggKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLmVscy50b2dnbGUuY2xhc3NMaXN0LmFkZCgnaXMtaGlkZGVuJykgKSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgfSxcblxuICAgIGluaXRpYWxpemVEcmFnRHJvcCgpIHtcbiAgICAgICAgdGhpcy5EcmFnZ2VyLm9uKCAnbW91c2Vkb3duJywgZSA9PiB0aGlzLmNoZWNrRHJhZ1N0YXJ0KGUpIClcbiAgICAgICAgdGhpcy5EcmFnZ2VyLm9uKCAnbW91c2V1cCcsIGUgPT4gdGhpcy5jaGVja0RyYWdFbmQoZSkgKVxuICAgICAgICB0aGlzLkRyYWdnZXIub24oICdtb3VzZW1vdmUnLCBlID0+IHRoaXMuY2hlY2tEcmFnKGUpIClcbiAgICAgICAgdGhpcy5EcmFnZ2VyLmxpc3RlbigpXG4gICAgfSxcblxuICAgIGluaXRpYWxpemVTY3JvbGxQYWdpbmF0aW9uKCkge1xuICAgICAgICBjb25zdCBsaXN0RWwgPSB0aGlzLmVscy5saXN0XG5cbiAgICAgICAgdGhpcy5vblNjcm9sbFBhZ2luYXRpb24gPSBlID0+IHtcbiAgICAgICAgICAgIGlmKCB0aGlzLmZldGNoaW5nICkgcmV0dXJuXG4gICAgICAgICAgICBpZiggKCB0aGlzLnNjcm9sbEhlaWdodCAtICggbGlzdEVsLnNjcm9sbFRvcCArIHRoaXMub2Zmc2V0SGVpZ2h0ICkgKSA8IDEwMCApIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoICgpID0+IHRoaXMuZmV0Y2goIHRydWUgKS5jYXRjaCh0aGlzLkVycm9yKSApXG4gICAgICAgIH1cblxuICAgICAgICBsaXN0RWwuYWRkRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIHRoaXMub25TY3JvbGxQYWdpbmF0aW9uIClcbiAgICB9LFxuXG4gICAgZW1wdHkoKSB7XG4gICAgICAgIHRoaXMuZWxzLmxpc3QuaW5uZXJIVE1MID0gJydcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGFkZEJ0bjogJ2NsaWNrJyxcbiAgICAgICAgY2hlY2tib3g6ICdjaGFuZ2UnLFxuICAgICAgICBnb0JhY2tCdG46ICdjbGljaycsXG4gICAgICAgIHJlc2V0QnRuOiAnY2xpY2snLFxuICAgICAgICBzYXZlQnRuOiAnY2xpY2snLFxuICAgICAgICB0b2dnbGU6ICdjbGljaydcbiAgICB9LFxuXG4gICAgZ2V0TGlzdEl0ZW1LZXkoIGUgKSB7XG4gICAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQuY2xvc2VzdCgnLml0ZW0nKVxuXG4gICAgICAgIGlmKCAhZWwgKSByZXR1cm4gbnVsbFxuXG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24uc3RvcmVbIHRoaXMua2V5IF1bIGVsLnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWtleScpIF1cbiAgICB9LFxuXG4gICAgaGlkZURyb3BwYWJsZSgpIHtcbiAgICAgICAgdGhpcy5lbHMubGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kcm9wcGFibGUnKVxuICAgICAgICBBcnJheS5mcm9tKCB0aGlzLmVscy5saXN0LmNoaWxkcmVuICkuZm9yRWFjaCggY2hpbGQgPT4gY2hpbGQucmVtb3ZlQ2hpbGQoIGNoaWxkLmxhc3RDaGlsZCApIClcbiAgICB9LFxuXG4gICAgb25BZGRCdG5DbGljayggZSApIHtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLm1vZGVsXG4gICAgICAgICAgICA/IHRoaXMuYWRkKCB0aGlzLmNvbGxlY3Rpb24ubW9kZWwuQ3JlYXRlRGVmYXVsdCgpIClcbiAgICAgICAgICAgIDogdGhpcy5lbWl0KCdhZGRDbGlja2VkJylcbiAgICB9LFxuXG4gICAgb25DaGVja2JveENoYW5nZSggZSApIHtcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldC5jbG9zZXN0KCdMSScpXG5cbiAgICAgICAgaWYoICFlbCApIHJldHVybiBmYWxzZVxuXG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5jb2xsZWN0aW9uLnN0b3JlWyB0aGlzLmtleSBdWyBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEta2V5JykgXVxuICAgICAgICAgICAgZXZlbnQgPSBgdG9nZ2xlZCR7IGUudGFyZ2V0LmNoZWNrZWQgPyAnT24nIDogJ09mZid9YFxuXG4gICAgICAgIGlmKCAhbW9kZWwgKSByZXR1cm5cblxuICAgICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKCAnY2hlY2tlZCcsIGUudGFyZ2V0LmNoZWNrZWQgKVxuXG4gICAgICAgIHRoaXMuZW1pdCggZXZlbnQsIG1vZGVsIClcbiAgICB9LFxuXG4gICAgb25Hb0JhY2tCdG5DbGljayggZSApIHtcbiAgICAgICAgdGhpcy5lbWl0KCAnZ29CYWNrQ2xpY2tlZCcgKVxuICAgIH0sXG5cbiAgICBvbkl0ZW1Nb3VzZWVudGVyKCBlICkgeyBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdtb3VzZW92ZXInKSB9LFxuICAgIG9uSXRlbU1vdXNlbGVhdmUoIGUgKSB7IGUudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ21vdXNlb3ZlcicpIH0sXG5cbiAgICBvbkxpc3RDbGljayggZSApIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmdldExpc3RJdGVtS2V5KCBlIClcblxuICAgICAgICBpZiggIW1vZGVsICkgcmV0dXJuXG5cbiAgICAgICAgdGhpcy5lbWl0KCAnaXRlbUNsaWNrZWQnLCBtb2RlbCApXG4gICAgfSxcblxuICAgIG9uTGlzdERibGNsaWNrKCBlICkge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuZ2V0TGlzdEl0ZW1LZXkoIGUgKVxuXG4gICAgICAgIGlmKCAhbW9kZWwgKSByZXR1cm5cblxuICAgICAgICB0aGlzLmVtaXQoICdpdGVtRGJsQ2xpY2tlZCcsIG1vZGVsIClcbiAgICB9LFxuICAgIFxuICAgIG9uUmVzZXRCdG5DbGljaygpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdyZXNldENsaWNrZWQnKVxuICAgIH0sXG5cbiAgICBvblNhdmVCdG5DbGljaygpIHtcbiAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2l0KCd2aWV3JykgKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoICdzYXZlQ2xpY2tlZCcsIE9iamVjdC5rZXlzKCB0aGlzLml0ZW1WaWV3cyApLm1hcCgga2V5ID0+IHRoaXMuaXRlbVZpZXdzW2tleV0uZ2V0UHJvcG9zZWRNb2RlbCgpICkgKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uVG9nZ2xlQ2xpY2soKSB7IHRoaXMuZWxzLmxpc3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdmZC1oaWRkZW4nKSA/IHRoaXMuc2hvd0xpc3QoKSA6IHRoaXMuaGlkZUxpc3QoKSB9LFxuXG4gICAgcG9wdWxhdGVMaXN0KCBkYXRhICkge1xuICAgICAgICBkYXRhID0gZGF0YSB8fCB0aGlzLmNvbGxlY3Rpb24uZGF0YVxuXG4gICAgICAgIGlmKCAhQXJyYXkuaXNBcnJheSggZGF0YSApICkgZGF0YSA9IFsgZGF0YSBdXG5cbiAgICAgICAgdGhpcy51cGRhdGVTdHlsZSgpXG5cbiAgICAgICAgaWYoIGRhdGEubGVuZ3RoID09PSAwICkgcmV0dXJuXG5cbiAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2l0KCd2aWV3JykgKSB7XG4gICAgICAgICAgICBsZXQgdmlld05hbWUgPSB0aGlzLm1vZGVsLmdpdCgndmlldycpXG4gICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9XG4gICAgICAgICAgICAgICAgZGF0YS5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgICAgICggZnJhZ21lbnQsIGRhdHVtICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5VmFsdWUgPSBkYXR1bVsgdGhpcy5rZXkgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uLnN0b3JlWyB0aGlzLmtleSBdWyBrZXlWYWx1ZSBdID0gZGF0dW1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtVmlld3NbIGtleVZhbHVlIF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFjdG9yeS5jcmVhdGUoIHZpZXdOYW1lLCB7IG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLmNvbGxlY3Rpb24ubW9kZWwgKS5jb25zdHJ1Y3RvciggZGF0dW0gKSwgc3RvcmVGcmFnbWVudDogdHJ1ZSB9IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCAnZGVsZXRlZCcsICgpID0+IHRoaXMub25EZWxldGVkKCBkYXR1bSApIClcblxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoIHRoaXMuaXRlbVZpZXdzWyBrZXlWYWx1ZSBdLmZyYWdtZW50LmZpcnN0Q2hpbGQgKSBmcmFnbWVudC5hcHBlbmRDaGlsZCggdGhpcy5pdGVtVmlld3NbIGtleVZhbHVlIF0uZnJhZ21lbnQuZmlyc3RDaGlsZCApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJhZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICB0aGlzLmVscy5saXN0LmFwcGVuZENoaWxkKCBmcmFnbWVudCApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLmxpc3QgfSxcbiAgICAgICAgICAgICAgICByZW5kZXJTdWJ2aWV3czogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogZGF0YS5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgICAgICggbWVtbywgZGF0dW0gKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXlWYWx1ZSA9IGRhdHVtWyB0aGlzLmtleSBdXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb24uc3RvcmVbIHRoaXMua2V5IF1bIGtleVZhbHVlIF0gPSBkYXR1bVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbW8gKyB0aGlzLmdldEl0ZW1UZW1wbGF0ZVJlc3VsdCgga2V5VmFsdWUsIGRhdHVtIClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmKCB0aGlzLm1vZGVsLmdpdCgnc2Nyb2xsUGFnaW5hdGlvbicpICkgeyB0aGlzLnNjcm9sbEhlaWdodCA9IHRoaXMuZWxzLmxpc3Quc2Nyb2xsSGVpZ2h0OyB0aGlzLm9mZnNldEhlaWdodCA9IHRoaXMuZWxzLmxpc3Qub2Zmc2V0SGVpZ2h0IH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSB0aGlzLm1vZGVsLmdpdCgnY29sbGVjdGlvbicpIHx8IE9iamVjdC5jcmVhdGUoIHRoaXMuTW9kZWwgKVxuICAgICAgICB0aGlzLmtleSA9IHRoaXMuY29sbGVjdGlvbi5tZXRhLmtleVxuXG4gICAgICAgIGlmKCB0aGlzLmNvbGxlY3Rpb24gKSB0aGlzLmNvbGxlY3Rpb24uc3RvcmUgPSB7IFsgdGhpcy5rZXkgXTogeyB9IH1cblxuICAgICAgICBpZiggdGhpcy5tb2RlbC5naXQoJ2RlbGV0ZScpICkge1xuICAgICAgICAgICAgdGhpcy5kZWxldGVJY29uID0gdGhpcy5Gb3JtYXQuR2V0SWNvbignZ2FyYmFnZScpXG4gICAgICAgICAgICB0aGlzLmVscy5saXN0LmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0XG4gICAgICAgICAgICAgICAgaWYoIHRhcmdldC50YWdOYW1lID09PSAnc3ZnJyAmJiB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdnYXJiYWdlJykgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCggJ2RlbGV0ZUNsaWNrZWQnLCB0aGlzLmNvbGxlY3Rpb24uc3RvcmVbIHRoaXMua2V5IF1bIHRhcmdldC5jbG9zZXN0KCdMSScpLmdldEF0dHJpYnV0ZSgnZGF0YS1rZXknKSBdIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCB0aGlzLm1vZGVsLmdpdCgnZmV0Y2gnKSApIHRoaXMuZmV0Y2goKS5jYXRjaCggdGhpcy5FcnJvciApXG5cbiAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2l0KCdzY3JvbGxQYWdpbmF0aW9uJykgKSB0aGlzLmluaXRpYWxpemVTY3JvbGxQYWdpbmF0aW9uKClcblxuICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlKClcblxuICAgICAgICBpZiggdGhpcy5jb2xsZWN0aW9uLmRhdGEubGVuZ3RoICkgdGhpcy5wb3B1bGF0ZUxpc3QoKVxuXG4gICAgICAgIGlmKCB0aGlzLm1vZGVsLmdpdCgnZHJhZ2dhYmxlJykgKSB0aGlzLmluaXRpYWxpemVEcmFnRHJvcCgpXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgcmVtb3ZlKCBkYXR1bSApIHtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLnJlbW92ZSggZGF0dW0gKVxuXG4gICAgICAgIHRoaXMudXBkYXRlU3R5bGUoKVxuXG4gICAgICAgIGlmKCB0aGlzLm1vZGVsLmdpdCgndmlldycpICkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuaXRlbVZpZXdzWyBkYXR1bVsgdGhpcy5rZXkgXSBdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuZWxzLmxpc3QucXVlcnlTZWxlY3RvciggYFtkYXRhLWtleT1cIiR7ZGF0dW1bIHRoaXMua2V5IF19XCJdYCApXG5cbiAgICAgICAgICAgIGlmKCBjaGlsZCApIHRoaXMuZWxzLmxpc3QucmVtb3ZlQ2hpbGQoIGNoaWxkIClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHNob3coKSB7XG4gICAgICAgIGlmKCB0aGlzLmVscy5yZXNldEJ0biApIHRoaXMuZWxzLnJlc2V0QnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGRlbicpXG4gICAgICAgIGlmKCB0aGlzLmVscy5zYXZlQnRuICkgdGhpcy5lbHMuc2F2ZUJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdmZC1oaWRkZW4nKVxuICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSggU3VwZXIuc2hvdywgdGhpcywgWyBdIClcbiAgICB9LFxuXG4gICAgc2hvd0xpc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3dFbCggdGhpcy5lbHMubGlzdCApXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMuZWxzLnRvZ2dsZS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1oaWRkZW4nKSApIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgc2hvd0Ryb3BwYWJsZSggdHlwZSApIHtcbiAgICAgICAgdGhpcy5lbHMubGlzdC5jbGFzc0xpc3QuYWRkKCdpcy1kcm9wcGFibGUnKVxuICAgICAgICBBcnJheS5mcm9tKCB0aGlzLmVscy5saXN0LmNoaWxkcmVuICkuZm9yRWFjaCggY2hpbGQgPT4ge1xuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnQoICdpdGVtJywgJ21vdXNlZW50ZXInLCBjaGlsZCApICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50KCAnaXRlbScsICdtb3VzZWxlYXZlJywgY2hpbGQgKSAgICAgICAgICAgXG4gICAgICAgICAgICBjaGlsZC5hcHBlbmRDaGlsZCggdGhpcy5odG1sVG9GcmFnbWVudChgPGRpdiBjbGFzcz1cImRyYWdcIj5EcmFnIGhlcmUgdG8gbW92ZSAke3R5cGV9PC9kaXY+YCkgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgdW5oaWRlSXRlbXMoKSB7XG4gICAgICAgIFByb21pc2UuYWxsKCBBcnJheS5mcm9tKCB0aGlzLmVscy5saXN0LnF1ZXJ5U2VsZWN0b3JBbGwoYGxpLmZkLWhpZGRlbmApICkubWFwKCBlbCA9PiB0aGlzLnNob3dFbChlbCkgKSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgdXBkYXRlKCBpdGVtcyApIHtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLmNvbnN0cnVjdG9yKCBpdGVtcywgeyBzdG9yZUJ5OiBbIHRoaXMua2V5IF0gfSApXG5cbiAgICAgICAgaWYoIHRoaXMuaXRlbVRlbXBsYXRlICkgcmV0dXJuIHRoaXMucmVtb3ZlQ2hpbGRyZW4oIHRoaXMuZWxzLmxpc3QgKS5wb3B1bGF0ZUxpc3QoKVxuXG4gICAgICAgIHRoaXMuZW1wdHkoKVxuICAgICAgICBcbiAgICAgICAgT2JqZWN0LmFzc2lnbiggdGhpcywgeyBpdGVtVmlld3M6IHsgfSB9ICkucG9wdWxhdGVMaXN0KClcbiAgICAgICAgXG4gICAgICAgIC8vd2luZG93LnNjcm9sbCggeyBiZWhhdmlvcjogJ3Ntb290aCcsIHRvcDogdGhpcy5lbHMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCAtIDUwIH0gKVxuICAgICAgICB0aGlzLmVscy5jb250YWluZXIuc2Nyb2xsSW50b1ZpZXcoIHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0gKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHVwZGF0ZUl0ZW0oIG1vZGVsICkge1xuICAgICAgICBjb25zdCBrZXlWYWx1ZSA9IG1vZGVsLmdpdCh0aGlzLmtleSlcblxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24uX3B1dCgga2V5VmFsdWUsIG1vZGVsLmRhdGEgKVxuICAgICAgICBcbiAgICAgICAgaWYoICF0aGlzLm1vZGVsLmdpdCgndmlldycpICkge1xuICAgICAgICAgICAgbGV0IG9sZEl0ZW0gPSB0aGlzLmVscy5saXN0LnF1ZXJ5U2VsZWN0b3IoYCpbZGF0YS1rZXk9XCIke2tleVZhbHVlfVwiXWApXG4gICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgbWV0aG9kOiAnaW5zZXJ0QmVmb3JlJywgZWw6IG9sZEl0ZW0gfSxcbiAgICAgICAgICAgICAgICByZW5kZXJTdWJ2aWV3czogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy5nZXRJdGVtVGVtcGxhdGVSZXN1bHQoIGtleVZhbHVlLCBtb2RlbC5kYXRhIClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgdGhpcy5lbHMubGlzdC5yZW1vdmVDaGlsZCggb2xkSXRlbSApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlU3R5bGUoKSB7XG4gICAgICAgIHRoaXMuZWxzLmxpc3QuY2xhc3NMaXN0LnRvZ2dsZSggJ25vLWl0ZW1zJywgdGhpcy5jb2xsZWN0aW9uLmRhdGEubGVuZ3RoID09PSAwIClcbiAgICB9XG5cbn0gKVxuIiwiY29uc3QgQ3VzdG9tQ29udGVudCA9IHJlcXVpcmUoJy4vdXRpbC9DdXN0b21Db250ZW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwgQ3VzdG9tQ29udGVudCwge1xuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGxlZ2VuZDogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBtb2RlbDogcmVxdWlyZSgnLi4vbW9kZWxzL0xvY2F0aW9ucycpLFxuXG4gICAgbW9kZWxzOiB7XG4gICAgICAgIGdyb3VwTG9jYXRpb246IHJlcXVpcmUoJy4uL21vZGVscy9DdXJyZW50U2hhcmUnKSxcbiAgICAgICAgZmFybWVyTWFya2V0OiByZXF1aXJlKCcuLi9tb2RlbHMvRmFybWVyTWFya2V0JyksXG4gICAgICAgIHJldGFpbE91dGxldDogcmVxdWlyZSgnLi4vbW9kZWxzL1JldGFpbE91dGxldCcpLFxuICAgICAgICByZXN0YXVyYW50OiByZXF1aXJlKCcuLi9tb2RlbHMvUmVzdGF1cmFudCcpLFxuICAgICAgICBmYXJtUGlja3VwOiByZXF1aXJlKCcuLi9tb2RlbHMvRmFybVBpY2t1cCcpXG4gICAgfSxcblxuICAgIHRlbXBsYXRlczoge1xuICAgICAgICBpbmZvV2luZG93OiByZXF1aXJlKCcuL3RlbXBsYXRlcy9JbmZvV2luZG93JyksXG4gICAgICAgIGxvY2F0aW9uOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9Mb2NhdGlvbicpXG4gICAgfSxcblxuICAgIGNyZWF0ZURlbGl2ZXJ5UmFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IG92ZXJsYXlDb2xvciA9IHRoaXMubW9kZWwuYXR0cmlidXRlcy5maW5kKCBhdHRyID0+IGF0dHIubmFtZSA9PT0gJ2RlbGl2ZXJ5UmFuZ2UnICkuY29sb3JcblxuICAgICAgICB0aGlzLmRlbGl2ZXJ5UmFuZ2UgPSBuZXcgZ29vZ2xlLm1hcHMuUG9seWdvbigge1xuICAgICAgICAgICAgcGF0aHM6IHRoaXMubW9kZWwuZGF0YS5kZWxpdmVyeVJhbmdlQ29vcmRzLFxuICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IG92ZXJsYXlDb2xvcixcbiAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IC4zLFxuICAgICAgICAgICAgc3Ryb2tlV2VpZ2h0OiAxLFxuICAgICAgICAgICAgZmlsbENvbG9yOiBvdmVybGF5Q29sb3IsXG4gICAgICAgICAgICBmaWxsT3BhY2l0eTogLjMsXG4gICAgICAgICAgICBjbGlja2FibGU6IGZhbHNlXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMuZGVsaXZlcnlSYW5nZS5zZXRNYXAoIHRoaXMubWFwIClcbiAgICB9LFxuXG4gICAgY3JlYXRlTWFya2VycyggZGF0YSwgY2F0ZWdvcnkgKSB7XG4gICAgICAgIHRoaXMuaWNvbnNbIGNhdGVnb3J5IF0gPSB0aGlzLmdldEljb24oIGNhdGVnb3J5IClcbiAgICAgICAgdGhpcy5tYXJrZXJzWyBjYXRlZ29yeSBdID0gWyBdXG5cbiAgICAgICAgZGF0YS5mb3JFYWNoKCBkYXR1bSA9PiB7XG4gICAgICAgICAgICBpZiggIWRhdHVtLmxvY2F0aW9uICkgcmV0dXJuXG5cbiAgICAgICAgICAgIGNvbnN0IGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdygge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMudGVtcGxhdGVzLmluZm9XaW5kb3coIGRhdHVtICksXG4gICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgY29uc3QgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcigge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7IGxhdDogZGF0dW0ubG9jYXRpb25bMF0sIGxuZzogZGF0dW0ubG9jYXRpb25bMV0gfSxcbiAgICAgICAgICAgICAgICBtYXA6IHRoaXMubWFwLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaWNvbjogdGhpcy5pY29uc1sgY2F0ZWdvcnkgXSxcbiAgICAgICAgICAgICAgICB0aXRsZTogZGF0dW0ubmFtZVxuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgIHRoaXMubWFya2Vyc1sgY2F0ZWdvcnkgXS5wdXNoKCBtYXJrZXIgKVxuXG4gICAgICAgICAgICBtYXJrZXIuYWRkTGlzdGVuZXIoICdjbGljaycsICgpID0+IGluZm93aW5kb3cub3BlbiggdGhpcy5tYXAsIG1hcmtlciApIClcblxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgZmV0Y2hBbmRSZW5kZXIoKSB7XG4gICAgICAgIGxldCBjaGFpbiA9IFByb21pc2UucmVzb2x2ZSgpXG5cbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMubW9kZWxzICkuZm9yRWFjaCggbmFtZSA9PiB7XG4gICAgICAgICAgICBjaGFpbiA9IGNoYWluLnRoZW4oICgpID0+IFxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxzWyBuYW1lIF0uZ2V0KClcbiAgICAgICAgICAgICAgICAudGhlbiggKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9PT0gJ2dyb3VwTG9jYXRpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMubW9kZWxzLmdyb3VwTG9jYXRpb24uZ2V0Q3VycmVudEdyb3VwRHJvcG9mZnMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBuYW1lID09PSAnZmFybVBpY2t1cCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMubW9kZWxzLmZhcm1QaWNrdXAuZ2V0SG91cnMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLnRoZW4oIGRyb3BvZmZEYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kZWxBdHRyID0gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLmZpbmQoIGF0dHIgPT4gYXR0ci5uYW1lID09PSBuYW1lICksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gZHJvcG9mZkRhdGEgfHwgdGhpcy5tb2RlbHNbIG5hbWUgXS5kYXRhXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRMaXN0TG9jYXRpb25zKCBkYXRhLCB0aGlzLmVsc1sgbW9kZWxBdHRyLmVsIF0gKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU1hcmtlcnMoIGRhdGEsIG5hbWUgKVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIC5jYXRjaCggZSA9PiBQcm9taXNlLnJlc29sdmUoIGNvbnNvbGUubG9nKCBgRmFpbGVkIHRvIHJldHJpZXZlICR7bmFtZX0gZGF0YS5gICkgKSApXG4gICAgICAgICAgICApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBnZXRJY29uKCBjYXRlZ29yeSApIHtcbiAgICAgICAgaWYoIGNhdGVnb3J5ID09PSAnZmFybVBpY2t1cCcgKSByZXR1cm4gJy9zdGF0aWMvaW1nL2Zhdmljb24ucG5nJ1xuXG4gICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLmZpbmQoIGF0dHIgPT4gY2F0ZWdvcnkgPT09IGF0dHIubmFtZSApLmNvbG9yXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGg6IGdvb2dsZS5tYXBzLlN5bWJvbFBhdGguQ0lSQ0xFLFxuICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgZmlsbENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAxLFxuICAgICAgICAgICAgc2NhbGU6IDRcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpbml0TWFwKCkge1xuICAgICAgICBjb25zdCBtYXBPcHRzID0ge1xuICAgICAgICAgICAgY2VudGVyOiB7IGxhdDogMzkuNzU4OTQ4LCBsbmc6IC04NC4xOTE2MDcgfSxcbiAgICAgICAgICAgIHpvb206IDEwLFxuICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoIHRoaXMuZWxzLm1hcCwgbWFwT3B0cyApXG5cbiAgICAgICAgdGhpcy5tYXJrZXJzID0geyB9XG4gICAgICAgIHRoaXMuaWNvbnMgPSB7IH1cblxuICAgICAgICB0aGlzLmNyZWF0ZURlbGl2ZXJ5UmFuZ2UoKVxuXG4gICAgICAgIHRoaXMubWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfTEVGVF0ucHVzaCggdGhpcy5lbHMubGVnZW5kIClcblxuICAgICAgICB0aGlzLmZldGNoQW5kUmVuZGVyKClcbiAgICB9LFxuXG4gICAgaW5zZXJ0TGlzdExvY2F0aW9ucyggZGF0YSwgZWwgKSB7XG4gICAgICAgIGRhdGEuZm9yRWFjaCggZGF0dW0gPT5cbiAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5sb2NhdGlvbiggZGF0dW0gKSxcbiAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgZWwgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgb25MZWdlbmRDbGljayggZSApIHtcbiAgICAgICAgaWYoIGUudGFyZ2V0LnRhZ05hbWUgIT09IFwiSU5QVVRcIiApIHJldHVyblxuXG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSxcbiAgICAgICAgICAgIGNoZWNrZWQgPSBlLnRhcmdldC5jaGVja2VkXG5cbiAgICAgICAgaWYoIGNhdGVnb3J5ID09PSAnZGVsaXZlcnlSYW5nZScgKSByZXR1cm4gdGhpcy50b2dnbGVEZWxpdmVyeVJhbmdlKCBjaGVja2VkIClcblxuICAgICAgICB0aGlzLnRvZ2dsZU1hcmtlckNhdGVnb3J5KCBjYXRlZ29yeSwgY2hlY2tlZCApXG5cbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgaWYoIHdpbmRvdy5nb29nbGUgKSB7IHRoaXMuaW5pdE1hcCgpIH0gZWxzZSB7IHdpbmRvdy5pbml0R01hcCA9IHRoaXMuaW5pdE1hcCB9XG5cbiAgICAgICAgcmV0dXJuIEN1c3RvbUNvbnRlbnQucG9zdFJlbmRlci5jYWxsKHRoaXMpXG4gICAgfSxcblxuICAgIHRlbXBsYXRlT3B0cygpIHsgcmV0dXJuIHsgY2F0ZWdvcmllczogdGhpcy5tb2RlbC5hdHRyaWJ1dGVzIH0gfSxcblxuICAgIHRvZ2dsZURlbGl2ZXJ5UmFuZ2UoIGNoZWNrZWQgKSB7XG4gICAgICAgIHRoaXMuZGVsaXZlcnlSYW5nZS5zZXRNYXAoIGNoZWNrZWQgPyB0aGlzLm1hcCA6IG51bGwgKVxuICAgIH0sXG5cbiAgICB0b2dnbGVNYXJrZXJDYXRlZ29yeSggY2F0ZWdvcnksIGNoZWNrZWQgKSB7XG4gICAgICAgIHRoaXMubWFya2Vyc1sgY2F0ZWdvcnkgXS5mb3JFYWNoKCBtYXJrZXIgPT4gbWFya2VyLnNldE1hcCggY2hlY2tlZCA/IHRoaXMubWFwIDogbnVsbCApIClcbiAgICB9LFxuXG59ICkiLCJ2YXIgTXlWaWV3ID0gcmVxdWlyZSgnLi9NeVZpZXcnKSxcbiAgICBMb2dpbiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTXlWaWV3LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9O1xuXG5PYmplY3QuYXNzaWduKCBMb2dpbi5wcm90b3R5cGUsIE15Vmlldy5wcm90b3R5cGUsIHJlcXVpcmUoJy4vdXRpbC9Gb3JtJykucHJvdG90eXBlLCB7XG5cbiAgICBjaGVja0ZvckVudGVyKCBlICkgeyBpZiggZS5rZXlDb2RlID09PSAxMyApIHRoaXMubG9naW4oKSB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdsb2dpbkJ0bic6IHsgbWV0aG9kOiAnbG9naW4nIH1cbiAgICB9LFxuXG4gICAgZmllbGRzOiBbIHtcbiAgICAgICAgbmFtZTogXCJlbWFpbFwiLFxuICAgICAgICBsYWJlbDogJ0VtYWlsJyxcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24oIHZhbCApIHsgcmV0dXJuIHRydWUgfVxuICAgIH0sIHtcbiAgICAgICAgbmFtZTogXCJwYXNzd29yZFwiLFxuICAgICAgICBsYWJlbDogJ1Bhc3N3b3JkJyxcbiAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgZXJyb3I6IFwiUGFzc3dvcmRzIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzIGxvbmcuXCIsXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiggdmFsICkgeyByZXR1cm4gdmFsLmxlbmd0aCA+PSA2IH1cbiAgICB9IF0sXG5cbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7IHJldHVybiB7IGZpZWxkczogdGhpcy5maWVsZHMgfSB9LFxuXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgaWYoIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gXCIvYWRtaW5cIiB8fCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPT09IFwiL2FkbWluLXBsdXNcIiApIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oIHRoaXMuZmllbGRzWzBdLCB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdFbWFpbCBvciBVc2VybmFtZScsXG4gICAgICAgICAgICAgICAgZXJyb3I6IFwiVXNlcm5hbWUgbXVzdCBiZSBhdCBsZWFzdCA2IGNoYXJhY3RlcnMgbG9uZy5cIixcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZTogdmFsID0+IHZhbC5sZW5ndGggPj0gNiB9IClcbiAgICAgICAgfVxuXG4gICAgICAgIE15Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMpXG4gICAgfSxcblxuICAgIGxvZ2luKCkgeyB0aGlzLnN1Ym1pdEZvcm0oIHsgcmVzb3VyY2U6IFwiYXV0aFwiIH0gKSB9LFxuXG4gICAgbmFtZTogXCJMb2dpblwiLFxuXG4gICAgb25TdWJtaXNzaW9uUmVzcG9uc2UoIHJlc3BvbnNlICkge1xuICAgICAgICBcbiAgICAgICAgaWYoIE9iamVjdC5rZXlzKCByZXNwb25zZSApLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLmludmFsaWRMb2dpbkVycm9yKCByZXNwb25zZSApLCBpbnNlcnRpb246IHsgJGVsOiB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIgfSB9IClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy4kKGRvY3VtZW50KS5vZmYoICdrZXl1cCcsIHRoaXMuY2hlY2tGb3JFbnRlci5iaW5kKHRoaXMpIClcbiAgICBcbiAgICAgICAgcmVxdWlyZSgnLi4vbW9kZWxzL1VzZXInKS5zZXQoIHJlc3BvbnNlICk7XG4gICAgICAgIHRoaXMuZW1pdCggXCJzdWNjZXNzXCIsIHJlc3BvbnNlICk7XG4gICAgICAgIHRoaXMuaGlkZSgpLmRvbmUoKTtcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmZpbmQoICdpbnB1dCcgKS5vbiggJ2ZvY3VzJywgdGhpcy5yZW1vdmVFcnJvcnMuYmluZCh0aGlzKSApXG4gICAgICAgIHRoaXMuJChkb2N1bWVudCkub24oICdrZXl1cCcsIHRoaXMuY2hlY2tGb3JFbnRlci5iaW5kKHRoaXMpIClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2xvZ2luJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApXG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBMb2dpbigpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBDdXN0b21lcjogcmVxdWlyZSgnLi4vbW9kZWxzL0N1c3RvbWVyJyksXG4gICAgRGVsaXZlcnk6IHJlcXVpcmUoJy4uL21vZGVscy9EZWxpdmVyeScpLFxuXG4gICAgcGF0Y2hNZW1iZXJTaGFyZSgpIHtcbiAgICAgICAgY29uc3Qgd2Vla1BhdGNoID0gdGhpcy52aWV3cy53ZWVrT3B0aW9ucy5nZXRQYXRjaERhdGEoKVxuXG4gICAgICAgIGxldCB3ZWVrRGV0YWlsID0gYGAsXG4gICAgICAgICAgICBlbWFpbFRvID0gWyB0aGlzLnNlbGVjdGVkQ3VzdG9tZXIucGVyc29uLmRhdGEuZW1haWwgXVxuXG4gICAgICAgIGlmKCB0aGlzLnNlbGVjdGVkQ3VzdG9tZXIucGVyc29uLmRhdGEuc2Vjb25kYXJ5RW1haWwgKSBlbWFpbFRvLnB1c2goIHRoaXMuc2VsZWN0ZWRDdXN0b21lci5wZXJzb24uZGF0YS5zZWNvbmRhcnlFbWFpbCApXG5cbiAgICAgICAgaWYoIHdlZWtQYXRjaC5hZGRlZERhdGVzLmxlbmd0aCB8fCB3ZWVrUGF0Y2gucmVtb3ZlZERhdGVzLmxlbmd0aCApIHsgd2Vla0RldGFpbCArPSBgICggYCB9XG5cbiAgICAgICAgaWYoIHdlZWtQYXRjaC5hZGRlZERhdGVzLmxlbmd0aCApIHtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gd2Vla1BhdGNoLmFkZGVkRGF0ZXMubWFwKCBkYXRlID0+IGRhdGUuc2xpY2UoNSkgKS5qb2luKCcsJylcbiAgICAgICAgICAgIHdlZWtEZXRhaWwgKz0gYEFkZGVkIFdlZWtzOiAke2Rlc2NyaXB0aW9ufWBcbiAgICAgICAgICAgIGlmKCB3ZWVrUGF0Y2gucmVtb3ZlZERhdGVzLmxlbmd0aCApIHsgd2Vla0RldGFpbCArPSBgLCBgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYoIHdlZWtQYXRjaC5yZW1vdmVkRGF0ZXMubGVuZ3RoICkge1xuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSB3ZWVrUGF0Y2gucmVtb3ZlZERhdGVzLm1hcCggZGF0ZSA9PiBkYXRlLnNsaWNlKDUpICkuam9pbignLCcpXG4gICAgICAgICAgICB3ZWVrRGV0YWlsICs9IGBSZW1vdmVkIFdlZWtzOiAke2Rlc2NyaXB0aW9ufWBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYoIHdlZWtQYXRjaC5hZGRlZERhdGVzLmxlbmd0aCB8fCB3ZWVrUGF0Y2gucmVtb3ZlZERhdGVzLmxlbmd0aCApIHsgd2Vla0RldGFpbCArPSBgICkgYCB9XG5cbiAgICAgICAgdGhpcy5YaHIoIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLm1lbWJlclNoYXJlSWQsXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcsXG4gICAgICAgICAgICByZXNvdXJjZTogJ21lbWJlci1vcmRlcicsXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSgge1xuICAgICAgICAgICAgICAgIGFkanVzdG1lbnQ6IHRoaXMudmlld3Muc2hhcmVQYXRjaC5nZXRQYXRjaERhdGEoKSxcbiAgICAgICAgICAgICAgICBtZW1iZXJTaGFyZUlkOiB0aGlzLm1lbWJlclNoYXJlSWQsXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5zZWxlY3RlZEN1c3RvbWVyLnBlcnNvbi5kYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgb3JkZXJPcHRpb25zOiB0aGlzLnZpZXdzLm9yZGVyT3B0aW9ucy5nZXRQYXRjaERhdGEoKSxcbiAgICAgICAgICAgICAgICBzaGFyZUxhYmVsOiB0aGlzLnNlbGVjdGVkU2hhcmUubGFiZWwsXG4gICAgICAgICAgICAgICAgd2Vla09wdGlvbnM6IHdlZWtQYXRjaC5hbGxSZW1vdmVkLFxuICAgICAgICAgICAgICAgIHdlZWtEZXRhaWwsXG4gICAgICAgICAgICAgICAgdG86IGVtYWlsVG9cbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9IClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdzdWNjZXNzJywgJ09yZGVyIFVwZGF0ZWQnIClcbiAgICAgICAgICAgIHRoaXMudmlld3Muc2Vhc29ucy5zZWxlY3QoIHRoaXMubWVtYmVyU2hhcmVJZCApXG4gICAgICAgIH0gKVxuICAgICAgICAuY2F0Y2goIGUgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coIGUuc3RhY2sgfHwgZSApXG4gICAgICAgICAgICB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnZXJyb3InLCAnVXBkYXRlIEZhaWxlZCcgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcblxuICAgICAgICB0aGlzLnZpZXdzLm1lbWJlclR5cGVhaGVhZC5mb2N1cygpXG5cbiAgICAgICAgdGhpcy52aWV3cy5tZW1iZXJUeXBlYWhlYWQub24oICdjdXN0b21lclNlbGVjdGVkJywgY3VzdG9tZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEN1c3RvbWVyID0gY3VzdG9tZXJcbiAgICAgICAgICAgIHRoaXMudmlld3MuY3VzdG9tZXJJbmZvLnJlc2V0KCBjdXN0b21lciApXG4gICAgICAgICAgICB0aGlzLnZpZXdzLnNlYXNvbnMudXBkYXRlKCBjdXN0b21lciApXG4gICAgICAgICAgICB0aGlzLnZpZXdzLm9yZGVyT3B0aW9ucy5oaWRlKClcbiAgICAgICAgICAgIHRoaXMudmlld3Mud2Vla09wdGlvbnMuaGlkZSgpXG4gICAgICAgICAgICB0aGlzLnZpZXdzLnRyYW5zYWN0aW9ucy5oaWRlKClcbiAgICAgICAgICAgIHRoaXMudmlld3Muc2hhcmVQYXRjaC5yZXNldCgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMudmlld3Muc2Vhc29ucy5vbiggJ3NlbGVjdGVkJywgZGF0YSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdzLnNoYXJlUGF0Y2gucmVzZXQoKVxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFNoYXJlID0gZGF0YS5zaGFyZVxuICAgICAgICAgICAgdGhpcy5tZW1iZXJTaGFyZUlkID0gdGhpcy5zZWxlY3RlZFNoYXJlLm1lbWJlcnNoYXJlaWRcblxuICAgICAgICAgICAgdGhpcy5EZWxpdmVyeS5nZXQoIHtcbiAgICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgICAgICBtZW1iZXJzaGFyZWlkOiBkYXRhLnNoYXJlLm1lbWJlcnNoYXJlaWQsXG4gICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJ5b3B0aW9uaWQ6IHsgb3BlcmF0aW9uOiAnam9pbicsIHZhbHVlOiB7IHRhYmxlOiAnZGVsaXZlcnlvcHRpb24nLCBjb2x1bW46ICdpZCcgfSB9LFxuICAgICAgICAgICAgICAgICAgICBncm91cGRyb3BvZmZpZDogeyBvcGVyYXRpb246ICdsZWZ0Sm9pbicsIHZhbHVlOiB7IHRhYmxlOiAnZ3JvdXBkcm9wb2ZmJywgY29sdW1uOiAnaWQnIH0gfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgICAgICAvL1RPRE86SWYgbm8gZGVsaXZlcnksIFRvYXN0LCBvciBzb21lIFVJXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbiggZGF0YSwgeyBkZWxpdmVyeTogdGhpcy5EZWxpdmVyeSB9IClcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzLm9yZGVyT3B0aW9ucy51cGRhdGUoIGRhdGEgKS50aGVuKCAoKSA9PiB0aGlzLnZpZXdzLnNoYXJlUGF0Y2guc2V0T3JpZ2luYWxXZWVrbHlQcmljZSggdGhpcy52aWV3cy5vcmRlck9wdGlvbnMub3JpZ2luYWxXZWVrbHlQcmljZSApICkuY2F0Y2godGhpcy5FcnJvcilcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzLndlZWtPcHRpb25zLnVwZGF0ZSggZGF0YSApLnRoZW4oICgpID0+IHRoaXMudmlld3Muc2hhcmVQYXRjaC5zZXRXZWVrc0FmZmVjdGVkKCB0aGlzLnZpZXdzLndlZWtPcHRpb25zLmdldFdlZWtzQWZmZWN0ZWQoKSApICkuY2F0Y2godGhpcy5FcnJvcilcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzLnRyYW5zYWN0aW9ucy51cGRhdGUoIGRhdGEgKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMudmlld3Mub3JkZXJPcHRpb25zLm9uKCAnZGVsaXZlcnlDaGFuZ2VkJywgZGF0YSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdzLnNoYXJlUGF0Y2guc2V0V2Vla3NBZmZlY3RlZCggdGhpcy52aWV3cy53ZWVrT3B0aW9ucy5nZXRXZWVrc0FmZmVjdGVkKCkgKVxuICAgICAgICAgICAgdGhpcy52aWV3cy53ZWVrT3B0aW9ucy51cGRhdGVEZWxpdmVyeSggZGF0YSApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMudmlld3Mub3JkZXJPcHRpb25zLm9uKCAncmVzZXQnLCBtb2RlbCA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdzLndlZWtPcHRpb25zLnVwZGF0ZSggbW9kZWwgKVxuICAgICAgICAgICAgdGhpcy52aWV3cy5zaGFyZVBhdGNoLm9uT3B0aW9uc1Jlc2V0KClcbiAgICAgICAgfSApXG4gICAgICAgIFxuICAgICAgICB0aGlzLnZpZXdzLndlZWtPcHRpb25zLm9uKCAncmVzZXQnLCBtb2RlbCA9PiB0aGlzLnZpZXdzLnNoYXJlUGF0Y2gub25XZWVrc1Jlc2V0KCkgKVxuXG4gICAgICAgIHRoaXMudmlld3Mub3JkZXJPcHRpb25zLm9uKCAnYWRqdXN0bWVudCcsIGRhdGEgPT4gdGhpcy52aWV3cy5zaGFyZVBhdGNoLm9uT3B0aW9uc1VwZGF0ZSggZGF0YSApIClcbiAgICAgICAgdGhpcy52aWV3cy53ZWVrT3B0aW9ucy5vbiggJ2FkanVzdG1lbnQnLCBkYXRhID0+IHRoaXMudmlld3Muc2hhcmVQYXRjaC5vbldlZWtVcGRhdGUoIGRhdGEgKSApXG5cbiAgICAgICAgdGhpcy52aWV3cy5zaGFyZVBhdGNoLm9uKCAncGF0Y2hNZW1iZXJTaGFyZScsICgpID0+IHRoaXMucGF0Y2hNZW1iZXJTaGFyZSgpIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiB0cnVlLFxuICAgIFxuICAgIHJlcXVpcmVzUm9sZTogJ2FkbWluJyxcblxuICAgIFxuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIEF1dG9Db21wbGV0ZTogcmVxdWlyZSgnLi4vQXV0b0NvbXBsZXRlJyksXG5cbiAgICBDdXN0b21lcjogcmVxdWlyZSgnLi4vbW9kZWxzL0N1c3RvbWVyJyksXG5cbiAgICBmb2N1cygpIHsgdGhpcy5lbHMuY3VzdG9tZXJJbnB1dC5mb2N1cygpIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICBuZXcgdGhpcy5BdXRvQ29tcGxldGUoIHtcbiAgICAgICAgICAgIGRlbGF5OiA1MDAsXG4gICAgICAgICAgICBzZWxlY3RvcjogdGhpcy5lbHMuY3VzdG9tZXJJbnB1dCxcbiAgICAgICAgICAgIG1pbkNoYXJzOiAzLFxuICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICAgICAgc291cmNlOiAoIHRlcm0sIHN1Z2dlc3QgKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2goICduYW1lJywgdGVybS50cmltKCksIHN1Z2dlc3QgKVxuICAgICAgICAgICAgICAgIC50aGVuKCBmb3VuZCA9PiBmb3VuZCA/IFByb21pc2UucmVzb2x2ZSh0cnVlKSA6IHRoaXMuc2VhcmNoKCAnZW1haWwnLCB0ZXJtLCBzdWdnZXN0ICkgKVxuICAgICAgICAgICAgICAgIC50aGVuKCBmb3VuZCA9PiBmb3VuZCA/IFByb21pc2UucmVzb2x2ZSh0cnVlKSA6IHRoaXMuc2VhcmNoKCAnc2Vjb25kYXJ5RW1haWwnLCB0ZXJtLCBzdWdnZXN0ICkgKVxuICAgICAgICAgICAgICAgIC50aGVuKCBmb3VuZCA9PiBmb3VuZCA/IFByb21pc2UucmVzb2x2ZSh0cnVlKSA6IHN1Z2dlc3QoW10pIClcbiAgICAgICAgICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uU2VsZWN0OiAoIGUsIHRlcm0sIGl0ZW0gKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEN1c3RvbWVyID0gdGhpcy5DdXN0b21lci5kYXRhLmZpbmQoIGRhdHVtID0+IGRhdHVtLnBlcnNvbi5kYXRhWyB0aGlzLmF0dHIgXSA9PT0gdGVybSApXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCAnY3VzdG9tZXJTZWxlY3RlZCcsIHRoaXMuc2VsZWN0ZWRDdXN0b21lciApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgc2VhcmNoKCBhdHRyLCB0ZXJtLCBzdWdnZXN0ICkge1xuICAgICAgICBjb25zb2xlLmxvZyggJ3NlYXJjaCcgKVxuICAgICAgICBjb25zb2xlLmxvZyggYXR0ciApXG4gICAgICAgIGNvbnNvbGUubG9nKCB0ZXJtIClcbiAgICAgICAgcmV0dXJuIHRoaXMuQ3VzdG9tZXIuZ2V0KCB7IHF1ZXJ5OiB7IFthdHRyXTogeyBvcGVyYXRpb246ICd+KicsIHZhbHVlOiB0ZXJtIH0sICdpZCc6IHsgb3BlcmF0aW9uOiAnam9pbicsIHZhbHVlOiB7IHRhYmxlOiAnbWVtYmVyJywgY29sdW1uOiAncGVyc29uaWQnIH0gfSB9IH0gKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coIHRoaXMuQ3VzdG9tZXIuZGF0YSApXG4gICAgICAgICAgICBpZiggISB0aGlzLkN1c3RvbWVyLmRhdGEubGVuZ3RoICkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggZmFsc2UgKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmF0dHIgPSBhdHRyICAgICAgICAgICAgXG4gICAgICAgICAgICBzdWdnZXN0KCB0aGlzLkN1c3RvbWVyLmRhdGEubWFwKCBkYXR1bSA9PiBkYXR1bS5wZXJzb24uZGF0YVsgYXR0ciBdICkgKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggdHJ1ZSApXG4gICAgICAgIH0gKVxuICAgIH1cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwgcmVxdWlyZSgnLi91dGlsL0N1c3RvbUNvbnRlbnQnKSwge1xuXG59IClcbiIsInZhciBNeVZpZXcgPSBmdW5jdGlvbiggZGF0YSApIHsgcmV0dXJuIE9iamVjdC5hc3NpZ24oIHRoaXMsIGRhdGEgKS5pbml0aWFsaXplKCkgfVxuXG5PYmplY3QuYXNzaWduKCBNeVZpZXcucHJvdG90eXBlLCByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXIucHJvdG90eXBlLCB7XG5cbiAgICBDb2xsZWN0aW9uOiByZXF1aXJlKCdiYWNrYm9uZScpLkNvbGxlY3Rpb24sXG4gICAgXG4gICAgRXJyb3I6IHJlcXVpcmUoJy4uL015RXJyb3InKSxcblxuICAgIE1vZGVsOiByZXF1aXJlKCdiYWNrYm9uZScpLk1vZGVsLFxuXG4gICAgXzogcmVxdWlyZSgndW5kZXJzY29yZScpLFxuXG4gICAgJDogcmVxdWlyZSgnanF1ZXJ5JyksXG5cbiAgICBYaHI6IHJlcXVpcmUoJy4uL1hocicpLFxuXG4gICAgZGVsZWdhdGVFdmVudHMoIGtleSwgZWwgKSB7XG4gICAgICAgIHZhciB0eXBlO1xuXG4gICAgICAgIGlmKCAhIHRoaXMuZXZlbnRzWyBrZXkgXSApIHJldHVyblxuXG4gICAgICAgIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoIHRoaXMuZXZlbnRzW2tleV0gKTtcblxuICAgICAgICBpZiggdHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRFdmVudCgga2V5LCB0aGlzLmV2ZW50c1trZXldLCBlbCApO1xuICAgICAgICB9IGVsc2UgaWYoIHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XScgKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1trZXldLmZvckVhY2goIHNpbmdsZUV2ZW50ID0+IHRoaXMuYmluZEV2ZW50KCBrZXksIHNpbmdsZUV2ZW50LCBlbCApIClcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkZWxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiggdGhpcy50ZW1wbGF0ZURhdGEgJiYgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyICkge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLnJlbW92ZSgpXG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJyZW1vdmVkXCIpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZm9ybWF0OiB7XG4gICAgICAgIGNhcGl0YWxpemVGaXJzdExldHRlcjogc3RyaW5nID0+IHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKVxuICAgIH0sXG5cbiAgICBnZXRGb3JtRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZm9ybURhdGEgPSB7IH1cblxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy50ZW1wbGF0ZURhdGEgKS5mb3JFYWNoKCBrZXkgPT4ge1xuICAgICAgICAgICAgdmFyICRlbCA9IHRoaXMudGVtcGxhdGVEYXRhW2tleV0sIHZhbCA9ICRlbC52YWwoKVxuICAgICAgICAgICAgaWYoIC9JTlBVVHxURVhUQVJFQXxTRUxFQ1QvLnRlc3QoICRlbC5wcm9wKCd0YWdOYW1lJykgKSAmJiB2YWwgKSB0aGlzLmZvcm1EYXRhW2tleV0gPSB2YWxcbiAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybURhdGFcbiAgICB9LFxuXG4gICAgZ2V0Um91dGVyOiBmdW5jdGlvbigpIHsgcmV0dXJuIHJlcXVpcmUoJy4uL3JvdXRlcicpIH0sXG5cbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnM6ICgpID0+ICh7fSksXG5cbiAgICBoaWRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmhpZGUoKVxuICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBpZiggISB0aGlzLmNvbnRhaW5lciApIHRoaXMuY29udGFpbmVyID0gdGhpcy4kKCcjY29udGVudCcpXG4gICAgICAgIFxuICAgICAgICB0aGlzLnJvdXRlciA9IHRoaXMuZ2V0Um91dGVyKClcblxuICAgICAgICB0aGlzLm1vZGFsVmlldyA9IHJlcXVpcmUoJy4vbW9kYWwnKVxuXG4gICAgICAgIHRoaXMuJCh3aW5kb3cpLnJlc2l6ZSggdGhpcy5fLnRocm90dGxlKCAoKSA9PiB0aGlzLnNpemUoKSwgNTAwICkgKVxuXG4gICAgICAgIGlmKCB0aGlzLnJlcXVpcmVzTG9naW4gJiYgISB0aGlzLnVzZXIuaWQgKSB7XG4gICAgICAgICAgICByZXF1aXJlKCcuL0xvZ2luJykuc2hvdygpLm9uY2UoIFwic3VjY2Vzc1wiLCBlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggdGhpcy5yb3V0ZXIgKVxuICAgICAgICAgICAgICAgIHRoaXMucm91dGVyLm9uVXNlciggdGhpcy51c2VyIClcblxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLnJlcXVpcmVzUm9sZSAmJiAoICEgdGhpcy5fKCB0aGlzLnVzZXIuZ2V0KCdyb2xlcycpICkuY29udGFpbnMoIHRoaXMucmVxdWlyZXNSb2xlICkgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsZXJ0KCdZb3UgZG8gbm90IGhhdmUgYWNjZXNzJylcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpXG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIH0gZWxzZSBpZiggdGhpcy51c2VyLmlkICYmIHRoaXMucmVxdWlyZXNSb2xlICkge1xuICAgICAgICAgICAgaWYoICggISB0aGlzLl8oIHRoaXMudXNlci5nZXQoJ3JvbGVzJykgKS5jb250YWlucyggdGhpcy5yZXF1aXJlc1JvbGUgKSApICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbGVydCgnWW91IGRvIG5vdCBoYXZlIGFjY2VzcycpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIoKVxuICAgIH0sXG5cbiAgICBpc0hpZGRlbjogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJyB9LFxuXG4gICAgXG4gICAgbW9tZW50OiByZXF1aXJlKCdtb21lbnQnKSxcblxuICAgIG9uTmF2aWdhdGlvbiggcGF0aCApIHsgcmV0dXJuIHRoaXMuc2hvdygpIH0sXG5cbiAgICBwb3N0UmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJTdWJ2aWV3cygpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIFE6IHJlcXVpcmUoJ3EnKSxcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZSggdGhpcy5nZXRUZW1wbGF0ZU9wdGlvbnMoKSApLFxuICAgICAgICAgICAgaW5zZXJ0aW9uOiB7ICRlbDogdGhpcy5pbnNlcnRpb25FbCB8fCB0aGlzLmNvbnRhaW5lciwgbWV0aG9kOiB0aGlzLmluc2VydGlvbk1ldGhvZCB9IH0gKVxuXG4gICAgICAgIHRoaXMuc2l6ZSgpXG5cbiAgICAgICAgdGhpcy5wb3N0UmVuZGVyKClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICByZW5kZXJTdWJ2aWV3czogZnVuY3Rpb24oKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLnN1YnZpZXdzIHx8IFsgXSApLmZvckVhY2goIGtleSA9PiBcbiAgICAgICAgICAgIHRoaXMuc3Vidmlld3NbIGtleSBdLmZvckVhY2goIHN1YnZpZXdNZXRhID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzWyBzdWJ2aWV3TWV0YS5uYW1lIF0gPSBuZXcgc3Vidmlld01ldGEudmlldyggeyBjb250YWluZXI6IHRoaXMudGVtcGxhdGVEYXRhWyBrZXkgXSB9ICkgfSApIClcbiAgICB9LFxuXG4gICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5zaG93KClcbiAgICAgICAgdGhpcy5zaXplKClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIHNsdXJwRWw6IGZ1bmN0aW9uKCBlbCApIHtcblxuICAgICAgICB2YXIga2V5ID0gZWwuYXR0cignZGF0YS1qcycpO1xuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhWyBrZXkgXSA9ICggdGhpcy50ZW1wbGF0ZURhdGEuaGFzT3duUHJvcGVydHkoa2V5KSApXG4gICAgICAgICAgICA/IHRoaXMudGVtcGxhdGVEYXRhWyBrZXkgXS5hZGQoIGVsIClcbiAgICAgICAgICAgIDogZWw7XG5cbiAgICAgICAgZWwucmVtb3ZlQXR0cignZGF0YS1qcycpO1xuXG4gICAgICAgIGlmKCB0aGlzLmV2ZW50c1sga2V5IF0gKSB0aGlzLmRlbGVnYXRlRXZlbnRzKCBrZXksIGVsIClcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgc2x1cnBUZW1wbGF0ZTogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cbiAgICAgICAgdmFyICRodG1sID0gdGhpcy4kKCBvcHRpb25zLnRlbXBsYXRlICksXG4gICAgICAgICAgICBzZWxlY3RvciA9ICdbZGF0YS1qc10nO1xuXG4gICAgICAgIGlmKCB0aGlzLnRlbXBsYXRlRGF0YSA9PT0gdW5kZWZpbmVkICkgdGhpcy50ZW1wbGF0ZURhdGEgPSB7IH07XG5cbiAgICAgICAgJGh0bWwuZWFjaCggKCBpbmRleCwgZWwgKSA9PiB7XG4gICAgICAgICAgICB2YXIgJGVsID0gdGhpcy4kKGVsKTtcbiAgICAgICAgICAgIGlmKCAkZWwuaXMoIHNlbGVjdG9yICkgKSB0aGlzLnNsdXJwRWwoICRlbCApXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkaHRtbC5nZXQoKS5mb3JFYWNoKCAoIGVsICkgPT4geyB0aGlzLiQoIGVsICkuZmluZCggc2VsZWN0b3IgKS5lYWNoKCAoIGksIGVsVG9CZVNsdXJwZWQgKSA9PiB0aGlzLnNsdXJwRWwoIHRoaXMuJChlbFRvQmVTbHVycGVkKSApICkgfSApXG4gICAgICAgXG4gICAgICAgIGlmKCBvcHRpb25zICYmIG9wdGlvbnMuaW5zZXJ0aW9uICkgb3B0aW9ucy5pbnNlcnRpb24uJGVsWyAoIG9wdGlvbnMuaW5zZXJ0aW9uLm1ldGhvZCApID8gb3B0aW9ucy5pbnNlcnRpb24ubWV0aG9kIDogJ2FwcGVuZCcgXSggJGh0bWwgKVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgXG4gICAgYmluZEV2ZW50OiBmdW5jdGlvbiggZWxlbWVudEtleSwgZXZlbnREYXRhLCBlbCApIHtcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gKCBlbCApID8gZWwgOiB0aGlzLnRlbXBsYXRlRGF0YVsgZWxlbWVudEtleSBdO1xuXG4gICAgICAgIGVsZW1lbnRzLm9uKCBldmVudERhdGEuZXZlbnQgfHwgJ2NsaWNrJywgZXZlbnREYXRhLnNlbGVjdG9yLCBldmVudERhdGEubWV0YSwgdGhpc1sgZXZlbnREYXRhLm1ldGhvZCBdLmJpbmQodGhpcykgKVxuICAgIH0sXG5cbiAgICBldmVudHM6IHt9LFxuXG4gICAgaXNNb3VzZU9uRWw6IGZ1bmN0aW9uKCBldmVudCwgZWwgKSB7XG5cbiAgICAgICAgdmFyIGVsT2Zmc2V0ID0gZWwub2Zmc2V0KCksXG4gICAgICAgICAgICBlbEhlaWdodCA9IGVsLm91dGVySGVpZ2h0KCB0cnVlICksXG4gICAgICAgICAgICBlbFdpZHRoID0gZWwub3V0ZXJXaWR0aCggdHJ1ZSApO1xuXG4gICAgICAgIGlmKCAoIGV2ZW50LnBhZ2VYIDwgZWxPZmZzZXQubGVmdCApIHx8XG4gICAgICAgICAgICAoIGV2ZW50LnBhZ2VYID4gKCBlbE9mZnNldC5sZWZ0ICsgZWxXaWR0aCApICkgfHxcbiAgICAgICAgICAgICggZXZlbnQucGFnZVkgPCBlbE9mZnNldC50b3AgKSB8fFxuICAgICAgICAgICAgKCBldmVudC5wYWdlWSA+ICggZWxPZmZzZXQudG9wICsgZWxIZWlnaHQgKSApICkge1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogdHJ1ZSxcbiAgICBcbiAgICBzaXplOiAoKSA9PiB7IHRoaXMgfSxcblxuICAgIHVzZXI6IHJlcXVpcmUoJy4uL21vZGVscy9Vc2VyJyksXG5cbiAgICB1dGlsOiByZXF1aXJlKCd1dGlsJylcblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gTXlWaWV3XG4iLCJjb25zdCBNb2RlbCA9IHJlcXVpcmUoJy4uL21vZGVscy9fX3Byb3RvX18nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBEZWxpdmVyeU9wdGlvbnM6IE9iamVjdC5jcmVhdGUoIE1vZGVsLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnZGVsaXZlcnlvcHRpb24nIH0gfSApLFxuICAgIEdyb3VwRHJvcG9mZnM6IE9iamVjdC5jcmVhdGUoIE1vZGVsLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnZ3JvdXBkcm9wb2ZmJyB9IH0gKSxcbiAgICBNZW1iZXJTZWxlY3Rpb246IHJlcXVpcmUoJy4uL21vZGVscy9NZW1iZXJTZWxlY3Rpb24nKSxcbiAgICBNZW1iZXJTaGFyZU9wdGlvbjogT2JqZWN0LmNyZWF0ZSggTW9kZWwsIHsgcmVzb3VyY2U6IHsgdmFsdWU6ICdtZW1iZXJzaGFyZW9wdGlvbicgfSB9ICksXG4gICAgT3JkZXJPcHRpb246IHJlcXVpcmUoJy4uL21vZGVscy9PcmRlck9wdGlvbicpLFxuICAgIFNoYXJlT3B0aW9uT3B0aW9uOiByZXF1aXJlKCcuLi9tb2RlbHMvU2hhcmVPcHRpb25PcHRpb24nKSxcblxuICAgIGNhbGN1bGF0ZVdlZWtseVByaWNlKCkge1xuICAgICAgICBsZXQgb3B0aW9uUHJpY2UgPSB0aGlzLk1lbWJlclNlbGVjdGlvbi5kYXRhLnJlZHVjZSggKCBzdW0sIHNlbGVjdGlvbiApID0+IHN1bSArIE1vZGVsLm1vbmV5VG9SZWFsKCBzZWxlY3Rpb24ucHJpY2UgKSwgMCApXG4gICAgICAgIHJldHVybiBvcHRpb25QcmljZSArIE1vZGVsLm1vbmV5VG9SZWFsKCB0aGlzLm1vZGVsLmRlbGl2ZXJ5LmRhdGFbMF0uZGVsaXZlcnlvcHRpb24ucHJpY2UgKVxuICAgIH0sXG5cbiAgICBjYWxjdWxhdGVQcmljZUFkanVzdG1lbnQoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyggdGhpcy5lZGl0ZWRGaWVsZHMgKS5yZWR1Y2UoICggYWNjLCBrZXkgKSA9PiB7XG4gICAgICAgICAgICBpZiggISB0aGlzLmVkaXRlZEZpZWxkc1sga2V5IF0ubmV3VmFsdWUgfHwga2V5ID09PSAnZ3JvdXBPcHRpb24nICkgcmV0dXJuIGFjY1xuXG4gICAgICAgICAgICBsZXQgb2xkUHJpY2UsIG5ld1ByaWNlLCBkaWZmXG5cbiAgICAgICAgICAgIGlmKCBrZXkgPT09ICdkZWxpdmVyeU9wdGlvbicgKSB7XG4gICAgICAgICAgICAgICAgb2xkUHJpY2UgPSB0aGlzLkRlbGl2ZXJ5T3B0aW9ucy5kYXRhLmZpbmQoIG9wdGlvbiA9PiBvcHRpb24ubmFtZSA9PT0gdGhpcy5lZGl0ZWRGaWVsZHNbIGtleSBdLm9sZFZhbHVlICkucHJpY2VcbiAgICAgICAgICAgICAgICBuZXdQcmljZSA9IHRoaXMuRGVsaXZlcnlPcHRpb25zLmRhdGEuZmluZCggb3B0aW9uID0+IG9wdGlvbi5uYW1lID09PSB0aGlzLmVkaXRlZEZpZWxkc1sga2V5IF0ubmV3VmFsdWUgKS5wcmljZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGFyZU9wdGlvbklkID0gdGhpcy5PcmRlck9wdGlvbi5kYXRhLmZpbmQoIG9wdGlvbiA9PiBvcHRpb24ua2V5ID09PSBrZXkgKS5pZFxuXG4gICAgICAgICAgICAgICAgb2xkUHJpY2UgPSB0aGlzLlNoYXJlT3B0aW9uT3B0aW9uLmRhdGEuZmluZChcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0+IG9wdGlvbi5uYW1lID09PSB0aGlzLmVkaXRlZEZpZWxkc1sga2V5IF0ub2xkVmFsdWUgJiYgb3B0aW9uLnNoYXJlb3B0aW9uaWQgPT09IHNoYXJlT3B0aW9uSWRcbiAgICAgICAgICAgICAgICApLnByaWNlXG5cbiAgICAgICAgICAgICAgICBuZXdQcmljZSA9IHRoaXMuU2hhcmVPcHRpb25PcHRpb24uZGF0YS5maW5kKFxuICAgICAgICAgICAgICAgICAgICBvcHRpb24gPT4gb3B0aW9uLm5hbWUgPT09IHRoaXMuZWRpdGVkRmllbGRzWyBrZXkgXS5uZXdWYWx1ZSAmJiBvcHRpb24uc2hhcmVvcHRpb25pZCA9PT0gc2hhcmVPcHRpb25JZFxuICAgICAgICAgICAgICAgICkucHJpY2VcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGlmZiA9IE1vZGVsLm1vbmV5VG9SZWFsKCBuZXdQcmljZSApIC0gTW9kZWwubW9uZXlUb1JlYWwoIG9sZFByaWNlIClcblxuICAgICAgICAgICAgcmV0dXJuIGFjYyArIGRpZmZcblxuICAgICAgICB9LCAwIClcbiAgICB9LFxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuZWxzLmNoYW5nZXMuaW5uZXJIVE1MID0gJydcbiAgICAgICAgdGhpcy5lbHMub3B0aW9ucy5pbm5lckhUTUwgPSAnJ1xuXG4gICAgICAgIHRoaXMuZWxzLnJlc2V0QnRuLmNsYXNzTGlzdC5hZGQoJ2ZkLWhpZGRlbicpXG4gICAgICAgIHRoaXMuZWxzLmVkaXRTdW1tYXJ5LmNsYXNzTGlzdC5hZGQoJ2ZkLWhpZGRlbicpXG5cbiAgICAgICAgdGhpcy5lbHMgPSB7XG4gICAgICAgICAgICBlZGl0U3VtbWFyeTogdGhpcy5lbHMuZWRpdFN1bW1hcnksXG4gICAgICAgICAgICBjaGFuZ2VzOiB0aGlzLmVscy5jaGFuZ2VzLFxuICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLmVscy5jb250YWluZXIsXG4gICAgICAgICAgICBzZWFzb25MYWJlbDogdGhpcy5lbHMuc2Vhc29uTGFiZWwsXG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLmVscy5vcHRpb25zLFxuICAgICAgICAgICAgcmVzZXRCdG46IHRoaXMuZWxzLnJlc2V0QnRuLFxuICAgICAgICAgICAgbmV3V2Vla2x5UHJpY2U6IHRoaXMuZWxzLm5ld1dlZWtseVByaWNlLFxuICAgICAgICAgICAgb3JpZ2luYWxXZWVrbHlQcmljZTogdGhpcy5lbHMub3JpZ2luYWxXZWVrbHlQcmljZVxuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIG9wdGlvbnM6ICdjaGFuZ2UnLFxuICAgICAgICByZXNldEJ0bjogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBnZXRBZGp1c3RtZW50RGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKCB0aGlzLmVscy5vcHRpb25zLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpLmVkaXRlZCcpICkubWFwKCBlbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpLFxuICAgICAgICAgICAgICAgICAgZmllbGRMYWJlbCA9IHRoaXMuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKCBmaWVsZE5hbWUgKSxcbiAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gdGhpcy5lZGl0ZWRGaWVsZHNbIGZpZWxkTmFtZSBdLm9sZFZhbHVlXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5lZGl0ZWRGaWVsZHNbIGZpZWxkTmFtZSBdLm9sZFZhbHVlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHRoaXMuZWRpdGVkRmllbGRzWyBmaWVsZE5hbWUgXS5uZXdWYWx1ZS50b1N0cmluZygpXG5cbiAgICAgICAgICAgIHJldHVybiBgJHtmaWVsZExhYmVsfTogJHtvbGRWYWx1ZX0gdG8gJHtuZXdWYWx1ZX1gXG4gICAgICAgIH0gKS5qb2luKCcsICcpXG4gICAgfSxcblxuICAgIGdldERlbGl2ZXJ5RGF0YSggKSB7XG5cbiAgICAgICAgY29uc3QgcGF0Y2hJZCA9IHRoaXMubW9kZWwuZGVsaXZlcnkuZGF0YVswXS5tZW1iZXJzaGFyZWRlbGl2ZXJ5LmlkLFxuICAgICAgICAgICAgICBuZXdEZWxpdmVyeUlkID0gdGhpcy5EZWxpdmVyeU9wdGlvbnMuZGF0YS5maW5kKCBvcHRpb24gPT4gb3B0aW9uLm5hbWUgPT09IHRoaXMuZWRpdGVkRmllbGRzLmRlbGl2ZXJ5T3B0aW9uLm5ld1ZhbHVlICkuaWQsXG4gICAgICAgICAgICAgIGRyb3BvZmZJZCA9ICggdGhpcy5lZGl0ZWRGaWVsZHMuZGVsaXZlcnlPcHRpb24ubmV3VmFsdWUgPT09ICdncm91cCcgKVxuICAgICAgICAgICAgICAgID8gdGhpcy5Hcm91cERyb3BvZmZzLmRhdGEuZmluZCggb3B0aW9uID0+IG9wdGlvbi5uYW1lID09PSB0aGlzLmVkaXRlZEZpZWxkcy5ncm91cE9wdGlvbi5uZXdWYWx1ZSApLmlkXG4gICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBwYXRjaElkLFxuICAgICAgICAgICAgZGVsaXZlcnlvcHRpb25pZDogbmV3RGVsaXZlcnlJZCxcbiAgICAgICAgICAgIGdyb3VwZHJvcG9mZmlkOiBkcm9wb2ZmSWRcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRTaGFyZU9wdGlvbkRhdGEoIGtleSApIHtcbiAgICAgICAgY29uc3Qgc2hhcmVPcHRpb25JZCA9IHRoaXMuT3JkZXJPcHRpb24uZGF0YS5maW5kKCBvcHRpb24gPT4gb3B0aW9uLmtleSA9PT0ga2V5ICkuaWQsXG4gICAgICAgICAgICBtZW1iZXJTaGFyZUlkID0gdGhpcy5tb2RlbC5zaGFyZS5tZW1iZXJzaGFyZWlkXG5cbiAgICAgICAgY29uc3Qgc2hhcmVPcHRpb25PcHRpb25JZCA9IHRoaXMuU2hhcmVPcHRpb25PcHRpb24uZGF0YS5maW5kKFxuICAgICAgICAgICAgb3B0aW9uID0+IG9wdGlvbi5uYW1lID09PSB0aGlzLmVkaXRlZEZpZWxkc1sga2V5IF0ubmV3VmFsdWUgJiYgb3B0aW9uLnNoYXJlb3B0aW9uaWQgPT09IHNoYXJlT3B0aW9uSWRcbiAgICAgICAgKS5pZFxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdGhpcy5NZW1iZXJTZWxlY3Rpb24uZGF0YS5maW5kKCBtZW1iZXJTZWxlY3Rpb24gPT4gc2hhcmVPcHRpb25JZCA9PSBtZW1iZXJTZWxlY3Rpb24uc2hhcmVvcHRpb25pZCApLm1lbWJlcnNoYXJlb3B0aW9uaWQsXG4gICAgICAgICAgICBzaGFyZW9wdGlvbm9wdGlvbmlkOiBzaGFyZU9wdGlvbk9wdGlvbklkXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0UGF0Y2hEYXRhKCkge1xuXG4gICAgICAgIHZhciBydiA9IHsgbWVtYmVyc2hhcmVkZWxpdmVyeTpcbiAgICAgICAgICAgICggdGhpcy5lZGl0ZWRGaWVsZHMuZGVsaXZlcnlPcHRpb24ubmV3VmFsdWUgfHwgdGhpcy5lZGl0ZWRGaWVsZHMuZ3JvdXBPcHRpb24ubmV3VmFsdWUgKVxuICAgICAgICAgICAgICAgID8gdGhpcy5nZXREZWxpdmVyeURhdGEoKVxuICAgICAgICAgICAgICAgIDogeyB9LFxuICAgICAgICAgICAgbWVtYmVyc2hhcmVvcHRpb246IFsgXVxuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMuZWRpdGVkRmllbGRzICkuZm9yRWFjaCgga2V5ID0+IHtcbiAgICAgICAgICAgIGlmKCAhdGhpcy5lZGl0ZWRGaWVsZHNbIGtleSBdLm5ld1ZhbHVlIHx8IGtleSA9PT0gJ2RlbGl2ZXJ5T3B0aW9uJyB8fCBrZXkgPT09ICdncm91cE9wdGlvbicgKSByZXR1cm5cblxuICAgICAgICAgICAgcnYubWVtYmVyc2hhcmVvcHRpb24ucHVzaCggdGhpcy5nZXRTaGFyZU9wdGlvbkRhdGEoIGtleSApIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIHJ2XG4gICAgfSxcblxuICAgIG9uT3B0aW9uc0NoYW5nZSggZSApIHtcbiAgICAgICAgY29uc3QgbGlzdEl0ZW1FbCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ2xpLmVkaXRhYmxlJyksXG4gICAgICAgICAgICBzaGFyZU9wdGlvbktleSA9IGxpc3RJdGVtRWwuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSxcbiAgICAgICAgICAgIHZhbCA9IGUudGFyZ2V0LnZhbHVlXG5cbiAgICAgICAgaWYoIHNoYXJlT3B0aW9uS2V5ID09PSAnZGVsaXZlcnlPcHRpb24nICYmIHZhbCAhPT0gJ2dyb3VwJyApIHRoaXMuZW1pdCggJ2RlbGl2ZXJ5Q2hhbmdlZCcsIHsgZGVsaXZlcnlPcHRpb246IHZhbCB9IClcbiAgICAgICAgaWYoIHNoYXJlT3B0aW9uS2V5ID09PSAnZ3JvdXBPcHRpb24nICYmIHZhbCAhPT0gJ25vbmUnICkgdGhpcy5lbWl0KCAnZGVsaXZlcnlDaGFuZ2VkJywgeyBkZWxpdmVyeU9wdGlvbjogJ2dyb3VwJywgZ3JvdXBPcHRpb246IHZhbCB9IClcblxuICAgICAgICBpZiggc2hhcmVPcHRpb25LZXkgPT09ICdkZWxpdmVyeU9wdGlvbicgKSB7XG4gICAgICAgICAgICBpZiggdmFsICE9PSAnZ3JvdXAnICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxzLmdyb3VwT3B0aW9uLnNlbGVjdGVkSW5kZXggPSAwXG4gICAgICAgICAgICAgICAgdGhpcy5lbHMuZ3JvdXBPcHRpb24uZGlzYWJsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgdGhpcy5lbHMuZ3JvdXBPcHRpb24uY2xvc2VzdCgnbGknKS5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0ZWQnKVxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdGVkRmllbGRzLmdyb3VwT3B0aW9uLm5ld1ZhbHVlID0gdW5kZWZpbmVkXG4gICAgICAgICAgICB9IGVsc2UgeyB0aGlzLmVscy5ncm91cE9wdGlvbi5kaXNhYmxlZCA9IGZhbHNlIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCB0aGlzLmVkaXRlZEZpZWxkc1sgc2hhcmVPcHRpb25LZXkgXS5vbGRWYWx1ZSA9PT0gdmFsICkge1xuICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHNbIHNoYXJlT3B0aW9uS2V5IF0ubmV3VmFsdWUgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIGxpc3RJdGVtRWwuY2xhc3NMaXN0LnJlbW92ZSgnZWRpdGVkJylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3dFZGl0U3VtbWFyeSgpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVkaXRlZEZpZWxkc1sgc2hhcmVPcHRpb25LZXkgXS5uZXdWYWx1ZSA9IHZhbFxuICAgICAgICBsaXN0SXRlbUVsLmNsYXNzTGlzdC5hZGQoJ2VkaXRlZCcpXG5cbiAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LnJlbW92ZSgnZmQtaGlkZGVuJylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2hvd0VkaXRTdW1tYXJ5KClcbiAgICAgICAgXG4gICAgfSxcblxuICAgIG9uUmVzZXRCdG5DbGljaygpIHtcbiAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICAgICAgdGhpcy5lbHMuZWRpdFN1bW1hcnkuY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICAgICAgdGhpcy51cGRhdGUoIHRoaXMubW9kZWwgKVxuICAgICAgICB0aGlzLmVtaXQoICdyZXNldCcsIHRoaXMubW9kZWwgKVxuICAgIH0sXG5cbiAgICByZW5kZXJEZWxpdmVyeU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLm1vZGVsLmRlbGl2ZXJ5LmRhdGFbMF0gKVxuXG4gICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXNbIHRoaXMub3B0aW9uVGVtcGxhdGUgXSggeyBuYW1lOiAnRGVsaXZlcnkgT3B0aW9uJywgaWQ6ICdkZWxpdmVyeU9wdGlvbicgfSApLCBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLm9wdGlvbnMgfSB9IClcbiAgICAgICAgICAgXG4gICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXNbIHRoaXMub3B0aW9uVGVtcGxhdGUgXSggeyBuYW1lOiAnR3JvdXAgT3B0aW9uJywgaWQ6ICdncm91cE9wdGlvbicgfSApLCBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLm9wdGlvbnMgfSB9IClcbiAgICAgICAgICAgIFxuICAgICAgICBpZiggdGhpcy5vcHRpb25UZW1wbGF0ZSA9PT0gJ2VkaXRhYmxlT3B0aW9uJyApIHtcblxuICAgICAgICAgICAgdGhpcy5EZWxpdmVyeU9wdGlvbnMuZGF0YS5mb3JFYWNoKCBvcHRpb24gPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLnNlbGVjdE9wdGlvbiggb3B0aW9uICksIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMuZGVsaXZlcnlPcHRpb24gfSB9IClcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgdGhpcy5lbHMuZGVsaXZlcnlPcHRpb24ucXVlcnlTZWxlY3Rvcihgb3B0aW9uW3ZhbHVlPSR7Q1NTLmVzY2FwZSggb3B0aW9uLmRlbGl2ZXJ5b3B0aW9uLm5hbWUgKX1gKS5zZWxlY3RlZCA9IHRydWVcbiAgICAgICAgICAgIHRoaXMuZWRpdGVkRmllbGRzLmRlbGl2ZXJ5T3B0aW9uID0geyB9XG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkcy5kZWxpdmVyeU9wdGlvbi5vbGRWYWx1ZSA9IHRoaXMuZWxzLmRlbGl2ZXJ5T3B0aW9uLnZhbHVlXG5cbiAgICAgICAgICAgIHRoaXMuR3JvdXBEcm9wb2Zmcy5kYXRhLnVuc2hpZnQoIHsgbmFtZTogJ25vbmUnLCBsYWJlbDogJ05vbmUnIH0gKVxuICAgICAgICAgICAgdGhpcy5Hcm91cERyb3BvZmZzLmRhdGEuZm9yRWFjaCggb3B0aW9uID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5zZWxlY3RPcHRpb24oIG9wdGlvbiApLCBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLmdyb3VwT3B0aW9uIH0gfSApXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIGlmKCAhIG9wdGlvbi5ncm91cGRyb3BvZmYuaWQgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbHMuZ3JvdXBPcHRpb24uc2VsZWN0ZWRJbmRleCA9IDBcbiAgICAgICAgICAgICAgICB0aGlzLmVscy5ncm91cE9wdGlvbi5kaXNhYmxlZCA9IHRydWVcbiAgICAgICAgICAgIH0gZWxzZSB0aGlzLmVscy5ncm91cE9wdGlvbi5xdWVyeVNlbGVjdG9yKGBvcHRpb25bdmFsdWU9JHtDU1MuZXNjYXBlKCBvcHRpb24uZ3JvdXBkcm9wb2ZmLm5hbWUgKX1gKS5zZWxlY3RlZCA9IHRydWVcblxuICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHMuZ3JvdXBPcHRpb24gPSB7IH1cbiAgICAgICAgICAgIHRoaXMuZWRpdGVkRmllbGRzLmdyb3VwT3B0aW9uLm9sZFZhbHVlID0gdGhpcy5lbHMuZ3JvdXBPcHRpb24uZGlzYWJsZWQgPyB1bmRlZmluZWQgOiB0aGlzLmVscy5ncm91cE9wdGlvbi52YWx1ZVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVscy5kZWxpdmVyeU9wdGlvbi50ZXh0Q29udGVudCA9IG9wdGlvbi5kZWxpdmVyeW9wdGlvbi5sYWJlbFxuICAgICAgICAgICAgdGhpcy5lbHMuZ3JvdXBPcHRpb24udGV4dENvbnRlbnQgPSBvcHRpb24uZ3JvdXBkcm9wb2ZmLmxhYmVsIHx8ICdOL0EnXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICByZW5kZXJTaGFyZU9wdGlvbnMoKSB7XG4gICAgICAgIHRoaXMuT3JkZXJPcHRpb24uZGF0YS5mb3JFYWNoKCBzaGFyZU9wdGlvbiA9PiB7XG4gICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzWyB0aGlzLm9wdGlvblRlbXBsYXRlIF0oIHNoYXJlT3B0aW9uICksIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMub3B0aW9ucyB9IH0gKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiggdGhpcy5lZGl0YWJsZSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLlNoYXJlT3B0aW9uT3B0aW9uLmRhdGEuZm9yRWFjaCggb3B0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIG9wdGlvbi5zaGFyZW9wdGlvbmlkID09PSBzaGFyZU9wdGlvbi5pZCApIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLnNlbGVjdE9wdGlvbiggb3B0aW9uICksIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHNbIHNoYXJlT3B0aW9uLmlkIF0gfVxuICAgICAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5NZW1iZXJTZWxlY3Rpb24uZGF0YS5mb3JFYWNoKCBzZWxlY3Rpb24gPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMuZWRpdGFibGUgKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5PcmRlck9wdGlvbi5kYXRhLmZpbmQoIHNoYXJlT3B0aW9uID0+IHNoYXJlT3B0aW9uLmlkID09PSBzZWxlY3Rpb24uc2hhcmVvcHRpb25pZCApLmtleVxuICAgICAgICAgICAgICAgIHRoaXMuZWxzWyBzZWxlY3Rpb24uc2hhcmVvcHRpb25pZCBdLnF1ZXJ5U2VsZWN0b3IoYG9wdGlvblt2YWx1ZT0ke0NTUy5lc2NhcGUoIHNlbGVjdGlvbi5uYW1lICl9YCkuc2VsZWN0ZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHNbIGtleSBdID0geyB9XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHNbIGtleSBdLm9sZFZhbHVlID0gdGhpcy5lbHNbIHNlbGVjdGlvbi5zaGFyZW9wdGlvbmlkIF0udmFsdWVcbiAgICAgICAgICAgIH0gZWxzZSB7IHRoaXMuZWxzWyBzZWxlY3Rpb24uc2hhcmVvcHRpb25pZCBdLnRleHRDb250ZW50ID0gc2VsZWN0aW9uLmxhYmVsIH1cbiAgICAgICAgfSApXG5cbiAgICB9LFxuXG4gICAgc2hvd0VkaXRTdW1tYXJ5KCkge1xuICAgICAgICBjb25zdCBwcmljZUFkanVzdG1lbnQgPSB0aGlzLmNhbGN1bGF0ZVByaWNlQWRqdXN0bWVudCgpLFxuICAgICAgICAgICAgZWRpdHMgPSB0aGlzLmVscy5vcHRpb25zLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpLmVkaXRlZCcpXG5cbiAgICAgICAgdGhpcy5lbHMuY2hhbmdlcy5pbm5lckhUTUwgPSAnJ1xuXG4gICAgICAgIGlmKCBlZGl0cy5sZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoICdyZXNldCcsIHRoaXMubW9kZWwgKVxuICAgICAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVscy5lZGl0U3VtbWFyeS5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBlZGl0cy5mb3JFYWNoKCBlbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpLFxuICAgICAgICAgICAgICAgICAgZmllbGRMYWJlbCA9IHRoaXMuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKCBmaWVsZE5hbWUgKSxcbiAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gdGhpcy5lZGl0ZWRGaWVsZHNbIGZpZWxkTmFtZSBdLm9sZFZhbHVlXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5lZGl0ZWRGaWVsZHNbIGZpZWxkTmFtZSBdLm9sZFZhbHVlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHRoaXMuZWRpdGVkRmllbGRzWyBmaWVsZE5hbWUgXS5uZXdWYWx1ZS50b1N0cmluZygpXG5cbiAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSggeyBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLmNoYW5nZXMgfSwgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLmZpZWxkRWRpdCggeyBsYWJlbDogZmllbGRMYWJlbCwgb2xkVmFsdWUsIG5ld1ZhbHVlIH0gKSB9IClcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5lbHMub3JpZ2luYWxXZWVrbHlQcmljZS50ZXh0Q29udGVudCA9IHRoaXMuQ3VycmVuY3kuZm9ybWF0KCB0aGlzLm9yaWdpbmFsV2Vla2x5UHJpY2UgKVxuICAgICAgICB0aGlzLmVscy5uZXdXZWVrbHlQcmljZS50ZXh0Q29udGVudCA9IHRoaXMuQ3VycmVuY3kuZm9ybWF0KCB0aGlzLm9yaWdpbmFsV2Vla2x5UHJpY2UgKyBwcmljZUFkanVzdG1lbnQgKVxuXG4gICAgICAgIHRoaXMuZWxzLmVkaXRTdW1tYXJ5LmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGRlbicpXG5cbiAgICAgICAgdGhpcy5lbWl0KCAnYWRqdXN0bWVudCcsIHsgZGVzY3JpcHRpb246IHRoaXMuZ2V0QWRqdXN0bWVudERlc2NyaXB0aW9uKCksIG9yaWdpbmFsV2Vla2x5UHJpY2U6IHRoaXMub3JpZ2luYWxXZWVrbHlQcmljZSwgcHJpY2VBZGp1c3RtZW50IH0gKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgZmllbGRFZGl0OiByZXF1aXJlKCcuL3RlbXBsYXRlcy9GaWVsZEVkaXQnKSxcbiAgICAgICAgYXJjaGl2ZWRPcHRpb246IG9wdGlvbiA9PiBgPGxpPjxkaXYgY2xhc3M9XCJjZWxsXCI+JHtvcHRpb24ubmFtZX08L2Rpdj48ZGl2IGNsYXNzPVwiY2VsbFwiIGRhdGEtanM9XCIke29wdGlvbi5pZH1cIj48L2Rpdj48L2xpPmAsXG4gICAgICAgIGVkaXRhYmxlT3B0aW9uOiBvcHRpb24gPT4gYDxsaSBkYXRhLW5hbWU9XCIke29wdGlvbi5rZXkgfHwgb3B0aW9uLmlkfVwiIGNsYXNzPVwiZWRpdGFibGVcIj48c3Bhbj4ke29wdGlvbi5uYW1lfTwvc3Bhbj48c2VsZWN0IGRhdGEtanM9XCIke29wdGlvbi5pZH1cIj48L3NlbGVjdD48L2xpPmAsXG4gICAgICAgIHNlbGVjdE9wdGlvbjogb3B0aW9uID0+IGA8b3B0aW9uIHZhbHVlPVwiJHtvcHRpb24ubmFtZX1cIj4ke29wdGlvbi5sYWJlbH08L29wdGlvbj5gXG4gICAgfSxcblxuICAgIHVwZGF0ZSggeyBjdXN0b21lciwgZGVsaXZlcnksIHNoYXJlIH0gKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKVxuICAgICAgICB0aGlzLmVkaXRlZEZpZWxkcyA9IHsgfVxuXG4gICAgICAgIHRoaXMubW9kZWwgPSBhcmd1bWVudHNbMF1cblxuICAgICAgICB0aGlzLmVkaXRhYmxlID0gKCB0aGlzLk1vbWVudCgpIDwgdGhpcy5Nb21lbnQoIHNoYXJlLmVuZGRhdGUgKSApXG4gICAgICAgIHRoaXMub3B0aW9uVGVtcGxhdGUgPSB0aGlzLmVkaXRhYmxlID8gJ2VkaXRhYmxlT3B0aW9uJyA6ICdhcmNoaXZlZE9wdGlvbidcblxuICAgICAgICB0aGlzLmVscy5zZWFzb25MYWJlbC50ZXh0Q29udGVudCA9IHNoYXJlLmxhYmVsXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuT3JkZXJPcHRpb24uZ2V0KCB7IHF1ZXJ5OiB7IHNoYXJlaWQ6IHNoYXJlLmlkLCBzaGFyZW9wdGlvbmlkOiB7IG9wZXJhdGlvbjogJ2pvaW4nLCB2YWx1ZTogeyB0YWJsZTogJ3NoYXJlb3B0aW9uJywgY29sdW1uOiAnaWQnIH0gfSB9IH0gKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5TaGFyZU9wdGlvbk9wdGlvbi5nZXQoKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLk1lbWJlclNlbGVjdGlvbi5nZXQoIHsgcXVlcnk6IHsgbWVtYmVyc2hhcmVpZDogc2hhcmUubWVtYmVyc2hhcmVpZCwgc2hhcmVvcHRpb25vcHRpb25pZDogeyBvcGVyYXRpb246ICdqb2luJywgdmFsdWU6IHsgdGFibGU6ICdzaGFyZW9wdGlvbm9wdGlvbicsIGNvbHVtbjogJ2lkJyB9IH0gfSB9ICkgKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5yZW5kZXJTaGFyZU9wdGlvbnMoKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLkRlbGl2ZXJ5T3B0aW9ucy5nZXQoKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLkdyb3VwRHJvcG9mZnMuZ2V0KCkgKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJEZWxpdmVyeU9wdGlvbnMoKSBcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWxXZWVrbHlQcmljZSA9IHRoaXMuY2FsY3VsYXRlV2Vla2x5UHJpY2UoKVxuICAgICAgICAgICAgdGhpcy5zaG93KClcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICB9IClcblxuICAgIH1cblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBQaWthZGF5OiByZXF1aXJlKCdwaWthZGF5JyksXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgZXhwb3J0QnRuOiAnY2xpY2snLFxuICAgICAgICB2aWV3QnRuOiAnY2xpY2snXG4gICAgfSxcblxuICAgIGhhbmRsZUNvbHVtbnMoIHJvd3MgKSB7XG4gICAgICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmVscy5jb2x1bW5zXG5cbiAgICAgICAgdGhpcy5yZW1vdmVDaGlsZHJlbiggY29sdW1ucyApXG5cbiAgICAgICAgdGhpcy5jb2x1bW5zID0gT2JqZWN0LmtleXMoIHJvd3NbMF0gKVxuXG4gICAgICAgIHRoaXMuY29sdW1ucy5mb3JFYWNoKCBjb2x1bW4gPT4gdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlOiBgPGxpPiR7Y29sdW1ufTwvbGk+YCwgaW5zZXJ0aW9uOiB7IGVsOiBjb2x1bW5zIH0gfSApIClcbiAgICB9LFxuXG4gICAgaGFuZGxlUm93cyggcm93cyApIHtcbiAgICAgICAgY29uc3Qgcm93c0VsID0gdGhpcy5lbHMucm93c1xuXG4gICAgICAgIHRoaXMucmVtb3ZlQ2hpbGRyZW4oIHJvd3NFbCApXG5cbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSByb3dzLm1hcCggcm93ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmNvbHVtbnMubWFwKCBjb2x1bW4gPT4gYDxsaT4ke3Jvd1tjb2x1bW5dfTwvbGk+YCApLmpvaW4oJycpXG4gICAgICAgICAgICByZXR1cm4gYDxvbD4ke2NvbHVtbnN9PC9vbD5gXG4gICAgICAgIH0gKS5qb2luKCcnKVxuXG4gICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZSwgaW5zZXJ0aW9uOiB7IGVsOiByb3dzRWwgfSB9IClcbiAgICB9LFxuXG4gICAgbm9SZXN1bHRzKCkge1xuICAgICAgICB0aGlzLmVscy5lbXB0eS5jbGFzc0xpc3QucmVtb3ZlKCdmZC1oaWRlJylcbiAgICB9LFxuXG4gICAgb25FeHBvcnRCdG5DbGljaygpIHtcbiAgICAgICAgY29uc3QgcXMgPSB7IGlkOiB0aGlzLmVscy5yZXBvcnQudmFsdWUsIHRvOiB0aGlzLmVscy50by52YWx1ZSwgZnJvbTogdGhpcy5lbHMuZnJvbS52YWx1ZSwgZXhwb3J0OiB0cnVlIH1cbiAgICAgICAgd2luZG93Lm9wZW4oIGAvcmVwb3J0PyR7IHdpbmRvdy5lbmNvZGVVUklDb21wb25lbnQoIEpTT04uc3RyaW5naWZ5KCBxcyApICkgfWAgKVxuICAgIH0sXG4gICAgXG4gICAgb25WaWV3QnRuQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuWGhyKCB7IG1ldGhvZDogJ2dldCcsIHJlc291cmNlOiAncmVwb3J0JywgcXM6IEpTT04uc3RyaW5naWZ5KCB7IGlkOiB0aGlzLmVscy5yZXBvcnQudmFsdWUsIHRvOiB0aGlzLmVscy50by52YWx1ZSwgZnJvbTogdGhpcy5lbHMuZnJvbS52YWx1ZSB9ICkgfSApXG4gICAgICAgIC50aGVuKCByZXN1bHQgPT4ge1xuICAgICAgICAgICAgaWYoIHJlc3VsdC5sZW5ndGggPT0gMCApIHJldHVybiB0aGlzLm5vUmVzdWx0cygpXG4gICAgICAgIFxuICAgICAgICAgICAgdGhpcy5lbHMuZW1wdHkuY2xhc3NMaXN0LmFkZCgnZmQtaGlkZScpXG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ29sdW1ucyggcmVzdWx0IClcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUm93cyggcmVzdWx0IClcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICBcbiAgICAgICAgdGhpcy5SZXBvcnRzID0gT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCwgeyByZXNvdXJjZTogeyB2YWx1ZTogJ3JlcG9ydCcgfSB9IClcblxuICAgICAgICB0aGlzLlJlcG9ydHMuZ2V0KClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuUmVwb3J0cy5kYXRhLmZvckVhY2goIHJlcG9ydCA9PiB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IGA8b3B0aW9uIHZhbHVlPVwiJHtyZXBvcnQuaWR9XCI+JHtyZXBvcnQubGFiZWx9PC9vcHRpb24+YCwgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5yZXBvcnQgfSB9ICkgKSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG5cbiAgICAgICAgbmV3IHRoaXMuUGlrYWRheSggeyBmaWVsZDogdGhpcy5lbHMuZnJvbSwgZm9ybWF0OiAnWVlZWS1NTS1ERCcgfSApXG4gICAgICAgIG5ldyB0aGlzLlBpa2FkYXkoIHsgZmllbGQ6IHRoaXMuZWxzLnRvLCBmb3JtYXQ6ICdZWVlZLU1NLUREJyB9IClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICByZW1vdmVDaGlsZHJlbiggZWwgKSB7XG4gICAgICAgIHdoaWxlKCBlbC5maXJzdENoaWxkICkgeyBlbC5yZW1vdmVDaGlsZCggZWwuZmlyc3RDaGlsZCApIH1cbiAgICB9LFxufSApXG4iLCJ2YXIgVGFibGUgPSByZXF1aXJlKCcuL3V0aWwvVGFibGUnKSxcbiAgICBSZXNvdXJjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNwaW5uZXIgPSBuZXcgdGhpcy5TcGlubmVyKCB7XG4gICAgICAgICAgICBjb2xvcjogJyNmZmYnLFxuICAgICAgICAgICAgbGVuZ3RoOiAxNSxcbiAgICAgICAgICAgIHNjYWxlOiAwLjI1LFxuICAgICAgICAgICAgd2lkdGg6IDVcbiAgICAgICAgfSApLnNwaW4oKVxuICAgICAgICByZXR1cm4gVGFibGUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApXG4gICAgfVxuXG5PYmplY3QuYXNzaWduKCBSZXNvdXJjZS5wcm90b3R5cGUsIFRhYmxlLnByb3RvdHlwZSwge1xuXG4gICAgSW5zdGFuY2U6IHJlcXVpcmUoJy4uL21vZGVscy9JbnN0YW5jZScpLFxuXG4gICAgSXRlbVZpZXc6IHJlcXVpcmUoJy4vSW5zdGFuY2VSb3cnKSxcblxuICAgIFNwaW5uZXI6IHJlcXVpcmUoJy4uL3NwaW4nKSxcblxuICAgIGNvbGxlY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RlbDogdGhpcy5JbnN0YW5jZSxcbiAgICAgICAgICAgIHBhcnNlOiByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbCA9IHJlc3BvbnNlLmxhYmVsO1xuICAgICAgICAgICAgICAgIHRoaXMucmVjb3JkRGVzY3JpcHRvciA9IHJlc3BvbnNlLnJlY29yZERlc2NyaXB0b3I7XG4gICAgICAgICAgICAgICAgaWYoIHJlc3BvbnNlLm9wZXJhdGlvbltcIkB0eXBlXCJdID09PSBcIkNyZWF0ZVwiICkgdGhpcy5jcmVhdGVQcm9wZXJ0aWVzID0gcmVzcG9uc2Uub3BlcmF0aW9uLmV4cGVjdHMuc3VwcG9ydGVkUHJvcGVydHlcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VbIHRoaXMucmVzb3VyY2UgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVybDogdGhpcy51dGlsLmZvcm1hdCggXCIvJXNcIiwgdGhpcy5yZXNvdXJjZSApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY3JlYXRlKCBkYXRhICkge1xuICAgICAgICB2YXIgZmlsZXMgPSBbXVxuXG4gICAgICAgIHRoaXMuY3JlYXRlUHJvcGVydGllcy5mb3JFYWNoKCBwcm9wZXJ0eSA9PiB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHByb3BlcnR5LnByb3BlcnR5XG5cbiAgICAgICAgICAgIGlmKCBwcm9wZXJ0eS5mayAmJiB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXSApIHtcbiAgICAgICAgICAgICAgICBkYXRhWyBuYW1lIF0gPVxuICAgICAgICAgICAgICAgICAgICB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXVsgKCBwcm9wZXJ0eS5kZXNjcmlwdG9yLnBhdGgubGVuZ3RoIClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gWyBwcm9wZXJ0eS5kZXNjcmlwdG9yLnBhdGhbMF0udGFibGUsICdpZCcgXS5qb2luKCcuJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ2lkJyBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggcHJvcGVydHkucmFuZ2UgPT09IFwiRmlsZVwiICkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhWyBuYW1lIF1cbiAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKCB7IG5hbWU6IG5hbWUsIGRhdGE6IHRoaXNbIG5hbWUgKyBcIkZpbGVcIiBdIH0gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLm1vZGFsVmlldy50ZW1wbGF0ZURhdGEuY29uZmlybUJ0bi5hcHBlbmQoIHRoaXMuc3Bpbm5lci5zcGluKCkuZWwgKS5hZGRDbGFzcygnaGFzLXNwaW5uZXInKVxuXG4gICAgICAgIHRoaXMuJC5hamF4KCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7IGFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoIGRhdGEgKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJsOiB0aGlzLnV0aWwuZm9ybWF0KCBcIi8lc1wiLCB0aGlzLnJlc291cmNlICksXG4gICAgICAgIH0gKVxuICAgICAgICAuZG9uZSggKCByZXNwb25zZSwgdGV4dFN0YXR1cywganFYSFIgKSA9PiB7XG4gICAgICAgICAgICBpZiggdGhpcy5pdGVtcy5sZW5ndGggPT09IDAgJiYgdGhpcy5maWVsZHMgPT09IHVuZGVmaW5lZCApIHRoaXMuc2V0RmllbGRzKCByZXNwb25zZSApXG5cbiAgICAgICAgICAgIFByb21pc2UuYWxsKCBmaWxlcy5tYXAoIGZpbGUgPT4gdGhpcy51cGxvYWRGaWxlKCBmaWxlLm5hbWUsIGZpbGUuZGF0YSwgcmVzcG9uc2UuaWQgKSApICkudGhlbiggKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVQcm9wZXJ0aWVzLmZvckVhY2goIHByb3BlcnR5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBwcm9wZXJ0eS5wcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvcGVydHkuZmsgJiYgdGhpc1sgcHJvcGVydHkuZmsudGFibGUgKyBcIlR5cGVhaGVhZFwiIF0gJiYgKCBwcm9wZXJ0eS5kZXNjcmlwdG9yLnBhdGggKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlWyBbIHByb3BlcnR5LmRlc2NyaXB0b3IudGFibGUsIHByb3BlcnR5LmRlc2NyaXB0b3IuY29sdW1uLm5hbWUgXS5qb2luKCcuJykgXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yOiBwcm9wZXJ0eS5kZXNjcmlwdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBwcm9wZXJ0eS5may50YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcmVzcG9uc2VbIG5hbWUgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpc1sgcHJvcGVydHkuZmsudGFibGUgKyBcIlR5cGVhaGVhZFwiIF1bIHByb3BlcnR5LmRlc2NyaXB0b3IuY29sdW1uLm5hbWUgXSB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuYWRkKCBuZXcgdGhpcy5JbnN0YW5jZSggcmVzcG9uc2UsIHsgcGFyc2U6IHRydWUgfSApIClcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsVmlldy50ZW1wbGF0ZURhdGEuY29uZmlybUJ0bi5yZW1vdmVDbGFzcygnaGFzLXNwaW5uZXInKVxuICAgICAgICAgICAgICAgIHRoaXMuc3Bpbm5lci5zdG9wKClcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsVmlldy5oaWRlKCB7IHJlc2V0OiB0cnVlIH0gKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBkZWxldGVNb2RlbCgpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuJC5hamF4KCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7IGFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIHVybDogdGhpcy51dGlsLmZvcm1hdCggXCIvJXMvJXNcIiwgdGhpcy5yZXNvdXJjZSwgdGhpcy5tb2RlbFRvRGVsZXRlLmlkIClcbiAgICAgICAgfSApXG4gICAgICAgIC5kb25lKCAoIHJlc3BvbnNlLCB0ZXh0U3RhdHVzLCBqcVhIUiApID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucmVtb3ZlKCB0aGlzLm1vZGVsVG9EZWxldGUgKVxuICAgICAgICAgICAgdGhpcy5tb2RlbFRvRGVsZXRlID0gdW5kZWZpbmVkXG4gICAgICAgICAgICB0aGlzLm1vZGFsVmlldy5oaWRlKCB7IHJlc2V0OiB0cnVlIH0gKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgZWRpdCggZGF0YSApIHtcblxuICAgICAgICB2YXIgZmlsZVByb21pc2VzID0gWyBdLFxuICAgICAgICAgICAgbW9kZWxBdHRycyA9IHsgfVxuXG4gICAgICAgIHRoaXMuY3JlYXRlUHJvcGVydGllcy5mb3JFYWNoKCBwcm9wZXJ0eSA9PiB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHByb3BlcnR5LnByb3BlcnR5XG5cbiAgICAgICAgICAgIGlmKCBwcm9wZXJ0eS5mayApIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlXG5cbiAgICAgICAgICAgICAgICBpZiggISB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXSApIHsgZGVsZXRlIGRhdGFbIG5hbWUgXTsgcmV0dXJuIH1cblxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA9IHRoaXMudXRpbC5mb3JtYXQoICclcy4lcycsIHByb3BlcnR5LmRlc2NyaXB0b3IudGFibGUsIHByb3BlcnR5LmRlc2NyaXB0b3IuY29sdW1uLm5hbWUgKVxuXG4gICAgICAgICAgICAgICAgZGF0YVsgbmFtZSBdID1cbiAgICAgICAgICAgICAgICAgICAgdGhpc1sgcHJvcGVydHkuZmsudGFibGUgKyBcIlR5cGVhaGVhZFwiIF1bICggcHJvcGVydHkuZGVzY3JpcHRvci5wYXRoLmxlbmd0aCApXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFsgcHJvcGVydHkuZGVzY3JpcHRvci5wYXRoWzBdLnRhYmxlLCAnaWQnIF0uam9pbignLicpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICdpZCcgXVxuXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbFRvRWRpdC5nZXQoIGF0dHJpYnV0ZSApLmlkID0gdGhpc1sgcHJvcGVydHkuZmsudGFibGUgKyBcIlR5cGVhaGVhZFwiIF0uaWRcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsVG9FZGl0LmdldCggYXR0cmlidXRlICkudmFsdWUgPSB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXVsgcHJvcGVydHkuZGVzY3JpcHRvci5jb2x1bW4ubmFtZSBdXG4gICAgICAgICAgICB9IGVsc2UgaWYoIHByb3BlcnR5LnJhbmdlID09PSBcIkZpbGVcIiApIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFbIG5hbWUgXVxuICAgICAgICAgICAgICAgIGlmKCB0aGlzWyBuYW1lICsgXCJGaWxlXCIgXSAmJiB0aGlzWyBuYW1lICsgXCJGaWxlXCIgXS5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWxUb0VkaXQuZ2V0KCBuYW1lICkuc3JjID0gdGhpc1sgbmFtZSArIFwiQmFzZTY0XCIgXVxuICAgICAgICAgICAgICAgICAgICBmaWxlUHJvbWlzZXMucHVzaCggdGhpcy51cGxvYWRGaWxlKCBuYW1lLCB0aGlzWyBuYW1lICsgXCJGaWxlXCIgXSwgdGhpcy5tb2RlbFRvRWRpdC5pZCApIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYoIHByb3BlcnR5LnByb3BlcnR5ID09PSBcImRheW9md2Vla1wiICkge1xuICAgICAgICAgICAgICAgIG1vZGVsQXR0cnNbIHByb3BlcnR5LnByb3BlcnR5IF0gPSB7IHJhdzogZGF0YVsgcHJvcGVydHkucHJvcGVydHkgXSwgdmFsdWU6IHRoaXMubW9kZWxUb0VkaXQuRGF5T2ZXZWVrSGFzaFsgZGF0YVsgcHJvcGVydHkucHJvcGVydHkgXSBdIH0gfVxuICAgICAgICAgICAgZWxzZSB7IG1vZGVsQXR0cnNbIHByb3BlcnR5LnByb3BlcnR5IF0gPSBkYXRhWyBwcm9wZXJ0eS5wcm9wZXJ0eSBdIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9IClcbiAgICAgICBcbiAgICAgICAgUHJvbWlzZS5hbGwoIGZpbGVQcm9taXNlcyApLnRoZW4oICgpID0+XG4gICAgICAgICAgICB0aGlzLiQuYWpheCgge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KCBkYXRhICksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgICAgICAgICAgICAgIHVybDogdGhpcy51dGlsLmZvcm1hdCggXCIvJXMvJWRcIiwgdGhpcy5yZXNvdXJjZSwgdGhpcy5tb2RlbFRvRWRpdC5pZCApXG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgIC5kb25lKCAoIHJlc3BvbnNlLCB0ZXh0U3RhdHVzLCBqcVhIUiApID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsVG9FZGl0LnNldCggbW9kZWxBdHRycywgeyBzaWxlbnQ6IHRydWUgfSApXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbFRvRWRpdC50cmlnZ2VyKCAnY2hhbmdlJywgdGhpcy5tb2RlbFRvRWRpdCApXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbFRvRWRpdCA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIHRoaXMubW9kYWxWaWV3LmhpZGUoIHsgcmVzZXQ6IHRydWUgfSApXG4gICAgICAgICAgICB9ICkgKVxuICAgICAgICAuY2F0Y2goIGVyciA9PiBjb25zb2xlLmxvZyggZXJyLnN0YWNrIHx8IGVyciApIClcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGNyZWF0ZUJ0bjogeyBtZXRob2Q6ICdzaG93Q3JlYXRlRGlhbG9nJyB9LFxuICAgICAgICBkZWxldGVCdG46IHsgbWV0aG9kOiAnc2hvd0RlbGV0ZURpYWxvZycgfSxcbiAgICAgICAgZWRpdEJ0bjogeyBtZXRob2Q6ICdzaG93RWRpdERpYWxvZycgfSxcbiAgICAgICAgYm9keTogW1xuICAgICAgICAgICAgeyBldmVudDogJ21vdXNlb3ZlcicsIHNlbGVjdG9yOiAndHInLCBtZXRob2Q6ICdvblJvd01vdXNlRW50ZXInIH0sXG4gICAgICAgICAgICB7IGV2ZW50OiAnbW91c2VvdXQnLCBzZWxlY3RvcjogJ3RyJywgbWV0aG9kOiAnb25Sb3dNb3VzZUxlYXZlJyB9XG4gICAgICAgIF1cbiAgICB9LFxuXG4gICAgZmV0Y2g6IHsgaGVhZGVyczogeyBhY2NlcHQ6IFwiYXBwbGljYXRpb24vbGQranNvblwiIH0gfSxcblxuICAgIGdldEltYWdlKCBtb2RlbCApIHtcbiAgICAgICAgdmFyIGltYWdlRWwgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICBcbiAgICAgICAgaW1hZ2VFbC5zdHlsZS5oZWlnaHQgPSAnNTBweCcgXG4gICAgICAgIGltYWdlRWwub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMuaXRlbVZpZXdzWyBtb2RlbC5pZCBdICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbVZpZXdzWyBtb2RlbC5pZCBdLnRlbXBsYXRlRGF0YVsgbW9kZWwuY29sdW1uIF0uaHRtbCggaW1hZ2VFbCApXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0ucmV0cmlldmVkSW1hZ2UoIG1vZGVsLmNvbHVtbiApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggdGhpcy5pdGVtcy5nZXQoIG1vZGVsLmlkICkgKSB0aGlzLml0ZW1zLmdldCggbW9kZWwuaWQgKS5nZXQoIG1vZGVsLmNvbHVtbiApLmltYWdlRWwgPSBpbWFnZUVsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCAoKSA9PiB0aGlzLmltYWdlTG9hZGVyLnJlbW92ZShtb2RlbCksIDEwMCApXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGltYWdlRWwub25lcnJvciA9ICgpID0+IHdpbmRvdy5zZXRUaW1lb3V0KCAoKSA9PiB0aGlzLmltYWdlTG9hZGVyLnJlbW92ZShtb2RlbCksIDEwMCApXG5cbiAgICAgICAgaW1hZ2VFbC5zcmMgPSAoIG1vZGVsLmNvbHVtbiA9PT0gXCJqb2JkZXNjcmlwdGlvblwiIClcbiAgICAgICAgICAgID8gJy9zdGF0aWMvaW1nL3BkZi5zdmcnXG4gICAgICAgICAgICA6IHRoaXMudXRpbC5mb3JtYXQoICcvZmlsZS8lcy8lcy8lZCcsIHRoaXMucmVzb3VyY2UsIG1vZGVsLmNvbHVtbiwgbW9kZWwuaWQgKVxuICAgIH0sXG5cbiAgICBnZXRJbWFnZURhdGEoIGJhc2U2NCApIHsgcmV0dXJuIGJhc2U2NC5zbGljZSggYmFzZTY0LmluZGV4T2YoJywnKSArIDEgKSB9LFxuXG4gICAgZ2V0TGFiZWwoIHByb3BlcnR5ICkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKCBwcm9wZXJ0eSApXG4gICAgfSxcblxuICAgIGluaXREYXRlcGlja2VyKCBwcm9wZXJ0eSwgbW9kZWxWYWx1ZSApIHtcbiAgICAgICAgdmFyIHRpbWUsIHZhbHVlXG4gICAgICAgICAgICBcbiAgICAgICAgaWYoIG1vZGVsVmFsdWUgKSB2YWx1ZSA9IG1vZGVsVmFsdWUudmFsdWVcblxuICAgICAgICBpZiggdmFsdWUgJiYgcHJvcGVydHkucmFuZ2UgPT09IFwiVGltZVwiICkge1xuICAgICAgICAgICAgdGltZSA9IHZhbHVlLnNsaWNlKCAwLCAtMiApXG4gICAgICAgICAgICB2YWx1ZSA9ICggL0FNLy50ZXN0KHZhbHVlKSB8fCB0aW1lLnNsaWNlKDAsMSkgPT09IFwiMTJcIiApID8gdGltZSA6IHRoaXMudXRpbC5mb3JtYXQoICclZDolcycsIHBhcnNlSW50KHRpbWUuc3BsaXQoXCI6XCIpWzBdKSArIDEyLCB0aW1lLnNwbGl0KFwiOlwiKVsxXSApXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuJCggJyMnICsgcHJvcGVydHkucHJvcGVydHkgKS5kYXRldGltZXBpY2tlcihcbiAgICAgICAgICAgICggcHJvcGVydHkucmFuZ2UgPT09IFwiVGltZVwiIClcbiAgICAgICAgICAgICAgICA/IHsgZm9ybWF0OiBcImg6bW1BXCIsIGRlZmF1bHREYXRlOiAoIHZhbHVlICkgPyB0aGlzLm1vbWVudCggWyB0aGlzLm1vbWVudCgpLmZvcm1hdCgnWVlZWS1NTS1ERCcpLCB2YWx1ZSBdLmpvaW4oXCIgXCIpICkgOiBcIlwiIH1cbiAgICAgICAgICAgICAgICA6IHsgZm9ybWF0OiBcIllZWVktTU0tRERcIiwgZGVmYXVsdERhdGU6ICggdmFsdWUgJiYgbW9kZWxWYWx1ZS5yYXcgKSA/IHRoaXMubW9tZW50KCBtb2RlbFZhbHVlLnJhdyApLmZvcm1hdCgnWVlZWS1NTS1ERCcpIDogXCJcIiB9IClcbiAgICB9LFxuXG4gICAgaW5pdEZpbGVVcGxvYWRlciggcHJvcGVydHkgKSB7XG4gICAgICAgIHZhciBuYW1lID0gcHJvcGVydHkucHJvcGVydHksXG4gICAgICAgICAgICAkZWwgPSB0aGlzLm1vZGFsVmlldy50ZW1wbGF0ZURhdGFbIG5hbWUgXSxcbiAgICAgICAgICAgIGJ0biA9IHRoaXMubW9kYWxWaWV3LnRlbXBsYXRlRGF0YVsgcHJvcGVydHkucHJvcGVydHkgKyBcIkJ0blwiIF1cblxuICAgICAgICB0aGlzWyBwcm9wZXJ0eS5wcm9wZXJ0eSArIFwiRmlsZVwiIF0gPT09IHVuZGVmaW5lZFxuXG4gICAgICAgICRlbC5vbiggJ2NoYW5nZScsIGUgPT4ge1xuICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBidG4uYWRkQ2xhc3MoJ2hhcy1zcGlubmVyJykuYXBwZW5kKCB0aGlzLnNwaW5uZXIuc3BpbigpLmVsIClcblxuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICggZXZ0ICkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZURhdGEgPSB0aGlzLmdldEltYWdlRGF0YSggZXZ0LnRhcmdldC5yZXN1bHQgKSxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlld0ltYWdlU3JjID0gKCBldnQudGFyZ2V0LnJlc3VsdC5zbGljZSgwLDIwKSA9PT0gJ2RhdGE6YXBwbGljYXRpb24vcGRmJyApXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcvc3RhdGljL2ltZy9wZGYuc3ZnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBldnQudGFyZ2V0LnJlc3VsdFxuXG4gICAgICAgICAgICAgICAgdGhpc1sgcHJvcGVydHkucHJvcGVydHkgKyBcIkZpbGVcIiBdID0gaW1hZ2VEYXRhXG4gICAgICAgICAgICAgICAgdGhpc1sgcHJvcGVydHkucHJvcGVydHkgKyBcIkJhc2U2NFwiIF0gPSBldnQudGFyZ2V0LnJlc3VsdFxuICAgICAgICAgICAgICAgIGJ0bi5yZW1vdmVDbGFzcygnaGFzLXNwaW5uZXInKVxuICAgICAgICAgICAgICAgIHRoaXMuc3Bpbm5lci5zdG9wKClcbiAgICAgICAgICAgICAgICB0aGlzLiQoICcjJyArIHByb3BlcnR5LnByb3BlcnR5ICsgXCItcHJldmlld1wiICkuYXR0ciggeyBzcmM6IHByZXZpZXdJbWFnZVNyYyB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoIGUub3JpZ2luYWxFdmVudC50YXJnZXQuZmlsZXNbMF0gKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgaW5pdFR5cGVhaGVhZCggcHJvcGVydHkgKSB7XG4gICAgICAgIHZhciBibG9vZGhvdW5kID0gbmV3IEJsb29kaG91bmQoIHtcbiAgICAgICAgICAgIGRhdHVtVG9rZW5pemVyOiBCbG9vZGhvdW5kLnRva2VuaXplcnMub2JqLndoaXRlc3BhY2UocHJvcGVydHkuZGVzY3JpcHRvci5jb2x1bW4ubmFtZSksXG4gICAgICAgICAgICBpZGVudGlmeTogb2JqID0+IG9iai5pZCxcbiAgICAgICAgICAgIHF1ZXJ5VG9rZW5pemVyOiBCbG9vZGhvdW5kLnRva2VuaXplcnMud2hpdGVzcGFjZSxcbiAgICAgICAgICAgIHJlbW90ZToge1xuICAgICAgICAgICAgICAgIHJlcGxhY2U6ICh1cmwsIHF1ZXJ5KSA9PiB1cmwucmVwbGFjZSggJyVRVUVSWScsIGVuY29kZVVSSUNvbXBvbmVudCAocXVlcnkpICksXG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLnV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCIvJXM/JXM9JVFVRVJZJmxpa2U9MSZwYXRoPSVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS5kZXNjcmlwdG9yLnRhYmxlLCBwcm9wZXJ0eS5kZXNjcmlwdG9yLmNvbHVtbi5uYW1lLCBlbmNvZGVVUklDb21wb25lbnQoIEpTT04uc3RyaW5naWZ5KCBwcm9wZXJ0eS5kZXNjcmlwdG9yLnBhdGggKSApIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApLFxuICAgICAgICBlbCA9IHRoaXMuJCggJyMnICsgcHJvcGVydHkucHJvcGVydHkgKVxuXG4gICAgICAgIGJsb29kaG91bmQuaW5pdGlhbGl6ZSgpXG5cbiAgICAgICAgZWwudHlwZWFoZWFkKCB7IGhpbnQ6IHRydWUgfSwgeyBkaXNwbGF5OiBvYmogPT4gb2JqWyBwcm9wZXJ0eS5kZXNjcmlwdG9yLmNvbHVtbi5uYW1lIF0sIHNvdXJjZTogYmxvb2Rob3VuZC50dEFkYXB0ZXIoKSB9IClcbiAgICAgICAgLmJpbmQoICd0eXBlYWhlYWQ6c2VsZWN0ZWQgdHlwZWFoZWFkOmF1dG9jb21wbGV0ZWQnLCAoIG9iaiwgc2VsZWN0ZWQsIG5hbWUgKSA9PiB7XG4gICAgICAgICAgICB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXSA9IHNlbGVjdGVkXG4gICAgICAgICAgICBlbC5vbmUoICdjaGFuZ2UnLCAoKSA9PiB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXSA9IHVuZGVmaW5lZCApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBvblJvd01vdXNlRW50ZXIoIGUgKSB7XG4gICAgICAgIHZhciByb3cgPSB0aGlzLiQoIGUuY3VycmVudFRhcmdldCApLFxuICAgICAgICAgICAgdG9wID0gcm93LnBvc2l0aW9uKCkudG9wICsgMTNcblxuICAgICAgICB0aGlzLmhvdmVyZWRNb2RlbCA9IHRoaXMuaXRlbXMuZ2V0KCByb3cuYXR0ciggJ2RhdGEtaWQnICkgKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5lZGl0QnRuLnJlbW92ZUNsYXNzKCdoaWRlJylcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuZGVsZXRlQnRuLnJlbW92ZUNsYXNzKCdoaWRlJylcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5lZGl0QnRuLmNzcyggeyB0b3A6IHRvcCwgbGVmdDogJzExNXB4JyB9IClcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuZGVsZXRlQnRuLmNzcyggeyB0b3A6IHRvcCwgbGVmdDogJzEzNXB4JyB9IClcbiAgICB9LFxuICAgIFxuICAgIG9uUm93TW91c2VMZWF2ZSggZSApIHtcblxuICAgICAgICBpZiggdGhpcy5pc01vdXNlT25FbCggZSwgdGhpcy50ZW1wbGF0ZURhdGEuZGVsZXRlQnRuICkgfHwgdGhpcy5pc01vdXNlT25FbCggZSwgdGhpcy50ZW1wbGF0ZURhdGEuZWRpdEJ0biApICkgcmV0dXJuXG5cbiAgICAgICAgdGhpcy5ob3ZlcmVkTW9kZWwgPSB1bmRlZmluZWRcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5kZWxldGVCdG4uYWRkQ2xhc3MoJ2hpZGUnKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5lZGl0QnRuLmFkZENsYXNzKCdoaWRlJylcbiAgICB9LFxuXG4gICAgcG9wdWxhdGVNb2RhbEZpZWxkKCBwcm9wZXJ0eSApIHtcbiAgICAgICAgdmFyIGVsID0gdGhpcy5tb2RhbFZpZXcudGVtcGxhdGVEYXRhWyBwcm9wZXJ0eS5wcm9wZXJ0eSBdLFxuICAgICAgICAgICAgaW1nLFxuICAgICAgICAgICAgbW9kZWxWYWx1ZVxuXG4gICAgICAgIGlmKCAhIGVsICkgcmV0dXJuXG4gICAgICAgIGlmKCBwcm9wZXJ0eS5yYW5nZSA9PT0gJ0ZpbGUnICkge1xuICAgICAgICAgICAgdGhpcy5pbml0RmlsZVVwbG9hZGVyKCBwcm9wZXJ0eSApXG4gICAgICAgICAgICBpbWcgPSB0aGlzLml0ZW1WaWV3c1sgdGhpcy5tb2RlbFRvRWRpdC5pZCBdLnRlbXBsYXRlRGF0YVsgcHJvcGVydHkucHJvcGVydHkgXS5maW5kKCdpbWcnKVxuICAgICAgICAgICAgaWYoIGltZy5sZW5ndGggKSB0aGlzLm1vZGFsVmlldy50ZW1wbGF0ZURhdGFbIHByb3BlcnR5LnByb3BlcnR5ICsgXCJQcmV2aWV3XCIgXS5yZXBsYWNlV2l0aCggaW1nLmNsb25lKGZhbHNlKS5hdHRyKCB7IGlkOiBwcm9wZXJ0eS5wcm9wZXJ0eSArIFwiLXByZXZpZXdcIiB9ICkgKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG1vZGVsVmFsdWUgPSB0aGlzLm1vZGVsVG9FZGl0LmdldCggcHJvcGVydHkucHJvcGVydHkgKVxuICAgICAgICAgXG4gICAgICAgIGlmKCAvRGF0ZXxUaW1lLy50ZXN0KHByb3BlcnR5LnJhbmdlKSApIHsgcmV0dXJuIHRoaXMuaW5pdERhdGVwaWNrZXIoIHByb3BlcnR5LCBtb2RlbFZhbHVlICkgfVxuICAgICAgICBlbHNlIGlmKCBwcm9wZXJ0eS5wcm9wZXJ0eSA9PT0gJ2RheW9md2VlaycgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWwudmFsKCBtb2RlbFZhbHVlLnJhdyApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiggIXByb3BlcnR5LmZrIHx8ICFwcm9wZXJ0eS5kZXNjcmlwdG9yICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsLnZhbCggKCB0eXBlb2YgbW9kZWxWYWx1ZSA9PT0gXCJib29sZWFuXCIgKSA/IG1vZGVsVmFsdWUudG9TdHJpbmcoKSA6IG1vZGVsVmFsdWUgKVxuICAgICAgICB9XG4gICAgICAgXG4gICAgICAgIHRoaXMuaW5pdFR5cGVhaGVhZCggcHJvcGVydHkgKSBcbiAgICAgICAgZWwudHlwZWFoZWFkKCAndmFsJywgdGhpcy5tb2RlbFRvRWRpdC5nZXQoIFsgcHJvcGVydHkuZGVzY3JpcHRvci50YWJsZSwgcHJvcGVydHkuZGVzY3JpcHRvci5jb2x1bW4ubmFtZSBdLmpvaW4oJy4nKSApLnZhbHVlIClcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5pbWFnZUxvYWRlciA9IG5ldyAoIHJlcXVpcmUoJ2JhY2tib25lJykuQ29sbGVjdGlvbiApKClcbiAgICAgICAgICAgIC5vbiggJ2FkZCcsICgpID0+IHsgaWYoIHRoaXMuaW1hZ2VMb2FkZXIubGVuZ3RoID09PSAxICkgdGhpcy5wcm9jZXNzSW1hZ2VMb2FkZXIoKSB9IClcbiAgICAgICAgICAgIC5vbiggJ3JlbW92ZScsICgpID0+IHsgaWYoIHRoaXMuaW1hZ2VMb2FkZXIubGVuZ3RoICkgdGhpcy5wcm9jZXNzSW1hZ2VMb2FkZXIoKSB9IClcblxuICAgICAgICBUYWJsZS5wcm90b3R5cGUucG9zdFJlbmRlci5jYWxsKHRoaXMpXG4gICAgICAgIHRoaXMuaXRlbXMub24oICdyZXNldCcsICgpID0+IHRoaXMudGVtcGxhdGVEYXRhLnN1YkhlYWRpbmcudGV4dCggdGhpcy5sYWJlbCApIClcbiAgICB9LFxuXG4gICAgcHJvY2Vzc0ltYWdlTG9hZGVyKCkge1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmltYWdlTG9hZGVyLmF0KDApLmlkLFxuICAgICAgICAgICAgY29sdW1ucyA9IHRoaXMuaW1hZ2VMb2FkZXIuYXQoMCkuZ2V0KCdjb2x1bW5zJylcblxuICAgICAgICBjb2x1bW5zLmZvckVhY2goIGNvbHVtbiA9PiB0aGlzLmdldEltYWdlKCB7ICdpZCc6IGlkLCAnY29sdW1uJzogY29sdW1uIH0gKSApXG4gICAgfSxcblxuICAgIHJlcXVpcmVzUm9sZTogJ2FkbWluJyxcblxuICAgIHNldEZpZWxkcyggaW5zdGFuY2UgKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoIGluc3RhbmNlICksIHdpZHRoID0gTWF0aC5mbG9vciggMTAwIC8ga2V5cy5sZW5ndGggKVxuICAgICAgICB0aGlzLmZpZWxkcyA9IGtleXMubWFwKCBrZXkgPT4ge1xuICAgICAgICAgICAgdmFyIGZpZWxkID0geyBuYW1lOiBrZXksIGxhYmVsOiB0aGlzLmZvcm1hdC5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoIGtleSApLCB3aWR0aDogd2lkdGggfVxuICAgICAgICAgICAgdGhpcy4kKCB0aGlzLnRlbXBsYXRlRGF0YS5oZWFkZXIuY2hpbGRyZW4oJ3RyJylbMF0gKS5hcHBlbmQoIHRoaXMudGVtcGxhdGVzLmhlYWRlckNvbHVtbi5jYWxsKCB0aGlzLCBmaWVsZCApIClcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgc2hvd0NyZWF0ZURpYWxvZygpIHtcblxuICAgICAgICB2YXIgb25TaG93biA9ICgpID0+IHRoaXMuY3JlYXRlUHJvcGVydGllcy5mb3JFYWNoKCBwcm9wZXJ0eSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoIHByb3BlcnR5LmZrICYmIHByb3BlcnR5LmRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCApIHRoaXMuaW5pdFR5cGVhaGVhZCggcHJvcGVydHkgKVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIC9EYXRlfFRpbWUvLnRlc3QocHJvcGVydHkucmFuZ2UpICkgdGhpcy5pbml0RGF0ZXBpY2tlciggcHJvcGVydHkgKVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIHByb3BlcnR5LnJhbmdlID09PSBcIkZpbGVcIiApIHRoaXMuaW5pdEZpbGVVcGxvYWRlciggcHJvcGVydHkgKVxuICAgICAgICAgICAgIH0gKSxcbiAgICAgICAgICAgIG9uU3VibWl0ID0gZGF0YSA9PiB0aGlzLmNyZWF0ZShkYXRhKVxuXG4gICAgICAgIHRoaXMubW9kYWxWaWV3LnNob3coIHtcbiAgICAgICAgICAgIGJvZHk6IHRoaXMudGVtcGxhdGVzLmNyZWF0ZSgge1xuICAgICAgICAgICAgICAgIGZpZWxkczogdGhpcy5jcmVhdGVQcm9wZXJ0aWVzLm1hcCggcHJvcGVydHkgPT4gXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVzWyBwcm9wZXJ0eS5yYW5nZSBdKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogKCBwcm9wZXJ0eS5mayApID8gJ3R5cGVhaGVhZCcgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLmdldExhYmVsKCAoIHByb3BlcnR5LmRlc2NyaXB0b3IgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gWyBwcm9wZXJ0eS5kZXNjcmlwdG9yLnRhYmxlLCBwcm9wZXJ0eS5kZXNjcmlwdG9yLmNvbHVtbi5uYW1lIF0uam9pbignLicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBwcm9wZXJ0eS5wcm9wZXJ0eSApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvcGVydHkucHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogKCBwcm9wZXJ0eS5wcm9wZXJ0eSA9PT0gXCJwYXNzd29yZFwiICkgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSApIFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0gKSxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLnV0aWwuZm9ybWF0KCAnQ3JlYXRlICVzJywgdGhpcy5sYWJlbCApXG4gICAgICAgIH0gKVxuICAgICAgICAub24oICdzaG93bicsIG9uU2hvd24gKVxuICAgICAgICAub24oICdzdWJtaXQnLCBvblN1Ym1pdCApXG4gICAgICAgIC5vbiggJ2hpZGRlbicsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubW9kYWxWaWV3LnJlbW92ZUxpc3RlbmVyKCAnc3VibWl0Jywgb25TdWJtaXQgKVxuICAgICAgICAgICAgdGhpcy5tb2RhbFZpZXcucmVtb3ZlTGlzdGVuZXIoICdzaG93bicsIG9uU2hvd24gKVxuICAgICAgICB9IClcblxuICAgIH0sXG5cbiAgICBzaG93RGVsZXRlRGlhbG9nKCkge1xuXG4gICAgICAgIHZhciBvblN1Ym1pdCA9ICgpID0+IHRoaXMuZGVsZXRlTW9kZWwoKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5tb2RlbFRvRGVsZXRlID0gdGhpcy5ob3ZlcmVkTW9kZWxcblxuICAgICAgICB0aGlzLm1vZGFsVmlldy5zaG93KCB7XG4gICAgICAgICAgICBib2R5OiB0aGlzLnV0aWwuZm9ybWF0KCAnQXJlIHlvdSBzdXJlIHlvdSB3b3VsZCBsaWtlIHRvIGRlbGV0ZSAlcz8nLCB0aGlzLm1vZGVsVG9EZWxldGUuZ2V0KCB0aGlzLnJlY29yZERlc2NyaXB0b3IgKSB8fCBcInRoaXMgcmVjb3JkXCIgKSxcbiAgICAgICAgICAgIGNvbmZpcm1UZXh0OiAnWWVzJyxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLnV0aWwuZm9ybWF0KCAnRGVsZXRlICVzJywgdGhpcy5sYWJlbCApXG4gICAgICAgIH0gKVxuICAgICAgICAub24oICdzdWJtaXQnLCBvblN1Ym1pdCApXG4gICAgICAgIC5vbiggJ2hpZGRlbicsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubW9kZWxUb0RlbGV0ZSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgdGhpcy5tb2RhbFZpZXcucmVtb3ZlTGlzdGVuZXIoICdzdWJtaXQnLCBvblN1Ym1pdCApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBzaG93RWRpdERpYWxvZygpIHtcblxuICAgICAgICB2YXIgcG9wdWxhdGVNb2RhbEZpZWxkcyA9ICgpID0+IHRoaXMuY3JlYXRlUHJvcGVydGllcy5mb3JFYWNoKCBwcm9wZXJ0eSA9PiB0aGlzLnBvcHVsYXRlTW9kYWxGaWVsZCggcHJvcGVydHkgKSApLFxuICAgICAgICAgICAgb25TdWJtaXQgPSBkYXRhID0+IHRoaXMuZWRpdChkYXRhKVxuXG4gICAgICAgIHRoaXMubW9kZWxUb0VkaXQgPSB0aGlzLmhvdmVyZWRNb2RlbFxuXG4gICAgICAgIHRoaXMubW9kYWxWaWV3LnNob3coIHtcbiAgICAgICAgICAgIGJvZHk6IHRoaXMudGVtcGxhdGVzLmNyZWF0ZSgge1xuICAgICAgICAgICAgICAgIGZpZWxkczogdGhpcy5jcmVhdGVQcm9wZXJ0aWVzLm1hcCggcHJvcGVydHkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZXNbICggcHJvcGVydHkucHJvcGVydHkgPT09IFwiZGF5b2Z3ZWVrXCIgKSA/IFwiRGF5T2ZXZWVrXCIgOiBwcm9wZXJ0eS5yYW5nZSBdKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogKCBwcm9wZXJ0eS5mayApID8gJ3R5cGVhaGVhZCcgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHByb3BlcnR5LnByb3BlcnR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuZ2V0TGFiZWwoICggcHJvcGVydHkuZGVzY3JpcHRvciApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbIHByb3BlcnR5LmRlc2NyaXB0b3IudGFibGUsIHByb3BlcnR5LmRlc2NyaXB0b3IuY29sdW1uLm5hbWUgXS5qb2luKCcuJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHByb3BlcnR5LnByb3BlcnR5IClcbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgdGl0bGU6IHRoaXMudXRpbC5mb3JtYXQoICdFZGl0ICVzJywgdGhpcy5sYWJlbCApXG4gICAgICAgIH0gKVxuICAgICAgICAub24oICdzaG93bicsIHBvcHVsYXRlTW9kYWxGaWVsZHMgKVxuICAgICAgICAub24oICdzdWJtaXQnLCBvblN1Ym1pdCApXG4gICAgICAgIC5vbiggJ2hpZGRlbicsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubW9kYWxWaWV3LnJlbW92ZUxpc3RlbmVyKCAnc2hvd24nLCBwb3B1bGF0ZU1vZGFsRmllbGRzIClcbiAgICAgICAgICAgIHRoaXMubW9kYWxWaWV3LnJlbW92ZUxpc3RlbmVyKCAnc3VibWl0Jywgb25TdWJtaXQgKVxuICAgICAgICAgICAgdGhpcy5tb2RlbFRvRWRpdCA9IHVuZGVmaW5lZFxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9yZXNvdXJjZScpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKSxcblxuICAgIHRlbXBsYXRlczogT2JqZWN0LmFzc2lnbigge30sIFRhYmxlLnByb3RvdHlwZS50ZW1wbGF0ZXMsIHtcbiAgICAgICAgY3JlYXRlOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvY3JlYXRlSW5zdGFuY2UnKSggcmVxdWlyZSgnaGFuZGxlYmFycycpICksXG4gICAgICAgIEJvb2xlYW46IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9mb3JtL0Jvb2xlYW4nKSggcmVxdWlyZSgnaGFuZGxlYmFycycpICksXG4gICAgICAgIERhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9mb3JtL0RhdGUnKSggcmVxdWlyZSgnaGFuZGxlYmFycycpICksXG4gICAgICAgIERheU9mV2VlazogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2Zvcm0vRGF5T2ZXZWVrJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApLFxuICAgICAgICBGaWxlOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvZm9ybS9GaWxlJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApLFxuICAgICAgICBGbG9hdDogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2Zvcm0vVGV4dCcpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKSxcbiAgICAgICAgSW50ZWdlcjogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2Zvcm0vVGV4dCcpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKSxcbiAgICAgICAgVGV4dDogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2Zvcm0vVGV4dCcpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKSxcbiAgICAgICAgVGV4dEFyZWE6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9mb3JtL1RleHRBcmVhJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApLFxuICAgICAgICBUaW1lOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvZm9ybS9EYXRlJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApXG4gICAgfSApLFxuXG4gICAgdXBkYXRlKCByZXNvdXJjZSApIHtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlXG5cbiAgICAgICAgdGhpcy5pdGVtcy5yZXNldCggbnVsbCApXG4gICAgICAgIHRoaXMuZmllbGRzID0gWyBdXG4gICAgICAgIHRoaXMuJCggdGhpcy50ZW1wbGF0ZURhdGEuaGVhZGVyLmNoaWxkcmVuKCd0cicpWzBdICkuZW1wdHkoKVxuXG4gICAgICAgIHRoaXMuY3JlYXRlSXRlbXMoKVxuXG4gICAgICAgIHRoaXMuaXRlbXMub24oICdyZXNldCcsICgpID0+IHsgdGhpcy50ZW1wbGF0ZURhdGEuc3ViSGVhZGluZy50ZXh0KCB0aGlzLmxhYmVsICkgfSApXG4gICAgICAgIFxuICAgICAgICB0aGlzLmZldGNoSXRlbXMoKS5zaG93KClcbiAgICB9LFxuXG4gICAgdXBsb2FkRmlsZSggbmFtZSwgZGF0YSwgaWQgKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiQuYWpheCgge1xuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMudXRpbC5mb3JtYXQoIFwiL2ZpbGUvJXMvJXMvJWRcIiwgdGhpcy5yZXNvdXJjZSwgbmFtZSwgaWQgKSB9IClcbiAgICAgICAgICAgIC5kb25lKCAoIHJlc3BvbnNlLCB0ZXh0U3RhdHVzLCBqcVhIUiApID0+IHJlc29sdmUoKSApXG4gICAgICAgICAgICAuZmFpbCggKCBqcVhIUiwgdGV4dFN0YXR1cywgZXJyICkgPT4gcmVqZWN0KCBlcnIgKSApXG4gICAgICAgIH0gKVxuICAgIH1cblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzb3VyY2VcbiIsInZhciBMaXN0SXRlbSA9IHJlcXVpcmUoJy4vdXRpbC9MaXN0SXRlbScpLFxuICAgIFJlc291cmNlUm93ID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0SXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBSZXNvdXJjZVJvdy5wcm90b3R5cGUsIExpc3RJdGVtLnByb3RvdHlwZSwge1xuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zKCkgeyByZXR1cm4ge1xuICAgICAgICBpZDogdGhpcy5tb2RlbC5pZCxcbiAgICAgICAgdmFsdWVzOiB0aGlzLmZpZWxkcy5tYXAoIGZpZWxkID0+ICggeyBuYW1lOiBmaWVsZC5uYW1lLCB2YWx1ZTogdGhpcy5tb2RlbC5nZXQoZmllbGQubmFtZSksIHdpZHRoOiBmaWVsZC53aWR0aCB9ICkgKVxuICAgIH0gfSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvcmVzb3VyY2VSb3cnKSggcmVxdWlyZSgnaGFuZGxlYmFycycpIClcblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzb3VyY2VSb3dcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIE1lbWJlclNlYXNvbjogcmVxdWlyZSgnLi4vbW9kZWxzL01lbWJlclNlYXNvbicpLFxuXG4gICAgY2xlYXIoKSB7IHRoaXMuZWxzLmxpc3QuaW5uZXJIVE1MID0gJycgfSxcblxuICAgIGV2ZW50czoge1xuICAgICAgICBsaXN0OiAnY2xpY2snXG4gICAgfSxcblxuICAgIGluc2VydFNoYXJlTGFiZWxzKCkge1xuICAgICAgICBjb25zdCBjb3VudFBlclNoYXJlID0geyB9XG5cbiAgICAgICAgdGhpcy5NZW1iZXJTZWFzb24uZGF0YS5mb3JFYWNoKCBzZWFzb24gPT4ge1xuICAgICAgICAgICAgY291bnRQZXJTaGFyZVsgc2Vhc29uLm5hbWUgXSA/ICsrY291bnRQZXJTaGFyZVsgc2Vhc29uLm5hbWUgXSA6IGNvdW50UGVyU2hhcmVbIHNlYXNvbi5uYW1lIF0gPSAxXG4gICAgICAgICAgICBpZiggY291bnRQZXJTaGFyZVsgc2Vhc29uLm5hbWUgXSA+IDEgKSBzZWFzb24uY291bnQgPSBjb3VudFBlclNoYXJlWyBzZWFzb24ubmFtZSBdXG5cbiAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXMuU2hhcmVCb3goIHNlYXNvbiApLCBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLmxpc3QgfSB9IClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIG9uTGlzdENsaWNrKCBlICkge1xuICAgICAgICBpZiggISBlLnRhcmdldC5jbG9zZXN0KCdkaXYuc2hhcmUtbGFiZWwnKSApIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIGlmKCB0aGlzLmN1cnJlbnRTZWxlY3Rpb24gKSB0aGlzLmN1cnJlbnRTZWxlY3Rpb24uY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldC5jbG9zZXN0KCdkaXYuc2hhcmUtbGFiZWwnKVxuXG4gICAgICAgIHRoaXMuY3VycmVudFNlbGVjdGlvbiA9IGVsXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoICdzZWxlY3RlZCcgKVxuICAgICAgICB0aGlzLmVtaXQoICdzZWxlY3RlZCcsIHsgY3VzdG9tZXI6IHRoaXMuY3VzdG9tZXIsIHNoYXJlOiB0aGlzLk1lbWJlclNlYXNvbi5kYXRhLmZpbmQoIHNlYXNvbiA9PiBzZWFzb24ubWVtYmVyc2hhcmVpZCA9PSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSApIH0gKVxuICAgIH0sXG5cbiAgICBzZWxlY3QoIG1lbWJlclNoYXJlSWQgKSB7XG4gICAgICAgIHRoaXMuZWxzLmxpc3QucXVlcnlTZWxlY3RvcihgZGl2LnNoYXJlLWxhYmVsW2RhdGEtaWQ9XCIke21lbWJlclNoYXJlSWR9XCJdYCkuY2xpY2soKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgU2hhcmVCb3g6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL1NoYXJlQm94JylcbiAgICB9LFxuXG4gICAgdXBkYXRlKCBjdXN0b21lciApIHtcbiAgICAgICAgdGhpcy5jdXN0b21lciA9IGN1c3RvbWVyXG4gICAgICBcbiAgICAgICAgdGhpcy5jbGVhcigpXG4gICAgICAgICBcbiAgICAgICAgdGhpcy5NZW1iZXJTZWFzb24uZ2V0KCB7IHF1ZXJ5OiB7IG1lbWJlcmlkOiBjdXN0b21lci5tZW1iZXIuZGF0YS5pZCwgc2hhcmVpZDogeyBvcGVyYXRpb246ICdqb2luJywgdmFsdWU6IHsgdGFibGU6ICdzaGFyZScsIGNvbHVtbjogJ2lkJyB9IH0gfSB9IClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuaW5zZXJ0U2hhcmVMYWJlbHMoKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLnNob3coKSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgfVxuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7IHJldHVybiB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIFZpZXdzOiB7XG4gICAgICAgIGJ1dHRvbkZsb3coKSB7XG4gICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFsgeyBuYW1lOiAnc2F2ZScsIHRleHQ6ICdTYXZlIENoYW5nZXMnLCBjbGFzczonc2F2ZS1idG4nLCBuZXh0U3RhdGU6ICdjb25maXJtJyB9IF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnY29uZmlybUJ0bicsIGNsYXNzOidzYXZlLWJ0bicsIHRleHQ6ICdBcmUgeW91IFN1cmU/JywgZW1pdDogdHJ1ZSwgbmV4dFN0YXRlOiAnc3RhcnQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnY2FuY2VsJywgY2xhc3M6J3Jlc2V0LWJ0bicsIG5leHRTdGF0ZTogJ3N0YXJ0JywgdGV4dDogJ0NhbmNlbCcgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZGlzcGxheVRvdGFsKCkge1xuICAgICAgICB0aGlzLnRvdGFsID0gMFxuXG4gICAgICAgIHRoaXMudG90YWwgKz0gdGhpcy53ZWVrc1JlbW92ZWRQcmljZVxuICAgICAgICB0aGlzLnRvdGFsICs9IHRoaXMud2Vla3NBZGRlZFByaWNlXG5cbiAgICAgICAgaWYoIHRoaXMud2Vla2x5UHJpY2VBZGp1c3RtZW50ICkgdGhpcy50b3RhbCArPSB0aGlzLm9wdGlvbnNBZGp1c3RtZW50XG4gICAgICAgIFxuICAgICAgICB0aGlzLmVscy5hZGp1c3RtZW50LnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIHRoaXMudG90YWwgKVxuICAgICAgICBpZiggdGhpcy50b3RhbCA8IDAgKSB0aGlzLmVscy5hZGp1c3RtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLW5lZ2F0aXZlJylcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBnZXRXaGl0ZXNwYWNlKCBjb3VudCApIHtcbiAgICAgICAgbGV0IHJ2ID0gXCJcIlxuXG4gICAgICAgIHdoaWxlKCBjb3VudCA+IDAgKSB7IHJ2ICs9IFwiIFwiOyBjb3VudC0tIH1cblxuICAgICAgICByZXR1cm4gcnZcbiAgICB9LFxuXG4gICAgZ2V0RGVzY3JpcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IDEwMCxcbiAgICAgICAgICAgIGxpbmVzID0gW1xuICAgICAgICAgICAgICAgIFsgYFdlZWtzIFJlbW92ZWQ6ICR7dGhpcy5lbHMud2Vla3NSZW1vdmVkLnRleHRDb250ZW50fWAsIGBBZGp1c3RtZW50OiAke3RoaXMuQ3VycmVuY3kuZm9ybWF0KHRoaXMud2Vla3NSZW1vdmVkUHJpY2UpfWAgXSxcbiAgICAgICAgICAgICAgICBbIGBXZWVrcyBBZGRlZDogJHt0aGlzLmVscy53ZWVrc0FkZGVkLnRleHRDb250ZW50fWAsIGBBZGp1c3RtZW50OiAke3RoaXMuQ3VycmVuY3kuZm9ybWF0KHRoaXMud2Vla3NBZGRlZFByaWNlKX1gIF1cbiAgICAgICAgICAgIF1cblxuICAgICAgICByZXR1cm4gWyBgJHtsaW5lc1swXVswXX0ke3RoaXMuZ2V0V2hpdGVzcGFjZSggbGluZVdpZHRoIC0gbGluZXNbMF1bMF0ubGVuZ3RoIC0gbGluZXNbMF1bMV0ubGVuZ3RoICl9JHtsaW5lc1swXVsxXX1gLFxuICAgICAgICAgICAgICAgICBgJHtsaW5lc1sxXVswXX0ke3RoaXMuZ2V0V2hpdGVzcGFjZSggbGluZVdpZHRoIC0gbGluZXNbMV1bMF0ubGVuZ3RoIC0gbGluZXNbMV1bMV0ubGVuZ3RoICl9JHtsaW5lc1sxXVsxXX1gLFxuICAgICAgICAgICAgICAgIGBPcHRpb25zIFVwZGF0ZTogJHt0aGlzLm9wdGlvbnNEZXNjcmlwdGlvbn1gLFxuICAgICAgICAgICAgICAgIGBXZWVrbHkgcHJpY2UgYWRqdXN0bWVudDogJHt0aGlzLkN1cnJlbmN5LmZvcm1hdCh0aGlzLndlZWtseVByaWNlQWRqdXN0bWVudCl9YCxcbiAgICAgICAgICAgICAgICBgV2Vla3MgYWZmZWN0ZWQ6ICR7dGhpcy53ZWVrc0FmZmVjdGVkfWBcbiAgICAgICAgICAgIF0uam9pbignXFxuJylcbiAgICB9LFxuXG4gICAgZ2V0UGF0Y2hEYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMudG90YWwsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5nZXREZXNjcmlwdGlvbigpLFxuICAgICAgICAgICAgc2VuZEVtYWlsOiB0aGlzLmVscy5zZW5kRW1haWwuY2hlY2tlZFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uT3B0aW9uc1Jlc2V0KCkge1xuICAgICAgICB0aGlzLndlZWtseVByaWNlQWRqdXN0bWVudCA9IGZhbHNlXG4gICAgICAgIHRoaXMuZWxzLm9wdGlvbnMuY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcblxuICAgICAgICB0aGlzLmVscy53ZWVrbHlBZGp1c3RtZW50LnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIDAgKVxuICAgICAgICB0aGlzLmVscy5zaGFyZU9wdGlvbkRlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gYGBcblxuICAgICAgICB0aGlzLmRpc3BsYXlUb3RhbCgpXG5cbiAgICAgICAgaWYoIHRoaXMuZWxzLndlZWtzUmVtb3ZlZC50ZXh0Q29udGVudCA9PSAwICYmIHRoaXMuZWxzLndlZWtzQWRkZWQudGV4dENvbnRlbnQgPT0gMCApIHRoaXMuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgIH0sXG5cbiAgICBvbldlZWtzUmVzZXQoKSB7XG4gICAgICAgIHRoaXMub25XZWVrVXBkYXRlKCB7IGFkZGVkOiAwLCByZW1vdmVkOiAwIH0gKVxuICAgIH0sXG5cbiAgICBvbk9wdGlvbnNVcGRhdGUoIHsgZGVzY3JpcHRpb24sIHByaWNlQWRqdXN0bWVudCB9ICkge1xuXG4gICAgICAgIHRoaXMub3B0aW9uc0Rlc2NyaXB0aW9uID0gZGVzY3JpcHRpb25cblxuICAgICAgICB0aGlzLmVscy5vcHRpb25zLmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGRlbicpXG5cbiAgICAgICAgdGhpcy53ZWVrbHlQcmljZUFkanVzdG1lbnQgPSBwcmljZUFkanVzdG1lbnRcbiAgICAgICAgdGhpcy5lbHMud2Vla2x5QWRqdXN0bWVudC50ZXh0Q29udGVudCA9IHRoaXMuQ3VycmVuY3kuZm9ybWF0KCBwcmljZUFkanVzdG1lbnQgKVxuICAgICAgICB0aGlzLmVscy5zaGFyZU9wdGlvbkRlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gZGVzY3JpcHRpb25cbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlT3B0aW9uc0FkanVzdG1lbnQoKVxuXG4gICAgICAgIHRoaXMuZGlzcGxheVRvdGFsKCkuc2hvdygpXG4gICAgfSxcblxuICAgIG9uV2Vla1VwZGF0ZSggeyBhZGRlZCwgcmVtb3ZlZCB9ICkge1xuICAgICAgICB0aGlzLndlZWtzQWZmZWN0ZWQgPSB0aGlzLm9yaWdpbmFsV2Vla3NBZmZlY3RlZCAtIHJlbW92ZWRcbiAgICAgICAgdGhpcy5lbHMud2Vla3NBZmZlY3RlZC50ZXh0Q29udGVudCA9IHRoaXMud2Vla3NBZmZlY3RlZFxuICAgICAgICBcbiAgICAgICAgdGhpcy5lbHMud2Vla3NSZW1vdmVkLnRleHRDb250ZW50ID0gcmVtb3ZlZFxuICAgICAgICB0aGlzLmVscy53ZWVrc0FkZGVkLnRleHRDb250ZW50ID0gYWRkZWRcblxuICAgICAgICB0aGlzLndlZWtzQWRkZWRQcmljZSA9IGFkZGVkICogKCB0aGlzLm9yaWdpbmFsV2Vla2x5UHJpY2UgKyAoIHRoaXMud2Vla2x5UHJpY2VBZGp1c3RtZW50IHx8IDAgKSApXG4gICAgICAgIHRoaXMuZWxzLndlZWtzQWRkZWRQcmljZS50ZXh0Q29udGVudCA9IHRoaXMuQ3VycmVuY3kuZm9ybWF0KCB0aGlzLndlZWtzQWRkZWRQcmljZSApXG5cbiAgICAgICAgdGhpcy53ZWVrc1JlbW92ZWRQcmljZSA9IC0xICogcmVtb3ZlZCAqIHRoaXMub3JpZ2luYWxXZWVrbHlQcmljZVxuICAgICAgICB0aGlzLmVscy53ZWVrc1JlbW92ZWRQcmljZS50ZXh0Q29udGVudCA9IHRoaXMuQ3VycmVuY3kuZm9ybWF0KCB0aGlzLndlZWtzUmVtb3ZlZFByaWNlIClcblxuICAgICAgICBpZiggYWRkZWQgPT0gMCAmJiByZW1vdmVkID09IDAgJiYgIXRoaXMud2Vla2x5UHJpY2VBZGp1c3RtZW50ICkgcmV0dXJuIHRoaXMuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zQWRqdXN0bWVudCgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpc3BsYXlUb3RhbCgpLnNob3coKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnNEZXNjcmlwdGlvbiA9IGBgXG4gICAgICAgIHRoaXMuZWxzLndlZWtzQWRkZWQudGV4dENvbnRlbnQgPSAwXG4gICAgICAgIHRoaXMuZWxzLndlZWtzUmVtb3ZlZC50ZXh0Q29udGVudCA9IDBcbiAgICAgICAgdGhpcy53ZWVrc1JlbW92ZWRQcmljZSA9IDBcbiAgICAgICAgdGhpcy53ZWVrc0FkZGVkUHJpY2UgPSAwXG4gICAgICAgIHRoaXMuZWxzLndlZWtzUmVtb3ZlZFByaWNlLnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIHRoaXMud2Vla3NSZW1vdmVkUHJpY2UgKVxuICAgICAgICB0aGlzLmVscy53ZWVrc0FkZGVkUHJpY2UudGV4dENvbnRlbnQgPSB0aGlzLkN1cnJlbmN5LmZvcm1hdCggdGhpcy53ZWVrc0FkZGVkUHJpY2UgKVxuXG4gICAgICAgIHRoaXMudmlld3MuYnV0dG9uRmxvdy5vbiggJ2NvbmZpcm1CdG5DbGlja2VkJywgKCkgPT4gdGhpcy5lbWl0KCAncGF0Y2hNZW1iZXJTaGFyZScgKSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuZWxzLnNlbmRFbWFpbC5jaGVja2VkID0gZmFsc2VcbiAgICAgICAgdGhpcy5vcHRpb25zRGVzY3JpcHRpb24gPSBgYFxuICAgICAgICB0aGlzLmVscy53ZWVrc0FkZGVkLnRleHRDb250ZW50ID0gMFxuICAgICAgICB0aGlzLmVscy53ZWVrc1JlbW92ZWQudGV4dENvbnRlbnQgPSAwXG4gICAgICAgIHRoaXMud2Vla3NSZW1vdmVkUHJpY2UgPSAwXG4gICAgICAgIHRoaXMuZWxzLndlZWtzUmVtb3ZlZFByaWNlLnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIHRoaXMud2Vla3NSZW1vdmVkUHJpY2UgKVxuICAgICAgICB0aGlzLmVscy53ZWVrbHlBZGp1c3RtZW50LnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIDAgKVxuICAgICAgICB0aGlzLndlZWtseVByaWNlQWRqdXN0bWVudCA9IGZhbHNlXG4gICAgICAgIHRoaXMuZWxzLnNoYXJlT3B0aW9uRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBgYFxuICAgICAgICB0aGlzLmhpZGUoKVxuICAgIH0sXG5cbiAgICBzZXRPcmlnaW5hbFdlZWtseVByaWNlKCBwcmljZSApIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbFdlZWtseVByaWNlID0gcHJpY2VcbiAgICB9LFxuXG4gICAgc2V0V2Vla3NBZmZlY3RlZCggeyBzZWxlY3RhYmxlLCBza2lwcGVkIH0gKSB7XG4gICAgICAgIHRoaXMub3JpZ2luYWxXZWVrc0FmZmVjdGVkID0gc2VsZWN0YWJsZSAtIHNraXBwZWRcbiAgICAgICAgdGhpcy53ZWVrc0FmZmVjdGVkID0gdGhpcy5vcmlnaW5hbFdlZWtzQWZmZWN0ZWRcbiAgICAgICAgdGhpcy5lbHMud2Vla3NBZmZlY3RlZC50ZXh0Q29udGVudCA9IHRoaXMud2Vla3NBZmZlY3RlZFxuICAgIH0sXG5cbiAgICB1cGRhdGVPcHRpb25zQWRqdXN0bWVudCgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zQWRqdXN0bWVudCA9IHRoaXMud2Vla3NBZmZlY3RlZCAqIHRoaXMud2Vla2x5UHJpY2VBZGp1c3RtZW50XG4gICAgICAgIHRoaXMuZWxzLm9wdGlvbnNBZGp1c3RtZW50LnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIHRoaXMub3B0aW9uc0FkanVzdG1lbnQgKVxuICAgICAgICB0aGlzLmVscy5vcHRpb25zQWRqdXN0bWVudC5jbGFzc0xpc3QuYWRkKCB0aGlzLm9wdGlvbnNBZGp1c3RtZW50IDwgMCA/ICdpcy1uZWdhdGl2ZScgOiAnaXMtcG9zaXRpdmUnIClcbiAgICB9XG5cbn0gKVxuIiwidmFyIE15VmlldyA9IHJlcXVpcmUoJy4vTXlWaWV3JyksXG4gICAgU2lnbnVwID0gZnVuY3Rpb24oKSB7IHJldHVybiBNeVZpZXcuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuT2JqZWN0LmFzc2lnbiggU2lnbnVwLnByb3RvdHlwZSwgTXlWaWV3LnByb3RvdHlwZSwge1xuXG4gICAgZG9uZSgpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEubGVmdEJ0bi5oaWRlKClcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEucmlnaHRCdG4uaGlkZSgpXG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuICAgICAgICAnbGVmdEJ0bic6IHsgbWV0aG9kOiAnZ29CYWNrJyB9LFxuICAgICAgICAncmlnaHRCdG4nOiB7IG1ldGhvZDogJ3ZhbGlkYXRlVmlldycgfSxcbiAgICB9LFxuICAgIFxuICAgIGdvQmFjaygpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEubGVmdEJ0bi5vZmYoKVxuXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzWyB0aGlzLnZpZXdzWyB0aGlzLmN1cnJlbnRJbmRleCBdLm5hbWUgXS5oaWRlKClcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNbIHRoaXMudmlld3NbIHRoaXMuY3VycmVudEluZGV4IF0ubmFtZSBdLnRlbXBsYXRlRGF0YS5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NsaWRlLWluLWxlZnQnKS5yZW1vdmVDbGFzcygnc2xpZGUtaW4tcmlnaHQnKVxuXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4IC09IDFcblxuICAgICAgICB0aGlzLnN0YXRlLnNpZ251cC5pbmRleCA9IHRoaXMuY3VycmVudEluZGV4XG4gICAgICAgIHRoaXMuc2F2ZVN0YXRlKClcblxuICAgICAgICB0aGlzLnNob3dQcm9wZXJWaWV3KCB0cnVlIClcblxuICAgICAgICB3aW5kb3cuc2V0VGltZW91dCggKCkgPT4gdGhpcy5kZWxlZ2F0ZUV2ZW50cyggJ2xlZnRCdG4nLCB0aGlzLnRlbXBsYXRlRGF0YS5sZWZ0QnRuICksIDEwMDAgKVxuICAgIH0sXG5cbiAgICBpbnN0YW5jZXM6IHsgfSxcblxuICAgIG5vU2hhcmVzKCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5sZWZ0QnRuLmhpZGUoKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5yaWdodEJ0bi5oaWRlKClcblxuICAgICAgICB0aGlzLmluc3RhbmNlcy5zaGFyZXMudGVtcGxhdGVEYXRhLmhlYWRlci50ZXh0KCdUaGVyZSBhcmUgbm8gc2hhcmVzIGF2YWlsYWJsZSBhdCB0aGlzIHRpbWUnKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuXG4gICAgICAgIHRoaXMuc2lnbnVwRGF0YSA9IHsgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnVzZXIuZ2V0KCdzdGF0ZScpXG5cbiAgICAgICAgaWYoIHRoaXMuc3RhdGUuc2lnbnVwICYmIE9iamVjdC5rZXlzKCB0aGlzLnN0YXRlLnNpZ251cCApLmxlbmd0aCApIHJldHVybiB0aGlzLnVwZGF0ZVN0YXRlKCB0aGlzLnN0YXRlLnNpZ251cCApXG5cbiAgICAgICAgaWYoICEgdGhpcy5jdXJyZW50SW5kZXggKSB0aGlzLmN1cnJlbnRJbmRleCA9IDBcbiAgICAgICAgdGhpcy5zdGF0ZS5zaWdudXAgPSB7IGluZGV4OiB0aGlzLmN1cnJlbnRJbmRleCwgc2hhcmVzOiBbIF0gfVxuICAgICAgICB0aGlzLnNob3dQcm9wZXJWaWV3KClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICBzYXZlU3RhdGUoKSB7XG4gICAgICAgIHRoaXMuJC5hamF4KCB7XG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSggeyBzdGF0ZTogdGhpcy5zdGF0ZSB9ICksXG4gICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgICAgICAgIHVybDogXCIvdXNlclwiIH0gKVxuICAgICAgICAuZmFpbCggZSA9PiBuZXcgdGhpcy5FcnJvcihlKSApXG4gICAgfSxcblxuICAgIHNlcmlhbGl6ZVNoYXJlKCBzaGFyZSApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBzaGFyZS5pZCxcbiAgICAgICAgICAgIHNlbGVjdGVkRGVsaXZlcnk6IHNoYXJlLmdldCgnc2VsZWN0ZWREZWxpdmVyeScpLFxuICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb25zOiBzaGFyZS5nZXQoJ3NlbGVjdGVkT3B0aW9ucycpLFxuICAgICAgICAgICAgc2tpcERheXM6IHNoYXJlLmdldCgnc2tpcERheXMnKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNob3dOZXh0KCkge1xuICAgICAgICB0aGlzLmluc3RhbmNlc1sgdGhpcy52aWV3c1sgdGhpcy5jdXJyZW50SW5kZXggXS5uYW1lIF0uaGlkZSgpXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzWyB0aGlzLnZpZXdzWyB0aGlzLmN1cnJlbnRJbmRleCBdLm5hbWUgXS50ZW1wbGF0ZURhdGEuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdzbGlkZS1pbi1sZWZ0JykucmVtb3ZlQ2xhc3MoJ3NsaWRlLWluLXJpZ2h0JylcblxuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCArPSAxXG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0YXRlLnNpZ251cC5pbmRleCA9IHRoaXMuY3VycmVudEluZGV4XG4gICAgICAgIHRoaXMuc3RhdGUuc2lnbnVwLnNoYXJlcyA9IHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMubWFwKCBzaGFyZSA9PiB0aGlzLnNlcmlhbGl6ZVNoYXJlKCBzaGFyZSApIClcbiAgICAgICAgdGhpcy5zYXZlU3RhdGUoKVxuXG4gICAgICAgIHRoaXMuc2hvd1Byb3BlclZpZXcoKVxuICAgIH0sXG5cbiAgICBzaG93UHJvcGVyTmF2KCkge1xuICAgICAgICB2YXIgbGVmdCA9IHRoaXMudGVtcGxhdGVEYXRhLmxlZnRCdG4sIHJpZ2h0ID0gdGhpcy50ZW1wbGF0ZURhdGEucmlnaHRCdG5cblxuICAgICAgICBpZiggdGhpcy5jdXJyZW50SW5kZXggPiAwICkgdGhpcy50ZW1wbGF0ZURhdGEuaW50cm8udGV4dCgnQ29udGludWUgeW91ciBDU0Egc2lnbi11cCcpXG4gICAgICAgIGlmKCB0aGlzLmN1cnJlbnRJbmRleCA9PT0gNSApIHRoaXMudGVtcGxhdGVEYXRhLmludHJvLnRleHQoJ1JldmlldyB5b3VyIG9yZGVyIGFuZCBjaGVjayBvdXQnKVxuXG4gICAgICAgIGlmKCB0aGlzLmN1cnJlbnRJbmRleCA9PT0gMCApIHtcbiAgICAgICAgICAgIGxlZnQuaGlkZSgpXG4gICAgICAgICAgICBpZiggcmlnaHQuaXMoJzpoaWRkZW4nKSApIHJpZ2h0LnNob3coKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoIHRoaXMuY3VycmVudEluZGV4ID09PSB0aGlzLnZpZXdzLmxlbmd0aCAtIDEgKSB7XG4gICAgICAgICAgICByaWdodC5oaWRlKClcbiAgICAgICAgICAgIGlmKCBsZWZ0LmlzKCc6aGlkZGVuJykgKSBsZWZ0LnNob3coKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYoIGxlZnQuaXMoJzpoaWRkZW4nKSApIGxlZnQuc2hvdygpXG4gICAgICAgICAgICBpZiggcmlnaHQuaXMoJzpoaWRkZW4nKSApIHJpZ2h0LnNob3coKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNob3dQcm9wZXJWaWV3KCBiYWNrICkge1xuICAgICAgICB2YXIgY3VycmVudFZpZXdOYW1lID0gdGhpcy52aWV3c1sgdGhpcy5jdXJyZW50SW5kZXggXS5uYW1lLFxuICAgICAgICAgICAga2xhc3MgPSB0aGlzLnV0aWwuZm9ybWF0KCdzbGlkZS1pbi0lcycsICggYmFjayApID8gJ2xlZnQnIDogJ3JpZ2h0JyApXG5cbiAgICAgICAgdGhpcy5zaG93UHJvcGVyTmF2KClcbiAgICAgICAgXG4gICAgICAgIGlmKCB0aGlzLmluc3RhbmNlc1sgY3VycmVudFZpZXdOYW1lIF0gKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc1sgY3VycmVudFZpZXdOYW1lIF0uc2hvdygpLnRlbXBsYXRlRGF0YS5jb250YWluZXIuYWRkQ2xhc3Moa2xhc3MpXG4gICAgICAgICAgICBpZiggdGhpcy5pbnN0YW5jZXNbIGN1cnJlbnRWaWV3TmFtZSBdLmdvQmFjayApIHRoaXMuZ29CYWNrKClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmluc3RhbmNlc1sgY3VycmVudFZpZXdOYW1lIF0gPVxuICAgICAgICAgICAgbmV3IHRoaXMudmlld3NbIHRoaXMuY3VycmVudEluZGV4IF0udmlldygge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEud2Fsa3Rocm91Z2gsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyQ2xhc3M6IGtsYXNzLFxuICAgICAgICAgICAgICAgIGZhY3Rvcnk6IHRoaXMuZmFjdG9yeSxcbiAgICAgICAgICAgICAgICBzaWdudXBEYXRhOiB0aGlzLnNpZ251cERhdGEsXG4gICAgICAgICAgICB9IClcbiAgICAgICAgXG4gICAgICAgIGlmKCB0aGlzLmluc3RhbmNlc1sgY3VycmVudFZpZXdOYW1lIF0udGVtcGxhdGVEYXRhICkgdGhpcy5pbnN0YW5jZXNbIGN1cnJlbnRWaWV3TmFtZSBdLnRlbXBsYXRlRGF0YS5jb250YWluZXIuYWRkQ2xhc3Moa2xhc3MpXG5cbiAgICAgICAgaWYoIHRoaXMudmlld3NbIHRoaXMuY3VycmVudEluZGV4IF0ub24gKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdzWyB0aGlzLmN1cnJlbnRJbmRleCBdLm9uLmZvckVhY2goIGV2ZW50RGF0YSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzWyBjdXJyZW50Vmlld05hbWUgXS5vbiggZXZlbnREYXRhLmV2ZW50LCAoKSA9PiB0aGlzWyBldmVudERhdGEubWV0aG9kIF0oKSApIClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCB0aGlzLmluc3RhbmNlc1sgY3VycmVudFZpZXdOYW1lIF0uZ29CYWNrICkgdGhpcy5nb0JhY2soKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9zaWdudXAnKSxcblxuICAgIHVwZGF0ZVN0YXRlKCBkYXRhICkge1xuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IGRhdGEuaW5kZXhcblxuICAgICAgICB0aGlzLmluc3RhbmNlcy5zaGFyZXMgPSBuZXcgdGhpcy52aWV3c1swXS52aWV3KCB7XG4gICAgICAgICAgICBjb250YWluZXI6IHRoaXMudGVtcGxhdGVEYXRhLndhbGt0aHJvdWdoLFxuICAgICAgICAgICAgZmFjdG9yeTogdGhpcy5mYWN0b3J5LFxuICAgICAgICAgICAgc2Vzc2lvblNoYXJlczogZGF0YS5zaGFyZXMsXG4gICAgICAgICAgICBzaWdudXBEYXRhOiB0aGlzLnNpZ251cERhdGFcbiAgICAgICAgfSApLm9uKCAnaW5pdGlhbGl6ZWQnLCAoKSA9PiB0aGlzLnNob3dQcm9wZXJWaWV3KCkgKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5pbnN0YW5jZXMuc2hhcmVzLmhpZGUoKVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZVZpZXcoKSB7XG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy5pbnN0YW5jZXNbIHRoaXMudmlld3NbIHRoaXMuY3VycmVudEluZGV4IF0ubmFtZSBdXG4gICAgICAgIFxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5yaWdodEJ0bi5vZmYoKVxuXG4gICAgICAgIHRoaXMuUS53aGVuKCB2aWV3LnZhbGlkYXRlKCkgKS50aGVuKCByZXN1bHQgPT4geyBpZiggcmVzdWx0ICkgdGhpcy5zaG93TmV4dCgpIH0gKVxuICAgICAgICAuZmFpbCggZSA9PiBuZXcgdGhpcy5FcnJvcihlKSApXG4gICAgICAgIC5kb25lKCAoKSA9PiB3aW5kb3cuc2V0VGltZW91dCggKCkgPT4gdGhpcy5kZWxlZ2F0ZUV2ZW50cyggJ3JpZ2h0QnRuJywgdGhpcy50ZW1wbGF0ZURhdGEucmlnaHRCdG4gKSwgMTAwMCApIClcbiAgICB9LFxuXG4gICAgdmlld3M6IFtcbiAgICAgICAgeyBuYW1lOiAnc2hhcmVzJywgdmlldzogcmVxdWlyZSgnLi9zaWdudXAvU2hhcmVzJyksIG9uOiBbIHsgZXZlbnQ6ICdub1NoYXJlcycsIG1ldGhvZDogJ25vU2hhcmVzJyB9IF0gfSxcbiAgICAgICAgeyBuYW1lOiAnbWVtYmVySW5mbycsIHZpZXc6IHJlcXVpcmUoJy4vc2lnbnVwL01lbWJlckluZm8nKSB9LFxuICAgICAgICB7IG5hbWU6ICdzaGFyZU9wdGlvbnMnLCB2aWV3OiByZXF1aXJlKCcuL3NpZ251cC9TaGFyZU9wdGlvbnMnKSB9LFxuICAgICAgICB7IG5hbWU6ICdkZWxpdmVyeScsIHZpZXc6IHJlcXVpcmUoJy4vc2lnbnVwL0RlbGl2ZXJ5JykgfSxcbiAgICAgICAgeyBuYW1lOiAnZGF0ZVNlbGVjdGlvbicsIHZpZXc6IHJlcXVpcmUoJy4vc2lnbnVwL0RhdGVTZWxlY3Rpb24nKSB9LFxuICAgICAgICB7IG5hbWU6ICdzdW1tYXJ5JywgdmlldzogcmVxdWlyZSgnLi9zaWdudXAvU3VtbWFyeScpLCBvbjogWyB7IGV2ZW50OiAnZG9uZScsIG1ldGhvZDogJ2RvbmUnIH0gXSB9XG4gICAgXVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBTaWdudXBcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdjYW5jZWxCdG4nOiAnY2xpY2snLFxuICAgICAgICAnc3VibWl0QnRuJzogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBoYW5kbGVTdWJtaXNzaW9uRXJyb3IoIGUgKSB7XG4gICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdlcnJvcicsIHRoaXMudG9hc3RFcnJvciB8fCAnRXJyb3InIClcbiAgICAgICAgdGhpcy5FcnJvciggZSApXG4gICAgICAgIHRoaXMub25TdWJtaXRFbmQoKVxuICAgIH0sXG5cbiAgICBvbkNhbmNlbEJ0bkNsaWNrKCkge1xuICAgICAgICB0aGlzLmRlbGV0ZSgpLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgb25TdWJtaXRCdG5DbGljaygpIHtcbiAgICAgICAgaWYoIHRoaXMuc3VibWl0dGluZyApIHJldHVyblxuICAgICAgICB0aGlzLm9uU3VibWl0U3RhcnQoKVxuICAgICAgICB0aGlzLnN1Ym1pdCgpXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMub25TdWJtaXRFbmQoKSApIClcbiAgICAgICAgLmNhdGNoKCBlID0+IHRoaXMuaGFuZGxlU3VibWlzc2lvbkVycm9yKGUpIClcbiAgICB9LFxuXG4gICAgb25TdWJtaXRFbmQoKSB7XG4gICAgICAgIHRoaXMuc3VibWl0dGluZyA9IGZhbHNlXG4gICAgICAgIHRoaXMuZWxzLnN1Ym1pdEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdzdWJtaXR0aW5nJylcbiAgICB9LFxuICAgIFxuICAgIG9uU3VibWl0U3RhcnQoKSB7XG4gICAgICAgIHRoaXMuc3VibWl0dGluZyA9IHRydWVcbiAgICAgICAgdGhpcy5lbHMuc3VibWl0QnRuLmNsYXNzTGlzdC5hZGQoJ3N1Ym1pdHRpbmcnKVxuICAgIH1cblxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgSWNvbnM6IHtcbiAgICAgICAgZXJyb3I6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL2xpYi9lcnJvcicpKCksXG4gICAgICAgIHN1Y2Nlc3M6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL2xpYi9jaGVja21hcmsnKSgpXG4gICAgfSxcblxuICAgIGluc2VydGlvbjogeyBlbDogZG9jdW1lbnQuYm9keSB9LFxuXG4gICAgbmFtZTogJ1RvYXN0JyxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2hvd01lc3NhZ2UoIHR5cGUsIG1lc3NhZ2UgKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSAgPT4ge1xuICAgICAgICAgICAgaWYoIC9zaG93Ly50ZXN0KCB0aGlzLnN0YXR1cyApICkgcmV0dXJuIHJlc29sdmUoKVxuXG4gICAgICAgICAgICB0aGlzLnJlc29sdXRpb24gPSByZXNvbHZlXG5cbiAgICAgICAgICAgIGlmKCB0eXBlICE9PSAnZXJyb3InICkgdGhpcy5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3N1Y2Nlc3MnKVxuXG4gICAgICAgICAgICB0aGlzLmVscy5tZXNzYWdlLnRleHRDb250ZW50ID0gbWVzc2FnZVxuICAgICAgICAgICAgdGhpcy5lbHMudGl0bGUudGV4dENvbnRlbnQgPSB0eXBlID09PSAnZXJyb3InID8gJ0Vycm9yJyA6ICdTdWNjZXNzJ1xuICAgICAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7IGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMuaWNvbiB9LCB0ZW1wbGF0ZTogdHlwZSA9PT0gJ2Vycm9yJyA/IHRoaXMuSWNvbnMuZXJyb3IgOiB0aGlzLkljb25zLnN1Y2Nlc3MgfSApXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gJ3Nob3dpbmcnXG5cbiAgICAgICAgICAgIHRoaXMuc2hvdyggdHJ1ZSApXG4gICAgICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5oaWRlKCB0cnVlICkgKVxuICAgICAgICAgICAgLnRoZW4oICgpID0+IHRoaXMudGVhcmRvd24oKSApXG4gICAgICAgICAgICAuY2F0Y2goIHJlamVjdCApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICB0ZWFyZG93bigpIHtcbiAgICAgICAgaWYoIHRoaXMuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ3N1Y2Nlc3MnKSApIHRoaXMuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdzdWNjZXNzJylcbiAgICAgICAgdGhpcy5lbHMubWVzc2FnZS50ZXh0Q29udGVudCA9ICcnXG4gICAgICAgIHRoaXMuZWxzLm1lc3NhZ2UudGl0bGUgPSAnJ1xuICAgICAgICBpZiggdGhpcy5lbHMuaWNvbi5maXJzdENoaWxkICkgdGhpcy5lbHMuaWNvbi5yZW1vdmVDaGlsZCggdGhpcy5lbHMuaWNvbi5maXJzdENoaWxkIClcblxuICAgICAgICB0aGlzLnN0YXR1cyA9ICdoaWRkZW4nXG4gICAgICAgIHRoaXMucmVzb2x1dGlvbigpXG4gICAgfSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9Ub2FzdCcpXG5cbn0gKSwgeyB9ICkuY29uc3RydWN0b3IoKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgUGlrYWRheTogcmVxdWlyZSgncGlrYWRheScpLFxuICAgIFxuICAgIFRlbXBsYXRlczoge1xuICAgICAgICBUcmFuc2FjdGlvbjogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvQ3NhVHJhbnNhY3Rpb24nKSxcbiAgICAgICAgRWRpdFRyYW5zYWN0aW9uOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9FZGl0Q3NhVHJhbnNhY3Rpb24nKVxuICAgIH0sXG5cbiAgICBWaWV3czoge1xuICAgICAgICBlZGl0QnV0dG9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IE9iamVjdC5jcmVhdGUoIHRoaXMuTW9kZWwgKS5jb25zdHJ1Y3Rvcigge1xuICAgICAgICAgICAgICAgICAgICBoaWRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnZWRpdCcsIHN2ZzogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbGliL2VkaXQnKSgpLCBlbWl0OiB0cnVlLCBuZXh0U3RhdGU6ICdvbkVkaXQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnZ2FyYmFnZScsIHN2ZzogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbGliL2dhcmJhZ2UnKSgpLCBuZXh0U3RhdGU6ICdvbkRlbGV0ZScsIGVtaXQ6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRGVsZXRlOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnY29uZmlybURlbGV0ZScsIGNsYXNzOiAnbGluaycsICd0ZXh0JzogJ0RlbGV0ZT8nLCBuZXh0U3RhdGU6ICdzdGFydCcsIGVtaXQ6ICd0cnVlJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ2NhbmNlbERlbGV0ZScsIHN2ZzogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbGliL2V4JykoIHsgbmFtZTogJ2NhbmNlbERlbGV0ZScgfSApLCBuZXh0U3RhdGU6ICdzdGFydCcsIGVtaXQ6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRWRpdDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ2NvbmZpcm1FZGl0JywgY2xhc3M6ICdsaW5rJywgJ3RleHQnOiAnRWRpdCcsIGVtaXQ6ICd0cnVlJywgbmV4dFN0YXRlOiAnc3RhcnQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnY2FuY2VsRWRpdCcsIHN2ZzogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbGliL2V4JykoIHsgbmFtZTogJ2NhbmNlbEVkaXQnIH0gKSwgbmV4dFN0YXRlOiAnc3RhcnQnLCBlbWl0OiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbWFpbEJ1dHRvbnMoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLk1vZGVsICkuY29uc3RydWN0b3IoIHtcbiAgICAgICAgICAgICAgICAgICAgaGlkZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogWyB7IG5hbWU6ICdzZW5kRW1haWwnLCBjbGFzczogJ3NhdmUtYnRuJywgdGV4dDogJ1NlbmQgRW1haWwgUmVtaW5kZXInLCBuZXh0U3RhdGU6ICdjb25maXJtJyB9IF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnY29uZmlybUVtYWlsJywgY2xhc3M6ICdzYXZlLWJ0bicsIHRleHQ6ICdBcmUgeW91IFN1cmU/JywgZW1pdDogdHJ1ZSwgbmV4dFN0YXRlOiAnc3RhcnQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnY2FuY2VsJywgbmV4dFN0YXRlOiAnc3RhcnQnLCBjbGFzczogJ3Jlc2V0LWJ0bicsIHRleHQ6ICdDYW5jZWwnIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhZGRUcmFuc2FjdGlvbjogZnVuY3Rpb24oKSB7IHJldHVybiB7IG1vZGVsOiB0aGlzLm1vZGVsIH0gfSxcbiAgICB9LFxuXG4gICAgYWRkVHJhbnNhY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubW9kZWwucG9zdCggT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHsgbWVtYmVyU2hhcmVJZDogdGhpcy5zaGFyZS5tZW1iZXJzaGFyZWlkIH0sXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMucmVkdWNlKCAoIG1lbW8sIGF0dHIgKSA9PiBPYmplY3QuYXNzaWduKCBtZW1vLCB7IFsgYXR0ciBdOiB0aGlzLmVsc1thdHRyXS52YWx1ZSB9ICksIHsgfSApXG4gICAgICAgICkgKVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRUcmFuc2FjdGlvbiggcmVzcG9uc2UuaWQgKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVCYWxhbmNlKClcbiAgICAgICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdzdWNjZXNzJywgJ1RyYW5zYWN0aW9uIGFkZGVkIScgKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCBlID0+IHsgdGhpcy5FcnJvcihlKTsgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ2Vycm9yJywgJ0Vycm9yIGFkZGluZyB0cmFuc2FjdGlvbicgKSB9IClcbiAgICB9LFxuXG4gICAgY2xlYXIoKSB7IHRoaXMuZWxzLnRyYW5zYWN0aW9ucy5pbm5lckhUTUwgPSAnJyB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGxpc3Q6ICdjbGljaycsXG4gICAgICAgIHRyYW5zYWN0aW9uOiBbICdtb3VzZWVudGVyJywgJ21vdXNlbGVhdmUnIF1cbiAgICB9LFxuXG4gICAgYXBwZW5kVHJhbnNhY3Rpb24oIHRyYW5zYWN0aW9uICkge1xuICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLlRlbXBsYXRlcy5UcmFuc2FjdGlvbihcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgICAgICAgICB7IGN1cnJlbmN5OiB0aGlzLkN1cnJlbmN5LmZvcm1hdCwgbW9tZW50OiB0aGlzLk1vbWVudCB9ICksXG4gICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLnRyYW5zYWN0aW9ucyB9XG4gICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgaW5zZXJ0VHJhbnNhY3Rpb24oIHRyYW5zYWN0aW9uSWQgKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5tb2RlbC5kYXRhLmZpbmRJbmRleCggZGF0dW0gPT4gZGF0dW0uaWQgPT0gdHJhbnNhY3Rpb25JZCApLFxuICAgICAgICAgICAgY2hpbGRyZW4gPSBBcnJheS5mcm9tKCB0aGlzLmVscy50cmFuc2FjdGlvbnMuY2hpbGRyZW4gKSxcbiAgICAgICAgICAgIGluc2VydGlvbiA9IGluZGV4ID09PSAwXG4gICAgICAgICAgICAgICAgPyB7IGVsOiBjaGlsZHJlblswXSwgbWV0aG9kOiAnaW5zZXJ0QmVmb3JlJyB9XG4gICAgICAgICAgICAgICAgOiB7IGVsOiBjaGlsZHJlblsgaW5kZXggLSAxIF0sIG1ldGhvZDogJ2FmdGVyJyB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLlRlbXBsYXRlcy5UcmFuc2FjdGlvbiggdGhpcy5tb2RlbC5kYXRhWyBpbmRleCBdLCB7IGN1cnJlbmN5OiB0aGlzLkN1cnJlbmN5LmZvcm1hdCwgbW9tZW50OiB0aGlzLk1vbWVudCB9ICksXG4gICAgICAgICAgICBpbnNlcnRpb25cbiAgICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBlZGl0VHJhbnNhY3Rpb24oIGUgKSB7XG4gICAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQuY2xvc2VzdCgnbGknKSxcbiAgICAgICAgICAgIGlkID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykgXG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKCBbXG4gICAgICAgICAgICB0aGlzLm1vZGVsLnBhdGNoKFxuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuYXR0cmlidXRlcy5yZWR1Y2UoICggbWVtbywgYXR0ciApID0+XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oIG1lbW8sIHsgWyBhdHRyIF06XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyID09PSAnY3JlYXRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuTW9tZW50KCB0aGlzLmVscy5lZGl0VHJhbnNhY3Rpb24ucXVlcnlTZWxlY3RvcihgW2RhdGEtYXR0cj1cImNyZWF0ZWRcIl1gKS52YWx1ZSwgJ01NTSBELCBZWVlZJyApLmZvcm1hdCgnWVlZWS1NTS1ERCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVscy5lZGl0VHJhbnNhY3Rpb24ucXVlcnlTZWxlY3RvcihgW2RhdGEtYXR0cj1cIiR7YXR0cn1cIl1gKS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9ICksXG4gICAgICAgICAgICAgICAgICAgIHsgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBlLmZkTmV4dFN0YXRlXG4gICAgICAgIF0gKVxuICAgICAgICAudGhlbiggZGF0dW0gPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFZGl0Um93KClcbiAgICAgICAgICAgIHRoaXMubW92ZU91dEVkaXRCdXR0b25zKClcbiAgICAgICAgICAgIGVsLnJlbW92ZSgpXG4gICAgICAgICAgICB0aGlzLmluc2VydFRyYW5zYWN0aW9uKGlkKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVCYWxhbmNlKClcbiAgICAgICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdzdWNjZXNzJywgJ1RyYW5zYWN0aW9uIGVkaXRlZCEnIClcbiAgICAgICAgfSApXG4gICAgICAgIC5jYXRjaCggZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVkaXRSb3coKVxuICAgICAgICAgICAgdGhpcy5FcnJvcihlKTtcbiAgICAgICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdlcnJvcicsICdFcnJvciBlZGl0aW5nIHRyYW5zYWN0aW9uJyApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBkZWxldGVUcmFuc2FjdGlvbiggZSApIHtcbiAgICAgICAgY29uc3QgaWQgPSBlLnRhcmdldC5jbG9zZXN0KCdsaScpLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpIFxuXG4gICAgICAgIFByb21pc2UuYWxsKCBbXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmRlbGV0ZSggaWQgKSxcbiAgICAgICAgICAgIGUuZmROZXh0U3RhdGVcbiAgICAgICAgXSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1vdmVPdXRFZGl0QnV0dG9ucygpXG4gICAgICAgICAgICB0aGlzLmVscy50cmFuc2FjdGlvbnMucXVlcnlTZWxlY3RvcihgbGlbZGF0YS1pZD1cIiR7aWR9XCJdYCkucmVtb3ZlKClcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQmFsYW5jZSgpXG4gICAgICAgICAgICB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnc3VjY2VzcycsICdUcmFuc2FjdGlvbiBkZWxldGVkIScgKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCBlID0+IHtcbiAgICAgICAgICAgIHRoaXMuRXJyb3IoZSk7XG4gICAgICAgICAgICB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnZXJyb3InLCAnRXJyb3IgYWRkaW5nIHRyYW5zYWN0aW9uJyApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBtb2RlbDogcmVxdWlyZSgnLi4vbW9kZWxzL0NzYVRyYW5zYWN0aW9uJyksXG5cbiAgICBvbkFkZEJ0bkNsaWNrKCkge1xuICAgICAgICBpZiggdGhpcy5zdGF0ZSA9PT0gJ2NvbmZpcm1EZWxldGUnICkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5kZWxldGUoIHRoaXMubWFya2VkRm9yRGVsZXRpb24gIClcbiAgICAgICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbHMudHJhbnNhY3Rpb25zLnF1ZXJ5U2VsZWN0b3IoYGxpW2RhdGEtaWQ9XCIke3RoaXMubWFya2VkRm9yRGVsZXRpb259XCJdYCkucmVtb3ZlKClcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJhbGFuY2UoKVxuICAgICAgICAgICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdzdWNjZXNzJywgJ1RyYW5zYWN0aW9uIGRlbGV0ZWQhJyApXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldFN0YXRlKClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9IGVsc2UgaWYoIHRoaXMuc3RhdGUgPT09ICdjb25maXJtaW5nJyApIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwucG9zdCggT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgICB7IG1lbWJlclNoYXJlSWQ6IHRoaXMuc2hhcmUubWVtYmVyc2hhcmVpZCB9LFxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuYXR0cmlidXRlcy5yZWR1Y2UoICggbWVtbywgYXR0ciApID0+IE9iamVjdC5hc3NpZ24oIG1lbW8sIHsgWyBhdHRyIF06IHRoaXMuZWxzW2F0dHJdLnZhbHVlIH0gKSwgeyB9IClcbiAgICAgICAgICAgICkgKVxuICAgICAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydFRyYW5zYWN0aW9uKCByZXNwb25zZS5pZCApXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCYWxhbmNlKClcbiAgICAgICAgICAgICAgICB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnc3VjY2VzcycsICdUcmFuc2FjdGlvbiBhZGRlZCEnIClcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0U3RhdGUoKVxuICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAuY2F0Y2goIGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuRXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ2Vycm9yJywgJ0Vycm9yIGFkZGluZyB0cmFuc2FjdGlvbicgKVxuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRTdGF0ZSgpXG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2UgaWYoIHRoaXMuc3RhdGUgPT09ICdhZGRpbmcnICkge1xuXG4gICAgICAgICAgICB0aGlzLmVscy5hZGRCdG4udGV4dENvbnRlbnQgPSAnQXJlIHlvdSBzdXJlPydcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAnY29uZmlybWluZydcblxuICAgICAgICB9IGVsc2UgaWYoICF0aGlzLnN0YXRlICkge1xuICAgICAgICAgICAgdGhpcy5lbHMuY2FuY2VsQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXG4gICAgICAgICAgICB0aGlzLmVscy5hZGRUcmFuc2FjdGlvblJvdy5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ2FkZGluZydcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXG4gICAgb25FeENsaWNrKCBlICkge1xuICAgICAgICBpZiggdGhpcy5tYXJrZWRGb3JEZWxldGlvbiApIHJldHVyblxuICAgICAgICBcbiAgICAgICAgY29uc3QgaXRlbSA9ICBlLnRhcmdldC5jbG9zZXN0KCdsaScpXG5cbiAgICAgICAgdGhpcy5tYXJrZWRGb3JEZWxldGlvbiA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWlkJylcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdtYXJrZWQnKVxuICAgICAgIFxuICAgICAgICB0aGlzLmVscy5hZGRCdG4udGV4dENvbnRlbnQgPSAnQ29uZmlybSBEZWxldGUnIFxuICAgICAgICB0aGlzLmVscy5jYW5jZWxCdG4uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICdjb25maXJtRGVsZXRlJ1xuICAgIH0sXG5cbiAgICBvbkxpc3RDbGljayggZSApIHtcbiAgICAgICAgaWYoIHRoaXMuY3VycmVudFNlbGVjdGlvbiApIHRoaXMuY3VycmVudFNlbGVjdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBlbCA9IGUudGFyZ2V0XG4gICAgICAgIHRoaXMuY3VycmVudFNlbGVjdGlvbiA9IGVsXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoICdzZWxlY3RlZCcgKVxuICAgICAgICB0aGlzLmVtaXQoICdzZWxlY3RlZCcsIHsgY3VzdG9tZXI6IHRoaXMuY3VzdG9tZXIsIHNoYXJlOiB0aGlzLk1lbWJlclNlYXNvbi5kYXRhLmZpbmQoIHNlYXNvbiA9PiBzZWFzb24uaWQgPT0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykgKSB9IClcbiAgICB9LFxuXG4gICAgb25UcmFuc2FjdGlvbk1vdXNlZW50ZXIoIGUgKSB7XG4gICAgICAgIGlmKCBlLnRhcmdldC50YWdOYW1lICE9PSBcIkxJXCIgKSByZXR1cm5cbiAgICAgICAgaWYoIHRoaXMudmlld3MuZWRpdEJ1dHRvbnMuc3RhdGUgIT09ICdzdGFydCcgKSByZXR1cm5cbiAgICAgICAgZS50YXJnZXQuY2hpbGRyZW5bMF0uYXBwZW5kQ2hpbGQoIHRoaXMudmlld3MuZWRpdEJ1dHRvbnMuZWxzLmNvbnRhaW5lciApXG4gICAgICAgIHRoaXMudmlld3MuZWRpdEJ1dHRvbnMuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdmZC1oaWRkZW4nLCAnZmQtaGlkZScpXG4gICAgfSxcbiAgICBcbiAgICBvblRyYW5zYWN0aW9uTW91c2VsZWF2ZSggZSApIHtcbiAgICAgICAgaWYoIGUudGFyZ2V0LnRhZ05hbWUgIT09IFwiTElcIiApIHJldHVyblxuICAgICAgICBpZiggdGhpcy52aWV3cy5lZGl0QnV0dG9ucy5zdGF0ZSAhPT0gJ3N0YXJ0JyApIHJldHVyblxuICAgICAgICB0aGlzLm1vdmVPdXRFZGl0QnV0dG9ucygpXG4gICAgfSxcblxuICAgIG1vdmVPdXRFZGl0QnV0dG9ucygpIHtcbiAgICAgICAgdGhpcy5lbHMudHJhbnNhY3Rpb25zLmFmdGVyKCB0aGlzLnZpZXdzLmVkaXRCdXR0b25zLmVscy5jb250YWluZXIgKVxuICAgICAgICB0aGlzLnZpZXdzLmVkaXRCdXR0b25zLmVscy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcblxuICAgICAgICB0aGlzLnZpZXdzLmVtYWlsQnV0dG9ucy5vbiggJ2NvbmZpcm1FbWFpbENsaWNrZWQnLCBlID0+IHRoaXMuc2VuZE1haWwoKSApXG5cbiAgICAgICAgdGhpcy52aWV3cy5lZGl0QnV0dG9ucy5vbiggJ2VkaXRDbGlja2VkJywgZSA9PiB0aGlzLmNyZWF0ZUVkaXRSb3coIGUgKSApXG4gICAgICAgIHRoaXMudmlld3MuZWRpdEJ1dHRvbnMub24oICdjYW5jZWxFZGl0Q2xpY2tlZCcsIGUgPT4gdGhpcy5yZW1vdmVFZGl0Um93KCBlICkgKVxuICAgICAgICB0aGlzLnZpZXdzLmVkaXRCdXR0b25zLm9uKCAnY29uZmlybUVkaXRDbGlja2VkJywgZSA9PiB0aGlzLmVkaXRUcmFuc2FjdGlvbiggZSApIClcblxuICAgICAgICB0aGlzLnZpZXdzLmVkaXRCdXR0b25zLm9uKCAnZ2FyYmFnZUNsaWNrZWQnLCBlID0+IHRoaXMudG9nZ2xlRGVsZXRlU3R5bGUoIGUsIHRydWUgKSApXG4gICAgICAgIHRoaXMudmlld3MuZWRpdEJ1dHRvbnMub24oICdjYW5jZWxEZWxldGVDbGlja2VkJywgZSA9PiB0aGlzLnRvZ2dsZURlbGV0ZVN0eWxlKCBlLCBmYWxzZSApIClcbiAgICAgICAgdGhpcy52aWV3cy5lZGl0QnV0dG9ucy5vbiggJ2NvbmZpcm1EZWxldGVDbGlja2VkJywgZSA9PiB0aGlzLmRlbGV0ZVRyYW5zYWN0aW9uKCBlICkgKVxuXG4gICAgICAgIHRoaXMubW9kZWwub24oICdhZGRlZCcsIGRhdHVtID0+IHRoaXMub25Nb2RlbEFkZCggZGF0dW0gKSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgY3JlYXRlRWRpdFJvdyggZSApIHtcbiAgICAgICAgdGhpcy5lZGl0ZWRSb3cgPSBlLnRhcmdldC5jbG9zZXN0KCdsaScpXG4gICAgICAgIHRoaXMuZWRpdGVkUm93LmNsYXNzTGlzdC5hZGQoJ2NvbmZpcm1pbmctZWRpdCcpXG5cbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLm1vZGVsLmRhdGEuZmluZCggZGF0dW0gPT4gZGF0dW0uaWQgPT0gdGhpcy5lZGl0ZWRSb3cuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykgKVxuXG4gICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVkaXRlZFJvdywgbWV0aG9kOiAnYWZ0ZXInIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy5UZW1wbGF0ZXMuRWRpdFRyYW5zYWN0aW9uKFxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuYXR0cmlidXRlcy5yZWR1Y2UoICggbWVtbywgYXR0ciApID0+XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oIG1lbW8sIHsgWyBhdHRyIF06XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyID09PSAnY3JlYXRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuTW9tZW50KCBtb2RlbC5jcmVhdGVkICkuZm9ybWF0KCdNTU0gRCwgWVlZWScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBtb2RlbFsgYXR0ciBdXG4gICAgICAgICAgICAgICAgICAgIH0gKSxcbiAgICAgICAgICAgICAgICAgICAgeyBhY3Rpb25zOiB0aGlzLm1vZGVsLmFjdGlvbnMgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5jcmVhdGVkID0gbmV3IHRoaXMuUGlrYWRheSggeyBmaWVsZDogdGhpcy5lbHMuZWRpdFRyYW5zYWN0aW9uLnF1ZXJ5U2VsZWN0b3IoYGlucHV0W2RhdGEtYXR0cj1cImNyZWF0ZWRcIl1gKSwgZm9ybWF0OiAnTU1NIEQsIFlZWVknIH0gKVxuICAgIH0sXG5cbiAgICByZW1vdmVFZGl0Um93KCBlICkge1xuICAgICAgICB0aGlzLmVkaXRlZFJvdy5jbGFzc0xpc3QucmVtb3ZlKCdjb25maXJtaW5nLWVkaXQnKVxuICAgICAgICB0aGlzLmVkaXRlZFJvdyA9IHVuZGVmaW5lZFxuICAgICAgICB0aGlzLmVscy5lZGl0VHJhbnNhY3Rpb24ucmVtb3ZlKClcbiAgICAgICAgZGVsZXRlIHRoaXMuZWxzLmVkaXRUcmFuc2FjdGlvblxuICAgIH0sXG5cbiAgICB0b2dnbGVEZWxldGVTdHlsZSggZSwgdmFsdWUgKSB7XG4gICAgICAgIGUudGFyZ2V0LmNsb3Nlc3QoJ2xpJykuY2xhc3NMaXN0LnRvZ2dsZSggJ2NvbmZpcm1pbmctZGVsZXRlJywgdmFsdWUgKVxuICAgIH0sXG5cbiAgICBvbkNhbmNlbEFkZFRyYW5zYWN0aW9uKCkge1xuICAgICAgICB0aGlzLmVscy5hZGRUcmFuc2FjdGlvblJvdy5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMuZm9yRWFjaCggYXR0ciA9PiB0aGlzLmVsc1sgYXR0ciBdLnZhbHVlID0gYXR0ciA9PT0gJ2FjdGlvbicgPyB0aGlzLm1vZGVsLmFjdGlvbnNbMF0gOiAnJyApXG4gICAgfSxcblxuICAgIG9uTW9kZWxBZGQoIGRhdHVtICkge1xuICAgICAgICB0aGlzLmluc2VydFRyYW5zYWN0aW9uKCBkYXR1bS5pZCApXG4gICAgICAgIHRoaXMudXBkYXRlQmFsYW5jZSgpXG4gICAgfSxcblxuICAgIHNlbmRNYWlsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5YaHIoIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICAgICAgcmVzb3VyY2U6ICdtYWlsJyxcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KCB7XG4gICAgICAgICAgICAgICAgdG86IHRoaXMuY3VzdG9tZXIucGVyc29uLmVtYWlsLFxuICAgICAgICAgICAgICAgIHN1YmplY3Q6IGBQYXRjaHdvcmsgR2FyZGVucyAke3RoaXMuc2hhcmUubGFiZWx9IEJhbGFuY2VgLFxuICAgICAgICAgICAgICAgIGJvZHk6IGBBY2NvcmRpbmcgdG8gb3VyIHJlY29yZHMsIHlvdSBoYXZlIGFuIG91dHN0YW5kaW5nIGJhbGFuY2Ugb2YgJHt0aGlzLmVscy5iYWxhbmNlLnRleHRDb250ZW50fS5cXHJcXG5cXHJcXG5QbGVhc2Ugc2VuZCBwYXltZW50IGF0IHlvdXIgZWFybGllc3QgY29udmVuaWVuY2UgdG8gUGF0Y2h3b3JrIEdhcmRlbnMsIDkwNTcgVyBUaGlyZCBTdCwgRGF5dG9uIE9IIDQ1NDE3LlxcclxcblxcclxcbklmIHlvdSBiZWxpZXZlIHRoaXMgaXMgaW5jb3JyZWN0LCBwbGVhc2UgY29udGFjdCB1cyBieSBlbWFpbCBvciBwaG9uZSAoOTM3KSA4MzUtNTgwNy5cXHJcXG5cXHJcXG5UaGFuayBZb3UuYFxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ3N1Y2Nlc3MnLCAnRW1haWwgc2VudC4nICkgKVxuICAgICAgICAuY2F0Y2goIGUgPT4geyB0aGlzLkVycm9yKGUpOyB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnZXJyb3InLCAnRXJyb3Igc2VuZGluZyBlbWFpbC4nICkgfSApXG4gICAgfSxcblxuICAgIFxuXG4gICAgdXBkYXRlKCB7IGN1c3RvbWVyLCBzaGFyZSB9ICkge1xuICAgICAgICB0aGlzLmN1c3RvbWVyID0gY3VzdG9tZXJcbiAgICAgICAgdGhpcy5zaGFyZSA9IHNoYXJlXG4gICAgICBcbiAgICAgICAgdGhpcy5jbGVhcigpXG5cbiAgICAgICAgdGhpcy5tb2RlbC5nZXQoIHsgcXVlcnk6IHsgbWVtYmVyU2hhcmVJZDogc2hhcmUubWVtYmVyc2hhcmVpZCB9IH0gKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5tb2RlbC5kYXRhLmZvckVhY2goIGNzYVRyYW5zYWN0aW9uID0+IHRoaXMuYXBwZW5kVHJhbnNhY3Rpb24oIGNzYVRyYW5zYWN0aW9uICkgKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLnVwZGF0ZUJhbGFuY2UoKS5zaG93KCkgKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuXG4gICAgICAgIHRoaXMudmlld3MuYWRkVHJhbnNhY3Rpb24udXBkYXRlKCBzaGFyZS5tZW1iZXJzaGFyZWlkIClcbiAgICB9LFxuXG4gICAgdXBkYXRlQmFsYW5jZSgpIHtcbiAgICAgICAgY29uc3QgYmFsYW5jZSA9IHRoaXMubW9kZWwuZ2V0QmFsYW5jZSgpXG4gICAgICAgIHRoaXMuZWxzLmJhbGFuY2UudGV4dENvbnRlbnQgPSB0aGlzLkN1cnJlbmN5LmZvcm1hdCggYmFsYW5jZSApXG5cbiAgICAgICAgaWYoIGJhbGFuY2UgPiAwICkgeyB0aGlzLnZpZXdzLmVtYWlsQnV0dG9ucy5zaG93KCkgfVxuICAgICAgICBlbHNlIHsgdGhpcy52aWV3cy5lbWFpbEJ1dHRvbnMuaGlkZSgpIH1cblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxufSApXG4iLCJjb25zdCBTdXBlciA9IHJlcXVpcmUoJy4vX19wcm90b19fJylcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgU3VwZXIsIHtcblxuICAgIERlbGl2ZXJ5T3B0aW9uOiBPYmplY3QuY3JlYXRlKCBTdXBlci5Nb2RlbCwgeyByZXNvdXJjZTogeyB2YWx1ZTogJ2RlbGl2ZXJ5b3B0aW9uJyB9IH0gKSxcbiAgICBHcm91cERyb3BvZmZzOiBPYmplY3QuY3JlYXRlKCBTdXBlci5Nb2RlbCwgeyByZXNvdXJjZTogeyB2YWx1ZTogJ2dyb3VwZHJvcG9mZicgfSB9ICksXG4gICAgUm91dGU6IE9iamVjdC5jcmVhdGUoIFN1cGVyLk1vZGVsLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnZGVsaXZlcnlyb3V0ZScgfSB9ICksXG4gICAgU2tpcFdlZWtzOiBPYmplY3QuY3JlYXRlKCBTdXBlci5Nb2RlbCwgeyByZXNvdXJjZTogeyB2YWx1ZTogJ21lbWJlcnNoYXJlc2tpcHdlZWsnIH0gfSApLFxuXG4gICAgU2hhcmU6IHJlcXVpcmUoJy4uL21vZGVscy9TaGFyZScpLFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGRhdGVzOiAnY2xpY2snLFxuICAgICAgICByZXNldEJ0bjogJ2NsaWNrJyxcbiAgICB9LFxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuZWxzLmRhdGVzLmlubmVySFRNTCA9ICcnXG5cbiAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICAgICAgdGhpcy5lbHMuZWRpdFN1bW1hcnkuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICB9LFxuXG4gICAgZGV0ZXJtaW5lRGF0ZXMoIGRheU9mV2VlayApIHtcbiAgICAgICAgdGhpcy5lbHMuZGVsaXZlcnlEYXkudGV4dENvbnRlbnQgPSB0aGlzLk1vbWVudCgpLmlzb1dlZWtkYXkoIGRheU9mV2VlayApLmZvcm1hdCgnZGRkZCcpXG4gICAgICAgIHRoaXMuZGF0ZXMgPSBbIF1cblxuICAgICAgICBpZiggISBOdW1iZXIuaXNJbnRlZ2VyKCBkYXlPZldlZWsgKSApIHJldHVybiB0aGlzXG5cbiAgICAgICAgY29uc3Qgbm93ID0gdGhpcy5Nb21lbnQoKSxcbiAgICAgICAgICAgIG5leHREZWxpdmVyeUN1dG9mZiA9IG5vdyxcbiAgICAgICAgICAgIGVuZERhdGUgPSB0aGlzLk1vbWVudCggdGhpcy5tb2RlbC5zaGFyZS5lbmRkYXRlIClcbiAgICAgICAgICAgIFxuICAgICAgICBsZXQgZGVsaXZlcnlEYXRlID0gdGhpcy5Nb21lbnQoIHRoaXMubW9kZWwuc2hhcmUuc3RhcnRkYXRlICksXG4gICAgICAgICAgICBzdGFydERheSA9IGRlbGl2ZXJ5RGF0ZS5kYXkoKVxuXG4gICAgICAgIHdoaWxlKCBzdGFydERheSAhPSBkYXlPZldlZWsgKSB7XG4gICAgICAgICAgICBkZWxpdmVyeURhdGUuYWRkKCAxLCAnZGF5cycgKVxuICAgICAgICAgICAgc3RhcnREYXkgPSB0aGlzLk1vbWVudCggZGVsaXZlcnlEYXRlICkuZGF5KClcbiAgICAgICAgfVxuICAgICAgIFxuICAgICAgICB3aGlsZSggZW5kRGF0ZS5kaWZmKCBkZWxpdmVyeURhdGUsICdkYXlzJyApID49IDAgKSB7XG4gICAgICAgICAgICBjb25zdCBpc1NraXBXZWVrID0gdGhpcy5Ta2lwV2Vla3MuZGF0YS5maW5kKCB3ZWVrID0+IFxuICAgICAgICAgICAgICAgIHRoaXMuTW9tZW50KCB3ZWVrLmRhdGUgKS53ZWVrKCkgPT09IHRoaXMuTW9tZW50KCBkZWxpdmVyeURhdGUgKS53ZWVrKCkgKSA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmRhdGVzLnB1c2goIHtcbiAgICAgICAgICAgICAgICBkYXRlOiB0aGlzLk1vbWVudCggZGVsaXZlcnlEYXRlICksXG4gICAgICAgICAgICAgICAgdW5zZWxlY3RhYmxlOiBCb29sZWFuKCBkZWxpdmVyeURhdGUuZGlmZiggbmV4dERlbGl2ZXJ5Q3V0b2ZmICkgPCAwICksXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6ICFpc1NraXBXZWVrXG4gICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgZGVsaXZlcnlEYXRlLmFkZCggNywgJ2RheXMnIClcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgZ2V0UGF0Y2hEYXRhKCkge1xuICAgICAgICBjb25zdCBhZGRlZERhdGVzID0gWyBdLFxuICAgICAgICAgICAgICByZW1vdmVkRGF0ZXMgPSBbIF1cblxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5jaGFuZ2VkRGF0ZXMgKS5mb3JFYWNoKCBkYXRlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRlZFN0YXR1cyA9IHRoaXMuY2hhbmdlZERhdGVzWyBkYXRlIF0uZWRpdGVkU3RhdHVzXG5cbiAgICAgICAgICAgIGlmKCAhZWRpdGVkU3RhdHVzICkgcmV0dXJuXG5cbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSB0aGlzLk1vbWVudCggZGF0ZSApLmZvcm1hdChcIllZWVktTU0tRERcIilcbiAgICAgICAgICAgIGlmKCBlZGl0ZWRTdGF0dXMgPT09ICdzZWxlY3RlZCcgKSBhZGRlZERhdGVzLnB1c2goIGZvcm1hdHRlZERhdGUgKVxuICAgICAgICAgICAgZWxzZSByZW1vdmVkRGF0ZXMucHVzaCggZm9ybWF0dGVkRGF0ZSApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRlZERhdGVzLFxuICAgICAgICAgICAgcmVtb3ZlZERhdGVzLCBcbiAgICAgICAgICAgIGFsbFJlbW92ZWQ6IEFycmF5LmZyb20oIHRoaXMuZWxzLmRhdGVzLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpOm5vdCguc2VsZWN0ZWQpJykgKS5tYXAoIGVsID0+IHRoaXMuTW9tZW50KCBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0ZScpLCAnWVlZWU1NREQnICkuZm9ybWF0KCdZWVlZLU1NLUREJykgKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldFdlZWtzQWZmZWN0ZWQoKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGFibGVEYXRlcyA9IHRoaXMuZGF0ZXMuZmlsdGVyKCBkYXRlID0+ICFkYXRlLnVuc2VsZWN0YWJsZSApIFxuICAgICAgICByZXR1cm4geyBzZWxlY3RhYmxlOiBzZWxlY3RhYmxlRGF0ZXMubGVuZ3RoLCBza2lwcGVkOiBzZWxlY3RhYmxlRGF0ZXMuZmlsdGVyKCBkYXRlID0+ICFkYXRlLnNlbGVjdGVkICkubGVuZ3RoIH1cbiAgICB9LFxuXG4gICAgZ2V0RGF5T2ZXZWVrKCkge1xuICAgICAgICBjb25zdCBkZWxpdmVyeSA9IHRoaXMubW9kZWwuZGVsaXZlcnkuZGF0YVswXVxuXG4gICAgICAgIHJldHVybiBkZWxpdmVyeS5ncm91cGRyb3BvZmYuaWRcbiAgICAgICAgICAgID8gdGhpcy5YaHIoIHsgbWV0aG9kOiAnZ2V0JywgcmVzb3VyY2U6ICdzaGFyZWdyb3VwZHJvcG9mZicsIHFzOiBKU09OLnN0cmluZ2lmeSggeyBzaGFyZWlkOiB0aGlzLm1vZGVsLnNoYXJlLmlkLCBncm91cGRyb3BvZmZpZDogZGVsaXZlcnkuZ3JvdXBkcm9wb2ZmLmlkIH0gKSB9IClcbiAgICAgICAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IFByb21pc2UucmVzb2x2ZSggcmVzcG9uc2VbMF0uZGF5b2Z3ZWVrICkgKVxuICAgICAgICAgICAgOiBkZWxpdmVyeS5kZWxpdmVyeW9wdGlvbi5uYW1lID09PSAnZmFybSdcbiAgICAgICAgICAgICAgICA/IHRoaXMuUm91dGUuZGF0YS5maW5kKCByb3V0ZSA9PiByb3V0ZS5sYWJlbCA9PSAnZmFybScgKS5kYXlvZndlZWtcbiAgICAgICAgICAgICAgICA6IHRoaXMuWGhyKCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlOiAnemlwY29kZXJvdXRlJyxcbiAgICAgICAgICAgICAgICAgICAgcXM6IEpTT04uc3RyaW5naWZ5KCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB6aXBjb2RlOiB0aGlzLm1vZGVsLmN1c3RvbWVyLm1lbWJlci56aXBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVpZDogeyBvcGVyYXRpb246ICdqb2luJywgdmFsdWU6IHsgdGFibGU6ICdkZWxpdmVyeXJvdXRlJywgY29sdW1uOiAnaWQnIH0gfVxuICAgICAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IFByb21pc2UucmVzb2x2ZSggcmVzcG9uc2VbMF1bICdkZWxpdmVyeXJvdXRlLmRheW9md2VlaycgXSApIClcbiAgICB9LFxuXG4gICAgZ2V0VG90YWxEYXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxzLmRhdGVzLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpLnNlbGVjdGVkJykubGVuZ3RoXG4gICAgfSxcblxuICAgIG9uRGF0ZXNDbGljayggZSApIHtcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldC5jbG9zZXN0KCdsaScpLFxuICAgICAgICAgICAgICBkYXRlID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRhdGUnKVxuICAgICAgICBcbiAgICAgICAgaWYoIGVsLmNsYXNzTGlzdC5jb250YWlucygndW5zZWxlY3RhYmxlJykgKSByZXR1cm5cblxuICAgICAgICBsZXQgZWRpdGVkU3RhdHVzXG5cbiAgICAgICAgaWYoICEgdGhpcy5jaGFuZ2VkRGF0ZXNbIGRhdGUgXSApIHRoaXMuY2hhbmdlZERhdGVzWyBkYXRlIF0gPSB7IGluaXRpYWxTdGF0dXM6IGVsLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSA/ICdzZWxlY3RlZCcgOiAncmVtb3ZlZCcgfVxuXG4gICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoJ3NlbGVjdGVkJylcbiAgICAgICAgZWRpdGVkU3RhdHVzID0gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpID8gJ3NlbGVjdGVkJyA6ICdyZW1vdmVkJ1xuXG4gICAgICAgIGlmKCBlZGl0ZWRTdGF0dXMgIT09IHRoaXMuY2hhbmdlZERhdGVzWyBkYXRlIF0uaW5pdGlhbFN0YXR1cyApIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlZERhdGVzWyBkYXRlIF0uZWRpdGVkU3RhdHVzID0gZWRpdGVkU3RhdHVzXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdlZGl0ZWQnKVxuICAgICAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlZERhdGVzWyBkYXRlIF0uZWRpdGVkU3RhdHVzID0gdW5kZWZpbmVkXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0ZWQnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoICEgT2JqZWN0LmtleXMoIHRoaXMuY2hhbmdlZERhdGVzICkuZmluZCgga2V5ID0+IHRoaXMuY2hhbmdlZERhdGVzW2tleV0uZWRpdGVkU3RhdHVzICE9PSB1bmRlZmluZWQgKSApIHtcbiAgICAgICAgICAgIHRoaXMuZWxzLnJlc2V0QnRuLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgICAgICAgICB0aGlzLmVtaXQoICdyZXNldCcsIHRoaXMubW9kZWwgKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxzLmVkaXRTdW1tYXJ5LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNob3dFZGl0U3VtbWFyeSgpXG4gICAgfSxcblxuICAgIG9uUmVzZXRCdG5DbGljaygpIHtcbiAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICAgICAgdGhpcy5lbHMuZWRpdFN1bW1hcnkuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcblxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5jaGFuZ2VkRGF0ZXMgKS5mb3JFYWNoKCBrZXkgPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMuY2hhbmdlZERhdGVzW2tleV0uZWRpdGVkU3RhdHVzICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbHMuZGF0ZXMucXVlcnlTZWxlY3RvcihgbGlbZGF0YS1kYXRlPSR7Q1NTLmVzY2FwZSgga2V5ICl9YClcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKCdzZWxlY3RlZCcpXG4gICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZWRpdGVkJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy51cGRhdGUoIHRoaXMubW9kZWwgKVxuICAgICAgICB0aGlzLmVtaXQoICdyZXNldCcsIHRoaXMubW9kZWwgKVxuICAgIH0sXG5cbiAgICByZW5kZXJEYXRlcygpIHtcbiAgICAgICAgdGhpcy5kYXRlcy5mb3JFYWNoKCBkYXR1bSA9PiB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLmRhdGUoIGRhdHVtICksIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMuZGF0ZXMgfSB9ICkgKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBzaG93RWRpdFN1bW1hcnkoKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAwLFxuICAgICAgICAgICAgYWRkZWQgPSAwLFxuICAgICAgICAgICAgcmVtb3ZlZCA9IDBcblxuICAgICAgICB0aGlzLmVscy5zZWxlY3RlZERhdGVzLmlubmVySFRNTCA9ICcnXG4gICAgICAgIHRoaXMuZWxzLnJlbW92ZWREYXRlcy5pbm5lckhUTUwgPSAnJ1xuXG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLmNoYW5nZWREYXRlcyApLmZvckVhY2goIGRhdGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWRpdGVkU3RhdHVzID0gdGhpcy5jaGFuZ2VkRGF0ZXNbIGRhdGUgXS5lZGl0ZWRTdGF0dXNcblxuICAgICAgICAgICAgaWYoIGVkaXRlZFN0YXR1cyApIHtcblxuICAgICAgICAgICAgICAgIGVkaXRlZFN0YXR1cyA9PT0gJ3NlbGVjdGVkJ1xuICAgICAgICAgICAgICAgICAgICA/IGFkZGVkICs9IDFcbiAgICAgICAgICAgICAgICAgICAgOiByZW1vdmVkICs9IDFcblxuICAgICAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzWyBgJHtlZGl0ZWRTdGF0dXN9RGF0ZXNgIF0gfSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLnN1bW1hcnlDb2x1bW4oIHsgdmFsdWU6IHRoaXMuTW9tZW50KCBkYXRlICkuZm9ybWF0KFwiTU1NIERcIikgfSApXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJlc3VsdCA9IGFkZGVkIC0gcmVtb3ZlZFxuICAgICAgICB0aGlzLmVscy53ZWVrQ2hhbmdlLnRleHRDb250ZW50ID0gcmVzdWx0XG4gICAgICAgIHRoaXMuZWxzLndlZWtDaGFuZ2UuY2xhc3NMaXN0LnRvZ2dsZSggJ2lzLW5lZ2F0aXZlJywgQm9vbGVhbiggcmVzdWx0IDwgMCApIClcblxuICAgICAgICB0aGlzLmVscy5lZGl0U3VtbWFyeS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuXG4gICAgICAgIHRoaXMuZW1pdCggJ2FkanVzdG1lbnQnLCB7IGFkZGVkLCByZW1vdmVkIH0gKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgZGF0ZTogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvRGVsaXZlcnlEYXRlJyksXG4gICAgICAgIHN1bW1hcnlDb2x1bW46IGRhdGUgPT4gYDxsaT4ke2RhdGUudmFsdWV9PC9saT5gXG4gICAgfSxcblxuICAgIHVwZGF0ZSggeyBjdXN0b21lciwgZGVsaXZlcnksIHNoYXJlIH0gKSB7XG4gICAgICAgIGlmKCB0aGlzLnVwZGF0aW5nICkgcmV0dXJuXG5cbiAgICAgICAgdGhpcy51cGRhdGluZyA9IHRydWVcblxuICAgICAgICB0aGlzLm1vZGVsID0gYXJndW1lbnRzWzBdXG5cbiAgICAgICAgdGhpcy5jaGFuZ2VkRGF0ZXMgPSB7IH1cblxuICAgICAgICByZXR1cm4gdGhpcy5Sb3V0ZS5nZXQoKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5Ta2lwV2Vla3MuZ2V0KCB7IHF1ZXJ5OiB7IG1lbWJlcnNoYXJlaWQ6IHNoYXJlLm1lbWJlcnNoYXJlaWQgfSB9ICkgKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5nZXREYXlPZldlZWsoKSApXG4gICAgICAgIC50aGVuKCBkYXlPZldlZWsgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpXG4gICAgICAgICAgICB0aGlzLmRldGVybWluZURhdGVzKCBkYXlPZldlZWsgKS5yZW5kZXJEYXRlcygpLnNob3coKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggdGhpcy51cGRhdGluZyA9IGZhbHNlIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHVwZGF0ZURlbGl2ZXJ5KCBkYXRhICkge1xuICAgICAgICBjb25zdCBtb2RlbENvcHkgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggdGhpcy5tb2RlbCApICkgXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuRGVsaXZlcnlPcHRpb24uZ2V0KCB7IHF1ZXJ5OiB7IG5hbWU6IGRhdGEuZGVsaXZlcnlPcHRpb24gfSB9IClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIGlmKCB0aGlzLkRlbGl2ZXJ5T3B0aW9uLmRhdGEubGVuZ3RoICkgbW9kZWxDb3B5LmRlbGl2ZXJ5LmRhdGFbMF0uZGVsaXZlcnlvcHRpb24gPSB0aGlzLkRlbGl2ZXJ5T3B0aW9uLmRhdGFbMF1cblxuICAgICAgICAgICAgaWYoICEgZGF0YS5ncm91cE9wdGlvbiApIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyggbW9kZWxDb3B5LmRlbGl2ZXJ5LmRhdGFbMF0uZ3JvdXBkcm9wb2ZmICkuZm9yRWFjaCgga2V5ID0+XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsQ29weS5kZWxpdmVyeS5kYXRhWzBdLmdyb3VwZHJvcG9mZlsga2V5IF0gPSBudWxsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gKCBkYXRhLmdyb3VwT3B0aW9uIClcbiAgICAgICAgICAgICAgICA/IHRoaXMuR3JvdXBEcm9wb2Zmcy5nZXQoIHsgcXVlcnk6IHsgbmFtZTogZGF0YS5ncm91cE9wdGlvbiB9IH0gKVxuICAgICAgICAgICAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIHRoaXMuR3JvdXBEcm9wb2Zmcy5kYXRhLmxlbmd0aCApIG1vZGVsQ29weS5kZWxpdmVyeS5kYXRhWzBdLmdyb3VwZHJvcG9mZiA9IHRoaXMuR3JvdXBEcm9wb2Zmcy5kYXRhWzBdXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCBtb2RlbENvcHkgKVxuICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgOiB0aGlzLnVwZGF0ZSggbW9kZWxDb3B5IClcbiAgICAgICAgfSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgfVxuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiggeyB9LCByZXF1aXJlKCcuLi8uLi8uLi9saWIvTXlPYmplY3QnKS5wcm90b3R5cGUsIHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlci5wcm90b3R5cGUsIHtcblxuICAgIEN1cnJlbmN5OiBuZXcgSW50bC5OdW1iZXJGb3JtYXQoICdlbi1VUycsIHtcbiAgICAgIHN0eWxlOiAnY3VycmVuY3knLFxuICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyXG4gICAgfSApLFxuXG4gICAgRXJyb3I6IHJlcXVpcmUoJy4uLy4uLy4uL2xpYi9NeUVycm9yJyksXG5cbiAgICBGb3JtYXQ6IHJlcXVpcmUoJy4uL0Zvcm1hdCcpLFxuXG4gICAgTW9kZWw6IHJlcXVpcmUoJy4uL21vZGVscy9fX3Byb3RvX18nKSxcblxuICAgIE1vbWVudDogcmVxdWlyZSgnbW9tZW50JyksXG5cbiAgICBPcHRpbWl6ZWRSZXNpemU6IHJlcXVpcmUoJy4vbGliL09wdGltaXplZFJlc2l6ZScpLFxuICAgIFxuICAgIFA6ICggZnVuLCBhcmdzPVsgXSwgdGhpc0FyZyApID0+XG4gICAgICAgIG5ldyBQcm9taXNlKCAoIHJlc29sdmUsIHJlamVjdCApID0+IFJlZmxlY3QuYXBwbHkoIGZ1biwgdGhpc0FyZyB8fCB0aGlzLCBhcmdzLmNvbmNhdCggKCBlLCAuLi5jYWxsYmFjayApID0+IGUgPyByZWplY3QoZSkgOiByZXNvbHZlKGNhbGxiYWNrKSApICkgKSxcblxuICAgIFhocjogcmVxdWlyZSgnLi4vWGhyJyksXG5cbiAgICBiaW5kRXZlbnQoIGtleSwgZXZlbnQsIGVsICkge1xuICAgICAgICB2YXIgZWxzID0gZWwgPyBbIGVsIF0gOiBBcnJheS5pc0FycmF5KCB0aGlzLmVsc1sga2V5IF0gKSA/IHRoaXMuZWxzWyBrZXkgXSA6IFsgdGhpcy5lbHNbIGtleSBdIF1cbiAgICAgICAgZWxzLmZvckVhY2goIGVsID0+IGVsLmFkZEV2ZW50TGlzdGVuZXIoIGV2ZW50IHx8ICdjbGljaycsIGUgPT4gdGhpc1sgYG9uJHt0aGlzLmNhcGl0YWxpemVGaXJzdExldHRlcihrZXkpfSR7dGhpcy5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoZXZlbnQpfWAgXSggZSApICkgKVxuICAgIH0sXG5cbiAgICBjYXBpdGFsaXplRmlyc3RMZXR0ZXI6IHN0cmluZyA9PiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSksXG5cbiAgICBjb25zdHJ1Y3Rvciggb3B0cz17fSApIHtcblxuICAgICAgICBpZiggb3B0cy5ldmVudHMgKSB7IE9iamVjdC5hc3NpZ24oIHRoaXMuZXZlbnRzLCBvcHRzLmV2ZW50cyApOyBkZWxldGUgb3B0cy5ldmVudHM7IH1cbiAgICAgICAgT2JqZWN0LmFzc2lnbiggdGhpcywgb3B0cyApXG5cbiAgICAgICAgdGhpcy5zdWJ2aWV3RWxlbWVudHMgPSBbIF1cblxuICAgICAgICBpZiggdGhpcy5yZXF1aXJlc0xvZ2luICYmICghdGhpcy51c2VyLmlkICkgKSByZXR1cm4gdGhpcy5oYW5kbGVMb2dpbigpXG4gICAgICAgIGlmKCB0aGlzLnVzZXIgJiYgIXRoaXMuaXNBbGxvd2VkKCB0aGlzLnVzZXIuYXR0cmlidXRlcyApICkgcmV0dXJuIHRoaXMuc2Nvb3RBd2F5KClcblxuICAgICAgICByZXR1cm4gdGhpcy5pbml0aWFsaXplKCkucmVuZGVyKClcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVFdmVudHMoIGtleSwgZWwgKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHRoaXMuZXZlbnRzW2tleV1cblxuICAgICAgICBpZiggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHsgdGhpcy5iaW5kRXZlbnQoIGtleSwgdGhpcy5ldmVudHNba2V5XSwgZWwgKSB9XG4gICAgICAgIGVsc2UgaWYoIEFycmF5LmlzQXJyYXkoIHRoaXMuZXZlbnRzW2tleV0gKSApIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzWyBrZXkgXS5mb3JFYWNoKCBldmVudE9iaiA9PiB0aGlzLmJpbmRFdmVudCgga2V5LCBldmVudE9iaiApIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50KCBrZXksIHRoaXMuZXZlbnRzW2tleV0uZXZlbnQgKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRlbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlkZSgpXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVscy5jb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGhpcy5lbHMuY29udGFpbmVyIClcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHRoaXMuZW1pdCgnZGVsZXRlZCcpIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGV2ZW50czoge30sXG5cbiAgICBmYWRlSW5JbWFnZSggZWwgKSB7XG4gICAgICAgIGVsLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCggJ2ltZ0xvYWRlZCcsIGVsIClcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zcmMnKVxuICAgICAgICB9XG5cbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCAnc3JjJywgZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpIClcbiAgICB9LFxuXG4gICAgZ2V0Q29udGFpbmVyKCkgeyByZXR1cm4gdGhpcy5lbHMuY29udGFpbmVyIH0sXG5cbiAgICBnZXREYXRhKCkge1xuICAgICAgICBpZiggIXRoaXMubW9kZWwgKSB0aGlzLm1vZGVsID0gT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCwgeyByZXNvdXJjZTogeyB2YWx1ZTogdGhpcy5uYW1lIH0gfSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZ2V0KClcbiAgICB9LFxuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zKCkge1xuICAgICAgICBjb25zdCBydiA9IE9iamVjdC5hc3NpZ24oIHRoaXMudXNlciA/IHsgdXNlcjogdGhpcy51c2VyLmRhdGEgfSA6IHt9LCB0aGlzLkZvcm1hdCApXG5cbiAgICAgICAgaWYoIHRoaXMubW9kZWwgKSB7XG4gICAgICAgICAgICBydi5tb2RlbCA9IHRoaXMubW9kZWwuZGF0YVxuXG4gICAgICAgICAgICBpZiggdGhpcy5tb2RlbC5tZXRhICkgcnYubWV0YSA9IHRoaXMubW9kZWwubWV0YVxuICAgICAgICAgICAgaWYoIHRoaXMubW9kZWwuYXR0cmlidXRlcyApIHJ2LmF0dHJpYnV0ZXMgPSB0aGlzLm1vZGVsLmF0dHJpYnV0ZXNcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCB0aGlzLnRlbXBsYXRlT3B0cyApIHJ2Lm9wdHMgPSB0eXBlb2YgdGhpcy50ZW1wbGF0ZU9wdHMgPT09ICdmdW5jdGlvbicgPyB0aGlzLnRlbXBsYXRlT3B0cygpIDogdGhpcy50ZW1wbGF0ZU9wdHMgfHwge31cblxuICAgICAgICByZXR1cm4gcnZcbiAgICB9LFxuXG4gICAgaGFuZGxlTG9naW4oKSB7XG5cbiAgICAgICAgcmVxdWlyZSgnLi9Mb2dpbicpLnNob3coKS5vbmNlKCBcInN1Y2Nlc3NcIiwgdXNlckRhdGEgPT4ge1xuICAgICAgICAgICAgaWYoICF0aGlzLmlzQWxsb3dlZCggdXNlckRhdGEgKSApIHJldHVybiB0aGlzLnNjb290QXdheSgpXG5cbiAgICAgICAgICAgIHRoaXMudXNlci5zZXQoIHVzZXJEYXRhIClcbiAgICAgICAgICAgIHRoaXMudXNlci50cmlnZ2VyKCdsb2dnZWRJbicpXG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uTG9naW4oKVxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBoaWRlKCBpc1Nsb3cgKSB7XG4gICAgICAgIGlmKCAhdGhpcy5lbHMgfHwgdGhpcy5pc0hpZGluZyApIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXG4gICAgICAgIHRoaXMuaXNIaWRpbmcgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5oaWRlRWwoIHRoaXMuZWxzLmNvbnRhaW5lciwgaXNTbG93IClcbiAgICAgICAgLnRoZW4oICgpID0+IFByb21pc2UucmVzb2x2ZSggdGhpcy5oaWRpbmcgPSBmYWxzZSApIClcbiAgICB9LFxuXG4gICAgaGlkZVN5bmMoKSB7IHRoaXMuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKTsgcmV0dXJuIHRoaXMgfSxcblxuICAgIF9oaWRlRWwoIGVsLCByZXNvbHZlLCBoYXNoLCBpc1Nsb3cgKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdhbmltYXRpb25lbmQnLCB0aGlzWyBoYXNoIF0gKVxuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGBhbmltYXRlLW91dCR7IGlzU2xvdyA/ICctc2xvdycgOiAnJ31gKVxuICAgICAgICBkZWxldGUgdGhpc1toYXNoXVxuICAgICAgICB0aGlzLmlzSGlkaW5nID0gZmFsc2VcbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgfSxcblxuICAgIGhpZGVFbCggZWwsIGlzU2xvdyApIHtcbiAgICAgICAgaWYoIHRoaXMuaXNIaWRkZW4oIGVsICkgKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblxuICAgICAgICBjb25zdCB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICAgICAgICBoYXNoID0gYCR7dGltZX1IaWRlYFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCByZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHRoaXNbIGhhc2ggXSA9IGUgPT4gdGhpcy5faGlkZUVsKCBlbCwgcmVzb2x2ZSwgaGFzaCwgaXNTbG93IClcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoICdhbmltYXRpb25lbmQnLCB0aGlzWyBoYXNoIF0gKVxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChgYW5pbWF0ZS1vdXQkeyBpc1Nsb3cgPyAnLXNsb3cnIDogJyd9YClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGh0bWxUb0ZyYWdtZW50KCBzdHIgKSB7XG4gICAgICAgIGxldCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIC8vIG1ha2UgdGhlIHBhcmVudCBvZiB0aGUgZmlyc3QgZGl2IGluIHRoZSBkb2N1bWVudCBiZWNvbWVzIHRoZSBjb250ZXh0IG5vZGVcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKS5pdGVtKDApKVxuICAgICAgICByZXR1cm4gcmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KCBzdHIgKVxuICAgIH0sXG5cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbiggdGhpcywgeyBlbHM6IHsgfSwgc2x1cnA6IHsgYXR0cjogJ2RhdGEtanMnLCB2aWV3OiAnZGF0YS12aWV3JywgbmFtZTogJ2RhdGEtbmFtZScsIGltZzogJ2RhdGEtc3JjJywgYmdJbWc6ICdkYXRhLWJnJyB9LCB2aWV3czogeyB9IH0gKVxuICAgIH0sXG5cbiAgICBpbnNlcnRUb0RvbSggZnJhZ21lbnQsIG9wdGlvbnMgKSB7XG4gICAgICAgIGNvbnN0IGluc2VydGlvbiA9IHR5cGVvZiBvcHRpb25zLmluc2VydGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuaW5zZXJ0aW9uKCkgOiBvcHRpb25zLmluc2VydGlvbjtcblxuICAgICAgICBpbnNlcnRpb24ubWV0aG9kID09PSAnaW5zZXJ0QmVmb3JlJ1xuICAgICAgICAgICAgPyBpbnNlcnRpb24uZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGZyYWdtZW50LCBpbnNlcnRpb24uZWwgKVxuICAgICAgICAgICAgOiBpbnNlcnRpb24uZWxbIGluc2VydGlvbi5tZXRob2QgfHwgJ2FwcGVuZENoaWxkJyBdKCBmcmFnbWVudCApXG4gICAgfSxcblxuICAgIGlzQWxsb3dlZCggdXNlciApIHtcbiAgICAgICAgaWYoICF0aGlzLnJlcXVpcmVzUm9sZSApIHJldHVybiB0cnVlXG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVpcmVzUm9sZSAmJiB1c2VyLnJvbGVzLmluY2x1ZGVzKCB0aGlzLnJlcXVpcmVzUm9sZSApXG4gICAgfSxcbiAgICBcbiAgICBpc0hpZGRlbiggZWwgKSB7IHJldHVybiBlbCA/IGVsLmNsYXNzTGlzdC5jb250YWlucygnZmQtaGlkZGVuJykgOiB0aGlzLmVscy5jb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdmZC1oaWRkZW4nKSB9LFxuXG4gICAgbG9hZEJnSW1hZ2UoIGVsICkge1xuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKVxuXG4gICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiBlbC5jbGFzc0xpc3QuYWRkKCdiZy1sb2FkZWQnKVxuICAgICAgICBpbWcuc3JjID0gdGhpcy5Gb3JtYXQuSW1hZ2VTcmMoIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1iZycpIClcbiAgICB9LFxuXG4gICAgb25Mb2dpbigpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCkucmVuZGVyKClcbiAgICB9LFxuXG4gICAgb25OYXZpZ2F0aW9uKCBwYXRoICkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaG93KClcbiAgICB9LFxuXG4gICAgc2hvd05vQWNjZXNzKCkge1xuICAgICAgICBhbGVydChcIk5vIHByaXZpbGVnZXMsIHNvblwiKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkgeyByZXR1cm4gdGhpcyB9LFxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiggdGhpcy5kYXRhICkgdGhpcy5tb2RlbCA9IE9iamVjdC5jcmVhdGUoIHRoaXMuTW9kZWwsIHsgfSApLmNvbnN0cnVjdG9yKCB0aGlzLmRhdGEgKVxuXG4gICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgaW5zZXJ0aW9uOiB0aGlzLmluc2VydGlvbiB8fCB7IGVsOiBkb2N1bWVudC5ib2R5IH0sXG4gICAgICAgICAgICBpc1ZpZXc6IHRydWUsXG4gICAgICAgICAgICBzdG9yZUZyYWdtZW50OiB0aGlzLnN0b3JlRnJhZ21lbnQsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZSggdGhpcy5nZXRUZW1wbGF0ZU9wdGlvbnMoKSwgeyBNb21lbnQ6IHRoaXMuTW9tZW50IH0gKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLnJlbmRlclN1YnZpZXdzKClcblxuICAgICAgICBpZiggdGhpcy5zaXplICkgeyB0aGlzLnNpemUoKTsgdGhpcy5PcHRpbWl6ZWRSZXNpemUuYWRkKCB0aGlzLnNpemUuYmluZCh0aGlzKSApIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wb3N0UmVuZGVyKClcbiAgICB9LFxuXG4gICAgcmVuZGVyU3Vidmlld3MoKSB7XG4gICAgICAgIHRoaXMuc3Vidmlld0VsZW1lbnRzLmZvckVhY2goIG9iaiA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gb2JqLm5hbWUgfHwgb2JqLnZpZXdcblxuICAgICAgICAgICAgbGV0IG9wdHMgPSB7IH1cblxuICAgICAgICAgICAgaWYoIHRoaXMuVmlld3MgJiYgdGhpcy5WaWV3c1sgb2JqLnZpZXcgXSApIG9wdHMgPSB0eXBlb2YgdGhpcy5WaWV3c1sgb2JqLnZpZXcgXSA9PT0gXCJvYmplY3RcIiA/IHRoaXMuVmlld3NbIG9iai52aWV3IF0gOiBSZWZsZWN0LmFwcGx5KCB0aGlzLlZpZXdzWyBvYmoudmlldyBdLCB0aGlzLCBbIF0gKVxuICAgICAgICAgICAgaWYoIHRoaXMuVmlld3MgJiYgdGhpcy5WaWV3c1sgbmFtZSBdICkgb3B0cyA9IHR5cGVvZiB0aGlzLlZpZXdzWyBuYW1lIF0gPT09IFwib2JqZWN0XCIgPyB0aGlzLlZpZXdzWyBuYW1lIF0gOiBSZWZsZWN0LmFwcGx5KCB0aGlzLlZpZXdzWyBuYW1lIF0sIHRoaXMsIFsgXSApXG5cbiAgICAgICAgICAgIHRoaXMudmlld3NbIG5hbWUgXSA9IHRoaXMuZmFjdG9yeS5jcmVhdGUoIG9iai52aWV3LCBPYmplY3QuYXNzaWduKCB7IGluc2VydGlvbjogeyBlbDogb2JqLmVsLCBtZXRob2Q6ICdpbnNlcnRCZWZvcmUnIH0gfSwgb3B0cyApIClcblxuICAgICAgICAgICAgaWYoIHRoaXMuZXZlbnRzLnZpZXdzICkge1xuICAgICAgICAgICAgICAgIGlmKCB0aGlzLmV2ZW50cy52aWV3c1sgbmFtZSBdICkgdGhpcy5ldmVudHMudmlld3NbIG5hbWUgXS5mb3JFYWNoKCBhcnIgPT4gdGhpcy52aWV3c1sgbmFtZSBdLm9uKCBhcnJbMF0sIGV2ZW50RGF0YSA9PiBSZWZsZWN0LmFwcGx5KCBhcnJbMV0sIHRoaXMsIFsgZXZlbnREYXRhIF0gKSApIClcbiAgICAgICAgICAgICAgICBlbHNlIGlmKCB0aGlzLmV2ZW50cy52aWV3c1sgb2JqLnZpZXcgXSApIHRoaXMuZXZlbnRzLnZpZXdzWyBvYmoudmlldyBdLmZvckVhY2goIGFyciA9PiB0aGlzLnZpZXdzWyBuYW1lIF0ub24oIGFyclswXSwgZXZlbnREYXRhID0+IFJlZmxlY3QuYXBwbHkoIGFyclsxXSwgdGhpcywgWyBldmVudERhdGEgXSApICkgKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggb2JqLmVsLmNsYXNzTGlzdC5jb250YWlucygnZmQtaGlkZGVuJykgKSB0aGlzLnZpZXdzW25hbWVdLmhpZGVTeW5jKClcbiAgICAgICAgICAgIG9iai5lbC5yZW1vdmUoKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLnN1YnZpZXdFbGVtZW50cyA9IFsgXVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2Nvb3RBd2F5KCkge1xuICAgICAgICB0aGlzLlRvYXN0LnNob3coICdlcnJvcicsICdZb3UgYXJlIG5vdCBhbGxvd2VkIGhlcmUuICBTb3JyeS4nKVxuICAgICAgICAuY2F0Y2goIGUgPT4geyB0aGlzLkVycm9yKCBlICk7IHRoaXMuZW1pdCggJ25hdmlnYXRlJywgYC9gICkgfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLmVtaXQoICduYXZpZ2F0ZScsIGAvYCApIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBzaG93KCBpc1Nsb3cgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3dFbCggdGhpcy5lbHMuY29udGFpbmVyLCBpc1Nsb3cgKVxuICAgIH0sXG5cbiAgICBzaG93U3luYygpIHsgdGhpcy5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGRlbicpOyByZXR1cm4gdGhpcyB9LFxuXG4gICAgX3Nob3dFbCggZWwsIHJlc29sdmUsIGhhc2gsIGlzU2xvdyApIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2FuaW1hdGlvbmVuZCcsIHRoaXNbaGFzaF0gKVxuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGBhbmltYXRlLWluJHsgaXNTbG93ID8gJy1zbG93JyA6ICcnfWApXG4gICAgICAgIGRlbGV0ZSB0aGlzWyBoYXNoIF1cbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgfSxcblxuICAgIHNob3dFbCggZWwsIGlzU2xvdyApIHtcbiAgICAgICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgaGFzaCA9IGAke3RpbWV9U2hvd2BcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoIHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgdGhpc1sgaGFzaCBdID0gZSA9PiB0aGlzLl9zaG93RWwoIGVsLCByZXNvbHZlLCBoYXNoLCBpc1Nsb3cgKVxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lciggJ2FuaW1hdGlvbmVuZCcsIHRoaXNbIGhhc2ggXSApXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmZC1oaWRkZW4nKVxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChgYW5pbWF0ZS1pbiR7IGlzU2xvdyA/ICctc2xvdycgOiAnJ31gKVxuICAgICAgICB9ICkgICAgICAgIFxuICAgIH0sXG5cbiAgICBzbHVycEVsKCBlbCApIHtcbiAgICAgICAgdmFyIGtleSA9IGVsLmdldEF0dHJpYnV0ZSggdGhpcy5zbHVycC5hdHRyICkgfHwgJ2NvbnRhaW5lcidcblxuICAgICAgICBpZigga2V5ID09PSAnY29udGFpbmVyJyApIGVsLmNsYXNzTGlzdC5hZGQoIHRoaXMubmFtZSApXG5cbiAgICAgICAgdGhpcy5lbHNbIGtleSBdID0gQXJyYXkuaXNBcnJheSggdGhpcy5lbHNbIGtleSBdIClcbiAgICAgICAgICAgID8gdGhpcy5lbHNbIGtleSBdLmNvbmNhdCggZWwgKVxuICAgICAgICAgICAgOiAoIHRoaXMuZWxzWyBrZXkgXSAhPT0gdW5kZWZpbmVkIClcbiAgICAgICAgICAgICAgICA/IFsgdGhpcy5lbHNbIGtleSBdLCBlbCBdXG4gICAgICAgICAgICAgICAgOiBlbFxuXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLnNsdXJwLmF0dHIpXG5cbiAgICAgICAgaWYoIHRoaXMuZXZlbnRzWyBrZXkgXSApIHRoaXMuZGVsZWdhdGVFdmVudHMoIGtleSwgZWwgKVxuICAgIH0sXG5cbiAgICBzbHVycFRlbXBsYXRlKCBvcHRpb25zICkge1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmh0bWxUb0ZyYWdtZW50KCBvcHRpb25zLnRlbXBsYXRlICksXG4gICAgICAgICAgICBzZWxlY3RvciA9IGBbJHt0aGlzLnNsdXJwLmF0dHJ9XWAsXG4gICAgICAgICAgICB2aWV3U2VsZWN0b3IgPSBgWyR7dGhpcy5zbHVycC52aWV3fV1gLFxuICAgICAgICAgICAgaW1nU2VsZWN0b3IgPSBgWyR7dGhpcy5zbHVycC5pbWd9XWAsXG4gICAgICAgICAgICBiZ0ltZ1NlbGVjdG9yID0gYFske3RoaXMuc2x1cnAuYmdJbWd9XWAsXG4gICAgICAgICAgICBmaXJzdEVsID0gZnJhZ21lbnQucXVlcnlTZWxlY3RvcignKicpXG5cbiAgICAgICAgaWYoIG9wdGlvbnMuaXNWaWV3IHx8IGZpcnN0RWwuZ2V0QXR0cmlidXRlKCB0aGlzLnNsdXJwLmF0dHIgKSApIHRoaXMuc2x1cnBFbCggZmlyc3RFbCApXG5cbiAgICAgICAgQXJyYXkuZnJvbSggZnJhZ21lbnQucXVlcnlTZWxlY3RvckFsbCggYCR7c2VsZWN0b3J9LCAke3ZpZXdTZWxlY3Rvcn0sICR7aW1nU2VsZWN0b3J9LCAke2JnSW1nU2VsZWN0b3J9YCApICkuZm9yRWFjaCggZWwgPT4ge1xuICAgICAgICAgICAgaWYoIGVsLmhhc0F0dHJpYnV0ZSggdGhpcy5zbHVycC5hdHRyICkgKSB7IHRoaXMuc2x1cnBFbCggZWwgKSB9XG4gICAgICAgICAgICBlbHNlIGlmKCBlbC5oYXNBdHRyaWJ1dGUoIHRoaXMuc2x1cnAuaW1nICkgKSByZXR1cm4gdGhpcy5mYWRlSW5JbWFnZSggZWwgKVxuICAgICAgICAgICAgZWxzZSBpZiggZWwuaGFzQXR0cmlidXRlKCB0aGlzLnNsdXJwLmJnSW1nICkgKSByZXR1cm4gdGhpcy5sb2FkQmdJbWFnZSggZWwgKVxuICAgICAgICAgICAgZWxzZSBpZiggZWwuaGFzQXR0cmlidXRlKCB0aGlzLnNsdXJwLnZpZXcgKSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnZpZXdFbGVtZW50cy5wdXNoKCB7IGVsLCB2aWV3OiBlbC5nZXRBdHRyaWJ1dGUodGhpcy5zbHVycC52aWV3KSwgbmFtZTogZWwuZ2V0QXR0cmlidXRlKHRoaXMuc2x1cnAubmFtZSkgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgXG4gICAgICAgIGlmKCBvcHRpb25zLnN0b3JlRnJhZ21lbnQgKSByZXR1cm4gT2JqZWN0LmFzc2lnbiggdGhpcywgeyBmcmFnbWVudCB9IClcblxuICAgICAgICB0aGlzLmluc2VydFRvRG9tKCBmcmFnbWVudCwgb3B0aW9ucyApXG5cbiAgICAgICAgaWYoIG9wdGlvbnMucmVuZGVyU3Vidmlld3MgKSB0aGlzLnJlbmRlclN1YnZpZXdzKClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKCB7XG5cbiAgICBhZGQoY2FsbGJhY2spIHtcbiAgICAgICAgaWYoICF0aGlzLmNhbGxiYWNrcy5sZW5ndGggKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpIClcbiAgICAgICAgdGhpcy5jYWxsYmFja3MucHVzaChjYWxsYmFjaylcbiAgICB9LFxuXG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgaWYoIHRoaXMucnVubmluZyApIHJldHVyblxuXG4gICAgICAgIHRoaXMucnVubmluZyA9IHRydWVcbiAgICAgICAgXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggdGhpcy5ydW5DYWxsYmFja3MuYmluZCh0aGlzKSApXG4gICAgICAgICAgICA6IHNldFRpbWVvdXQoIHRoaXMucnVuQ2FsbGJhY2tzLCA2NilcbiAgICB9LFxuXG4gICAgcnVuQ2FsbGJhY2tzKCkge1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzLmZpbHRlciggY2FsbGJhY2sgPT4gY2FsbGJhY2soKSApXG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlIFxuICAgIH1cblxufSwgeyBjYWxsYmFja3M6IHsgd3JpdGFibGU6IHRydWUsIHZhbHVlOiBbXSB9LCBydW5uaW5nOiB7IHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogZmFsc2UgfSB9IClcbiIsInZhciBNeVZpZXcgPSByZXF1aXJlKCcuL015VmlldycpLFxuICAgIE1vZGFsID0gZnVuY3Rpb24oKSB7IHJldHVybiBNeVZpZXcuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuTXlWaWV3LnByb3RvdHlwZS5fLmV4dGVuZCggTW9kYWwucHJvdG90eXBlLCBNeVZpZXcucHJvdG90eXBlLCB7XG5cbiAgICBjaGVja0ZvckVudGVyKCBlICkgeyBpZiggZS5rZXlDb2RlID09PSAxMyApIHRoaXMuZW1pdENvbmZpcm1hdGlvbigpIH0sXG5cbiAgICBlbWl0Q29uZmlybWF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lbWl0KCAnc3VibWl0JywgdGhpcy5nZXRGb3JtRGF0YSgpIClcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdjb25maXJtQnRuJzogeyBldmVudDogJ2NsaWNrJywgc2VsZWN0b3I6ICcnLCBtZXRob2Q6ICdlbWl0Q29uZmlybWF0aW9uJyB9XG4gICAgfSxcblxuICAgIGhpZGU6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEgPSB0aGlzLl8ucGljayggdGhpcy50ZW1wbGF0ZURhdGEsIHRoaXMudGVtcGxhdGVEYXRhS2V5cyApXG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLm1vZGFsKCdoaWRlJylcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS50aXRsZS50ZXh0KCcnKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5oZWFkZXIuc2hvdygpXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmJvZHkucmVtb3ZlQ2xhc3MoJ2hpZGUnKS5lbXB0eSgpXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmZvb3Rlci5zaG93KClcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY2FuY2VsQnRuLnNob3coKS50ZXh0KCdDYW5jZWwnKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jbG9zZUJ0bi5zaG93KClcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29uZmlybUJ0bi5zaG93KCkudGV4dCgnU2F2ZScpXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuJChkb2N1bWVudCkub24oICdrZXl1cCcsIHRoaXMuY2hlY2tGb3JFbnRlci5iaW5kKHRoaXMpIClcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIub24oICdoaWRkZW4uYnMubW9kYWwnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoIHsgcmVzZXQ6IHRydWUgfSApXG4gICAgICAgICAgICB0aGlzLmVtaXQoICdoaWRkZW4nIClcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCAnc3VibWl0JyApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5vbiggJ3Nob3duLmJzLm1vZGFsJywgKCkgPT4geyBcbiAgICAgICAgICAgIHZhciBmaXJzdElucHV0ID0gdGhpcy4kKCcubW9kYWwtYm9keSBpbnB1dDpmaXJzdCcpXG4gICAgICAgICAgICB0aGlzLmVtaXQoICdzaG93bicgKVxuICAgICAgICAgICAgaWYoIGZpcnN0SW5wdXQubGVuZ3RoICYmICghIC9kYXRlLy50ZXN0KCBmaXJzdElucHV0LmF0dHIoJ2lkJykgKSApICkgZmlyc3RJbnB1dC5mb2N1cygpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHNob3coIG9wdGlvbnMgKSB7XG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGFLZXlzID0gT2JqZWN0LmtleXMoIHRoaXMudGVtcGxhdGVEYXRhIClcblxuICAgICAgICB2YXIgYnNPcHRzID0geyBzaG93OiB0cnVlIH1cblxuICAgICAgICBpZiggb3B0aW9ucy50aXRsZSApIHtcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnRpdGxlLnRleHQoIG9wdGlvbnMudGl0bGUgKVxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuaGVhZGVyLnNob3coKVxuICAgICAgICB9IGVsc2UgeyB0aGlzLnRlbXBsYXRlRGF0YS5oZWFkZXIuaGlkZSgpIH1cblxuICAgICAgICBpZiggb3B0aW9ucy5ib2R5ICkge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuYm9keS5yZW1vdmVDbGFzcygnaGlkZScpXG4gICAgICAgICAgICBvcHRpb25zLmJvZHkuY2hhckF0KDApID09PSAnPCdcbiAgICAgICAgICAgICAgICA/IHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZTogb3B0aW9ucy5ib2R5LCBpbnNlcnRpb246IHsgJGVsOiB0aGlzLnRlbXBsYXRlRGF0YS5ib2R5LCBtZXRob2Q6ICdhcHBlbmQnIH0gfSApXG4gICAgICAgICAgICAgICAgOiB0aGlzLnRlbXBsYXRlRGF0YS5ib2R5Lmh0bWwoIG9wdGlvbnMuYm9keSApXG4gICAgICAgIH0gZWxzZSBpZiggIW9wdGlvbnMuYm9keSAmJiB0aGlzLnRlbXBsYXRlRGF0YS5ib2R5LmNoaWxkcmVuKCkubGVuZ3RoID09PSAwICkgeyB0aGlzLnRlbXBsYXRlRGF0YS5ib2R5LmFkZENsYXNzKCdoaWRlJykgfVxuXG4gICAgICAgIGlmKCBvcHRpb25zLmhpZGVGb290ZXIgKSB0aGlzLnRlbXBsYXRlRGF0YS5mb290ZXIuaGlkZSgpIFxuXG4gICAgICAgIGlmKCBvcHRpb25zLmNvbmZpcm1UZXh0ICkgdGhpcy50ZW1wbGF0ZURhdGEuY29uZmlybUJ0bi50ZXh0KCBvcHRpb25zLmNvbmZpcm1UZXh0IClcblxuICAgICAgICBpZiggb3B0aW9ucy5oaWRlQ2FuY2VsQnRuICkgdGhpcy50ZW1wbGF0ZURhdGEuY2FuY2VsQnRuLmhpZGUoKVxuICAgICAgICBpZiggb3B0aW9ucy5jYW5jZWxUZXh0ICkgdGhpcy50ZW1wbGF0ZURhdGEuY2FuY2VsQnRuLnRleHQoIG9wdGlvbnMuY2FuY2VsVGV4dCApXG5cbiAgICAgICAgaWYoIG9wdGlvbnMuc3RhdGljICkge1xuICAgICAgICAgICAgYnNPcHRzLmJhY2tkcm9wID0gJ3N0YXRpYydcbiAgICAgICAgICAgIGJzT3B0cy5rZXlib2FyZCA9IGZhbHNlXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jbG9zZUJ0bi5oaWRlKClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLm1vZGFsKCBic09wdHMgKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvbW9kYWwnKSggcmVxdWlyZSgnaGFuZGxlYmFycycpICksXG5cbiAgICB1cGRhdGVDb250ZW50OiBmdW5jdGlvbiggdXBkYXRlcyApIHtcbiAgICAgICAgdGhpcy5fLnVwZGF0ZXMuZWFjaCggKCB2YWx1ZSwga2V5ICkgPT4gdGhpcy50ZW1wbGF0ZURhdGFbIGtleSBdLmh0bWwoIHZhbHVlICkgKVxuICAgIH1cblxufSApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBNb2RhbCggeyBjb250YWluZXI6IE15Vmlldy5wcm90b3R5cGUuJCgnYm9keScpIH0gKVxuIiwidmFyIExpc3QgPSByZXF1aXJlKCcuLi91dGlsL0xpc3QnKSxcbiAgICBEYXRlU2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIERhdGVTZWxlY3Rpb24ucHJvdG90eXBlLCBMaXN0LnByb3RvdHlwZSwge1xuXG4gICAgSXRlbVZpZXc6IHJlcXVpcmUoJy4vUGlja3VwRGF0ZXMnKSxcblxuICAgIGNvbGxlY3Rpb246IHsgY29tcGFyYXRvcjogJ3N0YXJ0RXBvY2gnIH0sXG5cbiAgICBnZXRJdGVtVmlld09wdGlvbnMoKSB7IHJldHVybiB7IGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEuc2hhcmVzIH0gfSxcbiAgICBcbiAgICBpdGVtTW9kZWxzKCkgeyByZXR1cm4gdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5tb2RlbHMgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG5cbiAgICAgICAgTGlzdC5wcm90b3R5cGUucG9zdFJlbmRlci5jYWxsKHRoaXMpXG5cbiAgICAgICAgdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5vbiggJ2FkZCcsIHNoYXJlID0+IHRoaXMuaXRlbXMuYWRkKCBzaGFyZSApIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbiggJ3JlbW92ZScsIHNoYXJlID0+IHRoaXMuaXRlbXMucmVtb3ZlKCBzaGFyZSApIClcblxuICAgICAgICB0aGlzLnByZVZhbGlkYXRlKClcbiAgICB9LFxuXG4gICAgcHJlVmFsaWRhdGUoKSB7XG4gICAgICAgIHRoaXMuZ29CYWNrID0gZmFsc2VcblxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goIHNoYXJlID0+IHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZERlbGl2ZXJ5ID0gc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoICFOdW1iZXIuaXNJbnRlZ2VyKHNlbGVjdGVkRGVsaXZlcnkuZGF5b2Z3ZWVrKSB8fCAhc2VsZWN0ZWREZWxpdmVyeS5zdGFydHRpbWUgfHwgIXNlbGVjdGVkRGVsaXZlcnkuc3RhcnR0aW1lICkge1xuICAgICAgICAgICAgICAgIHNoYXJlLnNldCggeyBzZWxlY3RlZERlbGl2ZXJ5OiB7IH0gfSApXG4gICAgICAgICAgICAgICAgdGhpcy5nb0JhY2sgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHNlbGVjdGlvbjogdHJ1ZSxcblxuICAgIHNob3coKSB7XG4gICAgICAgIExpc3QucHJvdG90eXBlLnNob3cuY2FsbCh0aGlzKVxuXG4gICAgICAgIHRoaXMucHJlVmFsaWRhdGUoKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL2RhdGVTZWxlY3Rpb24nKSxcblxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICB2YXIgdmFsaWQgPSB0cnVlLFxuICAgICAgICAgICAgZXJyb3JWaWV3cyA9IFsgXSxcbiAgICAgICAgICAgIHRhcmdldEVycm9yVmlldyA9IG51bGxcblxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5pdGVtVmlld3MgKS5mb3JFYWNoKCBpZCA9PiB7XG4gICAgICAgICAgICBpZiggISB0aGlzLml0ZW1WaWV3c1tpZF0udmFsaWQgKSB7XG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgIGVycm9yVmlld3MucHVzaCggdGhpcy5pdGVtVmlld3NbaWRdLnRlbXBsYXRlRGF0YS5jb250YWluZXIgKVxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbVZpZXdzW2lkXS50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmFkZENsYXNzKCdoYXMtZXJyb3InKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcbiAgICAgICAgXG4gICAgICAgIGlmKCBlcnJvclZpZXdzLmxlbmd0aCApIHtcbiAgICAgICAgICAgIHRhcmdldEVycm9yVmlldyA9IGVycm9yVmlld3Muc2xpY2UoLTEpWzBdXG4gICAgICAgICAgICB0aGlzLiQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKCB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiB0YXJnZXRFcnJvclZpZXcub2Zmc2V0KCkudG9wXG4gICAgICAgICAgICB9LCA1MDAgKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHZhbGlkICkge1xuICAgICAgICAgICAgLy8ucmVqZWN0KCBkZWxpdmVyeURheSA9PiBkZWxpdmVyeURheS5nZXQoJ3Vuc2VsZWN0YWJsZScpIClcblxuICAgICAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKCBpdGVtID0+IGl0ZW0uc2V0KCAnc2tpcERheXMnLFxuICAgICAgICAgICAgICAgIHRoaXMuXyggaXRlbS5nZXQoJ2RlbGl2ZXJ5RGF0ZXMnKVxuICAgICAgICAgICAgICAgICAgICAucmVqZWN0KCBkZWxpdmVyeURheSA9PiAoIHRoaXMuaXRlbVZpZXdzWyBpdGVtLmlkIF0uc2VsZWN0ZWRJdGVtc1sgZGVsaXZlcnlEYXkuaWQgXSApID8gdHJ1ZSA6IGZhbHNlICkgKVxuICAgICAgICAgICAgICAgICAgICAubWFwKCBkZWxpdmVyeURheSA9PiBkZWxpdmVyeURheS5pZCApXG4gICAgICAgICAgICApIClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWxpZFxuICAgIH1cblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVNlbGVjdGlvblxuIiwidmFyIExpc3QgPSByZXF1aXJlKCcuLi91dGlsL0xpc3QnKSxcbiAgICBEZWxpdmVyeSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTGlzdC5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBEZWxpdmVyeS5wcm90b3R5cGUsIExpc3QucHJvdG90eXBlLCB7XG5cbiAgICBJdGVtVmlldzogcmVxdWlyZSgnLi9EZWxpdmVyeU9wdGlvbnMnKSxcblxuICAgIE1vZGVsczoge1xuICAgICAgICBEZWxpdmVyeVJvdXRlOiByZXF1aXJlKCcuLi8uLi9tb2RlbHMvRGVsaXZlcnlSb3V0ZScpLFxuICAgIH0sXG5cbiAgICBjb2xsZWN0aW9uOiB7IGNvbXBhcmF0b3I6ICdzdGFydEVwb2NoJyB9LFxuXG4gICAgZ2V0SXRlbVZpZXdPcHRpb25zKCkgeyByZXR1cm4geyBjb250YWluZXI6IHRoaXMudGVtcGxhdGVEYXRhLnNoYXJlcywgc2lnbnVwRGF0YTogdGhpcy5zaWdudXBEYXRhIH0gfSxcbiAgICBcbiAgICBpdGVtTW9kZWxzKCkgeyByZXR1cm4gdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5tb2RlbHMgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIExpc3QucHJvdG90eXBlLnBvc3RSZW5kZXIuY2FsbCh0aGlzKVxuXG4gICAgICAgIHRoaXMuc2lnbnVwRGF0YS5zaGFyZXNcbiAgICAgICAgICAgIC5vbiggJ2FkZCcsIHNoYXJlID0+IHRoaXMuaXRlbXMuYWRkKCBzaGFyZSApIClcbiAgICAgICAgICAgIC5vbiggJ3JlbW92ZScsIHNoYXJlID0+IHRoaXMuaXRlbXMucmVtb3ZlKCBzaGFyZSApIClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9kZWxpdmVyeScpLFxuXG4gICAgdGVtcGxhdGVzOiB7XG4gICAgICAgIHZlcmlmeUFkZHJlc3M6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9zaWdudXAvdmVyaWZ5QWRkcmVzcycpXG4gICAgfSxcblxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICB2YXIgdmFsaWQgPSB0cnVlLFxuICAgICAgICAgICAgZXJyb3JWaWV3cyA9IFsgXSxcbiAgICAgICAgICAgIHRhcmdldEVycm9yVmlldyA9IG51bGwsXG4gICAgICAgICAgICBob21lRGVsaXZlcnlTZWxlY3RlZCA9IGZhbHNlLFxuICAgICAgICAgICAgYWRkcmVzc01vZGVsID0gdGhpcy51c2VyLmdldCgnYWRkcmVzc01vZGVsJyksXG4gICAgICAgICAgICBwb3N0YWxDb2RlID0gICggYWRkcmVzc01vZGVsICYmIGFkZHJlc3NNb2RlbC5wb3N0YWxDb2RlICkgPyBhZGRyZXNzTW9kZWwucG9zdGFsQ29kZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRlZmVycmVkID0gdGhpcy5RLmRlZmVyKClcbiAgICAgICBcbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMuaXRlbVZpZXdzICkuZm9yRWFjaCggaWQgPT4ge1xuICAgICAgICAgICAgaWYoICEgdGhpcy5pdGVtVmlld3NbaWRdLnZhbGlkICkge1xuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgICAgICBlcnJvclZpZXdzLnB1c2goIHRoaXMuaXRlbVZpZXdzW2lkXS50ZW1wbGF0ZURhdGEuY29udGFpbmVyIClcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1WaWV3c1tpZF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lci5hZGRDbGFzcygnaGFzLWVycm9yJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICAgICAgICAgIFxuICAgICAgICBpZiggISB2YWxpZCApIHJldHVybiBmYWxzZSBcblxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5pdGVtVmlld3MgKS5mb3JFYWNoKCBpZCA9PiB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLmdldCggaWQgKS5zZXQoICdzZWxlY3RlZERlbGl2ZXJ5JywgT2JqZWN0LmFzc2lnbigge30sIHRoaXMuaXRlbVZpZXdzW2lkXS5zZWxlY3RlZERlbGl2ZXJ5ICkgKVxuICAgICAgICAgICAgaWYoIHRoaXMuaXRlbVZpZXdzW2lkXS5zZWxlY3RlZERlbGl2ZXJ5LmlzSG9tZSApIGhvbWVEZWxpdmVyeVNlbGVjdGVkID0gdHJ1ZVxuICAgICAgICB9IClcbiAgICAgICAgXG4gICAgICAgIGlmKCBlcnJvclZpZXdzLmxlbmd0aCApIHtcbiAgICAgICAgICAgIHRhcmdldEVycm9yVmlldyA9IGVycm9yVmlld3Muc2xpY2UoLTEpWzBdXG4gICAgICAgICAgICB0aGlzLiQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKCB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiB0YXJnZXRFcnJvclZpZXcub2Zmc2V0KCkudG9wXG4gICAgICAgICAgICB9LCA1MDAgKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoICEgdmFsaWQgKSByZXR1cm4gZmFsc2VcbiAgICAgICAgXG4gICAgICAgIGlmKCBob21lRGVsaXZlcnlTZWxlY3RlZCAmJiB0aGlzLnVzZXIuZ2V0KCdjdXN0b21BZGRyZXNzJykgKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGFsVmlldy5zaG93KCB7XG4gICAgICAgICAgICAgICAgYm9keTogdGhpcy50ZW1wbGF0ZXMudmVyaWZ5QWRkcmVzcyggeyBhZGRyZXNzOiB0aGlzLnVzZXIuZ2V0KCdhZGRyZXNzJyksIHppcENvZGU6IHBvc3RhbENvZGUgfSApLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnVmVyaWZ5IEFkcmVzcycgfSApXG4gICAgICAgICAgICAub24oICdoaWRkZW4nLCAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5pdGVtVmlld3MgKS5mb3JFYWNoKCBpZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZERlbGl2ZXJ5ID0gdGhpcy5pdGVtcy5nZXQoIGlkICkuZ2V0KCAnc2VsZWN0ZWREZWxpdmVyeScgKVxuICAgICAgICAgICAgICAgICAgICBpZiggIXNlbGVjdGVkRGVsaXZlcnkuZGF5b2Z3ZWVrIHx8ICFzZWxlY3RlZERlbGl2ZXJ5LnN0YXJ0dGltZSB8fCAhc2VsZWN0ZWREZWxpdmVyeS5lbmR0aW1lICkgZGVmZXJyZWQucmVqZWN0KClcbiAgICAgICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAub24oICdzdWJtaXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHppcFJvdXRlID0gbmV3ICggdGhpcy5Nb2RlbC5leHRlbmQoIHsgcGFyc2U6IHJlc3BvbnNlID0+IHJlc3BvbnNlWzBdLCB1cmxSb290OiBcIi96aXBjb2Rlcm91dGVcIiB9ICkgKSgpLFxuICAgICAgICAgICAgICAgICAgICBob21lRGVsaXZlcnlSb3V0ZSA9IG5ldyB0aGlzLk1vZGVscy5EZWxpdmVyeVJvdXRlKCksXG4gICAgICAgICAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzXG5cbiAgICAgICAgICAgICAgICB0aGlzLiQoJyN6aXBDb2RlRm9ybUdyb3VwJykucmVtb3ZlQ2xhc3MoJ2hhcy1lcnJvcicpXG4gICAgICAgICAgICAgICAgdGhpcy4kKCcjemlwQ29kZUhlbHBCbG9jaycpLmFkZENsYXNzKCdoaWRlJylcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiggISB0aGlzLiQoJyN2ZXJpZmllZFppcENvZGUnKS52YWwoKS5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCgnI3ppcENvZGVGb3JtR3JvdXAnKS5hZGRDbGFzcygnaGFzLWVycm9yJylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kKCcjemlwQ29kZUhlbHBCbG9jaycpLnJlbW92ZUNsYXNzKCdoaWRlJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5RKCB6aXBSb3V0ZS5mZXRjaCggeyBkYXRhOiB7IHppcGNvZGU6IHRoaXMuJCgnI3ZlcmlmaWVkWmlwQ29kZScpLnZhbCgpIH0gfSApIClcbiAgICAgICAgICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiggT2JqZWN0LmtleXMoIHppcFJvdXRlLmF0dHJpYnV0ZXMgKS5sZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiQoJyN6aXBDb2RlRm9ybUdyb3VwJykuYWRkQ2xhc3MoJ2hhcy1lcnJvcicpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiQoJyN6aXBDb2RlSGVscEJsb2NrJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH0gICAgXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUSggaG9tZURlbGl2ZXJ5Um91dGUuc2V0KCB7IGlkOiB6aXBSb3V0ZS5nZXQoJ3JvdXRlaWQnKSB9ICkuZmV0Y2goKSApXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5pdGVtVmlld3MgKS5mb3JFYWNoKCBpZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGVsaXZlcnkgPSBPYmplY3QuYXNzaWduKCB7fSwgdGhpcy5pdGVtVmlld3NbaWRdLnNlbGVjdGVkRGVsaXZlcnksIGhvbWVEZWxpdmVyeVJvdXRlLnBpY2soIFsgJ2RheW9md2VlaycsICdzdGFydHRpbWUnLCAnZW5kdGltZScgXSApIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5pdGVtVmlld3NbaWRdLnNlbGVjdGVkRGVsaXZlcnkuaXNIb21lICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLmdldCggaWQgKS5zZXQoICdzZWxlY3RlZERlbGl2ZXJ5Jywgc2VsZWN0ZWREZWxpdmVyeSApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbVZpZXdzW2lkXS5zZWxlY3RlZERlbGl2ZXJ5ID0gc2VsZWN0ZWREZWxpdmVyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1WaWV3c1tpZF0uc2hvd0ZlZWRiYWNrKCB0aGlzLml0ZW1WaWV3c1tpZF0uZmVlZGJhY2suaG9tZSggc2VsZWN0ZWREZWxpdmVyeSApIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKCB7fSwgdGhpcy51c2VyLmF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiB0aGlzLiQoJyN2ZXJpZmllZEFkZHJlc3MnKS52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzTW9kZWw6IE9iamVjdC5hc3NpZ24oIHRoaXMudXNlci5nZXQoJ2FkZHJlc3NNb2RlbCcpIHx8IHt9ICwgeyBwb3N0YWxDb2RlOiB0aGlzLiQoJyN2ZXJpZmllZFppcENvZGUnKS52YWwoKSwgdHlwZXM6IFsgXCJzdHJlZXRfYWRkcmVzc1wiIF0gIH0gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21BZGRyZXNzOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlEoIHRoaXMuJC5hamF4KCB7IGRhdGE6IEpTT04uc3RyaW5naWZ5KCB1c2VyQXR0cmlidXRlcyApLCBtZXRob2Q6IFwiUEFUQ0hcIiwgdXJsOiBcIi91c2VyXCIgfSApIClcbiAgICAgICAgICAgICAgICAgICAgfSApLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXNlci5zZXQoIHVzZXJBdHRyaWJ1dGVzLCB7IHNpbGVudDogdHJ1ZSB9IClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kYWxWaWV3LnRlbXBsYXRlRGF0YS5jb250YWluZXIubW9kYWwoJ2hpZGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cnVlKVxuICAgICAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICAuZmFpbCggZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUuc3RhY2sgfHwgZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlKVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIC5kb25lKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBEZWxpdmVyeVxuIiwidmFyIExpc3RJdGVtID0gcmVxdWlyZSgnLi4vdXRpbC9MaXN0SXRlbScpLFxuICAgIERlbGl2ZXJ5T3B0aW9uID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0SXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBEZWxpdmVyeU9wdGlvbi5wcm90b3R5cGUsIExpc3RJdGVtLnByb3RvdHlwZSwge1xuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9kZWxpdmVyeU9wdGlvbicpXG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IERlbGl2ZXJ5T3B0aW9uXG4iLCJ2YXIgTGlzdCA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdCcpLFxuICAgIERlbGl2ZXJ5T3B0aW9ucyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTGlzdC5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBEZWxpdmVyeU9wdGlvbnMucHJvdG90eXBlLCBMaXN0LnByb3RvdHlwZSwge1xuXG4gICAgSXRlbVZpZXc6IHJlcXVpcmUoJy4vRGVsaXZlcnlPcHRpb24nKSxcblxuICAgIE1vZGVsczoge1xuICAgICAgICBEZWxpdmVyeVJvdXRlOiByZXF1aXJlKCcuLi8uLi9tb2RlbHMvRGVsaXZlcnlSb3V0ZScpLFxuICAgIH0sXG5cbiAgICBWaWV3czoge1xuICAgICAgICBEcm9wb2ZmczogcmVxdWlyZSgnLi9Ecm9wb2ZmcycpXG4gICAgfSxcblxuICAgIGZhcm1GZWVkYmFjayggbW9kZWwgKSB7XG4gICAgICAgIHRoaXMuZmFybVBpY2t1cCA9IG5ldyAoIHRoaXMuTW9kZWxzLkRlbGl2ZXJ5Um91dGUuZXh0ZW5kKCB7IHBhcnNlOiByZXNwb25zZSA9PiB0aGlzLk1vZGVscy5EZWxpdmVyeVJvdXRlLnByb3RvdHlwZS5wYXJzZSggcmVzcG9uc2VbMF0gKSB9ICkgKSgpXG4gICAgICAgIHRoaXMuZmFybVBpY2t1cC5mZXRjaCggeyBkYXRhOiB7IGxhYmVsOiAnZmFybScgfSB9ICkuZG9uZSggKCkgPT4ge1xuICAgICAgICAgICAgaWYoIE9iamVjdC5rZXlzKCB0aGlzLmZhcm1QaWNrdXAuYXR0cmlidXRlcyApLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaG93RmVlZGJhY2soIHRoaXMuZmVlZGJhY2subm9GYXJtUm91dGUoKSApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2hvd0ZlZWRiYWNrKCB0aGlzLmZlZWRiYWNrLmZhcm0oIHRoaXMuZmFybVBpY2t1cC5hdHRyaWJ1dGVzICkgKVxuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGVsaXZlcnkgPSBPYmplY3QuYXNzaWduKCB7fSwgeyBkZWxpdmVyeW9wdGlvbmlkOiBtb2RlbC5pZCB9LCB0aGlzLmZhcm1QaWNrdXAucGljayggWyAnZGF5b2Z3ZWVrJywgJ3N0YXJ0dGltZScsICdlbmR0aW1lJyBdICkgKVxuXG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZVxuICAgICAgICB9IClcbiAgICB9LFxuICAgIFxuICAgIGZlZWRiYWNrOiB7XG4gICAgICAgIGhvbWU6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9zaWdudXAvaG9tZURlbGl2ZXJ5RmVlZGJhY2snKSxcbiAgICAgICAgZmFybTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9mYXJtUGlja3VwRmVlZGJhY2snKSxcbiAgICAgICAgZ3JvdXA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJQbGVhc2Ugc2VsZWN0IGEgZHJvcG9mZiBsb2NhdGlvbiBiZWxvdy5cIiB9LFxuICAgICAgICBpbnZhbGlkWmlwOiBmdW5jdGlvbiggemlwY29kZSApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnV0aWwuZm9ybWF0KCAnUG9zdGFsIENvZGUgb2YgJXMgaXMgbm90IGluIG91ciBkZWxpdmVyeSBhcmVhLiAgUGxlYXNlIGNvbnRhY3QgdXMgdG8gZGlzY3VzcyBvcHRpb25zLicsIHppcGNvZGUgKVxuICAgICAgICB9LFxuICAgICAgICBub0Zhcm1Sb3V0ZTogZnVuY3Rpb24oKSB7IHJldHVybiBcIlRoZXJlIGlzIGN1cnJlbnRseSBhbiBlcnJvciB3aXRoIE9uLUZhcm0gUGlja3VwIHNlbGVjdGlvbi5cIiB9XG4gICAgfSxcblxuICAgIGdldEl0ZW1WaWV3T3B0aW9ucygpIHsgcmV0dXJuIHsgY29udGFpbmVyOiB0aGlzLnRlbXBsYXRlRGF0YS5vcHRpb25zIH0gfSxcblxuICAgIGdldFRlbXBsYXRlT3B0aW9ucygpIHsgcmV0dXJuIHRoaXMubW9kZWwuYXR0cmlidXRlcyB9LFxuXG4gICAgZ3JvdXBGZWVkYmFjayggZGVsaXZlcnlPcHRpb24gKSB7XG4gICAgICAgIGlmKCB0aGlzLmRyb3BvZmZWaWV3ICkge1xuICAgICAgICAgICAgaWYoICFPYmplY3Qua2V5cyggdGhpcy5kcm9wb2ZmVmlldy5zZWxlY3RlZEl0ZW1zICkubGVuZ3RoICkgdGhpcy5zaG93RmVlZGJhY2soIHRoaXMuZmVlZGJhY2suZ3JvdXAoKSApXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kcm9wb2ZmVmlldy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLnNob3coKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ncm91cERyb3BvZmZQcm9taXNlLnRoZW4oICgpID0+IHtcblxuICAgICAgICAgICAgaWYoICF0aGlzLnNlbGVjdGVkRGVsaXZlcnkgfHwgKCB0aGlzLnNlbGVjdGVkRGVsaXZlcnkgJiYgIXRoaXMuc2VsZWN0ZWREZWxpdmVyeS5ncm91cGRyb3BvZmZpZCApICkgdGhpcy5zaG93RmVlZGJhY2soIHRoaXMuZmVlZGJhY2suZ3JvdXAoKSApXG5cbiAgICAgICAgICAgIHRoaXMuZHJvcG9mZlZpZXcgPSBuZXcgdGhpcy5WaWV3cy5Ecm9wb2ZmcyggeyBjb250YWluZXI6IHRoaXMudGVtcGxhdGVEYXRhLmRyb3BvZmZzIH0gKVxuICAgICAgICAgICAgICAgIC5vbiggJ2l0ZW1VbnNlbGVjdGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3BvZmZWaWV3Lml0ZW1WaWV3cy5mb3JFYWNoKCB2aWV3ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB2aWV3LnRlbXBsYXRlRGF0YS5jb250YWluZXIuaXMoJzpoaWRkZW4nKSApIHZpZXcudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RmVlZGJhY2soIHRoaXMuZmVlZGJhY2suZ3JvdXAoKSApXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlIFxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIC5vbiggJ2l0ZW1TZWxlY3RlZCcsIG1vZGVsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkSWQgPSBtb2RlbC5pZFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5nZXQoJ2dyb3VwZHJvcG9mZnMnKS5mb3JFYWNoKCBtb2RlbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggbW9kZWwuaWQgIT09IHNlbGVjdGVkSWQgKSB0aGlzLmRyb3BvZmZWaWV3Lml0ZW1WaWV3c1sgbW9kZWwuaWQgXS50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGVsaXZlcnkgPSBPYmplY3QuYXNzaWduKCB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgZGVsaXZlcnlvcHRpb25pZDogZGVsaXZlcnlPcHRpb24uaWQsIGdyb3VwZHJvcG9mZmlkOiBtb2RlbC5pZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwucGljayggWyAnZGF5b2Z3ZWVrJywgJ3N0YXJ0dGltZScsICdlbmR0aW1lJyBdIClcbiAgICAgICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmZlZWRiYWNrLmVtcHR5KClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgLm9uKCAnaXRlbUFkZGVkJywgbW9kZWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWREZWxpdmVyeSA9IHRoaXMubW9kZWwuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JylcbiAgICAgICAgICAgICAgICAgICAgaWYoIHNlbGVjdGVkRGVsaXZlcnkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLmRyb3BvZmZWaWV3Lml0ZW1WaWV3cyApLmxlbmd0aCA9PSB0aGlzLmRyb3BvZmZWaWV3Lml0ZW1zLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wb2ZmVmlldy5pdGVtVmlld3NbIHNlbGVjdGVkRGVsaXZlcnkuZ3JvdXBkcm9wb2ZmaWQgXSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wb2ZmVmlldy5zZWxlY3RJdGVtKCB0aGlzLmRyb3BvZmZWaWV3Lml0ZW1zLmdldCggc2VsZWN0ZWREZWxpdmVyeS5ncm91cGRyb3BvZmZpZCApIClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICB0aGlzLmRyb3BvZmZWaWV3Lml0ZW1zLnJlc2V0KCB0aGlzLm1vZGVsLmdldCgnZ3JvdXBkcm9wb2ZmcycpLm1vZGVscyApXG5cbiAgICAgICAgICAgIGlmKCB0aGlzLm1vZGVsLmdldCgnZ3JvdXBkcm9wb2ZmcycpLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyb3BvZmZWaWV3LnRlbXBsYXRlRGF0YS5jb250YWluZXIudGV4dChcIk5vIGF2YWlsYWJsZSBncm91cCBkcm9wb2ZmIGxvY2F0aW9ucywgcGxlYXNlIHNlbGVjdCBhbm90aGVyIG9wdGlvblwiKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gKVxuICAgICAgICAuZmFpbCggZSA9PiBjb25zb2xlLmxvZyggZS5zdGFjayB8fCBlICkgKVxuICAgICAgICAuZG9uZSgpXG4gICAgfSxcblxuICAgIGhvbWVGZWVkYmFjayggZGVsaXZlcnlPcHRpb24gKSB7XG4gICAgICAgIHZhciBhZGRyZXNzTW9kZWwgPSB0aGlzLnVzZXIuZ2V0KCdhZGRyZXNzTW9kZWwnKSxcbiAgICAgICAgICAgIHVzZXJQb3N0YWxDb2RlID0gKCBhZGRyZXNzTW9kZWwgKSA/IGFkZHJlc3NNb2RlbC5wb3N0YWxDb2RlIDogdW5kZWZpbmVkXG5cbiAgICAgICAgaWYoICF1c2VyUG9zdGFsQ29kZSApIHtcblxuICAgICAgICAgICAgdGhpcy5zaG93RmVlZGJhY2soJzxkaXY+QmVjYXVzZSB3ZSBjb3VsZCBub3QgbG9va3VwIHlvdXIgYWRkcmVzcywgd2UgYXJlIGN1cnJlbnRseSB1bmFibGUgdG8gcHJvdmlkZSBhIGRlbGl2ZXJ5IGRheSBmb3IgdGhlIHdlZWsgb3IgdGltZS4gIFdlIHdpbGwgdGFrZSBjYXJlIG9mIHRoaXMgaW4gdGhlIG5leHQgc3RlcCBieSBoYXZpbmcgeW91IHZlcmlmeSB5b3VyIGFkZHJlc3MuPC9kaXY+JylcblxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERlbGl2ZXJ5ID0geyBkZWxpdmVyeW9wdGlvbmlkOiBkZWxpdmVyeU9wdGlvbi5pZCwgaXNIb21lOiB0cnVlIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnppcFJvdXRlID0gbmV3ICggdGhpcy5Nb2RlbC5leHRlbmQoIHsgcGFyc2U6IHJlc3BvbnNlID0+IHJlc3BvbnNlWzBdLCB1cmxSb290OiBcIi96aXBjb2Rlcm91dGVcIiB9ICkgKSgpXG4gICAgICAgIHRoaXMuaG9tZURlbGl2ZXJ5Um91dGUgPSBuZXcgdGhpcy5Nb2RlbHMuRGVsaXZlcnlSb3V0ZSgpXG5cbiAgICAgICAgdGhpcy56aXBSb3V0ZVxuICAgICAgICAgICAgLmZldGNoKCB7IGRhdGE6IHsgemlwY29kZTogdXNlclBvc3RhbENvZGUgfSB9IClcbiAgICAgICAgICAgIC5mYWlsKCBlID0+IGNvbnNvbGUubG9nKCBlLnN0YWNrIHx8IGUgKSApXG4gICAgICAgICAgICAuZG9uZSggKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKCBPYmplY3Qua2V5cyggdGhpcy56aXBSb3V0ZS5hdHRyaWJ1dGVzICkubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd0ZlZWRiYWNrKCB0aGlzLmZlZWRiYWNrLmludmFsaWRaaXAuY2FsbCggdGhpcywgdXNlclBvc3RhbENvZGUgKSApXG4gICAgICAgICAgICAgICAgfSAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmhvbWVEZWxpdmVyeVJvdXRlLnNldCggeyBpZDogdGhpcy56aXBSb3V0ZS5nZXQoJ3JvdXRlaWQnKSB9IClcbiAgICAgICAgICAgICAgICAuZmV0Y2goKVxuICAgICAgICAgICAgICAgIC5mYWlsKCBlID0+IGNvbnNvbGUubG9nKCBlLnN0YWNrIHx8IGUgKSApXG4gICAgICAgICAgICAgICAgLmRvbmUoICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RmVlZGJhY2soIHRoaXMuZmVlZGJhY2suaG9tZSggdGhpcy5ob21lRGVsaXZlcnlSb3V0ZS5hdHRyaWJ1dGVzICkgKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERlbGl2ZXJ5ID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgZGVsaXZlcnlvcHRpb25pZDogZGVsaXZlcnlPcHRpb24uaWQsIGlzSG9tZTogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob21lRGVsaXZlcnlSb3V0ZS5waWNrKCBbICdkYXlvZndlZWsnLCAnc3RhcnR0aW1lJywgJ2VuZHRpbWUnIF0gKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgc2hhcmUgPSB0aGlzLm1vZGVsXG5cbiAgICAgICAgdGhpcy5zZWxlY3Rpb24gPSAnc2luZ2xlJ1xuXG4gICAgICAgIExpc3QucHJvdG90eXBlLnBvc3RSZW5kZXIuY2FsbCggdGhpcyApXG5cbiAgICAgICAgdGhpcy5vbiggJ2l0ZW1BZGRlZCcsIG1vZGVsID0+IHtcbiAgICAgICAgICAgIHZhciBwcmljZSA9IHBhcnNlRmxvYXQoIG1vZGVsLmdldCgncHJpY2UnKS5yZXBsYWNlKC9cXCR8LC9nLCBcIlwiKSApLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkRGVsaXZlcnkgPSB0aGlzLm1vZGVsLmdldCgnc2VsZWN0ZWREZWxpdmVyeScpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBwcmljZSA9PSAwICkgdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0udGVtcGxhdGVEYXRhLmRlbGl2ZXJ5UHJpY2UudGV4dCggXCJObyBjaGFyZ2VcIiApXG4gICAgICAgICAgICBlbHNlIGlmKCBwcmljZSA8IDAgKSB0aGlzLml0ZW1WaWV3c1sgbW9kZWwuaWQgXS50ZW1wbGF0ZURhdGEuZGVsaXZlcnlQcmljZS50ZXh0KCB0aGlzLnV0aWwuZm9ybWF0KCdTYXZlICVzIHBlciB3ZWVrJywgbW9kZWwuZ2V0KCdwcmljZScpLnJlcGxhY2UoJy0nLCcnKSApIClcblxuICAgICAgICAgICAgaWYoIHNlbGVjdGVkRGVsaXZlcnkgJiYgc2VsZWN0ZWREZWxpdmVyeS5kZWxpdmVyeW9wdGlvbmlkID09IG1vZGVsLmlkICkgdGhpcy5zZWxlY3RJdGVtKCBtb2RlbCApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHNoYXJlLmdldERlbGl2ZXJ5T3B0aW9ucygpXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgZGVsaXZlcnlPcHRpb25zID0gc2hhcmUuZ2V0KCdkZWxpdmVyeW9wdGlvbnMnKVxuXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnJlc2V0KCBkZWxpdmVyeU9wdGlvbnMubW9kZWxzIClcblxuICAgICAgICAgICAgaWYoIGRlbGl2ZXJ5T3B0aW9ucy5sZW5ndGggPT09IDAgKSB0aGlzLnRlbXBsYXRlRGF0YS5vcHRpb25zLnRleHQoJ1RoaXMgc2hhcmUgZG9lcyBub3QgaGF2ZSBkZWxpdmVyeSBvcHRpb25zIGFzc29jaWF0ZWQgd2l0aCBpdC4gIFBsZWFzZSBjb250YWN0IFBhdGNod29yayBhbmQgc2lnbiB1cCBmb3IgdGhpcyBwYXJ0aWN1bGFyIHNoYXJlIGF0IGEgbGF0ZXIgZGF0ZS4nKVxuICAgICAgICB9IClcbiAgICAgICAgLmZhaWwoIGUgPT4gY29uc29sZS5sb2coIGUuc3RhY2sgfHwgZSApIClcbiAgICAgICAgLmRvbmUoKVxuXG4gICAgICAgIHRoaXMub24oICdpdGVtU2VsZWN0ZWQnLCBtb2RlbCA9PiB7XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ2hhcy1lcnJvcicpXG4gICAgICAgICAgICBpZiggdGhpcy5kcm9wb2ZmVmlldyAmJiBtb2RlbC5nZXQoJ25hbWUnKSAhPT0gJ2dyb3VwJyApIHRoaXMuZHJvcG9mZlZpZXcudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5oaWRlKClcbiAgICAgICAgICAgIHRoaXNbIHRoaXMudXRpbC5mb3JtYXQoJyVzRmVlZGJhY2snLCBtb2RlbC5nZXQoJ25hbWUnKSApIF0oIG1vZGVsICkgICAgICAgIFxuICAgICAgICB9IClcbiAgICAgICAgLm9uKCAnaXRlbVVuc2VsZWN0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmZlZWRiYWNrLmVtcHR5KClcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREZWxpdmVyeSA9IG51bGxcbiAgICAgICAgICAgIGlmKCB0aGlzLmRyb3BvZmZWaWV3ICkgdGhpcy5kcm9wb2ZmVmlldy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmhpZGUoKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLmdyb3VwRHJvcG9mZlByb21pc2UgPSBzaGFyZS5nZXRHcm91cERyb3BvZmZzKClcblxuICAgICAgICB0aGlzLnVzZXIub24oICdjaGFuZ2U6YWRkcmVzcycsICgpID0+IHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZElkcyA9IE9iamVjdC5rZXlzKCB0aGlzLnNlbGVjdGVkSXRlbXMgKVxuXG4gICAgICAgICAgICBpZiggc2VsZWN0ZWRJZHMubGVuZ3RoID09PSAwICkgcmV0dXJuXG5cbiAgICAgICAgICAgIHRoaXMudW5zZWxlY3RJdGVtKCB0aGlzLml0ZW1zLmdldCggc2VsZWN0ZWRJZHNbMF0gKSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHNob3dGZWVkYmFjayggaHRtbCApIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuZmVlZGJhY2suaHRtbCggaHRtbCApLnNob3coKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9kZWxpdmVyeU9wdGlvbnMnKVxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gRGVsaXZlcnlPcHRpb25zXG4iLCJ2YXIgSXRlbSA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdEl0ZW0nKSxcbiAgICBEcm9wb2ZmID0gZnVuY3Rpb24oKSB7IHJldHVybiBJdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIERyb3BvZmYucHJvdG90eXBlLCBJdGVtLnByb3RvdHlwZSwge1xuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9kcm9wb2ZmJylcblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gRHJvcG9mZlxuIiwidmFyIExpc3QgPSByZXF1aXJlKCcuLi91dGlsL0xpc3QnKSxcbiAgICBEcm9wb2ZmcyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTGlzdC5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBEcm9wb2Zmcy5wcm90b3R5cGUsIExpc3QucHJvdG90eXBlLCB7XG5cbiAgICBJdGVtVmlldzogcmVxdWlyZSgnLi9Ecm9wb2ZmJyksXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHNlbGVjdGlvbjogJ3NpbmdsZScsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9kcm9wb2ZmcycpLFxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBEcm9wb2Zmc1xuIiwidmFyIFZpZXcgPSByZXF1aXJlKCcuLi9NeVZpZXcnKSxcbiAgICBGb3JtID0gcmVxdWlyZSgnLi4vdXRpbC9Gb3JtJykucHJvdG90eXBlLFxuICAgIE1lbWJlckluZm8gPSBmdW5jdGlvbigpIHsgcmV0dXJuIFZpZXcuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuT2JqZWN0LmFzc2lnbiggTWVtYmVySW5mby5wcm90b3R5cGUsIFZpZXcucHJvdG90eXBlLCB7XG4gICAgICAgICAgICAgICAgXG4gICAgTWVtYmVyRm9vZE9taXNzaW9uOiByZXF1aXJlKCcuLi8uLi9tb2RlbHMvTWVtYmVyRm9vZE9taXNzaW9uJyksXG5cbiAgICBhZGRyZXNzU2VsZWN0ZWQoKSB7XG4gICAgICAgIHZhciBwbGFjZSA9IHRoaXMuYWRkcmVzc0F1dG9Db21wbGV0ZS5nZXRQbGFjZSgpXG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuYWRkcmVzcy52YWwoIHBsYWNlLmZvcm1hdHRlZF9hZGRyZXNzICkgXG4gICAgICAgIHRoaXMuc2hvd1ZhbGlkKCB0aGlzLnRlbXBsYXRlRGF0YS5hZGRyZXNzIClcblxuICAgICAgICB0aGlzLnVzZXIuc2V0KCB7XG4gICAgICAgICAgICBhZGRyZXNzOiBwbGFjZS5mb3JtYXR0ZWRfYWRkcmVzcyxcbiAgICAgICAgICAgIGFkZHJlc3NNb2RlbDoge1xuICAgICAgICAgICAgICAgIHBvc3RhbENvZGU6IHRoaXMuXyggcGxhY2UuYWRkcmVzc19jb21wb25lbnRzICkuZmluZCggY29tcG9uZW50ID0+IGNvbXBvbmVudC50eXBlc1swXSA9PT0gXCJwb3N0YWxfY29kZVwiICkuc2hvcnRfbmFtZSxcbiAgICAgICAgICAgICAgICB0eXBlczogcGxhY2UudHlwZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGVtYWlsUmVnZXg6IEZvcm0uZW1haWxSZWdleCxcblxuICAgIGV2ZW50czogeyBcbiAgICAgICAgJ2luZm9CdG4nOiB7IG1ldGhvZDogJ3Nob3dJbmZvTW9kYWwnIH1cbiAgICB9LFxuXG4gICAgZmllbGRzOiBbIHtcbiAgICAgICAgbmFtZTogJ25hbWUnLFxuICAgICAgICBsYWJlbDogJ05hbWUnLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIGVycm9yOiBcIk5hbWUgaXMgYSByZXF1aXJlZCBmaWVsZC5cIixcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKCB2YWwgKSB7IHJldHVybiB0aGlzLiQudHJpbSh2YWwpICE9PSAnJyB9XG4gICAgfSwge1xuICAgICAgICBuYW1lOiAnZW1haWwnLFxuICAgICAgICBsYWJlbDogJ0VtYWlsJyxcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICBlcnJvcjogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLlwiLFxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24oIHZhbCApIHsgcmV0dXJuIHRoaXMuZW1haWxSZWdleC50ZXN0KHZhbCkgfVxuICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ3Bob25lbnVtYmVyJyxcbiAgICAgICAgbGFiZWw6ICdQaG9uZSBOdW1iZXInLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIGVycm9yOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIHBob25lIG51bWJlci5cIixcbiAgICAgICAgdmFsaWRhdGU6IHZhbCA9PiB2YWwubGVuZ3RoID4gOCxcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdhZGRyZXNzJyxcbiAgICAgICAgbGFiZWw6ICdBZGRyZXNzIDEnLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIGVycm9yOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGFkZHJlc3MuXCIsXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHRoaXMudmFsaWRhdGVBZGRyZXNzKCB2YWwgKSB9XG4gICAgfSwge1xuICAgICAgICBuYW1lOiAnZXh0cmFhZGRyZXNzJyxcbiAgICAgICAgbGFiZWw6ICdBZGRyZXNzIDInLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHZhbGlkYXRlOiAoKSA9PiB0cnVlXG4gICAgfSwge1xuICAgICAgICBuYW1lOiAncGFzc3dvcmQnLFxuICAgICAgICBsYWJlbDogJ1Bhc3N3b3JkJyxcbiAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgZXJyb3I6IFwiUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCBzaXggY2hhcmFjdGVycy5cIixcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gdGhpcy51c2VyLmlzQWRtaW4oKSB8fCB2YWwubGVuZ3RoID4gNSB9XG4gICAgfSwge1xuICAgICAgICBuYW1lOiAncmVwZWF0cGFzc3dvcmQnLFxuICAgICAgICBsYWJlbDogJ1JlcGVhdCBQYXNzd29yZCcsXG4gICAgICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgICAgIGVycm9yOiBcIlBhc3N3b3JkcyBtdXN0IG1hdGNoLlwiLFxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24oIHZhbCApIHsgcmV0dXJuIHRoaXMudXNlci5pc0FkbWluKCkgfHwgKCB2YWwgPT09IHRoaXMudGVtcGxhdGVEYXRhLnBhc3N3b3JkLnZhbCgpICkgfVxuICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ29taXNzaW9uJyxcbiAgICAgICAgbGFiZWw6ICdPcHQtb3V0IFZlZ2V0YWJsZScsXG4gICAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgICBpbmZvOiB0cnVlLFxuICAgICAgICB2YWxpZGF0ZTogKCkgPT4gdHJ1ZVxuICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ2hlYXJkJyxcbiAgICAgICAgbGFiZWw6ICdIb3cgeW91IGhlYXJkIGFib3V0IHVzJyxcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB2YWxpZGF0ZTogKCkgPT4gdHJ1ZVxuICAgIH0gXSxcblxuICAgIGdlb2xvY2F0ZSgpIHtcbiAgICAgICAgaWYoIG5hdmlnYXRvci5nZW9sb2NhdGlvbiApIHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oIHBvc2l0aW9uID0+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuYWRkcmVzc0F1dG9Db21wbGV0ZS5zZXRCb3VuZHMoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBnb29nbGUubWFwcy5DaXJjbGUoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogcG9zaXRpb24uY29vcmRzLmFjY3VyYWN5IH0gKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0Qm91bmRzKCkgKVxuXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zKCkgeyByZXR1cm4geyBmaWVsZHM6IHRoaXMuZmllbGRzIH0gfSxcblxuICAgIGluaXRBdXRvY29tcGxldGUoKSB7XG4gICAgICAgIHRoaXMuYWRkcmVzc0F1dG9Db21wbGV0ZSA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuQXV0b2NvbXBsZXRlKCB0aGlzLnRlbXBsYXRlRGF0YS5hZGRyZXNzLmdldCgwKSwgeyB0eXBlczogWydhZGRyZXNzJ10gfSApXG5cbiAgICAgICAgdGhpcy5hZGRyZXNzQXV0b0NvbXBsZXRlLmFkZExpc3RlbmVyKCAncGxhY2VfY2hhbmdlZCcsIHRoaXMuYWRkcmVzc1NlbGVjdGVkLmJpbmQodGhpcykgKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgaWYoIHRoaXMudXNlci5pc0FkbWluKCkgKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdzID0geyBtZW1iZXJUeXBlYWhlYWQ6IHRoaXMuZmFjdG9yeS5jcmVhdGUoICdtZW1iZXJUeXBlYWhlYWQnLCBPYmplY3QuYXNzaWduKCB7IGluc2VydGlvbjogeyBlbDogdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmdldCgwKS5maXJzdENoaWxkLCBtZXRob2Q6ICdpbnNlcnRCZWZvcmUnIH0gfSApICkgfVxuICAgICAgICAgICAgdGhpcy52aWV3cy5tZW1iZXJUeXBlYWhlYWQuZm9jdXMoKVxuXG4gICAgICAgICAgICB0aGlzLnZpZXdzLm1lbWJlclR5cGVhaGVhZC5vbiggJ2N1c3RvbWVyU2VsZWN0ZWQnLCBjdXN0b21lciA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEN1c3RvbWVyID0gY3VzdG9tZXJcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5uYW1lLnZhbCggY3VzdG9tZXIucGVyc29uLmRhdGEubmFtZSApXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuZW1haWwudmFsKFxuICAgICAgICAgICAgICAgICAgICBjdXN0b21lci5wZXJzb24uZGF0YS5zZWNvbmRhcnlFbWFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbIGN1c3RvbWVyLnBlcnNvbi5kYXRhLmVtYWlsLCBjdXN0b21lci5wZXJzb24uZGF0YS5zZWNvbmRhcnlFbWFpbCBdLmpvaW4oJywgJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY3VzdG9tZXIucGVyc29uLmRhdGEuZW1haWxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEucGhvbmVudW1iZXIudmFsKCBjdXN0b21lci5tZW1iZXIuZGF0YS5waG9uZW51bWJlciApXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuYWRkcmVzcy52YWwoIGN1c3RvbWVyLm1lbWJlci5kYXRhLmFkZHJlc3MgKVxuICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmV4dHJhYWRkcmVzcy52YWwoIGN1c3RvbWVyLm1lbWJlci5kYXRhLmV4dHJhYWRkcmVzcyApXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuaGVhcmQudmFsKCBjdXN0b21lci5tZW1iZXIuZGF0YS5oZWFyZCApXG5cbiAgICAgICAgICAgICAgICB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5nZXQoIHsgcXVlcnk6IHsgbWVtYmVyaWQ6IGN1c3RvbWVyLm1lbWJlci5kYXRhLmlkIH0gfSApXG4gICAgICAgICAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmRhdGEubGVuZ3RoICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0dW0gPSB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5kYXRhWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5Gb29kT21pc3Npb24uRm9vZHMuZGF0YS5maW5kSW5kZXgoIGZvb2QgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBmb29kLnByb2R1Y2VpZCA9PSBkYXR1bS5wcm9kdWNlaWQgJiYgZm9vZC5wcm9kdWNlaWQgIT09IG51bGwgKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIGZvb2QucHJvZHVjZWZhbWlseWlkID09IGRhdHVtLnByb2R1Y2VmYW1pbHlpZCAmJiBkYXR1bS5wcm9kdWNlaWQgPT09IG51bGwgKSApXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpbmRleCAhPT0gLTEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9vZERhdHVtID0gdGhpcy5Gb29kT21pc3Npb24uRm9vZHMuZGF0YVsgaW5kZXggXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdHVtLm5hbWUgPSBmb29kRGF0dW0ubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuRm9vZE9taXNzaW9uLm1zLnNldFNlbGVjdGlvbiggWyBPYmplY3QuYXNzaWduKCB7fSwgZm9vZERhdHVtLCB7IGlkOiBpbmRleCB9ICkgXSApXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkZvb2RPbWlzc2lvbi5jbGVhcigpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICAuY2F0Y2goIGUgPT4geyB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnZXJyb3InLCAnRXJyb3IgcmV0cmlldmluZyBGb29kIE9taXNzaW9uIERhdGEnICk7IHRoaXMuRXJyb3IgfSApXG4gICAgICAgICAgICB9ICk7XG4gICAgICAgIH1cblxuICAgICAgICAoIHdpbmRvdy5nb29nbGUgJiYgd2luZG93Lmdvb2dsZS5tYXBzICkgXG4gICAgICAgICAgICA/IHRoaXMuaW5pdEF1dG9jb21wbGV0ZSgpXG4gICAgICAgICAgICA6IHdpbmRvdy5pbml0R01hcCA9ICgpID0+IHRoaXMuaW5pdEF1dG9jb21wbGV0ZSgpXG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuYWRkcmVzcy5hdHRyKCAncGxhY2Vob2xkZXInLCAnJyApXG4gICAgICAgIFxuICAgICAgICB0aGlzLkZvb2RPbWlzc2lvbiA9IHRoaXMuZmFjdG9yeS5jcmVhdGUoICdmb29kT21pc3Npb24nLCB7IGluc2VydGlvbjogeyBlbDogdGhpcy50ZW1wbGF0ZURhdGEub21pc3Npb24uZ2V0KDApLCBtZXRob2Q6ICdhZnRlcicgfSB9IClcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5vbWlzc2lvbi5yZW1vdmUoKVxuXG4gICAgICAgIHRoaXMuRm9vZE9taXNzaW9uLmluaXRpYWxpemVGb29kT21pc3Npb24oKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEub21pc3Npb24gPSB0aGlzLkZvb2RPbWlzc2lvbi5nZXRNYWdpY1N1Z2dlc3QoKVxuXG4gICAgICAgICAgICB0aGlzLmZpZWxkcy5mb3JFYWNoKCBmaWVsZCA9PiB7XG4gICAgICAgICAgICAgICAgaWYoIHRoaXMudXNlci5oYXMoIGZpZWxkLm5hbWUgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGFbIGZpZWxkLm5hbWUgXS52YWwoIHRoaXMudXNlci5nZXQoIGZpZWxkLm5hbWUgKSApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuICAgICAgICBcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmZpbmQoJ2Zvcm0gaW5wdXQnKVxuICAgICAgICAub24oICdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJGVsID0gc2VsZi4kKHRoaXMpLFxuICAgICAgICAgICAgICAgIGZpZWxkID0gc2VsZi5fKCBzZWxmLmZpZWxkcyApLmZpbmQoIGZ1bmN0aW9uKCBmaWVsZCApIHsgcmV0dXJuIGZpZWxkLm5hbWUgPT09ICRlbC5hdHRyKCdpZCcpIH0gKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiggZmllbGQubmFtZSA9PT0gJ2FkZHJlc3MnICkge1xuICAgICAgICAgICAgICAgIGlmKCBzZWxmLnRlbXBsYXRlRGF0YS5hZGRyZXNzLnZhbCgpID09PSAnJyApIHNlbGYuc2hvd0Vycm9yKCAkZWwsIGZpZWxkLmVycm9yIClcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgc2VsZi5RLmZjYWxsKCBmaWVsZC52YWxpZGF0ZS5iaW5kKCBzZWxmLCAkZWwudmFsKCkgKSApLnRoZW4oIHZhbGlkID0+IHtcbiAgICAgICAgICAgICAgICBpZiggdmFsaWQgKSB7IHNlbGYuc2hvd1ZhbGlkKCAkZWwgKSB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IHNlbGYuc2hvd0Vycm9yKCAkZWwsIGZpZWxkLmVycm9yICkgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuICAgICAgICAub24oICdmb2N1cycsIGZ1bmN0aW9uKCkgeyBzZWxmLnJlbW92ZUVycm9yKCBzZWxmLiQodGhpcykgKSB9IClcblxuICAgIH0sXG5cbiAgICByZW1vdmVFcnJvciggJGVsICkge1xuICAgICAgICAkZWwucGFyZW50KCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2hhcy1lcnJvcicpXG4gICAgICAgICRlbC5uZXh0KCkucmVtb3ZlQ2xhc3MoJ2hpZGUnKS5yZW1vdmVDbGFzcygnZ2x5cGhpY29uLXJlbW92ZScpXG4gICAgICAgICRlbC5zaWJsaW5ncygnLmhlbHAtYmxvY2snKS5yZW1vdmUoKVxuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHNob3dFcnJvciggJGVsLCBlcnJvciApIHtcbiAgICAgICAgdmFyIGZvcm1Hcm91cCA9ICRlbC5wYXJlbnQoKS5wYXJlbnQoKVxuXG4gICAgICAgIGlmKCBmb3JtR3JvdXAuaGFzQ2xhc3MoICdoYXMtZXJyb3InICkgKSByZXR1cm5cblxuICAgICAgICBmb3JtR3JvdXAucmVtb3ZlQ2xhc3MoJ2hhcy1zdWNjZXNzJykuYWRkQ2xhc3MoJ2hhcy1mZWVkYmFjayBoYXMtZXJyb3InKVxuICAgICAgICAkZWwubmV4dCgpLnJlbW92ZUNsYXNzKCdoaWRlJykucmVtb3ZlQ2xhc3MoJ2dseXBoaWNvbi1vaycpLmFkZENsYXNzKCdnbHlwaGljb24tcmVtb3ZlJylcbiAgICAgICAgICAgLmFmdGVyKCBGb3JtLnRlbXBsYXRlcy5maWVsZEVycm9yKCB7IGVycm9yOiBlcnJvciB9ICkgKVxuICAgIH0sXG5cbiAgICBzaG93SW5mb01vZGFsKCkge1xuICAgICAgICB0aGlzLlhociggeyBtZXRob2Q6ICdnZXQnLCByZXNvdXJjZTogJ2NzYWN1c3RvbWl6YXRpb24nIH0gKVxuICAgICAgICAudGhlbiggZGF0YSA9PlxuICAgICAgICAgICAgdGhpcy5tb2RhbFZpZXcuc2hvdygge1xuICAgICAgICAgICAgICAgIGJvZHk6IHRoaXMudGVtcGxhdGVzLmNzYUN1c3RvbWl6YXRpb24oIGRhdGFbMF0gKSxcbiAgICAgICAgICAgICAgICBoaWRlRm9vdGVyOiB0cnVlXG4gICAgICAgICAgICB9IClcbiAgICAgICAgKVxuICAgICAgICAuY2F0Y2goIGUgPT4gbmV3IHRoaXMuRXJyb3IoZSkgKVxuICAgIH0sXG5cbiAgICBzaG93VmFsaWQoICRlbCApIHtcbiAgICAgICAgJGVsLnBhcmVudCgpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdoYXMtZXJyb3InKS5hZGRDbGFzcygnaGFzLWZlZWRiYWNrIGhhcy1zdWNjZXNzJylcbiAgICAgICAgJGVsLm5leHQoKS5yZW1vdmVDbGFzcygnaGlkZScpLnJlbW92ZUNsYXNzKCdnbHlwaGljb24tcmVtb3ZlJykuYWRkQ2xhc3MoJ2dseXBoaWNvbi1vaycpXG4gICAgICAgICRlbC5zaWJsaW5ncygnLmhlbHAtYmxvY2snKS5yZW1vdmUoKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL01lbWJlckluZm8nKSxcblxuICAgIHRlbXBsYXRlczoge1xuICAgICAgICBjc2FDdXN0b21pemF0aW9uOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvY3NhQ3VzdG9taXphdGlvbicpXG4gICAgfSxcblxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICB2YXIgdmFsaWQgPSB0cnVlXG4gICAgICAgIFxuICAgICAgICBpZiggdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmZpbmQoJ2hhcy1lcnJvcicpLmxlbmd0aCApIHJldHVybiBmYWxzZVxuXG4gICAgICAgIHJldHVybiB0aGlzLlEuYWxsKCB0aGlzLmZpZWxkcy5tYXAoIGZpZWxkID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlEud2hlbiggZmllbGQudmFsaWRhdGUuY2FsbCh0aGlzLCB0aGlzLnRlbXBsYXRlRGF0YVsgZmllbGQubmFtZSBdLnZhbCgpICkgKVxuICAgICAgICAgICAgLnRoZW4oIHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgaWYoIHJlc3VsdCA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RXJyb3IoIHRoaXMudGVtcGxhdGVEYXRhWyBmaWVsZC5uYW1lIF0sIGZpZWxkLmVycm9yIClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVzZXIuc2V0KCBmaWVsZC5uYW1lLCB0aGlzLnRlbXBsYXRlRGF0YVsgZmllbGQubmFtZSBdLnZhbCgpIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApIClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIGlmKCB2YWxpZCAmJiAoIXRoaXMudXNlci5pc0FkbWluKCkpICkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlEoIHRoaXMuJC5hamF4KCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KCB0aGlzLnVzZXIuYXR0cmlidXRlcyApLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi91c2VyXCIgfSApIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB2YWxpZCApXG4gICAgICAgIC5mYWlsKCBlID0+IHsgY29uc29sZS5sb2coIGUuc3RhY2sgfHwgZSApOyByZXR1cm4gZmFsc2UgfSApXG4gICAgfSxcbiAgICBcbiAgICB2YWxpZGF0ZUFkZHJlc3MoIGFkZHJlc3MgKSB7XG4gICAgICAgIHZhciBhZGRyZXNzTW9kZWwsIGN1c3RvbUFkZHJlc3NcblxuICAgICAgICBpZiggdGhpcy4kLnRyaW0oIGFkZHJlc3MgKS5sZW5ndGggPT09IDAgKSByZXR1cm4gZmFsc2VcblxuICAgICAgICBhZGRyZXNzTW9kZWwgPSB0aGlzLnVzZXIuZ2V0KCdhZGRyZXNzTW9kZWwnKVxuICAgICAgICBjdXN0b21BZGRyZXNzID0gKCBhZGRyZXNzICE9PSB0aGlzLnVzZXIuZ2V0KCdhZGRyZXNzJykgfHwgIWFkZHJlc3NNb2RlbCB8fCAoICEgdGhpcy5fKCBhZGRyZXNzTW9kZWwudHlwZXMgKS5jb250YWlucyggXCJzdHJlZXRfYWRkcmVzc1wiICkgKSApID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIFxuICAgICAgICB0aGlzLnVzZXIuc2V0KCB7IGN1c3RvbUFkZHJlc3M6IGN1c3RvbUFkZHJlc3MgfSApXG5cbiAgICAgICAgaWYoIGN1c3RvbUFkZHJlc3MgKSB0aGlzLnVzZXIuc2V0KCB7IGFkZHJlc3NNb2RlbDogeyB9IH0gKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1lbWJlckluZm9cbiIsInZhciBMaXN0SXRlbSA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdEl0ZW0nKSxcbiAgICBQYXltZW50T3B0aW9uID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0SXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBQYXltZW50T3B0aW9uLnByb3RvdHlwZSwgTGlzdEl0ZW0ucHJvdG90eXBlLCB7XG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL3BheW1lbnRPcHRpb24nKVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBQYXltZW50T3B0aW9uXG4iLCJ2YXIgTGlzdCA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdCcpLFxuICAgIFBheW1lbnRPcHRpb25zID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIFBheW1lbnRPcHRpb25zLnByb3RvdHlwZSwgTGlzdC5wcm90b3R5cGUsIHtcblxuICAgIEl0ZW1WaWV3OiByZXF1aXJlKCcuL1BheW1lbnRPcHRpb24nKSxcblxuICAgIGl0ZW1Nb2RlbHM6IFtcbiAgICAgICAgeyBpZDogMSwgbmFtZTogJ2Nhc2gnLCBsYWJlbDogJ0Nhc2ggb3IgQ2hlY2snLCBub3RlOiAnTWFpbCBwYXltZW50IHRvIFBhdGNod29yaycgfSxcbiAgICAgICAgeyBpZDogMiwgbmFtZTogJ2NhcmQnLCBsYWJlbDogJ0NyZWRpdCBDYXJkJywgbm90ZTogJ1BheSBvbmxpbmUuJyB9XG4gICAgXSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2VsZWN0aW9uOiAnc2luZ2xlJyxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL3BheW1lbnRPcHRpb25zJylcbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBheW1lbnRPcHRpb25zXG4iLCJ2YXIgTGlzdEl0ZW0gPSByZXF1aXJlKCcuLi91dGlsL0xpc3RJdGVtJyksXG4gICAgUGlja3VwRGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTGlzdEl0ZW0uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuT2JqZWN0LmFzc2lnbiggUGlja3VwRGF0ZS5wcm90b3R5cGUsIExpc3RJdGVtLnByb3RvdHlwZSwge1xuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9waWNrdXBEYXRlJylcblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gUGlja3VwRGF0ZVxuIiwidmFyIExpc3QgPSByZXF1aXJlKCcuLi91dGlsL0xpc3QnKSxcbiAgICBQaWNrdXBEYXRlcyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTGlzdC5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBQaWNrdXBEYXRlcy5wcm90b3R5cGUsIExpc3QucHJvdG90eXBlLCB7XG5cbiAgICBJdGVtVmlldzogcmVxdWlyZSgnLi9QaWNrdXBEYXRlJyksXG5cbiAgICBnZXRJdGVtVmlld09wdGlvbnMoKSB7IHJldHVybiB7IGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEuZGF0ZXMgfSB9LFxuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zKCkgeyByZXR1cm4gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzIH0sXG5cbiAgICBpdGVtTW9kZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5nZXREZWxpdmVyeURhdGVzKCkubW9kZWxzXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMudmFsaWQgPSB0cnVlXG5cbiAgICAgICAgdGhpcy5vbiggJ2l0ZW1TZWxlY3RlZCcsIG1vZGVsID0+IHtcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnaGFzLWVycm9yJylcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2hhcmUoKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLm9uKCAnaXRlbVVuc2VsZWN0ZWQnLCBtb2RlbCA9PiB0aGlzLnVwZGF0ZVNoYXJlKCkgKVxuXG4gICAgICAgIHRoaXMub24oICdpdGVtQWRkZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiggdGhpcy5tb2RlbC5oYXMoJ3NraXBEYXlzJykgJiZcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmdldCgnc2tpcERheXMnKS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5pdGVtVmlld3MgKS5sZW5ndGggPT0gdGhpcy5pdGVtcy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCggeyBza2lwRGF5czpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5nZXQoJ3NraXBEYXlzJykuZmlsdGVyKCBza2lwRGF5SWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHRoaXMuaXRlbXMuZ2V0KCBza2lwRGF5SWQgKSApIHsgdGhpcy51bnNlbGVjdEl0ZW0oIHRoaXMuaXRlbXMuZ2V0KCBza2lwRGF5SWQgKSApOyByZXR1cm4gdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcbiAgICAgICAgXG4gICAgICAgIHRoaXMubW9kZWwub24oICdjaGFuZ2U6c2VsZWN0ZWREZWxpdmVyeScsICgpID0+IHRoaXMuaXRlbXMucmVzZXQoIHRoaXMuaXRlbU1vZGVscygpICkgKVxuXG5cbiAgICAgICAgTGlzdC5wcm90b3R5cGUucG9zdFJlbmRlci5jYWxsKCB0aGlzIClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICBzZWxlY3RlZDogdHJ1ZSxcblxuICAgIHNlbGVjdGlvbjogJ211bHRpU2ltcGxlJyxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL3BpY2t1cERhdGVzJyksXG5cbiAgICB1cGRhdGVTaGFyZSgpIHtcbiAgICAgICAgdGhpcy52YWxpZCA9ICggT2JqZWN0LmtleXMoIHRoaXMuc2VsZWN0ZWRJdGVtcyApLmxlbmd0aCA9PT0gMCApID8gZmFsc2UgOiB0cnVlXG4gICAgfVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBQaWNrdXBEYXRlc1xuIiwidmFyIExpc3RJdGVtID0gcmVxdWlyZSgnLi4vdXRpbC9MaXN0SXRlbScpLFxuICAgIFNoYXJlID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0SXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBTaGFyZS5wcm90b3R5cGUsIExpc3RJdGVtLnByb3RvdHlwZSwge1xuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgTGlzdEl0ZW0ucHJvdG90eXBlLnBvc3RSZW5kZXIuY2FsbCh0aGlzKVxuXG4gICAgICAgIHRoaXMuZmFjdG9yeS5jcmVhdGUoICdzaGFyZUJveCcsIHsgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLnRlbXBsYXRlRGF0YS5zaGFyZUJveC5nZXQoMCkgfSwgbW9kZWw6IHRoaXMubW9kZWwgfSApXG5cbiAgICAgICAgaWYoICF0aGlzLnVzZXIuaXNBZG1pbigpICYmICggL3NwcmluZy9pLnRlc3QoIHRoaXMubW9kZWwuZ2V0KCduYW1lJykgKSB8fCAvc3ByaW5nL2kudGVzdCggdGhpcy5tb2RlbC5nZXQoJ2xhYmVsJykgKSApICkge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmFkZENsYXNzKCdpbmFjdGl2ZScpLm9mZignY2xpY2snKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9zaGFyZScpXG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYXJlXG4iLCJ2YXIgVmlldyA9IHJlcXVpcmUoJy4uL015VmlldycpLFxuICAgIFNoYXJlT3B0aW9uID0gZnVuY3Rpb24oKSB7IHJldHVybiBWaWV3LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIFNoYXJlT3B0aW9uLnByb3RvdHlwZSwgVmlldy5wcm90b3R5cGUsIHtcblxuICAgIGV2ZW50czoge1xuICAgICAgICAnb3B0aW9uSWNvbic6IHsgbWV0aG9kOiAnc2hvd09wdGlvbkluZm8nIH1cbiAgICB9LFxuICBcbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKCB7IH0sIHRoaXMubW9kZWwuYXR0cmlidXRlcywgeyBvcHRpb25zOiB0aGlzLm1vZGVsLmdldCgnb3B0aW9ucycpLm1hcCggbW9kZWwgPT4gbW9kZWwuYXR0cmlidXRlcyApIH0gKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRvdGFsKClcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5pbnB1dC5vbiggJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG90YWwoKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCAnY2hhbmdlZCcsIHRoaXMudGVtcGxhdGVEYXRhLmlucHV0LnZhbCgpIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2hvd09wdGlvbkluZm8oKSB7XG4gICAgICAgIHRoaXMubW9kYWxWaWV3LnNob3coIHtcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLm1vZGVsLmdldCgnbmFtZScpLFxuICAgICAgICAgICAgYm9keTogdGhpcy5tb2RlbC5nZXQoJ2Rlc2NyaXB0aW9uJyksXG4gICAgICAgICAgICBoaWRlRm9vdGVyOiB0cnVlXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9zaGFyZU9wdGlvbicpLFxuXG4gICAgdXBkYXRlVG90YWwoKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnRvdGFsLnRleHQoXG4gICAgICAgICAgICB0aGlzLnV0aWwuZm9ybWF0KCAnJCVzIHBlciB3ZWVrJyxcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KCB0aGlzLm1vZGVsLmdldCgnb3B0aW9ucycpLmF0KCB0aGlzLnRlbXBsYXRlRGF0YS5pbnB1dC5nZXQoMCkuc2VsZWN0ZWRJbmRleCApLmdldCgncHJpY2UnKS5yZXBsYWNlKC9cXCR8LC9nLCBcIlwiKSApLnRvRml4ZWQoMikgKSApXG4gICAgfVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBTaGFyZU9wdGlvblxuIiwidmFyIExpc3QgPSByZXF1aXJlKCcuLi91dGlsL0xpc3QnKSxcbiAgICBTaGFyZU9wdGlvbnMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIExpc3QuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuT2JqZWN0LmFzc2lnbiggU2hhcmVPcHRpb25zLnByb3RvdHlwZSwgTGlzdC5wcm90b3R5cGUsIHtcblxuICAgIEl0ZW1WaWV3OiByZXF1aXJlKCcuL1NpbmdsZVNoYXJlT3B0aW9ucycpLFxuXG4gICAgY29sbGVjdGlvbjogeyBjb21wYXJhdG9yOiAnc3RhcnRFcG9jaCcgfSxcblxuICAgIGV2ZW50czoge1xuICAgIH0sXG5cbiAgICBnZXRJdGVtVmlld09wdGlvbnMoKSB7IHJldHVybiB7IGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEuc2hhcmVzLCBzaWdudXBEYXRhOiB0aGlzLnNpZ251cERhdGEsIGZhY3Rvcnk6IHRoaXMuZmFjdG9yeSB9IH0sXG4gICAgXG4gICAgaXRlbU1vZGVscygpIHsgcmV0dXJuIHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMubW9kZWxzIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICBMaXN0LnByb3RvdHlwZS5wb3N0UmVuZGVyLmNhbGwodGhpcylcblxuICAgICAgICB0aGlzLnNpZ251cERhdGEuc2hhcmVzLm9uKCAnYWRkJywgc2hhcmUgPT4gdGhpcy5pdGVtcy5hZGQoIHNoYXJlICkgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCAncmVtb3ZlJywgc2hhcmUgPT4gdGhpcy5pdGVtcy5yZW1vdmUoIHNoYXJlICkgKVxuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHNlbGVjdGlvbjogdHJ1ZSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL3NoYXJlT3B0aW9ucycpLFxuXG4gICAgdmFsaWRhdGUoKSB7XG5cbiAgICAgICAgdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5mb3JFYWNoKCBzaGFyZSA9PiB7XG4gICAgICAgICAgICBzaGFyZS5zZXQoICdzZWxlY3RlZE9wdGlvbnMnLCBzaGFyZS5nZXQoICdzaGFyZW9wdGlvbnMnICkubWFwKCBzaGFyZU9wdGlvbiA9PiAoIHtcbiAgICAgICAgICAgICAgICBzaGFyZW9wdGlvbmlkOiBzaGFyZU9wdGlvbi5pZCxcbiAgICAgICAgICAgICAgICBzaGFyZW9wdGlvbm9wdGlvbmlkOiB0aGlzLml0ZW1WaWV3c1sgc2hhcmUuaWQgXS5pdGVtVmlld3NbIHNoYXJlT3B0aW9uLmlkIF0udGVtcGxhdGVEYXRhLmlucHV0LnZhbCgpXG4gICAgICAgICAgICB9ICkgKSApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBTaGFyZU9wdGlvbnNcbiIsInZhciBMaXN0ID0gcmVxdWlyZSgnLi4vdXRpbC9MaXN0JyksXG4gICAgU2hhcmVTZWxlY3Rpb24gPSBmdW5jdGlvbigpIHsgcmV0dXJuIExpc3QuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuT2JqZWN0LmFzc2lnbiggU2hhcmVTZWxlY3Rpb24ucHJvdG90eXBlLCBMaXN0LnByb3RvdHlwZSwge1xuXG4gICAgSXRlbVZpZXc6IHJlcXVpcmUoJy4vU2hhcmUnKSxcblxuICAgIE1vZGVsczoge1xuICAgICAgICBEZWxpdmVyeURhdGU6IHJlcXVpcmUoJy4uLy4uL21vZGVscy9EZWxpdmVyeURhdGUnKSxcbiAgICAgICAgU2hhcmU6IHJlcXVpcmUoJy4uLy4uL21vZGVscy9TaGFyZScpXG4gICAgfSxcblxuICAgIGNvbGxlY3Rpb246IHsgY29tcGFyYXRvcjogJ3N0YXJ0RXBvY2gnLCBtb2RlbDogcmVxdWlyZSgnLi4vLi4vbW9kZWxzL1NoYXJlJyksIHVybDogXCIvc2hhcmVcIiB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGNzYUluZm9CdG46IHsgbWV0aG9kOiAnc2hvd0NTQUluZm9QYWdlSW5OZXdUYWInIH1cbiAgICB9LFxuXG4gICAgZmV0Y2g6IHsgZGF0YToge1xuICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICBlbmRkYXRlOiBKU09OLnN0cmluZ2lmeSggeyBvcGVyYXRpb246ICc+JywgdmFsdWU6IHJlcXVpcmUoJ21vbWVudCcpKCkuYWRkKCAyLCAnd2Vla3MnICkuZm9ybWF0KCdZWVlZLU1NLUREJykgfSApLFxuICAgICAgICBzaWdudXBjdXRvZmY6IEpTT04uc3RyaW5naWZ5KCB7IG9wZXJhdGlvbjogJz4nLCB2YWx1ZTogcmVxdWlyZSgnbW9tZW50JykoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSB9IClcbiAgICB9IH0sXG5cbiAgICBnZXRJdGVtVmlld09wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7IGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEuc2hhcmVzLCBmYWN0b3J5OiB0aGlzLmZhY3RvcnkgfVxuICAgIH0sXG5cbiAgICBpc1NlYXNvbiggc2Vhc29uLCBtb2RlbCApIHtcbiAgICAgICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKCBzZWFzb24sICdpJyApXG5cbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oIHJlLnRlc3QoIG1vZGVsLmdldCgnbmFtZScpICkgfHwgcmUudGVzdCggbW9kZWwuZ2V0KCdsYWJlbCcpICkgKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICBMaXN0LnByb3RvdHlwZS5wb3N0UmVuZGVyLmNhbGwodGhpcylcblxuICAgICAgICB0aGlzLm9uKCAnaXRlbVNlbGVjdGVkJywgbW9kZWwgPT4ge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdoYXMtZXJyb3InKVxuICAgICAgICAgICAgaWYoICF0aGlzLnVzZXIuaXNBZG1pbigpICYmIHRoaXMuaXNTZWFzb24oICdzdW1tZXInLCBtb2RlbCApICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCggc2hhcmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5pc1NlYXNvbiggJ3NwcmluZycsIHNoYXJlICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1WaWV3c1tzaGFyZS5pZF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbiggJ2NsaWNrJywgKCkgPT4gdGhpcy5pdGVtVmlld3Nbc2hhcmUuaWRdLmVtaXQoICdjbGlja2VkJywgdGhpcy5pdGVtVmlld3Nbc2hhcmUuaWRdLm1vZGVsICkgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMub24oICdpdGVtVW5zZWxlY3RlZCcsIG1vZGVsID0+IHtcbiAgICAgICAgICAgIGlmKCAhdGhpcy51c2VyLmlzQWRtaW4oKSAmJiB0aGlzLmlzU2Vhc29uKCAnc3VtbWVyJywgbW9kZWwgKSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goIHNoYXJlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIHRoaXMuaXNTZWFzb24oICdzcHJpbmcnLCBzaGFyZSApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtVmlld3Nbc2hhcmUuaWRdLnRlbXBsYXRlRGF0YS5jb250YWluZXIuYWRkQ2xhc3MoJ2luYWN0aXZlJykub2ZmKCdjbGljaycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2VsZWN0SXRlbSggc2hhcmUgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMgPSBuZXcgKCB0aGlzLkNvbGxlY3Rpb24uZXh0ZW5kKCB7IGNvbXBhcmF0b3I6ICdzdGFydEVwb2NoJyB9ICkgKSgpXG5cbiAgICAgICAgdGhpcy5pdGVtcy5vbiggJ3Jlc2V0JywgKCkgPT4geyBpZiggdGhpcy5pdGVtcy5sZW5ndGggPT09IDAgKSByZXR1cm4gdGhpcy5lbWl0KCdub1NoYXJlcycpIH0gKVxuXG4gICAgICAgIHRoaXMub24oICdpbml0aWFsaXplZCcsICgpID0+XG4gICAgICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goIGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb25TaGFyZSA9IHRoaXMuc2Vzc2lvblNoYXJlcy5maW5kKCBzaGFyZSA9PiBzaGFyZS5pZCA9PT0gaXRlbS5pZCApXG4gICAgICAgICAgICAgICAgaWYoIHNlc3Npb25TaGFyZSApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RJdGVtKCBpdGVtIClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5hZGQoIGl0ZW0gKVxuICAgICAgICAgICAgICAgICAgICBpZiggc2Vzc2lvblNoYXJlLnNlbGVjdGVkT3B0aW9ucyApIGl0ZW0uc2V0KCAnc2VsZWN0ZWRPcHRpb25zJywgc2Vzc2lvblNoYXJlLnNlbGVjdGVkT3B0aW9ucyApIFxuICAgICAgICAgICAgICAgICAgICBpZiggc2Vzc2lvblNoYXJlLnNlbGVjdGVkRGVsaXZlcnkgKSBpdGVtLnNldCggJ3NlbGVjdGVkRGVsaXZlcnknLCBzZXNzaW9uU2hhcmUuc2VsZWN0ZWREZWxpdmVyeSApIFxuICAgICAgICAgICAgICAgICAgICBpZiggc2Vzc2lvblNoYXJlLnNraXBEYXlzICkgeyBpdGVtLnNldCggJ3NraXBEYXlzJywgc2Vzc2lvblNoYXJlLnNraXBEYXlzICkgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKVxuICAgICAgICApXG5cbiAgICAgICAgaWYoIHRoaXMuc2Vzc2lvblNoYXJlcyApIHtcbiAgICAgICAgICAgIHRoaXMub24oICdpdGVtQWRkZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoIE9iamVjdC5rZXlzKCB0aGlzLml0ZW1WaWV3cyApLmxlbmd0aCA9PT0gdGhpcy5pdGVtcy5sZW5ndGggKSB0aGlzLmVtaXQoJ2luaXRpYWxpemVkJylcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2VsZWN0aW9uOiB0cnVlLFxuXG4gICAgc2hvd0NTQUluZm9QYWdlSW5OZXdUYWIoKSB7IHdpbmRvdy5vcGVuKCcvY3NhI2hvdy1kby1pLWtub3cnKSB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9zaWdudXAvc2hhcmVzJyksXG5cbiAgICB2YWxpZGF0ZSgpIHtcbiAgICAgICAgdmFyIHByZXZTaGFyZUlkcyA9IHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMubWFwKCBzaGFyZSA9PiBzaGFyZS5pZCApLFxuICAgICAgICAgICAgc2VsZWN0ZWRTaGFyZUlkcyA9IE9iamVjdC5rZXlzKCB0aGlzLnNlbGVjdGVkSXRlbXMgKS5tYXAoIGlkID0+IHBhcnNlSW50KGlkKSApXG5cbiAgICAgICAgaWYoIHNlbGVjdGVkU2hhcmVJZHMubGVuZ3RoID09PSAwICkgeyB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIuYWRkQ2xhc3MoJ2hhcy1lcnJvcicpOyByZXR1cm4gZmFsc2UgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fKCBwcmV2U2hhcmVJZHMgKS5kaWZmZXJlbmNlKCBzZWxlY3RlZFNoYXJlSWRzICkuZm9yRWFjaCggaWQgPT4ge1xuICAgICAgICAgICAgdmFyIHNoYXJlID0gdGhpcy5pdGVtcy5nZXQoaWQpXG4gICAgICAgICAgICBzaGFyZS51bnNldCgnc2VsZWN0ZWRPcHRpb25zJylcbiAgICAgICAgICAgIHNoYXJlLnVuc2V0KCdzZWxlY3RlZERlbGl2ZXJ5JylcbiAgICAgICAgICAgIHNoYXJlLnVuc2V0KCdza2lwRGF5cycpXG4gICAgICAgICAgICB0aGlzLnNpZ251cERhdGEuc2hhcmVzLnJlbW92ZSggc2hhcmUgKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLl8oIHNlbGVjdGVkU2hhcmVJZHMgKS5kaWZmZXJlbmNlKCBwcmV2U2hhcmVJZHMgKS5mb3JFYWNoKCBpZCA9PiB0aGlzLnNpZ251cERhdGEuc2hhcmVzLmFkZCggdGhpcy5pdGVtcy5nZXQoaWQpICkgKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYXJlU2VsZWN0aW9uXG4iLCJ2YXIgTGlzdCA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdCcpLFxuICAgIFNpbmdsZVNoYXJlT3B0aW9ucyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTGlzdC5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBTaW5nbGVTaGFyZU9wdGlvbnMucHJvdG90eXBlLCBMaXN0LnByb3RvdHlwZSwge1xuXG4gICAgSXRlbVZpZXc6IHJlcXVpcmUoJy4vU2hhcmVPcHRpb24nKSxcblxuICAgIGdldEl0ZW1WaWV3T3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEub3B0aW9ucyxcbiAgICAgICAgICAgIHNoYXJlOiB0aGlzLm1vZGVsXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zKCkgeyByZXR1cm4gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHNoYXJlID0gdGhpcy5tb2RlbFxuICAgICAgICBcbiAgICAgICAgTGlzdC5wcm90b3R5cGUucG9zdFJlbmRlci5jYWxsKCB0aGlzIClcblxuICAgICAgICB0aGlzLm9uKCAnaXRlbUFkZGVkJywgc2hhcmVPcHRpb24gPT4ge1xuICAgICAgICAgICAgdGhpcy5pdGVtVmlld3NbIHNoYXJlT3B0aW9uLmlkIF0ub24oICdjaGFuZ2VkJywgKCkgPT4gdGhpcy51cGRhdGVUb3RhbCgpIClcbiAgICAgICAgICAgIGlmKCBzaGFyZS5nZXQoJ3NlbGVjdGVkT3B0aW9ucycpICkge1xuICAgICAgICAgICAgICAgIHNoYXJlLmdldCgnc2VsZWN0ZWRPcHRpb25zJykuZm9yRWFjaCggc2VsZWN0ZWRPcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiggc2VsZWN0ZWRPcHRpb24uc2hhcmVvcHRpb25pZCA9PSBzaGFyZU9wdGlvbi5pZCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbVZpZXdzWyBzaGFyZU9wdGlvbi5pZCBdLnRlbXBsYXRlRGF0YS5pbnB1dC52YWwoIHNlbGVjdGVkT3B0aW9uLnNoYXJlb3B0aW9ub3B0aW9uaWQgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggT2JqZWN0LmtleXMoIHRoaXMuaXRlbVZpZXdzICkubGVuZ3RoID09IHRoaXMuaXRlbXMubGVuZ3RoICkgdGhpcy51cGRhdGVUb3RhbCgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMuZmFjdG9yeS5jcmVhdGUoICdzaGFyZUJveCcsIHsgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLnRlbXBsYXRlRGF0YS5zaGFyZUJveC5nZXQoMCkgfSwgbW9kZWw6IHNoYXJlIH0gKVxuXG4gICAgICAgIC8vVE9ETzogV3JpdGUgVUkgd2hlbiBubyBvcHRpb25zIGV4aXN0LlxuICAgICAgICB0aGlzLm1vZGVsLmdldFNoYXJlT3B0aW9ucygpXG4gICAgICAgICAgICAudGhlbiggKCkgPT4gc2hhcmUuZ2V0KCdzaGFyZW9wdGlvbnMnKS5mb3JFYWNoKCBzaGFyZW9wdGlvbiA9PiB0aGlzLml0ZW1zLmFkZCggc2hhcmVvcHRpb24gKSApIClcbiAgICAgICAgICAgIC5mYWlsKCBlID0+IGNvbnNvbGUubG9nKCBlLnN0YWNrIHx8IGUgKSApXG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9zaWdudXAvc2luZ2xlU2hhcmVPcHRpb25zJyksXG5cbiAgICB1cGRhdGVUb3RhbCgpIHtcbiAgICAgICAgdmFyIHRvdGFsID1cbiAgICAgICAgICAgIHRoaXMuaXRlbXMubWFwKCBzaGFyZU9wdGlvbiA9PlxuICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoIHNoYXJlT3B0aW9uLmdldCgnb3B0aW9ucycpLmdldCggdGhpcy5pdGVtVmlld3NbIHNoYXJlT3B0aW9uLmlkIF0udGVtcGxhdGVEYXRhLmlucHV0LnZhbCgpICkuZ2V0KCdwcmljZScpLnJlcGxhY2UoL1xcJHwsL2csIFwiXCIpICkgKVxuICAgICAgICAgICAgLnJlZHVjZSggKCBhLCBiICkgPT4gYSArIGIgKS50b0ZpeGVkKDIpIFxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnRvdGFsLnRleHQoIHRoaXMudXRpbC5mb3JtYXQoICckJXMgcGVyIHdlZWsnLCB0b3RhbCApIClcbiAgICB9XG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNpbmdsZVNoYXJlT3B0aW9uc1xuIiwidmFyIFZpZXcgPSByZXF1aXJlKCcuLi9NeVZpZXcnKSxcbiAgICBGb3JtID0gcmVxdWlyZSgnLi4vdXRpbC9Gb3JtJykucHJvdG90eXBlLFxuICAgIFN1bW1hcnkgPSBmdW5jdGlvbigpIHsgXG4gICAgICAgIFxuICAgICAgICB3aW5kb3cuc3Bpbm5lciA9IHRoaXMuc3Bpbm5lciA9IG5ldyB0aGlzLlNwaW5uZXIoIHtcbiAgICAgICAgICAgIGNvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICBsaW5lczogNyxcbiAgICAgICAgICAgIGxlbmd0aDogMixcbiAgICAgICAgICAgIHJhZGl1czogMTQsXG4gICAgICAgICAgICBzY2FsZTogMC41XG4gICAgICAgIH0gKSBcblxuICAgICAgICByZXR1cm4gVmlldy5hcHBseSggdGhpcywgYXJndW1lbnRzIClcbiAgICB9XG5cbk9iamVjdC5hc3NpZ24oIFN1bW1hcnkucHJvdG90eXBlLCBWaWV3LnByb3RvdHlwZSwge1xuXG4gICAgRGF5T2ZXZWVrTWFwOiByZXF1aXJlKCcuLi8uLi9tb2RlbHMvRGVsaXZlcnlSb3V0ZScpLnByb3RvdHlwZS5kYXlPZldlZWtNYXAsXG5cbiAgICBDb250YWN0SW5mbzogcmVxdWlyZSgnLi4vLi4vbW9kZWxzL0NvbnRhY3RJbmZvJyksXG5cbiAgICBTcGlubmVyOiByZXF1aXJlKCcuLi8uLi9wbHVnaW5zL3NwaW5uZXIuanMnKSxcblxuICAgIGJ1aWxkUmVxdWVzdCgpIHtcbiAgICAgICAgY29uc3QgYWRkcmVzc01vZGVsID0gdGhpcy51c2VyLmdldCgnYWRkcmVzc01vZGVsJylcblxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoIHtcbiAgICAgICAgICAgIG1lbWJlcjogT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXIucGljayggWyAnbmFtZScsICdlbWFpbCcsICdwaG9uZW51bWJlcicsICdwYXNzd29yZCcsICdyZXBlYXRwYXNzd29yZCcsICdhZGRyZXNzJywgJ2V4dHJhYWRkcmVzcycsICdoZWFyZCcsICdvbWlzc2lvbicgXSApLFxuICAgICAgICAgICAgICAgIHsgemlwY29kZTogKCBhZGRyZXNzTW9kZWwgJiYgYWRkcmVzc01vZGVsLnBvc3RhbENvZGUgKSA/IGFkZHJlc3NNb2RlbC5wb3N0YWxDb2RlIDogJycgfSApLFxuICAgICAgICAgICAgcGF5bWVudDogKCB0aGlzLnBheW1lbnRTZWxlY3RlZCA9PT0gJ2NhcmQnICkgPyB0aGlzLmdldEZvcm1EYXRhKCkgOiB7fSxcbiAgICAgICAgICAgIHNoYXJlczogdGhpcy5idWlsZFNoYXJlcygpLFxuICAgICAgICAgICAgdG90YWw6ICggdGhpcy5mZWUgKSA/IHRoaXMuZ3JhbmRUb3RhbFBsdXNGZWUgOiB0aGlzLmdyYW5kVG90YWwsXG4gICAgICAgICAgICBpc0FkbWluOiB0aGlzLnVzZXIuaXNBZG1pbigpLFxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgYnVpbGRTaGFyZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpZ251cERhdGEuc2hhcmVzLm1hcCggc2hhcmUgPT4ge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkV2Vla3MgPSBzaGFyZS5nZXQoJ3NlbGVjdGVkRGF0ZXMnKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgc2tpcERheXMgPSBzaGFyZS5nZXQoJ3NraXBEYXlzJyksXG4gICAgICAgICAgICAgICAgc2tpcERheXNUb3RhbCA9ICggc2tpcERheXMgKSA/IHNraXBEYXlzLmxlbmd0aCA6IDBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogc2hhcmUuaWQsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5mb3JtYXQoJ0Zyb20gJXMgdG8gJXMgeW91IHdpbGwgYmUgcmVjZWl2aW5nIGZyZXNoIGZvb2QgZm9yICVkIG91dCBvZiAlZCB3ZWVrcy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmUuZ2V0KCdodW1hblN0YXJ0ZGF0ZScpLCBzaGFyZS5nZXQoJ2h1bWFuRW5kZGF0ZScpLCBzZWxlY3RlZFdlZWtzLCBzZWxlY3RlZFdlZWtzICsgc2tpcERheXNUb3RhbCksXG4gICAgICAgICAgICAgICAgbGFiZWw6IHNoYXJlLmdldCgnbGFiZWwnKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBzaGFyZS5nZXQoJ3NlbGVjdGVkT3B0aW9ucycpLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJ5OiB0aGlzLl8oIHNoYXJlLmdldCgnc2VsZWN0ZWREZWxpdmVyeScpICkucGljayggWyAnZGVsaXZlcnlvcHRpb25pZCcsICdncm91cGRyb3BvZmZpZCcsICdkZXNjcmlwdGlvbicgXSApLFxuICAgICAgICAgICAgICAgIHNraXBEYXlzOiAoIHNraXBEYXlzICkgPyBza2lwRGF5cy5tYXAoIHNraXBEYXlJZCA9PiBzaGFyZS5nZXQoJ2RlbGl2ZXJ5RGF0ZXMnKS5nZXQoc2tpcERheUlkKS5nZXQoJ2RhdGUnKSApIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHRvdGFsOiBzaGFyZS5nZXQoJ3RvdGFsJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGNhcmRQYXltZW50U2VsZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMuc2lnbnVwSGFuZGxlciA9ICgpID0+IHsgaWYoIHRoaXMudmFsaWRhdGVDYXJkSW5mbygpICkgdGhpcy5zaWdudXAoKSB9XG5cbiAgICAgICAgdGhpcy5mZWUgPSBmYWxzZVxuICAgICAgICB0aGlzLnBheW1lbnRTZWxlY3RlZCA9ICdjYXJkJ1xuICAgICAgICB0aGlzLnVwZGF0ZUdyYW5kVG90YWwoKVxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnBheW1lbnRGb3JtLnJlbW92ZUNsYXNzKCdoaWRlJylcblxuICAgICAgICB0aGlzLmVuYWJsZVNpZ251cEJ0bigpXG4gICAgfSxcblxuICAgIGNhc2hQYXltZW50U2VsZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMuc2lnbnVwSGFuZGxlciA9ICgpID0+IHRoaXMuc2lnbnVwKClcblxuICAgICAgICB0aGlzLmZlZSA9IGZhbHNlXG4gICAgICAgIHRoaXMucGF5bWVudFNlbGVjdGVkID0gJ2Nhc2gnXG5cbiAgICAgICAgdGhpcy5lbmFibGVTaWdudXBCdG4oKVxuICAgIH0sXG5cbiAgICBkaXNhYmxlU2lnbnVwQnRuKCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5zaWdudXBCdG5cbiAgICAgICAgICAgIC5hZGRDbGFzcygnZGlzYWJsZWQnKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdidG4tc3VjY2VzcycpXG4gICAgICAgICAgICAub2ZmKCAnY2xpY2snIClcbiAgICB9LFxuXG4gICAgZW5hYmxlU2lnbnVwQnRuKCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5zaWdudXBCdG5cbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdidG4tc3VjY2VzcycpXG4gICAgICAgICAgICAub2ZmKCAnY2xpY2snIClcbiAgICAgICAgICAgIC5vbmUoICdjbGljaycsIHRoaXMuc2lnbnVwSGFuZGxlciApXG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuICAgICAgICAncGF5bWVudEZvcm0nOiBbXG4gICAgICAgICAgICB7IGV2ZW50OiAnYmx1cicsICdzZWxlY3Rvcic6ICdpbnB1dCcsIG1ldGhvZDogJ29uSW5wdXRCbHVyJyB9LFxuICAgICAgICAgICAgeyBldmVudDogJ2ZvY3VzJywgJ3NlbGVjdG9yJzogJ2lucHV0JywgbWV0aG9kOiAnb25JbnB1dEZvY3VzJyB9XG4gICAgICAgIF1cbiAgICB9LFxuXG4gICAgZmllbGRzOiB7XG4gICAgICAgIG51bWJlcjoge1xuICAgICAgICAgICAgZXJyb3I6IFwiRW50ZXIgYSBjYXJkIG51bWJlclwiLFxuICAgICAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKCB2YWwgKSB7IHJldHVybiB0aGlzLiQudHJpbSh2YWwpLmxlbmd0aCA+IDAgfVxuICAgICAgICB9LFxuICAgICAgICBcImV4cF9tb250aFwiOiB7XG4gICAgICAgICAgICBlcnJvcjogJ0VudGVyIHRoZSBtb250aCBpbiBcIk1NXCIgZm9ybWF0JyxcbiAgICAgICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiggdmFsICkgeyByZXR1cm4gdmFsLmxlbmd0aCA9PT0gMiB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhwX3llYXJcIjoge1xuICAgICAgICAgICAgZXJyb3I6ICdFbnRlciB0aGUgeWVhciBpbiBcIllZWVlcIiBmb3JtYXQnLFxuICAgICAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKCB2YWwgKSB7IHJldHVybiB2YWwubGVuZ3RoID09PSA0IH1cbiAgICAgICAgfSxcbiAgICAgICAgY3ZjOiB7XG4gICAgICAgICAgICBlcnJvcjogXCJFbnRlciBhIGN2YyBudW1iZXJcIixcbiAgICAgICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiggdmFsICkgeyByZXR1cm4gdGhpcy4kLnRyaW0odmFsKS5sZW5ndGggPiAwIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7XG4gICAgICAgIHZhciBzcGFjZVR3b1RhYiA9IFwiXFxyXFxuXFx0XFx0XCJcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckNsYXNzOiB0aGlzLmNvbnRhaW5lckNsYXNzLFxuICAgICAgICAgICAgc2hhcmVzOiB0aGlzLnNpZ251cERhdGEuc2hhcmVzLm1hcCggc2hhcmUgPT4ge1xuXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGVsaXZlcnkgPSBzaGFyZS5nZXQoJ2RlbGl2ZXJ5b3B0aW9ucycpLmdldCggc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JykuZGVsaXZlcnlvcHRpb25pZCApLFxuICAgICAgICAgICAgICAgICAgICBncm91cERyb3BvZmYgPSAoIHNoYXJlLmdldCgnc2VsZWN0ZWREZWxpdmVyeScpLmdyb3VwZHJvcG9mZmlkIClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2hhcmUuZ2V0KCdncm91cGRyb3BvZmZzJykuZ2V0KHNoYXJlLmdldCgnc2VsZWN0ZWREZWxpdmVyeScpLmdyb3VwZHJvcG9mZmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdGltZXMgPSAoIGdyb3VwRHJvcG9mZiApXG4gICAgICAgICAgICAgICAgICAgID8gZ3JvdXBEcm9wb2ZmLnBpY2soIFsgJ3N0YXJ0dGltZScsICdlbmR0aW1lJyBdIClcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl8oIHNoYXJlLmdldCgnc2VsZWN0ZWREZWxpdmVyeScpICkucGljayggWyAnc3RhcnR0aW1lJywgJ2VuZHRpbWUnIF0gKSxcbiAgICAgICAgICAgICAgICBzaGFyZU9wdGlvbldlZWtseVRvdGFsID0gc2hhcmUuZ2V0KCdzZWxlY3RlZE9wdGlvbnMnKVxuICAgICAgICAgICAgICAgICAgICAubWFwKCBzZWxlY3RlZE9wdGlvbiA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCggc2hhcmUuZ2V0KCdzaGFyZW9wdGlvbnMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KCBzZWxlY3RlZE9wdGlvbi5zaGFyZW9wdGlvbmlkIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldCggJ29wdGlvbnMnIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldCggc2VsZWN0ZWRPcHRpb24uc2hhcmVvcHRpb25vcHRpb25pZCApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXQoJ3ByaWNlJykucmVwbGFjZSgvXFwkfCwvZywgXCJcIikgKSApXG4gICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoICggYSwgYiApID0+IGEgKyBiICksXG4gICAgICAgICAgICAgICAgd2Vla2x5VG90YWwgPSAgc2hhcmVPcHRpb25XZWVrbHlUb3RhbCArIHBhcnNlRmxvYXQoIHNlbGVjdGVkRGVsaXZlcnkuZ2V0KCdwcmljZScpLnJlcGxhY2UoL1xcJHwsL2csXCJcIikgKSxcbiAgICAgICAgICAgICAgICBhZGRyZXNzID0gKCBzZWxlY3RlZERlbGl2ZXJ5LmdldCgnbmFtZScpID09PSAnaG9tZScgKVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMudXNlci5nZXQoJ2FkZHJlc3MnKVxuICAgICAgICAgICAgICAgICAgICA6ICggZ3JvdXBEcm9wb2ZmIClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZ3JvdXBEcm9wb2ZmLmdldCgnYWRkcmVzcycpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuQ29udGFjdEluZm8uZGF0YS5mYXJtcGlja3VwXG5cbiAgICAgICAgICAgICAgICBzaGFyZS5zZXQoIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWREZWxpdmVyeTogT2JqZWN0LmFzc2lnbiggc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JyksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5mb3JtYXQoJ0RlbGl2ZXJ5OiVzTWV0aG9kOiAlcyVzRGF5L1RpbWU6ICVzcyAlcy0lcyVzUGxhY2U6ICVzJXNDb3N0OiAlcyBwZXIgd2VlaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlVHdvVGFiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZERlbGl2ZXJ5LmdldCgnbGFiZWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2VUd29UYWIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlLmRheU9mV2Vla01hcFsgc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JykuZGF5b2Z3ZWVrIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzLnN0YXJ0dGltZSwgdGltZXMuZW5kdGltZSwgc3BhY2VUd29UYWIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MsIHNwYWNlVHdvVGFiLCBzZWxlY3RlZERlbGl2ZXJ5LmdldCgncHJpY2UnKSApIH0gKSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWw6IHdlZWtseVRvdGFsICogc2hhcmUuZ2V0KCdzZWxlY3RlZERhdGVzJykubGVuZ3RoXG4gICAgICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgICAgICBzaGFyZS5zZXQoICdzZWxlY3RlZE9wdGlvbnMnLCBzaGFyZS5nZXQoICdzZWxlY3RlZE9wdGlvbnMnICkubWFwKCBzZWxlY3RlZE9wdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZU9wdGlvbiA9IHNoYXJlLmdldCgnc2hhcmVvcHRpb25zJykuZ2V0KCBzZWxlY3RlZE9wdGlvbi5zaGFyZW9wdGlvbmlkICksXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFyZU9wdGlvbk9wdGlvbiA9IHNoYXJlT3B0aW9uLmdldCgnb3B0aW9ucycpLmdldCggc2VsZWN0ZWRPcHRpb24uc2hhcmVvcHRpb25vcHRpb25pZCApXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oIHNlbGVjdGVkT3B0aW9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy51dGlsLmZvcm1hdCggJyVzOiAlcyAlcyAtLSAlcyBwZXIgd2VlaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVPcHRpb24uZ2V0KCduYW1lJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVPcHRpb25PcHRpb24uZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlT3B0aW9uT3B0aW9uLmdldCgndW5pdCcpIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVPcHRpb25PcHRpb24uZ2V0KCdwcmljZScpIClcbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgfSApIClcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNoYXJlQm94OiB0aGlzLnRlbXBsYXRlcy5TaGFyZUJveCggc2hhcmUuYXR0cmlidXRlcyApLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbnM6IHNoYXJlLmdldCgnc2VsZWN0ZWRPcHRpb25zJykubWFwKCBzZWxlY3RlZE9wdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVPcHRpb24gPSBzaGFyZS5nZXQoJ3NoYXJlb3B0aW9ucycpLmdldCggc2VsZWN0ZWRPcHRpb24uc2hhcmVvcHRpb25pZCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlT3B0aW9uT3B0aW9uID0gc2hhcmVPcHRpb24uZ2V0KCdvcHRpb25zJykuZ2V0KCBzZWxlY3RlZE9wdGlvbi5zaGFyZW9wdGlvbm9wdGlvbmlkIClcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25OYW1lOiBzaGFyZU9wdGlvbi5nZXQoJ25hbWUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZTogc2hhcmVPcHRpb25PcHRpb24uZ2V0KCdwcmljZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uTGFiZWw6IHNoYXJlT3B0aW9uT3B0aW9uLmdldCgnbGFiZWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0OiBzaGFyZU9wdGlvbk9wdGlvbi5nZXQoJ3VuaXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ICksXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRGVsaXZlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJ5VHlwZTogc2VsZWN0ZWREZWxpdmVyeS5nZXQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWVrbHlDb3N0OiBzZWxlY3RlZERlbGl2ZXJ5LmdldCgncHJpY2UnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwZHJvcG9mZjogKCBncm91cERyb3BvZmYgKSA/IGdyb3VwRHJvcG9mZi5nZXQoJ2xhYmVsJykgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiAoIGdyb3VwRHJvcG9mZiApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBncm91cERyb3BvZmYuZ2V0KCdzdHJlZXQnKSArICcsICcgKyBncm91cERyb3BvZmYuZ2V0KCdjaXR5U3RhdGVaaXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKCBzZWxlY3RlZERlbGl2ZXJ5LmdldCgnbmFtZScpID09PSAnZmFybScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuQ29udGFjdEluZm8uZGF0YS5mYXJtcGlja3VwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy51c2VyLmdldCgnYWRkcmVzcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5T2ZXZWVrOiB0aGlzLkRheU9mV2Vla01hcFsgc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JykuZGF5b2Z3ZWVrIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydHRpbWU6IHRpbWVzLnN0YXJ0dGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZHRpbWU6IHRpbWVzLmVuZHRpbWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgd2Vla2x5UHJpY2U6IHRoaXMudXRpbC5mb3JtYXQoICckJXMnLCB3ZWVrbHlUb3RhbC50b0ZpeGVkKDIpICksXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRGF0ZXM6IHNoYXJlLmdldCgnc2VsZWN0ZWREYXRlcycpLm1hcCggZGF0ZSA9PiB0aGlzLnRlbXBsYXRlcy5QaWNrdXBEYXRlKCBPYmplY3QuYXNzaWduKCB7IHNlbGVjdGVkOiB0cnVlIH0sIGRhdGUuYXR0cmlidXRlcyApICkgKSxcbiAgICAgICAgICAgICAgICAgICAgd2Vla3NTZWxlY3RlZDogc2hhcmUuZ2V0KCdzZWxlY3RlZERhdGVzJykubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBza2lwRGF5czogKCBzaGFyZS5oYXMoJ3NraXBEYXlzJykgKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzaGFyZS5nZXQoJ3NraXBEYXlzJykubWFwKCBza2lwRGF5SWQgPT4gdGhpcy50ZW1wbGF0ZXMuUGlja3VwRGF0ZSggc2hhcmUuZ2V0KCdkZWxpdmVyeURhdGVzJykuZ2V0KHNraXBEYXlJZCkuYXR0cmlidXRlcyApICkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsOiB0aGlzLnV0aWwuZm9ybWF0KCAnJCVzJywgc2hhcmUuZ2V0KCd0b3RhbCcpLnRvRml4ZWQoMikgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKSBcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbklucHV0Qmx1ciggZSApIHtcbiAgICAgICAgdmFyICRlbCA9IHRoaXMuJCggZS5jdXJyZW50VGFyZ2V0ICksXG4gICAgICAgICAgICBmaWVsZCA9IHRoaXMuZmllbGRzWyAkZWwuYXR0cignaWQnKSBdLFxuICAgICAgICAgICAgcmVzdWx0XG5cbiAgICAgICAgcmVzdWx0ID0gZmllbGQudmFsaWRhdGUuY2FsbCggdGhpcywgJGVsLnZhbCgpIClcblxuICAgICAgICBpZiggcmVzdWx0ICkge1xuICAgICAgICAgICAgJGVsLnBhcmVudCgpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdoYXMtZXJyb3InKS5hZGRDbGFzcygnaGFzLWZlZWRiYWNrIGhhcy1zdWNjZXNzJylcbiAgICAgICAgICAgICRlbC5uZXh0KCkucmVtb3ZlQ2xhc3MoJ2hpZGUnKS5yZW1vdmVDbGFzcygnZ2x5cGhpY29uLXJlbW92ZScpLmFkZENsYXNzKCdnbHlwaGljb24tb2snKVxuICAgICAgICAgICAgJGVsLnNpYmxpbmdzKCcuaGVscC1ibG9jaycpLnJlbW92ZSgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3dFcnJvciggJGVsLCBmaWVsZC5lcnJvciApXG4gICAgICAgICAgICB0aGlzLmRpc2FibGVTaWdudXBCdG4oKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uSW5wdXRGb2N1cyggZSApIHtcbiAgICAgICAgdmFyICRlbCA9IHRoaXMuJCggZS5jdXJyZW50VGFyZ2V0IClcbiAgICAgICAgaWYoICRlbC5uZXh0KCkuaGFzQ2xhc3MoJ2dseXBoaWNvbi1yZW1vdmUnKSApIHRoaXMucmVtb3ZlRXJyb3IoIHRoaXMuJCggZS5jdXJyZW50VGFyZ2V0ICkgKVxuICAgICAgICBpZiggdGhpcy50ZW1wbGF0ZURhdGEucGF5bWVudEZvcm0uZmluZCgnLmhhcy1lcnJvcicpLmxlbmd0aCA9PT0gMCApIHRoaXMuZW5hYmxlU2lnbnVwQnRuKClcbiAgICB9LFxuXG4gICAgcGF5bWVudFVuc2VsZWN0ZWQoKSB7XG5cbiAgICAgICAgdGhpcy5mZWUgPSBmYWxzZVxuICAgICAgICB0aGlzLnNlbGVjdGVkUGF5bWVudCA9IHVuZGVmaW5lZFxuICAgICAgICB0aGlzLnVwZGF0ZUdyYW5kVG90YWwoKVxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnNpZ251cEJ0bi5hZGRDbGFzcygnZGlzYWJsZWQnKS5yZW1vdmVDbGFzcygnYnRuLXN1Y2Nlc3MnKS5vZmYoICdjbGljaycgKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5wYXltZW50Rm9ybS5hZGRDbGFzcygnaGlkZScpXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmZlZSA9IGZhbHNlXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRQYXltZW50ID0gdW5kZWZpbmVkXG4gICAgICAgIFxuICAgICAgICBWaWV3LnByb3RvdHlwZS5wb3N0UmVuZGVyLmNhbGwodGhpcylcblxuICAgICAgICB0aGlzLnBheW1lbnRPcHRpb25zXG4gICAgICAgICAgICAub24oICdpdGVtU2VsZWN0ZWQnLCBtb2RlbCA9PiB0aGlzWyB0aGlzLnV0aWwuZm9ybWF0KCAnJXNQYXltZW50U2VsZWN0ZWQnLCBtb2RlbC5nZXQoJ25hbWUnKSApIF0oKSApXG4gICAgICAgICAgICAub24oICdpdGVtVW5zZWxlY3RlZCcsIG1vZGVsID0+IHRoaXMucGF5bWVudFVuc2VsZWN0ZWQoKSApXG5cbiAgICAgICAgdGhpcy5ncmFuZFRvdGFsID0gdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5tYXAoIHNoYXJlID0+IHNoYXJlLmdldCgndG90YWwnKSApLnJlZHVjZSggKCBhLCBiICkgPT4gYSArIGIgKVxuICAgICAgICB0aGlzLmdyYW5kVG90YWxQbHVzRmVlID0gKCB0aGlzLmdyYW5kVG90YWwgKyB0aGlzLmdyYW5kVG90YWwgKiAuMDMgKVxuXG4gICAgICAgIHRoaXMudXBkYXRlR3JhbmRUb3RhbCgpXG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgcmVtb3ZlRXJyb3IoICRlbCApIHtcbiAgICAgICAgaWYoICRlbC5zaWJsaW5ncygnLmhlbHAtYmxvY2snKS5sZW5ndGggPT09IDEgKSAkZWwucGFyZW50KCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2hhcy1lcnJvcicpXG4gICAgICAgICRlbC5uZXh0KCkucmVtb3ZlQ2xhc3MoJ2hpZGUnKS5yZW1vdmVDbGFzcygnZ2x5cGhpY29uLXJlbW92ZScpXG4gICAgICAgICRlbC5zaWJsaW5ncyggdGhpcy51dGlsLmZvcm1hdCggJy5oZWxwLWJsb2NrLiVzJywgJGVsLmF0dHIoJ2lkJykgKSApLnJlbW92ZSgpXG4gICAgfSxcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGRhdGFQcm9taXNlcyA9IFsgXVxuXG4gICAgICAgIGRhdGFQcm9taXNlcy5wdXNoKCB0aGlzLkNvbnRhY3RJbmZvLmdldCgpIClcblxuICAgICAgICB0aGlzLnNpZ251cERhdGEuc2hhcmVzLmZvckVhY2goIHNoYXJlID0+IHtcbiAgICAgICAgICAgIGlmKCAhIHNoYXJlLmhhcygnc2hhcmVvcHRpb25zJykgKSBkYXRhUHJvbWlzZXMucHVzaCggc2hhcmUuZ2V0U2hhcmVPcHRpb25zKCkgKVxuICAgICAgICAgICAgaWYoICEgc2hhcmUuaGFzKCdkZWxpdmVyeW9wdGlvbnMnKSApIGRhdGFQcm9taXNlcy5wdXNoKCBzaGFyZS5nZXREZWxpdmVyeU9wdGlvbnMoKSApXG4gICAgICAgICAgICBpZiggISBzaGFyZS5oYXMoJ2dyb3VwZHJvcG9mZnMnKSApIGRhdGFQcm9taXNlcy5wdXNoKCBzaGFyZS5nZXRHcm91cERyb3BvZmZzKCkgKVxuICAgICAgICAgICAgaWYoICEgc2hhcmUuaGFzKCdkZWxpdmVyeURhdGVzJykgKSBkYXRhUHJvbWlzZXMucHVzaCggc2hhcmUuZ2V0RGVsaXZlcnlEYXRlcygpIClcbiAgICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMuUS5hbGwoIGRhdGFQcm9taXNlcyApLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMuZm9yRWFjaCggc2hhcmUgPT4gc2hhcmUuZ2V0U2VsZWN0ZWREYXRlcygpIClcbiAgICAgICAgICAgIFZpZXcucHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMpXG4gICAgICAgIH0gKVxuICAgICAgICAuZmFpbCggZSA9PiBuZXcgdGhpcy5FcnJvcihlKSApXG4gICAgICAgIC5kb25lKClcbiAgICB9LFxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmVtcHR5KCkucmVtb3ZlKClcbiAgICAgICAgdGhpcy5yZW5kZXIoKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBzaG93RXJyb3IoICRlbCwgZXJyb3IgKSB7XG4gICAgICAgIHZhciBmb3JtR3JvdXAgPSAkZWwucGFyZW50KCkucGFyZW50KClcblxuICAgICAgICBpZiggJGVsLm5leHQoKS5oYXNDbGFzcyggJ2dseXBoaWNvbi1yZW1vdmUnICkgKSByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIGZvcm1Hcm91cC5yZW1vdmVDbGFzcygnaGFzLXN1Y2Nlc3MnKS5hZGRDbGFzcygnaGFzLWZlZWRiYWNrIGhhcy1lcnJvcicpXG4gICAgICAgICRlbC5uZXh0KCkucmVtb3ZlQ2xhc3MoJ2hpZGUnKS5yZW1vdmVDbGFzcygnZ2x5cGhpY29uLW9rJykuYWRkQ2xhc3MoJ2dseXBoaWNvbi1yZW1vdmUnKVxuICAgICAgICAgICAucGFyZW50KCkuYXBwZW5kKCBGb3JtLnRlbXBsYXRlcy5maWVsZEVycm9yKCB7IGVycm9yOiBlcnJvciwgbmFtZTogJGVsLmF0dHIoJ2lkJykgfSApIClcbiAgICB9LFxuXG4gICAgc2hvd0Vycm9yTW9kYWwoIG9wdHMgKSB7XG4gICAgICAgIHRoaXMubW9kYWxWaWV3LnNob3coIHtcbiAgICAgICAgICAgIHRpdGxlOiAnSG1tbScsXG4gICAgICAgICAgICBib2R5OiAoIG9wdHMgJiYgb3B0cy5lcnJvciApXG4gICAgICAgICAgICAgICAgPyBvcHRzLmVycm9yXG4gICAgICAgICAgICAgICAgOiAnVGhlcmUgd2FzIGEgcHJvYmxlbS4gIFBsZWFzZSBjb250YWN0IHVzIGF0IGVhdC5wYXRjaHdvcmtnYXJkZW5zQGdtYWlsLmNvbS4gIFdlIGFwb2xvZ2l6ZSBmb3IgdGhlIGluY29udmVuaWVuY2UnLFxuICAgICAgICAgICAgaGlkZUNhbmNlbEJ0bjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpcm1UZXh0OiAnT2theScgfSApXG4gICAgICAgIC5vbiggJ3N1Ym1pdCcsICgpID0+IHRoaXMubW9kYWxWaWV3LmhpZGUoKSApXG4gICAgfSxcbiAgICBcbiAgICBzaG93U3VjY2Vzc01vZGFsKCkge1xuICAgICAgICB0aGlzLm1vZGFsVmlldy5zaG93KCB7XG4gICAgICAgICAgICB0aXRsZTogJ0dyZWF0IFN1Y2Nlc3MnLFxuICAgICAgICAgICAgYm9keTogdGhpcy51dGlsLmZvcm1hdCggJ1RoYW5rcyBmb3Igc2lnbmluZyB1cC4gIFdlIGxvb2sgZm9yd2FyZCB0byBzaGFyaW5nIHRoZSBzZWFzb24gd2l0aCB5b3UuICVzJyxcbiAgICAgICAgICAgICAgICAoIE9iamVjdC5rZXlzKCB0aGlzLmdldEZvcm1EYXRhKCkgKS5sZW5ndGggKSA/ICAnWW91IHNob3VsZCBmaW5kIGEgcmVjZWlwdCBpbiB5b3VyIGVtYWlsIGluYm94JyA6ICcnICksXG4gICAgICAgICAgICBoaWRlQ2FuY2VsQnRuOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlybVRleHQ6ICdPa2F5JyB9IClcbiAgICAgICAgLm9uKCAnc3VibWl0JywgKCkgPT4gd2luZG93LmxvY2F0aW9uID0gJy8nIClcbiAgICAgICAgLm9uKCAnaGlkZGVuJywgKCkgPT4gd2luZG93LmxvY2F0aW9uID0gJy8nIClcbiAgICB9LFxuXG4gICAgc2lnbnVwKCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5zaWdudXBCdG5cbiAgICAgICAgICAgIC5vZmYoJ2NsaWNrJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnaGFzLXNwaW5uZXInKVxuICAgICAgICAgICAgLmFwcGVuZCggdGhpcy5zcGlubmVyLnNwaW4oKS5lbCApXG5cbiAgICAgICAgdGhpcy4kLmFqYXgoIHtcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuYnVpbGRSZXF1ZXN0KCksXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICB1cmw6IFwiL3NpZ251cFwiIH0gKVxuICAgICAgICAuZG9uZSggcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYoIHJlc3BvbnNlLmVycm9yICkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9yTW9kYWwoIHsgZXJyb3I6IHJlc3BvbnNlLmVycm9yIH0gKVxuICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnNpZ251cEJ0blxuICAgICAgICAgICAgICAgICAgICAub2ZmKCdjbGljaycpXG4gICAgICAgICAgICAgICAgICAgIC5vbmUoICdjbGljaycsIHRoaXMuc2lnbnVwSGFuZGxlciApXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KCdCZWNvbWUgYSBNZW1iZXIhJykgICBcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZG9uZScpXG4gICAgICAgICAgICB0aGlzLnBheW1lbnRPcHRpb25zLnJlbW92ZUFsbExpc3RlbmVycyggJ2l0ZW1TZWxlY3RlZCcgKS5yZW1vdmVBbGxMaXN0ZW5lcnMoICdpdGVtVW5zZWxlY3RlZCcgKVxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuc2lnbnVwQnRuLnRleHQoJ1RoYW5rIHlvdScpXG4gICAgICAgICAgICB0aGlzLnNob3dTdWNjZXNzTW9kYWwoKVxuICAgICAgICB9IClcbiAgICAgICAgLmZhaWwoICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9yTW9kYWwoKVxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuc2lnbnVwQnRuXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2snKVxuICAgICAgICAgICAgICAgIC5vbmUoICdjbGljaycsIHRoaXMuc2lnbnVwSGFuZGxlciApXG4gICAgICAgICAgICAgICAgLnRleHQoJ0JlY29tZSBhIE1lbWJlciEnKVxuICAgICAgICB9IClcbiAgICAgICAgLmFsd2F5cyggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zcGlubmVyLnN0b3AoKVxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuc2lnbnVwQnRuLnJlbW92ZUNsYXNzKCdoYXMtc3Bpbm5lcicpXG4gICAgICAgfSApXG4gICAgfSxcblxuICAgIHN1YnZpZXdzOiB7XG4gICAgICAgIHBheW1lbnRPcHRpb25zOiBbXG4gICAgICAgICAgICB7IG5hbWU6ICdwYXltZW50T3B0aW9ucycsIHZpZXc6IHJlcXVpcmUoJy4vUGF5bWVudE9wdGlvbnMnKSB9LFxuICAgICAgICBdLFxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9zdW1tYXJ5JyksXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgUGlja3VwRGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9waWNrdXBEYXRlJyksXG4gICAgICAgIFNoYXJlQm94OiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvU2hhcmVCb3gnKVxuICAgIH0sXG5cbiAgICB1cGRhdGVHcmFuZFRvdGFsKCkge1xuICAgICAgICB2YXIgdG90YWwgPSAoIHRoaXMuZmVlICkgPyB0aGlzLmdyYW5kVG90YWxQbHVzRmVlIDogdGhpcy5ncmFuZFRvdGFsXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmdyYW5kVG90YWwudGV4dCggJ0dyYW5kIFRvdGFsIDogICcgKyAnJCcgKyB0b3RhbC50b0ZpeGVkKDIpIClcblxuICAgICAgICB0aGlzLiQoJy5wYXltZW50LW9wdGlvbjpmaXJzdC1jaGlsZCAubWV0aG9kLXRvdGFsJykudGV4dCggJ0dyYW5kIFRvdGFsIDogICcgKyAnJCcgKyB0aGlzLmdyYW5kVG90YWwudG9GaXhlZCgyKSApXG4gICAgICAgIHRoaXMuJCgnLnBheW1lbnQtb3B0aW9uOmxhc3QtY2hpbGQgLm1ldGhvZC10b3RhbCcpLnRleHQoICdHcmFuZCBUb3RhbCA6ICAnICsgJyQnICsgdGhpcy5ncmFuZFRvdGFsLnRvRml4ZWQoMikgKVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZUNhcmRJbmZvKCkge1xuICAgICAgICB2YXIgdmFsaWQgPSB0cnVlXG5cbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMuZmllbGRzICkuZm9yRWFjaCgga2V5ID0+IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmZpZWxkc1sga2V5IF0udmFsaWRhdGUuY2FsbCggdGhpcywgdGhpcy50ZW1wbGF0ZURhdGFba2V5XS52YWwoKSApXG5cbiAgICAgICAgICAgIGlmKCAhIHJlc3VsdCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dFcnJvciggdGhpcy50ZW1wbGF0ZURhdGFba2V5XSwgdGhpcy5maWVsZHNbIGtleSBdLmVycm9yIClcbiAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIGlmKCAhIHZhbGlkICkgdGhpcy5kaXNhYmxlU2lnbnVwQnRuKClcblxuICAgICAgICByZXR1cm4gdmFsaWRcbiAgICB9XG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1bW1hcnlcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXY+XG4gICAgPGgxPkFib3V0PC9oMT5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwic2VjdGlvbk9uZVwiIGNsYXNzPVwic3RyaXBlZFwiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cInNlY3Rpb25Ud29cIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJzZWN0aW9uVGhyZWVcIiBjbGFzcz1cInN0cmlwZWRcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJzZWN0aW9uRm91clwiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInN0YWZmXCIgZGF0YS1qcz1cInN0YWZmXCI+PC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuPC9kaXY+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSAoIHAsIHsgTW9tZW50IH0gKSA9PiB7XG4gICAgY29uc3QgYWN0aW9ucyA9IHAub3B0cy5hY3Rpb25zLm1hcCggYWN0aW9uID0+IGA8b3B0aW9uIHZhbHVlPVwiJHthY3Rpb259XCI+JHthY3Rpb259PC9vcHRpb24+YCApLmpvaW4oJycpXG4gICAgcmV0dXJuIGBgICtcbmA8ZGl2PlxuICAgIDxmb3JtIGRhdGEtanM9XCJmb3JtXCI+XG4gICAgICAgIDxzcGFuPjwvc3Bhbj5cbiAgICAgICAgPHNlbGVjdCBkYXRhLWpzPVwiYWN0aW9uXCI+JHthY3Rpb25zfTwvc2VsZWN0PlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWpzPVwidmFsdWVcIiBwbGFjZWhvbGRlcj1cIiQwLjAwXCIvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWpzPVwiY2hlY2tOdW1iZXJcIi8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtanM9XCJjcmVhdGVkXCIgdmFsdWU9XCIke01vbWVudCgpLmZvcm1hdCgnTU1NIEQsIFlZWVknKX1cIiAvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWpzPVwiZGVzY3JpcHRpb25cIiBwbGFjZWhvbGRlcj1cImRlc2NyaXB0aW9uXCIvPlxuICAgIDwvZm9ybT5cbiAgICA8ZGl2IGRhdGEtdmlldz1cImJ1dHRvbkZsb3dcIj48L2Rpdj5cbjwvZGl2PmBcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxuYXYgZGF0YS1qcz1cImNvbnRhaW5lclwiIGNsYXNzPVwiYWRtaW4taGVhZGVyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNsZWFyZml4IGhpZGRlbi14c1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibG9nby1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtwLm9wdHMubG9nb31cIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGRhdGEtanM9XCJ1c2VyUGFuZWxcIiBjbGFzcz1cInB1bGwtcmlnaHQgaGlkZVwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLWpzPVwic2lnbm91dEJ0blwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCI+U2lnbiBPdXQ8L2J1dHRvbj5cbiAgICAgICAgICAgIDxzcGFuIGRhdGEtanM9XCJuYW1lXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gZGF0YS1qcz1cInByb2ZpbGVCdG5cIiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdXNlciBoaWRlXCI+PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvbmF2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXY+XG4gICAgPGRpdiBkYXRhLWpzPVwibmF2XCI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInZpZXdzXCIgZGF0YS1qcz1cInZpZXdzXCI+PC9kaXY+XG48L2Rpdj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4ge1xuICAgIGNvbnN0IGRpc2FibGVkID0gcC5kaXNhYmxlZCA/ICdkaXNhYmxlZCc6ICcnXG5cbnJldHVybiBgYCArXG5gPHNlY3Rpb24gY2xhc3M9XCIke3AuaGlkZSA/ICdmZC1oaWRkZW4gZmQtaGlkZScgOiAnJ31cIj5gICtcbk9iamVjdC5rZXlzKCBwLm1vZGVsLnN0YXRlcyApLm1hcCggc3RhdGVOYW1lID0+XG4gICAgYDxkaXYgZGF0YS1qcz1cIiR7c3RhdGVOYW1lfVwiIGNsYXNzPVwic3RhdGUgJHtzdGF0ZU5hbWV9ICR7c3RhdGVOYW1lID09PSAnc3RhcnQnID8gJycgOiAnZmQtaGlkZGVuIGZkLWhpZGUnfVwiPmAgK1xuICAgIHAubW9kZWwuc3RhdGVzWyBzdGF0ZU5hbWUgXS5tYXAoIGJ1dHRvbiA9PlxuICAgICAgICBidXR0b24uc3ZnXG4gICAgICAgICAgICA/IGJ1dHRvbi5zdmdcbiAgICAgICAgICAgIDogYDxidXR0b24gY2xhc3M9XCIke2Rpc2FibGVkfSAke2J1dHRvbi5jbGFzcyB8fCAnJ30gXCJkYXRhLWpzPVwiJHtidXR0b24ubmFtZX1cIj4ke2J1dHRvbi50ZXh0fTwvYnV0dG9uPmBcbiAgICApLmpvaW4oJycpICtcbiAgICBgPC9kaXY+YFxuKS5qb2luKCcnKSArXG5gPC9zZWN0aW9uPmBcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gKCBwICkgPT4gYDxzZWN0aW9uPlxuICAgIDxkaXYgY2xhc3M9XCJsZWZ0LXBhbmVsXCIgZGF0YS1qcz1cImxlZnRQYW5lbFwiPlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJsaW5rXCIgZGF0YS1qcz1cImJhY2tCdG5cIj4ke3JlcXVpcmUoJy4vbGliL2xlZnRBcnJvdycpKCl9PHNwYW4+QmFjayB0byBBZG1pbjwvc3Bhbj48L2J1dHRvbj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJsaW5rXCIgZGF0YS1qcz1cInJlc291cmNlXCI+PC9idXR0b24+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtdmlldz1cImxpc3RcIiBkYXRhLW5hbWU9XCJjb2xsZWN0aW9uc1wiPjwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImZkLWhpZGRlblwiIGRhdGEtanM9XCJjcmVhdGVDb2xsZWN0aW9uQnRuXCIgY2xhc3M9XCJzaWRlLWJ5LXNpZGUgbGlua1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuPis8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4+Q3JlYXRlIENvbGxlY3Rpb248L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgZGF0YS1qcz1cIm1haW5QYW5lbFwiIGNsYXNzPVwibWFpbi1wYW5lbFwiPjwvZGl2PlxuPC9zZWN0aW9uPmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXY+XG4gICAgPGgxPkNvbnRhY3Q8L2gxPlxuICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDIgZGF0YS1qcz1cImludHJvXCI+PC9oMj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwiY29udGFjdEluZm9cIj48L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG48L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdj5cbiAgICA8aDE+Q1NBIFByb2dyYW08L2gxPlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJhYm91dENTQVwiIGNsYXNzPVwiYWJvdXQtY3NhXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgIDwvc2VjdGlvbj5cbiAgICA8ZGl2IGRhdGEtanM9XCJkaXZpZGVySW1hZ2VPbmVcIj48L2Rpdj5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwiY3NhRml0XCIgY2xhc3M9XCJjc2EtZml0XCI+XG4gICAgICAgIDxoMiBkYXRhLWpzPVwiaG93RG9JS25vd1wiPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICAgICAgPHVsIGRhdGEtanM9XCJjc2FGaXRTdGF0ZW1lbnRzXCI+PC91bD5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cImNzYUNvbnRlbnRzXCIgY2xhc3M9XCJjc2EtY29udGVudHNcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwic2hhcmVFeGFtcGxlc1wiIGNsYXNzPVwic2hhcmUtZXhhbXBsZXNcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwic2hhcmVEZXNjcmlwdGlvbnNcIiBjbGFzcz1cInNoYXJlLWRlc2NyaXB0aW9uc1wiPjwvZGl2PlxuICAgICAgICA8cCBkYXRhLWpzPVwic2hhcmVQcmlvcml0eVwiPjwvcD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1yb3dcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4teWVsbG93XCIgZGF0YS1qcz1cInNpZ251cEJ0blwiIHR5cGU9XCJidXR0b25cIj5TaWduIFVwIE5vdyE8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxkaXYgZGF0YS1qcz1cImRpdmlkZXJJbWFnZVR3b1wiPjwvZGl2PlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJjc2FEZWxpdmVyeVwiIGNsYXNzPVwiZGVsaXZlcnlcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRlbGl2ZXJ5LW1hdHJpeFwiIGRhdGEtanM9XCJkZWxpdmVyeU1hdHJpeFwiPjwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwiY3NhQ3VzdG9taXphdGlvblwiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICAgICAgPHA+PHA+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJhZGRPbnNcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwiYWRkT25JdGVtc1wiIGNsYXNzPVwiYWRkLW9uc1wiPjwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwicGF5bWVudFwiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICAgICAgPHA+PC9wPlxuICAgICAgICA8cCBkYXRhLWpzPVwicGF5YWJsZVRvXCI+PC9wPlxuICAgICAgICA8ZGl2IGRhdGEtanM9XCJjb250YWN0XCIgY2xhc3M9XCJjb250YWN0XCI+PC9kaXY+XG4gICAgICAgIDxwIGRhdGEtanM9XCJlbWFpbFVzXCI+PC9wPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXJvd1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi15ZWxsb3dcIiBkYXRhLWpzPVwic2lnbnVwQnRuXCIgdHlwZT1cImJ1dHRvblwiPlNpZ24gVXAgTm93ITwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG48L2Rpdj5gIiwiY29uc3QgRm9ybWF0ID0gcmVxdWlyZSgnLi4vLi4vRm9ybWF0JylcblxubW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcbiAgICBjb25zdCBwcmljZSA9IHAudW5pdCA/IGAke3AucHJpY2V9IHBlciAke3AudW5pdH1gIDogcC5wcmljZVxuXG5yZXR1cm4gYGAgK1xuYDxkaXYgY2xhc3M9XCJpdGVtLWRldGFpbFwiPlxuICAgIDxkaXY+XG4gICAgICAgIDxzcGFuPiR7cC5oZWFkaW5nfTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+fDwvc3Bhbj5cbiAgICAgICAgPHNwYW4+JHtwcmljZX08L3NwYW4+XG4gICAgPC9kaXY+XG4gICAgPHA+JHtGb3JtYXQuUGFyc2VUZXh0TGlua3MoIHAuaW5mb3JtYXRpb24gfHwgcC5kZXNjcmlwdGlvbiApfTwvcD5cbjwvZGl2PmBcbn0iLCJtb2R1bGUuZXhwb3J0cyA9ICggcCwgZm9ybWF0ICkgPT4ge1xuICAgIGNvbnN0IG5lZ2F0aXZlQ2xhc3MgPSBwLmlzTmVnYXRpdmUgPyAnbmVnYXRpdmUnIDogJydcblxucmV0dXJuIGBgICtcbmA8bGkgZGF0YS1qcz1cInRyYW5zYWN0aW9uXCIgZGF0YS1pZD1cIiR7cC5pZH1cIj5cbiAgICA8c3BhbiBjbGFzcz1cImNlbGxcIj48L3NwYW4+XG4gICAgPHNwYW4gZGF0YS1hdHRyPVwiYWN0aW9uXCIgY2xhc3M9XCJjZWxsXCI+JHtwLmFjdGlvbn08L3NwYW4+XG4gICAgPHNwYW4gZGF0YS1hdHRyPVwidmFsdWVcIiBjbGFzcz1cImNlbGwgJHtuZWdhdGl2ZUNsYXNzfVwiPiR7Zm9ybWF0LmN1cnJlbmN5KE1hdGguYWJzKHAudmFsdWUpKX08L3NwYW4+XG4gICAgPHNwYW4gZGF0YS1hdHRyPVwiY2hlY2tOdW1iZXJcIiBjbGFzcz1cImNlbGxcIj4ke3AuY2hlY2tOdW1iZXIgfHwgJyd9PC9zcGFuPlxuICAgIDxzcGFuIGRhdGEtYXR0cj1cImNyZWF0ZWRcIiBjbGFzcz1cImNlbGxcIj4ke2Zvcm1hdC5tb21lbnQocC5jcmVhdGVkKS5mb3JtYXQoJ01NTSBELCBZWVlZJyl9PC9zcGFuPlxuICAgIDxzcGFuIGRhdGEtYXR0cj1cImRlc2NyaXB0aW9uXCIgY2xhc3M9XCJjZWxsXCI+JHtwLmRlc2NyaXB0aW9ufTwvc3Bhbj5cbjwvbGk+YFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcblxuICAgIGNvbnN0IHJvd3MgPSBwLmZpZWxkcy5tYXAoIGZpZWxkID0+IHtcbiAgICAgICAgY29uc3Qgcm93VmFsdWUgPSBmaWVsZC5uYW1lID09PSAnbmV2ZXJSZWNlaXZlJ1xuICAgICAgICAgICAgPyBgPGRpdiBkYXRhLWpzPVwibmV2ZXJSZWNlaXZlXCIgY2xhc3M9XCJjZWxsXCI+PC9kaXY+YFxuICAgICAgICAgICAgOiBmaWVsZC5uYW1lID09PSAnb25wYXltZW50cGxhbidcbiAgICAgICAgICAgICAgICA/IGA8c2VsZWN0IGRhdGEtanM9XCJvbnBheW1lbnRwbGFuXCIgY2xhc3M9XCJjZWxsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwidHJ1ZVwiPlRydWU8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJmYWxzZVwiPkZhbHNlPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PmBcbiAgICAgICAgICAgICAgICA6IGA8ZGl2IGRhdGEtbmFtZT1cIiR7ZmllbGQubmFtZX1cIiBkYXRhLWpzPVwiJHtmaWVsZC5uYW1lfVwiIGNsYXNzPVwiY2VsbFwiIGNvbnRlbnRlZGl0YWJsZT1cInRydWVcIj48L2Rpdj5gXG5cbiAgICAgICAgcmV0dXJuIGBgICtcbiAgICAgICAgYDxkaXYgY2xhc3M9XCJ0YWJsZS1yb3cgJHtmaWVsZC5uYW1lfVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNlbGxcIj4ke2ZpZWxkLmxhYmVsfTwvZGl2PlxuICAgICAgICAgICAgJHtyb3dWYWx1ZX1cbiAgICAgICAgPC9kaXY+YFxuICAgIH0gKS5qb2luKCcnKVxuXG4gICAgcmV0dXJuIGBgICtcbiAgICBgPGRpdiBjbGFzcz1cImZkLWhpZGUgZmQtaGlkZGVuIHNlY3Rpb25cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNlY3Rpb24taGVhZGluZ1wiPlxuICAgICAgICAgICAgPGgzPkN1c3RvbWVyIEluZm88L2gzPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlc2V0LWJ0biBmZC1oaWRkZW5cIiBkYXRhLWpzPVwicmVzZXRCdG5cIj5SZXNldDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkYXRhXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBkYXRhLWpzPVwiaW5mb1RhYmxlXCIgY2xhc3M9XCJjdXN0b21lci10YWJsZVwiPiR7cm93c308L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBkYXRhLWpzPVwiZWRpdFN1bW1hcnlcIiBjbGFzcz1cImVkaXQtc3VtbWFyeSBmZC1oaWRkZW5cIj5cbiAgICAgICAgICAgICAgICA8ZGl2PlN1bW1hcnkgb2YgQ2hhbmdlczwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cImNoYW5nZXNcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic2F2ZS1idG5cIiBkYXRhLWpzPVwic2F2ZUJ0blwiPlNhdmUgQ2hhbmdlczwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmBcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gKCB7IG9wdHMgfSApID0+XG5gPHNlY3Rpb24+XG4gICAgPHA+JHtvcHRzLm1lc3NhZ2V9PC9wPlxuICAgIDxkaXYgY2xhc3M9XCJidXR0b24tcm93XCI+XG4gICAgICAgPGJ1dHRvbiBkYXRhLWpzPVwic3VibWl0QnRuXCIgY2xhc3M9XCJidG4tc3VibWl0XCI+RGVsZXRlPC9idXR0b24+XG4gICAgICAgPGJ1dHRvbiBkYXRhLWpzPVwiY2FuY2VsQnRuXCIgY2xhc3M9XCJidG4tY2FuY2VsXCI+Q2FuY2VsPC9idXR0b24+XG4gICAgPC9kaXY+XG48L3NlY3Rpb24+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IFxuYDxsaSBkYXRhLWRhdGU9XCIke3AuZGF0ZS5mb3JtYXQoJ1lZWVlNTUREJyl9XCIgY2xhc3M9XCJkZWxpdmVyeS1kYXRlICR7cC5zZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAnJ30gJHtwLnVuc2VsZWN0YWJsZSA/ICd1bnNlbGVjdGFibGUnIDogJyd9XCI+XG4gICAgPGRpdj4ke3AuZGF0ZS5mb3JtYXQoJ2RkZCcpfTwvZGl2PlxuICAgIDxkaXY+JHtwLmRhdGUuZm9ybWF0KCdNTU0nKX08L2Rpdj5cbiAgICA8ZGl2PiR7cC5kYXRlLmZvcm1hdCgnRCcpfTwvZGl2PlxuPC9kaXY+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSBkYXR1bSA9PlxuYDxkaXY+XG4gICAgPHNwYW4+JHtkYXR1bS5sYWJlbCB8fCBkYXR1bS5uYW1lfTwvc3Bhbj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBgPHNlY3Rpb24gY2xhc3M9XCJuby1zZWxlY3QgZmQtaGlkZGVuXCI+RHJhZ2dpbmcgSXRlbTwvc2VjdGlvbj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4ge1xuICAgIGNvbnN0IGFjdGlvbnMgPSBwLmFjdGlvbnMubWFwKCBhY3Rpb24gPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGFjdGlvbiA9PT0gcC5hY3Rpb24gPyBgc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiYDogYGBcbiAgICAgICAgcmV0dXJuIGA8b3B0aW9uIHZhbHVlPVwiJHthY3Rpb259XCIgJHtzZWxlY3RlZH0+JHthY3Rpb259PC9vcHRpb24+YFxuICAgIH0gKS5qb2luKCcnKVxuICAgIHJldHVybiBgYCArXG5gPGxpIGRhdGEtanM9XCJlZGl0VHJhbnNhY3Rpb25cIiBjbGFzcz1cImVkaXQtdHJhbnNhY3Rpb25cIj5cbiAgICA8c3Bhbj48L3NwYW4+XG4gICAgPHNlbGVjdCBkYXRhLWF0dHI9XCJhY3Rpb25cIj4ke2FjdGlvbnN9PC9zZWxlY3Q+XG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1hdHRyPVwidmFsdWVcIiB2YWx1ZT1cIiR7cC52YWx1ZX1cIi8+XG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1hdHRyPVwiY2hlY2tOdW1iZXJcIiB2YWx1ZT1cIiR7cC5jaGVja051bWJlciB8fCAnJ31cIi8+XG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1hdHRyPVwiY3JlYXRlZFwiIHZhbHVlPVwiJHtwLmNyZWF0ZWQgfHwgJyd9XCIgLz5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWF0dHI9XCJkZXNjcmlwdGlvblwiIHZhbHVlPVwiJHtwLmRlc2NyaXB0aW9uIHx8ICcnfVwiLz5cbjwvbGk+YFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IGA8ZGl2PiR7cC5sYWJlbH06IDxzcGFuPiR7cC5vbGRWYWx1ZX08L3NwYW4+dG88c3Bhbj4ke3AubmV3VmFsdWV9PC9zcGFuPjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4gYDxkaXY+PC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gKCkgPT5cbmA8ZGl2PlxuICAgIDxwPkEgPGEgaHJlZj0nbWFpbHRvOnRvcGhlcmJhcm9uQGdtYWlsLmNvbSc+RnV0dXJlRGF5czwvYT4gU2l0ZTwvcD5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiB7XG4gICAgY29uc3QgaGVhZGluZyA9IHAub3B0cy5oZWFkaW5nID8gYDxkaXYgY2xhc3M9XCJoZWFkaW5nXCI+JHtwLm9wdHMuaGVhZGluZ308L2Rpdj5gIDogYGAsXG4gICAgICAgcHJvbXB0ICA9IHAub3B0cy5wcm9tcHQgPyAgYDxkaXYgY2xhc3M9XCJwcm9tcHRcIj4ke3Aub3B0cy5wcm9tcHR9PC9kaXY+YCA6IGBgLFxuICAgICAgIGZpZWxkcyA9IHAuR2V0Rm9ybUZpZWxkcyggcC5hdHRyaWJ1dGVzLCBwLm1vZGVsICksXG4gICAgICAgYnV0dG9uUm93ID0gcC5vcHRzLmhpZGVCdXR0b25Sb3dcbiAgICAgICAgPyBgYFxuICAgICAgICA6IGA8ZGl2IGNsYXNzPVwiYnRuLXJvd1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1zdWJtaXRcIiBkYXRhLWpzPVwic3VibWl0QnRuXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDxzcGFuPiR7cC5vcHRzLnN1Ym1pdFRleHQgfHwgJ1N1Ym1pdCd9PC9zcGFuPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLWNhbmNlbFwiIGRhdGEtanM9XCJjYW5jZWxCdG5cIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4+JHtwLm9wdHMuY2FuY2VsVGV4dCB8fCAnQ2FuY2VsJ308L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+YFxuXG5yZXR1cm4gYDxzZWN0aW9uPlxuICAgICR7aGVhZGluZ31cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ib3hcIj5cbiAgICAgICAgJHtwcm9tcHR9XG4gICAgICAgIDxmb3JtPiR7ZmllbGRzfTwvZm9ybT5cbiAgICAgICAgJHtidXR0b25Sb3d9ICBcbiAgICA8L2Rpdj5cbjwvc2VjdGlvbj5gXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2PlxuICAgIDxoMT5HZXQgSW52b2x2ZWQ8L2gxPlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJlbXBsb3ltZW50XCIgY2xhc3M9XCJzdHJpcGVkXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgICAgICA8cD48L3A+XG4gICAgICAgIDx1bCBjbGFzcz1cInBvc2l0aW9uc1wiIGRhdGEtanM9XCJvcGVuUG9zaXRpb25zXCI+PC91bD5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gY2xhc3M9XCJpbnRlcm5zaGlwc1wiIGRhdGEtanM9XCJpbnRlcm5zaGlwc1wiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICAgICAgPHA+PC9wPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBkYXRhLWpzPVwiaW50ZXJuRHV0aWVzXCI+XG4gICAgICAgICAgICAgICAgPGgzPjwvaDM+XG4gICAgICAgICAgICAgICAgPHVsIGRhdGEtanM9XCJkdXR5TGlzdFwiPjwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cImludGVyblF1YWxpZmljYXRpb25zXCI+XG4gICAgICAgICAgICAgICAgPGgzPjwvaDM+XG4gICAgICAgICAgICAgICAgPHVsIGRhdGEtanM9XCJxdWFsaWZpY2F0aW9uTGlzdFwiPjwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cImludGVybkNvbXBlbnNhdGlvblwiPlxuICAgICAgICAgICAgICAgIDxoMz48L2gzPlxuICAgICAgICAgICAgICAgIDx1bCBkYXRhLWpzPVwiY29tcGVuc2F0aW9uTGlzdFwiPjwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxwIGRhdGEtanM9XCJhcHBsaWNhdGlvblwiPjwvcD5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cInZvbHVudGVlclwiIGNsYXNzPVwic3RyaXBlZFwiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICAgICAgPHA+PC9wPlxuICAgIDwvc2VjdGlvbj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gKCB7IG9wdHMsIEltYWdlU3JjIH0gKSA9PiB7XG4gICAgY29uc3QgZmllbGRzID0gb3B0cy5maWVsZHMubWFwKCBmaWVsZCA9PiBgPGxpIGRhdGEtbmFtZT1cIiR7ZmllbGQubmFtZX1cIj4ke2ZpZWxkLmxhYmVsfTwvbGk+YCApLmpvaW4oJycpXG5cbnJldHVybiBgYCArXG5gPGRpdj5cbiAgICA8ZGl2PlxuICAgICAgICA8aW1nIGRhdGEtc3JjPVwiJHtJbWFnZVNyYygnaGVhZGVyX3N1bicpfVwiIC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICR7cmVxdWlyZSgnLi9saWIvanVzdGlmeScpfVxuICAgICAgICAgICAgPGRpdiBkYXRhLWpzPVwidGl0bGVcIiBkYXRhLW5hbWU9XCIke29wdHMuaG9tZS5uYW1lfVwiPiR7b3B0cy5ob21lLmxhYmVsfTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHVsIGRhdGEtanM9XCJuYXZcIj4ke2ZpZWxkc308L3VsPlxuICAgIDwvZGl2PlxuICAgIDxkaXY+XG48L2Rpdj5gXG59IiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdj5cbiAgICA8aW1nIGRhdGEtc3JjPVwiJHtwLkltYWdlU3JjKCdjb3JudWNvcGlhJyl9XCIgLz5cbiAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheVwiPlxuICAgICAgICA8ZGl2IGRhdGEtanM9XCJzbG9nYW5cIj48L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4teWVsbG93XCIgZGF0YS1qcz1cImpvaW5CdG5cIiB0eXBlPVwiYnV0dG9uXCI+Sm9pbiBvdXIgQ1NBITwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4ge1xuICAgIGNvbnN0IHdlYnNpdGUgPSBwLnVybCA/IGA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiJHtwLnVybH1cIj5XZWJzaXRlPC9hPmAgOiBgYCxcbiAgICAgICAgZGlyZWN0aW9ucyA9IHAuc3RyZWV0ICYmIHAuY2l0eVN0YXRlWmlwID8gYDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vbWFwcy5nb29nbGUuY29tLz9xPSR7cC5zdHJlZXR9LCAke3AuY2l0eVN0YXRlWmlwfVwiPkRpcmVjdGlvbnM8L2E+YCA6IGBgXG5cbnJldHVybiBgYCArXG5gPGRpdiBjbGFzcz1cImluZm8td2luZG93XCI+XG4gICAgPGRpdj4ke3AubmFtZX08L2Rpdj5cbiAgICA8ZGl2PlxuICAgICAgICA8ZGl2PiR7cC5zdHJlZXQgfHwgJyd9PC9kaXY+XG4gICAgICAgIDxkaXY+JHtwLmNpdHlTdGF0ZVppcCB8fCAnJ308L2Rpdj5cbiAgICAgICAgPGRpdj4ke3AucGhvbmVudW1iZXIgfHwgJyd9PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdj4ke2RpcmVjdGlvbnN9PC9kaXY+XG4gICAgICAgIDxkaXY+JHt3ZWJzaXRlfTwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+YFxuXG59IiwiY29uc3QgZ2V0SGVhZGluZyA9ICggcCA9IHsgb3B0czp7fSB9ICkgPT4ge1xuICAgIGlmKCAhcC5vcHRzIHx8ICFwLm9wdHMubmFtZSApIHJldHVybiBgYFxuICAgIHJldHVybiBwLm9wdHMudG9nZ2xlXG4gICAgICAgID8gYDxkaXYgZGF0YS1qcz1cInRvZ2dsZVwiIGNsYXNzPVwiaGVhZGluZyBzaWRlLWJ5LXNpZGUgdG9nZ2xlXCI+XG4gICAgICAgICAgICAke3AuR2V0SWNvbignY2FyZXQtZG93bicpfVxuICAgICAgICAgICAgPHNwYW4+JHtwLm9wdHMubmFtZX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+YFxuICAgICAgICA6IGA8aDMgY2xhc3M9XCJoZWFkaW5nXCI+JHtwLm9wdHMubmFtZX08L2gzPmBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcCApIHtcbiAgICBjb25zdCBidXR0b25DbGFzcyA9IHAubW9kZWwuaXNEb2N1bWVudExpc3QgPyAnZmxvYXRpbmcnIDogJ2J0bi15ZWxsb3cnXG5cbnJldHVybiBgYCArXG5gPHNlY3Rpb24+XG4gICAgJHtnZXRIZWFkaW5nKHApfVxuICAgIDxvbCBkYXRhLWpzPVwibGlzdFwiIGNsYXNzPVwibGlzdCAke3AubW9kZWwuZHJhZ2dhYmxlIHx8IHAubW9kZWwuZHJvcHBhYmxlID8gJ25vLXNlbGVjdCcgOiAnJyB9XCI+PC9vbD5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXJvd1wiPlxuICAgICAgICAke3AubW9kZWwucmVzZXQgPyBgPGJ1dHRvbiBjbGFzcz1cIiR7YnV0dG9uQ2xhc3N9XCIgZGF0YS1qcz1cInJlc2V0QnRuXCIgdHlwZT1cImJ1dHRvblwiPlJlc2V0PC9idXR0b24+YCA6IGBgfVxuICAgICAgICAke3AubW9kZWwuc2F2ZSA/IGA8YnV0dG9uIGNsYXNzPVwiJHtidXR0b25DbGFzc31cIiBkYXRhLWpzPVwic2F2ZUJ0blwiIHR5cGU9XCJidXR0b25cIj5TYXZlPC9idXR0b24+YCA6IGBgfVxuICAgICAgICAke3AubW9kZWwuYWRkID8gYDxidXR0b24gY2xhc3M9XCIke2J1dHRvbkNsYXNzfVwiIGRhdGEtanM9XCJhZGRCdG5cIiB0eXBlPVwiYnV0dG9uXCI+QWRkPC9idXR0b24+YCA6IGBgfVxuICAgIDwvZGl2PlxuPC9zZWN0aW9uPmBcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiB7XG4gICAgY29uc3QgbmFtZSA9IHAudXJsID8gYDxkaXY+PGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIiR7cC51cmx9XCI+JHtwLm5hbWUgfHwgJyd9PC9hPjwvZGl2PmAgOiBgPGRpdj4ke3AubmFtZSB8fCAnJ308L2Rpdj5gXG4gICAgY29uc3QgaG91cnMgPSBwLmhvdXJzID8gcC5ob3Vycy5zcGxpdCgnLCcpLm1hcCggaXRlbSA9PiBgPGRpdj4ke2l0ZW19PC9kaXY+YCApLmpvaW4oJycpIDogYGBcblxucmV0dXJuIGBgICtcbmA8bGkgY2xhc3M9XCJsb2NhdGlvblwiPlxuICAgICR7bmFtZX1cbiAgICA8ZGl2PiR7cC5sYWJlbCB8fCAnJ308L2Rpdj5cbiAgICA8ZGl2PiR7cC52ZW51ZSB8fCAnJ308L2Rpdj5cbiAgICA8ZGl2PiR7cC5zdHJlZXQgfHwgJyd9PC9kaXY+XG4gICAgPGRpdj4ke3AuY2l0eVN0YXRlWmlwIHx8ICcnfTwvZGl2PlxuICAgIDxkaXY+JHtwLnBob25lbnVtYmVyIHx8ICcnfTwvZGl2PlxuICAgIDxkaXY+PGEgaHJlZj1cIm1haWx0bzoke3AuZW1haWx9XCI+JHtwLmVtYWlsIHx8ICcnfTwvYT48L2Rpdj5cbiAgICAke2hvdXJzfVxuPC9saT5gXG59IiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcbiAgICBjb25zdCBjYXRlZ29yaWVzID0gcC5vcHRzLmNhdGVnb3JpZXMubWFwKCBhdHRyID0+XG4gICAgICAgIGA8bGk+XG4gICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtbmFtZT1cIiR7YXR0ci5uYW1lfVwiIHR5cGU9XCJjaGVja2JveFwiIGNoZWNrZWQgLz5cbiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCIke2F0dHIubmFtZX1cIj4ke2F0dHIubGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9saT5gXG4gICAgKS5qb2luKCcnKVxuXG5yZXR1cm4gYGAgK1xuYDxkaXY+XG4gICAgPGgxPkxvY2F0aW9uczwvaDE+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1hcC13cmFwXCI+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJtYXBcIj48L2Rpdj5cbiAgICAgICAgICAgIDx1bCBjbGFzcz1cImxlZ2VuZFwiIGRhdGEtanM9XCJsZWdlbmRcIj5cbiAgICAgICAgICAgICAgICAke2NhdGVnb3JpZXN9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8c2VjdGlvbj5cbiAgICAgICAgPHAgZGF0YS1qcz1cImludHJvXCI+PC9wPlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwiZmFybWVyc01hcmtldHNcIiBjbGFzcz1cInN0cmlwZWRcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICAgICAgPHVsIGRhdGEtanM9XCJmYXJtZXJNYXJrZXRzTGlzdFwiPjwvdWw+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJyZXRhaWxPdXRsZXRzXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgICAgICA8cD48L3A+XG4gICAgICAgIDx1bCBkYXRhLWpzPVwicmV0YWlsT3V0bGV0c0xpc3RcIj48L3VsPlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwicmVzdGF1cmFudHNcIiBjbGFzcz1cInN0cmlwZWRcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICAgICAgPHVsIGRhdGEtanM9XCJyZXN0YXVyYW50c0xpc3RcIj48L3VsPlxuICAgIDwvc2VjdGlvbj4gIFxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJwaWNrdXBMb2NhdGlvbnNcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICAgICAgPHVsIGRhdGEtanM9XCJncm91cExvY2F0aW9uc0xpc3RcIj48L3VsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXJvd1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi15ZWxsb3dcIiBkYXRhLWpzPVwic2lnbnVwQnRuXCIgdHlwZT1cImJ1dHRvblwiPlNpZ24gVXAgTm93ITwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG48L2Rpdj5gXG59IiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdj5cbiAgICA8ZGl2IGNsYXNzPVwibWFpbi1zZWFyY2hcIj5cbiAgICAgICAgPGRpdiBkYXRhLXZpZXc9XCJtZW1iZXJUeXBlYWhlYWRcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGRhdGEtdmlldz1cImN1c3RvbWVySW5mb1wiPjwvZGl2PlxuICAgIDxkaXYgZGF0YS12aWV3PVwic2Vhc29uc1wiPjwvZGl2PlxuICAgIDxkaXYgZGF0YS12aWV3PVwib3JkZXJPcHRpb25zXCI+PC9kaXY+XG4gICAgPGRpdiBkYXRhLXZpZXc9XCJ3ZWVrT3B0aW9uc1wiPjwvZGl2PlxuICAgIDxkaXYgZGF0YS12aWV3PVwic2hhcmVQYXRjaFwiPjwvZGl2PlxuICAgIDxkaXYgZGF0YS12aWV3PVwidHJhbnNhY3Rpb25zXCI+PC9kaXY+XG48L2Rpdj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4ge1xuICAgIGNvbnN0IGZpZWxkcyA9IHAuZmllbGRzLm1hcCggZmllbGQgPT5cbiAgICAgICAgYDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiJHtmaWVsZC5uYW1lfVwiPiR7ZmllbGQubGFiZWx9PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCIke2ZpZWxkLnR5cGV9XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cIiR7ZmllbGQubmFtZX1cIiBkYXRhLWpzPVwiJHtmaWVsZC5uYW1lfVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGZvcm0tY29udHJvbC1mZWVkYmFjayBoaWRlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PmBcbiAgICApLmpvaW4oJycpXG5cbnJldHVybiBgYCArXG5gPGRpdiBjbGFzcz1cIk1lbWJlckluZm9cIiBkYXRhLWpzPVwiY29udGFpbmVyXCI+XG4gICAgPHA+UGxlYXNlIHByb3ZpZGUgdXMgd2l0aCBzb21lIGluZm9ybWF0aW9uIGFib3V0IHlvdXJzZWxmPC9wPlxuICAgIDxmb3JtPlxuICAgICAgICAke2ZpZWxkc31cbiAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJQcmV2ZW50Q2hyb21lQXV0b2NvbXBsZXRlXCIgbmFtZT1cIlByZXZlbnRDaHJvbWVBdXRvY29tcGxldGVcIiBhdXRvY29tcGxldGU9XCJhZGRyZXNzLWxldmVsNFwiIC8+PC9kaXY+XG4gICAgPC9mb3JtPlxuPC9kaXY+YFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdj5cbiAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+U2VhcmNoIEN1c3RvbWVyczwvbGFiZWw+ICBcbiAgICA8aW5wdXQgZGF0YS1qcz1cImN1c3RvbWVySW5wdXRcIiBjbGFzcz1cImlucHV0LXN0ZCB0eXBlPVwidGV4dFwiPlxuPC9kaXY+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IGBgIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IFxuYDxkaXYgY2xhc3M9XCJmZC1oaWRlIGZkLWhpZGRlbiBzZWN0aW9uXCI+XG4gICAgPGRpdiBjbGFzcz1cInNlY3Rpb24taGVhZGluZ1wiPlxuICAgICAgICA8aDM+T3JkZXIgT3B0aW9uczwvaDM+XG4gICAgICAgIDxzcGFuIGRhdGEtanM9XCJzZWFzb25MYWJlbFwiPjwvc3Bhbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlc2V0LWJ0biBmZC1oaWRkZW5cIiBkYXRhLWpzPVwicmVzZXRCdG5cIj5SZXNldDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXRhXCI+XG4gICAgICAgICAgICA8b2wgZGF0YS1qcz1cIm9wdGlvbnNcIj48L29sPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwiZWRpdFN1bW1hcnlcIiBjbGFzcz1cImVkaXQtc3VtbWFyeSBmZC1oaWRkZW5cIj5cbiAgICAgICAgICAgIDxkaXY+U3VtbWFyeSBvZiBDaGFuZ2VzPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJjaGFuZ2VzXCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxzcGFuPldlZWtseSBwcmljZSBhZGp1c3RtZW50OiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJvcmlnaW5hbC1wcmljZVwiIGRhdGEtanM9XCJvcmlnaW5hbFdlZWtseVByaWNlXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuPnRvPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibmV3LXByaWNlXCIgZGF0YS1qcz1cIm5ld1dlZWtseVByaWNlXCI+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPHNlY3Rpb24+XG4gICAgPGg0PlJlcG9ydGluZzwvaDQ+XG4gICAgPGZvcm0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGFiZWw+TmFtZTo8L2xhYmVsPlxuICAgICAgICAgICAgPHNlbGVjdCBkYXRhLWpzPVwicmVwb3J0XCI+PC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsPkZyb206PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtanM9XCJmcm9tXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGFiZWw+VG86PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtanM9XCJ0b1wiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1qcz1cInZpZXdCdG5cIiBjbGFzcz1cImxpbmtcIj5WaWV3PC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWpzPVwiZXhwb3J0QnRuXCIgY2xhc3M9XCJsaW5rXCI+RXhwb3J0PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgICA8ZGl2IGNsYXNzPVwicmVzdWx0c1wiIGRhdGEtanM9XCJyZXN1bHRzXCI+XG4gICAgICAgIDxoNCBjbGFzcz1cImZkLWhpZGVcIiBkYXRhLWpzPVwiZW1wdHlcIj5ObyByZXN1bHRzPC9oND5cbiAgICAgICAgPG9sIGNsYXNzPVwiY29sdW1uc1wiIGRhdGEtanM9XCJjb2x1bW5zXCI+PC9vbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd3NcIiBkYXRhLWpzPVwicm93c1wiPjwvZGl2PlxuICAgIDwvZGl2PlxuPC9zZWN0aW9uPmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBcbmA8ZGl2IGNsYXNzPVwiZmQtaGlkZSBmZC1oaWRkZW4gc2VjdGlvblwiPlxuICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLWhlYWRpbmdcIj5cbiAgICAgICAgPGgzPkFsbCBTZWFzb25zPC9oMz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidGFibGVcIj5cbiAgICAgICAgPG9sIGNsYXNzPVwidGFibGUtcm93XCIgZGF0YS1qcz1cImxpc3RcIj48L29sPlxuICAgIDwvZGl2PlxuPC9kaXY+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcbiAgICBjb25zdCBkYXRhSWQgPSBwLm1lbWJlcnNoYXJlaWQgPyBgZGF0YS1pZD1cIiR7cC5tZW1iZXJzaGFyZWlkfVwiYCA6IGBgLFxuICAgICAgICAgIGNvdW50ID0gcC5jb3VudCA/IGA8c3Bhbj4oJHtwLmNvdW50fSk8L3NwYW4+YCA6IGBgXG5cbiAgICByZXR1cm4gYGAgK1xuICAgIGA8ZGl2ICR7ZGF0YUlkfVwiIGNsYXNzPVwic2hhcmUtbGFiZWxcIj5cbiAgICAgICAgPGRpdj48c3Bhbj4ke3AubGFiZWx9PC9zcGFuPiAke2NvdW50fTwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPHNwYW4+JHtwLmh1bWFuU3RhcnRkYXRlfTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuPi08L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj4ke3AuaHVtYW5FbmRkYXRlfTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+JHtwLmR1cmF0aW9ufSB3ZWVrczwvZGl2PlxuICAgIDwvZGl2PmBcbn1cbiIsImNvbnN0IEZvcm1hdCA9IHJlcXVpcmUoJy4uLy4uL0Zvcm1hdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXY+XG4gICAgPGg0PiR7cC5oZWFkaW5nfTwvaDQ+XG4gICAgPGRpdj48aW1nIGRhdGEtc3JjPVwiJHtGb3JtYXQuSW1hZ2VTcmMoIHAuaW1hZ2UgKX1cIiAvPjwvZGl2PlxuICAgIDxkaXY+JHtwLmxpc3RIZWFkaW5nfTwvZGl2PlxuICAgIDx1bD4ke0Zvcm1hdC5HZXRMaXN0SXRlbXMoIHAuc2FtcGxlTGlzdCApfTwvdWw+XG48L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IFxuYDxkaXYgY2xhc3M9XCJmZC1oaWRlIGZkLWhpZGRlblwiPlxuICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLWhlYWRpbmdcIj5cbiAgICAgICAgPGgzPkFkanVzdCBNZW1iZXIgU2hhcmUgT3B0aW9uczwvaDM+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJjbGVhcmZpeCBsaW5lLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+V2Vla3MgUmVtb3ZlZDogPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWpzPVwid2Vla3NSZW1vdmVkXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImFkanVzdG1lbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkFkanVzdG1lbnQ6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaXMtbmVnYXRpdmVcIiBkYXRhLWpzPVwid2Vla3NSZW1vdmVkUHJpY2VcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpbmUtaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5XZWVrcyBBZGRlZDogPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWpzPVwid2Vla3NBZGRlZFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1qcz1cImFkZGVkQWRqdXN0bWVudFwiIGNsYXNzPVwiYWRqdXN0bWVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QWRqdXN0bWVudDogPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpcy1wb3NpdGl2ZVwiIGRhdGEtanM9XCJ3ZWVrc0FkZGVkUHJpY2VcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBkYXRhLWpzPVwib3B0aW9uc1wiIGNsYXNzPVwibGluZS1pdGVtIGZkLWhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+T3B0aW9ucyBVcGRhdGU6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtanM9XCJzaGFyZU9wdGlvbkRlc2NyaXB0aW9uXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPldlZWtseSBwcmljZSBhZGp1c3RtZW50OiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWpzPVwid2Vla2x5QWRqdXN0bWVudFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5XZWVrcyBhZmZlY3RlZDogPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1qcz1cIndlZWtzQWZmZWN0ZWRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImFkanVzdG1lbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gQWRqdXN0bWVudDogPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtanM9XCJvcHRpb25zQWRqdXN0bWVudFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Ub3RhbCBBZGp1c3RtZW50OiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtanM9XCJhZGp1c3RtZW50XCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtYWlsXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCBkYXRhLWpzPVwic2VuZEVtYWlsXCIgdHlwZT1cImNoZWNrYm94XCI+U2VuZCBFbWFpbDwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS12aWV3PVwiYnV0dG9uRmxvd1wiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbiIsImNvbnN0IEZvcm1hdCA9IHJlcXVpcmUoJy4uLy4uL0Zvcm1hdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXYgY2xhc3M9XCJiaW9cIj5cbiAgICA8ZGl2PlxuICAgICAgICA8aW1nIGRhdGEtc3JjPVwiJHtGb3JtYXQuSW1hZ2VTcmMoIHAuaW1hZ2UgKX1cIiAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheVwiPlxuICAgICAgICAgICAgPGRpdj4ke3AuYmlvIHx8ICcnfTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2PiR7cC5uYW1lfTwvZGl2PlxuPC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBgYCArXG5gPGRpdiBjbGFzcz1cImNsZWFyZml4IGZkLWhpZGUgZmQtaGlkZGVuXCI+XG4gICAgPGRpdiBkYXRhLWpzPVwiaWNvblwiPjwvZGl2PlxuICAgIDxkaXY+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cInRpdGxlXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cIm1lc3NhZ2VcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXYgY2xhc3M9XCJmZC1oaWRlIGZkLWhpZGRlbiBzZWN0aW9uXCI+XG4gICAgPGRpdiBjbGFzcz1cImhlYWRpbmdcIj5cbiAgICAgICAgPHNwYW4+PC9zcGFuPlxuICAgICAgICA8aDM+VHJhbnNhY3Rpb25zPC9oMz5cbiAgICAgICAgPHNwYW4+VmFsdWU8L3NwYW4+XG4gICAgICAgIDxzcGFuPkNoZWNrICM8L3NwYW4+XG4gICAgICAgIDxzcGFuPkRhdGU8L3NwYW4+XG4gICAgICAgIDxzcGFuPkRlc2NyaXB0aW9uPC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxvbCBkYXRhLWpzPVwidHJhbnNhY3Rpb25zXCI+PC9vbD5cbiAgICA8ZGl2IGRhdGEtdmlldz1cImJ1dHRvbkZsb3dcIiBkYXRhLW5hbWU9XCJlZGl0QnV0dG9uc1wiPjwvZGl2PlxuICAgIDxkaXYgZGF0YS12aWV3PVwiYWRkVHJhbnNhY3Rpb25cIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYmFsYW5jZVwiPlxuICAgICAgICA8aDM+QmFsYW5jZTwvaDM+XG4gICAgICAgIDxzcGFuIGRhdGEtanM9XCJiYWxhbmNlXCI+PC9zcGFuPlxuICAgICAgICA8c3Bhbj48L3NwYW4+XG4gICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPGRpdiBkYXRhLXZpZXc9XCJidXR0b25GbG93XCIgZGF0YS1uYW1lPVwiZW1haWxCdXR0b25zXCI+PC9kaXY+XG4gICAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBcbmA8ZGl2IGNsYXNzPVwiZmQtaGlkZSBmZC1oaWRkZW5cIj5cbiAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi1oZWFkaW5nXCI+XG4gICAgICAgIDxoMz5XZWVrIE9wdGlvbnM8L2gzPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPHNwYW4+RGVsaXZlcnkgRGF5OiA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBkYXRhLWpzPVwiZGVsaXZlcnlEYXlcIj48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmVzZXQtYnRuIGhpZGRlblwiIGRhdGEtanM9XCJyZXNldEJ0blwiPlJlc2V0PC9idXR0b24+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRhdGFcIj5cbiAgICAgICAgICAgIDxvbCBkYXRhLWpzPVwiZGF0ZXNcIj48L29sPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwiZWRpdFN1bW1hcnlcIiBjbGFzcz1cImVkaXQtc3VtbWFyeSBoaWRkZW5cIj5cbiAgICAgICAgICAgIDxkaXY+U3VtbWFyeSBvZiBDaGFuZ2VzPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJjaGFuZ2VzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbHVtblwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PkFkZGVkIERhdGVzPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxvbCBkYXRhLWpzPVwic2VsZWN0ZWREYXRlc1wiIGNsYXNzPVwiYWRkZWQtZGF0ZXNcIj48L29sPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2x1bW5cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5SZW1vdmVkIERhdGVzPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxvbCBkYXRhLWpzPVwicmVtb3ZlZERhdGVzXCIgY2xhc3M9XCJyZW1vdmVkLWRhdGVzXCI+PC9vbD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8c3Bhbj5XZWVrIGNvdW50IGFkanVzdG1lbnQ6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByaWNlLWNoYW5nZVwiIGRhdGEtanM9XCJ3ZWVrQ2hhbmdlXCI+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcbiAgICBjb25zdCBzaXplT3B0aW9ucyA9IHAuc2l6ZU9wdGlvbnMubWFwKCBvcHRpb24gPT4gYDxkaXYgY2xhc3M9XCJjZWxsXCI+JHtvcHRpb24ubGFiZWx9IFNoYXJlPC9kaXY+YCApLmpvaW4oJycpLFxuICAgICAgICByb3dzID0gcC5kZWxpdmVyeU9wdGlvbnMubWFwKCBkZWxpdmVyeU9wdGlvbiA9PlxuICAgICAgICAgICAgYDxkaXY+YCArXG4gICAgICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJjZWxsXCI+JHtkZWxpdmVyeU9wdGlvbi5sYWJlbH08L2Rpdj5gICtcbiAgICAgICAgICAgICAgICBwLnNpemVPcHRpb25zLm1hcCggc2l6ZU9wdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlID0gKCBwYXJzZUZsb2F0KHNpemVPcHRpb24ucHJpY2UucmVwbGFjZSgnJCcsJycpKSArIHBhcnNlRmxvYXQoZGVsaXZlcnlPcHRpb24ucHJpY2UucmVwbGFjZSgnJCcsJycpKSApLnRvRml4ZWQoMilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiY2VsbFwiPiQke3ByaWNlfSAvIGJveDwvZGl2PmBcbiAgICAgICAgICAgICAgICB9ICkuam9pbignJykgK1xuICAgICAgICAgICAgYDwvZGl2PmBcbiAgICAgICAgKS5qb2luKCcnKVxuXG5yZXR1cm4gYGAgK1xuYDxkaXY+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNlbGxcIj5EZWxpdmVyeSBPcHRpb248L2Rpdj5cbiAgICAgICAgJHtzaXplT3B0aW9uc31cbiAgICA8L2Rpdj5cbiAgICAke3Jvd3N9XG48L2Rpdj5gXG5cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHAgPSB7fSApIHtcbnJldHVybiBgYCArXG5gPHN2ZyBjbGFzcz1cImNhcmV0LWRvd25cIiB2ZXJzaW9uPVwiMS4xXCIgY2xhc3M9XCJjYXJldC1kb3duXCIgJHt0aGlzLkljb25EYXRhSnMocCl9IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiXG5cdCB2aWV3Qm94PVwiMCAwIDI5Mi4zNjIgMjkyLjM2MlwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAyOTIuMzYyIDI5Mi4zNjI7XCJcblx0IHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XG48Zz5cblx0PHBhdGggZD1cIk0yODYuOTM1LDY5LjM3N2MtMy42MTQtMy42MTctNy44OTgtNS40MjQtMTIuODQ4LTUuNDI0SDE4LjI3NGMtNC45NTIsMC05LjIzMywxLjgwNy0xMi44NSw1LjQyNFxuXHRcdEMxLjgwNyw3Mi45OTgsMCw3Ny4yNzksMCw4Mi4yMjhjMCw0Ljk0OCwxLjgwNyw5LjIyOSw1LjQyNCwxMi44NDdsMTI3LjkwNywxMjcuOTA3YzMuNjIxLDMuNjE3LDcuOTAyLDUuNDI4LDEyLjg1LDUuNDI4XG5cdFx0czkuMjMzLTEuODExLDEyLjg0Ny01LjQyOEwyODYuOTM1LDk1LjA3NGMzLjYxMy0zLjYxNyw1LjQyNy03Ljg5OCw1LjQyNy0xMi44NDdDMjkyLjM2Miw3Ny4yNzksMjkwLjU0OCw3Mi45OTgsMjg2LjkzNSw2OS4zNzd6XCIvPlxuPC9nPjwvc3ZnPmBcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gKHA9e30pID0+IGA8c3ZnIHZlcnNpb249XCIxLjFcIiBkYXRhLWpzPVwiJHtwLm5hbWUgfHwgJ2NoZWNrbWFyayd9XCIgY2xhc3M9XCJjaGVja21hcmtcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIlxuXHQgd2lkdGg9XCI5Ny42MTlweFwiIGhlaWdodD1cIjk3LjYxOHB4XCIgdmlld0JveD1cIjAgMCA5Ny42MTkgOTcuNjE4XCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDk3LjYxOSA5Ny42MTg7XCJcblx0IHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XG48Zz5cblx0PHBhdGggZD1cIk05Ni45MzksMTcuMzU4TDgzLjk2OCw1Ljk1OWMtMC4zOTgtMC4zNTItMC45MjctMC41MzEtMS40NDktMC40OTRDODEuOTksNS41LDgxLjQ5Niw1Ljc0Myw4MS4xNDYsNi4xNDJMMzQuMSw1OS42ODhcblx0XHRMMTcuMzcyLDM3LjU0N2MtMC4zMTktMC40MjItMC43OTQtMC43MDEtMS4zMTktMC43NzNjLTAuNTI0LTAuMDc4LTEuMDU5LDAuMDY0LTEuNDgxLDAuMzg1TDAuNzk0LDQ3LjU2N1xuXHRcdGMtMC44ODEsMC42NjYtMS4wNTYsMS45Mi0wLjM5LDIuODAxbDMwLjk3NCw0MC45OTZjMC4zNjIsMC40NzksMC45MjIsMC43NzEsMS41MjIsMC43OTNjMC4wMjQsMCwwLjA0OSwwLDAuMDczLDBcblx0XHRjMC41NzQsMCwxLjEyMi0wLjI0NiwxLjUwMy0wLjY4bDYyLjY0NC03MS4yOTdDOTcuODUsMTkuMzUxLDk3Ljc2OSwxOC4wODYsOTYuOTM5LDE3LjM1OHpcIi8+XG48L2c+PC9zdmc+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSAocD17fSkgPT4gYDxzdmcgZGF0YS1qcz1cIiR7cC5uYW1lIHx8ICdlZGl0J31cIiBjbGFzcz1cImVkaXRcIiB4bWxuczpkYz1cImh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvXCIgeG1sbnM6Y2M9XCJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyNcIiB4bWxuczpyZGY9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjXCIgeG1sbnM6c3ZnPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6c29kaXBvZGk9XCJodHRwOi8vc29kaXBvZGkuc291cmNlZm9yZ2UubmV0L0RURC9zb2RpcG9kaS0wLmR0ZFwiIHhtbG5zOmlua3NjYXBlPVwiaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZVwiIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiPjxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLC05NTIuMzYyMTgpXCI+PHBhdGggc3R5bGU9XCJvcGFjaXR5OjE7Y29sb3I6IzAwMDAwMDtmaWxsOiMwMDAwMDA7c3Ryb2tlOm5vbmU7c3Ryb2tlLXdpZHRoOjQ7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaG9mZnNldDowO21hcmtlcjpub25lO3Zpc2liaWxpdHk6dmlzaWJsZTtkaXNwbGF5OmlubGluZTtvdmVyZmxvdzp2aXNpYmxlO2VuYWJsZS1iYWNrZ3JvdW5kOmFjY3VtdWxhdGU7ZmlsbC1vcGFjaXR5OjE7c3Ryb2tlLWRhc2hhcnJheTpub25lXCIgZD1cIk0gNzAgMTMgTCA2MS40Mzc1IDIxLjU2MjUgTCA3OC40Mzc1IDM4LjU2MjUgTCA4NyAzMCBMIDcwIDEzIHogTSA1OC41OTM3NSAyNC40MDYyNSBMIDIwLjQzNzUgNjIuNTYyNSBMIDM3LjQzNzUgNzkuNTYyNSBMIDc1LjU5Mzc1IDQxLjQwNjI1IEwgNTguNTkzNzUgMjQuNDA2MjUgeiBNIDE3Ljg0Mzc1IDY1LjY1NjI1IEwgMTMgODcgTCAzNC4zNDM3NSA4Mi4xNTYyNSBMIDE3Ljg0Mzc1IDY1LjY1NjI1IHogXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsOTUyLjM2MjE4KVwiLz48L2c+PC9zdmc+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSAocD17fSkgPT4gYDxzdmcgdmVyc2lvbj1cIjEuMVwiIGRhdGEtanM9XCIke3AubmFtZSB8fCAnZXJyb3InfVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMTguOTc4IDE4Ljk3OFwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxOC45NzggMTguOTc4O1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XHJcbjxnPlxyXG4gICAgPHBhdGggZD1cIk0xNi4wODgsMS42NzVjLTAuMTMzLTAuMTA0LTAuMzA2LTAuMTQ0LTAuNDctMC4xMDVjLTAuMDEzLDAuMDAyLTEuMjYxLDAuMjktMi41OTQsMC4yOVxyXG4gICAgICAgIGMtMS43ODgsMC0yLjc4OS0wLjQ3Ni0yLjk3NS0xLjQxNUM5Ljk5OSwwLjE5MSw5Ljc3OSwwLjAwNyw5LjUyMSwwYy0wLjI1Ny0wLjAwNy0wLjQ4NywwLjE2Ny0wLjU1LDAuNDE4XHJcbiAgICAgICAgQzguNzI3LDEuMzg2LDcuNzEsMS44NzcsNS45NSwxLjg3N2MtMS4zMzIsMC0yLjU3MS0wLjMwMi0yLjU4My0wLjMwNWMtMC4xNjYtMC4wNC0wLjM0LTAuMDA0LTAuNDc0LDAuMTAyXHJcbiAgICAgICAgQzIuNzYsMS43NzcsMi42ODEsMS45MzgsMi42ODEsMi4xMDh2NC44NjljMCwwLjA0LDAuMDA0LDAuMDc4LDAuMDEzLDAuMTE1YzAuMDU3LDEuNjQ3LDAuNjUsOC43MTQsNi41MjgsMTEuODIyXHJcbiAgICAgICAgYzAuMDgsMC4wNDMsMC4xNjksMC4wNjQsMC4yNTgsMC4wNjRjMC4wOTIsMCwwLjE4My0wLjAyMSwwLjI2Ni0wLjA2NmM1Ljc0LTMuMTM3LDYuNDQ1LTEwLjExNSw2LjUzMi0xMS43OTFcclxuICAgICAgICBjMC4wMTItMC4wNDYsMC4wMTktMC4wOTQsMC4wMTktMC4xNDRWMi4xMDhDMTYuMjk3LDEuOTM5LDE2LjIxOSwxLjc4LDE2LjA4OCwxLjY3NXogTTE1LjE5LDYuODU3XHJcbiAgICAgICAgYy0wLjAwNywwLjAzMS0wLjAxMiwwLjA2NC0wLjAxMywwLjA5N2MtMC4wNTMsMS4yOTgtMC41NzQsNy44MzItNS43MDEsMTAuODM4Yy01LjIxNS0yLjk2NS01LjY0Ni05LjUyNi01LjY4LTEwLjgzXHJcbiAgICAgICAgYzAtMC4wMjktMC4wMDQtMC4wNTgtMC4wMDktMC4wODVWMi43ODRDNC4zMjIsMi44NzcsNS4xMTIsMi45ODIsNS45NSwyLjk4MmMxLjkxMSwwLDIuOTY1LTAuNTQsMy41MzctMS4yMDhcclxuICAgICAgICBjMC41NTMsMC42NjEsMS41OTksMS4xOTEsMy41MzYsMS4xOTFjMC44MzksMCwxLjYzMS0wLjEwMSwyLjE2Ni0wLjE4OEwxNS4xOSw2Ljg1N0wxNS4xOSw2Ljg1N3pcIi8+XHJcbiAgICA8cG9seWdvbiBwb2ludHM9XCIxMC4yNDEsMTEuMjM3IDEwLjUyOSw1LjMxMSA4LjQ0OSw1LjMxMSA4Ljc1LDExLjIzNyBcdFx0XCIvPlxyXG4gICAgPHBhdGggZD1cIk05LjQ5NiwxMS44OTFjLTAuNjk0LDAtMS4xNzgsMC40OTgtMS4xNzgsMS4xODljMCwwLjY4MiwwLjQ3MSwxLjE5MSwxLjE3OCwxLjE5MVxyXG4gICAgICAgIGMwLjcwNiwwLDEuMTY0LTAuNTEsMS4xNjQtMS4xOTFDMTAuNjQ3LDEyLjM4OSwxMC4xODksMTEuODkxLDkuNDk2LDExLjg5MXpcIi8+XHJcbjwvZz48L3N2Zz5gXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gKHA9e30pID0+IGA8c3ZnIGNsYXNzPVwiZXhcIiBkYXRhLWpzPVwiJHtwLm5hbWUgfHwgJ2V4J31cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgdmVyc2lvbj1cIjEuMVwiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCA1MTIgNTEyXCIgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDUxMiA1MTJcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxnPjxnPjxwb2x5Z29uIHBvaW50cz1cIjQwNSwxMzYuNzk4IDM3NS4yMDIsMTA3IDI1NiwyMjYuMjAyIDEzNi43OTgsMTA3IDEwNywxMzYuNzk4IDIyNi4yMDIsMjU2IDEwNywzNzUuMjAyIDEzNi43OTgsNDA1IDI1NiwyODUuNzk4ICAgICAzNzUuMjAyLDQwNSA0MDUsMzc1LjIwMiAyODUuNzk4LDI1NiAgIFwiLz48L2c+PC9nPjwvc3ZnPmBcbiIsIm1vZHVsZS5leHBvcnRzID0gKHA9e30pID0+IGA8c3ZnIHZlcnNpb249XCIxLjFcIiBjbGFzcz1cImdhcmJhZ2VcIiBkYXRhLWpzPVwiJHtwLm5hbWUgfHwgJ2dhcmJhZ2UnfVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgNTkgNTlcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgNTkgNTk7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cclxuPGc+PHBhdGggZD1cIk0yOS41LDUxYzAuNTUyLDAsMS0wLjQ0NywxLTFWMTdjMC0wLjU1My0wLjQ0OC0xLTEtMXMtMSwwLjQ0Ny0xLDF2MzNDMjguNSw1MC41NTMsMjguOTQ4LDUxLDI5LjUsNTF6XCIvPlxyXG5cdDxwYXRoIGQ9XCJNMTkuNSw1MWMwLjU1MiwwLDEtMC40NDcsMS0xVjE3YzAtMC41NTMtMC40NDgtMS0xLTFzLTEsMC40NDctMSwxdjMzQzE4LjUsNTAuNTUzLDE4Ljk0OCw1MSwxOS41LDUxelwiLz5cclxuXHQ8cGF0aCBkPVwiTTM5LjUsNTFjMC41NTIsMCwxLTAuNDQ3LDEtMVYxN2MwLTAuNTUzLTAuNDQ4LTEtMS0xcy0xLDAuNDQ3LTEsMXYzM0MzOC41LDUwLjU1MywzOC45NDgsNTEsMzkuNSw1MXpcIi8+XHJcblx0PHBhdGggZD1cIk01Mi41LDZIMzguNDU2Yy0wLjExLTEuMjUtMC40OTUtMy4zNTgtMS44MTMtNC43MTFDMzUuODA5LDAuNDM0LDM0Ljc1MSwwLDMzLjQ5OSwwSDIzLjVjLTEuMjUyLDAtMi4zMSwwLjQzNC0zLjE0NCwxLjI4OVxyXG5cdFx0QzE5LjAzOCwyLjY0MiwxOC42NTMsNC43NSwxOC41NDMsNkg2LjVjLTAuNTUyLDAtMSwwLjQ0Ny0xLDFzMC40NDgsMSwxLDFoMi4wNDFsMS45MTUsNDYuMDIxQzEwLjQ5Myw1NS43NDMsMTEuNTY1LDU5LDE1LjM2NCw1OVxyXG5cdFx0aDI4LjI3MmMzLjc5OSwwLDQuODcxLTMuMjU3LDQuOTA3LTQuOTU4TDUwLjQ1OSw4SDUyLjVjMC41NTIsMCwxLTAuNDQ3LDEtMVM1My4wNTIsNiw1Mi41LDZ6IE0yMS43OTIsMi42ODFcclxuXHRcdEMyMi4yNCwyLjIyMywyMi43OTksMiwyMy41LDJoOS45OTljMC43MDEsMCwxLjI2LDAuMjIzLDEuNzA4LDAuNjgxYzAuODA1LDAuODIzLDEuMTI4LDIuMjcxLDEuMjQsMy4zMTlIMjAuNTUzXHJcblx0XHRDMjAuNjY1LDQuOTUyLDIwLjk4OCwzLjUwNCwyMS43OTIsMi42ODF6IE00Ni41NDQsNTMuOTc5QzQ2LjUzOCw1NC4yODgsNDYuNCw1Nyw0My42MzYsNTdIMTUuMzY0XHJcblx0XHRjLTIuNzM0LDAtMi44OTgtMi43MTctMi45MDktMy4wNDJMMTAuNTQyLDhoMzcuOTE1TDQ2LjU0NCw1My45Nzl6XCIvPlxyXG48L2c+PC9zdmc+YFxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGA8c3ZnIHZlcnNpb249XCIxLjFcIiBkYXRhLWpzPVwianVzdGlmeVwiIGNsYXNzPVwianVzdGlmeVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCItMiAtMiAyOCAyOFwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAyMi45MTYgMjIuOTE2O1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XG48Zz5cblx0PHBhdGggZD1cIk0yMi40MTYsMjIuODI4SDAuNWMtMC4yNzYsMC0wLjUtMC4yMjQtMC41LTAuNXMwLjIyNC0wLjUsMC41LTAuNWgyMS45MTZjMC4yNzYsMCwwLjUsMC4yMjQsMC41LDAuNVxuXHRcdFMyMi42OTIsMjIuODI4LDIyLjQxNiwyMi44Mjh6XCIvPlxuXHQ8cGF0aCBkPVwiTTIyLjQxNiwxNS41ODJIMC41Yy0wLjI3NiwwLTAuNS0wLjIyNC0wLjUtMC41czAuMjI0LTAuNSwwLjUtMC41aDIxLjkxNmMwLjI3NiwwLDAuNSwwLjIyNCwwLjUsMC41XG5cdFx0UzIyLjY5MiwxNS41ODIsMjIuNDE2LDE1LjU4MnpcIi8+XG5cdDxwYXRoIGQ9XCJNMjIuNDE2LDguMzM1SDAuNWMtMC4yNzYsMC0wLjUtMC4yMjQtMC41LTAuNXMwLjIyNC0wLjUsMC41LTAuNWgyMS45MTZjMC4yNzYsMCwwLjUsMC4yMjQsMC41LDAuNVxuXHRcdFMyMi42OTIsOC4zMzUsMjIuNDE2LDguMzM1elwiLz5cblx0PHBhdGggZD1cIk0yMi40MTYsMS4wODhIMC41Yy0wLjI3NiwwLTAuNS0wLjIyNC0wLjUtMC41czAuMjI0LTAuNSwwLjUtMC41aDIxLjkxNmMwLjI3NiwwLDAuNSwwLjIyNCwwLjUsMC41XG5cdFx0UzIyLjY5MiwxLjA4OCwyMi40MTYsMS4wODh6XCIvPjwvZz48L3N2Zz5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IChwPXt9KSA9PiBgPHN2ZyBjbGFzcz1cImxlZnQtYXJyb3dcIiBkYXRhLWpzPVwiJHtwLm5hbWUgfHwgJ2xlZnRBcnJvdyd9XCIgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiXG5cdCB2aWV3Qm94PVwiMCAwIDMxLjQ5NCAzMS40OTRcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMzEuNDk0IDMxLjQ5NDtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxuPHBhdGggc3R5bGU9XCJmaWxsOiMxRTIwMUQ7XCIgZD1cIk0xMC4yNzMsNS4wMDljMC40NDQtMC40NDQsMS4xNDMtMC40NDQsMS41ODcsMGMwLjQyOSwwLjQyOSwwLjQyOSwxLjE0MywwLDEuNTcxbC04LjA0Nyw4LjA0N2gyNi41NTRcblx0YzAuNjE5LDAsMS4xMjcsMC40OTIsMS4xMjcsMS4xMTFjMCwwLjYxOS0wLjUwOCwxLjEyNy0xLjEyNywxLjEyN0gzLjgxM2w4LjA0Nyw4LjAzMmMwLjQyOSwwLjQ0NCwwLjQyOSwxLjE1OSwwLDEuNTg3XG5cdGMtMC40NDQsMC40NDQtMS4xNDMsMC40NDQtMS41ODcsMGwtOS45NTItOS45NTJjLTAuNDI5LTAuNDI5LTAuNDI5LTEuMTQzLDAtMS41NzFMMTAuMjczLDUuMDA5elwiLz48L3N2Zz5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIFBhZ2VzOiBPYmplY3QuY3JlYXRlKCByZXF1aXJlKCcuLi8uLi9tb2RlbHMvX19wcm90b19fJyksIHsgcmVzb3VyY2U6IHsgdmFsdWU6ICdQYWdlcycgfSB9ICksXG5cbiAgICBsb2FkSW1hZ2VUYWJsZSggdGFibGUsIG1vZGVsICkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VFbCA9IG5ldyBJbWFnZSgpXG4gICAgICAgICAgICBpbWFnZUVsLnNyYyA9IHRoaXMuRm9ybWF0LkltYWdlU3JjKCBgJHt0YWJsZS5uYW1lfS0ke21vZGVsLmlkfWAgKVxuICAgICAgICAgICAgaW1hZ2VFbC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9kZWwudGFibGVOYW1lID0gdGFibGUubmFtZVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHNbIHRhYmxlLmVsIF0gfSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzWyB0YWJsZS50ZW1wbGF0ZSBdKCBtb2RlbCApXG4gICAgICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoIGBpbnNlcnRlZCR7dGFibGUubmFtZX1UZW1wbGF0ZWAgKVxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKSAgICAgXG4gICAgfSxcblxuICAgIGxvYWRUYWJsZURhdGEoIHRhYmxlICkge1xuICAgICAgICBjb25zb2xlLmxvZyggJ2xvYWRUYWJsZURhdGEnIClcbiAgICAgICAgY29uc29sZS5sb2coIHRhYmxlIClcbiAgICAgICAgdGhpcy5tb2RlbHNbIHRhYmxlLm5hbWUgXSA9IE9iamVjdC5jcmVhdGUoIHJlcXVpcmUoJy4uLy4uL21vZGVscy9fX3Byb3RvX18nKSwgeyByZXNvdXJjZTogeyB2YWx1ZTogdGFibGUubmFtZSB9IH0gKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5tb2RlbHNbIHRhYmxlLm5hbWUgXS5nZXQoKS50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICBpZiggdGFibGUuaW1hZ2UgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxzWyB0YWJsZS5uYW1lIF0uZGF0YS5mb3JFYWNoKCBtb2RlbCA9PiBwcm9taXNlID0gcHJvbWlzZS50aGVuKCAoKSA9PiB0aGlzLmxvYWRJbWFnZVRhYmxlKCB0YWJsZSwgbW9kZWwgKSApIClcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsc1sgdGFibGUubmFtZSBdLmRhdGEuZm9yRWFjaCggbW9kZWwgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzWyB0YWJsZS5lbCBdIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXNbIHRhYmxlLnRlbXBsYXRlIF0oIG1vZGVsIClcbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCBgaW5zZXJ0ZWQke3RhYmxlLm5hbWV9VGVtcGxhdGVgIClcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yICkgICAgICAgXG4gICAgfSxcblxuICAgIHByb2Nlc3NPYmplY3QoIG5hbWUsIGRhdGEgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCAncHJvY2Vzc09iamVjdCcgKVxuICAgICAgICBjb25zb2xlLmxvZyggbmFtZSApXG4gICAgICAgIGNvbnNvbGUubG9nKCBkYXRhIClcbiAgICAgICAgT2JqZWN0LmtleXMoIGRhdGEgKS5mb3JFYWNoKCBrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsID0gZGF0YVsga2V5IF1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCBrZXkgKVxuICAgICAgICAgICAgY29uc29sZS5sb2coIHZhbCApXG4gICAgICAgICAgICBjb25zb2xlLmxvZyggdHlwZW9mIHZhbCApXG4gICAgICAgICAgICBpZiggdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgKSByZXR1cm4gQXJyYXkuaXNBcnJheSggdmFsICkgPyB0aGlzLmluc2VydEFycmF5RGF0YSggbmFtZSwga2V5LCB2YWwgKSA6IHRoaXMucHJvY2Vzc09iamVjdCgga2V5LCB2YWwgKVxuXG4gICAgICAgICAgICBpZiggdGhpcy5lbHNbIGtleSBdICkgcmV0dXJuIC9pbWFnZS9pLnRlc3QoIGtleSApXG4gICAgICAgICAgICAgICAgPyB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVsc1sga2V5IF0gfSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IGA8aW1nIGRhdGEtc3JjPVwiJHt0aGlzLkZvcm1hdC5JbWFnZVNyYyggZGF0YVsga2V5IF0gKX1cIiAvPmBcbiAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIDogdGhpcy5lbHNbIGtleSBdLmlubmVySFRNTCA9IHRoaXMuRm9ybWF0LlBhcnNlVGV4dExpbmtzKCBkYXRhWyBrZXkgXSApXG5cbiAgICAgICAgICAgIGlmKCB0aGlzLm5hbWVUb1RhZ05hbWVbIGtleSBdICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnaXNIZWFkaW5nJyApXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coIHRoaXMuZWxzWyBuYW1lIF0ucXVlcnlTZWxlY3RvciggdGhpcy5uYW1lVG9TZWxlY3RvcltrZXldIHx8IHRoaXMubmFtZVRvVGFnTmFtZVsga2V5IF0gKSApXG4gICAgICAgICAgICAgICAgdGhpcy5lbHNbIG5hbWUgXS5xdWVyeVNlbGVjdG9yKCB0aGlzLm5hbWVUb1NlbGVjdG9yWyBrZXkgXSB8fCB0aGlzLm5hbWVUb1RhZ05hbWVbIGtleSBdICkuaW5uZXJIVE1MID0gdGhpcy5Gb3JtYXQuUGFyc2VUZXh0TGlua3MoIGRhdGFbIGtleSBdIClcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBpbnNlcnRBcnJheURhdGEoIHNlY3Rpb25OYW1lLCBrZXksIGRhdGEgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCAnaW5zZXJ0QXJyYXlEYXRhJyApXG4gICAgICAgIGNvbnNvbGUubG9nKCBzZWN0aW9uTmFtZSApXG4gICAgICAgIGNvbnNvbGUubG9nKCBrZXkgKVxuICAgICAgICBjb25zb2xlLmxvZyggZGF0YSApXG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbHNbIGtleSBdIHx8IHRoaXMuZWxzWyBzZWN0aW9uTmFtZSBdXG4gICAgICAgIGNvbnNvbGUubG9nKCBlbCApXG4gICAgICAgIGRhdGEuZm9yRWFjaCggZGF0dW0gPT5cbiAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgICAgIGluc2VydGlvbjogeyBlbCB9LFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBgPCR7dGhpcy5uYW1lVG9UYWdOYW1lWyBrZXkgXSB8fCAnbGknfT4ke3RoaXMuRm9ybWF0LlBhcnNlVGV4dExpbmtzKCBkYXR1bSApfTwvJHt0aGlzLm5hbWVUb1RhZ05hbWVbIGtleSBdIHx8ICdsaSd9PmBcbiAgICAgICAgICAgIH0gKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIG5hbWVUb1NlbGVjdG9yOiB7XG4gICAgICAgIGhlYWRpbmc6ICdoMiwgaDMsIGg0J1xuICAgIH0sXG5cbiAgICBuYW1lVG9UYWdOYW1lOiB7XG4gICAgICAgIGhlYWRpbmc6ICdoMicsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAncCdcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coICdjdXN0b20gY29udGVudCBwb3N0UmVuZGVyJyApXG4gICAgICAgIGNvbnNvbGUubG9nKCB0aGlzLm5hbWUgKVxuICAgICAgICBjb25zb2xlLmxvZyggdGhpcy5kb2N1bWVudE5hbWUgKVxuICAgICAgICBpZiggdGhpcy50YWJsZXMubGVuZ3RoICkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbHMgPSB7IH1cbiAgICAgICAgICAgIHRoaXMudGFibGVzLmZvckVhY2goIHRhYmxlID0+IHRoaXMubG9hZFRhYmxlRGF0YSggdGFibGUgKSApXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLlBhZ2VzLmdldCggeyBxdWVyeTogeyBuYW1lOiB0aGlzLmRvY3VtZW50TmFtZSB9IH0gKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coIHRoaXMuUGFnZXMuZGF0YSApXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NPYmplY3QoIG51bGwsIHRoaXMuUGFnZXMuZGF0YSApXG4gICAgICAgIH0gKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHRhYmxlczogWyBdXG5cbn0iLCJ2YXIgTXlWaWV3ID0gcmVxdWlyZSgnLi4vTXlWaWV3JyksXG4gICAgRm9ybSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTXlWaWV3LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIEZvcm0ucHJvdG90eXBlLCBNeVZpZXcucHJvdG90eXBlLCB7XG5cbiAgICBlbWFpbFJlZ2V4OiAvXlxcdysoW1xcLi1dP1xcdyspKkBcXHcrKFtcXC4tXT9cXHcrKSooXFwuXFx3ezIsM30pKyQvLFxuXG4gICAgZmllbGRzOiBbIF0sXG5cbiAgICBvbkZvcm1GYWlsOiBmdW5jdGlvbiggZXJyb3IgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCBlcnJvci5zdGFjayB8fCBlcnJvciApO1xuICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLnNlcnZlckVycm9yKCBlcnJvciApLCBpbnNlcnRpb246IHsgJGVsOiB0aGlzLnRlbXBsYXRlRGF0YS5idXR0b25Sb3csIG1ldGhvZDogJ2JlZm9yZScgfSB9IClcbiAgICB9LFxuXG4gICAgb25TdWJtaXNzaW9uUmVzcG9uc2U6IGZ1bmN0aW9uKCkgeyB9LFxuICAgIFxuICAgIHBvc3RGb3JtKCBkYXRhICkge1xuICAgICAgICByZXR1cm4gdGhpcy5RKFxuICAgICAgICAgICAgdGhpcy4kLmFqYXgoIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSggZGF0YS52YWx1ZXMgKSB8fCBKU09OLnN0cmluZ2lmeSggdGhpcy5nZXRGb3JtRGF0YSgpICksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyB0b2tlbjogKCB0aGlzLnVzZXIgKSA/IHRoaXMudXNlci5nZXQoJ3Rva2VuJykgOiAnJyB9LFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIHVybDogdGhpcy51dGlsLmZvcm1hdCggXCIvJXNcIiwgZGF0YS5yZXNvdXJjZSApXG4gICAgICAgICAgICB9IClcbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICByZW1vdmVFcnJvcnM6IGZ1bmN0aW9uKCBlICkge1xuXG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMuJCggZS50YXJnZXQgKTtcbiAgICAgICAgaW5wdXQucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2hhcy1lcnJvcicpO1xuICAgICAgICBpbnB1dC5uZXh0KCkucmVtb3ZlKCk7XG5cbiAgICB9LFxuXG4gICAgc3VibWl0Rm9ybTogZnVuY3Rpb24oIHJlc291cmNlICkge1xuICAgICAgICBcbiAgICAgICAgaWYgKCB0aGlzLnZhbGlkYXRlRm9ybSgpID09PSBmYWxzZSApIHJldHVyblxuICAgICAgICB0aGlzLnBvc3RGb3JtKCByZXNvdXJjZSApXG4gICAgICAgICAgLnRoZW4oIHRoaXMub25TdWJtaXNzaW9uUmVzcG9uc2UuYmluZCh0aGlzKSApXG4gICAgICAgICAgLmZhaWwoIHRoaXMub25Gb3JtRmFpbC5iaW5kKHRoaXMpIClcbiAgICAgICAgICAuZG9uZSgpXG4gICAgXG4gICAgfSxcbiAgICBcbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgZmllbGRFcnJvcjogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL2ZpZWxkRXJyb3InKSggcmVxdWlyZSgnaGFuZGxlYmFycycpICksXG4gICAgICAgIGludmFsaWRMb2dpbkVycm9yOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvaW52YWxpZExvZ2luRXJyb3InKSggcmVxdWlyZSgnaGFuZGxlYmFycycpICksXG4gICAgICAgIHNlcnZlckVycm9yOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2VydmVyRXJyb3InKShyZXF1aXJlKCdoYW5kbGViYXJzJykgKVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZUZvcm06IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsaWQgPSB0cnVlXG4gICAgICAgIFxuICAgICAgICBpZiAoIHRoaXMudGVtcGxhdGVEYXRhLmludmFsaWRMb2dpbkVycm9yICkgdGhpcy50ZW1wbGF0ZURhdGEuaW52YWxpZExvZ2luRXJyb3IucmVtb3ZlKCk7XG4gICAgICAgIGlmICggdGhpcy50ZW1wbGF0ZURhdGEuc2VydmVyRXJyb3IgKSB0aGlzLnRlbXBsYXRlRGF0YS5zZXJ2ZXJFcnJvci5yZW1vdmUoKTtcblxuICAgICAgICB0aGlzLmZpZWxkcy5mb3JFYWNoKCBmdW5jdGlvbiggZmllbGQgKSB7XG4gICAgICAgICAgXG4gICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGFbIGZpZWxkLm5hbWUgXS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnaGFzLWVycm9yJyk7XG4gICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGFbIGZpZWxkLm5hbWUgXS5uZXh0KCkucmVtb3ZlKCk7XG5cbiAgICAgICAgICBpZiAoIGZpZWxkLnZhbGlkYXRlLmNhbGwoIHRoaXMsIHRoaXMudGVtcGxhdGVEYXRhWyBmaWVsZC5uYW1lIF0udmFsKCkgKSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICB2YWxpZCA9IGZhbHNlXG5cbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhWyBmaWVsZC5uYW1lIF0ucGFyZW50KCkuYWRkQ2xhc3MoJ2hhcy1lcnJvcicpO1xuICAgICAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5maWVsZEVycm9yKCBmaWVsZCApLCBpbnNlcnRpb246IHsgJGVsOiB0aGlzLnRlbXBsYXRlRGF0YVsgZmllbGQubmFtZSBdLnBhcmVudCgpLCBtZXRob2Q6ICdhcHBlbmQnIH0gfSApXG4gICAgICAgICAgfVxuXG4gICAgICAgIH0sIHRoaXMgKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHZhbGlkXG5cbiAgICB9LFxuXG4gICAgdmFsaWRhdGVQYXNzd29yZCggdmFsICkge1xuICAgICAgICBpZiggIXZhbCApIHJldHVybiBmYWxzZVxuICAgICAgICBlbHNlIHJldHVybiB2YWwubGVuZ3RoID49IDZcbiAgICB9XG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1cbiIsInZhciBNeVZpZXcgPSByZXF1aXJlKCcuLi9NeVZpZXcnKSxcbiAgICBMaXN0VmlldyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTXlWaWV3LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIExpc3RWaWV3LnByb3RvdHlwZSwgTXlWaWV3LnByb3RvdHlwZSwge1xuXG4gICAgYWRkSXRlbTogZnVuY3Rpb24oIG1vZGVsICkge1xuICAgICAgICB0aGlzLml0ZW1WaWV3c1sgbW9kZWwuaWQgXSA9XG4gICAgICAgICAgICBuZXcgdGhpcy5JdGVtVmlldyhcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKCB7IGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLCBtb2RlbDogbW9kZWwsIHNlbGVjdGlvbjogdGhpcy5zZWxlY3Rpb24gfSwgdGhpcy5nZXRJdGVtVmlld09wdGlvbnMoKSApIClcbiAgICAgICAgICAgIC5vbiggJ3JlbW92ZWQnLCAoKSA9PiBkZWxldGUgdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0gKVxuXG4gICAgICAgIHRoaXMuZW1pdCggJ2l0ZW1BZGRlZCcsIG1vZGVsIClcbiAgICAgICAgXG4gICAgICAgIGlmKCBtb2RlbC5nZXQoJ3Vuc2VsZWN0YWJsZScpICkgcmV0dXJuXG5cbiAgICAgICAgaWYoIHRoaXMuc2VsZWN0aW9uICkgdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0ub24oICdjbGlja2VkJywgbW9kZWwgPT4gdGhpcy5vbkl0ZW1DbGljayggbW9kZWwgKSApXG4gICAgICAgIGlmKCB0aGlzLnNlbGVjdGVkICkgdGhpcy5vbkl0ZW1DbGljayggbW9kZWwgKVxuICAgIH0sXG5cbiAgICBjb2xsZWN0aW9uOiB7IH0sXG5cbiAgICBjcmVhdGVJdGVtcygpIHtcbiAgICAgICAgdGhpcy5pdGVtcyA9XG4gICAgICAgICAgICBuZXcgKCB0aGlzLkNvbGxlY3Rpb24uZXh0ZW5kKCAoIHR5cGVvZiB0aGlzLmNvbGxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiApID8gdGhpcy5jb2xsZWN0aW9uKCkgOiB0aGlzLmNvbGxlY3Rpb24gKSApKClcbiAgICAgICAgICAgIC5vbiggJ3Jlc2V0JywgKCkgPT4gdGhpcy5vbkl0ZW1zUmVzZXQoKSApXG4gICAgICAgICAgICAub24oICdhZGQnLCBpdGVtID0+IHRoaXMuYWRkSXRlbSggaXRlbSApIClcbiAgICAgICAgICAgIC5vbiggJ3JlbW92ZScsIGl0ZW0gPT4gdGhpcy5yZW1vdmVJdGVtKCBpdGVtICkgKVxuICAgICAgICAgICAgLm9uKCAndXBkYXRlJywgKCkgPT4gdGhpcy5ub0l0ZW1DaGVjaygpIClcbiAgICAgICAgICAgIC5vbiggJ3NvcnQnLCAoKSA9PiB0aGlzLnJlT3JkZXJET00oKSApXG4gICAgICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBmZXRjaEl0ZW1zKCkge1xuICAgICAgICB0aGlzLml0ZW1zLmZldGNoKCBPYmplY3QuYXNzaWduKCB7fSwgeyByZXNldDogdHJ1ZSB9LCB0aGlzLmZldGNoICkgKVxuICAgICAgICAuZmFpbCggZXJyID0+IGNvbnNvbGUubG9nKCAnRXJyb3IgZmV0Y2hpbmcgY29sbGVjdGlvbiA6ICcgKyB0aGlzLnVybCArIFwiIC0tIFwiICsgZXJyLnN0YWNrIHx8ZXJyICkgKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIGdldENsb3Nlc3RDbGlja2VkSW5kZXg6IGZ1bmN0aW9uKCBtb2RlbCApIHtcbiAgICAgICAgdmFyIGNsaWNrZWRJbmRleCA9IHRoaXMuaXRlbXMuaW5kZXhPZiggbW9kZWwgKSxcbiAgICAgICAgICAgIGNsb3Nlc3QgPSB1bmRlZmluZWQsXG4gICAgICAgICAgICBtYXhEaXN0YW5jZSA9IDAsXG4gICAgICAgICAgICBzZWxlY3RlZEluZGV4ZXMgPSBPYmplY3Qua2V5cyggdGhpcy5zZWxlY3RlZEl0ZW1zICkubWFwKCBpZCA9PiB0aGlzLml0ZW1zLmluZGV4T2YoIHRoaXMuaXRlbXMuZ2V0KGlkKSApICkuc29ydCgpXG5cbiAgICAgICAgc2VsZWN0ZWRJbmRleGVzLmZvckVhY2goIGluZGV4ID0+IHtcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKCBpbmRleCAtIGNsaWNrZWRJbmRleCApXG4gICAgICAgICAgICBpZiggZGlzdGFuY2UgPiBtYXhEaXN0YW5jZSApIHsgbWF4RGlzdGFuY2UgPSBkaXN0YW5jZTsgY2xvc2VzdCA9IGluZGV4OyB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiBjbG9zZXN0XG4gICAgfSxcblxuICAgIGdldEl0ZW1WaWV3T3B0aW9uczogZnVuY3Rpb24oKSB7IHJldHVybiB7fSB9LFxuXG4gICAgaGFuZGxlS2V5ZG93bjogZnVuY3Rpb24oIGUgKSB7XG5cbiAgICAgICAgdGhpcy5wcmVzc2VkS2V5ID0gKCBlLndoaWNoID09PSAxNiApXG4gICAgICAgICAgICA/ICdzaGlmdCdcbiAgICAgICAgICAgIDogKCBlLndoaWNoID09PSAxNyB8fCBlLndoaWNoID09PSA5MSApXG4gICAgICAgICAgICAgICAgPyAnY3RybCdcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgXG4gICAgaGFuZGxlS2V5dXA6IGZ1bmN0aW9uKCBlICkge1xuXG4gICAgICAgIHRoaXMucHJlc3NlZEtleSA9ICggZS53aGljaCA9PT0gMTYgJiYgdGhpcy5wcmVzc2VkS2V5ID09PSAnc2hpZnQnIClcbiAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICA6ICggKCBlLndoaWNoID09PSAxNyB8fCBlLndoaWNoID09PSA5MSApICYmIHRoaXMucHJlc3NlZEtleSA9PT0gJ2N0cmwnIClcbiAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIDogdGhpcy5wcmVzc2VkS2V5XG4gICAgfSxcblxuICAgIG5vSXRlbUNoZWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuZ2V0SXRlbVZpZXdPcHRpb25zKCkuY29udGFpbmVyIHx8IHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lclxuICAgICAgICBpZiggdGhpcy5pdGVtcy5sZW5ndGggPT09IDAgKSBjb250YWluZXIuYWRkQ2xhc3MoJ25vLWl0ZW1zJylcbiAgICAgICAgZWxzZSBjb250YWluZXIucmVtb3ZlQ2xhc3MoJ25vLWl0ZW1zJylcbiAgICB9LFxuXG4gICAgb25JdGVtQ2xpY2s6IGZ1bmN0aW9uKCBtb2RlbCApIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHRoaXMudXRpbC5mb3JtYXQoICclc3NlbGVjdEl0ZW0nLFxuICAgICAgICAgICAgICAgICggdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lci5oYXNDbGFzcygnc2VsZWN0ZWQnKSAmJiB0aGlzLnNlbGVjdGlvbiAhPT0gJ211bHRpQ29tcGxleCcgKSA/ICd1bicgOiAnJyApXG5cbiAgICAgICAgdGhpc1sgbWV0aG9kIF0oIG1vZGVsIClcbiAgICB9LFxuXG4gICAgb25JdGVtc1Jlc2V0KCkge1xuICAgICAgICB2YXIgbGlzdENvbnRhaW5lciA9IHRoaXMuZ2V0SXRlbVZpZXdPcHRpb25zKCkuY29udGFpbmVyIHx8IHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lciBcbiAgICAgICAgXG4gICAgICAgIGxpc3RDb250YWluZXIuZW1wdHkoKVxuICAgICAgICB0aGlzLml0ZW1WaWV3cyA9IFtdXG4gICAgICAgIGlmKCB0aGlzLml0ZW1zLmxlbmd0aCAmJiB0aGlzLnNldEZpZWxkcyApIHsgdGhpcy5zZXRGaWVsZHMoIHRoaXMuaXRlbXMuYXQoMCkuYXR0cmlidXRlcyApIH1cbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKCBpdGVtID0+IHRoaXMuYWRkSXRlbSggaXRlbSApIClcbiAgICAgICAgdGhpcy5ub0l0ZW1DaGVjaygpXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG5cbiAgICAgICAgaWYoIHRoaXMuc2VsZWN0aW9uID09PSAnbXVsdGlDb21wbGV4JyApIHtcblxuICAgICAgICAgICAgdGhpcy4kKGRvY3VtZW50KVxuICAgICAgICAgICAgICAgIC5vbiggJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWRvd24uYmluZCh0aGlzKSApXG4gICAgICAgICAgICAgICAgLm9uKCAna2V5dXAnLCB0aGlzLmhhbmRsZUtleXVwLmJpbmQodGhpcykgKVxuXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJibHVyXCIsIGUgPT4gdGhpcy5wcmVzc2VkS2V5ID0gdW5kZWZpbmVkIClcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImZvY3VzXCIsIGUgPT4gdGhpcy5wcmVzc2VkS2V5ID0gdW5kZWZpbmVkIClcbiAgICAgICAgfSBcblxuICAgICAgICB0aGlzLml0ZW1WaWV3cyA9IFtdXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtcyA9IHsgfVxuICAgICAgIFxuICAgICAgICB0aGlzLmNyZWF0ZUl0ZW1zKClcblxuICAgICAgICBpZiggdGhpcy5pdGVtTW9kZWxzICkgdGhpcy5pdGVtcy5yZXNldCggKCB0eXBlb2YgdGhpcy5pdGVtTW9kZWxzID09PSBcImZ1bmN0aW9uXCIgKSA/IHRoaXMuaXRlbU1vZGVscygpIDogdGhpcy5pdGVtTW9kZWxzIClcbiAgICAgICAgXG4gICAgICAgIGlmKCB0aGlzLmZldGNoICkgdGhpcy5mZXRjaEl0ZW1zKClcbiAgICB9LFxuXG4gICAgcmVtb3ZlSXRlbSggaXRlbSApIHtcbiAgICAgICAgaWYoIHRoaXMuaXRlbVZpZXdzWyBpdGVtLmlkIF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lci5oYXNDbGFzcygnc2VsZWN0ZWQnKSApIHRoaXMudW5zZWxlY3RJdGVtKCBpdGVtIClcbiAgICAgICAgdGhpcy5pdGVtVmlld3NbIGl0ZW0uaWQgXS5kZWxldGUoKVxuICAgICAgICBkZWxldGUgdGhpcy5pdGVtVmlld3NbIGl0ZW0uaWQgXVxuICAgIH0sXG5cbiAgICByZU9yZGVyRE9NOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuZ2V0SXRlbVZpZXdPcHRpb25zKCkuY29udGFpbmVyIHx8IHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goIGl0ZW0gPT4gY29udGFpbmVyWyAoIHRoaXMucmV2ZXJzZVNvcnQgKSA/ICdwcmVwZW5kJyA6ICdhcHBlbmQnIF0oIHRoaXMuaXRlbVZpZXdzW2l0ZW0uaWRdLnRlbXBsYXRlRGF0YS5jb250YWluZXIgKSApXG4gICAgfSxcblxuICAgIHNjcm9sbFRvQm90dG9tOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhlaWdodFxuXG4gICAgICAgIHZhciBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoICgpID0+IHtcbiAgICAgICAgICAgIHZhciBuZXdIZWlnaHQgPSB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIub3V0ZXJIZWlnaHQoIHRydWUgKTtcbiAgICAgICAgICAgIGlmKCBoZWlnaHQgPT09IG5ld0hlaWdodCApeyAgICBcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKCBpbnRlcnZhbElkICk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc2Nyb2xsVG9wKCB0aGlzLmNvbnRhaW5lci5wcm9wKCdzY3JvbGxIZWlnaHQnKSApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5vdXRlckhlaWdodCggdHJ1ZSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAgKTtcblxuICAgIH0sXG5cbiAgICBzZWxlY3RJdGVtKCBtb2RlbCApIHtcbiAgICAgICAgdmFyIHNlbGVjdGVkSWRzID0gT2JqZWN0LmtleXMoIHRoaXMuc2VsZWN0ZWRJdGVtcyApXG5cbiAgICAgICAgaWYoICggdGhpcy5wcmVzc2VkS2V5ID09PSB1bmRlZmluZWQgJiYgdGhpcy5zZWxlY3Rpb24gPT09ICdtdWx0aUNvbXBsZXgnICkgfHwgdGhpcy5zZWxlY3Rpb24gPT09ICdzaW5nbGUnICkge1xuICAgICAgICAgICAgc2VsZWN0ZWRJZHMuZm9yRWFjaCggaWQgPT4gdGhpcy51bnNlbGVjdEl0ZW0oIHRoaXMuc2VsZWN0ZWRJdGVtc1sgaWQgXSApICkgXG4gICAgICAgIH1cbiAgICAgICBcbiAgICAgICAgaWYoIHRoaXMucHJlc3NlZEtleSA9PT0gJ3NoaWZ0JyAmJiBzZWxlY3RlZElkcy5sZW5ndGggKSB7IFxuICAgICAgICAgICAgbGV0IGVuZCA9IHRoaXMuZ2V0Q2xvc2VzdENsaWNrZWRJbmRleCggbW9kZWwgKSxcbiAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuaXRlbXMuaW5kZXhPZiggbW9kZWwgKVxuXG4gICAgICAgICAgICB0aGlzLl8ucmFuZ2UoIHN0YXJ0LCBlbmQsICggc3RhcnQgPCBlbmQgKSA/IDEgOiAtMSApLmZvckVhY2goIGluZGV4ID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbVRvU2VsZWN0ID0gdGhpcy5pdGVtcy5hdCggaW5kZXggKVxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbVZpZXdzWyBpdGVtVG9TZWxlY3QuaWQgXS50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmFkZENsYXNzKCdzZWxlY3RlZCcpXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zWyBpdGVtVG9TZWxlY3QuaWQgXSA9IGl0ZW1Ub1NlbGVjdFxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCggJ2l0ZW1TZWxlY3RlZCcsIGl0ZW1Ub1NlbGVjdCApXG4gICAgICAgICAgICB9IClcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0ZWQnKVxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zWyBtb2RlbC5pZCBdID0gbW9kZWxcbiAgICAgICAgICAgIHRoaXMuZW1pdCggJ2l0ZW1TZWxlY3RlZCcsIG1vZGVsIClcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB1bnNlbGVjdEl0ZW06IGZ1bmN0aW9uKCBtb2RlbCApIHtcblxuICAgICAgICB0aGlzLml0ZW1WaWV3c1sgbW9kZWwuaWQgXS50ZW1wbGF0ZURhdGEuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpXG5cbiAgICAgICAgZGVsZXRlIHRoaXMuc2VsZWN0ZWRJdGVtc1sgbW9kZWwuaWQgXVxuICAgICAgICBcbiAgICAgICAgdGhpcy5lbWl0KCAnaXRlbVVuc2VsZWN0ZWQnLCBtb2RlbCApXG4gICAgfVxuXG59ICk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdFZpZXdcbiIsInZhciBNeVZpZXcgPSByZXF1aXJlKCcuLi9NeVZpZXcnKSxcbiAgICBMaXN0SXRlbSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTXlWaWV3LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIExpc3RJdGVtLnByb3RvdHlwZSwgTXlWaWV3LnByb3RvdHlwZSwge1xuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zKCkgeyByZXR1cm4gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzIH0sXG5cblx0cG9zdFJlbmRlcigpIHtcblx0XHRpZiggdGhpcy5zZWxlY3Rpb24gKSB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIub24oICdjbGljaycsICgpID0+IHRoaXMuZW1pdCggJ2NsaWNrZWQnLCB0aGlzLm1vZGVsICkgKVxuXHR9XG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RJdGVtXG4iLCJ2YXIgTGlzdCA9IHJlcXVpcmUoJy4vTGlzdCcpLFxuICAgIFRhYmxlID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIFRhYmxlLnByb3RvdHlwZSwgTGlzdC5wcm90b3R5cGUsIHtcblxuICAgIGV2ZW50czoge1xuICAgICAgICAnaGVhZGVyJzogeyBldmVudDogJ2NsaWNrJywgc2VsZWN0b3I6ICd0aCcsIG1ldGhvZDogJ3NvcnRCeUhlYWRlcicgfVxuICAgIH0sXG5cbiAgICBnZXRJdGVtVmlld09wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7IGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEuYm9keSwgZmllbGRzOiB0aGlzLmZpZWxkcywgaW1hZ2VMb2FkZXI6IHRoaXMuaW1hZ2VMb2FkZXIsIHNwaW5uZXI6IHRoaXMuc3Bpbm5lciB9XG4gICAgfSxcblxuICAgIGdldFRlbXBsYXRlT3B0aW9ucygpIHsgcmV0dXJuIHsgZmllbGRzOiB0aGlzLmZpZWxkcyB9IH0sXG5cbiAgICBzb3J0QnlIZWFkZXI6IGZ1bmN0aW9uKCBlICkge1xuXG4gICAgICAgIHZhciBjb21wYXJhdG9yID0gdGhpcy4kKGUuY3VycmVudFRhcmdldCkuYXR0ciggJ2RhdGEtc29ydCcgKVxuXG4gICAgICAgIHRoaXMucmV2ZXJzZVNvcnQgPSAoICggY29tcGFyYXRvciA9PT0gdGhpcy5pdGVtcy5jb21wYXJhdG9yICkgJiYgKCB0aGlzLnJldmVyc2VTb3J0ID09PSBmYWxzZSApICkgPyB0cnVlIDogZmFsc2VcblxuICAgICAgICB0aGlzLml0ZW1zLmNvbXBhcmF0b3IgPSBjb21wYXJhdG9yXG5cbiAgICAgICAgdGhpcy5pdGVtcy5zb3J0KCkgICAgICAgIFxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgaGVhZGVyQ29sdW1uOiBmdW5jdGlvbiggZGF0YSApIHsgcmV0dXJuIHRoaXMudXRpbC5mb3JtYXQoICc8dGggY2xhc3M9XCJ3JXMgJXNcIiBkYXRhLXNvcnQ9XCIlc1wiPiVzPC90aD4nLCBkYXRhLndpZHRoLCBkYXRhLm5hbWUsIGRhdGEubmFtZSwgZGF0YS5sYWJlbCApIH1cbiAgICB9XG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYmxlXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi9NeU9iamVjdCcpLnByb3RvdHlwZSwge1xuXG4gICAgQ3JlYXRlRGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlciggdGhpcy5hdHRyaWJ1dGVzLCBhdHRyID0+ICggeyBbYXR0ci5uYW1lXTogdHlwZW9mIGF0dHIuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyA/IGF0dHIuZGVmYXVsdCgpIDogYXR0ci5kZWZhdWx0IH0gKSApXG4gICAgfSxcblxuICAgIGF0dHJpYnV0ZXM6IFsgXSxcblxuICAgIGRhdGE6IHsgfSxcblxuICAgIGNvbnN0cnVjdG9yKCBkYXRhPXt9LCBvcHRzPXt9ICkge1xuICAgICAgICBPYmplY3QuYXNzaWduKCB0aGlzLCB7IHN0b3JlOiB7IH0sIGRhdGEgfSwgb3B0cyApXG5cbiAgICAgICAgaWYoIHRoaXMuc3RvcmVCeSApIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmVCeS5mb3JFYWNoKCBrZXkgPT4gdGhpcy5zdG9yZVsga2V5IF0gPSB7IH0gKVxuICAgICAgICAgICAgdGhpcy5fc3RvcmUoKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgbWV0YTogeyB9LFxuXG4gICAgc29ydCggb3B0cyApIHtcbiAgICAgICAgY29uc3QgYXR0ciA9IE9iamVjdC5rZXlzKCBvcHRzIClbMF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9wdHNbYXR0cl07XG5cbiAgICAgICAgdGhpcy5kYXRhLnNvcnQoICggYSwgYiApID0+XG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgID8gYVthdHRyXSA8IGJbYXR0cl0gPyAtMSA6IDFcbiAgICAgICAgICAgICAgICA6IGJbYXR0cl0gPCBhW2F0dHJdID8gLTEgOiAxXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBfcmVzZXRTdG9yZSggc3RvcmVCeSApIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IHsgfVxuICAgICAgICBzdG9yZUJ5LmZvckVhY2goIGF0dHIgPT4gdGhpcy5zdG9yZVsgYXR0ciBdID0geyB9IClcbiAgICAgICAgdGhpcy5zdG9yZUJ5ID0gc3RvcmVCeVxuICAgIH0sXG5cbiAgICBfc3RvcmUoIGRhdGEgKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IHRoaXMuZGF0YVxuICAgICAgICBkYXRhLmZvckVhY2goIGRhdHVtID0+IHRoaXMuc3RvcmVCeS5mb3JFYWNoKCBhdHRyID0+IHRoaXMuX3N0b3JlQXR0ciggZGF0dW0sIGF0dHIgKSApIClcbiAgICB9LFxuXG4gICAgX3N0b3JlQXR0ciggZGF0dW0sIGF0dHIgKSB7XG4gICAgICAgIHRoaXMuc3RvcmVbIGF0dHIgXVsgZGF0dW1bIGF0dHIgXSBdID1cbiAgICAgICAgICAgIHRoaXMuc3RvcmVbIGF0dHIgXVsgZGF0dW1bIGF0dHIgXSBdXG4gICAgICAgICAgICAgICAgPyBBcnJheS5pc0FycmF5KCB0aGlzLnN0b3JlWyBhdHRyIF1bIGRhdHVtWyBhdHRyIF0gXSApXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5zdG9yZVsgYXR0ciBdWyBkYXR1bVsgYXR0ciBdIF0uY29uY2F0KCBkYXR1bSApXG4gICAgICAgICAgICAgICAgICAgIDpbIHRoaXMuc3RvcmVbIGF0dHIgXVsgZGF0dW1bIGF0dHIgXSBdLCBkYXR1bSBdXG4gICAgICAgICAgICAgICAgOiBkYXR1bVxuICAgIH0sXG5cbiAgICBfc3RvcmVPbmUoIGRhdHVtICkge1xuICAgICAgICB0aGlzLnN0b3JlQnkuZm9yRWFjaCggYXR0ciA9PiB0aGlzLl9zdG9yZUF0dHIoIGRhdHVtLCBhdHRyICkgKVxuICAgIH1cblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGVyciA9PiB7IGNvbnNvbGUubG9nKCBlcnIuc3RhY2sgfHwgZXJyICkgfVxuIiwidmFyIE15T2JqZWN0ID0gZnVuY3Rpb24oIGRhdGEgKSB7IHJldHVybiBPYmplY3QuYXNzaWduKCB0aGlzLCBkYXRhICkgfVxuXG5PYmplY3QuYXNzaWduKCBNeU9iamVjdC5wcm90b3R5cGUsIHtcblxuICAgIEVycm9yOiByZXF1aXJlKCcuL015RXJyb3InKSxcblxuICAgIF86IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKSxcblxuICAgIGZvcm1hdDogcmVxdWlyZSgndXRpbCcpLmZvcm1hdCxcblxuICAgIG1vbWVudDogcmVxdWlyZSgnbW9tZW50JyksXG5cbiAgICBjYXBpdGFsaXplRmlyc3RMZXR0ZXI6IHN0cmluZyA9PiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSksXG5cbiAgICBnZXRJbnRSYW5nZSggaW50ICkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSggQXJyYXkoIGludCApLmtleXMoKSApXG4gICAgfSxcblxuICAgIGdldFJhbmRvbUluY2x1c2l2ZUludGVnZXIoIG1pbiwgbWF4ICkge1xuICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKVxuICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heClcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW5cbiAgICB9LFxuXG4gICAgb21pdCggb2JqLCBrZXlzICkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoIG9iaiApLmZpbHRlcigga2V5ID0+ICFrZXlzLmluY2x1ZGVzKCBrZXkgKSApLnJlZHVjZSggKCBtZW1vLCBrZXkgKSA9PiBPYmplY3QuYXNzaWduKCBtZW1vLCB7IFtrZXldOiBvYmpba2V5XSB9ICksIHsgfSApXG4gICAgfSxcblxuICAgIGZkUGljayggb2JqLCBrZXlzICkge1xuICAgICAgICByZXR1cm4ga2V5cy5yZWR1Y2UoICggbWVtbywga2V5ICkgPT4gT2JqZWN0LmFzc2lnbiggbWVtbywgeyBba2V5XTogb2JqW2tleV0gfSApLCB7IH0gKVxuICAgIH0sXG5cbiAgICByZWR1Y2VyKCBhcnIsIGZuICkgeyByZXR1cm4gYXJyLnJlZHVjZSggKCBtZW1vLCBpdGVtLCBpICkgPT4gT2JqZWN0LmFzc2lnbiggbWVtbywgZm4oIGl0ZW0sIGkgKSApLCB7IH0gKSB9LFxuXG4gICAgc2h1ZmZsZUFycmF5KCBhcnIgKSB7XG4gICAgICAgIGNvbnN0IHJ2ID0gQXJyYXkuZnJvbSggYXJyIClcbiAgICAgICBcbiAgICAgICAgcnYuZm9yRWFjaCggKCBpdGVtLCBpICkgPT4ge1xuICAgICAgICAgICAgaWYoIGkgPT09IHJ2Lmxlbmd0aCAtIDEgKSByZXR1cm4gXG4gICAgICAgICAgICBjb25zdCBpbnQgPSB0aGlzLmdldFJhbmRvbUluY2x1c2l2ZUludGVnZXIoIGksIHJ2Lmxlbmd0aCAtIDEgKSxcbiAgICAgICAgICAgICAgICBob2xkZXIgPSBydlsgaSBdXG5cbiAgICAgICAgICAgIHJ2W2ldID0gcnZbaW50XVxuICAgICAgICAgICAgcnZbaW50XSA9IGhvbGRlclxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gcnZcbiAgICB9LFxuXG4gICAgUDogKCBmdW4sIGFyZ3M9WyBdLCB0aGlzQXJnICkgPT5cbiAgICAgICAgbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4gUmVmbGVjdC5hcHBseSggZnVuLCB0aGlzQXJnIHx8IHRoaXMsIGFyZ3MuY29uY2F0KCAoIGUsIC4uLmNhbGxiYWNrICkgPT4gZSA/IHJlamVjdChlKSA6IHJlc29sdmUoY2FsbGJhY2spICkgKSApLFxuXG4gICAgUTogcmVxdWlyZSgncScpXG4gICAgXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBNeU9iamVjdFxuIiwiLyoqIHZpbTogZXQ6dHM9NDpzdz00OnN0cz00XG4gKiBAbGljZW5zZSBhbWRlZmluZSAxLjAuMSBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxNiwgVGhlIERvam8gRm91bmRhdGlvbiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogQXZhaWxhYmxlIHZpYSB0aGUgTUlUIG9yIG5ldyBCU0QgbGljZW5zZS5cbiAqIHNlZTogaHR0cDovL2dpdGh1Yi5jb20vanJidXJrZS9hbWRlZmluZSBmb3IgZGV0YWlsc1xuICovXG5cbi8qanNsaW50IG5vZGU6IHRydWUgKi9cbi8qZ2xvYmFsIG1vZHVsZSwgcHJvY2VzcyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWZpbmUgZm9yIG5vZGUuXG4gKiBAcGFyYW0ge09iamVjdH0gbW9kdWxlIHRoZSBcIm1vZHVsZVwiIG9iamVjdCB0aGF0IGlzIGRlZmluZWQgYnkgTm9kZSBmb3IgdGhlXG4gKiBjdXJyZW50IG1vZHVsZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXF1aXJlRm5dLiBOb2RlJ3MgcmVxdWlyZSBmdW5jdGlvbiBmb3IgdGhlIGN1cnJlbnQgbW9kdWxlLlxuICogSXQgb25seSBuZWVkcyB0byBiZSBwYXNzZWQgaW4gTm9kZSB2ZXJzaW9ucyBiZWZvcmUgMC41LCB3aGVuIG1vZHVsZS5yZXF1aXJlXG4gKiBkaWQgbm90IGV4aXN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIGRlZmluZSBmdW5jdGlvbiB0aGF0IGlzIHVzYWJsZSBmb3IgdGhlIGN1cnJlbnQgbm9kZVxuICogbW9kdWxlLlxuICovXG5mdW5jdGlvbiBhbWRlZmluZShtb2R1bGUsIHJlcXVpcmVGbikge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgZGVmaW5lQ2FjaGUgPSB7fSxcbiAgICAgICAgbG9hZGVyQ2FjaGUgPSB7fSxcbiAgICAgICAgYWxyZWFkeUNhbGxlZCA9IGZhbHNlLFxuICAgICAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgICAgICBtYWtlUmVxdWlyZSwgc3RyaW5nUmVxdWlyZTtcblxuICAgIC8qKlxuICAgICAqIFRyaW1zIHRoZSAuIGFuZCAuLiBmcm9tIGFuIGFycmF5IG9mIHBhdGggc2VnbWVudHMuXG4gICAgICogSXQgd2lsbCBrZWVwIGEgbGVhZGluZyBwYXRoIHNlZ21lbnQgaWYgYSAuLiB3aWxsIGJlY29tZVxuICAgICAqIHRoZSBmaXJzdCBwYXRoIHNlZ21lbnQsIHRvIGhlbHAgd2l0aCBtb2R1bGUgbmFtZSBsb29rdXBzLFxuICAgICAqIHdoaWNoIGFjdCBsaWtlIHBhdGhzLCBidXQgY2FuIGJlIHJlbWFwcGVkLiBCdXQgdGhlIGVuZCByZXN1bHQsXG4gICAgICogYWxsIHBhdGhzIHRoYXQgdXNlIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGxvb2sgbm9ybWFsaXplZC5cbiAgICAgKiBOT1RFOiB0aGlzIG1ldGhvZCBNT0RJRklFUyB0aGUgaW5wdXQgYXJyYXkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJ5IHRoZSBhcnJheSBvZiBwYXRoIHNlZ21lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1Eb3RzKGFyeSkge1xuICAgICAgICB2YXIgaSwgcGFydDtcbiAgICAgICAgZm9yIChpID0gMDsgYXJ5W2ldOyBpKz0gMSkge1xuICAgICAgICAgICAgcGFydCA9IGFyeVtpXTtcbiAgICAgICAgICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgICAgICAgICAgICBhcnkuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSAxICYmIChhcnlbMl0gPT09ICcuLicgfHwgYXJ5WzBdID09PSAnLi4nKSkge1xuICAgICAgICAgICAgICAgICAgICAvL0VuZCBvZiB0aGUgbGluZS4gS2VlcCBhdCBsZWFzdCBvbmUgbm9uLWRvdFxuICAgICAgICAgICAgICAgICAgICAvL3BhdGggc2VnbWVudCBhdCB0aGUgZnJvbnQgc28gaXQgY2FuIGJlIG1hcHBlZFxuICAgICAgICAgICAgICAgICAgICAvL2NvcnJlY3RseSB0byBkaXNrLiBPdGhlcndpc2UsIHRoZXJlIGlzIGxpa2VseVxuICAgICAgICAgICAgICAgICAgICAvL25vIHBhdGggbWFwcGluZyBmb3IgYSBwYXRoIHN0YXJ0aW5nIHdpdGggJy4uJy5cbiAgICAgICAgICAgICAgICAgICAgLy9UaGlzIGNhbiBzdGlsbCBmYWlsLCBidXQgY2F0Y2hlcyB0aGUgbW9zdCByZWFzb25hYmxlXG4gICAgICAgICAgICAgICAgICAgIC8vdXNlcyBvZiAuLlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyeS5zcGxpY2UoaSAtIDEsIDIpO1xuICAgICAgICAgICAgICAgICAgICBpIC09IDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKG5hbWUsIGJhc2VOYW1lKSB7XG4gICAgICAgIHZhciBiYXNlUGFydHM7XG5cbiAgICAgICAgLy9BZGp1c3QgYW55IHJlbGF0aXZlIHBhdGhzLlxuICAgICAgICBpZiAobmFtZSAmJiBuYW1lLmNoYXJBdCgwKSA9PT0gJy4nKSB7XG4gICAgICAgICAgICAvL0lmIGhhdmUgYSBiYXNlIG5hbWUsIHRyeSB0byBub3JtYWxpemUgYWdhaW5zdCBpdCxcbiAgICAgICAgICAgIC8vb3RoZXJ3aXNlLCBhc3N1bWUgaXQgaXMgYSB0b3AtbGV2ZWwgcmVxdWlyZSB0aGF0IHdpbGxcbiAgICAgICAgICAgIC8vYmUgcmVsYXRpdmUgdG8gYmFzZVVybCBpbiB0aGUgZW5kLlxuICAgICAgICAgICAgaWYgKGJhc2VOYW1lKSB7XG4gICAgICAgICAgICAgICAgYmFzZVBhcnRzID0gYmFzZU5hbWUuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICBiYXNlUGFydHMgPSBiYXNlUGFydHMuc2xpY2UoMCwgYmFzZVBhcnRzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIGJhc2VQYXJ0cyA9IGJhc2VQYXJ0cy5jb25jYXQobmFtZS5zcGxpdCgnLycpKTtcbiAgICAgICAgICAgICAgICB0cmltRG90cyhiYXNlUGFydHMpO1xuICAgICAgICAgICAgICAgIG5hbWUgPSBiYXNlUGFydHMuam9pbignLycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBub3JtYWxpemUoKSBmdW5jdGlvbiBwYXNzZWQgdG8gYSBsb2FkZXIgcGx1Z2luJ3NcbiAgICAgKiBub3JtYWxpemUgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1ha2VOb3JtYWxpemUocmVsTmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBub3JtYWxpemUobmFtZSwgcmVsTmFtZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUxvYWQoaWQpIHtcbiAgICAgICAgZnVuY3Rpb24gbG9hZCh2YWx1ZSkge1xuICAgICAgICAgICAgbG9hZGVyQ2FjaGVbaWRdID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkLmZyb21UZXh0ID0gZnVuY3Rpb24gKGlkLCB0ZXh0KSB7XG4gICAgICAgICAgICAvL1RoaXMgb25lIGlzIGRpZmZpY3VsdCBiZWNhdXNlIHRoZSB0ZXh0IGNhbi9wcm9iYWJseSB1c2VzXG4gICAgICAgICAgICAvL2RlZmluZSwgYW5kIGFueSByZWxhdGl2ZSBwYXRocyBhbmQgcmVxdWlyZXMgc2hvdWxkIGJlIHJlbGF0aXZlXG4gICAgICAgICAgICAvL3RvIHRoYXQgaWQgd2FzIGl0IHdvdWxkIGJlIGZvdW5kIG9uIGRpc2suIEJ1dCB0aGlzIHdvdWxkIHJlcXVpcmVcbiAgICAgICAgICAgIC8vYm9vdHN0cmFwcGluZyBhIG1vZHVsZS9yZXF1aXJlIGZhaXJseSBkZWVwbHkgZnJvbSBub2RlIGNvcmUuXG4gICAgICAgICAgICAvL05vdCBzdXJlIGhvdyBiZXN0IHRvIGdvIGFib3V0IHRoYXQgeWV0LlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbWRlZmluZSBkb2VzIG5vdCBpbXBsZW1lbnQgbG9hZC5mcm9tVGV4dCcpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBsb2FkO1xuICAgIH1cblxuICAgIG1ha2VSZXF1aXJlID0gZnVuY3Rpb24gKHN5c3RlbVJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSwgcmVsSWQpIHtcbiAgICAgICAgZnVuY3Rpb24gYW1kUmVxdWlyZShkZXBzLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXBzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vU3luY2hyb25vdXMsIHNpbmdsZSBtb2R1bGUgcmVxdWlyZSgnJylcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nUmVxdWlyZShzeXN0ZW1SZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUsIGRlcHMsIHJlbElkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9BcnJheSBvZiBkZXBlbmRlbmNpZXMgd2l0aCBhIGNhbGxiYWNrLlxuXG4gICAgICAgICAgICAgICAgLy9Db252ZXJ0IHRoZSBkZXBlbmRlbmNpZXMgdG8gbW9kdWxlcy5cbiAgICAgICAgICAgICAgICBkZXBzID0gZGVwcy5tYXAoZnVuY3Rpb24gKGRlcE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1JlcXVpcmUoc3lzdGVtUmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlLCBkZXBOYW1lLCByZWxJZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL1dhaXQgZm9yIG5leHQgdGljayB0byBjYWxsIGJhY2sgdGhlIHJlcXVpcmUgY2FsbC5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBkZXBzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYW1kUmVxdWlyZS50b1VybCA9IGZ1bmN0aW9uIChmaWxlUGF0aCkge1xuICAgICAgICAgICAgaWYgKGZpbGVQYXRoLmluZGV4T2YoJy4nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub3JtYWxpemUoZmlsZVBhdGgsIHBhdGguZGlybmFtZShtb2R1bGUuZmlsZW5hbWUpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVQYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBhbWRSZXF1aXJlO1xuICAgIH07XG5cbiAgICAvL0Zhdm9yIGV4cGxpY2l0IHZhbHVlLCBwYXNzZWQgaW4gaWYgdGhlIG1vZHVsZSB3YW50cyB0byBzdXBwb3J0IE5vZGUgMC40LlxuICAgIHJlcXVpcmVGbiA9IHJlcXVpcmVGbiB8fCBmdW5jdGlvbiByZXEoKSB7XG4gICAgICAgIHJldHVybiBtb2R1bGUucmVxdWlyZS5hcHBseShtb2R1bGUsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJ1bkZhY3RvcnkoaWQsIGRlcHMsIGZhY3RvcnkpIHtcbiAgICAgICAgdmFyIHIsIGUsIG0sIHJlc3VsdDtcblxuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIGUgPSBsb2FkZXJDYWNoZVtpZF0gPSB7fTtcbiAgICAgICAgICAgIG0gPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHVyaTogX19maWxlbmFtZSxcbiAgICAgICAgICAgICAgICBleHBvcnRzOiBlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgciA9IG1ha2VSZXF1aXJlKHJlcXVpcmVGbiwgZSwgbSwgaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9Pbmx5IHN1cHBvcnQgb25lIGRlZmluZSBjYWxsIHBlciBmaWxlXG4gICAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYW1kZWZpbmUgd2l0aCBubyBtb2R1bGUgSUQgY2Fubm90IGJlIGNhbGxlZCBtb3JlIHRoYW4gb25jZSBwZXIgZmlsZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvL1VzZSB0aGUgcmVhbCB2YXJpYWJsZXMgZnJvbSBub2RlXG4gICAgICAgICAgICAvL1VzZSBtb2R1bGUuZXhwb3J0cyBmb3IgZXhwb3J0cywgc2luY2VcbiAgICAgICAgICAgIC8vdGhlIGV4cG9ydHMgaW4gaGVyZSBpcyBhbWRlZmluZSBleHBvcnRzLlxuICAgICAgICAgICAgZSA9IG1vZHVsZS5leHBvcnRzO1xuICAgICAgICAgICAgbSA9IG1vZHVsZTtcbiAgICAgICAgICAgIHIgPSBtYWtlUmVxdWlyZShyZXF1aXJlRm4sIGUsIG0sIG1vZHVsZS5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL0lmIHRoZXJlIGFyZSBkZXBlbmRlbmNpZXMsIHRoZXkgYXJlIHN0cmluZ3MsIHNvIG5lZWRcbiAgICAgICAgLy90byBjb252ZXJ0IHRoZW0gdG8gZGVwZW5kZW5jeSB2YWx1ZXMuXG4gICAgICAgIGlmIChkZXBzKSB7XG4gICAgICAgICAgICBkZXBzID0gZGVwcy5tYXAoZnVuY3Rpb24gKGRlcE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcihkZXBOYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9DYWxsIHRoZSBmYWN0b3J5IHdpdGggdGhlIHJpZ2h0IGRlcGVuZGVuY2llcy5cbiAgICAgICAgaWYgKHR5cGVvZiBmYWN0b3J5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWN0b3J5LmFwcGx5KG0uZXhwb3J0cywgZGVwcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWN0b3J5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtLmV4cG9ydHMgPSByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICBsb2FkZXJDYWNoZVtpZF0gPSBtLmV4cG9ydHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdHJpbmdSZXF1aXJlID0gZnVuY3Rpb24gKHN5c3RlbVJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSwgaWQsIHJlbElkKSB7XG4gICAgICAgIC8vU3BsaXQgdGhlIElEIGJ5IGEgISBzbyB0aGF0XG4gICAgICAgIHZhciBpbmRleCA9IGlkLmluZGV4T2YoJyEnKSxcbiAgICAgICAgICAgIG9yaWdpbmFsSWQgPSBpZCxcbiAgICAgICAgICAgIHByZWZpeCwgcGx1Z2luO1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlkID0gbm9ybWFsaXplKGlkLCByZWxJZCk7XG5cbiAgICAgICAgICAgIC8vU3RyYWlnaHQgbW9kdWxlIGxvb2t1cC4gSWYgaXQgaXMgb25lIG9mIHRoZSBzcGVjaWFsIGRlcGVuZGVuY2llcyxcbiAgICAgICAgICAgIC8vZGVhbCB3aXRoIGl0LCBvdGhlcndpc2UsIGRlbGVnYXRlIHRvIG5vZGUuXG4gICAgICAgICAgICBpZiAoaWQgPT09ICdyZXF1aXJlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlUmVxdWlyZShzeXN0ZW1SZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUsIHJlbElkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWQgPT09ICdleHBvcnRzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBvcnRzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpZCA9PT0gJ21vZHVsZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kdWxlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2FkZXJDYWNoZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGVyQ2FjaGVbaWRdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkZWZpbmVDYWNoZVtpZF0pIHtcbiAgICAgICAgICAgICAgICBydW5GYWN0b3J5LmFwcGx5KG51bGwsIGRlZmluZUNhY2hlW2lkXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlckNhY2hlW2lkXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYoc3lzdGVtUmVxdWlyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3lzdGVtUmVxdWlyZShvcmlnaW5hbElkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1vZHVsZSB3aXRoIElEOiAnICsgaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vVGhlcmUgaXMgYSBwbHVnaW4gaW4gcGxheS5cbiAgICAgICAgICAgIHByZWZpeCA9IGlkLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgICAgICBpZCA9IGlkLnN1YnN0cmluZyhpbmRleCArIDEsIGlkLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIHBsdWdpbiA9IHN0cmluZ1JlcXVpcmUoc3lzdGVtUmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlLCBwcmVmaXgsIHJlbElkKTtcblxuICAgICAgICAgICAgaWYgKHBsdWdpbi5ub3JtYWxpemUpIHtcbiAgICAgICAgICAgICAgICBpZCA9IHBsdWdpbi5ub3JtYWxpemUoaWQsIG1ha2VOb3JtYWxpemUocmVsSWQpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9Ob3JtYWxpemUgdGhlIElEIG5vcm1hbGx5LlxuICAgICAgICAgICAgICAgIGlkID0gbm9ybWFsaXplKGlkLCByZWxJZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsb2FkZXJDYWNoZVtpZF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGVyQ2FjaGVbaWRdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbHVnaW4ubG9hZChpZCwgbWFrZVJlcXVpcmUoc3lzdGVtUmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlLCByZWxJZCksIG1ha2VMb2FkKGlkKSwge30pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlckNhY2hlW2lkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvL0NyZWF0ZSBhIGRlZmluZSBmdW5jdGlvbiBzcGVjaWZpYyB0byB0aGUgbW9kdWxlIGFza2luZyBmb3IgYW1kZWZpbmUuXG4gICAgZnVuY3Rpb24gZGVmaW5lKGlkLCBkZXBzLCBmYWN0b3J5KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGlkKSkge1xuICAgICAgICAgICAgZmFjdG9yeSA9IGRlcHM7XG4gICAgICAgICAgICBkZXBzID0gaWQ7XG4gICAgICAgICAgICBpZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmYWN0b3J5ID0gaWQ7XG4gICAgICAgICAgICBpZCA9IGRlcHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVwcyAmJiAhQXJyYXkuaXNBcnJheShkZXBzKSkge1xuICAgICAgICAgICAgZmFjdG9yeSA9IGRlcHM7XG4gICAgICAgICAgICBkZXBzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkZXBzKSB7XG4gICAgICAgICAgICBkZXBzID0gWydyZXF1aXJlJywgJ2V4cG9ydHMnLCAnbW9kdWxlJ107XG4gICAgICAgIH1cblxuICAgICAgICAvL1NldCB1cCBwcm9wZXJ0aWVzIGZvciB0aGlzIG1vZHVsZS4gSWYgYW4gSUQsIHRoZW4gdXNlXG4gICAgICAgIC8vaW50ZXJuYWwgY2FjaGUuIElmIG5vIElELCB0aGVuIHVzZSB0aGUgZXh0ZXJuYWwgdmFyaWFibGVzXG4gICAgICAgIC8vZm9yIHRoaXMgbm9kZSBtb2R1bGUuXG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgLy9QdXQgdGhlIG1vZHVsZSBpbiBkZWVwIGZyZWV6ZSB1bnRpbCB0aGVyZSBpcyBhXG4gICAgICAgICAgICAvL3JlcXVpcmUgY2FsbCBmb3IgaXQuXG4gICAgICAgICAgICBkZWZpbmVDYWNoZVtpZF0gPSBbaWQsIGRlcHMsIGZhY3RvcnldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcnVuRmFjdG9yeShpZCwgZGVwcywgZmFjdG9yeSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL2RlZmluZS5yZXF1aXJlLCB3aGljaCBoYXMgYWNjZXNzIHRvIGFsbCB0aGUgdmFsdWVzIGluIHRoZVxuICAgIC8vY2FjaGUuIFVzZWZ1bCBmb3IgQU1EIG1vZHVsZXMgdGhhdCBhbGwgaGF2ZSBJRHMgaW4gdGhlIGZpbGUsXG4gICAgLy9idXQgbmVlZCB0byBmaW5hbGx5IGV4cG9ydCBhIHZhbHVlIHRvIG5vZGUgYmFzZWQgb24gb25lIG9mIHRob3NlXG4gICAgLy9JRHMuXG4gICAgZGVmaW5lLnJlcXVpcmUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKGxvYWRlckNhY2hlW2lkXSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvYWRlckNhY2hlW2lkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWZpbmVDYWNoZVtpZF0pIHtcbiAgICAgICAgICAgIHJ1bkZhY3RvcnkuYXBwbHkobnVsbCwgZGVmaW5lQ2FjaGVbaWRdKTtcbiAgICAgICAgICAgIHJldHVybiBsb2FkZXJDYWNoZVtpZF07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZGVmaW5lLmFtZCA9IHt9O1xuXG4gICAgcmV0dXJuIGRlZmluZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhbWRlZmluZTtcbiIsIi8vIFRoaXMgZmlsZSBpcyBhdXRvZ2VuZXJhdGVkIHZpYSB0aGUgYGNvbW1vbmpzYCBHcnVudCB0YXNrLiBZb3UgY2FuIHJlcXVpcmUoKSB0aGlzIGZpbGUgaW4gYSBDb21tb25KUyBlbnZpcm9ubWVudC5cbnJlcXVpcmUoJy4uLy4uL2pzL3RyYW5zaXRpb24uanMnKVxucmVxdWlyZSgnLi4vLi4vanMvYWxlcnQuanMnKVxucmVxdWlyZSgnLi4vLi4vanMvYnV0dG9uLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2Nhcm91c2VsLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2NvbGxhcHNlLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2Ryb3Bkb3duLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL21vZGFsLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL3Rvb2x0aXAuanMnKVxucmVxdWlyZSgnLi4vLi4vanMvcG9wb3Zlci5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9zY3JvbGxzcHkuanMnKVxucmVxdWlyZSgnLi4vLi4vanMvdGFiLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2FmZml4LmpzJykiLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWZmaXguanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhZmZpeFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFGRklYIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFmZml4LkRFRkFVTFRTLCBvcHRpb25zKVxuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJCh0aGlzLm9wdGlvbnMudGFyZ2V0KVxuICAgICAgLm9uKCdzY3JvbGwuYnMuYWZmaXguZGF0YS1hcGknLCAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcykpXG4gICAgICAub24oJ2NsaWNrLmJzLmFmZml4LmRhdGEtYXBpJywgICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCwgdGhpcykpXG5cbiAgICB0aGlzLiRlbGVtZW50ICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLmFmZml4ZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnVucGluICAgICAgICA9IG51bGxcbiAgICB0aGlzLnBpbm5lZE9mZnNldCA9IG51bGxcblxuICAgIHRoaXMuY2hlY2tQb3NpdGlvbigpXG4gIH1cblxuICBBZmZpeC5WRVJTSU9OICA9ICczLjMuNSdcblxuICBBZmZpeC5SRVNFVCAgICA9ICdhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tJ1xuXG4gIEFmZml4LkRFRkFVTFRTID0ge1xuICAgIG9mZnNldDogMCxcbiAgICB0YXJnZXQ6IHdpbmRvd1xuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciB0YXJnZXRIZWlnaHQgPSB0aGlzLiR0YXJnZXQuaGVpZ2h0KClcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiB0aGlzLmFmZml4ZWQgPT0gJ3RvcCcpIHJldHVybiBzY3JvbGxUb3AgPCBvZmZzZXRUb3AgPyAndG9wJyA6IGZhbHNlXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkID09ICdib3R0b20nKSB7XG4gICAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwpIHJldHVybiAoc2Nyb2xsVG9wICsgdGhpcy51bnBpbiA8PSBwb3NpdGlvbi50b3ApID8gZmFsc2UgOiAnYm90dG9tJ1xuICAgICAgcmV0dXJuIChzY3JvbGxUb3AgKyB0YXJnZXRIZWlnaHQgPD0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nICAgPSB0aGlzLmFmZml4ZWQgPT0gbnVsbFxuICAgIHZhciBjb2xsaWRlclRvcCAgICA9IGluaXRpYWxpemluZyA/IHNjcm9sbFRvcCA6IHBvc2l0aW9uLnRvcFxuICAgIHZhciBjb2xsaWRlckhlaWdodCA9IGluaXRpYWxpemluZyA/IHRhcmdldEhlaWdodCA6IGhlaWdodFxuXG4gICAgaWYgKG9mZnNldFRvcCAhPSBudWxsICYmIHNjcm9sbFRvcCA8PSBvZmZzZXRUb3ApIHJldHVybiAndG9wJ1xuICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiAoY29sbGlkZXJUb3AgKyBjb2xsaWRlckhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pKSByZXR1cm4gJ2JvdHRvbSdcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFBpbm5lZE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5waW5uZWRPZmZzZXQpIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldFxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpLmFkZENsYXNzKCdhZmZpeCcpXG4gICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKVxuICAgIHZhciBwb3NpdGlvbiAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpXG4gICAgcmV0dXJuICh0aGlzLnBpbm5lZE9mZnNldCA9IHBvc2l0aW9uLnRvcCAtIHNjcm9sbFRvcClcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KCQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uLCB0aGlzKSwgMSlcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuXG5cbiAgICB2YXIgaGVpZ2h0ICAgICAgID0gdGhpcy4kZWxlbWVudC5oZWlnaHQoKVxuICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3BcbiAgICB2YXIgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbVxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSBNYXRoLm1heCgkKGRvY3VtZW50KS5oZWlnaHQoKSwgJChkb2N1bWVudC5ib2R5KS5oZWlnaHQoKSlcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9ICdvYmplY3QnKSAgICAgICAgIG9mZnNldEJvdHRvbSA9IG9mZnNldFRvcCA9IG9mZnNldFxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0VG9wID09ICdmdW5jdGlvbicpICAgIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3AodGhpcy4kZWxlbWVudClcbiAgICBpZiAodHlwZW9mIG9mZnNldEJvdHRvbSA9PSAnZnVuY3Rpb24nKSBvZmZzZXRCb3R0b20gPSBvZmZzZXQuYm90dG9tKHRoaXMuJGVsZW1lbnQpXG5cbiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSlcblxuICAgIGlmICh0aGlzLmFmZml4ZWQgIT0gYWZmaXgpIHtcbiAgICAgIGlmICh0aGlzLnVucGluICE9IG51bGwpIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCAnJylcblxuICAgICAgdmFyIGFmZml4VHlwZSA9ICdhZmZpeCcgKyAoYWZmaXggPyAnLScgKyBhZmZpeCA6ICcnKVxuICAgICAgdmFyIGUgICAgICAgICA9ICQuRXZlbnQoYWZmaXhUeXBlICsgJy5icy5hZmZpeCcpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgIHRoaXMuYWZmaXhlZCA9IGFmZml4XG4gICAgICB0aGlzLnVucGluID0gYWZmaXggPT0gJ2JvdHRvbScgPyB0aGlzLmdldFBpbm5lZE9mZnNldCgpIDogbnVsbFxuXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVClcbiAgICAgICAgLmFkZENsYXNzKGFmZml4VHlwZSlcbiAgICAgICAgLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKVxuICAgIH1cblxuICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoe1xuICAgICAgICB0b3A6IHNjcm9sbEhlaWdodCAtIGhlaWdodCAtIG9mZnNldEJvdHRvbVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuXG4gIC8vIEFGRklYIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmFmZml4JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hZmZpeCcsIChkYXRhID0gbmV3IEFmZml4KHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5hZmZpeFxuXG4gICQuZm4uYWZmaXggICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5hZmZpeC5Db25zdHJ1Y3RvciA9IEFmZml4XG5cblxuICAvLyBBRkZJWCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYWZmaXgubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFmZml4ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQUZGSVggREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwiYWZmaXhcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkc3B5ID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgPSAkc3B5LmRhdGEoKVxuXG4gICAgICBkYXRhLm9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt9XG5cbiAgICAgIGlmIChkYXRhLm9mZnNldEJvdHRvbSAhPSBudWxsKSBkYXRhLm9mZnNldC5ib3R0b20gPSBkYXRhLm9mZnNldEJvdHRvbVxuICAgICAgaWYgKGRhdGEub2Zmc2V0VG9wICAgICE9IG51bGwpIGRhdGEub2Zmc2V0LnRvcCAgICA9IGRhdGEub2Zmc2V0VG9wXG5cbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksIGRhdGEpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFsZXJ0LmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWxlcnRzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQUxFUlQgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGRpc21pc3MgPSAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB2YXIgQWxlcnQgICA9IGZ1bmN0aW9uIChlbCkge1xuICAgICQoZWwpLm9uKCdjbGljaycsIGRpc21pc3MsIHRoaXMuY2xvc2UpXG4gIH1cblxuICBBbGVydC5WRVJTSU9OID0gJzMuMy41J1xuXG4gIEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBBbGVydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgICA9ICQodGhpcylcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gJChzZWxlY3RvcilcblxuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCcuYWxlcnQnKVxuICAgIH1cblxuICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnY2xvc2UuYnMuYWxlcnQnKSlcblxuICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoKSB7XG4gICAgICAvLyBkZXRhY2ggZnJvbSBwYXJlbnQsIGZpcmUgZXZlbnQgdGhlbiBjbGVhbiB1cCBkYXRhXG4gICAgICAkcGFyZW50LmRldGFjaCgpLnRyaWdnZXIoJ2Nsb3NlZC5icy5hbGVydCcpLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgJHBhcmVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgcmVtb3ZlRWxlbWVudClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIHJlbW92ZUVsZW1lbnQoKVxuICB9XG5cblxuICAvLyBBTEVSVCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmFsZXJ0JylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hbGVydCcsIChkYXRhID0gbmV3IEFsZXJ0KHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWxlcnRcblxuICAkLmZuLmFsZXJ0ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWxlcnQuQ29uc3RydWN0b3IgPSBBbGVydFxuXG5cbiAgLy8gQUxFUlQgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFsZXJ0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hbGVydCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFMRVJUIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmFsZXJ0LmRhdGEtYXBpJywgZGlzbWlzcywgQWxlcnQucHJvdG90eXBlLmNsb3NlKVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYnV0dG9uLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYnV0dG9uc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEJVVFRPTiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9ICQuZXh0ZW5kKHt9LCBCdXR0b24uREVGQVVMVFMsIG9wdGlvbnMpXG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICB9XG5cbiAgQnV0dG9uLlZFUlNJT04gID0gJzMuMy41J1xuXG4gIEJ1dHRvbi5ERUZBVUxUUyA9IHtcbiAgICBsb2FkaW5nVGV4dDogJ2xvYWRpbmcuLi4nXG4gIH1cblxuICBCdXR0b24ucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgdmFyIGQgICAgPSAnZGlzYWJsZWQnXG4gICAgdmFyICRlbCAgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIHZhbCAgPSAkZWwuaXMoJ2lucHV0JykgPyAndmFsJyA6ICdodG1sJ1xuICAgIHZhciBkYXRhID0gJGVsLmRhdGEoKVxuXG4gICAgc3RhdGUgKz0gJ1RleHQnXG5cbiAgICBpZiAoZGF0YS5yZXNldFRleHQgPT0gbnVsbCkgJGVsLmRhdGEoJ3Jlc2V0VGV4dCcsICRlbFt2YWxdKCkpXG5cbiAgICAvLyBwdXNoIHRvIGV2ZW50IGxvb3AgdG8gYWxsb3cgZm9ybXMgdG8gc3VibWl0XG4gICAgc2V0VGltZW91dCgkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICRlbFt2YWxdKGRhdGFbc3RhdGVdID09IG51bGwgPyB0aGlzLm9wdGlvbnNbc3RhdGVdIDogZGF0YVtzdGF0ZV0pXG5cbiAgICAgIGlmIChzdGF0ZSA9PSAnbG9hZGluZ1RleHQnKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZVxuICAgICAgICAkZWwuYWRkQ2xhc3MoZCkuYXR0cihkLCBkKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTG9hZGluZykge1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlXG4gICAgICAgICRlbC5yZW1vdmVDbGFzcyhkKS5yZW1vdmVBdHRyKGQpXG4gICAgICB9XG4gICAgfSwgdGhpcyksIDApXG4gIH1cblxuICBCdXR0b24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2hhbmdlZCA9IHRydWVcbiAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQuY2xvc2VzdCgnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScpXG5cbiAgICBpZiAoJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgIHZhciAkaW5wdXQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2lucHV0JylcbiAgICAgIGlmICgkaW5wdXQucHJvcCgndHlwZScpID09ICdyYWRpbycpIHtcbiAgICAgICAgaWYgKCRpbnB1dC5wcm9wKCdjaGVja2VkJykpIGNoYW5nZWQgPSBmYWxzZVxuICAgICAgICAkcGFyZW50LmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgIH0gZWxzZSBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAnY2hlY2tib3gnKSB7XG4gICAgICAgIGlmICgoJGlucHV0LnByb3AoJ2NoZWNrZWQnKSkgIT09IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSBjaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcygnYWN0aXZlJylcbiAgICAgIH1cbiAgICAgICRpbnB1dC5wcm9wKCdjaGVja2VkJywgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpXG4gICAgICBpZiAoY2hhbmdlZCkgJGlucHV0LnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1wcmVzc2VkJywgIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKVxuICAgICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcygnYWN0aXZlJylcbiAgICB9XG4gIH1cblxuXG4gIC8vIEJVVFRPTiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuYnV0dG9uJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5idXR0b24nLCAoZGF0YSA9IG5ldyBCdXR0b24odGhpcywgb3B0aW9ucykpKVxuXG4gICAgICBpZiAob3B0aW9uID09ICd0b2dnbGUnKSBkYXRhLnRvZ2dsZSgpXG4gICAgICBlbHNlIGlmIChvcHRpb24pIGRhdGEuc2V0U3RhdGUob3B0aW9uKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5idXR0b25cblxuICAkLmZuLmJ1dHRvbiAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmJ1dHRvbi5Db25zdHJ1Y3RvciA9IEJ1dHRvblxuXG5cbiAgLy8gQlVUVE9OIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYnV0dG9uLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5idXR0b24gPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBCVVRUT04gREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciAkYnRuID0gJChlLnRhcmdldClcbiAgICAgIGlmICghJGJ0bi5oYXNDbGFzcygnYnRuJykpICRidG4gPSAkYnRuLmNsb3Nlc3QoJy5idG4nKVxuICAgICAgUGx1Z2luLmNhbGwoJGJ0biwgJ3RvZ2dsZScpXG4gICAgICBpZiAoISgkKGUudGFyZ2V0KS5pcygnaW5wdXRbdHlwZT1cInJhZGlvXCJdJykgfHwgJChlLnRhcmdldCkuaXMoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScpKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfSlcbiAgICAub24oJ2ZvY3VzLmJzLmJ1dHRvbi5kYXRhLWFwaSBibHVyLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5idG4nKS50b2dnbGVDbGFzcygnZm9jdXMnLCAvXmZvY3VzKGluKT8kLy50ZXN0KGUudHlwZSkpXG4gICAgfSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNhcm91c2VsLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY2Fyb3VzZWxcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDQVJPVVNFTCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy4kaW5kaWNhdG9ycyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmNhcm91c2VsLWluZGljYXRvcnMnKVxuICAgIHRoaXMub3B0aW9ucyAgICAgPSBvcHRpb25zXG4gICAgdGhpcy5wYXVzZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnNsaWRpbmcgICAgID0gbnVsbFxuICAgIHRoaXMuaW50ZXJ2YWwgICAgPSBudWxsXG4gICAgdGhpcy4kYWN0aXZlICAgICA9IG51bGxcbiAgICB0aGlzLiRpdGVtcyAgICAgID0gbnVsbFxuXG4gICAgdGhpcy5vcHRpb25zLmtleWJvYXJkICYmIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcykpXG5cbiAgICB0aGlzLm9wdGlvbnMucGF1c2UgPT0gJ2hvdmVyJyAmJiAhKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgJiYgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCdtb3VzZWVudGVyLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLnBhdXNlLCB0aGlzKSlcbiAgICAgIC5vbignbW91c2VsZWF2ZS5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5jeWNsZSwgdGhpcykpXG4gIH1cblxuICBDYXJvdXNlbC5WRVJTSU9OICA9ICczLjMuNSdcblxuICBDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gNjAwXG5cbiAgQ2Fyb3VzZWwuREVGQVVMVFMgPSB7XG4gICAgaW50ZXJ2YWw6IDUwMDAsXG4gICAgcGF1c2U6ICdob3ZlcicsXG4gICAgd3JhcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cbiAgICBzd2l0Y2ggKGUud2hpY2gpIHtcbiAgICAgIGNhc2UgMzc6IHRoaXMucHJldigpOyBicmVha1xuICAgICAgY2FzZSAzOTogdGhpcy5uZXh0KCk7IGJyZWFrXG4gICAgICBkZWZhdWx0OiByZXR1cm5cbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5jeWNsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSBmYWxzZSlcblxuICAgIHRoaXMuaW50ZXJ2YWwgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKVxuXG4gICAgdGhpcy5vcHRpb25zLmludGVydmFsXG4gICAgICAmJiAhdGhpcy5wYXVzZWRcbiAgICAgICYmICh0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoJC5wcm94eSh0aGlzLm5leHQsIHRoaXMpLCB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwpKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHRoaXMuJGl0ZW1zID0gaXRlbS5wYXJlbnQoKS5jaGlsZHJlbignLml0ZW0nKVxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5pbmRleChpdGVtIHx8IHRoaXMuJGFjdGl2ZSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtRm9yRGlyZWN0aW9uID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgYWN0aXZlKSB7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgoYWN0aXZlKVxuICAgIHZhciB3aWxsV3JhcCA9IChkaXJlY3Rpb24gPT0gJ3ByZXYnICYmIGFjdGl2ZUluZGV4ID09PSAwKVxuICAgICAgICAgICAgICAgIHx8IChkaXJlY3Rpb24gPT0gJ25leHQnICYmIGFjdGl2ZUluZGV4ID09ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSlcbiAgICBpZiAod2lsbFdyYXAgJiYgIXRoaXMub3B0aW9ucy53cmFwKSByZXR1cm4gYWN0aXZlXG4gICAgdmFyIGRlbHRhID0gZGlyZWN0aW9uID09ICdwcmV2JyA/IC0xIDogMVxuICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLiRpdGVtcy5sZW5ndGhcbiAgICByZXR1cm4gdGhpcy4kaXRlbXMuZXEoaXRlbUluZGV4KVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnRvID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciB0aGF0ICAgICAgICA9IHRoaXNcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleCh0aGlzLiRhY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpKVxuXG4gICAgaWYgKHBvcyA+ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSB8fCBwb3MgPCAwKSByZXR1cm5cblxuICAgIGlmICh0aGlzLnNsaWRpbmcpICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50Lm9uZSgnc2xpZC5icy5jYXJvdXNlbCcsIGZ1bmN0aW9uICgpIHsgdGhhdC50byhwb3MpIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoYWN0aXZlSW5kZXggPT0gcG9zKSByZXR1cm4gdGhpcy5wYXVzZSgpLmN5Y2xlKClcblxuICAgIHJldHVybiB0aGlzLnNsaWRlKHBvcyA+IGFjdGl2ZUluZGV4ID8gJ25leHQnIDogJ3ByZXYnLCB0aGlzLiRpdGVtcy5lcShwb3MpKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlIHx8ICh0aGlzLnBhdXNlZCA9IHRydWUpXG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5maW5kKCcubmV4dCwgLnByZXYnKS5sZW5ndGggJiYgJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpXG4gICAgICB0aGlzLmN5Y2xlKHRydWUpXG4gICAgfVxuXG4gICAgdGhpcy5pbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zbGlkZSgnbmV4dCcpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zbGlkZSgncHJldicpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuc2xpZGUgPSBmdW5jdGlvbiAodHlwZSwgbmV4dCkge1xuICAgIHZhciAkYWN0aXZlICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpXG4gICAgdmFyICRuZXh0ICAgICA9IG5leHQgfHwgdGhpcy5nZXRJdGVtRm9yRGlyZWN0aW9uKHR5cGUsICRhY3RpdmUpXG4gICAgdmFyIGlzQ3ljbGluZyA9IHRoaXMuaW50ZXJ2YWxcbiAgICB2YXIgZGlyZWN0aW9uID0gdHlwZSA9PSAnbmV4dCcgPyAnbGVmdCcgOiAncmlnaHQnXG4gICAgdmFyIHRoYXQgICAgICA9IHRoaXNcblxuICAgIGlmICgkbmV4dC5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVybiAodGhpcy5zbGlkaW5nID0gZmFsc2UpXG5cbiAgICB2YXIgcmVsYXRlZFRhcmdldCA9ICRuZXh0WzBdXG4gICAgdmFyIHNsaWRlRXZlbnQgPSAkLkV2ZW50KCdzbGlkZS5icy5jYXJvdXNlbCcsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgIH0pXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRlRXZlbnQpXG4gICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5zbGlkaW5nID0gdHJ1ZVxuXG4gICAgaXNDeWNsaW5nICYmIHRoaXMucGF1c2UoKVxuXG4gICAgaWYgKHRoaXMuJGluZGljYXRvcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRpbmRpY2F0b3JzLmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgIHZhciAkbmV4dEluZGljYXRvciA9ICQodGhpcy4kaW5kaWNhdG9ycy5jaGlsZHJlbigpW3RoaXMuZ2V0SXRlbUluZGV4KCRuZXh0KV0pXG4gICAgICAkbmV4dEluZGljYXRvciAmJiAkbmV4dEluZGljYXRvci5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudCgnc2xpZC5icy5jYXJvdXNlbCcsIHsgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCwgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfSkgLy8geWVzLCBcInNsaWRcIlxuICAgIGlmICgkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdzbGlkZScpKSB7XG4gICAgICAkbmV4dC5hZGRDbGFzcyh0eXBlKVxuICAgICAgJG5leHRbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG4gICAgICAkYWN0aXZlLmFkZENsYXNzKGRpcmVjdGlvbilcbiAgICAgICRuZXh0LmFkZENsYXNzKGRpcmVjdGlvbilcbiAgICAgICRhY3RpdmVcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRuZXh0LnJlbW92ZUNsYXNzKFt0eXBlLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcyhbJ2FjdGl2ZScsIGRpcmVjdGlvbl0uam9pbignICcpKVxuICAgICAgICAgIHRoYXQuc2xpZGluZyA9IGZhbHNlXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KVxuICAgICAgICAgIH0sIDApXG4gICAgICAgIH0pXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OKVxuICAgIH0gZWxzZSB7XG4gICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgJG5leHQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB0aGlzLnNsaWRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICB9XG5cbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDYXJvdXNlbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcbiAgICAgIHZhciBhY3Rpb24gID0gdHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyA/IG9wdGlvbiA6IG9wdGlvbnMuc2xpZGVcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcsIChkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdudW1iZXInKSBkYXRhLnRvKG9wdGlvbilcbiAgICAgIGVsc2UgaWYgKGFjdGlvbikgZGF0YVthY3Rpb25dKClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMuaW50ZXJ2YWwpIGRhdGEucGF1c2UoKS5jeWNsZSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmNhcm91c2VsXG5cbiAgJC5mbi5jYXJvdXNlbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmNhcm91c2VsLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWxcblxuXG4gIC8vIENBUk9VU0VMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5jYXJvdXNlbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uY2Fyb3VzZWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBocmVmXG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyICR0YXJnZXQgPSAkKCR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgKGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgaWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKCdjYXJvdXNlbCcpKSByZXR1cm5cbiAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxuICAgIHZhciBzbGlkZUluZGV4ID0gJHRoaXMuYXR0cignZGF0YS1zbGlkZS10bycpXG4gICAgaWYgKHNsaWRlSW5kZXgpIG9wdGlvbnMuaW50ZXJ2YWwgPSBmYWxzZVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9ucylcblxuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAkdGFyZ2V0LmRhdGEoJ2JzLmNhcm91c2VsJykudG8oc2xpZGVJbmRleClcbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZV0nLCBjbGlja0hhbmRsZXIpXG4gICAgLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZS10b10nLCBjbGlja0hhbmRsZXIpXG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRjYXJvdXNlbCA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogY29sbGFwc2UuanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNjb2xsYXBzZVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENPTExBUFNFIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgICAgID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuJHRyaWdnZXIgICAgICA9ICQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdLCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXScpXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gbnVsbFxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy4kZWxlbWVudCwgdGhpcy4kdHJpZ2dlcilcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRvZ2dsZSkgdGhpcy50b2dnbGUoKVxuICB9XG5cbiAgQ29sbGFwc2UuVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTiA9IDM1MFxuXG4gIENvbGxhcHNlLkRFRkFVTFRTID0ge1xuICAgIHRvZ2dsZTogdHJ1ZVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmRpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzV2lkdGggPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCd3aWR0aCcpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIGFjdGl2ZXNEYXRhXG4gICAgdmFyIGFjdGl2ZXMgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50LmNoaWxkcmVuKCcucGFuZWwnKS5jaGlsZHJlbignLmluLCAuY29sbGFwc2luZycpXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgYWN0aXZlc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS50cmFuc2l0aW9uaW5nKSByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ3Nob3cuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBQbHVnaW4uY2FsbChhY3RpdmVzLCAnaGlkZScpXG4gICAgICBhY3RpdmVzRGF0YSB8fCBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJywgbnVsbClcbiAgICB9XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLiR0cmlnZ2VyXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UgaW4nKVtkaW1lbnNpb25dKCcnKVxuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OKVtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbMF1bc2Nyb2xsU2l6ZV0pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8ICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy5jb2xsYXBzZScpXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZSBpbicpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDFcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICBbZGltZW5zaW9uXSgwKVxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkKHRoaXMub3B0aW9ucy5wYXJlbnQpXG4gICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInICsgdGhpcy5vcHRpb25zLnBhcmVudCArICdcIl0nKVxuICAgICAgLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGdldFRhcmdldEZyb21UcmlnZ2VyKCRlbGVtZW50KSwgJGVsZW1lbnQpXG4gICAgICB9LCB0aGlzKSlcbiAgICAgIC5lbmQoKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJHRyaWdnZXIpIHtcbiAgICB2YXIgaXNPcGVuID0gJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJylcblxuICAgICRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgJHRyaWdnZXJcbiAgICAgIC50b2dnbGVDbGFzcygnY29sbGFwc2VkJywgIWlzT3BlbilcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRyaWdnZXIpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciB0YXJnZXQgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRhcmdldCcpXG4gICAgICB8fCAoaHJlZiA9ICR0cmlnZ2VyLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuXG4gICAgcmV0dXJuICQodGFyZ2V0KVxuICB9XG5cblxuICAvLyBDT0xMQVBTRSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhICYmIG9wdGlvbnMudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3Qob3B0aW9uKSkgb3B0aW9ucy50b2dnbGUgPSBmYWxzZVxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScsIChkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jb2xsYXBzZVxuXG4gICQuZm4uY29sbGFwc2UgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jb2xsYXBzZS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG5cblxuICAvLyBDT0xMQVBTRSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY29sbGFwc2Uubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNvbGxhcHNlID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuXG4gICAgaWYgKCEkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIHZhciAkdGFyZ2V0ID0gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRoaXMpXG4gICAgdmFyIGRhdGEgICAgPSAkdGFyZ2V0LmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICB2YXIgb3B0aW9uICA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0aGlzLmRhdGEoKVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uKVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogZHJvcGRvd24uanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNkcm9wZG93bnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBEUk9QRE9XTiBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgYmFja2Ryb3AgPSAnLmRyb3Bkb3duLWJhY2tkcm9wJ1xuICB2YXIgdG9nZ2xlICAgPSAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nXG4gIHZhciBEcm9wZG93biA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgJChlbGVtZW50KS5vbignY2xpY2suYnMuZHJvcGRvd24nLCB0aGlzLnRvZ2dsZSlcbiAgfVxuXG4gIERyb3Bkb3duLlZFUlNJT04gPSAnMy4zLjUnXG5cbiAgZnVuY3Rpb24gZ2V0UGFyZW50KCR0aGlzKSB7XG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgLyNbQS1aYS16XS8udGVzdChzZWxlY3RvcikgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9IHNlbGVjdG9yICYmICQoc2VsZWN0b3IpXG5cbiAgICByZXR1cm4gJHBhcmVudCAmJiAkcGFyZW50Lmxlbmd0aCA/ICRwYXJlbnQgOiAkdGhpcy5wYXJlbnQoKVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJNZW51cyhlKSB7XG4gICAgaWYgKGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuXG4gICAgJChiYWNrZHJvcCkucmVtb3ZlKClcbiAgICAkKHRvZ2dsZSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICAgICAgICA9ICQodGhpcylcbiAgICAgIHZhciAkcGFyZW50ICAgICAgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxuXG4gICAgICBpZiAoISRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKSkgcmV0dXJuXG5cbiAgICAgIGlmIChlICYmIGUudHlwZSA9PSAnY2xpY2snICYmIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkgJiYgJC5jb250YWlucygkcGFyZW50WzBdLCBlLnRhcmdldCkpIHJldHVyblxuXG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2hpZGUuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICAkdGhpcy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ29wZW4nKS50cmlnZ2VyKCdoaWRkZW4uYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KVxuICAgIH0pXG4gIH1cblxuICBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxuXG4gICAgdmFyICRwYXJlbnQgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxuXG4gICAgY2xlYXJNZW51cygpXG5cbiAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICEkcGFyZW50LmNsb3Nlc3QoJy5uYXZiYXItbmF2JykubGVuZ3RoKSB7XG4gICAgICAgIC8vIGlmIG1vYmlsZSB3ZSB1c2UgYSBiYWNrZHJvcCBiZWNhdXNlIGNsaWNrIGV2ZW50cyBkb24ndCBkZWxlZ2F0ZVxuICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxuICAgICAgICAgIC5hZGRDbGFzcygnZHJvcGRvd24tYmFja2Ryb3AnKVxuICAgICAgICAgIC5pbnNlcnRBZnRlcigkKHRoaXMpKVxuICAgICAgICAgIC5vbignY2xpY2snLCBjbGVhck1lbnVzKVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9XG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ3Nob3cuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICAkdGhpc1xuICAgICAgICAudHJpZ2dlcignZm9jdXMnKVxuICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJylcblxuICAgICAgJHBhcmVudFxuICAgICAgICAudG9nZ2xlQ2xhc3MoJ29wZW4nKVxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICghLygzOHw0MHwyN3wzMikvLnRlc3QoZS53aGljaCkgfHwgL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuXG5cbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxuXG4gICAgdmFyICRwYXJlbnQgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxuXG4gICAgaWYgKCFpc0FjdGl2ZSAmJiBlLndoaWNoICE9IDI3IHx8IGlzQWN0aXZlICYmIGUud2hpY2ggPT0gMjcpIHtcbiAgICAgIGlmIChlLndoaWNoID09IDI3KSAkcGFyZW50LmZpbmQodG9nZ2xlKS50cmlnZ2VyKCdmb2N1cycpXG4gICAgICByZXR1cm4gJHRoaXMudHJpZ2dlcignY2xpY2snKVxuICAgIH1cblxuICAgIHZhciBkZXNjID0gJyBsaTpub3QoLmRpc2FibGVkKTp2aXNpYmxlIGEnXG4gICAgdmFyICRpdGVtcyA9ICRwYXJlbnQuZmluZCgnLmRyb3Bkb3duLW1lbnUnICsgZGVzYylcblxuICAgIGlmICghJGl0ZW1zLmxlbmd0aCkgcmV0dXJuXG5cbiAgICB2YXIgaW5kZXggPSAkaXRlbXMuaW5kZXgoZS50YXJnZXQpXG5cbiAgICBpZiAoZS53aGljaCA9PSAzOCAmJiBpbmRleCA+IDApICAgICAgICAgICAgICAgICBpbmRleC0tICAgICAgICAgLy8gdXBcbiAgICBpZiAoZS53aGljaCA9PSA0MCAmJiBpbmRleCA8ICRpdGVtcy5sZW5ndGggLSAxKSBpbmRleCsrICAgICAgICAgLy8gZG93blxuICAgIGlmICghfmluZGV4KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMFxuXG4gICAgJGl0ZW1zLmVxKGluZGV4KS50cmlnZ2VyKCdmb2N1cycpXG4gIH1cblxuXG4gIC8vIERST1BET1dOIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJywgKGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5kcm9wZG93blxuXG4gICQuZm4uZHJvcGRvd24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5kcm9wZG93bi5Db25zdHJ1Y3RvciA9IERyb3Bkb3duXG5cblxuICAvLyBEUk9QRE9XTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uZHJvcGRvd24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmRyb3Bkb3duID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQVBQTFkgVE8gU1RBTkRBUkQgRFJPUERPV04gRUxFTUVOVFNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCBjbGVhck1lbnVzKVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duIGZvcm0nLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpIH0pXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSlcbiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCB0b2dnbGUsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxuICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24tbWVudScsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogbW9kYWwuanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNtb2RhbHNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBNT0RBTCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgTW9kYWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyAgICAgICAgICAgICA9IG9wdGlvbnNcbiAgICB0aGlzLiRib2R5ICAgICAgICAgICAgICAgPSAkKGRvY3VtZW50LmJvZHkpXG4gICAgdGhpcy4kZWxlbWVudCAgICAgICAgICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMuJGRpYWxvZyAgICAgICAgICAgICA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLm1vZGFsLWRpYWxvZycpXG4gICAgdGhpcy4kYmFja2Ryb3AgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuaXNTaG93biAgICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLm9yaWdpbmFsQm9keVBhZCAgICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCAgICAgID0gMFxuICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlbW90ZSkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuZmluZCgnLm1vZGFsLWNvbnRlbnQnKVxuICAgICAgICAubG9hZCh0aGlzLm9wdGlvbnMucmVtb3RlLCAkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2xvYWRlZC5icy5tb2RhbCcpXG4gICAgICAgIH0sIHRoaXMpKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLlZFUlNJT04gID0gJzMuMy41J1xuXG4gIE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDBcbiAgTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxuXG4gIE1vZGFsLkRFRkFVTFRTID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBlICAgID0gJC5FdmVudCgnc2hvdy5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKHRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IHRydWVcblxuICAgIHRoaXMuY2hlY2tTY3JvbGxiYXIoKVxuICAgIHRoaXMuc2V0U2Nyb2xsYmFyKClcbiAgICB0aGlzLiRib2R5LmFkZENsYXNzKCdtb2RhbC1vcGVuJylcblxuICAgIHRoaXMuZXNjYXBlKClcbiAgICB0aGlzLnJlc2l6ZSgpXG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsICQucHJveHkodGhpcy5oaWRlLCB0aGlzKSlcblxuICAgIHRoaXMuJGRpYWxvZy5vbignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRlbGVtZW50Lm9uZSgnbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoYXQuJGVsZW1lbnQpKSB0aGF0Lmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhhdC4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpXG5cbiAgICAgIGlmICghdGhhdC4kZWxlbWVudC5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudC5hcHBlbmRUbyh0aGF0LiRib2R5KSAvLyBkb24ndCBtb3ZlIG1vZGFscyBkb20gcG9zaXRpb25cbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAuc2hvdygpXG4gICAgICAgIC5zY3JvbGxUb3AoMClcblxuICAgICAgdGhhdC5hZGp1c3REaWFsb2coKVxuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB0aGF0LiRlbGVtZW50WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuICAgICAgfVxuXG4gICAgICB0aGF0LiRlbGVtZW50LmFkZENsYXNzKCdpbicpXG5cbiAgICAgIHRoYXQuZW5mb3JjZUZvY3VzKClcblxuICAgICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93bi5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgICAgdHJhbnNpdGlvbiA/XG4gICAgICAgIHRoYXQuJGRpYWxvZyAvLyB3YWl0IGZvciBtb2RhbCB0byBzbGlkZSBpblxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgZSA9ICQuRXZlbnQoJ2hpZGUuYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoIXRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IGZhbHNlXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgJChkb2N1bWVudCkub2ZmKCdmb2N1c2luLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5yZW1vdmVDbGFzcygnaW4nKVxuICAgICAgLm9mZignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgICAub2ZmKCdtb3VzZXVwLmRpc21pc3MuYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZGlhbG9nLm9mZignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnKVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eSh0aGlzLmhpZGVNb2RhbCwgdGhpcykpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICB0aGlzLmhpZGVNb2RhbCgpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICQoZG9jdW1lbnQpXG4gICAgICAub2ZmKCdmb2N1c2luLmJzLm1vZGFsJykgLy8gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG4gICAgICAub24oJ2ZvY3VzaW4uYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLiRlbGVtZW50WzBdICE9PSBlLnRhcmdldCAmJiAhdGhpcy4kZWxlbWVudC5oYXMoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKVxuICAgICAgICB9XG4gICAgICB9LCB0aGlzKSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5lc2NhcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNTaG93biAmJiB0aGlzLm9wdGlvbnMua2V5Ym9hcmQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS53aGljaCA9PSAyNyAmJiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1Nob3duKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcbiAgICB9XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2hvd24pIHtcbiAgICAgICQod2luZG93KS5vbigncmVzaXplLmJzLm1vZGFsJywgJC5wcm94eSh0aGlzLmhhbmRsZVVwZGF0ZSwgdGhpcykpXG4gICAgfSBlbHNlIHtcbiAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGVNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB0aGlzLiRlbGVtZW50LmhpZGUoKVxuICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kYm9keS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpXG4gICAgICB0aGF0LnJlc2V0QWRqdXN0bWVudHMoKVxuICAgICAgdGhhdC5yZXNldFNjcm9sbGJhcigpXG4gICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2hpZGRlbi5icy5tb2RhbCcpXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZW1vdmVCYWNrZHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRiYWNrZHJvcCAmJiB0aGlzLiRiYWNrZHJvcC5yZW1vdmUoKVxuICAgIHRoaXMuJGJhY2tkcm9wID0gbnVsbFxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmJhY2tkcm9wID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdmFyIGFuaW1hdGUgPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgPyAnZmFkZScgOiAnJ1xuXG4gICAgaWYgKHRoaXMuaXNTaG93biAmJiB0aGlzLm9wdGlvbnMuYmFja2Ryb3ApIHtcbiAgICAgIHZhciBkb0FuaW1hdGUgPSAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiBhbmltYXRlXG5cbiAgICAgIHRoaXMuJGJhY2tkcm9wID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcbiAgICAgICAgLmFkZENsYXNzKCdtb2RhbC1iYWNrZHJvcCAnICsgYW5pbWF0ZSlcbiAgICAgICAgLmFwcGVuZFRvKHRoaXMuJGJvZHkpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSByZXR1cm5cbiAgICAgICAgdGhpcy5vcHRpb25zLmJhY2tkcm9wID09ICdzdGF0aWMnXG4gICAgICAgICAgPyB0aGlzLiRlbGVtZW50WzBdLmZvY3VzKClcbiAgICAgICAgICA6IHRoaXMuaGlkZSgpXG4gICAgICB9LCB0aGlzKSlcblxuICAgICAgaWYgKGRvQW5pbWF0ZSkgdGhpcy4kYmFja2Ryb3BbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG5cbiAgICAgIHRoaXMuJGJhY2tkcm9wLmFkZENsYXNzKCdpbicpXG5cbiAgICAgIGlmICghY2FsbGJhY2spIHJldHVyblxuXG4gICAgICBkb0FuaW1hdGUgP1xuICAgICAgICB0aGlzLiRiYWNrZHJvcFxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNhbGxiYWNrKClcblxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93biAmJiB0aGlzLiRiYWNrZHJvcCkge1xuICAgICAgdGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGF0LnJlbW92ZUJhY2tkcm9wKClcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgICAgfVxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFja1JlbW92ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFja1JlbW92ZSgpXG5cbiAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgLy8gdGhlc2UgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuXG4gIE1vZGFsLnByb3RvdHlwZS5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hZGp1c3REaWFsb2coKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmFkanVzdERpYWxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbW9kYWxJc092ZXJmbG93aW5nID0gdGhpcy4kZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogICF0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmIG1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJyxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiAhbW9kYWxJc092ZXJmbG93aW5nID8gdGhpcy5zY3JvbGxiYXJXaWR0aCA6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAnJyxcbiAgICAgIHBhZGRpbmdSaWdodDogJydcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmNoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBmdWxsV2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgIGlmICghZnVsbFdpbmRvd1dpZHRoKSB7IC8vIHdvcmthcm91bmQgZm9yIG1pc3Npbmcgd2luZG93LmlubmVyV2lkdGggaW4gSUU4XG4gICAgICB2YXIgZG9jdW1lbnRFbGVtZW50UmVjdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgZnVsbFdpbmRvd1dpZHRoID0gZG9jdW1lbnRFbGVtZW50UmVjdC5yaWdodCAtIE1hdGguYWJzKGRvY3VtZW50RWxlbWVudFJlY3QubGVmdClcbiAgICB9XG4gICAgdGhpcy5ib2R5SXNPdmVyZmxvd2luZyA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCBmdWxsV2luZG93V2lkdGhcbiAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5tZWFzdXJlU2Nyb2xsYmFyKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5zZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvZHlQYWQgPSBwYXJzZUludCgodGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnKSB8fCAwKSwgMTApXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCB8fCAnJ1xuICAgIGlmICh0aGlzLmJvZHlJc092ZXJmbG93aW5nKSB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIGJvZHlQYWQgKyB0aGlzLnNjcm9sbGJhcldpZHRoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgdGhpcy5vcmlnaW5hbEJvZHlQYWQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUubWVhc3VyZVNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHsgLy8gdGh4IHdhbHNoXG4gICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZSdcbiAgICB0aGlzLiRib2R5LmFwcGVuZChzY3JvbGxEaXYpXG4gICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoXG4gICAgdGhpcy4kYm9keVswXS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpXG4gICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoXG4gIH1cblxuXG4gIC8vIE1PREFMIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbiwgX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5tb2RhbCcpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBNb2RhbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5tb2RhbCcsIChkYXRhID0gbmV3IE1vZGFsKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oX3JlbGF0ZWRUYXJnZXQpXG4gICAgICBlbHNlIGlmIChvcHRpb25zLnNob3cpIGRhdGEuc2hvdyhfcmVsYXRlZFRhcmdldClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ubW9kYWxcblxuICAkLmZuLm1vZGFsICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4ubW9kYWwuQ29uc3RydWN0b3IgPSBNb2RhbFxuXG5cbiAgLy8gTU9EQUwgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLm1vZGFsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5tb2RhbCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIE1PREFMIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLm1vZGFsLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICB2YXIgaHJlZiAgICA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgIHZhciAkdGFyZ2V0ID0gJCgkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSkgLy8gc3RyaXAgZm9yIGllN1xuICAgIHZhciBvcHRpb24gID0gJHRhcmdldC5kYXRhKCdicy5tb2RhbCcpID8gJ3RvZ2dsZScgOiAkLmV4dGVuZCh7IHJlbW90ZTogIS8jLy50ZXN0KGhyZWYpICYmIGhyZWYgfSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcblxuICAgIGlmICgkdGhpcy5pcygnYScpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICR0YXJnZXQub25lKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgICR0YXJnZXQub25lKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICR0aGlzLmlzKCc6dmlzaWJsZScpICYmICR0aGlzLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIH0pXG4gICAgfSlcbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb24sIHRoaXMpXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBwb3BvdmVyLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jcG9wb3ZlcnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBQT1BPVkVSIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgUG9wb3ZlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5pbml0KCdwb3BvdmVyJywgZWxlbWVudCwgb3B0aW9ucylcbiAgfVxuXG4gIGlmICghJC5mbi50b29sdGlwKSB0aHJvdyBuZXcgRXJyb3IoJ1BvcG92ZXIgcmVxdWlyZXMgdG9vbHRpcC5qcycpXG5cbiAgUG9wb3Zlci5WRVJTSU9OICA9ICczLjMuNSdcblxuICBQb3BvdmVyLkRFRkFVTFRTID0gJC5leHRlbmQoe30sICQuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5ERUZBVUxUUywge1xuICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICB0cmlnZ2VyOiAnY2xpY2snLFxuICAgIGNvbnRlbnQ6ICcnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxoMyBjbGFzcz1cInBvcG92ZXItdGl0bGVcIj48L2gzPjxkaXYgY2xhc3M9XCJwb3BvdmVyLWNvbnRlbnRcIj48L2Rpdj48L2Rpdj4nXG4gIH0pXG5cblxuICAvLyBOT1RFOiBQT1BPVkVSIEVYVEVORFMgdG9vbHRpcC5qc1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFBvcG92ZXIucHJvdG90eXBlID0gJC5leHRlbmQoe30sICQuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5wcm90b3R5cGUpXG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb3BvdmVyXG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFBvcG92ZXIuREVGQVVMVFNcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aXAgICAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHRpdGxlICAgPSB0aGlzLmdldFRpdGxlKClcbiAgICB2YXIgY29udGVudCA9IHRoaXMuZ2V0Q29udGVudCgpXG5cbiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJylbdGhpcy5vcHRpb25zLmh0bWwgPyAnaHRtbCcgOiAndGV4dCddKHRpdGxlKVxuICAgICR0aXAuZmluZCgnLnBvcG92ZXItY29udGVudCcpLmNoaWxkcmVuKCkuZGV0YWNoKCkuZW5kKClbIC8vIHdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcbiAgICAgIHRoaXMub3B0aW9ucy5odG1sID8gKHR5cGVvZiBjb250ZW50ID09ICdzdHJpbmcnID8gJ2h0bWwnIDogJ2FwcGVuZCcpIDogJ3RleHQnXG4gICAgXShjb250ZW50KVxuXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSB0b3AgYm90dG9tIGxlZnQgcmlnaHQgaW4nKVxuXG4gICAgLy8gSUU4IGRvZXNuJ3QgYWNjZXB0IGhpZGluZyB2aWEgdGhlIGA6ZW1wdHlgIHBzZXVkbyBzZWxlY3Rvciwgd2UgaGF2ZSB0byBkb1xuICAgIC8vIHRoaXMgbWFudWFsbHkgYnkgY2hlY2tpbmcgdGhlIGNvbnRlbnRzLlxuICAgIGlmICghJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpLmh0bWwoKSkgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpLmhpZGUoKVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuaGFzQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuZ2V0Q29udGVudCgpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5nZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHJldHVybiAkZS5hdHRyKCdkYXRhLWNvbnRlbnQnKVxuICAgICAgfHwgKHR5cGVvZiBvLmNvbnRlbnQgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgICBvLmNvbnRlbnQuY2FsbCgkZVswXSkgOlxuICAgICAgICAgICAgby5jb250ZW50KVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuYXJyb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLiRhcnJvdyA9IHRoaXMuJGFycm93IHx8IHRoaXMudGlwKCkuZmluZCgnLmFycm93JykpXG4gIH1cblxuXG4gIC8vIFBPUE9WRVIgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5wb3BvdmVyJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3Qob3B0aW9uKSkgcmV0dXJuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnBvcG92ZXInLCAoZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5wb3BvdmVyXG5cbiAgJC5mbi5wb3BvdmVyICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4ucG9wb3Zlci5Db25zdHJ1Y3RvciA9IFBvcG92ZXJcblxuXG4gIC8vIFBPUE9WRVIgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4ucG9wb3Zlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ucG9wb3ZlciA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHNjcm9sbHNweS5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Njcm9sbHNweVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFNDUk9MTFNQWSBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gU2Nyb2xsU3B5KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRib2R5ICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQgPSAkKGVsZW1lbnQpLmlzKGRvY3VtZW50LmJvZHkpID8gJCh3aW5kb3cpIDogJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICAgPSAkLmV4dGVuZCh7fSwgU2Nyb2xsU3B5LkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuc2VsZWN0b3IgICAgICAgPSAodGhpcy5vcHRpb25zLnRhcmdldCB8fCAnJykgKyAnIC5uYXYgbGkgPiBhJ1xuICAgIHRoaXMub2Zmc2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgICA9IDBcblxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQub24oJ3Njcm9sbC5icy5zY3JvbGxzcHknLCAkLnByb3h5KHRoaXMucHJvY2VzcywgdGhpcykpXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG5cbiAgU2Nyb2xsU3B5LlZFUlNJT04gID0gJzMuMy41J1xuXG4gIFNjcm9sbFNweS5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDEwXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgICAgICAgICAgPSB0aGlzXG4gICAgdmFyIG9mZnNldE1ldGhvZCAgPSAnb2Zmc2V0J1xuICAgIHZhciBvZmZzZXRCYXNlICAgID0gMFxuXG4gICAgdGhpcy5vZmZzZXRzICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgID0gW11cbiAgICB0aGlzLnNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xuICAgICAgb2Zmc2V0TWV0aG9kID0gJ3Bvc2l0aW9uJ1xuICAgICAgb2Zmc2V0QmFzZSAgID0gdGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKVxuICAgIH1cblxuICAgIHRoaXMuJGJvZHlcbiAgICAgIC5maW5kKHRoaXMuc2VsZWN0b3IpXG4gICAgICAubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbCAgID0gJCh0aGlzKVxuICAgICAgICB2YXIgaHJlZiAgPSAkZWwuZGF0YSgndGFyZ2V0JykgfHwgJGVsLmF0dHIoJ2hyZWYnKVxuICAgICAgICB2YXIgJGhyZWYgPSAvXiMuLy50ZXN0KGhyZWYpICYmICQoaHJlZilcblxuICAgICAgICByZXR1cm4gKCRocmVmXG4gICAgICAgICAgJiYgJGhyZWYubGVuZ3RoXG4gICAgICAgICAgJiYgJGhyZWYuaXMoJzp2aXNpYmxlJylcbiAgICAgICAgICAmJiBbWyRocmVmW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCBocmVmXV0pIHx8IG51bGxcbiAgICAgIH0pXG4gICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYVswXSAtIGJbMF0gfSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5vZmZzZXRzLnB1c2godGhpc1swXSlcbiAgICAgICAgdGhhdC50YXJnZXRzLnB1c2godGhpc1sxXSlcbiAgICAgIH0pXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRvcCAgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKCkgKyB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICB2YXIgbWF4U2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0cyAgICAgID0gdGhpcy5vZmZzZXRzXG4gICAgdmFyIHRhcmdldHMgICAgICA9IHRoaXMudGFyZ2V0c1xuICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLmFjdGl2ZVRhcmdldFxuICAgIHZhciBpXG5cbiAgICBpZiAodGhpcy5zY3JvbGxIZWlnaHQgIT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgIH1cblxuICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICByZXR1cm4gYWN0aXZlVGFyZ2V0ICE9IChpID0gdGFyZ2V0c1t0YXJnZXRzLmxlbmd0aCAtIDFdKSAmJiB0aGlzLmFjdGl2YXRlKGkpXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCBvZmZzZXRzWzBdKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGxcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyKClcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgYWN0aXZlVGFyZ2V0ICE9IHRhcmdldHNbaV1cbiAgICAgICAgJiYgc2Nyb2xsVG9wID49IG9mZnNldHNbaV1cbiAgICAgICAgJiYgKG9mZnNldHNbaSArIDFdID09PSB1bmRlZmluZWQgfHwgc2Nyb2xsVG9wIDwgb2Zmc2V0c1tpICsgMV0pXG4gICAgICAgICYmIHRoaXMuYWN0aXZhdGUodGFyZ2V0c1tpXSlcbiAgICB9XG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICB0aGlzLmNsZWFyKClcblxuICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgK1xuICAgICAgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgK1xuICAgICAgdGhpcy5zZWxlY3RvciArICdbaHJlZj1cIicgKyB0YXJnZXQgKyAnXCJdJ1xuXG4gICAgdmFyIGFjdGl2ZSA9ICQoc2VsZWN0b3IpXG4gICAgICAucGFyZW50cygnbGknKVxuICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuXG4gICAgaWYgKGFjdGl2ZS5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICBhY3RpdmUgPSBhY3RpdmVcbiAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIGFjdGl2ZS50cmlnZ2VyKCdhY3RpdmF0ZS5icy5zY3JvbGxzcHknKVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMuc2VsZWN0b3IpXG4gICAgICAucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsICcuYWN0aXZlJylcbiAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScsIChkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uc2Nyb2xsc3B5XG5cbiAgJC5mbi5zY3JvbGxzcHkgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5zY3JvbGxzcHkuQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcblxuXG4gIC8vIFNDUk9MTFNQWSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnNjcm9sbHNweS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uc2Nyb2xsc3B5ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQod2luZG93KS5vbignbG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0YWIuanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0YWJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVEFCIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVGFiID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAvLyBqc2NzOmRpc2FibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgLy8ganNjczplbmFibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgfVxuXG4gIFRhYi5WRVJTSU9OID0gJzMuMy41J1xuXG4gIFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVGFiLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGhpcyAgICA9IHRoaXMuZWxlbWVudFxuICAgIHZhciAkdWwgICAgICA9ICR0aGlzLmNsb3Nlc3QoJ3VsOm5vdCguZHJvcGRvd24tbWVudSknKVxuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmRhdGEoJ3RhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIGlmICgkdGhpcy5wYXJlbnQoJ2xpJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm5cblxuICAgIHZhciAkcHJldmlvdXMgPSAkdWwuZmluZCgnLmFjdGl2ZTpsYXN0IGEnKVxuICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KCdoaWRlLmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICR0aGlzWzBdXG4gICAgfSlcbiAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudCgnc2hvdy5icy50YWInLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cbiAgICB9KVxuXG4gICAgJHByZXZpb3VzLnRyaWdnZXIoaGlkZUV2ZW50KVxuICAgICR0aGlzLnRyaWdnZXIoc2hvd0V2ZW50KVxuXG4gICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyICR0YXJnZXQgPSAkKHNlbGVjdG9yKVxuXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGhpcy5jbG9zZXN0KCdsaScpLCAkdWwpXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGFyZ2V0LCAkdGFyZ2V0LnBhcmVudCgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkcHJldmlvdXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdoaWRkZW4uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICAgIH0pXG4gICAgICAkdGhpcy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3Nob3duLmJzLnRhYicsXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgVGFiLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyICRhY3RpdmUgICAgPSBjb250YWluZXIuZmluZCgnPiAuYWN0aXZlJylcbiAgICB2YXIgdHJhbnNpdGlvbiA9IGNhbGxiYWNrXG4gICAgICAmJiAkLnN1cHBvcnQudHJhbnNpdGlvblxuICAgICAgJiYgKCRhY3RpdmUubGVuZ3RoICYmICRhY3RpdmUuaGFzQ2xhc3MoJ2ZhZGUnKSB8fCAhIWNvbnRhaW5lci5maW5kKCc+IC5mYWRlJykubGVuZ3RoKVxuXG4gICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICRhY3RpdmVcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnPiAuZHJvcGRvd24tbWVudSA+IC5hY3RpdmUnKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmVuZCgpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICAgIGVsZW1lbnRcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcbiAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gcmVmbG93IGZvciB0cmFuc2l0aW9uXG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2luJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2ZhZGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAuY2xvc2VzdCgnbGkuZHJvcGRvd24nKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgJGFjdGl2ZS5sZW5ndGggJiYgdHJhbnNpdGlvbiA/XG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIG5leHQpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUYWIuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgbmV4dCgpXG5cbiAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdpbicpXG4gIH1cblxuXG4gIC8vIFRBQiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy50YWInKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRhYicsIChkYXRhID0gbmV3IFRhYih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udGFiXG5cbiAgJC5mbi50YWIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi50YWIuQ29uc3RydWN0b3IgPSBUYWJcblxuXG4gIC8vIFRBQiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkLmZuLnRhYi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udGFiID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gVEFCIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PVxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIFBsdWdpbi5jYWxsKCQodGhpcyksICdzaG93JylcbiAgfVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMudGFiLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cInBpbGxcIl0nLCBjbGlja0hhbmRsZXIpXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0b29sdGlwLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdG9vbHRpcFxuICogSW5zcGlyZWQgYnkgdGhlIG9yaWdpbmFsIGpRdWVyeS50aXBzeSBieSBKYXNvbiBGcmFtZVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFRPT0xUSVAgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUb29sdGlwID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcHRpb25zICAgID0gbnVsbFxuICAgIHRoaXMuZW5hYmxlZCAgICA9IG51bGxcbiAgICB0aGlzLnRpbWVvdXQgICAgPSBudWxsXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuICAgIHRoaXMuJGVsZW1lbnQgICA9IG51bGxcbiAgICB0aGlzLmluU3RhdGUgICAgPSBudWxsXG5cbiAgICB0aGlzLmluaXQoJ3Rvb2x0aXAnLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgVG9vbHRpcC5WRVJTSU9OICA9ICczLjMuNSdcblxuICBUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUb29sdGlwLkRFRkFVTFRTID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIHZpZXdwb3J0OiB7XG4gICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgcGFkZGluZzogMFxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAodHlwZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuZW5hYmxlZCAgID0gdHJ1ZVxuICAgIHRoaXMudHlwZSAgICAgID0gdHlwZVxuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMpXG4gICAgdGhpcy4kdmlld3BvcnQgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgJCgkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnZpZXdwb3J0KSA/IHRoaXMub3B0aW9ucy52aWV3cG9ydC5jYWxsKHRoaXMsIHRoaXMuJGVsZW1lbnQpIDogKHRoaXMub3B0aW9ucy52aWV3cG9ydC5zZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMudmlld3BvcnQpKVxuICAgIHRoaXMuaW5TdGF0ZSAgID0geyBjbGljazogZmFsc2UsIGhvdmVyOiBmYWxzZSwgZm9jdXM6IGZhbHNlIH1cblxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdIGluc3RhbmNlb2YgZG9jdW1lbnQuY29uc3RydWN0b3IgJiYgIXRoaXMub3B0aW9ucy5zZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgc2VsZWN0b3JgIG9wdGlvbiBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGluaXRpYWxpemluZyAnICsgdGhpcy50eXBlICsgJyBvbiB0aGUgd2luZG93LmRvY3VtZW50IG9iamVjdCEnKVxuICAgIH1cblxuICAgIHZhciB0cmlnZ2VycyA9IHRoaXMub3B0aW9ucy50cmlnZ2VyLnNwbGl0KCcgJylcblxuICAgIGZvciAodmFyIGkgPSB0cmlnZ2Vycy5sZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciB0cmlnZ2VyID0gdHJpZ2dlcnNbaV1cblxuICAgICAgaWYgKHRyaWdnZXIgPT0gJ2NsaWNrJykge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy50b2dnbGUsIHRoaXMpKVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9ICdtYW51YWwnKSB7XG4gICAgICAgIHZhciBldmVudEluICA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWVudGVyJyA6ICdmb2N1c2luJ1xuICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VsZWF2ZScgOiAnZm9jdXNvdXQnXG5cbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudEluICArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMuZW50ZXIsIHRoaXMpKVxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKGV2ZW50T3V0ICsgJy4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy5sZWF2ZSwgdGhpcykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLnNlbGVjdG9yID9cbiAgICAgICh0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgeyB0cmlnZ2VyOiAnbWFudWFsJywgc2VsZWN0b3I6ICcnIH0pKSA6XG4gICAgICB0aGlzLmZpeFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUb29sdGlwLkRFRkFVTFRTXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZ2V0RGVmYXVsdHMoKSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpXG5cbiAgICBpZiAob3B0aW9ucy5kZWxheSAmJiB0eXBlb2Ygb3B0aW9ucy5kZWxheSA9PSAnbnVtYmVyJykge1xuICAgICAgb3B0aW9ucy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogb3B0aW9ucy5kZWxheSxcbiAgICAgICAgaGlkZTogb3B0aW9ucy5kZWxheVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgID0ge31cbiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmdldERlZmF1bHRzKClcblxuICAgIHRoaXMuX29wdGlvbnMgJiYgJC5lYWNoKHRoaXMuX29wdGlvbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoZGVmYXVsdHNba2V5XSAhPSB2YWx1ZSkgb3B0aW9uc1trZXldID0gdmFsdWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XG4gICAgICBvYmogOiAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgIH1cblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiAkLkV2ZW50KSB7XG4gICAgICBzZWxmLmluU3RhdGVbb2JqLnR5cGUgPT0gJ2ZvY3VzaW4nID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpIHx8IHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSB7XG4gICAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5zaG93KSByZXR1cm4gc2VsZi5zaG93KClcblxuICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSBzZWxmLnNob3coKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5zaG93KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaXNJblN0YXRlVHJ1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5pblN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5pblN0YXRlW2tleV0pIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c291dCcgPyAnZm9jdXMnIDogJ2hvdmVyJ10gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgcmV0dXJuXG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ291dCdcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuaGlkZSkgcmV0dXJuIHNlbGYuaGlkZSgpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ291dCcpIHNlbGYuaGlkZSgpXG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKHRoaXMuaGFzQ29udGVudCgpICYmIHRoaXMuZW5hYmxlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICAgIHZhciBpbkRvbSA9ICQuY29udGFpbnModGhpcy4kZWxlbWVudFswXS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy4kZWxlbWVudFswXSlcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpbkRvbSkgcmV0dXJuXG4gICAgICB2YXIgdGhhdCA9IHRoaXNcblxuICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpXG5cbiAgICAgIHZhciB0aXBJZCA9IHRoaXMuZ2V0VUlEKHRoaXMudHlwZSlcblxuICAgICAgdGhpcy5zZXRDb250ZW50KClcbiAgICAgICR0aXAuYXR0cignaWQnLCB0aXBJZClcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRpcElkKVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgJHRpcC5hZGRDbGFzcygnZmFkZScpXG5cbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlbWVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudC5jYWxsKHRoaXMsICR0aXBbMF0sIHRoaXMuJGVsZW1lbnRbMF0pIDpcbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudFxuXG4gICAgICB2YXIgYXV0b1Rva2VuID0gL1xccz9hdXRvP1xccz8vaVxuICAgICAgdmFyIGF1dG9QbGFjZSA9IGF1dG9Ub2tlbi50ZXN0KHBsYWNlbWVudClcbiAgICAgIGlmIChhdXRvUGxhY2UpIHBsYWNlbWVudCA9IHBsYWNlbWVudC5yZXBsYWNlKGF1dG9Ub2tlbiwgJycpIHx8ICd0b3AnXG5cbiAgICAgICR0aXBcbiAgICAgICAgLmRldGFjaCgpXG4gICAgICAgIC5jc3MoeyB0b3A6IDAsIGxlZnQ6IDAsIGRpc3BsYXk6ICdibG9jaycgfSlcbiAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgICAgLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHRoaXMpXG5cbiAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIgPyAkdGlwLmFwcGVuZFRvKHRoaXMub3B0aW9ucy5jb250YWluZXIpIDogJHRpcC5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnNlcnRlZC5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgICB2YXIgcG9zICAgICAgICAgID0gdGhpcy5nZXRQb3NpdGlvbigpXG4gICAgICB2YXIgYWN0dWFsV2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aFxuICAgICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgdmFyIG9yZ1BsYWNlbWVudCA9IHBsYWNlbWVudFxuICAgICAgICB2YXIgdmlld3BvcnREaW0gPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxuXG4gICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudCA9PSAnYm90dG9tJyAmJiBwb3MuYm90dG9tICsgYWN0dWFsSGVpZ2h0ID4gdmlld3BvcnREaW0uYm90dG9tID8gJ3RvcCcgICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgJiYgcG9zLnRvcCAgICAtIGFjdHVhbEhlaWdodCA8IHZpZXdwb3J0RGltLnRvcCAgICA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICdyaWdodCcgICYmIHBvcy5yaWdodCAgKyBhY3R1YWxXaWR0aCAgPiB2aWV3cG9ydERpbS53aWR0aCAgPyAnbGVmdCcgICA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAnbGVmdCcgICAmJiBwb3MubGVmdCAgIC0gYWN0dWFsV2lkdGggIDwgdmlld3BvcnREaW0ubGVmdCAgID8gJ3JpZ2h0JyAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRcblxuICAgICAgICAkdGlwXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKG9yZ1BsYWNlbWVudClcbiAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgfVxuXG4gICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpXG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gdGhhdC5ob3ZlclN0YXRlXG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignc2hvd24uYnMuJyArIHRoYXQudHlwZSlcbiAgICAgICAgdGhhdC5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PSAnb3V0JykgdGhhdC5sZWF2ZSh0aGF0KVxuICAgICAgfVxuXG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgICR0aXBcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5hcHBseVBsYWNlbWVudCA9IGZ1bmN0aW9uIChvZmZzZXQsIHBsYWNlbWVudCkge1xuICAgIHZhciAkdGlwICAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgaGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIC8vIG1hbnVhbGx5IHJlYWQgbWFyZ2lucyBiZWNhdXNlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpbmNsdWRlcyBkaWZmZXJlbmNlXG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tdG9wJyksIDEwKVxuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi1sZWZ0JyksIDEwKVxuXG4gICAgLy8gd2UgbXVzdCBjaGVjayBmb3IgTmFOIGZvciBpZSA4LzlcbiAgICBpZiAoaXNOYU4obWFyZ2luVG9wKSkgIG1hcmdpblRvcCAgPSAwXG4gICAgaWYgKGlzTmFOKG1hcmdpbkxlZnQpKSBtYXJnaW5MZWZ0ID0gMFxuXG4gICAgb2Zmc2V0LnRvcCAgKz0gbWFyZ2luVG9wXG4gICAgb2Zmc2V0LmxlZnQgKz0gbWFyZ2luTGVmdFxuXG4gICAgLy8gJC5mbi5vZmZzZXQgZG9lc24ndCByb3VuZCBwaXhlbCB2YWx1ZXNcbiAgICAvLyBzbyB3ZSB1c2Ugc2V0T2Zmc2V0IGRpcmVjdGx5IHdpdGggb3VyIG93biBmdW5jdGlvbiBCLTBcbiAgICAkLm9mZnNldC5zZXRPZmZzZXQoJHRpcFswXSwgJC5leHRlbmQoe1xuICAgICAgdXNpbmc6IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAkdGlwLmNzcyh7XG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKHByb3BzLnRvcCksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChwcm9wcy5sZWZ0KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIG9mZnNldCksIDApXG5cbiAgICAkdGlwLmFkZENsYXNzKCdpbicpXG5cbiAgICAvLyBjaGVjayB0byBzZWUgaWYgcGxhY2luZyB0aXAgaW4gbmV3IG9mZnNldCBjYXVzZWQgdGhlIHRpcCB0byByZXNpemUgaXRzZWxmXG4gICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgYWN0dWFsSGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIGlmIChwbGFjZW1lbnQgPT0gJ3RvcCcgJiYgYWN0dWFsSGVpZ2h0ICE9IGhlaWdodCkge1xuICAgICAgb2Zmc2V0LnRvcCA9IG9mZnNldC50b3AgKyBoZWlnaHQgLSBhY3R1YWxIZWlnaHRcbiAgICB9XG5cbiAgICB2YXIgZGVsdGEgPSB0aGlzLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YShwbGFjZW1lbnQsIG9mZnNldCwgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgIGlmIChkZWx0YS5sZWZ0KSBvZmZzZXQubGVmdCArPSBkZWx0YS5sZWZ0XG4gICAgZWxzZSBvZmZzZXQudG9wICs9IGRlbHRhLnRvcFxuXG4gICAgdmFyIGlzVmVydGljYWwgICAgICAgICAgPSAvdG9wfGJvdHRvbS8udGVzdChwbGFjZW1lbnQpXG4gICAgdmFyIGFycm93RGVsdGEgICAgICAgICAgPSBpc1ZlcnRpY2FsID8gZGVsdGEubGVmdCAqIDIgLSB3aWR0aCArIGFjdHVhbFdpZHRoIDogZGVsdGEudG9wICogMiAtIGhlaWdodCArIGFjdHVhbEhlaWdodFxuICAgIHZhciBhcnJvd09mZnNldFBvc2l0aW9uID0gaXNWZXJ0aWNhbCA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J1xuXG4gICAgJHRpcC5vZmZzZXQob2Zmc2V0KVxuICAgIHRoaXMucmVwbGFjZUFycm93KGFycm93RGVsdGEsICR0aXBbMF1bYXJyb3dPZmZzZXRQb3NpdGlvbl0sIGlzVmVydGljYWwpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5yZXBsYWNlQXJyb3cgPSBmdW5jdGlvbiAoZGVsdGEsIGRpbWVuc2lvbiwgaXNWZXJ0aWNhbCkge1xuICAgIHRoaXMuYXJyb3coKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCcsIDUwICogKDEgLSBkZWx0YSAvIGRpbWVuc2lvbikgKyAnJScpXG4gICAgICAuY3NzKGlzVmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JywgJycpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgPSB0aGlzLmdldFRpdGxlKClcblxuICAgICR0aXAuZmluZCgnLnRvb2x0aXAtaW5uZXInKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSBpbiB0b3AgYm90dG9tIGxlZnQgcmlnaHQnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciAkdGlwID0gJCh0aGlzLiR0aXApXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdoaWRlLmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICh0aGF0LmhvdmVyU3RhdGUgIT0gJ2luJykgJHRpcC5kZXRhY2goKVxuICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1kZXNjcmliZWRieScpXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuJyArIHRoYXQudHlwZSlcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAkdGlwXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNvbXBsZXRlKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICBjb21wbGV0ZSgpXG5cbiAgICB0aGlzLmhvdmVyU3RhdGUgPSBudWxsXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZml4VGl0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxuICAgIGlmICgkZS5hdHRyKCd0aXRsZScpIHx8IHR5cGVvZiAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJykgIT0gJ3N0cmluZycpIHtcbiAgICAgICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCAkZS5hdHRyKCd0aXRsZScpIHx8ICcnKS5hdHRyKCd0aXRsZScsICcnKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoJGVsZW1lbnQpIHtcbiAgICAkZWxlbWVudCAgID0gJGVsZW1lbnQgfHwgdGhpcy4kZWxlbWVudFxuXG4gICAgdmFyIGVsICAgICA9ICRlbGVtZW50WzBdXG4gICAgdmFyIGlzQm9keSA9IGVsLnRhZ05hbWUgPT0gJ0JPRFknXG5cbiAgICB2YXIgZWxSZWN0ICAgID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBpZiAoZWxSZWN0LndpZHRoID09IG51bGwpIHtcbiAgICAgIC8vIHdpZHRoIGFuZCBoZWlnaHQgYXJlIG1pc3NpbmcgaW4gSUU4LCBzbyBjb21wdXRlIHRoZW0gbWFudWFsbHk7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzE0MDkzXG4gICAgICBlbFJlY3QgPSAkLmV4dGVuZCh7fSwgZWxSZWN0LCB7IHdpZHRoOiBlbFJlY3QucmlnaHQgLSBlbFJlY3QubGVmdCwgaGVpZ2h0OiBlbFJlY3QuYm90dG9tIC0gZWxSZWN0LnRvcCB9KVxuICAgIH1cbiAgICB2YXIgZWxPZmZzZXQgID0gaXNCb2R5ID8geyB0b3A6IDAsIGxlZnQ6IDAgfSA6ICRlbGVtZW50Lm9mZnNldCgpXG4gICAgdmFyIHNjcm9sbCAgICA9IHsgc2Nyb2xsOiBpc0JvZHkgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIDogJGVsZW1lbnQuc2Nyb2xsVG9wKCkgfVxuICAgIHZhciBvdXRlckRpbXMgPSBpc0JvZHkgPyB7IHdpZHRoOiAkKHdpbmRvdykud2lkdGgoKSwgaGVpZ2h0OiAkKHdpbmRvdykuaGVpZ2h0KCkgfSA6IG51bGxcblxuICAgIHJldHVybiAkLmV4dGVuZCh7fSwgZWxSZWN0LCBzY3JvbGwsIG91dGVyRGltcywgZWxPZmZzZXQpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRDYWxjdWxhdGVkT2Zmc2V0ID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudCA9PSAnYm90dG9tJyA/IHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCwgICBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDIgfSA6XG4gICAgICAgICAgIHBsYWNlbWVudCA9PSAndG9wJyAgICA/IHsgdG9wOiBwb3MudG9wIC0gYWN0dWFsSGVpZ2h0LCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDIgfSA6XG4gICAgICAgICAgIHBsYWNlbWVudCA9PSAnbGVmdCcgICA/IHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCAvIDIgLSBhY3R1YWxIZWlnaHQgLyAyLCBsZWZ0OiBwb3MubGVmdCAtIGFjdHVhbFdpZHRoIH0gOlxuICAgICAgICAvKiBwbGFjZW1lbnQgPT0gJ3JpZ2h0JyAqLyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggfVxuXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpIHtcbiAgICB2YXIgZGVsdGEgPSB7IHRvcDogMCwgbGVmdDogMCB9XG4gICAgaWYgKCF0aGlzLiR2aWV3cG9ydCkgcmV0dXJuIGRlbHRhXG5cbiAgICB2YXIgdmlld3BvcnRQYWRkaW5nID0gdGhpcy5vcHRpb25zLnZpZXdwb3J0ICYmIHRoaXMub3B0aW9ucy52aWV3cG9ydC5wYWRkaW5nIHx8IDBcbiAgICB2YXIgdmlld3BvcnREaW1lbnNpb25zID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydClcblxuICAgIGlmICgvcmlnaHR8bGVmdC8udGVzdChwbGFjZW1lbnQpKSB7XG4gICAgICB2YXIgdG9wRWRnZU9mZnNldCAgICA9IHBvcy50b3AgLSB2aWV3cG9ydFBhZGRpbmcgLSB2aWV3cG9ydERpbWVuc2lvbnMuc2Nyb2xsXG4gICAgICB2YXIgYm90dG9tRWRnZU9mZnNldCA9IHBvcy50b3AgKyB2aWV3cG9ydFBhZGRpbmcgLSB2aWV3cG9ydERpbWVuc2lvbnMuc2Nyb2xsICsgYWN0dWFsSGVpZ2h0XG4gICAgICBpZiAodG9wRWRnZU9mZnNldCA8IHZpZXdwb3J0RGltZW5zaW9ucy50b3ApIHsgLy8gdG9wIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgLSB0b3BFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKGJvdHRvbUVkZ2VPZmZzZXQgPiB2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgdmlld3BvcnREaW1lbnNpb25zLmhlaWdodCkgeyAvLyBib3R0b20gb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEudG9wID0gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQgLSBib3R0b21FZGdlT2Zmc2V0XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZWZ0RWRnZU9mZnNldCAgPSBwb3MubGVmdCAtIHZpZXdwb3J0UGFkZGluZ1xuICAgICAgdmFyIHJpZ2h0RWRnZU9mZnNldCA9IHBvcy5sZWZ0ICsgdmlld3BvcnRQYWRkaW5nICsgYWN0dWFsV2lkdGhcbiAgICAgIGlmIChsZWZ0RWRnZU9mZnNldCA8IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0KSB7IC8vIGxlZnQgb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEubGVmdCA9IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0IC0gbGVmdEVkZ2VPZmZzZXRcbiAgICAgIH0gZWxzZSBpZiAocmlnaHRFZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnJpZ2h0KSB7IC8vIHJpZ2h0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCArIHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aCAtIHJpZ2h0RWRnZU9mZnNldFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWx0YVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VGl0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRpdGxlXG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciBvICA9IHRoaXMub3B0aW9uc1xuXG4gICAgdGl0bGUgPSAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJylcbiAgICAgIHx8ICh0eXBlb2Ygby50aXRsZSA9PSAnZnVuY3Rpb24nID8gby50aXRsZS5jYWxsKCRlWzBdKSA6ICBvLnRpdGxlKVxuXG4gICAgcmV0dXJuIHRpdGxlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRVSUQgPSBmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgZG8gcHJlZml4ICs9IH5+KE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKVxuICAgIHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKVxuICAgIHJldHVybiBwcmVmaXhcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuJHRpcCkge1xuICAgICAgdGhpcy4kdGlwID0gJCh0aGlzLm9wdGlvbnMudGVtcGxhdGUpXG4gICAgICBpZiAodGhpcy4kdGlwLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLnR5cGUgKyAnIGB0ZW1wbGF0ZWAgb3B0aW9uIG11c3QgY29uc2lzdCBvZiBleGFjdGx5IDEgdG9wLWxldmVsIGVsZW1lbnQhJylcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJHRpcFxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuYXJyb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLiRhcnJvdyA9IHRoaXMuJGFycm93IHx8IHRoaXMudGlwKCkuZmluZCgnLnRvb2x0aXAtYXJyb3cnKSlcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGVFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9ICF0aGlzLmVuYWJsZWRcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYgPSAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcbiAgICAgIGlmICghc2VsZikge1xuICAgICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZS5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgICAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZSkge1xuICAgICAgc2VsZi5pblN0YXRlLmNsaWNrID0gIXNlbGYuaW5TdGF0ZS5jbGlja1xuICAgICAgaWYgKHNlbGYuaXNJblN0YXRlVHJ1ZSgpKSBzZWxmLmVudGVyKHNlbGYpXG4gICAgICBlbHNlIHNlbGYubGVhdmUoc2VsZilcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi50aXAoKS5oYXNDbGFzcygnaW4nKSA/IHNlbGYubGVhdmUoc2VsZikgOiBzZWxmLmVudGVyKHNlbGYpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KVxuICAgIHRoaXMuaGlkZShmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRlbGVtZW50Lm9mZignLicgKyB0aGF0LnR5cGUpLnJlbW92ZURhdGEoJ2JzLicgKyB0aGF0LnR5cGUpXG4gICAgICBpZiAodGhhdC4kdGlwKSB7XG4gICAgICAgIHRoYXQuJHRpcC5kZXRhY2goKVxuICAgICAgfVxuICAgICAgdGhhdC4kdGlwID0gbnVsbFxuICAgICAgdGhhdC4kYXJyb3cgPSBudWxsXG4gICAgICB0aGF0LiR2aWV3cG9ydCA9IG51bGxcbiAgICB9KVxuICB9XG5cblxuICAvLyBUT09MVElQIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMudG9vbHRpcCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50b29sdGlwJywgKGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udG9vbHRpcFxuXG4gICQuZm4udG9vbHRpcCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IgPSBUb29sdGlwXG5cblxuICAvLyBUT09MVElQIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnRvb2x0aXAubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnRvb2x0aXAgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0cmFuc2l0aW9uLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdHJhbnNpdGlvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDU1MgVFJBTlNJVElPTiBTVVBQT1JUIChTaG91dG91dDogaHR0cDovL3d3dy5tb2Rlcm5penIuY29tLylcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib290c3RyYXAnKVxuXG4gICAgdmFyIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcbiAgICAgIFdlYmtpdFRyYW5zaXRpb24gOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICBNb3pUcmFuc2l0aW9uICAgIDogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgT1RyYW5zaXRpb24gICAgICA6ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcsXG4gICAgICB0cmFuc2l0aW9uICAgICAgIDogJ3RyYW5zaXRpb25lbmQnXG4gICAgfVxuXG4gICAgZm9yICh2YXIgbmFtZSBpbiB0cmFuc0VuZEV2ZW50TmFtZXMpIHtcbiAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7IGVuZDogdHJhbnNFbmRFdmVudE5hbWVzW25hbWVdIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2UgLy8gZXhwbGljaXQgZm9yIGllOCAoICAuXy4pXG4gIH1cblxuICAvLyBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcbiAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZVxuICAgIHZhciAkZWwgPSB0aGlzXG4gICAgJCh0aGlzKS5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZSB9KVxuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHsgaWYgKCFjYWxsZWQpICQoJGVsKS50cmlnZ2VyKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCkgfVxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIGR1cmF0aW9uKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAkKGZ1bmN0aW9uICgpIHtcbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25FbmQoKVxuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuXG5cbiAgICAkLmV2ZW50LnNwZWNpYWwuYnNUcmFuc2l0aW9uRW5kID0ge1xuICAgICAgYmluZFR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGRlbGVnYXRlVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoJChlLnRhcmdldCkuaXModGhpcykpIHJldHVybiBlLmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuICgnICsgZXIgKyAnKScpO1xuICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodGhpcy5fZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSlcbiAgICAgIHJldHVybiAxO1xuICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpXG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsImltcG9ydCBydW50aW1lIGZyb20gJy4vaGFuZGxlYmFycy5ydW50aW1lJztcblxuLy8gQ29tcGlsZXIgaW1wb3J0c1xuaW1wb3J0IEFTVCBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvYXN0JztcbmltcG9ydCB7IHBhcnNlciBhcyBQYXJzZXIsIHBhcnNlIH0gZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2Jhc2UnO1xuaW1wb3J0IHsgQ29tcGlsZXIsIGNvbXBpbGUsIHByZWNvbXBpbGUgfSBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvY29tcGlsZXInO1xuaW1wb3J0IEphdmFTY3JpcHRDb21waWxlciBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvamF2YXNjcmlwdC1jb21waWxlcic7XG5pbXBvcnQgVmlzaXRvciBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvdmlzaXRvcic7XG5cbmltcG9ydCBub0NvbmZsaWN0IGZyb20gJy4vaGFuZGxlYmFycy9uby1jb25mbGljdCc7XG5cbmxldCBfY3JlYXRlID0gcnVudGltZS5jcmVhdGU7XG5mdW5jdGlvbiBjcmVhdGUoKSB7XG4gIGxldCBoYiA9IF9jcmVhdGUoKTtcblxuICBoYi5jb21waWxlID0gZnVuY3Rpb24oaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tcGlsZShpbnB1dCwgb3B0aW9ucywgaGIpO1xuICB9O1xuICBoYi5wcmVjb21waWxlID0gZnVuY3Rpb24oaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcHJlY29tcGlsZShpbnB1dCwgb3B0aW9ucywgaGIpO1xuICB9O1xuXG4gIGhiLkFTVCA9IEFTVDtcbiAgaGIuQ29tcGlsZXIgPSBDb21waWxlcjtcbiAgaGIuSmF2YVNjcmlwdENvbXBpbGVyID0gSmF2YVNjcmlwdENvbXBpbGVyO1xuICBoYi5QYXJzZXIgPSBQYXJzZXI7XG4gIGhiLnBhcnNlID0gcGFyc2U7XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3QuVmlzaXRvciA9IFZpc2l0b3I7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iLCJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iLCJpbXBvcnQge2NyZWF0ZUZyYW1lLCBleHRlbmQsIHRvU3RyaW5nfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9leGNlcHRpb24nO1xuaW1wb3J0IHtyZWdpc3RlckRlZmF1bHRIZWxwZXJzfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHtyZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzfSBmcm9tICcuL2RlY29yYXRvcnMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuMC4xMCc7XG5leHBvcnQgY29uc3QgQ09NUElMRVJfUkVWSVNJT04gPSA3O1xuXG5leHBvcnQgY29uc3QgUkVWSVNJT05fQ0hBTkdFUyA9IHtcbiAgMTogJzw9IDEuMC5yYy4yJywgLy8gMS4wLnJjLjIgaXMgYWN0dWFsbHkgcmV2MiBidXQgZG9lc24ndCByZXBvcnQgaXRcbiAgMjogJz09IDEuMC4wLXJjLjMnLFxuICAzOiAnPT0gMS4wLjAtcmMuNCcsXG4gIDQ6ICc9PSAxLngueCcsXG4gIDU6ICc9PSAyLjAuMC1hbHBoYS54JyxcbiAgNjogJz49IDIuMC4wLWJldGEuMScsXG4gIDc6ICc+PSA0LjAuMCdcbn07XG5cbmNvbnN0IG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuZXhwb3J0IGZ1bmN0aW9uIEhhbmRsZWJhcnNFbnZpcm9ubWVudChoZWxwZXJzLCBwYXJ0aWFscywgZGVjb3JhdG9ycykge1xuICB0aGlzLmhlbHBlcnMgPSBoZWxwZXJzIHx8IHt9O1xuICB0aGlzLnBhcnRpYWxzID0gcGFydGlhbHMgfHwge307XG4gIHRoaXMuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnMgfHwge307XG5cbiAgcmVnaXN0ZXJEZWZhdWx0SGVscGVycyh0aGlzKTtcbiAgcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyh0aGlzKTtcbn1cblxuSGFuZGxlYmFyc0Vudmlyb25tZW50LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEhhbmRsZWJhcnNFbnZpcm9ubWVudCxcblxuICBsb2dnZXI6IGxvZ2dlcixcbiAgbG9nOiBsb2dnZXIubG9nLFxuXG4gIHJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBpZiAoZm4pIHsgdGhyb3cgbmV3IEV4Y2VwdGlvbignQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzJyk7IH1cbiAgICAgIGV4dGVuZCh0aGlzLmhlbHBlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlbHBlcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5oZWxwZXJzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSwgcGFydGlhbCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBleHRlbmQodGhpcy5wYXJ0aWFscywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydGlhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihgQXR0ZW1wdGluZyB0byByZWdpc3RlciBhIHBhcnRpYWwgY2FsbGVkIFwiJHtuYW1lfVwiIGFzIHVuZGVmaW5lZGApO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXJ0aWFsc1tuYW1lXSA9IHBhcnRpYWw7XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLnBhcnRpYWxzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBpZiAoZm4pIHsgdGhyb3cgbmV3IEV4Y2VwdGlvbignQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBkZWNvcmF0b3JzJyk7IH1cbiAgICAgIGV4dGVuZCh0aGlzLmRlY29yYXRvcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY29yYXRvcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5kZWNvcmF0b3JzW25hbWVdO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IGxvZyA9IGxvZ2dlci5sb2c7XG5cbmV4cG9ydCB7Y3JlYXRlRnJhbWUsIGxvZ2dlcn07XG4iLCJsZXQgQVNUID0ge1xuICAvLyBQdWJsaWMgQVBJIHVzZWQgdG8gZXZhbHVhdGUgZGVyaXZlZCBhdHRyaWJ1dGVzIHJlZ2FyZGluZyBBU1Qgbm9kZXNcbiAgaGVscGVyczoge1xuICAgIC8vIGEgbXVzdGFjaGUgaXMgZGVmaW5pdGVseSBhIGhlbHBlciBpZjpcbiAgICAvLyAqIGl0IGlzIGFuIGVsaWdpYmxlIGhlbHBlciwgYW5kXG4gICAgLy8gKiBpdCBoYXMgYXQgbGVhc3Qgb25lIHBhcmFtZXRlciBvciBoYXNoIHNlZ21lbnRcbiAgICBoZWxwZXJFeHByZXNzaW9uOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gKG5vZGUudHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKVxuICAgICAgICAgIHx8ICgobm9kZS50eXBlID09PSAnTXVzdGFjaGVTdGF0ZW1lbnQnIHx8IG5vZGUudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50JylcbiAgICAgICAgICAgICYmICEhKChub2RlLnBhcmFtcyAmJiBub2RlLnBhcmFtcy5sZW5ndGgpIHx8IG5vZGUuaGFzaCkpO1xuICAgIH0sXG5cbiAgICBzY29wZWRJZDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgcmV0dXJuICgvXlxcLnx0aGlzXFxiLykudGVzdChwYXRoLm9yaWdpbmFsKTtcbiAgICB9LFxuXG4gICAgLy8gYW4gSUQgaXMgc2ltcGxlIGlmIGl0IG9ubHkgaGFzIG9uZSBwYXJ0LCBhbmQgdGhhdCBwYXJ0IGlzIG5vdFxuICAgIC8vIGAuLmAgb3IgYHRoaXNgLlxuICAgIHNpbXBsZUlkOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5wYXJ0cy5sZW5ndGggPT09IDEgJiYgIUFTVC5oZWxwZXJzLnNjb3BlZElkKHBhdGgpICYmICFwYXRoLmRlcHRoO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBNdXN0IGJlIGV4cG9ydGVkIGFzIGFuIG9iamVjdCByYXRoZXIgdGhhbiB0aGUgcm9vdCBvZiB0aGUgbW9kdWxlIGFzIHRoZSBqaXNvbiBsZXhlclxuLy8gbXVzdCBtb2RpZnkgdGhlIG9iamVjdCB0byBvcGVyYXRlIHByb3Blcmx5LlxuZXhwb3J0IGRlZmF1bHQgQVNUO1xuIiwiaW1wb3J0IHBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgV2hpdGVzcGFjZUNvbnRyb2wgZnJvbSAnLi93aGl0ZXNwYWNlLWNvbnRyb2wnO1xuaW1wb3J0ICogYXMgSGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgeyBwYXJzZXIgfTtcblxubGV0IHl5ID0ge307XG5leHRlbmQoeXksIEhlbHBlcnMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgLy8gSnVzdCByZXR1cm4gaWYgYW4gYWxyZWFkeS1jb21waWxlZCBBU1Qgd2FzIHBhc3NlZCBpbi5cbiAgaWYgKGlucHV0LnR5cGUgPT09ICdQcm9ncmFtJykgeyByZXR1cm4gaW5wdXQ7IH1cblxuICBwYXJzZXIueXkgPSB5eTtcblxuICAvLyBBbHRlcmluZyB0aGUgc2hhcmVkIG9iamVjdCBoZXJlLCBidXQgdGhpcyBpcyBvayBhcyBwYXJzZXIgaXMgYSBzeW5jIG9wZXJhdGlvblxuICB5eS5sb2NJbmZvID0gZnVuY3Rpb24obG9jSW5mbykge1xuICAgIHJldHVybiBuZXcgeXkuU291cmNlTG9jYXRpb24ob3B0aW9ucyAmJiBvcHRpb25zLnNyY05hbWUsIGxvY0luZm8pO1xuICB9O1xuXG4gIGxldCBzdHJpcCA9IG5ldyBXaGl0ZXNwYWNlQ29udHJvbChvcHRpb25zKTtcbiAgcmV0dXJuIHN0cmlwLmFjY2VwdChwYXJzZXIucGFyc2UoaW5wdXQpKTtcbn1cbiIsIi8qIGdsb2JhbCBkZWZpbmUgKi9cbmltcG9ydCB7aXNBcnJheX0gZnJvbSAnLi4vdXRpbHMnO1xuXG5sZXQgU291cmNlTm9kZTtcblxudHJ5IHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKHR5cGVvZiBkZWZpbmUgIT09ICdmdW5jdGlvbicgfHwgIWRlZmluZS5hbWQpIHtcbiAgICAvLyBXZSBkb24ndCBzdXBwb3J0IHRoaXMgaW4gQU1EIGVudmlyb25tZW50cy4gRm9yIHRoZXNlIGVudmlyb25tZW50cywgd2UgYXN1c21lIHRoYXRcbiAgICAvLyB0aGV5IGFyZSBydW5uaW5nIG9uIHRoZSBicm93c2VyIGFuZCB0aHVzIGhhdmUgbm8gbmVlZCBmb3IgdGhlIHNvdXJjZS1tYXAgbGlicmFyeS5cbiAgICBsZXQgU291cmNlTWFwID0gcmVxdWlyZSgnc291cmNlLW1hcCcpO1xuICAgIFNvdXJjZU5vZGUgPSBTb3VyY2VNYXAuU291cmNlTm9kZTtcbiAgfVxufSBjYXRjaCAoZXJyKSB7XG4gIC8qIE5PUCAqL1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWY6IHRlc3RlZCBidXQgbm90IGNvdmVyZWQgaW4gaXN0YW5idWwgZHVlIHRvIGRpc3QgYnVpbGQgICovXG5pZiAoIVNvdXJjZU5vZGUpIHtcbiAgU291cmNlTm9kZSA9IGZ1bmN0aW9uKGxpbmUsIGNvbHVtbiwgc3JjRmlsZSwgY2h1bmtzKSB7XG4gICAgdGhpcy5zcmMgPSAnJztcbiAgICBpZiAoY2h1bmtzKSB7XG4gICAgICB0aGlzLmFkZChjaHVua3MpO1xuICAgIH1cbiAgfTtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUgPSB7XG4gICAgYWRkOiBmdW5jdGlvbihjaHVua3MpIHtcbiAgICAgIGlmIChpc0FycmF5KGNodW5rcykpIHtcbiAgICAgICAgY2h1bmtzID0gY2h1bmtzLmpvaW4oJycpO1xuICAgICAgfVxuICAgICAgdGhpcy5zcmMgKz0gY2h1bmtzO1xuICAgIH0sXG4gICAgcHJlcGVuZDogZnVuY3Rpb24oY2h1bmtzKSB7XG4gICAgICBpZiAoaXNBcnJheShjaHVua3MpKSB7XG4gICAgICAgIGNodW5rcyA9IGNodW5rcy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3JjID0gY2h1bmtzICsgdGhpcy5zcmM7XG4gICAgfSxcbiAgICB0b1N0cmluZ1dpdGhTb3VyY2VNYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtjb2RlOiB0aGlzLnRvU3RyaW5nKCl9O1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3JjO1xuICAgIH1cbiAgfTtcbn1cblxuXG5mdW5jdGlvbiBjYXN0Q2h1bmsoY2h1bmssIGNvZGVHZW4sIGxvYykge1xuICBpZiAoaXNBcnJheShjaHVuaykpIHtcbiAgICBsZXQgcmV0ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2h1bmsubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHJldC5wdXNoKGNvZGVHZW4ud3JhcChjaHVua1tpXSwgbG9jKSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGNodW5rID09PSAnbnVtYmVyJykge1xuICAgIC8vIEhhbmRsZSBwcmltaXRpdmVzIHRoYXQgdGhlIFNvdXJjZU5vZGUgd2lsbCB0aHJvdyB1cCBvblxuICAgIHJldHVybiBjaHVuayArICcnO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuXG5mdW5jdGlvbiBDb2RlR2VuKHNyY0ZpbGUpIHtcbiAgdGhpcy5zcmNGaWxlID0gc3JjRmlsZTtcbiAgdGhpcy5zb3VyY2UgPSBbXTtcbn1cblxuQ29kZUdlbi5wcm90b3R5cGUgPSB7XG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuICF0aGlzLnNvdXJjZS5sZW5ndGg7XG4gIH0sXG4gIHByZXBlbmQ6IGZ1bmN0aW9uKHNvdXJjZSwgbG9jKSB7XG4gICAgdGhpcy5zb3VyY2UudW5zaGlmdCh0aGlzLndyYXAoc291cmNlLCBsb2MpKTtcbiAgfSxcbiAgcHVzaDogZnVuY3Rpb24oc291cmNlLCBsb2MpIHtcbiAgICB0aGlzLnNvdXJjZS5wdXNoKHRoaXMud3JhcChzb3VyY2UsIGxvYykpO1xuICB9LFxuXG4gIG1lcmdlOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgc291cmNlID0gdGhpcy5lbXB0eSgpO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICBzb3VyY2UuYWRkKFsnICAnLCBsaW5lLCAnXFxuJ10pO1xuICAgIH0pO1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH0sXG5cbiAgZWFjaDogZnVuY3Rpb24oaXRlcikge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLnNvdXJjZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaXRlcih0aGlzLnNvdXJjZVtpXSk7XG4gICAgfVxuICB9LFxuXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBsZXQgbG9jID0gdGhpcy5jdXJyZW50TG9jYXRpb24gfHwge3N0YXJ0OiB7fX07XG4gICAgcmV0dXJuIG5ldyBTb3VyY2VOb2RlKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uLCB0aGlzLnNyY0ZpbGUpO1xuICB9LFxuICB3cmFwOiBmdW5jdGlvbihjaHVuaywgbG9jID0gdGhpcy5jdXJyZW50TG9jYXRpb24gfHwge3N0YXJ0OiB7fX0pIHtcbiAgICBpZiAoY2h1bmsgaW5zdGFuY2VvZiBTb3VyY2VOb2RlKSB7XG4gICAgICByZXR1cm4gY2h1bms7XG4gICAgfVxuXG4gICAgY2h1bmsgPSBjYXN0Q2h1bmsoY2h1bmssIHRoaXMsIGxvYyk7XG5cbiAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUobG9jLnN0YXJ0LmxpbmUsIGxvYy5zdGFydC5jb2x1bW4sIHRoaXMuc3JjRmlsZSwgY2h1bmspO1xuICB9LFxuXG4gIGZ1bmN0aW9uQ2FsbDogZnVuY3Rpb24oZm4sIHR5cGUsIHBhcmFtcykge1xuICAgIHBhcmFtcyA9IHRoaXMuZ2VuZXJhdGVMaXN0KHBhcmFtcyk7XG4gICAgcmV0dXJuIHRoaXMud3JhcChbZm4sIHR5cGUgPyAnLicgKyB0eXBlICsgJygnIDogJygnLCBwYXJhbXMsICcpJ10pO1xuICB9LFxuXG4gIHF1b3RlZFN0cmluZzogZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuICdcIicgKyAoc3RyICsgJycpXG4gICAgICAucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKVxuICAgICAgLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKVxuICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxuICAgICAgLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKVxuICAgICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpICAgLy8gUGVyIEVjbWEtMjYyIDcuMyArIDcuOC40XG4gICAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5JykgKyAnXCInO1xuICB9LFxuXG4gIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uKG9iaikge1xuICAgIGxldCBwYWlycyA9IFtdO1xuXG4gICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGNhc3RDaHVuayhvYmpba2V5XSwgdGhpcyk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFt0aGlzLnF1b3RlZFN0cmluZyhrZXkpLCAnOicsIHZhbHVlXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFpcnMpO1xuICAgIHJldC5wcmVwZW5kKCd7Jyk7XG4gICAgcmV0LmFkZCgnfScpO1xuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cblxuICBnZW5lcmF0ZUxpc3Q6IGZ1bmN0aW9uKGVudHJpZXMpIHtcbiAgICBsZXQgcmV0ID0gdGhpcy5lbXB0eSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChpKSB7XG4gICAgICAgIHJldC5hZGQoJywnKTtcbiAgICAgIH1cblxuICAgICAgcmV0LmFkZChjYXN0Q2h1bmsoZW50cmllc1tpXSwgdGhpcykpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgZ2VuZXJhdGVBcnJheTogZnVuY3Rpb24oZW50cmllcykge1xuICAgIGxldCByZXQgPSB0aGlzLmdlbmVyYXRlTGlzdChlbnRyaWVzKTtcbiAgICByZXQucHJlcGVuZCgnWycpO1xuICAgIHJldC5hZGQoJ10nKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvZGVHZW47XG5cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5ldy1jYXAgKi9cblxuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuaW1wb3J0IHtpc0FycmF5LCBpbmRleE9mLCBleHRlbmR9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBBU1QgZnJvbSAnLi9hc3QnO1xuXG5jb25zdCBzbGljZSA9IFtdLnNsaWNlO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29tcGlsZXIoKSB7fVxuXG4vLyB0aGUgZm91bmRIZWxwZXIgcmVnaXN0ZXIgd2lsbCBkaXNhbWJpZ3VhdGUgaGVscGVyIGxvb2t1cCBmcm9tIGZpbmRpbmcgYVxuLy8gZnVuY3Rpb24gaW4gYSBjb250ZXh0LiBUaGlzIGlzIG5lY2Vzc2FyeSBmb3IgbXVzdGFjaGUgY29tcGF0aWJpbGl0eSwgd2hpY2hcbi8vIHJlcXVpcmVzIHRoYXQgY29udGV4dCBmdW5jdGlvbnMgaW4gYmxvY2tzIGFyZSBldmFsdWF0ZWQgYnkgYmxvY2tIZWxwZXJNaXNzaW5nLFxuLy8gYW5kIHRoZW4gcHJvY2VlZCBhcyBpZiB0aGUgcmVzdWx0aW5nIHZhbHVlIHdhcyBwcm92aWRlZCB0byBibG9ja0hlbHBlck1pc3NpbmcuXG5cbkNvbXBpbGVyLnByb3RvdHlwZSA9IHtcbiAgY29tcGlsZXI6IENvbXBpbGVyLFxuXG4gIGVxdWFsczogZnVuY3Rpb24ob3RoZXIpIHtcbiAgICBsZXQgbGVuID0gdGhpcy5vcGNvZGVzLmxlbmd0aDtcbiAgICBpZiAob3RoZXIub3Bjb2Rlcy5sZW5ndGggIT09IGxlbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxldCBvcGNvZGUgPSB0aGlzLm9wY29kZXNbaV0sXG4gICAgICAgICAgb3RoZXJPcGNvZGUgPSBvdGhlci5vcGNvZGVzW2ldO1xuICAgICAgaWYgKG9wY29kZS5vcGNvZGUgIT09IG90aGVyT3Bjb2RlLm9wY29kZSB8fCAhYXJnRXF1YWxzKG9wY29kZS5hcmdzLCBvdGhlck9wY29kZS5hcmdzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2Uga25vdyB0aGF0IGxlbmd0aCBpcyB0aGUgc2FtZSBiZXR3ZWVuIHRoZSB0d28gYXJyYXlzIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgdGllZFxuICAgIC8vIHRvIHRoZSBvcGNvZGUgYmVoYXZpb3IgYWJvdmUuXG4gICAgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2ldLmVxdWFscyhvdGhlci5jaGlsZHJlbltpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIGd1aWQ6IDAsXG5cbiAgY29tcGlsZTogZnVuY3Rpb24ocHJvZ3JhbSwgb3B0aW9ucykge1xuICAgIHRoaXMuc291cmNlTm9kZSA9IFtdO1xuICAgIHRoaXMub3Bjb2RlcyA9IFtdO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3RyaW5nUGFyYW1zID0gb3B0aW9ucy5zdHJpbmdQYXJhbXM7XG4gICAgdGhpcy50cmFja0lkcyA9IG9wdGlvbnMudHJhY2tJZHM7XG5cbiAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gb3B0aW9ucy5ibG9ja1BhcmFtcyB8fCBbXTtcblxuICAgIC8vIFRoZXNlIGNoYW5nZXMgd2lsbCBwcm9wYWdhdGUgdG8gdGhlIG90aGVyIGNvbXBpbGVyIGNvbXBvbmVudHNcbiAgICBsZXQga25vd25IZWxwZXJzID0gb3B0aW9ucy5rbm93bkhlbHBlcnM7XG4gICAgb3B0aW9ucy5rbm93bkhlbHBlcnMgPSB7XG4gICAgICAnaGVscGVyTWlzc2luZyc6IHRydWUsXG4gICAgICAnYmxvY2tIZWxwZXJNaXNzaW5nJzogdHJ1ZSxcbiAgICAgICdlYWNoJzogdHJ1ZSxcbiAgICAgICdpZic6IHRydWUsXG4gICAgICAndW5sZXNzJzogdHJ1ZSxcbiAgICAgICd3aXRoJzogdHJ1ZSxcbiAgICAgICdsb2cnOiB0cnVlLFxuICAgICAgJ2xvb2t1cCc6IHRydWVcbiAgICB9O1xuICAgIGlmIChrbm93bkhlbHBlcnMpIHtcbiAgICAgIGZvciAobGV0IG5hbWUgaW4ga25vd25IZWxwZXJzKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChuYW1lIGluIGtub3duSGVscGVycykge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0gPSBrbm93bkhlbHBlcnNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hY2NlcHQocHJvZ3JhbSk7XG4gIH0sXG5cbiAgY29tcGlsZVByb2dyYW06IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgICBsZXQgY2hpbGRDb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICAgICAgICByZXN1bHQgPSBjaGlsZENvbXBpbGVyLmNvbXBpbGUocHJvZ3JhbSwgdGhpcy5vcHRpb25zKSxcbiAgICAgICAgZ3VpZCA9IHRoaXMuZ3VpZCsrO1xuXG4gICAgdGhpcy51c2VQYXJ0aWFsID0gdGhpcy51c2VQYXJ0aWFsIHx8IHJlc3VsdC51c2VQYXJ0aWFsO1xuXG4gICAgdGhpcy5jaGlsZHJlbltndWlkXSA9IHJlc3VsdDtcbiAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IHJlc3VsdC51c2VEZXB0aHM7XG5cbiAgICByZXR1cm4gZ3VpZDtcbiAgfSxcblxuICBhY2NlcHQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogU2FuaXR5IGNvZGUgKi9cbiAgICBpZiAoIXRoaXNbbm9kZS50eXBlXSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5rbm93biB0eXBlOiAnICsgbm9kZS50eXBlLCBub2RlKTtcbiAgICB9XG5cbiAgICB0aGlzLnNvdXJjZU5vZGUudW5zaGlmdChub2RlKTtcbiAgICBsZXQgcmV0ID0gdGhpc1tub2RlLnR5cGVdKG5vZGUpO1xuICAgIHRoaXMuc291cmNlTm9kZS5zaGlmdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgUHJvZ3JhbTogZnVuY3Rpb24ocHJvZ3JhbSkge1xuICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy51bnNoaWZ0KHByb2dyYW0uYmxvY2tQYXJhbXMpO1xuXG4gICAgbGV0IGJvZHkgPSBwcm9ncmFtLmJvZHksXG4gICAgICAgIGJvZHlMZW5ndGggPSBib2R5Lmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZHlMZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5hY2NlcHQoYm9keVtpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zLnNoaWZ0KCk7XG5cbiAgICB0aGlzLmlzU2ltcGxlID0gYm9keUxlbmd0aCA9PT0gMTtcbiAgICB0aGlzLmJsb2NrUGFyYW1zID0gcHJvZ3JhbS5ibG9ja1BhcmFtcyA/IHByb2dyYW0uYmxvY2tQYXJhbXMubGVuZ3RoIDogMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbihibG9jaykge1xuICAgIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoYmxvY2spO1xuXG4gICAgbGV0IHByb2dyYW0gPSBibG9jay5wcm9ncmFtLFxuICAgICAgICBpbnZlcnNlID0gYmxvY2suaW52ZXJzZTtcblxuICAgIHByb2dyYW0gPSBwcm9ncmFtICYmIHRoaXMuY29tcGlsZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgaW52ZXJzZSA9IGludmVyc2UgJiYgdGhpcy5jb21waWxlUHJvZ3JhbShpbnZlcnNlKTtcblxuICAgIGxldCB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKGJsb2NrKTtcblxuICAgIGlmICh0eXBlID09PSAnaGVscGVyJykge1xuICAgICAgdGhpcy5oZWxwZXJTZXhwcihibG9jaywgcHJvZ3JhbSwgaW52ZXJzZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc2ltcGxlJykge1xuICAgICAgdGhpcy5zaW1wbGVTZXhwcihibG9jayk7XG5cbiAgICAgIC8vIG5vdyB0aGF0IHRoZSBzaW1wbGUgbXVzdGFjaGUgaXMgcmVzb2x2ZWQsIHdlIG5lZWQgdG9cbiAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYFxuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG4gICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdibG9ja1ZhbHVlJywgYmxvY2sucGF0aC5vcmlnaW5hbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW1iaWd1b3VzU2V4cHIoYmxvY2ssIHByb2dyYW0sIGludmVyc2UpO1xuXG4gICAgICAvLyBub3cgdGhhdCB0aGUgc2ltcGxlIG11c3RhY2hlIGlzIHJlc29sdmVkLCB3ZSBuZWVkIHRvXG4gICAgICAvLyBldmFsdWF0ZSBpdCBieSBleGVjdXRpbmcgYGJsb2NrSGVscGVyTWlzc2luZ2BcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG4gICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJyk7XG4gICAgICB0aGlzLm9wY29kZSgnYW1iaWd1b3VzQmxvY2tWYWx1ZScpO1xuICAgIH1cblxuICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcbiAgfSxcblxuICBEZWNvcmF0b3JCbG9jayhkZWNvcmF0b3IpIHtcbiAgICBsZXQgcHJvZ3JhbSA9IGRlY29yYXRvci5wcm9ncmFtICYmIHRoaXMuY29tcGlsZVByb2dyYW0oZGVjb3JhdG9yLnByb2dyYW0pO1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKGRlY29yYXRvciwgcHJvZ3JhbSwgdW5kZWZpbmVkKSxcbiAgICAgICAgcGF0aCA9IGRlY29yYXRvci5wYXRoO1xuXG4gICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLm9wY29kZSgncmVnaXN0ZXJEZWNvcmF0b3InLCBwYXJhbXMubGVuZ3RoLCBwYXRoLm9yaWdpbmFsKTtcbiAgfSxcblxuICBQYXJ0aWFsU3RhdGVtZW50OiBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gICAgdGhpcy51c2VQYXJ0aWFsID0gdHJ1ZTtcblxuICAgIGxldCBwcm9ncmFtID0gcGFydGlhbC5wcm9ncmFtO1xuICAgIGlmIChwcm9ncmFtKSB7XG4gICAgICBwcm9ncmFtID0gdGhpcy5jb21waWxlUHJvZ3JhbShwYXJ0aWFsLnByb2dyYW0pO1xuICAgIH1cblxuICAgIGxldCBwYXJhbXMgPSBwYXJ0aWFsLnBhcmFtcztcbiAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1Vuc3VwcG9ydGVkIG51bWJlciBvZiBwYXJ0aWFsIGFyZ3VtZW50czogJyArIHBhcmFtcy5sZW5ndGgsIHBhcnRpYWwpO1xuICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXhwbGljaXRQYXJ0aWFsQ29udGV4dCkge1xuICAgICAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAndW5kZWZpbmVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMucHVzaCh7dHlwZTogJ1BhdGhFeHByZXNzaW9uJywgcGFydHM6IFtdLCBkZXB0aDogMH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwYXJ0aWFsTmFtZSA9IHBhcnRpYWwubmFtZS5vcmlnaW5hbCxcbiAgICAgICAgaXNEeW5hbWljID0gcGFydGlhbC5uYW1lLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJztcbiAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICB0aGlzLmFjY2VwdChwYXJ0aWFsLm5hbWUpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMocGFydGlhbCwgcHJvZ3JhbSwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIGxldCBpbmRlbnQgPSBwYXJ0aWFsLmluZGVudCB8fCAnJztcbiAgICBpZiAodGhpcy5vcHRpb25zLnByZXZlbnRJbmRlbnQgJiYgaW5kZW50KSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kQ29udGVudCcsIGluZGVudCk7XG4gICAgICBpbmRlbnQgPSAnJztcbiAgICB9XG5cbiAgICB0aGlzLm9wY29kZSgnaW52b2tlUGFydGlhbCcsIGlzRHluYW1pYywgcGFydGlhbE5hbWUsIGluZGVudCk7XG4gICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuICB9LFxuICBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQ6IGZ1bmN0aW9uKHBhcnRpYWxCbG9jaykge1xuICAgIHRoaXMuUGFydGlhbFN0YXRlbWVudChwYXJ0aWFsQmxvY2spO1xuICB9LFxuXG4gIE11c3RhY2hlU3RhdGVtZW50OiBmdW5jdGlvbihtdXN0YWNoZSkge1xuICAgIHRoaXMuU3ViRXhwcmVzc2lvbihtdXN0YWNoZSk7XG5cbiAgICBpZiAobXVzdGFjaGUuZXNjYXBlZCAmJiAhdGhpcy5vcHRpb25zLm5vRXNjYXBlKSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kRXNjYXBlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XG4gICAgfVxuICB9LFxuICBEZWNvcmF0b3IoZGVjb3JhdG9yKSB7XG4gICAgdGhpcy5EZWNvcmF0b3JCbG9jayhkZWNvcmF0b3IpO1xuICB9LFxuXG5cbiAgQ29udGVudFN0YXRlbWVudDogZnVuY3Rpb24oY29udGVudCkge1xuICAgIGlmIChjb250ZW50LnZhbHVlKSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kQ29udGVudCcsIGNvbnRlbnQudmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICBDb21tZW50U3RhdGVtZW50OiBmdW5jdGlvbigpIHt9LFxuXG4gIFN1YkV4cHJlc3Npb246IGZ1bmN0aW9uKHNleHByKSB7XG4gICAgdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcik7XG4gICAgbGV0IHR5cGUgPSB0aGlzLmNsYXNzaWZ5U2V4cHIoc2V4cHIpO1xuXG4gICAgaWYgKHR5cGUgPT09ICdzaW1wbGUnKSB7XG4gICAgICB0aGlzLnNpbXBsZVNleHByKHNleHByKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdoZWxwZXInKSB7XG4gICAgICB0aGlzLmhlbHBlclNleHByKHNleHByKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbWJpZ3VvdXNTZXhwcihzZXhwcik7XG4gICAgfVxuICB9LFxuICBhbWJpZ3VvdXNTZXhwcjogZnVuY3Rpb24oc2V4cHIsIHByb2dyYW0sIGludmVyc2UpIHtcbiAgICBsZXQgcGF0aCA9IHNleHByLnBhdGgsXG4gICAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdLFxuICAgICAgICBpc0Jsb2NrID0gcHJvZ3JhbSAhPSBudWxsIHx8IGludmVyc2UgIT0gbnVsbDtcblxuICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgcGF0aC5kZXB0aCk7XG5cbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcblxuICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcbiAgICB0aGlzLmFjY2VwdChwYXRoKTtcblxuICAgIHRoaXMub3Bjb2RlKCdpbnZva2VBbWJpZ3VvdXMnLCBuYW1lLCBpc0Jsb2NrKTtcbiAgfSxcblxuICBzaW1wbGVTZXhwcjogZnVuY3Rpb24oc2V4cHIpIHtcbiAgICBsZXQgcGF0aCA9IHNleHByLnBhdGg7XG4gICAgcGF0aC5zdHJpY3QgPSB0cnVlO1xuICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xuICAgIHRoaXMub3Bjb2RlKCdyZXNvbHZlUG9zc2libGVMYW1iZGEnKTtcbiAgfSxcblxuICBoZWxwZXJTZXhwcjogZnVuY3Rpb24oc2V4cHIsIHByb2dyYW0sIGludmVyc2UpIHtcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSksXG4gICAgICAgIHBhdGggPSBzZXhwci5wYXRoLFxuICAgICAgICBuYW1lID0gcGF0aC5wYXJ0c1swXTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzW25hbWVdKSB7XG4gICAgICB0aGlzLm9wY29kZSgnaW52b2tlS25vd25IZWxwZXInLCBwYXJhbXMubGVuZ3RoLCBuYW1lKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNPbmx5KSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdZb3Ugc3BlY2lmaWVkIGtub3duSGVscGVyc09ubHksIGJ1dCB1c2VkIHRoZSB1bmtub3duIGhlbHBlciAnICsgbmFtZSwgc2V4cHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoLnN0cmljdCA9IHRydWU7XG4gICAgICBwYXRoLmZhbHN5ID0gdHJ1ZTtcblxuICAgICAgdGhpcy5hY2NlcHQocGF0aCk7XG4gICAgICB0aGlzLm9wY29kZSgnaW52b2tlSGVscGVyJywgcGFyYW1zLmxlbmd0aCwgcGF0aC5vcmlnaW5hbCwgQVNULmhlbHBlcnMuc2ltcGxlSWQocGF0aCkpO1xuICAgIH1cbiAgfSxcblxuICBQYXRoRXhwcmVzc2lvbjogZnVuY3Rpb24ocGF0aCkge1xuICAgIHRoaXMuYWRkRGVwdGgocGF0aC5kZXB0aCk7XG4gICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTtcblxuICAgIGxldCBuYW1lID0gcGF0aC5wYXJ0c1swXSxcbiAgICAgICAgc2NvcGVkID0gQVNULmhlbHBlcnMuc2NvcGVkSWQocGF0aCksXG4gICAgICAgIGJsb2NrUGFyYW1JZCA9ICFwYXRoLmRlcHRoICYmICFzY29wZWQgJiYgdGhpcy5ibG9ja1BhcmFtSW5kZXgobmFtZSk7XG5cbiAgICBpZiAoYmxvY2tQYXJhbUlkKSB7XG4gICAgICB0aGlzLm9wY29kZSgnbG9va3VwQmxvY2tQYXJhbScsIGJsb2NrUGFyYW1JZCwgcGF0aC5wYXJ0cyk7XG4gICAgfSBlbHNlIGlmICghbmFtZSkge1xuICAgICAgLy8gQ29udGV4dCByZWZlcmVuY2UsIGkuZS4gYHt7Zm9vIC59fWAgb3IgYHt7Zm9vIC4ufX1gXG4gICAgICB0aGlzLm9wY29kZSgncHVzaENvbnRleHQnKTtcbiAgICB9IGVsc2UgaWYgKHBhdGguZGF0YSkge1xuICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSB0cnVlO1xuICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cERhdGEnLCBwYXRoLmRlcHRoLCBwYXRoLnBhcnRzLCBwYXRoLnN0cmljdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBPbkNvbnRleHQnLCBwYXRoLnBhcnRzLCBwYXRoLmZhbHN5LCBwYXRoLnN0cmljdCwgc2NvcGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgU3RyaW5nTGl0ZXJhbDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hTdHJpbmcnLCBzdHJpbmcudmFsdWUpO1xuICB9LFxuXG4gIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uKG51bWJlcikge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIG51bWJlci52YWx1ZSk7XG4gIH0sXG5cbiAgQm9vbGVhbkxpdGVyYWw6IGZ1bmN0aW9uKGJvb2wpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCBib29sLnZhbHVlKTtcbiAgfSxcblxuICBVbmRlZmluZWRMaXRlcmFsOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAndW5kZWZpbmVkJyk7XG4gIH0sXG5cbiAgTnVsbExpdGVyYWw6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICdudWxsJyk7XG4gIH0sXG5cbiAgSGFzaDogZnVuY3Rpb24oaGFzaCkge1xuICAgIGxldCBwYWlycyA9IGhhc2gucGFpcnMsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBsID0gcGFpcnMubGVuZ3RoO1xuXG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hIYXNoJyk7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wdXNoUGFyYW0ocGFpcnNbaV0udmFsdWUpO1xuICAgIH1cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXNzaWduVG9IYXNoJywgcGFpcnNbaV0ua2V5KTtcbiAgICB9XG4gICAgdGhpcy5vcGNvZGUoJ3BvcEhhc2gnKTtcbiAgfSxcblxuICAvLyBIRUxQRVJTXG4gIG9wY29kZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHRoaXMub3Bjb2Rlcy5wdXNoKHsgb3Bjb2RlOiBuYW1lLCBhcmdzOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGxvYzogdGhpcy5zb3VyY2VOb2RlWzBdLmxvYyB9KTtcbiAgfSxcblxuICBhZGREZXB0aDogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICBpZiAoIWRlcHRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy51c2VEZXB0aHMgPSB0cnVlO1xuICB9LFxuXG4gIGNsYXNzaWZ5U2V4cHI6IGZ1bmN0aW9uKHNleHByKSB7XG4gICAgbGV0IGlzU2ltcGxlID0gQVNULmhlbHBlcnMuc2ltcGxlSWQoc2V4cHIucGF0aCk7XG5cbiAgICBsZXQgaXNCbG9ja1BhcmFtID0gaXNTaW1wbGUgJiYgISF0aGlzLmJsb2NrUGFyYW1JbmRleChzZXhwci5wYXRoLnBhcnRzWzBdKTtcblxuICAgIC8vIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGlmOlxuICAgIC8vICogaXRzIGlkIGlzIHNpbXBsZSAoYSBzaW5nbGUgcGFydCwgbm90IGB0aGlzYCBvciBgLi5gKVxuICAgIGxldCBpc0hlbHBlciA9ICFpc0Jsb2NrUGFyYW0gJiYgQVNULmhlbHBlcnMuaGVscGVyRXhwcmVzc2lvbihzZXhwcik7XG5cbiAgICAvLyBpZiBhIG11c3RhY2hlIGlzIGFuIGVsaWdpYmxlIGhlbHBlciBidXQgbm90IGEgZGVmaW5pdGVcbiAgICAvLyBoZWxwZXIsIGl0IGlzIGFtYmlndW91cywgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgaW4gYSBsYXRlclxuICAgIC8vIHBhc3Mgb3IgYXQgcnVudGltZS5cbiAgICBsZXQgaXNFbGlnaWJsZSA9ICFpc0Jsb2NrUGFyYW0gJiYgKGlzSGVscGVyIHx8IGlzU2ltcGxlKTtcblxuICAgIC8vIGlmIGFtYmlndW91cywgd2UgY2FuIHBvc3NpYmx5IHJlc29sdmUgdGhlIGFtYmlndWl0eSBub3dcbiAgICAvLyBBbiBlbGlnaWJsZSBoZWxwZXIgaXMgb25lIHRoYXQgZG9lcyBub3QgaGF2ZSBhIGNvbXBsZXggcGF0aCwgaS5lLiBgdGhpcy5mb29gLCBgLi4vZm9vYCBldGMuXG4gICAgaWYgKGlzRWxpZ2libGUgJiYgIWlzSGVscGVyKSB7XG4gICAgICBsZXQgbmFtZSA9IHNleHByLnBhdGgucGFydHNbMF0sXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzW25hbWVdKSB7XG4gICAgICAgIGlzSGVscGVyID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5rbm93bkhlbHBlcnNPbmx5KSB7XG4gICAgICAgIGlzRWxpZ2libGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNIZWxwZXIpIHtcbiAgICAgIHJldHVybiAnaGVscGVyJztcbiAgICB9IGVsc2UgaWYgKGlzRWxpZ2libGUpIHtcbiAgICAgIHJldHVybiAnYW1iaWd1b3VzJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdzaW1wbGUnO1xuICAgIH1cbiAgfSxcblxuICBwdXNoUGFyYW1zOiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcmFtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHVzaFBhcmFtKHBhcmFtc1tpXSk7XG4gICAgfVxuICB9LFxuXG4gIHB1c2hQYXJhbTogZnVuY3Rpb24odmFsKSB7XG4gICAgbGV0IHZhbHVlID0gdmFsLnZhbHVlICE9IG51bGwgPyB2YWwudmFsdWUgOiB2YWwub3JpZ2luYWwgfHwgJyc7XG5cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIGlmICh2YWx1ZS5yZXBsYWNlKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eKFxcLj9cXC5cXC8pKi9nLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8vZywgJy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbC5kZXB0aCkge1xuICAgICAgICB0aGlzLmFkZERlcHRoKHZhbC5kZXB0aCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHZhbC5kZXB0aCB8fCAwKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nUGFyYW0nLCB2YWx1ZSwgdmFsLnR5cGUpO1xuXG4gICAgICBpZiAodmFsLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykge1xuICAgICAgICAvLyBTdWJFeHByZXNzaW9ucyBnZXQgZXZhbHVhdGVkIGFuZCBwYXNzZWQgaW5cbiAgICAgICAgLy8gaW4gc3RyaW5nIHBhcmFtcyBtb2RlLlxuICAgICAgICB0aGlzLmFjY2VwdCh2YWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgICBsZXQgYmxvY2tQYXJhbUluZGV4O1xuICAgICAgICBpZiAodmFsLnBhcnRzICYmICFBU1QuaGVscGVycy5zY29wZWRJZCh2YWwpICYmICF2YWwuZGVwdGgpIHtcbiAgICAgICAgICAgYmxvY2tQYXJhbUluZGV4ID0gdGhpcy5ibG9ja1BhcmFtSW5kZXgodmFsLnBhcnRzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmxvY2tQYXJhbUluZGV4KSB7XG4gICAgICAgICAgbGV0IGJsb2NrUGFyYW1DaGlsZCA9IHZhbC5wYXJ0cy5zbGljZSgxKS5qb2luKCcuJyk7XG4gICAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hJZCcsICdCbG9ja1BhcmFtJywgYmxvY2tQYXJhbUluZGV4LCBibG9ja1BhcmFtQ2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gdmFsLm9yaWdpbmFsIHx8IHZhbHVlO1xuICAgICAgICAgIGlmICh2YWx1ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL150aGlzKD86XFwufCQpLywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL15cXC5cXC8vLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXlxcLiQvLCAnJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hJZCcsIHZhbC50eXBlLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuYWNjZXB0KHZhbCk7XG4gICAgfVxuICB9LFxuXG4gIHNldHVwRnVsbE11c3RhY2hlUGFyYW1zOiBmdW5jdGlvbihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSwgb21pdEVtcHR5KSB7XG4gICAgbGV0IHBhcmFtcyA9IHNleHByLnBhcmFtcztcbiAgICB0aGlzLnB1c2hQYXJhbXMocGFyYW1zKTtcblxuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuXG4gICAgaWYgKHNleHByLmhhc2gpIHtcbiAgICAgIHRoaXMuYWNjZXB0KHNleHByLmhhc2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJywgb21pdEVtcHR5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9LFxuXG4gIGJsb2NrUGFyYW1JbmRleDogZnVuY3Rpb24obmFtZSkge1xuICAgIGZvciAobGV0IGRlcHRoID0gMCwgbGVuID0gdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zLmxlbmd0aDsgZGVwdGggPCBsZW47IGRlcHRoKyspIHtcbiAgICAgIGxldCBibG9ja1BhcmFtcyA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtc1tkZXB0aF0sXG4gICAgICAgICAgcGFyYW0gPSBibG9ja1BhcmFtcyAmJiBpbmRleE9mKGJsb2NrUGFyYW1zLCBuYW1lKTtcbiAgICAgIGlmIChibG9ja1BhcmFtcyAmJiBwYXJhbSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBbZGVwdGgsIHBhcmFtXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBlbnYpIHtcbiAgaWYgKGlucHV0ID09IG51bGwgfHwgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKSkge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1lvdSBtdXN0IHBhc3MgYSBzdHJpbmcgb3IgSGFuZGxlYmFycyBBU1QgdG8gSGFuZGxlYmFycy5wcmVjb21waWxlLiBZb3UgcGFzc2VkICcgKyBpbnB1dCk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCEoJ2RhdGEnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kYXRhID0gdHJ1ZTtcbiAgfVxuICBpZiAob3B0aW9ucy5jb21wYXQpIHtcbiAgICBvcHRpb25zLnVzZURlcHRocyA9IHRydWU7XG4gIH1cblxuICBsZXQgYXN0ID0gZW52LnBhcnNlKGlucHV0LCBvcHRpb25zKSxcbiAgICAgIGVudmlyb25tZW50ID0gbmV3IGVudi5Db21waWxlcigpLmNvbXBpbGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIG5ldyBlbnYuSmF2YVNjcmlwdENvbXBpbGVyKCkuY29tcGlsZShlbnZpcm9ubWVudCwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlKGlucHV0LCBvcHRpb25zID0ge30sIGVudikge1xuICBpZiAoaW5wdXQgPT0gbnVsbCB8fCAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyAmJiBpbnB1dC50eXBlICE9PSAnUHJvZ3JhbScpKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignWW91IG11c3QgcGFzcyBhIHN0cmluZyBvciBIYW5kbGViYXJzIEFTVCB0byBIYW5kbGViYXJzLmNvbXBpbGUuIFlvdSBwYXNzZWQgJyArIGlucHV0KTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICBpZiAoISgnZGF0YScgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmRhdGEgPSB0cnVlO1xuICB9XG4gIGlmIChvcHRpb25zLmNvbXBhdCkge1xuICAgIG9wdGlvbnMudXNlRGVwdGhzID0gdHJ1ZTtcbiAgfVxuXG4gIGxldCBjb21waWxlZDtcblxuICBmdW5jdGlvbiBjb21waWxlSW5wdXQoKSB7XG4gICAgbGV0IGFzdCA9IGVudi5wYXJzZShpbnB1dCwgb3B0aW9ucyksXG4gICAgICAgIGVudmlyb25tZW50ID0gbmV3IGVudi5Db21waWxlcigpLmNvbXBpbGUoYXN0LCBvcHRpb25zKSxcbiAgICAgICAgdGVtcGxhdGVTcGVjID0gbmV3IGVudi5KYXZhU2NyaXB0Q29tcGlsZXIoKS5jb21waWxlKGVudmlyb25tZW50LCBvcHRpb25zLCB1bmRlZmluZWQsIHRydWUpO1xuICAgIHJldHVybiBlbnYudGVtcGxhdGUodGVtcGxhdGVTcGVjKTtcbiAgfVxuXG4gIC8vIFRlbXBsYXRlIGlzIG9ubHkgY29tcGlsZWQgb24gZmlyc3QgdXNlIGFuZCBjYWNoZWQgYWZ0ZXIgdGhhdCBwb2ludC5cbiAgZnVuY3Rpb24gcmV0KGNvbnRleHQsIGV4ZWNPcHRpb25zKSB7XG4gICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGVkLmNhbGwodGhpcywgY29udGV4dCwgZXhlY09wdGlvbnMpO1xuICB9XG4gIHJldC5fc2V0dXAgPSBmdW5jdGlvbihzZXR1cE9wdGlvbnMpIHtcbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZWQuX3NldHVwKHNldHVwT3B0aW9ucyk7XG4gIH07XG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbihpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGVkLl9jaGlsZChpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gYXJnRXF1YWxzKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KGEpICYmIGlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWFyZ0VxdWFscyhhW2ldLCBiW2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoc2V4cHIpIHtcbiAgaWYgKCFzZXhwci5wYXRoLnBhcnRzKSB7XG4gICAgbGV0IGxpdGVyYWwgPSBzZXhwci5wYXRoO1xuICAgIC8vIENhc3RpbmcgdG8gc3RyaW5nIGhlcmUgdG8gbWFrZSBmYWxzZSBhbmQgMCBsaXRlcmFsIHZhbHVlcyBwbGF5IG5pY2VseSB3aXRoIHRoZSByZXN0XG4gICAgLy8gb2YgdGhlIHN5c3RlbS5cbiAgICBzZXhwci5wYXRoID0ge1xuICAgICAgdHlwZTogJ1BhdGhFeHByZXNzaW9uJyxcbiAgICAgIGRhdGE6IGZhbHNlLFxuICAgICAgZGVwdGg6IDAsXG4gICAgICBwYXJ0czogW2xpdGVyYWwub3JpZ2luYWwgKyAnJ10sXG4gICAgICBvcmlnaW5hbDogbGl0ZXJhbC5vcmlnaW5hbCArICcnLFxuICAgICAgbG9jOiBsaXRlcmFsLmxvY1xuICAgIH07XG4gIH1cbn1cbiIsImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZnVuY3Rpb24gdmFsaWRhdGVDbG9zZShvcGVuLCBjbG9zZSkge1xuICBjbG9zZSA9IGNsb3NlLnBhdGggPyBjbG9zZS5wYXRoLm9yaWdpbmFsIDogY2xvc2U7XG5cbiAgaWYgKG9wZW4ucGF0aC5vcmlnaW5hbCAhPT0gY2xvc2UpIHtcbiAgICBsZXQgZXJyb3JOb2RlID0ge2xvYzogb3Blbi5wYXRoLmxvY307XG5cbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKG9wZW4ucGF0aC5vcmlnaW5hbCArIFwiIGRvZXNuJ3QgbWF0Y2ggXCIgKyBjbG9zZSwgZXJyb3JOb2RlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gU291cmNlTG9jYXRpb24oc291cmNlLCBsb2NJbmZvKSB7XG4gIHRoaXMuc291cmNlID0gc291cmNlO1xuICB0aGlzLnN0YXJ0ID0ge1xuICAgIGxpbmU6IGxvY0luZm8uZmlyc3RfbGluZSxcbiAgICBjb2x1bW46IGxvY0luZm8uZmlyc3RfY29sdW1uXG4gIH07XG4gIHRoaXMuZW5kID0ge1xuICAgIGxpbmU6IGxvY0luZm8ubGFzdF9saW5lLFxuICAgIGNvbHVtbjogbG9jSW5mby5sYXN0X2NvbHVtblxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaWQodG9rZW4pIHtcbiAgaWYgKC9eXFxbLipcXF0kLy50ZXN0KHRva2VuKSkge1xuICAgIHJldHVybiB0b2tlbi5zdWJzdHIoMSwgdG9rZW4ubGVuZ3RoIC0gMik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEZsYWdzKG9wZW4sIGNsb3NlKSB7XG4gIHJldHVybiB7XG4gICAgb3Blbjogb3Blbi5jaGFyQXQoMikgPT09ICd+JyxcbiAgICBjbG9zZTogY2xvc2UuY2hhckF0KGNsb3NlLmxlbmd0aCAtIDMpID09PSAnfidcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQ29tbWVudChjb21tZW50KSB7XG4gIHJldHVybiBjb21tZW50LnJlcGxhY2UoL15cXHtcXHt+P1xcIS0/LT8vLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLT8tP34/XFx9XFx9JC8sICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVQYXRoKGRhdGEsIHBhcnRzLCBsb2MpIHtcbiAgbG9jID0gdGhpcy5sb2NJbmZvKGxvYyk7XG5cbiAgbGV0IG9yaWdpbmFsID0gZGF0YSA/ICdAJyA6ICcnLFxuICAgICAgZGlnID0gW10sXG4gICAgICBkZXB0aCA9IDAsXG4gICAgICBkZXB0aFN0cmluZyA9ICcnO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IHBhcnQgPSBwYXJ0c1tpXS5wYXJ0LFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIFtdIHN5bnRheCB0aGVuIHdlIGRvIG5vdCB0cmVhdCBwYXRoIHJlZmVyZW5jZXMgYXMgb3BlcmF0b3JzLFxuICAgICAgICAvLyBpLmUuIGZvby5bdGhpc10gcmVzb2x2ZXMgdG8gYXBwcm94aW1hdGVseSBjb250ZXh0LmZvb1sndGhpcyddXG4gICAgICAgIGlzTGl0ZXJhbCA9IHBhcnRzW2ldLm9yaWdpbmFsICE9PSBwYXJ0O1xuICAgIG9yaWdpbmFsICs9IChwYXJ0c1tpXS5zZXBhcmF0b3IgfHwgJycpICsgcGFydDtcblxuICAgIGlmICghaXNMaXRlcmFsICYmIChwYXJ0ID09PSAnLi4nIHx8IHBhcnQgPT09ICcuJyB8fCBwYXJ0ID09PSAndGhpcycpKSB7XG4gICAgICBpZiAoZGlnLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignSW52YWxpZCBwYXRoOiAnICsgb3JpZ2luYWwsIHtsb2N9KTtcbiAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgICBkZXB0aFN0cmluZyArPSAnLi4vJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGlnLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLFxuICAgIGRhdGEsXG4gICAgZGVwdGgsXG4gICAgcGFydHM6IGRpZyxcbiAgICBvcmlnaW5hbCxcbiAgICBsb2NcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVNdXN0YWNoZShwYXRoLCBwYXJhbXMsIGhhc2gsIG9wZW4sIHN0cmlwLCBsb2NJbmZvKSB7XG4gIC8vIE11c3QgdXNlIGNoYXJBdCB0byBzdXBwb3J0IElFIHByZS0xMFxuICBsZXQgZXNjYXBlRmxhZyA9IG9wZW4uY2hhckF0KDMpIHx8IG9wZW4uY2hhckF0KDIpLFxuICAgICAgZXNjYXBlZCA9IGVzY2FwZUZsYWcgIT09ICd7JyAmJiBlc2NhcGVGbGFnICE9PSAnJic7XG5cbiAgbGV0IGRlY29yYXRvciA9ICgvXFwqLy50ZXN0KG9wZW4pKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yJyA6ICdNdXN0YWNoZVN0YXRlbWVudCcsXG4gICAgcGF0aCxcbiAgICBwYXJhbXMsXG4gICAgaGFzaCxcbiAgICBlc2NhcGVkLFxuICAgIHN0cmlwLFxuICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUmF3QmxvY2sob3BlblJhd0Jsb2NrLCBjb250ZW50cywgY2xvc2UsIGxvY0luZm8pIHtcbiAgdmFsaWRhdGVDbG9zZShvcGVuUmF3QmxvY2ssIGNsb3NlKTtcblxuICBsb2NJbmZvID0gdGhpcy5sb2NJbmZvKGxvY0luZm8pO1xuICBsZXQgcHJvZ3JhbSA9IHtcbiAgICB0eXBlOiAnUHJvZ3JhbScsXG4gICAgYm9keTogY29udGVudHMsXG4gICAgc3RyaXA6IHt9LFxuICAgIGxvYzogbG9jSW5mb1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0Jsb2NrU3RhdGVtZW50JyxcbiAgICBwYXRoOiBvcGVuUmF3QmxvY2sucGF0aCxcbiAgICBwYXJhbXM6IG9wZW5SYXdCbG9jay5wYXJhbXMsXG4gICAgaGFzaDogb3BlblJhd0Jsb2NrLmhhc2gsXG4gICAgcHJvZ3JhbSxcbiAgICBvcGVuU3RyaXA6IHt9LFxuICAgIGludmVyc2VTdHJpcDoge30sXG4gICAgY2xvc2VTdHJpcDoge30sXG4gICAgbG9jOiBsb2NJbmZvXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQmxvY2sob3BlbkJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlQW5kUHJvZ3JhbSwgY2xvc2UsIGludmVydGVkLCBsb2NJbmZvKSB7XG4gIGlmIChjbG9zZSAmJiBjbG9zZS5wYXRoKSB7XG4gICAgdmFsaWRhdGVDbG9zZShvcGVuQmxvY2ssIGNsb3NlKTtcbiAgfVxuXG4gIGxldCBkZWNvcmF0b3IgPSAoL1xcKi8udGVzdChvcGVuQmxvY2sub3BlbikpO1xuXG4gIHByb2dyYW0uYmxvY2tQYXJhbXMgPSBvcGVuQmxvY2suYmxvY2tQYXJhbXM7XG5cbiAgbGV0IGludmVyc2UsXG4gICAgICBpbnZlcnNlU3RyaXA7XG5cbiAgaWYgKGludmVyc2VBbmRQcm9ncmFtKSB7XG4gICAgaWYgKGRlY29yYXRvcikge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5leHBlY3RlZCBpbnZlcnNlIGJsb2NrIG9uIGRlY29yYXRvcicsIGludmVyc2VBbmRQcm9ncmFtKTtcbiAgICB9XG5cbiAgICBpZiAoaW52ZXJzZUFuZFByb2dyYW0uY2hhaW4pIHtcbiAgICAgIGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW0uYm9keVswXS5jbG9zZVN0cmlwID0gY2xvc2Uuc3RyaXA7XG4gICAgfVxuXG4gICAgaW52ZXJzZVN0cmlwID0gaW52ZXJzZUFuZFByb2dyYW0uc3RyaXA7XG4gICAgaW52ZXJzZSA9IGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW07XG4gIH1cblxuICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICBpbnZlcnRlZCA9IGludmVyc2U7XG4gICAgaW52ZXJzZSA9IHByb2dyYW07XG4gICAgcHJvZ3JhbSA9IGludmVydGVkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yQmxvY2snIDogJ0Jsb2NrU3RhdGVtZW50JyxcbiAgICBwYXRoOiBvcGVuQmxvY2sucGF0aCxcbiAgICBwYXJhbXM6IG9wZW5CbG9jay5wYXJhbXMsXG4gICAgaGFzaDogb3BlbkJsb2NrLmhhc2gsXG4gICAgcHJvZ3JhbSxcbiAgICBpbnZlcnNlLFxuICAgIG9wZW5TdHJpcDogb3BlbkJsb2NrLnN0cmlwLFxuICAgIGludmVyc2VTdHJpcCxcbiAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcbiAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVByb2dyYW0oc3RhdGVtZW50cywgbG9jKSB7XG4gIGlmICghbG9jICYmIHN0YXRlbWVudHMubGVuZ3RoKSB7XG4gICAgY29uc3QgZmlyc3RMb2MgPSBzdGF0ZW1lbnRzWzBdLmxvYyxcbiAgICAgICAgICBsYXN0TG9jID0gc3RhdGVtZW50c1tzdGF0ZW1lbnRzLmxlbmd0aCAtIDFdLmxvYztcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGZpcnN0TG9jICYmIGxhc3RMb2MpIHtcbiAgICAgIGxvYyA9IHtcbiAgICAgICAgc291cmNlOiBmaXJzdExvYy5zb3VyY2UsXG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgbGluZTogZmlyc3RMb2Muc3RhcnQubGluZSxcbiAgICAgICAgICBjb2x1bW46IGZpcnN0TG9jLnN0YXJ0LmNvbHVtblxuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICBsaW5lOiBsYXN0TG9jLmVuZC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogbGFzdExvYy5lbmQuY29sdW1uXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUHJvZ3JhbScsXG4gICAgYm9keTogc3RhdGVtZW50cyxcbiAgICBzdHJpcDoge30sXG4gICAgbG9jOiBsb2NcbiAgfTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVBhcnRpYWxCbG9jayhvcGVuLCBwcm9ncmFtLCBjbG9zZSwgbG9jSW5mbykge1xuICB2YWxpZGF0ZUNsb3NlKG9wZW4sIGNsb3NlKTtcblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQnLFxuICAgIG5hbWU6IG9wZW4ucGF0aCxcbiAgICBwYXJhbXM6IG9wZW4ucGFyYW1zLFxuICAgIGhhc2g6IG9wZW4uaGFzaCxcbiAgICBwcm9ncmFtLFxuICAgIG9wZW5TdHJpcDogb3Blbi5zdHJpcCxcbiAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcbiAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuICB9O1xufVxuXG4iLCJpbXBvcnQgeyBDT01QSUxFUl9SRVZJU0lPTiwgUkVWSVNJT05fQ0hBTkdFUyB9IGZyb20gJy4uL2Jhc2UnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuaW1wb3J0IHtpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgQ29kZUdlbiBmcm9tICcuL2NvZGUtZ2VuJztcblxuZnVuY3Rpb24gTGl0ZXJhbCh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEphdmFTY3JpcHRDb21waWxlcigpIHt9XG5cbkphdmFTY3JpcHRDb21waWxlci5wcm90b3R5cGUgPSB7XG4gIC8vIFBVQkxJQyBBUEk6IFlvdSBjYW4gb3ZlcnJpZGUgdGhlc2UgbWV0aG9kcyBpbiBhIHN1YmNsYXNzIHRvIHByb3ZpZGVcbiAgLy8gYWx0ZXJuYXRpdmUgY29tcGlsZWQgZm9ybXMgZm9yIG5hbWUgbG9va3VwIGFuZCBidWZmZXJpbmcgc2VtYW50aWNzXG4gIG5hbWVMb29rdXA6IGZ1bmN0aW9uKHBhcmVudCwgbmFtZS8qICwgdHlwZSovKSB7XG4gICAgaWYgKEphdmFTY3JpcHRDb21waWxlci5pc1ZhbGlkSmF2YVNjcmlwdFZhcmlhYmxlTmFtZShuYW1lKSkge1xuICAgICAgcmV0dXJuIFtwYXJlbnQsICcuJywgbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcGFyZW50LCAnWycsIEpTT04uc3RyaW5naWZ5KG5hbWUpLCAnXSddO1xuICAgIH1cbiAgfSxcbiAgZGVwdGhlZExvb2t1cDogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBbdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5sb29rdXAnKSwgJyhkZXB0aHMsIFwiJywgbmFtZSwgJ1wiKSddO1xuICB9LFxuXG4gIGNvbXBpbGVySW5mbzogZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgcmV2aXNpb24gPSBDT01QSUxFUl9SRVZJU0lPTixcbiAgICAgICAgICB2ZXJzaW9ucyA9IFJFVklTSU9OX0NIQU5HRVNbcmV2aXNpb25dO1xuICAgIHJldHVybiBbcmV2aXNpb24sIHZlcnNpb25zXTtcbiAgfSxcblxuICBhcHBlbmRUb0J1ZmZlcjogZnVuY3Rpb24oc291cmNlLCBsb2NhdGlvbiwgZXhwbGljaXQpIHtcbiAgICAvLyBGb3JjZSBhIHNvdXJjZSBhcyB0aGlzIHNpbXBsaWZpZXMgdGhlIG1lcmdlIGxvZ2ljLlxuICAgIGlmICghaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICBzb3VyY2UgPSBbc291cmNlXTtcbiAgICB9XG4gICAgc291cmNlID0gdGhpcy5zb3VyY2Uud3JhcChzb3VyY2UsIGxvY2F0aW9uKTtcblxuICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7XG4gICAgICByZXR1cm4gWydyZXR1cm4gJywgc291cmNlLCAnOyddO1xuICAgIH0gZWxzZSBpZiAoZXhwbGljaXQpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBjYXNlIHdoZXJlIHRoZSBidWZmZXIgb3BlcmF0aW9uIG9jY3VycyBhcyBhIGNoaWxkIG9mIGFub3RoZXJcbiAgICAgIC8vIGNvbnN0cnVjdCwgZ2VuZXJhbGx5IGJyYWNlcy4gV2UgaGF2ZSB0byBleHBsaWNpdGx5IG91dHB1dCB0aGVzZSBidWZmZXJcbiAgICAgIC8vIG9wZXJhdGlvbnMgdG8gZW5zdXJlIHRoYXQgdGhlIGVtaXR0ZWQgY29kZSBnb2VzIGluIHRoZSBjb3JyZWN0IGxvY2F0aW9uLlxuICAgICAgcmV0dXJuIFsnYnVmZmVyICs9ICcsIHNvdXJjZSwgJzsnXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc291cmNlLmFwcGVuZFRvQnVmZmVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxuICB9LFxuXG4gIGluaXRpYWxpemVCdWZmZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1b3RlZFN0cmluZygnJyk7XG4gIH0sXG4gIC8vIEVORCBQVUJMSUMgQVBJXG5cbiAgY29tcGlsZTogZnVuY3Rpb24oZW52aXJvbm1lbnQsIG9wdGlvbnMsIGNvbnRleHQsIGFzT2JqZWN0KSB7XG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHJpbmdQYXJhbXMgPSB0aGlzLm9wdGlvbnMuc3RyaW5nUGFyYW1zO1xuICAgIHRoaXMudHJhY2tJZHMgPSB0aGlzLm9wdGlvbnMudHJhY2tJZHM7XG4gICAgdGhpcy5wcmVjb21waWxlID0gIWFzT2JqZWN0O1xuXG4gICAgdGhpcy5uYW1lID0gdGhpcy5lbnZpcm9ubWVudC5uYW1lO1xuICAgIHRoaXMuaXNDaGlsZCA9ICEhY29udGV4dDtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0IHx8IHtcbiAgICAgIGRlY29yYXRvcnM6IFtdLFxuICAgICAgcHJvZ3JhbXM6IFtdLFxuICAgICAgZW52aXJvbm1lbnRzOiBbXVxuICAgIH07XG5cbiAgICB0aGlzLnByZWFtYmxlKCk7XG5cbiAgICB0aGlzLnN0YWNrU2xvdCA9IDA7XG4gICAgdGhpcy5zdGFja1ZhcnMgPSBbXTtcbiAgICB0aGlzLmFsaWFzZXMgPSB7fTtcbiAgICB0aGlzLnJlZ2lzdGVycyA9IHsgbGlzdDogW10gfTtcbiAgICB0aGlzLmhhc2hlcyA9IFtdO1xuICAgIHRoaXMuY29tcGlsZVN0YWNrID0gW107XG4gICAgdGhpcy5pbmxpbmVTdGFjayA9IFtdO1xuICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBbXTtcblxuICAgIHRoaXMuY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKTtcblxuICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZW52aXJvbm1lbnQudXNlRGVwdGhzIHx8IGVudmlyb25tZW50LnVzZURlY29yYXRvcnMgfHwgdGhpcy5vcHRpb25zLmNvbXBhdDtcbiAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcyB8fCBlbnZpcm9ubWVudC51c2VCbG9ja1BhcmFtcztcblxuICAgIGxldCBvcGNvZGVzID0gZW52aXJvbm1lbnQub3Bjb2RlcyxcbiAgICAgICAgb3Bjb2RlLFxuICAgICAgICBmaXJzdExvYyxcbiAgICAgICAgaSxcbiAgICAgICAgbDtcblxuICAgIGZvciAoaSA9IDAsIGwgPSBvcGNvZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgb3Bjb2RlID0gb3Bjb2Rlc1tpXTtcblxuICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gb3Bjb2RlLmxvYztcbiAgICAgIGZpcnN0TG9jID0gZmlyc3RMb2MgfHwgb3Bjb2RlLmxvYztcbiAgICAgIHRoaXNbb3Bjb2RlLm9wY29kZV0uYXBwbHkodGhpcywgb3Bjb2RlLmFyZ3MpO1xuICAgIH1cblxuICAgIC8vIEZsdXNoIGFueSB0cmFpbGluZyBjb250ZW50IHRoYXQgbWlnaHQgYmUgcGVuZGluZy5cbiAgICB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb24gPSBmaXJzdExvYztcbiAgICB0aGlzLnB1c2hTb3VyY2UoJycpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAodGhpcy5zdGFja1Nsb3QgfHwgdGhpcy5pbmxpbmVTdGFjay5sZW5ndGggfHwgdGhpcy5jb21waWxlU3RhY2subGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdDb21waWxlIGNvbXBsZXRlZCB3aXRoIGNvbnRlbnQgbGVmdCBvbiBzdGFjaycpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5kZWNvcmF0b3JzLmlzRW1wdHkoKSkge1xuICAgICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcblxuICAgICAgdGhpcy5kZWNvcmF0b3JzLnByZXBlbmQoJ3ZhciBkZWNvcmF0b3JzID0gY29udGFpbmVyLmRlY29yYXRvcnM7XFxuJyk7XG4gICAgICB0aGlzLmRlY29yYXRvcnMucHVzaCgncmV0dXJuIGZuOycpO1xuXG4gICAgICBpZiAoYXNPYmplY3QpIHtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzID0gRnVuY3Rpb24uYXBwbHkodGhpcywgWydmbicsICdwcm9wcycsICdjb250YWluZXInLCAnZGVwdGgwJywgJ2RhdGEnLCAnYmxvY2tQYXJhbXMnLCAnZGVwdGhzJywgdGhpcy5kZWNvcmF0b3JzLm1lcmdlKCldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKCdmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGgwLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XFxuJyk7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCd9XFxuJyk7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycyA9IHRoaXMuZGVjb3JhdG9ycy5tZXJnZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY29yYXRvcnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgbGV0IGZuID0gdGhpcy5jcmVhdGVGdW5jdGlvbkNvbnRleHQoYXNPYmplY3QpO1xuICAgIGlmICghdGhpcy5pc0NoaWxkKSB7XG4gICAgICBsZXQgcmV0ID0ge1xuICAgICAgICBjb21waWxlcjogdGhpcy5jb21waWxlckluZm8oKSxcbiAgICAgICAgbWFpbjogZm5cbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLmRlY29yYXRvcnMpIHtcbiAgICAgICAgcmV0Lm1haW5fZCA9IHRoaXMuZGVjb3JhdG9yczsgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICByZXQudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGxldCB7cHJvZ3JhbXMsIGRlY29yYXRvcnN9ID0gdGhpcy5jb250ZXh0O1xuICAgICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAocHJvZ3JhbXNbaV0pIHtcbiAgICAgICAgICByZXRbaV0gPSBwcm9ncmFtc1tpXTtcbiAgICAgICAgICBpZiAoZGVjb3JhdG9yc1tpXSkge1xuICAgICAgICAgICAgcmV0W2kgKyAnX2QnXSA9IGRlY29yYXRvcnNbaV07XG4gICAgICAgICAgICByZXQudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmVudmlyb25tZW50LnVzZVBhcnRpYWwpIHtcbiAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XG4gICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZURlcHRocykge1xuICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdCkge1xuICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhc09iamVjdCkge1xuICAgICAgICByZXQuY29tcGlsZXIgPSBKU09OLnN0cmluZ2lmeShyZXQuY29tcGlsZXIpO1xuXG4gICAgICAgIHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbiA9IHtzdGFydDoge2xpbmU6IDEsIGNvbHVtbjogMH19O1xuICAgICAgICByZXQgPSB0aGlzLm9iamVjdExpdGVyYWwocmV0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zcmNOYW1lKSB7XG4gICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nV2l0aFNvdXJjZU1hcCh7ZmlsZTogb3B0aW9ucy5kZXN0TmFtZX0pO1xuICAgICAgICAgIHJldC5tYXAgPSByZXQubWFwICYmIHJldC5tYXAudG9TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSByZXQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0LmNvbXBpbGVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfSxcblxuICBwcmVhbWJsZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gdHJhY2sgdGhlIGxhc3QgY29udGV4dCBwdXNoZWQgaW50byBwbGFjZSB0byBhbGxvdyBza2lwcGluZyB0aGVcbiAgICAvLyBnZXRDb250ZXh0IG9wY29kZSB3aGVuIGl0IHdvdWxkIGJlIGEgbm9vcFxuICAgIHRoaXMubGFzdENvbnRleHQgPSAwO1xuICAgIHRoaXMuc291cmNlID0gbmV3IENvZGVHZW4odGhpcy5vcHRpb25zLnNyY05hbWUpO1xuICAgIHRoaXMuZGVjb3JhdG9ycyA9IG5ldyBDb2RlR2VuKHRoaXMub3B0aW9ucy5zcmNOYW1lKTtcbiAgfSxcblxuICBjcmVhdGVGdW5jdGlvbkNvbnRleHQ6IGZ1bmN0aW9uKGFzT2JqZWN0KSB7XG4gICAgbGV0IHZhckRlY2xhcmF0aW9ucyA9ICcnO1xuXG4gICAgbGV0IGxvY2FscyA9IHRoaXMuc3RhY2tWYXJzLmNvbmNhdCh0aGlzLnJlZ2lzdGVycy5saXN0KTtcbiAgICBpZiAobG9jYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCAnICsgbG9jYWxzLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgbWluaW1pemVyIGFsaWFzIG1hcHBpbmdzXG4gICAgLy9cbiAgICAvLyBXaGVuIHVzaW5nIHRydWUgU291cmNlTm9kZXMsIHRoaXMgd2lsbCB1cGRhdGUgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIGdpdmVuIGFsaWFzXG4gICAgLy8gYXMgdGhlIHNvdXJjZSBub2RlcyBhcmUgcmV1c2VkIGluIHNpdHUuIEZvciB0aGUgbm9uLXNvdXJjZSBub2RlIGNvbXBpbGF0aW9uIG1vZGUsXG4gICAgLy8gYWxpYXNlcyB3aWxsIG5vdCBiZSB1c2VkLCBidXQgdGhpcyBjYXNlIGlzIGFscmVhZHkgYmVpbmcgcnVuIG9uIHRoZSBjbGllbnQgYW5kXG4gICAgLy8gd2UgYXJlbid0IGNvbmNlcm4gYWJvdXQgbWluaW1pemluZyB0aGUgdGVtcGxhdGUgc2l6ZS5cbiAgICBsZXQgYWxpYXNDb3VudCA9IDA7XG4gICAgZm9yIChsZXQgYWxpYXMgaW4gdGhpcy5hbGlhc2VzKSB7ICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgICBsZXQgbm9kZSA9IHRoaXMuYWxpYXNlc1thbGlhc107XG5cbiAgICAgIGlmICh0aGlzLmFsaWFzZXMuaGFzT3duUHJvcGVydHkoYWxpYXMpICYmIG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5yZWZlcmVuY2VDb3VudCA+IDEpIHtcbiAgICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsIGFsaWFzJyArICgrK2FsaWFzQ291bnQpICsgJz0nICsgYWxpYXM7XG4gICAgICAgIG5vZGUuY2hpbGRyZW5bMF0gPSAnYWxpYXMnICsgYWxpYXNDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcGFyYW1zID0gWydjb250YWluZXInLCAnZGVwdGgwJywgJ2hlbHBlcnMnLCAncGFydGlhbHMnLCAnZGF0YSddO1xuXG4gICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgdGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKCdibG9ja1BhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKCdkZXB0aHMnKTtcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtIGEgc2Vjb25kIHBhc3Mgb3ZlciB0aGUgb3V0cHV0IHRvIG1lcmdlIGNvbnRlbnQgd2hlbiBwb3NzaWJsZVxuICAgIGxldCBzb3VyY2UgPSB0aGlzLm1lcmdlU291cmNlKHZhckRlY2xhcmF0aW9ucyk7XG5cbiAgICBpZiAoYXNPYmplY3QpIHtcbiAgICAgIHBhcmFtcy5wdXNoKHNvdXJjZSk7XG5cbiAgICAgIHJldHVybiBGdW5jdGlvbi5hcHBseSh0aGlzLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2Uud3JhcChbJ2Z1bmN0aW9uKCcsIHBhcmFtcy5qb2luKCcsJyksICcpIHtcXG4gICcsIHNvdXJjZSwgJ30nXSk7XG4gICAgfVxuICB9LFxuICBtZXJnZVNvdXJjZTogZnVuY3Rpb24odmFyRGVjbGFyYXRpb25zKSB7XG4gICAgbGV0IGlzU2ltcGxlID0gdGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSxcbiAgICAgICAgYXBwZW5kT25seSA9ICF0aGlzLmZvcmNlQnVmZmVyLFxuICAgICAgICBhcHBlbmRGaXJzdCxcblxuICAgICAgICBzb3VyY2VTZWVuLFxuICAgICAgICBidWZmZXJTdGFydCxcbiAgICAgICAgYnVmZmVyRW5kO1xuICAgIHRoaXMuc291cmNlLmVhY2goKGxpbmUpID0+IHtcbiAgICAgIGlmIChsaW5lLmFwcGVuZFRvQnVmZmVyKSB7XG4gICAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICAgIGxpbmUucHJlcGVuZCgnICArICcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gbGluZTtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXJFbmQgPSBsaW5lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG4gICAgICAgICAgaWYgKCFzb3VyY2VTZWVuKSB7XG4gICAgICAgICAgICBhcHBlbmRGaXJzdCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ2J1ZmZlciArPSAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xuICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gYnVmZmVyRW5kID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgc291cmNlU2VlbiA9IHRydWU7XG4gICAgICAgIGlmICghaXNTaW1wbGUpIHtcbiAgICAgICAgICBhcHBlbmRPbmx5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgaWYgKGFwcGVuZE9ubHkpIHtcbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNvdXJjZVNlZW4pIHtcbiAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIFwiXCI7Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCBidWZmZXIgPSAnICsgKGFwcGVuZEZpcnN0ID8gJycgOiB0aGlzLmluaXRpYWxpemVCdWZmZXIoKSk7XG5cbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gYnVmZmVyICsgJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBidWZmZXI7Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhckRlY2xhcmF0aW9ucykge1xuICAgICAgdGhpcy5zb3VyY2UucHJlcGVuZCgndmFyICcgKyB2YXJEZWNsYXJhdGlvbnMuc3Vic3RyaW5nKDIpICsgKGFwcGVuZEZpcnN0ID8gJycgOiAnO1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zb3VyY2UubWVyZ2UoKTtcbiAgfSxcblxuICAvLyBbYmxvY2tWYWx1ZV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXR1cm4gdmFsdWUgb2YgYmxvY2tIZWxwZXJNaXNzaW5nXG4gIC8vXG4gIC8vIFRoZSBwdXJwb3NlIG9mIHRoaXMgb3Bjb2RlIGlzIHRvIHRha2UgYSBibG9jayBvZiB0aGUgZm9ybVxuICAvLyBge3sjdGhpcy5mb299fS4uLnt7L3RoaXMuZm9vfX1gLCByZXNvbHZlIHRoZSB2YWx1ZSBvZiBgZm9vYCwgYW5kXG4gIC8vIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIHdpdGggdGhlIHJlc3VsdCBvZiBwcm9wZXJseVxuICAvLyBpbnZva2luZyBibG9ja0hlbHBlck1pc3NpbmcuXG4gIGJsb2NrVmFsdWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBsZXQgYmxvY2tIZWxwZXJNaXNzaW5nID0gdGhpcy5hbGlhc2FibGUoJ2hlbHBlcnMuYmxvY2tIZWxwZXJNaXNzaW5nJyksXG4gICAgICAgIHBhcmFtcyA9IFt0aGlzLmNvbnRleHROYW1lKDApXTtcbiAgICB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCAwLCBwYXJhbXMpO1xuXG4gICAgbGV0IGJsb2NrTmFtZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICBwYXJhbXMuc3BsaWNlKDEsIDAsIGJsb2NrTmFtZSk7XG5cbiAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGJsb2NrSGVscGVyTWlzc2luZywgJ2NhbGwnLCBwYXJhbXMpKTtcbiAgfSxcblxuICAvLyBbYW1iaWd1b3VzQmxvY2tWYWx1ZV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcbiAgLy8gQ29tcGlsZXIgdmFsdWUsIGJlZm9yZTogbGFzdEhlbHBlcj12YWx1ZSBvZiBsYXN0IGZvdW5kIGhlbHBlciwgaWYgYW55XG4gIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbm8gbGFzdEhlbHBlcjogc2FtZSBhcyBbYmxvY2tWYWx1ZV1cbiAgLy8gT24gc3RhY2ssIGFmdGVyLCBpZiBsYXN0SGVscGVyOiB2YWx1ZVxuICBhbWJpZ3VvdXNCbG9ja1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAvLyBXZSdyZSBiZWluZyBhIGJpdCBjaGVla3kgYW5kIHJldXNpbmcgdGhlIG9wdGlvbnMgdmFsdWUgZnJvbSB0aGUgcHJpb3IgZXhlY1xuICAgIGxldCBibG9ja0hlbHBlck1pc3NpbmcgPSB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5ibG9ja0hlbHBlck1pc3NpbmcnKSxcbiAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xuICAgIHRoaXMuc2V0dXBIZWxwZXJBcmdzKCcnLCAwLCBwYXJhbXMsIHRydWUpO1xuXG4gICAgdGhpcy5mbHVzaElubGluZSgpO1xuXG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLnRvcFN0YWNrKCk7XG4gICAgcGFyYW1zLnNwbGljZSgxLCAwLCBjdXJyZW50KTtcblxuICAgIHRoaXMucHVzaFNvdXJjZShbXG4gICAgICAgICdpZiAoIScsIHRoaXMubGFzdEhlbHBlciwgJykgeyAnLFxuICAgICAgICAgIGN1cnJlbnQsICcgPSAnLCB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcyksXG4gICAgICAgICd9J10pO1xuICB9LFxuXG4gIC8vIFthcHBlbmRDb250ZW50XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gQXBwZW5kcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGBjb250ZW50YCB0byB0aGUgY3VycmVudCBidWZmZXJcbiAgYXBwZW5kQ29udGVudDogZnVuY3Rpb24oY29udGVudCkge1xuICAgIGlmICh0aGlzLnBlbmRpbmdDb250ZW50KSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5wZW5kaW5nQ29udGVudCArIGNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGVuZGluZ0xvY2F0aW9uID0gdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uO1xuICAgIH1cblxuICAgIHRoaXMucGVuZGluZ0NvbnRlbnQgPSBjb250ZW50O1xuICB9LFxuXG4gIC8vIFthcHBlbmRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gQ29lcmNlcyBgdmFsdWVgIHRvIGEgU3RyaW5nIGFuZCBhcHBlbmRzIGl0IHRvIHRoZSBjdXJyZW50IGJ1ZmZlci5cbiAgLy9cbiAgLy8gSWYgYHZhbHVlYCBpcyB0cnV0aHksIG9yIDAsIGl0IGlzIGNvZXJjZWQgaW50byBhIHN0cmluZyBhbmQgYXBwZW5kZWRcbiAgLy8gT3RoZXJ3aXNlLCB0aGUgZW1wdHkgc3RyaW5nIGlzIGFwcGVuZGVkXG4gIGFwcGVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaXNJbmxpbmUoKSkge1xuICAgICAgdGhpcy5yZXBsYWNlU3RhY2soKGN1cnJlbnQpID0+IFsnICE9IG51bGwgPyAnLCBjdXJyZW50LCAnIDogXCJcIiddKTtcblxuICAgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5wb3BTdGFjaygpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBsb2NhbCA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICgnLCBsb2NhbCwgJyAhPSBudWxsKSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIobG9jYWwsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcbiAgICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7XG4gICAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2Vsc2UgeyAnLCB0aGlzLmFwcGVuZFRvQnVmZmVyKFwiJydcIiwgdW5kZWZpbmVkLCB0cnVlKSwgJyB9J10pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvLyBbYXBwZW5kRXNjYXBlZF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuICAvL1xuICAvLyBFc2NhcGUgYHZhbHVlYCBhbmQgYXBwZW5kIGl0IHRvIHRoZSBidWZmZXJcbiAgYXBwZW5kRXNjYXBlZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIoXG4gICAgICAgIFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24nKSwgJygnLCB0aGlzLnBvcFN0YWNrKCksICcpJ10pKTtcbiAgfSxcblxuICAvLyBbZ2V0Q29udGV4dF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vIENvbXBpbGVyIHZhbHVlLCBhZnRlcjogbGFzdENvbnRleHQ9ZGVwdGhcbiAgLy9cbiAgLy8gU2V0IHRoZSB2YWx1ZSBvZiB0aGUgYGxhc3RDb250ZXh0YCBjb21waWxlciB2YWx1ZSB0byB0aGUgZGVwdGhcbiAgZ2V0Q29udGV4dDogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICB0aGlzLmxhc3RDb250ZXh0ID0gZGVwdGg7XG4gIH0sXG5cbiAgLy8gW3B1c2hDb250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dCwgLi4uXG4gIC8vXG4gIC8vIFB1c2hlcyB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgY29udGV4dCBvbnRvIHRoZSBzdGFjay5cbiAgcHVzaENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLmNvbnRleHROYW1lKHRoaXMubGFzdENvbnRleHQpKTtcbiAgfSxcblxuICAvLyBbbG9va3VwT25Db250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dFtuYW1lXSwgLi4uXG4gIC8vXG4gIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgbmFtZWAgb24gdGhlIGN1cnJlbnQgY29udGV4dCBhbmQgcHVzaGVzXG4gIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuICBsb29rdXBPbkNvbnRleHQ6IGZ1bmN0aW9uKHBhcnRzLCBmYWxzeSwgc3RyaWN0LCBzY29wZWQpIHtcbiAgICBsZXQgaSA9IDA7XG5cbiAgICBpZiAoIXNjb3BlZCAmJiB0aGlzLm9wdGlvbnMuY29tcGF0ICYmICF0aGlzLmxhc3RDb250ZXh0KSB7XG4gICAgICAvLyBUaGUgZGVwdGhlZCBxdWVyeSBpcyBleHBlY3RlZCB0byBoYW5kbGUgdGhlIHVuZGVmaW5lZCBsb2dpYyBmb3IgdGhlIHJvb3QgbGV2ZWwgdGhhdFxuICAgICAgLy8gaXMgaW1wbGVtZW50ZWQgYmVsb3csIHNvIHdlIGV2YWx1YXRlIHRoYXQgZGlyZWN0bHkgaW4gY29tcGF0IG1vZGVcbiAgICAgIHRoaXMucHVzaCh0aGlzLmRlcHRoZWRMb29rdXAocGFydHNbaSsrXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hDb250ZXh0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KTtcbiAgfSxcblxuICAvLyBbbG9va3VwQmxvY2tQYXJhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogYmxvY2tQYXJhbVtuYW1lXSwgLi4uXG4gIC8vXG4gIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgcGFydHNgIG9uIHRoZSBnaXZlbiBibG9jayBwYXJhbSBhbmQgcHVzaGVzXG4gIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuICBsb29rdXBCbG9ja1BhcmFtOiBmdW5jdGlvbihibG9ja1BhcmFtSWQsIHBhcnRzKSB7XG4gICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG5cbiAgICB0aGlzLnB1c2goWydibG9ja1BhcmFtc1snLCBibG9ja1BhcmFtSWRbMF0sICddWycsIGJsb2NrUGFyYW1JZFsxXSwgJ10nXSk7XG4gICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCAxKTtcbiAgfSxcblxuICAvLyBbbG9va3VwRGF0YV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogZGF0YSwgLi4uXG4gIC8vXG4gIC8vIFB1c2ggdGhlIGRhdGEgbG9va3VwIG9wZXJhdG9yXG4gIGxvb2t1cERhdGE6IGZ1bmN0aW9uKGRlcHRoLCBwYXJ0cywgc3RyaWN0KSB7XG4gICAgaWYgKCFkZXB0aCkge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdkYXRhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnY29udGFpbmVyLmRhdGEoZGF0YSwgJyArIGRlcHRoICsgJyknKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVQYXRoKCdkYXRhJywgcGFydHMsIDAsIHRydWUsIHN0cmljdCk7XG4gIH0sXG5cbiAgcmVzb2x2ZVBhdGg6IGZ1bmN0aW9uKHR5cGUsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgfHwgdGhpcy5vcHRpb25zLmFzc3VtZU9iamVjdHMpIHtcbiAgICAgIHRoaXMucHVzaChzdHJpY3RMb29rdXAodGhpcy5vcHRpb25zLnN0cmljdCAmJiBzdHJpY3QsIHRoaXMsIHBhcnRzLCB0eXBlKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGxlbiA9IHBhcnRzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICAgIHRoaXMucmVwbGFjZVN0YWNrKChjdXJyZW50KSA9PiB7XG4gICAgICAgIGxldCBsb29rdXAgPSB0aGlzLm5hbWVMb29rdXAoY3VycmVudCwgcGFydHNbaV0sIHR5cGUpO1xuICAgICAgICAvLyBXZSB3YW50IHRvIGVuc3VyZSB0aGF0IHplcm8gYW5kIGZhbHNlIGFyZSBoYW5kbGVkIHByb3Blcmx5IGlmIHRoZSBjb250ZXh0IChmYWxzeSBmbGFnKVxuICAgICAgICAvLyBuZWVkcyB0byBoYXZlIHRoZSBzcGVjaWFsIGhhbmRsaW5nIGZvciB0aGVzZSB2YWx1ZXMuXG4gICAgICAgIGlmICghZmFsc3kpIHtcbiAgICAgICAgICByZXR1cm4gWycgIT0gbnVsbCA/ICcsIGxvb2t1cCwgJyA6ICcsIGN1cnJlbnRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSB3ZSBjYW4gdXNlIGdlbmVyaWMgZmFsc3kgaGFuZGxpbmdcbiAgICAgICAgICByZXR1cm4gWycgJiYgJywgbG9va3VwXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuICAgIH1cbiAgfSxcblxuICAvLyBbcmVzb2x2ZVBvc3NpYmxlTGFtYmRhXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzb2x2ZWQgdmFsdWUsIC4uLlxuICAvL1xuICAvLyBJZiB0aGUgYHZhbHVlYCBpcyBhIGxhbWJkYSwgcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgYnlcbiAgLy8gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbGFtYmRhXG4gIHJlc29sdmVQb3NzaWJsZUxhbWJkYTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoKFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmxhbWJkYScpLCAnKCcsIHRoaXMucG9wU3RhY2soKSwgJywgJywgdGhpcy5jb250ZXh0TmFtZSgwKSwgJyknXSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hTdHJpbmdQYXJhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogc3RyaW5nLCBjdXJyZW50Q29udGV4dCwgLi4uXG4gIC8vXG4gIC8vIFRoaXMgb3Bjb2RlIGlzIGRlc2lnbmVkIGZvciB1c2UgaW4gc3RyaW5nIG1vZGUsIHdoaWNoXG4gIC8vIHByb3ZpZGVzIHRoZSBzdHJpbmcgdmFsdWUgb2YgYSBwYXJhbWV0ZXIgYWxvbmcgd2l0aCBpdHNcbiAgLy8gZGVwdGggcmF0aGVyIHRoYW4gcmVzb2x2aW5nIGl0IGltbWVkaWF0ZWx5LlxuICBwdXNoU3RyaW5nUGFyYW06IGZ1bmN0aW9uKHN0cmluZywgdHlwZSkge1xuICAgIHRoaXMucHVzaENvbnRleHQoKTtcbiAgICB0aGlzLnB1c2hTdHJpbmcodHlwZSk7XG5cbiAgICAvLyBJZiBpdCdzIGEgc3ViZXhwcmVzc2lvbiwgdGhlIHN0cmluZyByZXN1bHRcbiAgICAvLyB3aWxsIGJlIHB1c2hlZCBhZnRlciB0aGlzIG9wY29kZS5cbiAgICBpZiAodHlwZSAhPT0gJ1N1YkV4cHJlc3Npb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5wdXNoU3RyaW5nKHN0cmluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZW1wdHlIYXNoOiBmdW5jdGlvbihvbWl0RW1wdHkpIHtcbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoSWRzXG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoQ29udGV4dHNcbiAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaFR5cGVzXG4gICAgfVxuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChvbWl0RW1wdHkgPyAndW5kZWZpbmVkJyA6ICd7fScpO1xuICB9LFxuICBwdXNoSGFzaDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaGFzaCkge1xuICAgICAgdGhpcy5oYXNoZXMucHVzaCh0aGlzLmhhc2gpO1xuICAgIH1cbiAgICB0aGlzLmhhc2ggPSB7dmFsdWVzOiBbXSwgdHlwZXM6IFtdLCBjb250ZXh0czogW10sIGlkczogW119O1xuICB9LFxuICBwb3BIYXNoOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgaGFzaCA9IHRoaXMuaGFzaDtcbiAgICB0aGlzLmhhc2ggPSB0aGlzLmhhc2hlcy5wb3AoKTtcblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guaWRzKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLmNvbnRleHRzKSk7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudHlwZXMpKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudmFsdWVzKSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hTdHJpbmddXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHF1b3RlZFN0cmluZyhzdHJpbmcpLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCBhIHF1b3RlZCB2ZXJzaW9uIG9mIGBzdHJpbmdgIG9udG8gdGhlIHN0YWNrXG4gIHB1c2hTdHJpbmc6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLnF1b3RlZFN0cmluZyhzdHJpbmcpKTtcbiAgfSxcblxuICAvLyBbcHVzaExpdGVyYWxdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHZhbHVlLCAuLi5cbiAgLy9cbiAgLy8gUHVzaGVzIGEgdmFsdWUgb250byB0aGUgc3RhY2suIFRoaXMgb3BlcmF0aW9uIHByZXZlbnRzXG4gIC8vIHRoZSBjb21waWxlciBmcm9tIGNyZWF0aW5nIGEgdGVtcG9yYXJ5IHZhcmlhYmxlIHRvIGhvbGRcbiAgLy8gaXQuXG4gIHB1c2hMaXRlcmFsOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh2YWx1ZSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hQcm9ncmFtXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBwcm9ncmFtKGd1aWQpLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCBhIHByb2dyYW0gZXhwcmVzc2lvbiBvbnRvIHRoZSBzdGFjay4gVGhpcyB0YWtlc1xuICAvLyBhIGNvbXBpbGUtdGltZSBndWlkIGFuZCBjb252ZXJ0cyBpdCBpbnRvIGEgcnVudGltZS1hY2Nlc3NpYmxlXG4gIC8vIGV4cHJlc3Npb24uXG4gIHB1c2hQcm9ncmFtOiBmdW5jdGlvbihndWlkKSB7XG4gICAgaWYgKGd1aWQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwobnVsbCk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFtyZWdpc3RlckRlY29yYXRvcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gUG9wcyBvZmYgdGhlIGRlY29yYXRvcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGRlY29yYXRvcixcbiAgLy8gYW5kIGluc2VydHMgdGhlIGRlY29yYXRvciBpbnRvIHRoZSBkZWNvcmF0b3JzIGxpc3QuXG4gIHJlZ2lzdGVyRGVjb3JhdG9yKHBhcmFtU2l6ZSwgbmFtZSkge1xuICAgIGxldCBmb3VuZERlY29yYXRvciA9IHRoaXMubmFtZUxvb2t1cCgnZGVjb3JhdG9ycycsIG5hbWUsICdkZWNvcmF0b3InKSxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIHBhcmFtU2l6ZSk7XG5cbiAgICB0aGlzLmRlY29yYXRvcnMucHVzaChbXG4gICAgICAnZm4gPSAnLFxuICAgICAgdGhpcy5kZWNvcmF0b3JzLmZ1bmN0aW9uQ2FsbChmb3VuZERlY29yYXRvciwgJycsIFsnZm4nLCAncHJvcHMnLCAnY29udGFpbmVyJywgb3B0aW9uc10pLFxuICAgICAgJyB8fCBmbjsnXG4gICAgXSk7XG4gIH0sXG5cbiAgLy8gW2ludm9rZUhlbHBlcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgaGVscGVyIGludm9jYXRpb25cbiAgLy9cbiAgLy8gUG9wcyBvZmYgdGhlIGhlbHBlcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGhlbHBlcixcbiAgLy8gYW5kIHB1c2hlcyB0aGUgaGVscGVyJ3MgcmV0dXJuIHZhbHVlIG9udG8gdGhlIHN0YWNrLlxuICAvL1xuICAvLyBJZiB0aGUgaGVscGVyIGlzIG5vdCBmb3VuZCwgYGhlbHBlck1pc3NpbmdgIGlzIGNhbGxlZC5cbiAgaW52b2tlSGVscGVyOiBmdW5jdGlvbihwYXJhbVNpemUsIG5hbWUsIGlzU2ltcGxlKSB7XG4gICAgbGV0IG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKSxcbiAgICAgICAgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpLFxuICAgICAgICBzaW1wbGUgPSBpc1NpbXBsZSA/IFtoZWxwZXIubmFtZSwgJyB8fCAnXSA6ICcnO1xuXG4gICAgbGV0IGxvb2t1cCA9IFsnKCddLmNvbmNhdChzaW1wbGUsIG5vbkhlbHBlcik7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICBsb29rdXAucHVzaCgnIHx8ICcsIHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmhlbHBlck1pc3NpbmcnKSk7XG4gICAgfVxuICAgIGxvb2t1cC5wdXNoKCcpJyk7XG5cbiAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGxvb2t1cCwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFtpbnZva2VLbm93bkhlbHBlcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgaGVscGVyIGludm9jYXRpb25cbiAgLy9cbiAgLy8gVGhpcyBvcGVyYXRpb24gaXMgdXNlZCB3aGVuIHRoZSBoZWxwZXIgaXMga25vd24gdG8gZXhpc3QsXG4gIC8vIHNvIGEgYGhlbHBlck1pc3NpbmdgIGZhbGxiYWNrIGlzIG5vdCByZXF1aXJlZC5cbiAgaW52b2tlS25vd25IZWxwZXI6IGZ1bmN0aW9uKHBhcmFtU2l6ZSwgbmFtZSkge1xuICAgIGxldCBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSk7XG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChoZWxwZXIubmFtZSwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFtpbnZva2VBbWJpZ3VvdXNdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGRpc2FtYmlndWF0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgd2hlbiBhbiBleHByZXNzaW9uIGxpa2UgYHt7Zm9vfX1gXG4gIC8vIGlzIHByb3ZpZGVkLCBidXQgd2UgZG9uJ3Qga25vdyBhdCBjb21waWxlLXRpbWUgd2hldGhlciBpdFxuICAvLyBpcyBhIGhlbHBlciBvciBhIHBhdGguXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGVtaXRzIG1vcmUgY29kZSB0aGFuIHRoZSBvdGhlciBvcHRpb25zLFxuICAvLyBhbmQgY2FuIGJlIGF2b2lkZWQgYnkgcGFzc2luZyB0aGUgYGtub3duSGVscGVyc2AgYW5kXG4gIC8vIGBrbm93bkhlbHBlcnNPbmx5YCBmbGFncyBhdCBjb21waWxlLXRpbWUuXG4gIGludm9rZUFtYmlndW91czogZnVuY3Rpb24obmFtZSwgaGVscGVyQ2FsbCkge1xuICAgIHRoaXMudXNlUmVnaXN0ZXIoJ2hlbHBlcicpO1xuXG4gICAgbGV0IG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKTtcblxuICAgIHRoaXMuZW1wdHlIYXNoKCk7XG4gICAgbGV0IGhlbHBlciA9IHRoaXMuc2V0dXBIZWxwZXIoMCwgbmFtZSwgaGVscGVyQ2FsbCk7XG5cbiAgICBsZXQgaGVscGVyTmFtZSA9IHRoaXMubGFzdEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKTtcblxuICAgIGxldCBsb29rdXAgPSBbJygnLCAnKGhlbHBlciA9ICcsIGhlbHBlck5hbWUsICcgfHwgJywgbm9uSGVscGVyLCAnKSddO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnN0cmljdCkge1xuICAgICAgbG9va3VwWzBdID0gJyhoZWxwZXIgPSAnO1xuICAgICAgbG9va3VwLnB1c2goXG4gICAgICAgICcgIT0gbnVsbCA/IGhlbHBlciA6ICcsXG4gICAgICAgIHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmhlbHBlck1pc3NpbmcnKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2goW1xuICAgICAgICAnKCcsIGxvb2t1cCxcbiAgICAgICAgKGhlbHBlci5wYXJhbXNJbml0ID8gWycpLCgnLCBoZWxwZXIucGFyYW1zSW5pdF0gOiBbXSksICcpLCcsXG4gICAgICAgICcodHlwZW9mIGhlbHBlciA9PT0gJywgdGhpcy5hbGlhc2FibGUoJ1wiZnVuY3Rpb25cIicpLCAnID8gJyxcbiAgICAgICAgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKCdoZWxwZXInLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSwgJyA6IGhlbHBlcikpJ1xuICAgIF0pO1xuICB9LFxuXG4gIC8vIFtpbnZva2VQYXJ0aWFsXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBjb250ZXh0LCAuLi5cbiAgLy8gT24gc3RhY2sgYWZ0ZXI6IHJlc3VsdCBvZiBwYXJ0aWFsIGludm9jYXRpb25cbiAgLy9cbiAgLy8gVGhpcyBvcGVyYXRpb24gcG9wcyBvZmYgYSBjb250ZXh0LCBpbnZva2VzIGEgcGFydGlhbCB3aXRoIHRoYXQgY29udGV4dCxcbiAgLy8gYW5kIHB1c2hlcyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZvY2F0aW9uIGJhY2suXG4gIGludm9rZVBhcnRpYWw6IGZ1bmN0aW9uKGlzRHluYW1pYywgbmFtZSwgaW5kZW50KSB7XG4gICAgbGV0IHBhcmFtcyA9IFtdLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhuYW1lLCAxLCBwYXJhbXMpO1xuXG4gICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgbmFtZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG4gICAgfVxuXG4gICAgaWYgKGluZGVudCkge1xuICAgICAgb3B0aW9ucy5pbmRlbnQgPSBKU09OLnN0cmluZ2lmeShpbmRlbnQpO1xuICAgIH1cbiAgICBvcHRpb25zLmhlbHBlcnMgPSAnaGVscGVycyc7XG4gICAgb3B0aW9ucy5wYXJ0aWFscyA9ICdwYXJ0aWFscyc7XG4gICAgb3B0aW9ucy5kZWNvcmF0b3JzID0gJ2NvbnRhaW5lci5kZWNvcmF0b3JzJztcblxuICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICBwYXJhbXMudW5zaGlmdCh0aGlzLm5hbWVMb29rdXAoJ3BhcnRpYWxzJywgbmFtZSwgJ3BhcnRpYWwnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcy51bnNoaWZ0KG5hbWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XG4gICAgICBvcHRpb25zLmRlcHRocyA9ICdkZXB0aHMnO1xuICAgIH1cbiAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbCgnY29udGFpbmVyLmludm9rZVBhcnRpYWwnLCAnJywgcGFyYW1zKSk7XG4gIH0sXG5cbiAgLy8gW2Fzc2lnblRvSGFzaF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLiwgaGFzaCwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uLCBoYXNoLCAuLi5cbiAgLy9cbiAgLy8gUG9wcyBhIHZhbHVlIG9mZiB0aGUgc3RhY2sgYW5kIGFzc2lnbnMgaXQgdG8gdGhlIGN1cnJlbnQgaGFzaFxuICBhc3NpZ25Ub0hhc2g6IGZ1bmN0aW9uKGtleSkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMucG9wU3RhY2soKSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgaWQ7XG5cbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgaWQgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdHlwZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuXG4gICAgbGV0IGhhc2ggPSB0aGlzLmhhc2g7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIGhhc2guY29udGV4dHNba2V5XSA9IGNvbnRleHQ7XG4gICAgfVxuICAgIGlmICh0eXBlKSB7XG4gICAgICBoYXNoLnR5cGVzW2tleV0gPSB0eXBlO1xuICAgIH1cbiAgICBpZiAoaWQpIHtcbiAgICAgIGhhc2guaWRzW2tleV0gPSBpZDtcbiAgICB9XG4gICAgaGFzaC52YWx1ZXNba2V5XSA9IHZhbHVlO1xuICB9LFxuXG4gIHB1c2hJZDogZnVuY3Rpb24odHlwZSwgbmFtZSwgY2hpbGQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ0Jsb2NrUGFyYW0nKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoXG4gICAgICAgICAgJ2Jsb2NrUGFyYW1zWycgKyBuYW1lWzBdICsgJ10ucGF0aFsnICsgbmFtZVsxXSArICddJ1xuICAgICAgICAgICsgKGNoaWxkID8gJyArICcgKyBKU09OLnN0cmluZ2lmeSgnLicgKyBjaGlsZCkgOiAnJykpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1BhdGhFeHByZXNzaW9uJykge1xuICAgICAgdGhpcy5wdXNoU3RyaW5nKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ3RydWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdudWxsJyk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEhFTFBFUlNcblxuICBjb21waWxlcjogSmF2YVNjcmlwdENvbXBpbGVyLFxuXG4gIGNvbXBpbGVDaGlsZHJlbjogZnVuY3Rpb24oZW52aXJvbm1lbnQsIG9wdGlvbnMpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBlbnZpcm9ubWVudC5jaGlsZHJlbiwgY2hpbGQsIGNvbXBpbGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBjb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCk7ICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXG4gICAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLm1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKTtcblxuICAgICAgaWYgKGV4aXN0aW5nID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LnByb2dyYW1zLnB1c2goJycpOyAgICAgLy8gUGxhY2Vob2xkZXIgdG8gcHJldmVudCBuYW1lIGNvbmZsaWN0cyBmb3IgbmVzdGVkIGNoaWxkcmVuXG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuY29udGV4dC5wcm9ncmFtcy5sZW5ndGg7XG4gICAgICAgIGNoaWxkLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGNoaWxkLm5hbWUgPSAncHJvZ3JhbScgKyBpbmRleDtcbiAgICAgICAgdGhpcy5jb250ZXh0LnByb2dyYW1zW2luZGV4XSA9IGNvbXBpbGVyLmNvbXBpbGUoY2hpbGQsIG9wdGlvbnMsIHRoaXMuY29udGV4dCwgIXRoaXMucHJlY29tcGlsZSk7XG4gICAgICAgIHRoaXMuY29udGV4dC5kZWNvcmF0b3JzW2luZGV4XSA9IGNvbXBpbGVyLmRlY29yYXRvcnM7XG4gICAgICAgIHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHNbaW5kZXhdID0gY2hpbGQ7XG5cbiAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBjb21waWxlci51c2VEZXB0aHM7XG4gICAgICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGNvbXBpbGVyLnVzZUJsb2NrUGFyYW1zO1xuICAgICAgICBjaGlsZC51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocztcbiAgICAgICAgY2hpbGQudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGQuaW5kZXggPSBleGlzdGluZy5pbmRleDtcbiAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGV4aXN0aW5nLmluZGV4O1xuXG4gICAgICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZXhpc3RpbmcudXNlRGVwdGhzO1xuICAgICAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcyB8fCBleGlzdGluZy51c2VCbG9ja1BhcmFtcztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1hdGNoRXhpc3RpbmdQcm9ncmFtOiBmdW5jdGlvbihjaGlsZCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBsZXQgZW52aXJvbm1lbnQgPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzW2ldO1xuICAgICAgaWYgKGVudmlyb25tZW50ICYmIGVudmlyb25tZW50LmVxdWFscyhjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIGVudmlyb25tZW50O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBwcm9ncmFtRXhwcmVzc2lvbjogZnVuY3Rpb24oZ3VpZCkge1xuICAgIGxldCBjaGlsZCA9IHRoaXMuZW52aXJvbm1lbnQuY2hpbGRyZW5bZ3VpZF0sXG4gICAgICAgIHByb2dyYW1QYXJhbXMgPSBbY2hpbGQuaW5kZXgsICdkYXRhJywgY2hpbGQuYmxvY2tQYXJhbXNdO1xuXG4gICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgdGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnYmxvY2tQYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwcm9ncmFtUGFyYW1zLnB1c2goJ2RlcHRocycpO1xuICAgIH1cblxuICAgIHJldHVybiAnY29udGFpbmVyLnByb2dyYW0oJyArIHByb2dyYW1QYXJhbXMuam9pbignLCAnKSArICcpJztcbiAgfSxcblxuICB1c2VSZWdpc3RlcjogZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICghdGhpcy5yZWdpc3RlcnNbbmFtZV0pIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVnaXN0ZXJzLmxpc3QucHVzaChuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgcHVzaDogZnVuY3Rpb24oZXhwcikge1xuICAgIGlmICghKGV4cHIgaW5zdGFuY2VvZiBMaXRlcmFsKSkge1xuICAgICAgZXhwciA9IHRoaXMuc291cmNlLndyYXAoZXhwcik7XG4gICAgfVxuXG4gICAgdGhpcy5pbmxpbmVTdGFjay5wdXNoKGV4cHIpO1xuICAgIHJldHVybiBleHByO1xuICB9LFxuXG4gIHB1c2hTdGFja0xpdGVyYWw6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLnB1c2gobmV3IExpdGVyYWwoaXRlbSkpO1xuICB9LFxuXG4gIHB1c2hTb3VyY2U6IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgIGlmICh0aGlzLnBlbmRpbmdDb250ZW50KSB7XG4gICAgICB0aGlzLnNvdXJjZS5wdXNoKFxuICAgICAgICAgIHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5zb3VyY2UucXVvdGVkU3RyaW5nKHRoaXMucGVuZGluZ0NvbnRlbnQpLCB0aGlzLnBlbmRpbmdMb2NhdGlvbikpO1xuICAgICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlKSB7XG4gICAgICB0aGlzLnNvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICB9LFxuXG4gIHJlcGxhY2VTdGFjazogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBsZXQgcHJlZml4ID0gWycoJ10sXG4gICAgICAgIHN0YWNrLFxuICAgICAgICBjcmVhdGVkU3RhY2ssXG4gICAgICAgIHVzZWRMaXRlcmFsO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoIXRoaXMuaXNJbmxpbmUoKSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigncmVwbGFjZVN0YWNrIG9uIG5vbi1pbmxpbmUnKTtcbiAgICB9XG5cbiAgICAvLyBXZSB3YW50IHRvIG1lcmdlIHRoZSBpbmxpbmUgc3RhdGVtZW50IGludG8gdGhlIHJlcGxhY2VtZW50IHN0YXRlbWVudCB2aWEgJywnXG4gICAgbGV0IHRvcCA9IHRoaXMucG9wU3RhY2sodHJ1ZSk7XG5cbiAgICBpZiAodG9wIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgLy8gTGl0ZXJhbHMgZG8gbm90IG5lZWQgdG8gYmUgaW5saW5lZFxuICAgICAgc3RhY2sgPSBbdG9wLnZhbHVlXTtcbiAgICAgIHByZWZpeCA9IFsnKCcsIHN0YWNrXTtcbiAgICAgIHVzZWRMaXRlcmFsID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgY3VycmVudCBzdGFjayBuYW1lIGZvciB1c2UgYnkgdGhlIGlubGluZVxuICAgICAgY3JlYXRlZFN0YWNrID0gdHJ1ZTtcbiAgICAgIGxldCBuYW1lID0gdGhpcy5pbmNyU3RhY2soKTtcblxuICAgICAgcHJlZml4ID0gWycoKCcsIHRoaXMucHVzaChuYW1lKSwgJyA9ICcsIHRvcCwgJyknXTtcbiAgICAgIHN0YWNrID0gdGhpcy50b3BTdGFjaygpO1xuICAgIH1cblxuICAgIGxldCBpdGVtID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdGFjayk7XG5cbiAgICBpZiAoIXVzZWRMaXRlcmFsKSB7XG4gICAgICB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuICAgIGlmIChjcmVhdGVkU3RhY2spIHtcbiAgICAgIHRoaXMuc3RhY2tTbG90LS07XG4gICAgfVxuICAgIHRoaXMucHVzaChwcmVmaXguY29uY2F0KGl0ZW0sICcpJykpO1xuICB9LFxuXG4gIGluY3JTdGFjazogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdGFja1Nsb3QrKztcbiAgICBpZiAodGhpcy5zdGFja1Nsb3QgPiB0aGlzLnN0YWNrVmFycy5sZW5ndGgpIHsgdGhpcy5zdGFja1ZhcnMucHVzaCgnc3RhY2snICsgdGhpcy5zdGFja1Nsb3QpOyB9XG4gICAgcmV0dXJuIHRoaXMudG9wU3RhY2tOYW1lKCk7XG4gIH0sXG4gIHRvcFN0YWNrTmFtZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdzdGFjaycgKyB0aGlzLnN0YWNrU2xvdDtcbiAgfSxcbiAgZmx1c2hJbmxpbmU6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBpbmxpbmVTdGFjayA9IHRoaXMuaW5saW5lU3RhY2s7XG4gICAgdGhpcy5pbmxpbmVTdGFjayA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbmxpbmVTdGFjay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGV0IGVudHJ5ID0gaW5saW5lU3RhY2tbaV07XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChlbnRyeSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChlbnRyeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgc3RhY2sgPSB0aGlzLmluY3JTdGFjaygpO1xuICAgICAgICB0aGlzLnB1c2hTb3VyY2UoW3N0YWNrLCAnID0gJywgZW50cnksICc7J10pO1xuICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKHN0YWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGlzSW5saW5lOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbmxpbmVTdGFjay5sZW5ndGg7XG4gIH0sXG5cbiAgcG9wU3RhY2s6IGZ1bmN0aW9uKHdyYXBwZWQpIHtcbiAgICBsZXQgaW5saW5lID0gdGhpcy5pc0lubGluZSgpLFxuICAgICAgICBpdGVtID0gKGlubGluZSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjaykucG9wKCk7XG5cbiAgICBpZiAoIXdyYXBwZWQgJiYgKGl0ZW0gaW5zdGFuY2VvZiBMaXRlcmFsKSkge1xuICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghaW5saW5lKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGlmICghdGhpcy5zdGFja1Nsb3QpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdJbnZhbGlkIHN0YWNrIHBvcCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhY2tTbG90LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH0sXG5cbiAgdG9wU3RhY2s6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBzdGFjayA9ICh0aGlzLmlzSW5saW5lKCkgPyB0aGlzLmlubGluZVN0YWNrIDogdGhpcy5jb21waWxlU3RhY2spLFxuICAgICAgICBpdGVtID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH0sXG5cbiAgY29udGV4dE5hbWU6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICBpZiAodGhpcy51c2VEZXB0aHMgJiYgY29udGV4dCkge1xuICAgICAgcmV0dXJuICdkZXB0aHNbJyArIGNvbnRleHQgKyAnXSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnZGVwdGgnICsgY29udGV4dDtcbiAgICB9XG4gIH0sXG5cbiAgcXVvdGVkU3RyaW5nOiBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2UucXVvdGVkU3RyaW5nKHN0cik7XG4gIH0sXG5cbiAgb2JqZWN0TGl0ZXJhbDogZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLm9iamVjdExpdGVyYWwob2JqKTtcbiAgfSxcblxuICBhbGlhc2FibGU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBsZXQgcmV0ID0gdGhpcy5hbGlhc2VzW25hbWVdO1xuICAgIGlmIChyZXQpIHtcbiAgICAgIHJldC5yZWZlcmVuY2VDb3VudCsrO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICByZXQgPSB0aGlzLmFsaWFzZXNbbmFtZV0gPSB0aGlzLnNvdXJjZS53cmFwKG5hbWUpO1xuICAgIHJldC5hbGlhc2FibGUgPSB0cnVlO1xuICAgIHJldC5yZWZlcmVuY2VDb3VudCA9IDE7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIHNldHVwSGVscGVyOiBmdW5jdGlvbihwYXJhbVNpemUsIG5hbWUsIGJsb2NrSGVscGVyKSB7XG4gICAgbGV0IHBhcmFtcyA9IFtdLFxuICAgICAgICBwYXJhbXNJbml0ID0gdGhpcy5zZXR1cEhlbHBlckFyZ3MobmFtZSwgcGFyYW1TaXplLCBwYXJhbXMsIGJsb2NrSGVscGVyKTtcbiAgICBsZXQgZm91bmRIZWxwZXIgPSB0aGlzLm5hbWVMb29rdXAoJ2hlbHBlcnMnLCBuYW1lLCAnaGVscGVyJyksXG4gICAgICAgIGNhbGxDb250ZXh0ID0gdGhpcy5hbGlhc2FibGUoYCR7dGhpcy5jb250ZXh0TmFtZSgwKX0gIT0gbnVsbCA/ICR7dGhpcy5jb250ZXh0TmFtZSgwKX0gOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KWApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgcGFyYW1zSW5pdDogcGFyYW1zSW5pdCxcbiAgICAgIG5hbWU6IGZvdW5kSGVscGVyLFxuICAgICAgY2FsbFBhcmFtczogW2NhbGxDb250ZXh0XS5jb25jYXQocGFyYW1zKVxuICAgIH07XG4gIH0sXG5cbiAgc2V0dXBQYXJhbXM6IGZ1bmN0aW9uKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IHt9LFxuICAgICAgICBjb250ZXh0cyA9IFtdLFxuICAgICAgICB0eXBlcyA9IFtdLFxuICAgICAgICBpZHMgPSBbXSxcbiAgICAgICAgb2JqZWN0QXJncyA9ICFwYXJhbXMsXG4gICAgICAgIHBhcmFtO1xuXG4gICAgaWYgKG9iamVjdEFyZ3MpIHtcbiAgICAgIHBhcmFtcyA9IFtdO1xuICAgIH1cblxuICAgIG9wdGlvbnMubmFtZSA9IHRoaXMucXVvdGVkU3RyaW5nKGhlbHBlcik7XG4gICAgb3B0aW9ucy5oYXNoID0gdGhpcy5wb3BTdGFjaygpO1xuXG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIG9wdGlvbnMuaGFzaElkcyA9IHRoaXMucG9wU3RhY2soKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICBvcHRpb25zLmhhc2hUeXBlcyA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIG9wdGlvbnMuaGFzaENvbnRleHRzID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cblxuICAgIGxldCBpbnZlcnNlID0gdGhpcy5wb3BTdGFjaygpLFxuICAgICAgICBwcm9ncmFtID0gdGhpcy5wb3BTdGFjaygpO1xuXG4gICAgLy8gQXZvaWQgc2V0dGluZyBmbiBhbmQgaW52ZXJzZSBpZiBuZWl0aGVyIGFyZSBzZXQuIFRoaXMgYWxsb3dzXG4gICAgLy8gaGVscGVycyB0byBkbyBhIGNoZWNrIGZvciBgaWYgKG9wdGlvbnMuZm4pYFxuICAgIGlmIChwcm9ncmFtIHx8IGludmVyc2UpIHtcbiAgICAgIG9wdGlvbnMuZm4gPSBwcm9ncmFtIHx8ICdjb250YWluZXIubm9vcCc7XG4gICAgICBvcHRpb25zLmludmVyc2UgPSBpbnZlcnNlIHx8ICdjb250YWluZXIubm9vcCc7XG4gICAgfVxuXG4gICAgLy8gVGhlIHBhcmFtZXRlcnMgZ28gb24gdG8gdGhlIHN0YWNrIGluIG9yZGVyIChtYWtpbmcgc3VyZSB0aGF0IHRoZXkgYXJlIGV2YWx1YXRlZCBpbiBvcmRlcilcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHBvcCB0aGVtIG9mZiB0aGUgc3RhY2sgaW4gcmV2ZXJzZSBvcmRlclxuICAgIGxldCBpID0gcGFyYW1TaXplO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHBhcmFtID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgcGFyYW1zW2ldID0gcGFyYW07XG5cbiAgICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICAgIGlkc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgICB0eXBlc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgICAgY29udGV4dHNbaV0gPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9iamVjdEFyZ3MpIHtcbiAgICAgIG9wdGlvbnMuYXJncyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkocGFyYW1zKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgb3B0aW9ucy5pZHMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KGlkcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgb3B0aW9ucy50eXBlcyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkodHlwZXMpO1xuICAgICAgb3B0aW9ucy5jb250ZXh0cyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoY29udGV4dHMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGF0YSkge1xuICAgICAgb3B0aW9ucy5kYXRhID0gJ2RhdGEnO1xuICAgIH1cbiAgICBpZiAodGhpcy51c2VCbG9ja1BhcmFtcykge1xuICAgICAgb3B0aW9ucy5ibG9ja1BhcmFtcyA9ICdibG9ja1BhcmFtcyc7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9LFxuXG4gIHNldHVwSGVscGVyQXJnczogZnVuY3Rpb24oaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcywgdXNlUmVnaXN0ZXIpIHtcbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMuc2V0dXBQYXJhbXMoaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcyk7XG4gICAgb3B0aW9ucyA9IHRoaXMub2JqZWN0TGl0ZXJhbChvcHRpb25zKTtcbiAgICBpZiAodXNlUmVnaXN0ZXIpIHtcbiAgICAgIHRoaXMudXNlUmVnaXN0ZXIoJ29wdGlvbnMnKTtcbiAgICAgIHBhcmFtcy5wdXNoKCdvcHRpb25zJyk7XG4gICAgICByZXR1cm4gWydvcHRpb25zPScsIG9wdGlvbnNdO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zKSB7XG4gICAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuICB9XG59O1xuXG5cbihmdW5jdGlvbigpIHtcbiAgY29uc3QgcmVzZXJ2ZWRXb3JkcyA9IChcbiAgICAnYnJlYWsgZWxzZSBuZXcgdmFyJyArXG4gICAgJyBjYXNlIGZpbmFsbHkgcmV0dXJuIHZvaWQnICtcbiAgICAnIGNhdGNoIGZvciBzd2l0Y2ggd2hpbGUnICtcbiAgICAnIGNvbnRpbnVlIGZ1bmN0aW9uIHRoaXMgd2l0aCcgK1xuICAgICcgZGVmYXVsdCBpZiB0aHJvdycgK1xuICAgICcgZGVsZXRlIGluIHRyeScgK1xuICAgICcgZG8gaW5zdGFuY2VvZiB0eXBlb2YnICtcbiAgICAnIGFic3RyYWN0IGVudW0gaW50IHNob3J0JyArXG4gICAgJyBib29sZWFuIGV4cG9ydCBpbnRlcmZhY2Ugc3RhdGljJyArXG4gICAgJyBieXRlIGV4dGVuZHMgbG9uZyBzdXBlcicgK1xuICAgICcgY2hhciBmaW5hbCBuYXRpdmUgc3luY2hyb25pemVkJyArXG4gICAgJyBjbGFzcyBmbG9hdCBwYWNrYWdlIHRocm93cycgK1xuICAgICcgY29uc3QgZ290byBwcml2YXRlIHRyYW5zaWVudCcgK1xuICAgICcgZGVidWdnZXIgaW1wbGVtZW50cyBwcm90ZWN0ZWQgdm9sYXRpbGUnICtcbiAgICAnIGRvdWJsZSBpbXBvcnQgcHVibGljIGxldCB5aWVsZCBhd2FpdCcgK1xuICAgICcgbnVsbCB0cnVlIGZhbHNlJ1xuICApLnNwbGl0KCcgJyk7XG5cbiAgY29uc3QgY29tcGlsZXJXb3JkcyA9IEphdmFTY3JpcHRDb21waWxlci5SRVNFUlZFRF9XT1JEUyA9IHt9O1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcmVzZXJ2ZWRXb3Jkcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb21waWxlcldvcmRzW3Jlc2VydmVkV29yZHNbaV1dID0gdHJ1ZTtcbiAgfVxufSgpKTtcblxuSmF2YVNjcmlwdENvbXBpbGVyLmlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gIUphdmFTY3JpcHRDb21waWxlci5SRVNFUlZFRF9XT1JEU1tuYW1lXSAmJiAoL15bYS16QS1aXyRdWzAtOWEtekEtWl8kXSokLykudGVzdChuYW1lKTtcbn07XG5cbmZ1bmN0aW9uIHN0cmljdExvb2t1cChyZXF1aXJlVGVybWluYWwsIGNvbXBpbGVyLCBwYXJ0cywgdHlwZSkge1xuICBsZXQgc3RhY2sgPSBjb21waWxlci5wb3BTdGFjaygpLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBwYXJ0cy5sZW5ndGg7XG4gIGlmIChyZXF1aXJlVGVybWluYWwpIHtcbiAgICBsZW4tLTtcbiAgfVxuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzdGFjayA9IGNvbXBpbGVyLm5hbWVMb29rdXAoc3RhY2ssIHBhcnRzW2ldLCB0eXBlKTtcbiAgfVxuXG4gIGlmIChyZXF1aXJlVGVybWluYWwpIHtcbiAgICByZXR1cm4gW2NvbXBpbGVyLmFsaWFzYWJsZSgnY29udGFpbmVyLnN0cmljdCcpLCAnKCcsIHN0YWNrLCAnLCAnLCBjb21waWxlci5xdW90ZWRTdHJpbmcocGFydHNbaV0pLCAnKSddO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGFjaztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBKYXZhU2NyaXB0Q29tcGlsZXI7XG4iLCIvLyBGaWxlIGlnbm9yZWQgaW4gY292ZXJhZ2UgdGVzdHMgdmlhIHNldHRpbmcgaW4gLmlzdGFuYnVsLnltbFxuLyogSmlzb24gZ2VuZXJhdGVkIHBhcnNlciAqL1xudmFyIGhhbmRsZWJhcnMgPSAoZnVuY3Rpb24oKXtcbnZhciBwYXJzZXIgPSB7dHJhY2U6IGZ1bmN0aW9uIHRyYWNlKCkgeyB9LFxueXk6IHt9LFxuc3ltYm9sc186IHtcImVycm9yXCI6MixcInJvb3RcIjozLFwicHJvZ3JhbVwiOjQsXCJFT0ZcIjo1LFwicHJvZ3JhbV9yZXBldGl0aW9uMFwiOjYsXCJzdGF0ZW1lbnRcIjo3LFwibXVzdGFjaGVcIjo4LFwiYmxvY2tcIjo5LFwicmF3QmxvY2tcIjoxMCxcInBhcnRpYWxcIjoxMSxcInBhcnRpYWxCbG9ja1wiOjEyLFwiY29udGVudFwiOjEzLFwiQ09NTUVOVFwiOjE0LFwiQ09OVEVOVFwiOjE1LFwib3BlblJhd0Jsb2NrXCI6MTYsXCJyYXdCbG9ja19yZXBldGl0aW9uX3BsdXMwXCI6MTcsXCJFTkRfUkFXX0JMT0NLXCI6MTgsXCJPUEVOX1JBV19CTE9DS1wiOjE5LFwiaGVscGVyTmFtZVwiOjIwLFwib3BlblJhd0Jsb2NrX3JlcGV0aXRpb24wXCI6MjEsXCJvcGVuUmF3QmxvY2tfb3B0aW9uMFwiOjIyLFwiQ0xPU0VfUkFXX0JMT0NLXCI6MjMsXCJvcGVuQmxvY2tcIjoyNCxcImJsb2NrX29wdGlvbjBcIjoyNSxcImNsb3NlQmxvY2tcIjoyNixcIm9wZW5JbnZlcnNlXCI6MjcsXCJibG9ja19vcHRpb24xXCI6MjgsXCJPUEVOX0JMT0NLXCI6MjksXCJvcGVuQmxvY2tfcmVwZXRpdGlvbjBcIjozMCxcIm9wZW5CbG9ja19vcHRpb24wXCI6MzEsXCJvcGVuQmxvY2tfb3B0aW9uMVwiOjMyLFwiQ0xPU0VcIjozMyxcIk9QRU5fSU5WRVJTRVwiOjM0LFwib3BlbkludmVyc2VfcmVwZXRpdGlvbjBcIjozNSxcIm9wZW5JbnZlcnNlX29wdGlvbjBcIjozNixcIm9wZW5JbnZlcnNlX29wdGlvbjFcIjozNyxcIm9wZW5JbnZlcnNlQ2hhaW5cIjozOCxcIk9QRU5fSU5WRVJTRV9DSEFJTlwiOjM5LFwib3BlbkludmVyc2VDaGFpbl9yZXBldGl0aW9uMFwiOjQwLFwib3BlbkludmVyc2VDaGFpbl9vcHRpb24wXCI6NDEsXCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjFcIjo0MixcImludmVyc2VBbmRQcm9ncmFtXCI6NDMsXCJJTlZFUlNFXCI6NDQsXCJpbnZlcnNlQ2hhaW5cIjo0NSxcImludmVyc2VDaGFpbl9vcHRpb24wXCI6NDYsXCJPUEVOX0VOREJMT0NLXCI6NDcsXCJPUEVOXCI6NDgsXCJtdXN0YWNoZV9yZXBldGl0aW9uMFwiOjQ5LFwibXVzdGFjaGVfb3B0aW9uMFwiOjUwLFwiT1BFTl9VTkVTQ0FQRURcIjo1MSxcIm11c3RhY2hlX3JlcGV0aXRpb24xXCI6NTIsXCJtdXN0YWNoZV9vcHRpb24xXCI6NTMsXCJDTE9TRV9VTkVTQ0FQRURcIjo1NCxcIk9QRU5fUEFSVElBTFwiOjU1LFwicGFydGlhbE5hbWVcIjo1NixcInBhcnRpYWxfcmVwZXRpdGlvbjBcIjo1NyxcInBhcnRpYWxfb3B0aW9uMFwiOjU4LFwib3BlblBhcnRpYWxCbG9ja1wiOjU5LFwiT1BFTl9QQVJUSUFMX0JMT0NLXCI6NjAsXCJvcGVuUGFydGlhbEJsb2NrX3JlcGV0aXRpb24wXCI6NjEsXCJvcGVuUGFydGlhbEJsb2NrX29wdGlvbjBcIjo2MixcInBhcmFtXCI6NjMsXCJzZXhwclwiOjY0LFwiT1BFTl9TRVhQUlwiOjY1LFwic2V4cHJfcmVwZXRpdGlvbjBcIjo2NixcInNleHByX29wdGlvbjBcIjo2NyxcIkNMT1NFX1NFWFBSXCI6NjgsXCJoYXNoXCI6NjksXCJoYXNoX3JlcGV0aXRpb25fcGx1czBcIjo3MCxcImhhc2hTZWdtZW50XCI6NzEsXCJJRFwiOjcyLFwiRVFVQUxTXCI6NzMsXCJibG9ja1BhcmFtc1wiOjc0LFwiT1BFTl9CTE9DS19QQVJBTVNcIjo3NSxcImJsb2NrUGFyYW1zX3JlcGV0aXRpb25fcGx1czBcIjo3NixcIkNMT1NFX0JMT0NLX1BBUkFNU1wiOjc3LFwicGF0aFwiOjc4LFwiZGF0YU5hbWVcIjo3OSxcIlNUUklOR1wiOjgwLFwiTlVNQkVSXCI6ODEsXCJCT09MRUFOXCI6ODIsXCJVTkRFRklORURcIjo4MyxcIk5VTExcIjo4NCxcIkRBVEFcIjo4NSxcInBhdGhTZWdtZW50c1wiOjg2LFwiU0VQXCI6ODcsXCIkYWNjZXB0XCI6MCxcIiRlbmRcIjoxfSxcbnRlcm1pbmFsc186IHsyOlwiZXJyb3JcIiw1OlwiRU9GXCIsMTQ6XCJDT01NRU5UXCIsMTU6XCJDT05URU5UXCIsMTg6XCJFTkRfUkFXX0JMT0NLXCIsMTk6XCJPUEVOX1JBV19CTE9DS1wiLDIzOlwiQ0xPU0VfUkFXX0JMT0NLXCIsMjk6XCJPUEVOX0JMT0NLXCIsMzM6XCJDTE9TRVwiLDM0OlwiT1BFTl9JTlZFUlNFXCIsMzk6XCJPUEVOX0lOVkVSU0VfQ0hBSU5cIiw0NDpcIklOVkVSU0VcIiw0NzpcIk9QRU5fRU5EQkxPQ0tcIiw0ODpcIk9QRU5cIiw1MTpcIk9QRU5fVU5FU0NBUEVEXCIsNTQ6XCJDTE9TRV9VTkVTQ0FQRURcIiw1NTpcIk9QRU5fUEFSVElBTFwiLDYwOlwiT1BFTl9QQVJUSUFMX0JMT0NLXCIsNjU6XCJPUEVOX1NFWFBSXCIsNjg6XCJDTE9TRV9TRVhQUlwiLDcyOlwiSURcIiw3MzpcIkVRVUFMU1wiLDc1OlwiT1BFTl9CTE9DS19QQVJBTVNcIiw3NzpcIkNMT1NFX0JMT0NLX1BBUkFNU1wiLDgwOlwiU1RSSU5HXCIsODE6XCJOVU1CRVJcIiw4MjpcIkJPT0xFQU5cIiw4MzpcIlVOREVGSU5FRFwiLDg0OlwiTlVMTFwiLDg1OlwiREFUQVwiLDg3OlwiU0VQXCJ9LFxucHJvZHVjdGlvbnNfOiBbMCxbMywyXSxbNCwxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbMTMsMV0sWzEwLDNdLFsxNiw1XSxbOSw0XSxbOSw0XSxbMjQsNl0sWzI3LDZdLFszOCw2XSxbNDMsMl0sWzQ1LDNdLFs0NSwxXSxbMjYsM10sWzgsNV0sWzgsNV0sWzExLDVdLFsxMiwzXSxbNTksNV0sWzYzLDFdLFs2MywxXSxbNjQsNV0sWzY5LDFdLFs3MSwzXSxbNzQsM10sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFs1NiwxXSxbNTYsMV0sWzc5LDJdLFs3OCwxXSxbODYsM10sWzg2LDFdLFs2LDBdLFs2LDJdLFsxNywxXSxbMTcsMl0sWzIxLDBdLFsyMSwyXSxbMjIsMF0sWzIyLDFdLFsyNSwwXSxbMjUsMV0sWzI4LDBdLFsyOCwxXSxbMzAsMF0sWzMwLDJdLFszMSwwXSxbMzEsMV0sWzMyLDBdLFszMiwxXSxbMzUsMF0sWzM1LDJdLFszNiwwXSxbMzYsMV0sWzM3LDBdLFszNywxXSxbNDAsMF0sWzQwLDJdLFs0MSwwXSxbNDEsMV0sWzQyLDBdLFs0MiwxXSxbNDYsMF0sWzQ2LDFdLFs0OSwwXSxbNDksMl0sWzUwLDBdLFs1MCwxXSxbNTIsMF0sWzUyLDJdLFs1MywwXSxbNTMsMV0sWzU3LDBdLFs1NywyXSxbNTgsMF0sWzU4LDFdLFs2MSwwXSxbNjEsMl0sWzYyLDBdLFs2MiwxXSxbNjYsMF0sWzY2LDJdLFs2NywwXSxbNjcsMV0sWzcwLDFdLFs3MCwyXSxbNzYsMV0sWzc2LDJdXSxcbnBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQseXlsZW5nLHl5bGluZW5vLHl5LHl5c3RhdGUsJCQsXyRcbi8qKi8pIHtcblxudmFyICQwID0gJCQubGVuZ3RoIC0gMTtcbnN3aXRjaCAoeXlzdGF0ZSkge1xuY2FzZSAxOiByZXR1cm4gJCRbJDAtMV07IFxuYnJlYWs7XG5jYXNlIDI6dGhpcy4kID0geXkucHJlcGFyZVByb2dyYW0oJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSAzOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA0OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA1OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA2OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA3OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA4OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA5OlxuICAgIHRoaXMuJCA9IHtcbiAgICAgIHR5cGU6ICdDb21tZW50U3RhdGVtZW50JyxcbiAgICAgIHZhbHVlOiB5eS5zdHJpcENvbW1lbnQoJCRbJDBdKSxcbiAgICAgIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwXSwgJCRbJDBdKSxcbiAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuICAgIH07XG4gIFxuYnJlYWs7XG5jYXNlIDEwOlxuICAgIHRoaXMuJCA9IHtcbiAgICAgIHR5cGU6ICdDb250ZW50U3RhdGVtZW50JyxcbiAgICAgIG9yaWdpbmFsOiAkJFskMF0sXG4gICAgICB2YWx1ZTogJCRbJDBdLFxuICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG4gICAgfTtcbiAgXG5icmVhaztcbmNhc2UgMTE6dGhpcy4kID0geXkucHJlcGFyZVJhd0Jsb2NrKCQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAxMjp0aGlzLiQgPSB7IHBhdGg6ICQkWyQwLTNdLCBwYXJhbXM6ICQkWyQwLTJdLCBoYXNoOiAkJFskMC0xXSB9O1xuYnJlYWs7XG5jYXNlIDEzOnRoaXMuJCA9IHl5LnByZXBhcmVCbG9jaygkJFskMC0zXSwgJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sIGZhbHNlLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAxNDp0aGlzLiQgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAtM10sICQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCB0cnVlLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAxNTp0aGlzLiQgPSB7IG9wZW46ICQkWyQwLTVdLCBwYXRoOiAkJFskMC00XSwgcGFyYW1zOiAkJFskMC0zXSwgaGFzaDogJCRbJDAtMl0sIGJsb2NrUGFyYW1zOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNV0sICQkWyQwXSkgfTtcbmJyZWFrO1xuY2FzZSAxNjp0aGlzLiQgPSB7IHBhdGg6ICQkWyQwLTRdLCBwYXJhbXM6ICQkWyQwLTNdLCBoYXNoOiAkJFskMC0yXSwgYmxvY2tQYXJhbXM6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC01XSwgJCRbJDBdKSB9O1xuYnJlYWs7XG5jYXNlIDE3OnRoaXMuJCA9IHsgcGF0aDogJCRbJDAtNF0sIHBhcmFtczogJCRbJDAtM10sIGhhc2g6ICQkWyQwLTJdLCBibG9ja1BhcmFtczogJCRbJDAtMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTVdLCAkJFskMF0pIH07XG5icmVhaztcbmNhc2UgMTg6dGhpcy4kID0geyBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC0xXSwgJCRbJDAtMV0pLCBwcm9ncmFtOiAkJFskMF0gfTtcbmJyZWFrO1xuY2FzZSAxOTpcbiAgICB2YXIgaW52ZXJzZSA9IHl5LnByZXBhcmVCbG9jaygkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgJCRbJDBdLCBmYWxzZSwgdGhpcy5fJCksXG4gICAgICAgIHByb2dyYW0gPSB5eS5wcmVwYXJlUHJvZ3JhbShbaW52ZXJzZV0sICQkWyQwLTFdLmxvYyk7XG4gICAgcHJvZ3JhbS5jaGFpbmVkID0gdHJ1ZTtcblxuICAgIHRoaXMuJCA9IHsgc3RyaXA6ICQkWyQwLTJdLnN0cmlwLCBwcm9ncmFtOiBwcm9ncmFtLCBjaGFpbjogdHJ1ZSB9O1xuICBcbmJyZWFrO1xuY2FzZSAyMDp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMjE6dGhpcy4kID0ge3BhdGg6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC0yXSwgJCRbJDBdKX07XG5icmVhaztcbmNhc2UgMjI6dGhpcy4kID0geXkucHJlcGFyZU11c3RhY2hlKCQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwLTRdLCB5eS5zdHJpcEZsYWdzKCQkWyQwLTRdLCAkJFskMF0pLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAyMzp0aGlzLiQgPSB5eS5wcmVwYXJlTXVzdGFjaGUoJCRbJDAtM10sICQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDAtNF0sIHl5LnN0cmlwRmxhZ3MoJCRbJDAtNF0sICQkWyQwXSksIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDI0OlxuICAgIHRoaXMuJCA9IHtcbiAgICAgIHR5cGU6ICdQYXJ0aWFsU3RhdGVtZW50JyxcbiAgICAgIG5hbWU6ICQkWyQwLTNdLFxuICAgICAgcGFyYW1zOiAkJFskMC0yXSxcbiAgICAgIGhhc2g6ICQkWyQwLTFdLFxuICAgICAgaW5kZW50OiAnJyxcbiAgICAgIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTRdLCAkJFskMF0pLFxuICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG4gICAgfTtcbiAgXG5icmVhaztcbmNhc2UgMjU6dGhpcy4kID0geXkucHJlcGFyZVBhcnRpYWxCbG9jaygkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMjY6dGhpcy4kID0geyBwYXRoOiAkJFskMC0zXSwgcGFyYW1zOiAkJFskMC0yXSwgaGFzaDogJCRbJDAtMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTRdLCAkJFskMF0pIH07XG5icmVhaztcbmNhc2UgMjc6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDI4OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAyOTpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnU3ViRXhwcmVzc2lvbicsXG4gICAgICBwYXRoOiAkJFskMC0zXSxcbiAgICAgIHBhcmFtczogJCRbJDAtMl0sXG4gICAgICBoYXNoOiAkJFskMC0xXSxcbiAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuICAgIH07XG4gIFxuYnJlYWs7XG5jYXNlIDMwOnRoaXMuJCA9IHt0eXBlOiAnSGFzaCcsIHBhaXJzOiAkJFskMF0sIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgMzE6dGhpcy4kID0ge3R5cGU6ICdIYXNoUGFpcicsIGtleTogeXkuaWQoJCRbJDAtMl0pLCB2YWx1ZTogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDMyOnRoaXMuJCA9IHl5LmlkKCQkWyQwLTFdKTtcbmJyZWFrO1xuY2FzZSAzMzp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMzQ6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDM1OnRoaXMuJCA9IHt0eXBlOiAnU3RyaW5nTGl0ZXJhbCcsIHZhbHVlOiAkJFskMF0sIG9yaWdpbmFsOiAkJFskMF0sIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgMzY6dGhpcy4kID0ge3R5cGU6ICdOdW1iZXJMaXRlcmFsJywgdmFsdWU6IE51bWJlcigkJFskMF0pLCBvcmlnaW5hbDogTnVtYmVyKCQkWyQwXSksIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgMzc6dGhpcy4kID0ge3R5cGU6ICdCb29sZWFuTGl0ZXJhbCcsIHZhbHVlOiAkJFskMF0gPT09ICd0cnVlJywgb3JpZ2luYWw6ICQkWyQwXSA9PT0gJ3RydWUnLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM4OnRoaXMuJCA9IHt0eXBlOiAnVW5kZWZpbmVkTGl0ZXJhbCcsIG9yaWdpbmFsOiB1bmRlZmluZWQsIHZhbHVlOiB1bmRlZmluZWQsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgMzk6dGhpcy4kID0ge3R5cGU6ICdOdWxsTGl0ZXJhbCcsIG9yaWdpbmFsOiBudWxsLCB2YWx1ZTogbnVsbCwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSA0MDp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNDE6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDQyOnRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKHRydWUsICQkWyQwXSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgNDM6dGhpcy4kID0geXkucHJlcGFyZVBhdGgoZmFsc2UsICQkWyQwXSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgNDQ6ICQkWyQwLTJdLnB1c2goe3BhcnQ6IHl5LmlkKCQkWyQwXSksIG9yaWdpbmFsOiAkJFskMF0sIHNlcGFyYXRvcjogJCRbJDAtMV19KTsgdGhpcy4kID0gJCRbJDAtMl07IFxuYnJlYWs7XG5jYXNlIDQ1OnRoaXMuJCA9IFt7cGFydDogeXkuaWQoJCRbJDBdKSwgb3JpZ2luYWw6ICQkWyQwXX1dO1xuYnJlYWs7XG5jYXNlIDQ2OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDQ3OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA0ODp0aGlzLiQgPSBbJCRbJDBdXTtcbmJyZWFrO1xuY2FzZSA0OTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNTA6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNTE6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDU4OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDU5OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA2NDp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA2NTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNzA6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNzE6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDc4OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDc5OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA4Mjp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA4MzokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgODY6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgODc6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDkwOnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDkxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA5NDp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA5NTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgOTg6dGhpcy4kID0gWyQkWyQwXV07XG5icmVhaztcbmNhc2UgOTk6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDEwMDp0aGlzLiQgPSBbJCRbJDBdXTtcbmJyZWFrO1xuY2FzZSAxMDE6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG59XG59LFxudGFibGU6IFt7MzoxLDQ6Miw1OlsyLDQ2XSw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHsxOlszXX0sezU6WzEsNF19LHs1OlsyLDJdLDc6NSw4OjYsOTo3LDEwOjgsMTE6OSwxMjoxMCwxMzoxMSwxNDpbMSwxMl0sMTU6WzEsMjBdLDE2OjE3LDE5OlsxLDIzXSwyNDoxNSwyNzoxNiwyOTpbMSwyMV0sMzQ6WzEsMjJdLDM5OlsyLDJdLDQ0OlsyLDJdLDQ3OlsyLDJdLDQ4OlsxLDEzXSw1MTpbMSwxNF0sNTU6WzEsMThdLDU5OjE5LDYwOlsxLDI0XX0sezE6WzIsMV19LHs1OlsyLDQ3XSwxNDpbMiw0N10sMTU6WzIsNDddLDE5OlsyLDQ3XSwyOTpbMiw0N10sMzQ6WzIsNDddLDM5OlsyLDQ3XSw0NDpbMiw0N10sNDc6WzIsNDddLDQ4OlsyLDQ3XSw1MTpbMiw0N10sNTU6WzIsNDddLDYwOlsyLDQ3XX0sezU6WzIsM10sMTQ6WzIsM10sMTU6WzIsM10sMTk6WzIsM10sMjk6WzIsM10sMzQ6WzIsM10sMzk6WzIsM10sNDQ6WzIsM10sNDc6WzIsM10sNDg6WzIsM10sNTE6WzIsM10sNTU6WzIsM10sNjA6WzIsM119LHs1OlsyLDRdLDE0OlsyLDRdLDE1OlsyLDRdLDE5OlsyLDRdLDI5OlsyLDRdLDM0OlsyLDRdLDM5OlsyLDRdLDQ0OlsyLDRdLDQ3OlsyLDRdLDQ4OlsyLDRdLDUxOlsyLDRdLDU1OlsyLDRdLDYwOlsyLDRdfSx7NTpbMiw1XSwxNDpbMiw1XSwxNTpbMiw1XSwxOTpbMiw1XSwyOTpbMiw1XSwzNDpbMiw1XSwzOTpbMiw1XSw0NDpbMiw1XSw0NzpbMiw1XSw0ODpbMiw1XSw1MTpbMiw1XSw1NTpbMiw1XSw2MDpbMiw1XX0sezU6WzIsNl0sMTQ6WzIsNl0sMTU6WzIsNl0sMTk6WzIsNl0sMjk6WzIsNl0sMzQ6WzIsNl0sMzk6WzIsNl0sNDQ6WzIsNl0sNDc6WzIsNl0sNDg6WzIsNl0sNTE6WzIsNl0sNTU6WzIsNl0sNjA6WzIsNl19LHs1OlsyLDddLDE0OlsyLDddLDE1OlsyLDddLDE5OlsyLDddLDI5OlsyLDddLDM0OlsyLDddLDM5OlsyLDddLDQ0OlsyLDddLDQ3OlsyLDddLDQ4OlsyLDddLDUxOlsyLDddLDU1OlsyLDddLDYwOlsyLDddfSx7NTpbMiw4XSwxNDpbMiw4XSwxNTpbMiw4XSwxOTpbMiw4XSwyOTpbMiw4XSwzNDpbMiw4XSwzOTpbMiw4XSw0NDpbMiw4XSw0NzpbMiw4XSw0ODpbMiw4XSw1MTpbMiw4XSw1NTpbMiw4XSw2MDpbMiw4XX0sezU6WzIsOV0sMTQ6WzIsOV0sMTU6WzIsOV0sMTk6WzIsOV0sMjk6WzIsOV0sMzQ6WzIsOV0sMzk6WzIsOV0sNDQ6WzIsOV0sNDc6WzIsOV0sNDg6WzIsOV0sNTE6WzIsOV0sNTU6WzIsOV0sNjA6WzIsOV19LHsyMDoyNSw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDozNiw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs0OjM3LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDM5OlsyLDQ2XSw0NDpbMiw0Nl0sNDc6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezQ6MzgsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sNDQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHsxMzo0MCwxNTpbMSwyMF0sMTc6Mzl9LHsyMDo0Miw1Njo0MSw2NDo0Myw2NTpbMSw0NF0sNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NDo0NSw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7NTpbMiwxMF0sMTQ6WzIsMTBdLDE1OlsyLDEwXSwxODpbMiwxMF0sMTk6WzIsMTBdLDI5OlsyLDEwXSwzNDpbMiwxMF0sMzk6WzIsMTBdLDQ0OlsyLDEwXSw0NzpbMiwxMF0sNDg6WzIsMTBdLDUxOlsyLDEwXSw1NTpbMiwxMF0sNjA6WzIsMTBdfSx7MjA6NDYsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NDcsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NDgsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NDIsNTY6NDksNjQ6NDMsNjU6WzEsNDRdLDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezMzOlsyLDc4XSw0OTo1MCw2NTpbMiw3OF0sNzI6WzIsNzhdLDgwOlsyLDc4XSw4MTpbMiw3OF0sODI6WzIsNzhdLDgzOlsyLDc4XSw4NDpbMiw3OF0sODU6WzIsNzhdfSx7MjM6WzIsMzNdLDMzOlsyLDMzXSw1NDpbMiwzM10sNjU6WzIsMzNdLDY4OlsyLDMzXSw3MjpbMiwzM10sNzU6WzIsMzNdLDgwOlsyLDMzXSw4MTpbMiwzM10sODI6WzIsMzNdLDgzOlsyLDMzXSw4NDpbMiwzM10sODU6WzIsMzNdfSx7MjM6WzIsMzRdLDMzOlsyLDM0XSw1NDpbMiwzNF0sNjU6WzIsMzRdLDY4OlsyLDM0XSw3MjpbMiwzNF0sNzU6WzIsMzRdLDgwOlsyLDM0XSw4MTpbMiwzNF0sODI6WzIsMzRdLDgzOlsyLDM0XSw4NDpbMiwzNF0sODU6WzIsMzRdfSx7MjM6WzIsMzVdLDMzOlsyLDM1XSw1NDpbMiwzNV0sNjU6WzIsMzVdLDY4OlsyLDM1XSw3MjpbMiwzNV0sNzU6WzIsMzVdLDgwOlsyLDM1XSw4MTpbMiwzNV0sODI6WzIsMzVdLDgzOlsyLDM1XSw4NDpbMiwzNV0sODU6WzIsMzVdfSx7MjM6WzIsMzZdLDMzOlsyLDM2XSw1NDpbMiwzNl0sNjU6WzIsMzZdLDY4OlsyLDM2XSw3MjpbMiwzNl0sNzU6WzIsMzZdLDgwOlsyLDM2XSw4MTpbMiwzNl0sODI6WzIsMzZdLDgzOlsyLDM2XSw4NDpbMiwzNl0sODU6WzIsMzZdfSx7MjM6WzIsMzddLDMzOlsyLDM3XSw1NDpbMiwzN10sNjU6WzIsMzddLDY4OlsyLDM3XSw3MjpbMiwzN10sNzU6WzIsMzddLDgwOlsyLDM3XSw4MTpbMiwzN10sODI6WzIsMzddLDgzOlsyLDM3XSw4NDpbMiwzN10sODU6WzIsMzddfSx7MjM6WzIsMzhdLDMzOlsyLDM4XSw1NDpbMiwzOF0sNjU6WzIsMzhdLDY4OlsyLDM4XSw3MjpbMiwzOF0sNzU6WzIsMzhdLDgwOlsyLDM4XSw4MTpbMiwzOF0sODI6WzIsMzhdLDgzOlsyLDM4XSw4NDpbMiwzOF0sODU6WzIsMzhdfSx7MjM6WzIsMzldLDMzOlsyLDM5XSw1NDpbMiwzOV0sNjU6WzIsMzldLDY4OlsyLDM5XSw3MjpbMiwzOV0sNzU6WzIsMzldLDgwOlsyLDM5XSw4MTpbMiwzOV0sODI6WzIsMzldLDgzOlsyLDM5XSw4NDpbMiwzOV0sODU6WzIsMzldfSx7MjM6WzIsNDNdLDMzOlsyLDQzXSw1NDpbMiw0M10sNjU6WzIsNDNdLDY4OlsyLDQzXSw3MjpbMiw0M10sNzU6WzIsNDNdLDgwOlsyLDQzXSw4MTpbMiw0M10sODI6WzIsNDNdLDgzOlsyLDQzXSw4NDpbMiw0M10sODU6WzIsNDNdLDg3OlsxLDUxXX0sezcyOlsxLDM1XSw4Njo1Mn0sezIzOlsyLDQ1XSwzMzpbMiw0NV0sNTQ6WzIsNDVdLDY1OlsyLDQ1XSw2ODpbMiw0NV0sNzI6WzIsNDVdLDc1OlsyLDQ1XSw4MDpbMiw0NV0sODE6WzIsNDVdLDgyOlsyLDQ1XSw4MzpbMiw0NV0sODQ6WzIsNDVdLDg1OlsyLDQ1XSw4NzpbMiw0NV19LHs1Mjo1Myw1NDpbMiw4Ml0sNjU6WzIsODJdLDcyOlsyLDgyXSw4MDpbMiw4Ml0sODE6WzIsODJdLDgyOlsyLDgyXSw4MzpbMiw4Ml0sODQ6WzIsODJdLDg1OlsyLDgyXX0sezI1OjU0LDM4OjU2LDM5OlsxLDU4XSw0Mzo1Nyw0NDpbMSw1OV0sNDU6NTUsNDc6WzIsNTRdfSx7Mjg6NjAsNDM6NjEsNDQ6WzEsNTldLDQ3OlsyLDU2XX0sezEzOjYzLDE1OlsxLDIwXSwxODpbMSw2Ml19LHsxNTpbMiw0OF0sMTg6WzIsNDhdfSx7MzM6WzIsODZdLDU3OjY0LDY1OlsyLDg2XSw3MjpbMiw4Nl0sODA6WzIsODZdLDgxOlsyLDg2XSw4MjpbMiw4Nl0sODM6WzIsODZdLDg0OlsyLDg2XSw4NTpbMiw4Nl19LHszMzpbMiw0MF0sNjU6WzIsNDBdLDcyOlsyLDQwXSw4MDpbMiw0MF0sODE6WzIsNDBdLDgyOlsyLDQwXSw4MzpbMiw0MF0sODQ6WzIsNDBdLDg1OlsyLDQwXX0sezMzOlsyLDQxXSw2NTpbMiw0MV0sNzI6WzIsNDFdLDgwOlsyLDQxXSw4MTpbMiw0MV0sODI6WzIsNDFdLDgzOlsyLDQxXSw4NDpbMiw0MV0sODU6WzIsNDFdfSx7MjA6NjUsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjY6NjYsNDc6WzEsNjddfSx7MzA6NjgsMzM6WzIsNThdLDY1OlsyLDU4XSw3MjpbMiw1OF0sNzU6WzIsNThdLDgwOlsyLDU4XSw4MTpbMiw1OF0sODI6WzIsNThdLDgzOlsyLDU4XSw4NDpbMiw1OF0sODU6WzIsNThdfSx7MzM6WzIsNjRdLDM1OjY5LDY1OlsyLDY0XSw3MjpbMiw2NF0sNzU6WzIsNjRdLDgwOlsyLDY0XSw4MTpbMiw2NF0sODI6WzIsNjRdLDgzOlsyLDY0XSw4NDpbMiw2NF0sODU6WzIsNjRdfSx7MjE6NzAsMjM6WzIsNTBdLDY1OlsyLDUwXSw3MjpbMiw1MF0sODA6WzIsNTBdLDgxOlsyLDUwXSw4MjpbMiw1MF0sODM6WzIsNTBdLDg0OlsyLDUwXSw4NTpbMiw1MF19LHszMzpbMiw5MF0sNjE6NzEsNjU6WzIsOTBdLDcyOlsyLDkwXSw4MDpbMiw5MF0sODE6WzIsOTBdLDgyOlsyLDkwXSw4MzpbMiw5MF0sODQ6WzIsOTBdLDg1OlsyLDkwXX0sezIwOjc1LDMzOlsyLDgwXSw1MDo3Miw2Mzo3Myw2NDo3Niw2NTpbMSw0NF0sNjk6NzQsNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NzI6WzEsODBdfSx7MjM6WzIsNDJdLDMzOlsyLDQyXSw1NDpbMiw0Ml0sNjU6WzIsNDJdLDY4OlsyLDQyXSw3MjpbMiw0Ml0sNzU6WzIsNDJdLDgwOlsyLDQyXSw4MTpbMiw0Ml0sODI6WzIsNDJdLDgzOlsyLDQyXSw4NDpbMiw0Ml0sODU6WzIsNDJdLDg3OlsxLDUxXX0sezIwOjc1LDUzOjgxLDU0OlsyLDg0XSw2Mzo4Miw2NDo3Niw2NTpbMSw0NF0sNjk6ODMsNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjY6ODQsNDc6WzEsNjddfSx7NDc6WzIsNTVdfSx7NDo4NSw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSwzOTpbMiw0Nl0sNDQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHs0NzpbMiwyMF19LHsyMDo4Niw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs0Ojg3LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHsyNjo4OCw0NzpbMSw2N119LHs0NzpbMiw1N119LHs1OlsyLDExXSwxNDpbMiwxMV0sMTU6WzIsMTFdLDE5OlsyLDExXSwyOTpbMiwxMV0sMzQ6WzIsMTFdLDM5OlsyLDExXSw0NDpbMiwxMV0sNDc6WzIsMTFdLDQ4OlsyLDExXSw1MTpbMiwxMV0sNTU6WzIsMTFdLDYwOlsyLDExXX0sezE1OlsyLDQ5XSwxODpbMiw0OV19LHsyMDo3NSwzMzpbMiw4OF0sNTg6ODksNjM6OTAsNjQ6NzYsNjU6WzEsNDRdLDY5OjkxLDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezY1OlsyLDk0XSw2Njo5Miw2ODpbMiw5NF0sNzI6WzIsOTRdLDgwOlsyLDk0XSw4MTpbMiw5NF0sODI6WzIsOTRdLDgzOlsyLDk0XSw4NDpbMiw5NF0sODU6WzIsOTRdfSx7NTpbMiwyNV0sMTQ6WzIsMjVdLDE1OlsyLDI1XSwxOTpbMiwyNV0sMjk6WzIsMjVdLDM0OlsyLDI1XSwzOTpbMiwyNV0sNDQ6WzIsMjVdLDQ3OlsyLDI1XSw0ODpbMiwyNV0sNTE6WzIsMjVdLDU1OlsyLDI1XSw2MDpbMiwyNV19LHsyMDo5Myw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo3NSwzMTo5NCwzMzpbMiw2MF0sNjM6OTUsNjQ6NzYsNjU6WzEsNDRdLDY5Ojk2LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3NTpbMiw2MF0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo3NSwzMzpbMiw2Nl0sMzY6OTcsNjM6OTgsNjQ6NzYsNjU6WzEsNDRdLDY5Ojk5LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3NTpbMiw2Nl0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo3NSwyMjoxMDAsMjM6WzIsNTJdLDYzOjEwMSw2NDo3Niw2NTpbMSw0NF0sNjk6MTAyLDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjc1LDMzOlsyLDkyXSw2MjoxMDMsNjM6MTA0LDY0Ojc2LDY1OlsxLDQ0XSw2OToxMDUsNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MzM6WzEsMTA2XX0sezMzOlsyLDc5XSw2NTpbMiw3OV0sNzI6WzIsNzldLDgwOlsyLDc5XSw4MTpbMiw3OV0sODI6WzIsNzldLDgzOlsyLDc5XSw4NDpbMiw3OV0sODU6WzIsNzldfSx7MzM6WzIsODFdfSx7MjM6WzIsMjddLDMzOlsyLDI3XSw1NDpbMiwyN10sNjU6WzIsMjddLDY4OlsyLDI3XSw3MjpbMiwyN10sNzU6WzIsMjddLDgwOlsyLDI3XSw4MTpbMiwyN10sODI6WzIsMjddLDgzOlsyLDI3XSw4NDpbMiwyN10sODU6WzIsMjddfSx7MjM6WzIsMjhdLDMzOlsyLDI4XSw1NDpbMiwyOF0sNjU6WzIsMjhdLDY4OlsyLDI4XSw3MjpbMiwyOF0sNzU6WzIsMjhdLDgwOlsyLDI4XSw4MTpbMiwyOF0sODI6WzIsMjhdLDgzOlsyLDI4XSw4NDpbMiwyOF0sODU6WzIsMjhdfSx7MjM6WzIsMzBdLDMzOlsyLDMwXSw1NDpbMiwzMF0sNjg6WzIsMzBdLDcxOjEwNyw3MjpbMSwxMDhdLDc1OlsyLDMwXX0sezIzOlsyLDk4XSwzMzpbMiw5OF0sNTQ6WzIsOThdLDY4OlsyLDk4XSw3MjpbMiw5OF0sNzU6WzIsOThdfSx7MjM6WzIsNDVdLDMzOlsyLDQ1XSw1NDpbMiw0NV0sNjU6WzIsNDVdLDY4OlsyLDQ1XSw3MjpbMiw0NV0sNzM6WzEsMTA5XSw3NTpbMiw0NV0sODA6WzIsNDVdLDgxOlsyLDQ1XSw4MjpbMiw0NV0sODM6WzIsNDVdLDg0OlsyLDQ1XSw4NTpbMiw0NV0sODc6WzIsNDVdfSx7MjM6WzIsNDRdLDMzOlsyLDQ0XSw1NDpbMiw0NF0sNjU6WzIsNDRdLDY4OlsyLDQ0XSw3MjpbMiw0NF0sNzU6WzIsNDRdLDgwOlsyLDQ0XSw4MTpbMiw0NF0sODI6WzIsNDRdLDgzOlsyLDQ0XSw4NDpbMiw0NF0sODU6WzIsNDRdLDg3OlsyLDQ0XX0sezU0OlsxLDExMF19LHs1NDpbMiw4M10sNjU6WzIsODNdLDcyOlsyLDgzXSw4MDpbMiw4M10sODE6WzIsODNdLDgyOlsyLDgzXSw4MzpbMiw4M10sODQ6WzIsODNdLDg1OlsyLDgzXX0sezU0OlsyLDg1XX0sezU6WzIsMTNdLDE0OlsyLDEzXSwxNTpbMiwxM10sMTk6WzIsMTNdLDI5OlsyLDEzXSwzNDpbMiwxM10sMzk6WzIsMTNdLDQ0OlsyLDEzXSw0NzpbMiwxM10sNDg6WzIsMTNdLDUxOlsyLDEzXSw1NTpbMiwxM10sNjA6WzIsMTNdfSx7Mzg6NTYsMzk6WzEsNThdLDQzOjU3LDQ0OlsxLDU5XSw0NToxMTIsNDY6MTExLDQ3OlsyLDc2XX0sezMzOlsyLDcwXSw0MDoxMTMsNjU6WzIsNzBdLDcyOlsyLDcwXSw3NTpbMiw3MF0sODA6WzIsNzBdLDgxOlsyLDcwXSw4MjpbMiw3MF0sODM6WzIsNzBdLDg0OlsyLDcwXSw4NTpbMiw3MF19LHs0NzpbMiwxOF19LHs1OlsyLDE0XSwxNDpbMiwxNF0sMTU6WzIsMTRdLDE5OlsyLDE0XSwyOTpbMiwxNF0sMzQ6WzIsMTRdLDM5OlsyLDE0XSw0NDpbMiwxNF0sNDc6WzIsMTRdLDQ4OlsyLDE0XSw1MTpbMiwxNF0sNTU6WzIsMTRdLDYwOlsyLDE0XX0sezMzOlsxLDExNF19LHszMzpbMiw4N10sNjU6WzIsODddLDcyOlsyLDg3XSw4MDpbMiw4N10sODE6WzIsODddLDgyOlsyLDg3XSw4MzpbMiw4N10sODQ6WzIsODddLDg1OlsyLDg3XX0sezMzOlsyLDg5XX0sezIwOjc1LDYzOjExNiw2NDo3Niw2NTpbMSw0NF0sNjc6MTE1LDY4OlsyLDk2XSw2OToxMTcsNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MzM6WzEsMTE4XX0sezMyOjExOSwzMzpbMiw2Ml0sNzQ6MTIwLDc1OlsxLDEyMV19LHszMzpbMiw1OV0sNjU6WzIsNTldLDcyOlsyLDU5XSw3NTpbMiw1OV0sODA6WzIsNTldLDgxOlsyLDU5XSw4MjpbMiw1OV0sODM6WzIsNTldLDg0OlsyLDU5XSw4NTpbMiw1OV19LHszMzpbMiw2MV0sNzU6WzIsNjFdfSx7MzM6WzIsNjhdLDM3OjEyMiw3NDoxMjMsNzU6WzEsMTIxXX0sezMzOlsyLDY1XSw2NTpbMiw2NV0sNzI6WzIsNjVdLDc1OlsyLDY1XSw4MDpbMiw2NV0sODE6WzIsNjVdLDgyOlsyLDY1XSw4MzpbMiw2NV0sODQ6WzIsNjVdLDg1OlsyLDY1XX0sezMzOlsyLDY3XSw3NTpbMiw2N119LHsyMzpbMSwxMjRdfSx7MjM6WzIsNTFdLDY1OlsyLDUxXSw3MjpbMiw1MV0sODA6WzIsNTFdLDgxOlsyLDUxXSw4MjpbMiw1MV0sODM6WzIsNTFdLDg0OlsyLDUxXSw4NTpbMiw1MV19LHsyMzpbMiw1M119LHszMzpbMSwxMjVdfSx7MzM6WzIsOTFdLDY1OlsyLDkxXSw3MjpbMiw5MV0sODA6WzIsOTFdLDgxOlsyLDkxXSw4MjpbMiw5MV0sODM6WzIsOTFdLDg0OlsyLDkxXSw4NTpbMiw5MV19LHszMzpbMiw5M119LHs1OlsyLDIyXSwxNDpbMiwyMl0sMTU6WzIsMjJdLDE5OlsyLDIyXSwyOTpbMiwyMl0sMzQ6WzIsMjJdLDM5OlsyLDIyXSw0NDpbMiwyMl0sNDc6WzIsMjJdLDQ4OlsyLDIyXSw1MTpbMiwyMl0sNTU6WzIsMjJdLDYwOlsyLDIyXX0sezIzOlsyLDk5XSwzMzpbMiw5OV0sNTQ6WzIsOTldLDY4OlsyLDk5XSw3MjpbMiw5OV0sNzU6WzIsOTldfSx7NzM6WzEsMTA5XX0sezIwOjc1LDYzOjEyNiw2NDo3Niw2NTpbMSw0NF0sNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NTpbMiwyM10sMTQ6WzIsMjNdLDE1OlsyLDIzXSwxOTpbMiwyM10sMjk6WzIsMjNdLDM0OlsyLDIzXSwzOTpbMiwyM10sNDQ6WzIsMjNdLDQ3OlsyLDIzXSw0ODpbMiwyM10sNTE6WzIsMjNdLDU1OlsyLDIzXSw2MDpbMiwyM119LHs0NzpbMiwxOV19LHs0NzpbMiw3N119LHsyMDo3NSwzMzpbMiw3Ml0sNDE6MTI3LDYzOjEyOCw2NDo3Niw2NTpbMSw0NF0sNjk6MTI5LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3NTpbMiw3Ml0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs1OlsyLDI0XSwxNDpbMiwyNF0sMTU6WzIsMjRdLDE5OlsyLDI0XSwyOTpbMiwyNF0sMzQ6WzIsMjRdLDM5OlsyLDI0XSw0NDpbMiwyNF0sNDc6WzIsMjRdLDQ4OlsyLDI0XSw1MTpbMiwyNF0sNTU6WzIsMjRdLDYwOlsyLDI0XX0sezY4OlsxLDEzMF19LHs2NTpbMiw5NV0sNjg6WzIsOTVdLDcyOlsyLDk1XSw4MDpbMiw5NV0sODE6WzIsOTVdLDgyOlsyLDk1XSw4MzpbMiw5NV0sODQ6WzIsOTVdLDg1OlsyLDk1XX0sezY4OlsyLDk3XX0sezU6WzIsMjFdLDE0OlsyLDIxXSwxNTpbMiwyMV0sMTk6WzIsMjFdLDI5OlsyLDIxXSwzNDpbMiwyMV0sMzk6WzIsMjFdLDQ0OlsyLDIxXSw0NzpbMiwyMV0sNDg6WzIsMjFdLDUxOlsyLDIxXSw1NTpbMiwyMV0sNjA6WzIsMjFdfSx7MzM6WzEsMTMxXX0sezMzOlsyLDYzXX0sezcyOlsxLDEzM10sNzY6MTMyfSx7MzM6WzEsMTM0XX0sezMzOlsyLDY5XX0sezE1OlsyLDEyXX0sezE0OlsyLDI2XSwxNTpbMiwyNl0sMTk6WzIsMjZdLDI5OlsyLDI2XSwzNDpbMiwyNl0sNDc6WzIsMjZdLDQ4OlsyLDI2XSw1MTpbMiwyNl0sNTU6WzIsMjZdLDYwOlsyLDI2XX0sezIzOlsyLDMxXSwzMzpbMiwzMV0sNTQ6WzIsMzFdLDY4OlsyLDMxXSw3MjpbMiwzMV0sNzU6WzIsMzFdfSx7MzM6WzIsNzRdLDQyOjEzNSw3NDoxMzYsNzU6WzEsMTIxXX0sezMzOlsyLDcxXSw2NTpbMiw3MV0sNzI6WzIsNzFdLDc1OlsyLDcxXSw4MDpbMiw3MV0sODE6WzIsNzFdLDgyOlsyLDcxXSw4MzpbMiw3MV0sODQ6WzIsNzFdLDg1OlsyLDcxXX0sezMzOlsyLDczXSw3NTpbMiw3M119LHsyMzpbMiwyOV0sMzM6WzIsMjldLDU0OlsyLDI5XSw2NTpbMiwyOV0sNjg6WzIsMjldLDcyOlsyLDI5XSw3NTpbMiwyOV0sODA6WzIsMjldLDgxOlsyLDI5XSw4MjpbMiwyOV0sODM6WzIsMjldLDg0OlsyLDI5XSw4NTpbMiwyOV19LHsxNDpbMiwxNV0sMTU6WzIsMTVdLDE5OlsyLDE1XSwyOTpbMiwxNV0sMzQ6WzIsMTVdLDM5OlsyLDE1XSw0NDpbMiwxNV0sNDc6WzIsMTVdLDQ4OlsyLDE1XSw1MTpbMiwxNV0sNTU6WzIsMTVdLDYwOlsyLDE1XX0sezcyOlsxLDEzOF0sNzc6WzEsMTM3XX0sezcyOlsyLDEwMF0sNzc6WzIsMTAwXX0sezE0OlsyLDE2XSwxNTpbMiwxNl0sMTk6WzIsMTZdLDI5OlsyLDE2XSwzNDpbMiwxNl0sNDQ6WzIsMTZdLDQ3OlsyLDE2XSw0ODpbMiwxNl0sNTE6WzIsMTZdLDU1OlsyLDE2XSw2MDpbMiwxNl19LHszMzpbMSwxMzldfSx7MzM6WzIsNzVdfSx7MzM6WzIsMzJdfSx7NzI6WzIsMTAxXSw3NzpbMiwxMDFdfSx7MTQ6WzIsMTddLDE1OlsyLDE3XSwxOTpbMiwxN10sMjk6WzIsMTddLDM0OlsyLDE3XSwzOTpbMiwxN10sNDQ6WzIsMTddLDQ3OlsyLDE3XSw0ODpbMiwxN10sNTE6WzIsMTddLDU1OlsyLDE3XSw2MDpbMiwxN119XSxcbmRlZmF1bHRBY3Rpb25zOiB7NDpbMiwxXSw1NTpbMiw1NV0sNTc6WzIsMjBdLDYxOlsyLDU3XSw3NDpbMiw4MV0sODM6WzIsODVdLDg3OlsyLDE4XSw5MTpbMiw4OV0sMTAyOlsyLDUzXSwxMDU6WzIsOTNdLDExMTpbMiwxOV0sMTEyOlsyLDc3XSwxMTc6WzIsOTddLDEyMDpbMiw2M10sMTIzOlsyLDY5XSwxMjQ6WzIsMTJdLDEzNjpbMiw3NV0sMTM3OlsyLDMyXX0sXG5wYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihzdHIpO1xufSxcbnBhcnNlOiBmdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICAgIHZhciBzZWxmID0gdGhpcywgc3RhY2sgPSBbMF0sIHZzdGFjayA9IFtudWxsXSwgbHN0YWNrID0gW10sIHRhYmxlID0gdGhpcy50YWJsZSwgeXl0ZXh0ID0gXCJcIiwgeXlsaW5lbm8gPSAwLCB5eWxlbmcgPSAwLCByZWNvdmVyaW5nID0gMCwgVEVSUk9SID0gMiwgRU9GID0gMTtcbiAgICB0aGlzLmxleGVyLnNldElucHV0KGlucHV0KTtcbiAgICB0aGlzLmxleGVyLnl5ID0gdGhpcy55eTtcbiAgICB0aGlzLnl5LmxleGVyID0gdGhpcy5sZXhlcjtcbiAgICB0aGlzLnl5LnBhcnNlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmxleGVyLnl5bGxvYyA9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICB0aGlzLmxleGVyLnl5bGxvYyA9IHt9O1xuICAgIHZhciB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xuICAgIGxzdGFjay5wdXNoKHl5bG9jKTtcbiAgICB2YXIgcmFuZ2VzID0gdGhpcy5sZXhlci5vcHRpb25zICYmIHRoaXMubGV4ZXIub3B0aW9ucy5yYW5nZXM7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnl5LnBhcnNlRXJyb3IgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gdGhpcy55eS5wYXJzZUVycm9yO1xuICAgIGZ1bmN0aW9uIHBvcFN0YWNrKG4pIHtcbiAgICAgICAgc3RhY2subGVuZ3RoID0gc3RhY2subGVuZ3RoIC0gMiAqIG47XG4gICAgICAgIHZzdGFjay5sZW5ndGggPSB2c3RhY2subGVuZ3RoIC0gbjtcbiAgICAgICAgbHN0YWNrLmxlbmd0aCA9IGxzdGFjay5sZW5ndGggLSBuO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsZXgoKSB7XG4gICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgdG9rZW4gPSBzZWxmLmxleGVyLmxleCgpIHx8IDE7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cbiAgICB2YXIgc3ltYm9sLCBwcmVFcnJvclN5bWJvbCwgc3RhdGUsIGFjdGlvbiwgYSwgciwgeXl2YWwgPSB7fSwgcCwgbGVuLCBuZXdTdGF0ZSwgZXhwZWN0ZWQ7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzeW1ib2wgPT09IG51bGwgfHwgdHlwZW9mIHN5bWJvbCA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09IFwidW5kZWZpbmVkXCIgfHwgIWFjdGlvbi5sZW5ndGggfHwgIWFjdGlvblswXSkge1xuICAgICAgICAgICAgdmFyIGVyclN0ciA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoIXJlY292ZXJpbmcpIHtcbiAgICAgICAgICAgICAgICBleHBlY3RlZCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAocCBpbiB0YWJsZVtzdGF0ZV0pXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkLnB1c2goXCInXCIgKyB0aGlzLnRlcm1pbmFsc19bcF0gKyBcIidcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXhlci5zaG93UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjpcXG5cIiArIHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKCkgKyBcIlxcbkV4cGVjdGluZyBcIiArIGV4cGVjdGVkLmpvaW4oXCIsIFwiKSArIFwiLCBnb3QgJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSBcIlBhcnNlIGVycm9yIG9uIGxpbmUgXCIgKyAoeXlsaW5lbm8gKyAxKSArIFwiOiBVbmV4cGVjdGVkIFwiICsgKHN5bWJvbCA9PSAxP1wiZW5kIG9mIGlucHV0XCI6XCInXCIgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArIFwiJ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUVycm9yKGVyclN0ciwge3RleHQ6IHRoaXMubGV4ZXIubWF0Y2gsIHRva2VuOiB0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wsIGxpbmU6IHRoaXMubGV4ZXIueXlsaW5lbm8sIGxvYzogeXlsb2MsIGV4cGVjdGVkOiBleHBlY3RlZH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb25bMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBhY3Rpb24ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2UgRXJyb3I6IG11bHRpcGxlIGFjdGlvbnMgcG9zc2libGUgYXQgc3RhdGU6IFwiICsgc3RhdGUgKyBcIiwgdG9rZW46IFwiICsgc3ltYm9sKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaCh0aGlzLmxleGVyLnl5dGV4dCk7XG4gICAgICAgICAgICBsc3RhY2sucHVzaCh0aGlzLmxleGVyLnl5bGxvYyk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGFjdGlvblsxXSk7XG4gICAgICAgICAgICBzeW1ib2wgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFwcmVFcnJvclN5bWJvbCkge1xuICAgICAgICAgICAgICAgIHl5bGVuZyA9IHRoaXMubGV4ZXIueXlsZW5nO1xuICAgICAgICAgICAgICAgIHl5dGV4dCA9IHRoaXMubGV4ZXIueXl0ZXh0O1xuICAgICAgICAgICAgICAgIHl5bGluZW5vID0gdGhpcy5sZXhlci55eWxpbmVubztcbiAgICAgICAgICAgICAgICB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xuICAgICAgICAgICAgICAgIGlmIChyZWNvdmVyaW5nID4gMClcbiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlcmluZy0tO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDtcbiAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgbGVuID0gdGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVsxXTtcbiAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aCAtIGxlbl07XG4gICAgICAgICAgICB5eXZhbC5fJCA9IHtmaXJzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2xpbmUsIGxhc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2xpbmUsIGZpcnN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9jb2x1bW4sIGxhc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfY29sdW1ufTtcbiAgICAgICAgICAgIGlmIChyYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB5eXZhbC5fJC5yYW5nZSA9IFtsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLnJhbmdlWzBdLCBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLnJhbmdlWzFdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIgPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh5eXZhbCwgeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB0aGlzLnl5LCBhY3Rpb25bMV0sIHZzdGFjaywgbHN0YWNrKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4gKiAyKTtcbiAgICAgICAgICAgICAgICB2c3RhY2sgPSB2c3RhY2suc2xpY2UoMCwgLTEgKiBsZW4pO1xuICAgICAgICAgICAgICAgIGxzdGFjayA9IGxzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMF0pO1xuICAgICAgICAgICAgdnN0YWNrLnB1c2goeXl2YWwuJCk7XG4gICAgICAgICAgICBsc3RhY2sucHVzaCh5eXZhbC5fJCk7XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IHRhYmxlW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDJdXVtzdGFja1tzdGFjay5sZW5ndGggLSAxXV07XG4gICAgICAgICAgICBzdGFjay5wdXNoKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbn07XG4vKiBKaXNvbiBnZW5lcmF0ZWQgbGV4ZXIgKi9cbnZhciBsZXhlciA9IChmdW5jdGlvbigpe1xudmFyIGxleGVyID0gKHtFT0Y6MSxcbnBhcnNlRXJyb3I6ZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcbiAgICAgICAgaWYgKHRoaXMueXkucGFyc2VyKSB7XG4gICAgICAgICAgICB0aGlzLnl5LnBhcnNlci5wYXJzZUVycm9yKHN0ciwgaGFzaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbiAgICAgICAgfVxuICAgIH0sXG5zZXRJbnB1dDpmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRoaXMuX2xlc3MgPSB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy55eWxpbmVubyA9IHRoaXMueXlsZW5nID0gMDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sgPSBbJ0lOSVRJQUwnXTtcbiAgICAgICAgdGhpcy55eWxsb2MgPSB7Zmlyc3RfbGluZToxLGZpcnN0X2NvbHVtbjowLGxhc3RfbGluZToxLGxhc3RfY29sdW1uOjB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykgdGhpcy55eWxsb2MucmFuZ2UgPSBbMCwwXTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuaW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcbiAgICAgICAgdGhpcy55eXRleHQgKz0gY2g7XG4gICAgICAgIHRoaXMueXlsZW5nKys7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHRoaXMubWF0Y2ggKz0gY2g7XG4gICAgICAgIHRoaXMubWF0Y2hlZCArPSBjaDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2gubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICBpZiAobGluZXMpIHtcbiAgICAgICAgICAgIHRoaXMueXlsaW5lbm8rKztcbiAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfbGluZSsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4rKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykgdGhpcy55eWxsb2MucmFuZ2VbMV0rKztcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKDEpO1xuICAgICAgICByZXR1cm4gY2g7XG4gICAgfSxcbnVucHV0OmZ1bmN0aW9uIChjaCkge1xuICAgICAgICB2YXIgbGVuID0gY2gubGVuZ3RoO1xuICAgICAgICB2YXIgbGluZXMgPSBjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLnl5dGV4dC5zdWJzdHIoMCwgdGhpcy55eXRleHQubGVuZ3RoLWxlbi0xKTtcbiAgICAgICAgLy90aGlzLnl5bGVuZyAtPSBsZW47XG4gICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcbiAgICAgICAgdmFyIG9sZExpbmVzID0gdGhpcy5tYXRjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy5tYXRjaC5zdWJzdHIoMCwgdGhpcy5tYXRjaC5sZW5ndGgtMSk7XG4gICAgICAgIHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aC0xKTtcblxuICAgICAgICBpZiAobGluZXMubGVuZ3RoLTEpIHRoaXMueXlsaW5lbm8gLT0gbGluZXMubGVuZ3RoLTE7XG4gICAgICAgIHZhciByID0gdGhpcy55eWxsb2MucmFuZ2U7XG5cbiAgICAgICAgdGhpcy55eWxsb2MgPSB7Zmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8rMSxcbiAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgP1xuICAgICAgICAgICAgICAobGluZXMubGVuZ3RoID09PSBvbGRMaW5lcy5sZW5ndGggPyB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gOiAwKSArIG9sZExpbmVzW29sZExpbmVzLmxlbmd0aCAtIGxpbmVzLmxlbmd0aF0ubGVuZ3RoIC0gbGluZXNbMF0ubGVuZ3RoOlxuICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gLSBsZW5cbiAgICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFtyWzBdLCByWzBdICsgdGhpcy55eWxlbmcgLSBsZW5dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5tb3JlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5sZXNzOmZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHRoaXMudW5wdXQodGhpcy5tYXRjaC5zbGljZShuKSk7XG4gICAgfSxcbnBhc3RJbnB1dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXN0ID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gdGhpcy5tYXRjaC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gKHBhc3QubGVuZ3RoID4gMjAgPyAnLi4uJzonJykgKyBwYXN0LnN1YnN0cigtMjApLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbiAgICB9LFxudXBjb21pbmdJbnB1dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5tYXRjaDtcbiAgICAgICAgaWYgKG5leHQubGVuZ3RoIDwgMjApIHtcbiAgICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyKDAsIDIwLW5leHQubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG5leHQuc3Vic3RyKDAsMjApKyhuZXh0Lmxlbmd0aCA+IDIwID8gJy4uLic6JycpKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcbnNob3dQb3NpdGlvbjpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmUgPSB0aGlzLnBhc3RJbnB1dCgpO1xuICAgICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbihcIi1cIik7XG4gICAgICAgIHJldHVybiBwcmUgKyB0aGlzLnVwY29taW5nSW5wdXQoKSArIFwiXFxuXCIgKyBjK1wiXlwiO1xuICAgIH0sXG5uZXh0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRU9GO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgdmFyIHRva2VuLFxuICAgICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgICB0ZW1wTWF0Y2gsXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgIGxpbmVzO1xuICAgICAgICBpZiAoIXRoaXMuX21vcmUpIHtcbiAgICAgICAgICAgIHRoaXMueXl0ZXh0ID0gJyc7XG4gICAgICAgICAgICB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5fY3VycmVudFJ1bGVzKCk7XG4gICAgICAgIGZvciAodmFyIGk9MDtpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRlbXBNYXRjaCA9IHRoaXMuX2lucHV0Lm1hdGNoKHRoaXMucnVsZXNbcnVsZXNbaV1dKTtcbiAgICAgICAgICAgIGlmICh0ZW1wTWF0Y2ggJiYgKCFtYXRjaCB8fCB0ZW1wTWF0Y2hbMF0ubGVuZ3RoID4gbWF0Y2hbMF0ubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoID0gdGVtcE1hdGNoO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5mbGV4KSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGxpbmVzID0gbWF0Y2hbMF0ubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICAgICAgaWYgKGxpbmVzKSB0aGlzLnl5bGluZW5vICs9IGxpbmVzLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmxhc3RfbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxpbmVubysxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsaW5lcyA/IGxpbmVzW2xpbmVzLmxlbmd0aC0xXS5sZW5ndGgtbGluZXNbbGluZXMubGVuZ3RoLTFdLm1hdGNoKC9cXHI/XFxuPy8pWzBdLmxlbmd0aCA6IHRoaXMueXlsbG9jLmxhc3RfY29sdW1uICsgbWF0Y2hbMF0ubGVuZ3RofTtcbiAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdGhpcy5tYXRjaCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoO1xuICAgICAgICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3RoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArPSB0aGlzLnl5bGVuZ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tb3JlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICB0b2tlbiA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHRoaXMsIHRoaXMueXksIHRoaXMsIHJ1bGVzW2luZGV4XSx0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTFdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRvbmUgJiYgdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRva2VuKSByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faW5wdXQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnKyh0aGlzLnl5bGluZW5vKzEpKycuIFVucmVjb2duaXplZCB0ZXh0LlxcbicrdGhpcy5zaG93UG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAge3RleHQ6IFwiXCIsIHRva2VuOiBudWxsLCBsaW5lOiB0aGlzLnl5bGluZW5vfSk7XG4gICAgICAgIH1cbiAgICB9LFxubGV4OmZ1bmN0aW9uIGxleCgpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLm5leHQoKTtcbiAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZXgoKTtcbiAgICAgICAgfVxuICAgIH0sXG5iZWdpbjpmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7XG4gICAgfSxcbnBvcFN0YXRlOmZ1bmN0aW9uIHBvcFN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFjay5wb3AoKTtcbiAgICB9LFxuX2N1cnJlbnRSdWxlczpmdW5jdGlvbiBfY3VycmVudFJ1bGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGgtMV1dLnJ1bGVzO1xuICAgIH0sXG50b3BTdGF0ZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTJdO1xuICAgIH0sXG5wdXNoU3RhdGU6ZnVuY3Rpb24gYmVnaW4oY29uZGl0aW9uKSB7XG4gICAgICAgIHRoaXMuYmVnaW4oY29uZGl0aW9uKTtcbiAgICB9fSk7XG5sZXhlci5vcHRpb25zID0ge307XG5sZXhlci5wZXJmb3JtQWN0aW9uID0gZnVuY3Rpb24gYW5vbnltb3VzKHl5LHl5XywkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLFlZX1NUQVJUXG4vKiovKSB7XG5cblxuZnVuY3Rpb24gc3RyaXAoc3RhcnQsIGVuZCkge1xuICByZXR1cm4geXlfLnl5dGV4dCA9IHl5Xy55eXRleHQuc3Vic3RyKHN0YXJ0LCB5eV8ueXlsZW5nLWVuZCk7XG59XG5cblxudmFyIFlZU1RBVEU9WVlfU1RBUlRcbnN3aXRjaCgkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zKSB7XG5jYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHl5Xy55eXRleHQuc2xpY2UoLTIpID09PSBcIlxcXFxcXFxcXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcCgwLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJtdVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHl5Xy55eXRleHQuc2xpY2UoLTEpID09PSBcIlxcXFxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDAsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcImVtdVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwibXVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeXlfLnl5dGV4dCkgcmV0dXJuIDE1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgMTpyZXR1cm4gMTU7XG5icmVhaztcbmNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSAzOnRoaXMuYmVnaW4oJ3JhdycpOyByZXR1cm4gMTU7XG5icmVhaztcbmNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdWxkIGJlIHVzaW5nIGB0aGlzLnRvcFN0YXRlKClgIGJlbG93LCBidXQgaXQgY3VycmVudGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyB0aGUgc2Vjb25kIHRvcCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCB0b3AuIE9wZW5lZCBhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzc3VlIGFib3V0IGl0IGF0IGh0dHBzOi8vZ2l0aHViLmNvbS96YWFjaC9qaXNvbi9pc3N1ZXMvMjkxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGgtMV0gPT09ICdyYXcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnN1YnN0cig1LCB5eV8ueXlsZW5nLTkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdFTkRfUkFXX0JMT0NLJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSA1OiByZXR1cm4gMTU7IFxuYnJlYWs7XG5jYXNlIDY6XG4gIHRoaXMucG9wU3RhdGUoKTtcbiAgcmV0dXJuIDE0O1xuXG5icmVhaztcbmNhc2UgNzpyZXR1cm4gNjU7XG5icmVhaztcbmNhc2UgODpyZXR1cm4gNjg7XG5icmVhaztcbmNhc2UgOTogcmV0dXJuIDE5OyBcbmJyZWFrO1xuY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbigncmF3Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgMTE6cmV0dXJuIDU1O1xuYnJlYWs7XG5jYXNlIDEyOnJldHVybiA2MDtcbmJyZWFrO1xuY2FzZSAxMzpyZXR1cm4gMjk7XG5icmVhaztcbmNhc2UgMTQ6cmV0dXJuIDQ3O1xuYnJlYWs7XG5jYXNlIDE1OnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDQ0O1xuYnJlYWs7XG5jYXNlIDE2OnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDQ0O1xuYnJlYWs7XG5jYXNlIDE3OnJldHVybiAzNDtcbmJyZWFrO1xuY2FzZSAxODpyZXR1cm4gMzk7XG5icmVhaztcbmNhc2UgMTk6cmV0dXJuIDUxO1xuYnJlYWs7XG5jYXNlIDIwOnJldHVybiA0ODtcbmJyZWFrO1xuY2FzZSAyMTpcbiAgdGhpcy51bnB1dCh5eV8ueXl0ZXh0KTtcbiAgdGhpcy5wb3BTdGF0ZSgpO1xuICB0aGlzLmJlZ2luKCdjb20nKTtcblxuYnJlYWs7XG5jYXNlIDIyOlxuICB0aGlzLnBvcFN0YXRlKCk7XG4gIHJldHVybiAxNDtcblxuYnJlYWs7XG5jYXNlIDIzOnJldHVybiA0ODtcbmJyZWFrO1xuY2FzZSAyNDpyZXR1cm4gNzM7XG5icmVhaztcbmNhc2UgMjU6cmV0dXJuIDcyO1xuYnJlYWs7XG5jYXNlIDI2OnJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSAyNzpyZXR1cm4gODc7XG5icmVhaztcbmNhc2UgMjg6Ly8gaWdub3JlIHdoaXRlc3BhY2VcbmJyZWFrO1xuY2FzZSAyOTp0aGlzLnBvcFN0YXRlKCk7IHJldHVybiA1NDtcbmJyZWFrO1xuY2FzZSAzMDp0aGlzLnBvcFN0YXRlKCk7IHJldHVybiAzMztcbmJyZWFrO1xuY2FzZSAzMTp5eV8ueXl0ZXh0ID0gc3RyaXAoMSwyKS5yZXBsYWNlKC9cXFxcXCIvZywnXCInKTsgcmV0dXJuIDgwO1xuYnJlYWs7XG5jYXNlIDMyOnl5Xy55eXRleHQgPSBzdHJpcCgxLDIpLnJlcGxhY2UoL1xcXFwnL2csXCInXCIpOyByZXR1cm4gODA7XG5icmVhaztcbmNhc2UgMzM6cmV0dXJuIDg1O1xuYnJlYWs7XG5jYXNlIDM0OnJldHVybiA4MjtcbmJyZWFrO1xuY2FzZSAzNTpyZXR1cm4gODI7XG5icmVhaztcbmNhc2UgMzY6cmV0dXJuIDgzO1xuYnJlYWs7XG5jYXNlIDM3OnJldHVybiA4NDtcbmJyZWFrO1xuY2FzZSAzODpyZXR1cm4gODE7XG5icmVhaztcbmNhc2UgMzk6cmV0dXJuIDc1O1xuYnJlYWs7XG5jYXNlIDQwOnJldHVybiA3NztcbmJyZWFrO1xuY2FzZSA0MTpyZXR1cm4gNzI7XG5icmVhaztcbmNhc2UgNDI6eXlfLnl5dGV4dCA9IHl5Xy55eXRleHQucmVwbGFjZSgvXFxcXChbXFxcXFxcXV0pL2csJyQxJyk7IHJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSA0MzpyZXR1cm4gJ0lOVkFMSUQnO1xuYnJlYWs7XG5jYXNlIDQ0OnJldHVybiA1O1xuYnJlYWs7XG59XG59O1xubGV4ZXIucnVsZXMgPSBbL14oPzpbXlxceDAwXSo/KD89KFxce1xceykpKS8sL14oPzpbXlxceDAwXSspLywvXig/OlteXFx4MDBdezIsfT8oPz0oXFx7XFx7fFxcXFxcXHtcXHt8XFxcXFxcXFxcXHtcXHt8JCkpKS8sL14oPzpcXHtcXHtcXHtcXHsoPz1bXlxcL10pKS8sL14oPzpcXHtcXHtcXHtcXHtcXC9bXlxccyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0rKD89Wz19XFxzXFwvLl0pXFx9XFx9XFx9XFx9KS8sL14oPzpbXlxceDAwXSo/KD89KFxce1xce1xce1xceykpKS8sL14oPzpbXFxzXFxTXSo/LS0ofik/XFx9XFx9KS8sL14oPzpcXCgpLywvXig/OlxcKSkvLC9eKD86XFx7XFx7XFx7XFx7KS8sL14oPzpcXH1cXH1cXH1cXH0pLywvXig/Olxce1xceyh+KT8+KS8sL14oPzpcXHtcXHsofik/Iz4pLywvXig/Olxce1xceyh+KT8jXFwqPykvLC9eKD86XFx7XFx7KH4pP1xcLykvLC9eKD86XFx7XFx7KH4pP1xcXlxccyoofik/XFx9XFx9KS8sL14oPzpcXHtcXHsofik/XFxzKmVsc2VcXHMqKH4pP1xcfVxcfSkvLC9eKD86XFx7XFx7KH4pP1xcXikvLC9eKD86XFx7XFx7KH4pP1xccyplbHNlXFxiKS8sL14oPzpcXHtcXHsofik/XFx7KS8sL14oPzpcXHtcXHsofik/JikvLC9eKD86XFx7XFx7KH4pPyEtLSkvLC9eKD86XFx7XFx7KH4pPyFbXFxzXFxTXSo/XFx9XFx9KS8sL14oPzpcXHtcXHsofik/XFwqPykvLC9eKD86PSkvLC9eKD86XFwuXFwuKS8sL14oPzpcXC4oPz0oWz1+fVxcc1xcLy4pfF0pKSkvLC9eKD86W1xcLy5dKS8sL14oPzpcXHMrKS8sL14oPzpcXH0ofik/XFx9XFx9KS8sL14oPzoofik/XFx9XFx9KS8sL14oPzpcIihcXFxcW1wiXXxbXlwiXSkqXCIpLywvXig/OicoXFxcXFsnXXxbXiddKSonKS8sL14oPzpAKS8sL14oPzp0cnVlKD89KFt+fVxccyldKSkpLywvXig/OmZhbHNlKD89KFt+fVxccyldKSkpLywvXig/OnVuZGVmaW5lZCg/PShbfn1cXHMpXSkpKS8sL14oPzpudWxsKD89KFt+fVxccyldKSkpLywvXig/Oi0/WzAtOV0rKD86XFwuWzAtOV0rKT8oPz0oW359XFxzKV0pKSkvLC9eKD86YXNcXHMrXFx8KS8sL14oPzpcXHwpLywvXig/OihbXlxccyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0rKD89KFs9fn1cXHNcXC8uKXxdKSkpKS8sL14oPzpcXFsoXFxcXFxcXXxbXlxcXV0pKlxcXSkvLC9eKD86LikvLC9eKD86JCkvXTtcbmxleGVyLmNvbmRpdGlvbnMgPSB7XCJtdVwiOntcInJ1bGVzXCI6WzcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0XSxcImluY2x1c2l2ZVwiOmZhbHNlfSxcImVtdVwiOntcInJ1bGVzXCI6WzJdLFwiaW5jbHVzaXZlXCI6ZmFsc2V9LFwiY29tXCI6e1wicnVsZXNcIjpbNl0sXCJpbmNsdXNpdmVcIjpmYWxzZX0sXCJyYXdcIjp7XCJydWxlc1wiOlszLDQsNV0sXCJpbmNsdXNpdmVcIjpmYWxzZX0sXCJJTklUSUFMXCI6e1wicnVsZXNcIjpbMCwxLDQ0XSxcImluY2x1c2l2ZVwiOnRydWV9fTtcbnJldHVybiBsZXhlcjt9KSgpXG5wYXJzZXIubGV4ZXIgPSBsZXhlcjtcbmZ1bmN0aW9uIFBhcnNlciAoKSB7IHRoaXMueXkgPSB7fTsgfVBhcnNlci5wcm90b3R5cGUgPSBwYXJzZXI7cGFyc2VyLlBhcnNlciA9IFBhcnNlcjtcbnJldHVybiBuZXcgUGFyc2VyO1xufSkoKTtleHBvcnQgZGVmYXVsdCBoYW5kbGViYXJzO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi92aXNpdG9yJztcblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50KGFzdCkge1xuICByZXR1cm4gbmV3IFByaW50VmlzaXRvcigpLmFjY2VwdChhc3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUHJpbnRWaXNpdG9yKCkge1xuICB0aGlzLnBhZGRpbmcgPSAwO1xufVxuXG5QcmludFZpc2l0b3IucHJvdG90eXBlID0gbmV3IFZpc2l0b3IoKTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5wYWQgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgbGV0IG91dCA9ICcnO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5wYWRkaW5nOyBpIDwgbDsgaSsrKSB7XG4gICAgb3V0ICs9ICcgICc7XG4gIH1cblxuICBvdXQgKz0gc3RyaW5nICsgJ1xcbic7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLlByb2dyYW0gPSBmdW5jdGlvbihwcm9ncmFtKSB7XG4gIGxldCBvdXQgPSAnJyxcbiAgICAgIGJvZHkgPSBwcm9ncmFtLmJvZHksXG4gICAgICBpLCBsO1xuXG4gIGlmIChwcm9ncmFtLmJsb2NrUGFyYW1zKSB7XG4gICAgbGV0IGJsb2NrUGFyYW1zID0gJ0JMT0NLIFBBUkFNUzogWyc7XG4gICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW0uYmxvY2tQYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgYmxvY2tQYXJhbXMgKz0gJyAnICsgcHJvZ3JhbS5ibG9ja1BhcmFtc1tpXTtcbiAgICB9XG4gICAgYmxvY2tQYXJhbXMgKz0gJyBdJztcbiAgICBvdXQgKz0gdGhpcy5wYWQoYmxvY2tQYXJhbXMpO1xuICB9XG5cbiAgZm9yIChpID0gMCwgbCA9IGJvZHkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3V0ICs9IHRoaXMuYWNjZXB0KGJvZHlbaV0pO1xuICB9XG5cbiAgdGhpcy5wYWRkaW5nLS07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuTXVzdGFjaGVTdGF0ZW1lbnQgPSBmdW5jdGlvbihtdXN0YWNoZSkge1xuICByZXR1cm4gdGhpcy5wYWQoJ3t7ICcgKyB0aGlzLlN1YkV4cHJlc3Npb24obXVzdGFjaGUpICsgJyB9fScpO1xufTtcblByaW50VmlzaXRvci5wcm90b3R5cGUuRGVjb3JhdG9yID0gZnVuY3Rpb24obXVzdGFjaGUpIHtcbiAgcmV0dXJuIHRoaXMucGFkKCd7eyBESVJFQ1RJVkUgJyArIHRoaXMuU3ViRXhwcmVzc2lvbihtdXN0YWNoZSkgKyAnIH19Jyk7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLkJsb2NrU3RhdGVtZW50ID1cblByaW50VmlzaXRvci5wcm90b3R5cGUuRGVjb3JhdG9yQmxvY2sgPSBmdW5jdGlvbihibG9jaykge1xuICBsZXQgb3V0ID0gJyc7XG5cbiAgb3V0ICs9IHRoaXMucGFkKChibG9jay50eXBlID09PSAnRGVjb3JhdG9yQmxvY2snID8gJ0RJUkVDVElWRSAnIDogJycpICsgJ0JMT0NLOicpO1xuICB0aGlzLnBhZGRpbmcrKztcbiAgb3V0ICs9IHRoaXMucGFkKHRoaXMuU3ViRXhwcmVzc2lvbihibG9jaykpO1xuICBpZiAoYmxvY2sucHJvZ3JhbSkge1xuICAgIG91dCArPSB0aGlzLnBhZCgnUFJPR1JBTTonKTtcbiAgICB0aGlzLnBhZGRpbmcrKztcbiAgICBvdXQgKz0gdGhpcy5hY2NlcHQoYmxvY2sucHJvZ3JhbSk7XG4gICAgdGhpcy5wYWRkaW5nLS07XG4gIH1cbiAgaWYgKGJsb2NrLmludmVyc2UpIHtcbiAgICBpZiAoYmxvY2sucHJvZ3JhbSkgeyB0aGlzLnBhZGRpbmcrKzsgfVxuICAgIG91dCArPSB0aGlzLnBhZCgne3tefX0nKTtcbiAgICB0aGlzLnBhZGRpbmcrKztcbiAgICBvdXQgKz0gdGhpcy5hY2NlcHQoYmxvY2suaW52ZXJzZSk7XG4gICAgdGhpcy5wYWRkaW5nLS07XG4gICAgaWYgKGJsb2NrLnByb2dyYW0pIHsgdGhpcy5wYWRkaW5nLS07IH1cbiAgfVxuICB0aGlzLnBhZGRpbmctLTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5QYXJ0aWFsU3RhdGVtZW50ID0gZnVuY3Rpb24ocGFydGlhbCkge1xuICBsZXQgY29udGVudCA9ICdQQVJUSUFMOicgKyBwYXJ0aWFsLm5hbWUub3JpZ2luYWw7XG4gIGlmIChwYXJ0aWFsLnBhcmFtc1swXSkge1xuICAgIGNvbnRlbnQgKz0gJyAnICsgdGhpcy5hY2NlcHQocGFydGlhbC5wYXJhbXNbMF0pO1xuICB9XG4gIGlmIChwYXJ0aWFsLmhhc2gpIHtcbiAgICBjb250ZW50ICs9ICcgJyArIHRoaXMuYWNjZXB0KHBhcnRpYWwuaGFzaCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMucGFkKCd7ez4gJyArIGNvbnRlbnQgKyAnIH19Jyk7XG59O1xuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5QYXJ0aWFsQmxvY2tTdGF0ZW1lbnQgPSBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gIGxldCBjb250ZW50ID0gJ1BBUlRJQUwgQkxPQ0s6JyArIHBhcnRpYWwubmFtZS5vcmlnaW5hbDtcbiAgaWYgKHBhcnRpYWwucGFyYW1zWzBdKSB7XG4gICAgY29udGVudCArPSAnICcgKyB0aGlzLmFjY2VwdChwYXJ0aWFsLnBhcmFtc1swXSk7XG4gIH1cbiAgaWYgKHBhcnRpYWwuaGFzaCkge1xuICAgIGNvbnRlbnQgKz0gJyAnICsgdGhpcy5hY2NlcHQocGFydGlhbC5oYXNoKTtcbiAgfVxuXG4gIGNvbnRlbnQgKz0gJyAnICsgdGhpcy5wYWQoJ1BST0dSQU06Jyk7XG4gIHRoaXMucGFkZGluZysrO1xuICBjb250ZW50ICs9IHRoaXMuYWNjZXB0KHBhcnRpYWwucHJvZ3JhbSk7XG4gIHRoaXMucGFkZGluZy0tO1xuXG4gIHJldHVybiB0aGlzLnBhZCgne3s+ICcgKyBjb250ZW50ICsgJyB9fScpO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5Db250ZW50U3RhdGVtZW50ID0gZnVuY3Rpb24oY29udGVudCkge1xuICByZXR1cm4gdGhpcy5wYWQoXCJDT05URU5UWyAnXCIgKyBjb250ZW50LnZhbHVlICsgXCInIF1cIik7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLkNvbW1lbnRTdGF0ZW1lbnQgPSBmdW5jdGlvbihjb21tZW50KSB7XG4gIHJldHVybiB0aGlzLnBhZChcInt7ISAnXCIgKyBjb21tZW50LnZhbHVlICsgXCInIH19XCIpO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5TdWJFeHByZXNzaW9uID0gZnVuY3Rpb24oc2V4cHIpIHtcbiAgbGV0IHBhcmFtcyA9IHNleHByLnBhcmFtcyxcbiAgICAgIHBhcmFtU3RyaW5ncyA9IFtdLFxuICAgICAgaGFzaDtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcmFtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBwYXJhbVN0cmluZ3MucHVzaCh0aGlzLmFjY2VwdChwYXJhbXNbaV0pKTtcbiAgfVxuXG4gIHBhcmFtcyA9ICdbJyArIHBhcmFtU3RyaW5ncy5qb2luKCcsICcpICsgJ10nO1xuXG4gIGhhc2ggPSBzZXhwci5oYXNoID8gJyAnICsgdGhpcy5hY2NlcHQoc2V4cHIuaGFzaCkgOiAnJztcblxuICByZXR1cm4gdGhpcy5hY2NlcHQoc2V4cHIucGF0aCkgKyAnICcgKyBwYXJhbXMgKyBoYXNoO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5QYXRoRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKGlkKSB7XG4gIGxldCBwYXRoID0gaWQucGFydHMuam9pbignLycpO1xuICByZXR1cm4gKGlkLmRhdGEgPyAnQCcgOiAnJykgKyAnUEFUSDonICsgcGF0aDtcbn07XG5cblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5TdHJpbmdMaXRlcmFsID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHJldHVybiAnXCInICsgc3RyaW5nLnZhbHVlICsgJ1wiJztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuTnVtYmVyTGl0ZXJhbCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICByZXR1cm4gJ05VTUJFUnsnICsgbnVtYmVyLnZhbHVlICsgJ30nO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5Cb29sZWFuTGl0ZXJhbCA9IGZ1bmN0aW9uKGJvb2wpIHtcbiAgcmV0dXJuICdCT09MRUFOeycgKyBib29sLnZhbHVlICsgJ30nO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5VbmRlZmluZWRMaXRlcmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnVU5ERUZJTkVEJztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuTnVsbExpdGVyYWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICdOVUxMJztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuSGFzaCA9IGZ1bmN0aW9uKGhhc2gpIHtcbiAgbGV0IHBhaXJzID0gaGFzaC5wYWlycyxcbiAgICAgIGpvaW5lZFBhaXJzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBqb2luZWRQYWlycy5wdXNoKHRoaXMuYWNjZXB0KHBhaXJzW2ldKSk7XG4gIH1cblxuICByZXR1cm4gJ0hBU0h7JyArIGpvaW5lZFBhaXJzLmpvaW4oJywgJykgKyAnfSc7XG59O1xuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5IYXNoUGFpciA9IGZ1bmN0aW9uKHBhaXIpIHtcbiAgcmV0dXJuIHBhaXIua2V5ICsgJz0nICsgdGhpcy5hY2NlcHQocGFpci52YWx1ZSk7XG59O1xuLyogZXNsaW50LWVuYWJsZSBuZXctY2FwICovXG4iLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmZ1bmN0aW9uIFZpc2l0b3IoKSB7XG4gIHRoaXMucGFyZW50cyA9IFtdO1xufVxuXG5WaXNpdG9yLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFZpc2l0b3IsXG4gIG11dGF0aW5nOiBmYWxzZSxcblxuICAvLyBWaXNpdHMgYSBnaXZlbiB2YWx1ZS4gSWYgbXV0YXRpbmcsIHdpbGwgcmVwbGFjZSB0aGUgdmFsdWUgaWYgbmVjZXNzYXJ5LlxuICBhY2NlcHRLZXk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmFjY2VwdChub2RlW25hbWVdKTtcbiAgICBpZiAodGhpcy5tdXRhdGluZykge1xuICAgICAgLy8gSGFja3kgc2FuaXR5IGNoZWNrOiBUaGlzIG1heSBoYXZlIGEgZmV3IGZhbHNlIHBvc2l0aXZlcyBmb3IgdHlwZSBmb3IgdGhlIGhlbHBlclxuICAgICAgLy8gbWV0aG9kcyBidXQgd2lsbCBnZW5lcmFsbHkgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGhvdXQgYSBsb3Qgb2Ygb3ZlcmhlYWQuXG4gICAgICBpZiAodmFsdWUgJiYgIVZpc2l0b3IucHJvdG90eXBlW3ZhbHVlLnR5cGVdKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1VuZXhwZWN0ZWQgbm9kZSB0eXBlIFwiJyArIHZhbHVlLnR5cGUgKyAnXCIgZm91bmQgd2hlbiBhY2NlcHRpbmcgJyArIG5hbWUgKyAnIG9uICcgKyBub2RlLnR5cGUpO1xuICAgICAgfVxuICAgICAgbm9kZVtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICAvLyBQZXJmb3JtcyBhbiBhY2NlcHQgb3BlcmF0aW9uIHdpdGggYWRkZWQgc2FuaXR5IGNoZWNrIHRvIGVuc3VyZVxuICAvLyByZXF1aXJlZCBrZXlzIGFyZSBub3QgcmVtb3ZlZC5cbiAgYWNjZXB0UmVxdWlyZWQ6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgICB0aGlzLmFjY2VwdEtleShub2RlLCBuYW1lKTtcblxuICAgIGlmICghbm9kZVtuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihub2RlLnR5cGUgKyAnIHJlcXVpcmVzICcgKyBuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVHJhdmVyc2VzIGEgZ2l2ZW4gYXJyYXkuIElmIG11dGF0aW5nLCBlbXB0eSByZXNwbnNlcyB3aWxsIGJlIHJlbW92ZWRcbiAgLy8gZm9yIGNoaWxkIGVsZW1lbnRzLlxuICBhY2NlcHRBcnJheTogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5hY2NlcHRLZXkoYXJyYXksIGkpO1xuXG4gICAgICBpZiAoIWFycmF5W2ldKSB7XG4gICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuICAgICAgICBsLS07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFjY2VwdDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKCFvYmplY3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogU2FuaXR5IGNvZGUgKi9cbiAgICBpZiAoIXRoaXNbb2JqZWN0LnR5cGVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHR5cGU6ICcgKyBvYmplY3QudHlwZSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jdXJyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudHMudW5zaGlmdCh0aGlzLmN1cnJlbnQpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnQgPSBvYmplY3Q7XG5cbiAgICBsZXQgcmV0ID0gdGhpc1tvYmplY3QudHlwZV0ob2JqZWN0KTtcblxuICAgIHRoaXMuY3VycmVudCA9IHRoaXMucGFyZW50cy5zaGlmdCgpO1xuXG4gICAgaWYgKCF0aGlzLm11dGF0aW5nIHx8IHJldCkge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IGVsc2UgaWYgKHJldCAhPT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICB9LFxuXG4gIFByb2dyYW06IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgICB0aGlzLmFjY2VwdEFycmF5KHByb2dyYW0uYm9keSk7XG4gIH0sXG5cbiAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHZpc2l0U3ViRXhwcmVzc2lvbixcbiAgRGVjb3JhdG9yOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cbiAgQmxvY2tTdGF0ZW1lbnQ6IHZpc2l0QmxvY2ssXG4gIERlY29yYXRvckJsb2NrOiB2aXNpdEJsb2NrLFxuXG4gIFBhcnRpYWxTdGF0ZW1lbnQ6IHZpc2l0UGFydGlhbCxcbiAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gICAgdmlzaXRQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCk7XG5cbiAgICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAncHJvZ3JhbScpO1xuICB9LFxuXG4gIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uKC8qIGNvbnRlbnQgKi8pIHt9LFxuICBDb21tZW50U3RhdGVtZW50OiBmdW5jdGlvbigvKiBjb21tZW50ICovKSB7fSxcblxuICBTdWJFeHByZXNzaW9uOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cbiAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uKC8qIHBhdGggKi8pIHt9LFxuXG4gIFN0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uKC8qIHN0cmluZyAqLykge30sXG4gIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uKC8qIG51bWJlciAqLykge30sXG4gIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbigvKiBib29sICovKSB7fSxcbiAgVW5kZWZpbmVkTGl0ZXJhbDogZnVuY3Rpb24oLyogbGl0ZXJhbCAqLykge30sXG4gIE51bGxMaXRlcmFsOiBmdW5jdGlvbigvKiBsaXRlcmFsICovKSB7fSxcblxuICBIYXNoOiBmdW5jdGlvbihoYXNoKSB7XG4gICAgdGhpcy5hY2NlcHRBcnJheShoYXNoLnBhaXJzKTtcbiAgfSxcbiAgSGFzaFBhaXI6IGZ1bmN0aW9uKHBhaXIpIHtcbiAgICB0aGlzLmFjY2VwdFJlcXVpcmVkKHBhaXIsICd2YWx1ZScpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB2aXNpdFN1YkV4cHJlc3Npb24obXVzdGFjaGUpIHtcbiAgdGhpcy5hY2NlcHRSZXF1aXJlZChtdXN0YWNoZSwgJ3BhdGgnKTtcbiAgdGhpcy5hY2NlcHRBcnJheShtdXN0YWNoZS5wYXJhbXMpO1xuICB0aGlzLmFjY2VwdEtleShtdXN0YWNoZSwgJ2hhc2gnKTtcbn1cbmZ1bmN0aW9uIHZpc2l0QmxvY2soYmxvY2spIHtcbiAgdmlzaXRTdWJFeHByZXNzaW9uLmNhbGwodGhpcywgYmxvY2spO1xuXG4gIHRoaXMuYWNjZXB0S2V5KGJsb2NrLCAncHJvZ3JhbScpO1xuICB0aGlzLmFjY2VwdEtleShibG9jaywgJ2ludmVyc2UnKTtcbn1cbmZ1bmN0aW9uIHZpc2l0UGFydGlhbChwYXJ0aWFsKSB7XG4gIHRoaXMuYWNjZXB0UmVxdWlyZWQocGFydGlhbCwgJ25hbWUnKTtcbiAgdGhpcy5hY2NlcHRBcnJheShwYXJ0aWFsLnBhcmFtcyk7XG4gIHRoaXMuYWNjZXB0S2V5KHBhcnRpYWwsICdoYXNoJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpc2l0b3I7XG4iLCJpbXBvcnQgVmlzaXRvciBmcm9tICcuL3Zpc2l0b3InO1xuXG5mdW5jdGlvbiBXaGl0ZXNwYWNlQ29udHJvbChvcHRpb25zID0ge30pIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn1cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZSA9IG5ldyBWaXNpdG9yKCk7XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Qcm9ncmFtID0gZnVuY3Rpb24ocHJvZ3JhbSkge1xuICBjb25zdCBkb1N0YW5kYWxvbmUgPSAhdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmU7XG5cbiAgbGV0IGlzUm9vdCA9ICF0aGlzLmlzUm9vdFNlZW47XG4gIHRoaXMuaXNSb290U2VlbiA9IHRydWU7XG5cbiAgbGV0IGJvZHkgPSBwcm9ncmFtLmJvZHk7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gYm9keS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgY3VycmVudCA9IGJvZHlbaV0sXG4gICAgICAgIHN0cmlwID0gdGhpcy5hY2NlcHQoY3VycmVudCk7XG5cbiAgICBpZiAoIXN0cmlwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBsZXQgX2lzUHJldldoaXRlc3BhY2UgPSBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCksXG4gICAgICAgIF9pc05leHRXaGl0ZXNwYWNlID0gaXNOZXh0V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpLFxuXG4gICAgICAgIG9wZW5TdGFuZGFsb25lID0gc3RyaXAub3BlblN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UsXG4gICAgICAgIGNsb3NlU3RhbmRhbG9uZSA9IHN0cmlwLmNsb3NlU3RhbmRhbG9uZSAmJiBfaXNOZXh0V2hpdGVzcGFjZSxcbiAgICAgICAgaW5saW5lU3RhbmRhbG9uZSA9IHN0cmlwLmlubGluZVN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UgJiYgX2lzTmV4dFdoaXRlc3BhY2U7XG5cbiAgICBpZiAoc3RyaXAuY2xvc2UpIHtcbiAgICAgIG9taXRSaWdodChib2R5LCBpLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKHN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KGJvZHksIGksIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgaW5saW5lU3RhbmRhbG9uZSkge1xuICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xuXG4gICAgICBpZiAob21pdExlZnQoYm9keSwgaSkpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIG9uIGEgc3RhbmRhbG9uZSBub2RlLCBzYXZlIHRoZSBpbmRlbnQgaW5mbyBmb3IgcGFydGlhbHNcbiAgICAgICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gJ1BhcnRpYWxTdGF0ZW1lbnQnKSB7XG4gICAgICAgICAgLy8gUHVsbCBvdXQgdGhlIHdoaXRlc3BhY2UgZnJvbSB0aGUgZmluYWwgbGluZVxuICAgICAgICAgIGN1cnJlbnQuaW5kZW50ID0gKC8oWyBcXHRdKyQpLykuZXhlYyhib2R5W2kgLSAxXS5vcmlnaW5hbClbMV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRvU3RhbmRhbG9uZSAmJiBvcGVuU3RhbmRhbG9uZSkge1xuICAgICAgb21pdFJpZ2h0KChjdXJyZW50LnByb2dyYW0gfHwgY3VycmVudC5pbnZlcnNlKS5ib2R5KTtcblxuICAgICAgLy8gU3RyaXAgb3V0IHRoZSBwcmV2aW91cyBjb250ZW50IG5vZGUgaWYgaXQncyB3aGl0ZXNwYWNlIG9ubHlcbiAgICAgIG9taXRMZWZ0KGJvZHksIGkpO1xuICAgIH1cbiAgICBpZiAoZG9TdGFuZGFsb25lICYmIGNsb3NlU3RhbmRhbG9uZSkge1xuICAgICAgLy8gQWx3YXlzIHN0cmlwIHRoZSBuZXh0IG5vZGVcbiAgICAgIG9taXRSaWdodChib2R5LCBpKTtcblxuICAgICAgb21pdExlZnQoKGN1cnJlbnQuaW52ZXJzZSB8fCBjdXJyZW50LnByb2dyYW0pLmJvZHkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm9ncmFtO1xufTtcblxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkJsb2NrU3RhdGVtZW50ID1cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5EZWNvcmF0b3JCbG9jayA9XG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbEJsb2NrU3RhdGVtZW50ID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgdGhpcy5hY2NlcHQoYmxvY2sucHJvZ3JhbSk7XG4gIHRoaXMuYWNjZXB0KGJsb2NrLmludmVyc2UpO1xuXG4gIC8vIEZpbmQgdGhlIGludmVyc2UgcHJvZ3JhbSB0aGF0IGlzIGludm9sZWQgd2l0aCB3aGl0ZXNwYWNlIHN0cmlwcGluZy5cbiAgbGV0IHByb2dyYW0gPSBibG9jay5wcm9ncmFtIHx8IGJsb2NrLmludmVyc2UsXG4gICAgICBpbnZlcnNlID0gYmxvY2sucHJvZ3JhbSAmJiBibG9jay5pbnZlcnNlLFxuICAgICAgZmlyc3RJbnZlcnNlID0gaW52ZXJzZSxcbiAgICAgIGxhc3RJbnZlcnNlID0gaW52ZXJzZTtcblxuICBpZiAoaW52ZXJzZSAmJiBpbnZlcnNlLmNoYWluZWQpIHtcbiAgICBmaXJzdEludmVyc2UgPSBpbnZlcnNlLmJvZHlbMF0ucHJvZ3JhbTtcblxuICAgIC8vIFdhbGsgdGhlIGludmVyc2UgY2hhaW4gdG8gZmluZCB0aGUgbGFzdCBpbnZlcnNlIHRoYXQgaXMgYWN0dWFsbHkgaW4gdGhlIGNoYWluLlxuICAgIHdoaWxlIChsYXN0SW52ZXJzZS5jaGFpbmVkKSB7XG4gICAgICBsYXN0SW52ZXJzZSA9IGxhc3RJbnZlcnNlLmJvZHlbbGFzdEludmVyc2UuYm9keS5sZW5ndGggLSAxXS5wcm9ncmFtO1xuICAgIH1cbiAgfVxuXG4gIGxldCBzdHJpcCA9IHtcbiAgICBvcGVuOiBibG9jay5vcGVuU3RyaXAub3BlbixcbiAgICBjbG9zZTogYmxvY2suY2xvc2VTdHJpcC5jbG9zZSxcblxuICAgIC8vIERldGVybWluZSB0aGUgc3RhbmRhbG9uZSBjYW5kaWFjeS4gQmFzaWNhbGx5IGZsYWcgb3VyIGNvbnRlbnQgYXMgYmVpbmcgcG9zc2libHkgc3RhbmRhbG9uZVxuICAgIC8vIHNvIG91ciBwYXJlbnQgY2FuIGRldGVybWluZSBpZiB3ZSBhY3R1YWxseSBhcmUgc3RhbmRhbG9uZVxuICAgIG9wZW5TdGFuZGFsb25lOiBpc05leHRXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSksXG4gICAgY2xvc2VTdGFuZGFsb25lOiBpc1ByZXZXaGl0ZXNwYWNlKChmaXJzdEludmVyc2UgfHwgcHJvZ3JhbSkuYm9keSlcbiAgfTtcblxuICBpZiAoYmxvY2sub3BlblN0cmlwLmNsb3NlKSB7XG4gICAgb21pdFJpZ2h0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoaW52ZXJzZSkge1xuICAgIGxldCBpbnZlcnNlU3RyaXAgPSBibG9jay5pbnZlcnNlU3RyaXA7XG5cbiAgICBpZiAoaW52ZXJzZVN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGludmVyc2VTdHJpcC5jbG9zZSkge1xuICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGJsb2NrLmNsb3NlU3RyaXAub3Blbikge1xuICAgICAgb21pdExlZnQobGFzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gRmluZCBzdGFuZGFsb25lIGVsc2Ugc3RhdG1lbnRzXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlU3RhbmRhbG9uZVxuICAgICAgICAmJiBpc1ByZXZXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSlcbiAgICAgICAgJiYgaXNOZXh0V2hpdGVzcGFjZShmaXJzdEludmVyc2UuYm9keSkpIHtcbiAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSk7XG4gICAgICBvbWl0UmlnaHQoZmlyc3RJbnZlcnNlLmJvZHkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChibG9jay5jbG9zZVN0cmlwLm9wZW4pIHtcbiAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmlwO1xufTtcblxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkRlY29yYXRvciA9XG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuTXVzdGFjaGVTdGF0ZW1lbnQgPSBmdW5jdGlvbihtdXN0YWNoZSkge1xuICByZXR1cm4gbXVzdGFjaGUuc3RyaXA7XG59O1xuXG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbFN0YXRlbWVudCA9XG4gICAgV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkNvbW1lbnRTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGxldCBzdHJpcCA9IG5vZGUuc3RyaXAgfHwge307XG4gIHJldHVybiB7XG4gICAgaW5saW5lU3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBvcGVuOiBzdHJpcC5vcGVuLFxuICAgIGNsb3NlOiBzdHJpcC5jbG9zZVxuICB9O1xufTtcblxuXG5mdW5jdGlvbiBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCkge1xuICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IGJvZHkubGVuZ3RoO1xuICB9XG5cbiAgLy8gTm9kZXMgdGhhdCBlbmQgd2l0aCBuZXdsaW5lcyBhcmUgY29uc2lkZXJlZCB3aGl0ZXNwYWNlIChidXQgYXJlIHNwZWNpYWxcbiAgLy8gY2FzZWQgZm9yIHN0cmlwIG9wZXJhdGlvbnMpXG4gIGxldCBwcmV2ID0gYm9keVtpIC0gMV0sXG4gICAgICBzaWJsaW5nID0gYm9keVtpIC0gMl07XG4gIGlmICghcHJldikge1xuICAgIHJldHVybiBpc1Jvb3Q7XG4gIH1cblxuICBpZiAocHJldi50eXBlID09PSAnQ29udGVudFN0YXRlbWVudCcpIHtcbiAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/ICgvXFxyP1xcblxccyo/JC8pIDogKC8oXnxcXHI/XFxuKVxccyo/JC8pKS50ZXN0KHByZXYub3JpZ2luYWwpO1xuICB9XG59XG5mdW5jdGlvbiBpc05leHRXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCkge1xuICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IC0xO1xuICB9XG5cbiAgbGV0IG5leHQgPSBib2R5W2kgKyAxXSxcbiAgICAgIHNpYmxpbmcgPSBib2R5W2kgKyAyXTtcbiAgaWYgKCFuZXh0KSB7XG4gICAgcmV0dXJuIGlzUm9vdDtcbiAgfVxuXG4gIGlmIChuZXh0LnR5cGUgPT09ICdDb250ZW50U3RhdGVtZW50Jykge1xuICAgIHJldHVybiAoc2libGluZyB8fCAhaXNSb290ID8gKC9eXFxzKj9cXHI/XFxuLykgOiAoL15cXHMqPyhcXHI/XFxufCQpLykpLnRlc3QobmV4dC5vcmlnaW5hbCk7XG4gIH1cbn1cblxuLy8gTWFya3MgdGhlIG5vZGUgdG8gdGhlIHJpZ2h0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxuLy8gSS5lLiB7e2Zvb319JyAnIHdpbGwgbWFyayB0aGUgJyAnIG5vZGUgYXMgb21pdHRlZC5cbi8vXG4vLyBJZiBpIGlzIHVuZGVmaW5lZCwgdGhlbiB0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSBtYXJrZWQgYXMgc3VjaC5cbi8vXG4vLyBJZiBtdWxpdHBsZSBpcyB0cnV0aHkgdGhlbiBhbGwgd2hpdGVzcGFjZSB3aWxsIGJlIHN0cmlwcGVkIG91dCB1bnRpbCBub24td2hpdGVzcGFjZVxuLy8gY29udGVudCBpcyBtZXQuXG5mdW5jdGlvbiBvbWl0UmlnaHQoYm9keSwgaSwgbXVsdGlwbGUpIHtcbiAgbGV0IGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IDAgOiBpICsgMV07XG4gIGlmICghY3VycmVudCB8fCBjdXJyZW50LnR5cGUgIT09ICdDb250ZW50U3RhdGVtZW50JyB8fCAoIW11bHRpcGxlICYmIGN1cnJlbnQucmlnaHRTdHJpcHBlZCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgb3JpZ2luYWwgPSBjdXJyZW50LnZhbHVlO1xuICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gKC9eXFxzKy8pIDogKC9eWyBcXHRdKlxccj9cXG4/LyksICcnKTtcbiAgY3VycmVudC5yaWdodFN0cmlwcGVkID0gY3VycmVudC52YWx1ZSAhPT0gb3JpZ2luYWw7XG59XG5cbi8vIE1hcmtzIHRoZSBub2RlIHRvIHRoZSBsZWZ0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxuLy8gSS5lLiAnICd7e2Zvb319IHdpbGwgbWFyayB0aGUgJyAnIG5vZGUgYXMgb21pdHRlZC5cbi8vXG4vLyBJZiBpIGlzIHVuZGVmaW5lZCB0aGVuIHRoZSBsYXN0IGNoaWxkIHdpbGwgYmUgbWFya2VkIGFzIHN1Y2guXG4vL1xuLy8gSWYgbXVsaXRwbGUgaXMgdHJ1dGh5IHRoZW4gYWxsIHdoaXRlc3BhY2Ugd2lsbCBiZSBzdHJpcHBlZCBvdXQgdW50aWwgbm9uLXdoaXRlc3BhY2Vcbi8vIGNvbnRlbnQgaXMgbWV0LlxuZnVuY3Rpb24gb21pdExlZnQoYm9keSwgaSwgbXVsdGlwbGUpIHtcbiAgbGV0IGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IGJvZHkubGVuZ3RoIC0gMSA6IGkgLSAxXTtcbiAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQudHlwZSAhPT0gJ0NvbnRlbnRTdGF0ZW1lbnQnIHx8ICghbXVsdGlwbGUgJiYgY3VycmVudC5sZWZ0U3RyaXBwZWQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2Ugb21pdCB0aGUgbGFzdCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5IGFuZCBub3QgcHJlY2VlZGVkIGJ5IGEgbm9uLWNvbnRlbnQgbm9kZS5cbiAgbGV0IG9yaWdpbmFsID0gY3VycmVudC52YWx1ZTtcbiAgY3VycmVudC52YWx1ZSA9IGN1cnJlbnQudmFsdWUucmVwbGFjZShtdWx0aXBsZSA/ICgvXFxzKyQvKSA6ICgvWyBcXHRdKyQvKSwgJycpO1xuICBjdXJyZW50LmxlZnRTdHJpcHBlZCA9IGN1cnJlbnQudmFsdWUgIT09IG9yaWdpbmFsO1xuICByZXR1cm4gY3VycmVudC5sZWZ0U3RyaXBwZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdoaXRlc3BhY2VDb250cm9sO1xuIiwiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG5cbiIsImltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGxldCByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFydGlhbHMgc3RhY2sgZnJhbWUgcHJpb3IgdG8gZXhlYy5cbiAgICAgICAgbGV0IG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBleHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG4gICAgICAgIGxldCByZXQgPSBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iLCJcbmNvbnN0IGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnbWVzc2FnZScsICduYW1lJywgJ251bWJlcicsICdzdGFjayddO1xuXG5mdW5jdGlvbiBFeGNlcHRpb24obWVzc2FnZSwgbm9kZSkge1xuICBsZXQgbG9jID0gbm9kZSAmJiBub2RlLmxvYyxcbiAgICAgIGxpbmUsXG4gICAgICBjb2x1bW47XG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgY29sdW1uID0gbG9jLnN0YXJ0LmNvbHVtbjtcblxuICAgIG1lc3NhZ2UgKz0gJyAtICcgKyBsaW5lICsgJzonICsgY29sdW1uO1xuICB9XG5cbiAgbGV0IHRtcCA9IEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gIC8vIFVuZm9ydHVuYXRlbHkgZXJyb3JzIGFyZSBub3QgZW51bWVyYWJsZSBpbiBDaHJvbWUgKGF0IGxlYXN0KSwgc28gYGZvciBwcm9wIGluIHRtcGAgZG9lc24ndCB3b3JrLlxuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBlcnJvclByb3BzLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzW2Vycm9yUHJvcHNbaWR4XV0gPSB0bXBbZXJyb3JQcm9wc1tpZHhdXTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEV4Y2VwdGlvbik7XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChsb2MpIHtcbiAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmU7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBFeGNlcHRpb247XG4iLCJpbXBvcnQgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2Jsb2NrLWhlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlckVhY2ggZnJvbSAnLi9oZWxwZXJzL2VhY2gnO1xuaW1wb3J0IHJlZ2lzdGVySGVscGVyTWlzc2luZyBmcm9tICcuL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcnO1xuaW1wb3J0IHJlZ2lzdGVySWYgZnJvbSAnLi9oZWxwZXJzL2lmJztcbmltcG9ydCByZWdpc3RlckxvZyBmcm9tICcuL2hlbHBlcnMvbG9nJztcbmltcG9ydCByZWdpc3Rlckxvb2t1cCBmcm9tICcuL2hlbHBlcnMvbG9va3VwJztcbmltcG9ydCByZWdpc3RlcldpdGggZnJvbSAnLi9oZWxwZXJzL3dpdGgnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0SGVscGVycyhpbnN0YW5jZSkge1xuICByZWdpc3RlckJsb2NrSGVscGVyTWlzc2luZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyRWFjaChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVySGVscGVyTWlzc2luZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVySWYoaW5zdGFuY2UpO1xuICByZWdpc3RlckxvZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyTG9va3VwKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJXaXRoKGluc3RhbmNlKTtcbn1cbiIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzQXJyYXksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2VhY2gnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdNdXN0IHBhc3MgaXRlcmF0b3IgdG8gI2VhY2gnKTtcbiAgICB9XG5cbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuLFxuICAgICAgICBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgcmV0ID0gJycsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHRQYXRoO1xuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgY29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKSArICcuJztcbiAgICB9XG5cbiAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0KSkgeyBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpOyB9XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleGVjSXRlcmF0aW9uKGZpZWxkLCBpbmRleCwgbGFzdCkge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgZGF0YS5rZXkgPSBmaWVsZDtcbiAgICAgICAgZGF0YS5pbmRleCA9IGluZGV4O1xuICAgICAgICBkYXRhLmZpcnN0ID0gaW5kZXggPT09IDA7XG4gICAgICAgIGRhdGEubGFzdCA9ICEhbGFzdDtcblxuICAgICAgICBpZiAoY29udGV4dFBhdGgpIHtcbiAgICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gY29udGV4dFBhdGggKyBmaWVsZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXQgPSByZXQgKyBmbihjb250ZXh0W2ZpZWxkXSwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtczogYmxvY2tQYXJhbXMoW2NvbnRleHRbZmllbGRdLCBmaWVsZF0sIFtjb250ZXh0UGF0aCArIGZpZWxkLCBudWxsXSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKGlzQXJyYXkoY29udGV4dCkpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgaW4gY29udGV4dCkge1xuICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByaW9yS2V5O1xuXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgaWYgKGNvbnRleHQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgLy8gV2UncmUgcnVubmluZyB0aGUgaXRlcmF0aW9ucyBvbmUgc3RlcCBvdXQgb2Ygc3luYyBzbyB3ZSBjYW4gZGV0ZWN0XG4gICAgICAgICAgICAvLyB0aGUgbGFzdCBpdGVyYXRpb24gd2l0aG91dCBoYXZlIHRvIHNjYW4gdGhlIG9iamVjdCB0d2ljZSBhbmQgY3JlYXRlXG4gICAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJpb3JLZXkgPSBrZXk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdoZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24oLyogW2FyZ3MsIF1vcHRpb25zICovKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdNaXNzaW5nIGhlbHBlcjogXCInICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5uYW1lICsgJ1wiJyk7XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7aXNFbXB0eSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaWYnLCBmdW5jdGlvbihjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkgeyBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7IH1cblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG4gICAgaWYgKCghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCkgfHwgaXNFbXB0eShjb25kaXRpb25hbCkpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnNbJ2lmJ10uY2FsbCh0aGlzLCBjb25kaXRpb25hbCwge2ZuOiBvcHRpb25zLmludmVyc2UsIGludmVyc2U6IG9wdGlvbnMuZm4sIGhhc2g6IG9wdGlvbnMuaGFzaH0pO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb2cnLCBmdW5jdGlvbigvKiBtZXNzYWdlLCBvcHRpb25zICovKSB7XG4gICAgbGV0IGFyZ3MgPSBbdW5kZWZpbmVkXSxcbiAgICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICBsZXQgbGV2ZWwgPSAxO1xuICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmhhc2gubGV2ZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xuICAgIH1cbiAgICBhcmdzWzBdID0gbGV2ZWw7XG5cbiAgICBpbnN0YW5jZS5sb2coLi4uIGFyZ3MpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbihvYmosIGZpZWxkKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmpbZmllbGRdO1xuICB9KTtcbn1cbiIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNFbXB0eSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignd2l0aCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0KSkgeyBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpOyB9XG5cbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKCFpc0VtcHR5KGNvbnRleHQpKSB7XG4gICAgICBsZXQgZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IGJsb2NrUGFyYW1zKFtjb250ZXh0XSwgW2RhdGEgJiYgZGF0YS5jb250ZXh0UGF0aF0pXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtpbmRleE9mfSBmcm9tICcuL3V0aWxzJztcblxubGV0IGxvZ2dlciA9IHtcbiAgbWV0aG9kTWFwOiBbJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvciddLFxuICBsZXZlbDogJ2luZm8nLFxuXG4gIC8vIE1hcHMgYSBnaXZlbiBsZXZlbCB2YWx1ZSB0byB0aGUgYG1ldGhvZE1hcGAgaW5kZXhlcyBhYm92ZS5cbiAgbG9va3VwTGV2ZWw6IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBsZXZlbE1hcCA9IGluZGV4T2YobG9nZ2VyLm1ldGhvZE1hcCwgbGV2ZWwudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAobGV2ZWxNYXAgPj0gMCkge1xuICAgICAgICBsZXZlbCA9IGxldmVsTWFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWwgPSBwYXJzZUludChsZXZlbCwgMTApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsZXZlbDtcbiAgfSxcblxuICAvLyBDYW4gYmUgb3ZlcnJpZGRlbiBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudFxuICBsb2c6IGZ1bmN0aW9uKGxldmVsLCAuLi5tZXNzYWdlKSB7XG4gICAgbGV2ZWwgPSBsb2dnZXIubG9va3VwTGV2ZWwobGV2ZWwpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBsb2dnZXIubG9va3VwTGV2ZWwobG9nZ2VyLmxldmVsKSA8PSBsZXZlbCkge1xuICAgICAgbGV0IG1ldGhvZCA9IGxvZ2dlci5tZXRob2RNYXBbbGV2ZWxdO1xuICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHsgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgbWV0aG9kID0gJ2xvZyc7XG4gICAgICB9XG4gICAgICBjb25zb2xlW21ldGhvZF0oLi4ubWVzc2FnZSk7ICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9nZ2VyO1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oSGFuZGxlYmFycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBsZXQgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxuICAgICAgJEhhbmRsZWJhcnMgPSByb290LkhhbmRsZWJhcnM7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcbiAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xuICAgIH1cbiAgICByZXR1cm4gSGFuZGxlYmFycztcbiAgfTtcbn1cbiIsImltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQgeyBDT01QSUxFUl9SRVZJU0lPTiwgUkVWSVNJT05fQ0hBTkdFUywgY3JlYXRlRnJhbWUgfSBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSZXZpc2lvbihjb21waWxlckluZm8pIHtcbiAgY29uc3QgY29tcGlsZXJSZXZpc2lvbiA9IGNvbXBpbGVySW5mbyAmJiBjb21waWxlckluZm9bMF0gfHwgMSxcbiAgICAgICAgY3VycmVudFJldmlzaW9uID0gQ09NUElMRVJfUkVWSVNJT047XG5cbiAgaWYgKGNvbXBpbGVyUmV2aXNpb24gIT09IGN1cnJlbnRSZXZpc2lvbikge1xuICAgIGlmIChjb21waWxlclJldmlzaW9uIDwgY3VycmVudFJldmlzaW9uKSB7XG4gICAgICBjb25zdCBydW50aW1lVmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW2N1cnJlbnRSZXZpc2lvbl0sXG4gICAgICAgICAgICBjb21waWxlclZlcnNpb25zID0gUkVWSVNJT05fQ0hBTkdFU1tjb21waWxlclJldmlzaW9uXTtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGFuIG9sZGVyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgK1xuICAgICAgICAgICAgJ1BsZWFzZSB1cGRhdGUgeW91ciBwcmVjb21waWxlciB0byBhIG5ld2VyIHZlcnNpb24gKCcgKyBydW50aW1lVmVyc2lvbnMgKyAnKSBvciBkb3duZ3JhZGUgeW91ciBydW50aW1lIHRvIGFuIG9sZGVyIHZlcnNpb24gKCcgKyBjb21waWxlclZlcnNpb25zICsgJykuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVzZSB0aGUgZW1iZWRkZWQgdmVyc2lvbiBpbmZvIHNpbmNlIHRoZSBydW50aW1lIGRvZXNuJ3Qga25vdyBhYm91dCB0aGlzIHJldmlzaW9uIHlldFxuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYSBuZXdlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICtcbiAgICAgICAgICAgICdQbGVhc2UgdXBkYXRlIHlvdXIgcnVudGltZSB0byBhIG5ld2VyIHZlcnNpb24gKCcgKyBjb21waWxlckluZm9bMV0gKyAnKS4nKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlKHRlbXBsYXRlU3BlYywgZW52KSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICghZW52KSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignTm8gZW52aXJvbm1lbnQgcGFzc2VkIHRvIHRlbXBsYXRlJyk7XG4gIH1cbiAgaWYgKCF0ZW1wbGF0ZVNwZWMgfHwgIXRlbXBsYXRlU3BlYy5tYWluKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5rbm93biB0ZW1wbGF0ZSBvYmplY3Q6ICcgKyB0eXBlb2YgdGVtcGxhdGVTcGVjKTtcbiAgfVxuXG4gIHRlbXBsYXRlU3BlYy5tYWluLmRlY29yYXRvciA9IHRlbXBsYXRlU3BlYy5tYWluX2Q7XG5cbiAgLy8gTm90ZTogVXNpbmcgZW52LlZNIHJlZmVyZW5jZXMgcmF0aGVyIHRoYW4gbG9jYWwgdmFyIHJlZmVyZW5jZXMgdGhyb3VnaG91dCB0aGlzIHNlY3Rpb24gdG8gYWxsb3dcbiAgLy8gZm9yIGV4dGVybmFsIHVzZXJzIHRvIG92ZXJyaWRlIHRoZXNlIGFzIHBzdWVkby1zdXBwb3J0ZWQgQVBJcy5cbiAgZW52LlZNLmNoZWNrUmV2aXNpb24odGVtcGxhdGVTcGVjLmNvbXBpbGVyKTtcblxuICBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsV3JhcHBlcihwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgICAgY29udGV4dCA9IFV0aWxzLmV4dGVuZCh7fSwgY29udGV4dCwgb3B0aW9ucy5oYXNoKTtcbiAgICAgIGlmIChvcHRpb25zLmlkcykge1xuICAgICAgICBvcHRpb25zLmlkc1swXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFydGlhbCA9IGVudi5WTS5yZXNvbHZlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIGxldCByZXN1bHQgPSBlbnYuVk0uaW52b2tlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHJlc3VsdCA9PSBudWxsICYmIGVudi5jb21waWxlKSB7XG4gICAgICBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0gPSBlbnYuY29tcGlsZShwYXJ0aWFsLCB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJPcHRpb25zLCBlbnYpO1xuICAgICAgcmVzdWx0ID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIGlmIChvcHRpb25zLmluZGVudCkge1xuICAgICAgICBsZXQgbGluZXMgPSByZXN1bHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICghbGluZXNbaV0gJiYgaSArIDEgPT09IGwpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpbmVzW2ldID0gb3B0aW9ucy5pbmRlbnQgKyBsaW5lc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBjb21waWxlZCB3aGVuIHJ1bm5pbmcgaW4gcnVudGltZS1vbmx5IG1vZGUnKTtcbiAgICB9XG4gIH1cblxuICAvLyBKdXN0IGFkZCB3YXRlclxuICBsZXQgY29udGFpbmVyID0ge1xuICAgIHN0cmljdDogZnVuY3Rpb24ob2JqLCBuYW1lKSB7XG4gICAgICBpZiAoIShuYW1lIGluIG9iaikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignXCInICsgbmFtZSArICdcIiBub3QgZGVmaW5lZCBpbiAnICsgb2JqKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpbbmFtZV07XG4gICAgfSxcbiAgICBsb29rdXA6IGZ1bmN0aW9uKGRlcHRocywgbmFtZSkge1xuICAgICAgY29uc3QgbGVuID0gZGVwdGhzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGRlcHRoc1tpXSAmJiBkZXB0aHNbaV1bbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBkZXB0aHNbaV1bbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGxhbWJkYTogZnVuY3Rpb24oY3VycmVudCwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nID8gY3VycmVudC5jYWxsKGNvbnRleHQpIDogY3VycmVudDtcbiAgICB9LFxuXG4gICAgZXNjYXBlRXhwcmVzc2lvbjogVXRpbHMuZXNjYXBlRXhwcmVzc2lvbixcbiAgICBpbnZva2VQYXJ0aWFsOiBpbnZva2VQYXJ0aWFsV3JhcHBlcixcblxuICAgIGZuOiBmdW5jdGlvbihpKSB7XG4gICAgICBsZXQgcmV0ID0gdGVtcGxhdGVTcGVjW2ldO1xuICAgICAgcmV0LmRlY29yYXRvciA9IHRlbXBsYXRlU3BlY1tpICsgJ19kJ107XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG5cbiAgICBwcm9ncmFtczogW10sXG4gICAgcHJvZ3JhbTogZnVuY3Rpb24oaSwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICAgICAgbGV0IHByb2dyYW1XcmFwcGVyID0gdGhpcy5wcm9ncmFtc1tpXSxcbiAgICAgICAgICBmbiA9IHRoaXMuZm4oaSk7XG4gICAgICBpZiAoZGF0YSB8fCBkZXB0aHMgfHwgYmxvY2tQYXJhbXMgfHwgZGVjbGFyZWRCbG9ja1BhcmFtcykge1xuICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHdyYXBQcm9ncmFtKHRoaXMsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICAgIH0gZWxzZSBpZiAoIXByb2dyYW1XcmFwcGVyKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gdGhpcy5wcm9ncmFtc1tpXSA9IHdyYXBQcm9ncmFtKHRoaXMsIGksIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9ncmFtV3JhcHBlcjtcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24odmFsdWUsIGRlcHRoKSB7XG4gICAgICB3aGlsZSAodmFsdWUgJiYgZGVwdGgtLSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLl9wYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBtZXJnZTogZnVuY3Rpb24ocGFyYW0sIGNvbW1vbikge1xuICAgICAgbGV0IG9iaiA9IHBhcmFtIHx8IGNvbW1vbjtcblxuICAgICAgaWYgKHBhcmFtICYmIGNvbW1vbiAmJiAocGFyYW0gIT09IGNvbW1vbikpIHtcbiAgICAgICAgb2JqID0gVXRpbHMuZXh0ZW5kKHt9LCBjb21tb24sIHBhcmFtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIC8vIEFuIGVtcHR5IG9iamVjdCB0byB1c2UgYXMgcmVwbGFjZW1lbnQgZm9yIG51bGwtY29udGV4dHNcbiAgICBudWxsQ29udGV4dDogT2JqZWN0LnNlYWwoe30pLFxuXG4gICAgbm9vcDogZW52LlZNLm5vb3AsXG4gICAgY29tcGlsZXJJbmZvOiB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJcbiAgfTtcblxuICBmdW5jdGlvbiByZXQoY29udGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG5cbiAgICByZXQuX3NldHVwKG9wdGlvbnMpO1xuICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsICYmIHRlbXBsYXRlU3BlYy51c2VEYXRhKSB7XG4gICAgICBkYXRhID0gaW5pdERhdGEoY29udGV4dCwgZGF0YSk7XG4gICAgfVxuICAgIGxldCBkZXB0aHMsXG4gICAgICAgIGJsb2NrUGFyYW1zID0gdGVtcGxhdGVTcGVjLnVzZUJsb2NrUGFyYW1zID8gW10gOiB1bmRlZmluZWQ7XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMpIHtcbiAgICAgIGlmIChvcHRpb25zLmRlcHRocykge1xuICAgICAgICBkZXB0aHMgPSBjb250ZXh0ICE9IG9wdGlvbnMuZGVwdGhzWzBdID8gW2NvbnRleHRdLmNvbmNhdChvcHRpb25zLmRlcHRocykgOiBvcHRpb25zLmRlcHRocztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlcHRocyA9IFtjb250ZXh0XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWluKGNvbnRleHQvKiwgb3B0aW9ucyovKSB7XG4gICAgICByZXR1cm4gJycgKyB0ZW1wbGF0ZVNwZWMubWFpbihjb250YWluZXIsIGNvbnRleHQsIGNvbnRhaW5lci5oZWxwZXJzLCBjb250YWluZXIucGFydGlhbHMsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgIH1cbiAgICBtYWluID0gZXhlY3V0ZURlY29yYXRvcnModGVtcGxhdGVTcGVjLm1haW4sIG1haW4sIGNvbnRhaW5lciwgb3B0aW9ucy5kZXB0aHMgfHwgW10sIGRhdGEsIGJsb2NrUGFyYW1zKTtcbiAgICByZXR1cm4gbWFpbihjb250ZXh0LCBvcHRpb25zKTtcbiAgfVxuICByZXQuaXNUb3AgPSB0cnVlO1xuXG4gIHJldC5fc2V0dXAgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLnBhcnRpYWwpIHtcbiAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMuaGVscGVycywgZW52LmhlbHBlcnMpO1xuXG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwpIHtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMucGFydGlhbHMsIGVudi5wYXJ0aWFscyk7XG4gICAgICB9XG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwgfHwgdGVtcGxhdGVTcGVjLnVzZURlY29yYXRvcnMpIHtcbiAgICAgICAgY29udGFpbmVyLmRlY29yYXRvcnMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5kZWNvcmF0b3JzLCBlbnYuZGVjb3JhdG9ycyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gb3B0aW9ucy5oZWxwZXJzO1xuICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3B0aW9ucy5wYXJ0aWFscztcbiAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gb3B0aW9ucy5kZWNvcmF0b3JzO1xuICAgIH1cbiAgfTtcblxuICByZXQuX2NoaWxkID0gZnVuY3Rpb24oaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgJiYgIWJsb2NrUGFyYW1zKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdtdXN0IHBhc3MgYmxvY2sgcGFyYW1zJyk7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzICYmICFkZXB0aHMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ211c3QgcGFzcyBwYXJlbnQgZGVwdGhzJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdyYXBQcm9ncmFtKGNvbnRhaW5lciwgaSwgdGVtcGxhdGVTcGVjW2ldLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBQcm9ncmFtKGNvbnRhaW5lciwgaSwgZm4sIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgZnVuY3Rpb24gcHJvZyhjb250ZXh0LCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgY3VycmVudERlcHRocyA9IGRlcHRocztcbiAgICBpZiAoZGVwdGhzICYmIGNvbnRleHQgIT0gZGVwdGhzWzBdICYmICEoY29udGV4dCA9PT0gY29udGFpbmVyLm51bGxDb250ZXh0ICYmIGRlcHRoc1swXSA9PT0gbnVsbCkpIHtcbiAgICAgIGN1cnJlbnREZXB0aHMgPSBbY29udGV4dF0uY29uY2F0KGRlcHRocyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuKGNvbnRhaW5lcixcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscyxcbiAgICAgICAgb3B0aW9ucy5kYXRhIHx8IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zICYmIFtvcHRpb25zLmJsb2NrUGFyYW1zXS5jb25jYXQoYmxvY2tQYXJhbXMpLFxuICAgICAgICBjdXJyZW50RGVwdGhzKTtcbiAgfVxuXG4gIHByb2cgPSBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKTtcblxuICBwcm9nLnByb2dyYW0gPSBpO1xuICBwcm9nLmRlcHRoID0gZGVwdGhzID8gZGVwdGhzLmxlbmd0aCA6IDA7XG4gIHByb2cuYmxvY2tQYXJhbXMgPSBkZWNsYXJlZEJsb2NrUGFyYW1zIHx8IDA7XG4gIHJldHVybiBwcm9nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICBpZiAoIXBhcnRpYWwpIHtcbiAgICBpZiAob3B0aW9ucy5uYW1lID09PSAnQHBhcnRpYWwtYmxvY2snKSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV07XG4gICAgfVxuICB9IGVsc2UgaWYgKCFwYXJ0aWFsLmNhbGwgJiYgIW9wdGlvbnMubmFtZSkge1xuICAgIC8vIFRoaXMgaXMgYSBkeW5hbWljIHBhcnRpYWwgdGhhdCByZXR1cm5lZCBhIHN0cmluZ1xuICAgIG9wdGlvbnMubmFtZSA9IHBhcnRpYWw7XG4gICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbcGFydGlhbF07XG4gIH1cbiAgcmV0dXJuIHBhcnRpYWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgLy8gVXNlIHRoZSBjdXJyZW50IGNsb3N1cmUgY29udGV4dCB0byBzYXZlIHRoZSBwYXJ0aWFsLWJsb2NrIGlmIHRoaXMgcGFydGlhbFxuICBjb25zdCBjdXJyZW50UGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICBvcHRpb25zLnBhcnRpYWwgPSB0cnVlO1xuICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICBvcHRpb25zLmRhdGEuY29udGV4dFBhdGggPSBvcHRpb25zLmlkc1swXSB8fCBvcHRpb25zLmRhdGEuY29udGV4dFBhdGg7XG4gIH1cblxuICBsZXQgcGFydGlhbEJsb2NrO1xuICBpZiAob3B0aW9ucy5mbiAmJiBvcHRpb25zLmZuICE9PSBub29wKSB7XG4gICAgb3B0aW9ucy5kYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAvLyBXcmFwcGVyIGZ1bmN0aW9uIHRvIGdldCBhY2Nlc3MgdG8gY3VycmVudFBhcnRpYWxCbG9jayBmcm9tIHRoZSBjbG9zdXJlXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcbiAgICBwYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGZ1bmN0aW9uIHBhcnRpYWxCbG9ja1dyYXBwZXIoY29udGV4dCwgb3B0aW9ucyA9IHt9KSB7XG5cbiAgICAgIC8vIFJlc3RvcmUgdGhlIHBhcnRpYWwtYmxvY2sgZnJvbSB0aGUgY2xvc3VyZSBmb3IgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgYmxvY2tcbiAgICAgIC8vIGkuZS4gdGhlIHBhcnQgaW5zaWRlIHRoZSBibG9jayBvZiB0aGUgcGFydGlhbCBjYWxsLlxuICAgICAgb3B0aW9ucy5kYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgIG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddID0gY3VycmVudFBhcnRpYWxCbG9jaztcbiAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9O1xuICAgIGlmIChmbi5wYXJ0aWFscykge1xuICAgICAgb3B0aW9ucy5wYXJ0aWFscyA9IFV0aWxzLmV4dGVuZCh7fSwgb3B0aW9ucy5wYXJ0aWFscywgZm4ucGFydGlhbHMpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJ0aWFsID09PSB1bmRlZmluZWQgJiYgcGFydGlhbEJsb2NrKSB7XG4gICAgcGFydGlhbCA9IHBhcnRpYWxCbG9jaztcbiAgfVxuXG4gIGlmIChwYXJ0aWFsID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgZm91bmQnKTtcbiAgfSBlbHNlIGlmIChwYXJ0aWFsIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gcGFydGlhbChjb250ZXh0LCBvcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgcmV0dXJuICcnOyB9XG5cbmZ1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcbiAgaWYgKCFkYXRhIHx8ICEoJ3Jvb3QnIGluIGRhdGEpKSB7XG4gICAgZGF0YSA9IGRhdGEgPyBjcmVhdGVGcmFtZShkYXRhKSA6IHt9O1xuICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpIHtcbiAgaWYgKGZuLmRlY29yYXRvcikge1xuICAgIGxldCBwcm9wcyA9IHt9O1xuICAgIHByb2cgPSBmbi5kZWNvcmF0b3IocHJvZywgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGhzICYmIGRlcHRoc1swXSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgVXRpbHMuZXh0ZW5kKHByb2csIHByb3BzKTtcbiAgfVxuICByZXR1cm4gcHJvZztcbn1cbiIsIi8vIEJ1aWxkIG91dCBvdXIgYmFzaWMgU2FmZVN0cmluZyB0eXBlXG5mdW5jdGlvbiBTYWZlU3RyaW5nKHN0cmluZykge1xuICB0aGlzLnN0cmluZyA9IHN0cmluZztcbn1cblxuU2FmZVN0cmluZy5wcm90b3R5cGUudG9TdHJpbmcgPSBTYWZlU3RyaW5nLnByb3RvdHlwZS50b0hUTUwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICcnICsgdGhpcy5zdHJpbmc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTYWZlU3RyaW5nO1xuIiwiY29uc3QgZXNjYXBlID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgJ2AnOiAnJiN4NjA7JyxcbiAgJz0nOiAnJiN4M0Q7J1xufTtcblxuY29uc3QgYmFkQ2hhcnMgPSAvWyY8PlwiJ2A9XS9nLFxuICAgICAgcG9zc2libGUgPSAvWyY8PlwiJ2A9XS87XG5cbmZ1bmN0aW9uIGVzY2FwZUNoYXIoY2hyKSB7XG4gIHJldHVybiBlc2NhcGVbY2hyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChvYmovKiAsIC4uLnNvdXJjZSAqLykge1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGtleSBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2ldLCBrZXkpKSB7XG4gICAgICAgIG9ialtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGxldCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8vIFNvdXJjZWQgZnJvbSBsb2Rhc2hcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcbi8qIGVzbGludC1kaXNhYmxlIGZ1bmMtc3R5bGUgKi9cbmxldCBpc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn07XG4vLyBmYWxsYmFjayBmb3Igb2xkZXIgdmVyc2lvbnMgb2YgQ2hyb21lIGFuZCBTYWZhcmlcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaXNGdW5jdGlvbigveC8pKSB7XG4gIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG59XG5leHBvcnQge2lzRnVuY3Rpb259O1xuLyogZXNsaW50LWVuYWJsZSBmdW5jLXN0eWxlICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSA/IHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nIDogZmFsc2U7XG59O1xuXG4vLyBPbGRlciBJRSB2ZXJzaW9ucyBkbyBub3QgZGlyZWN0bHkgc3VwcG9ydCBpbmRleE9mIHNvIHdlIG11c3QgaW1wbGVtZW50IG91ciBvd24sIHNhZGx5LlxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUV4cHJlc3Npb24oc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGVzY2FwZSBTYWZlU3RyaW5ncywgc2luY2UgdGhleSdyZSBhbHJlYWR5IHNhZmVcbiAgICBpZiAoc3RyaW5nICYmIHN0cmluZy50b0hUTUwpIHtcbiAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XG4gICAgfSBlbHNlIGlmIChzdHJpbmcgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyArICcnO1xuICAgIH1cblxuICAgIC8vIEZvcmNlIGEgc3RyaW5nIGNvbnZlcnNpb24gYXMgdGhpcyB3aWxsIGJlIGRvbmUgYnkgdGhlIGFwcGVuZCByZWdhcmRsZXNzIGFuZFxuICAgIC8vIHRoZSByZWdleCB0ZXN0IHdpbGwgZG8gdGhpcyB0cmFuc3BhcmVudGx5IGJlaGluZCB0aGUgc2NlbmVzLCBjYXVzaW5nIGlzc3VlcyBpZlxuICAgIC8vIGFuIG9iamVjdCdzIHRvIHN0cmluZyBoYXMgZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGl0LlxuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICB9XG5cbiAgaWYgKCFwb3NzaWJsZS50ZXN0KHN0cmluZykpIHsgcmV0dXJuIHN0cmluZzsgfVxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoYmFkQ2hhcnMsIGVzY2FwZUNoYXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGcmFtZShvYmplY3QpIHtcbiAgbGV0IGZyYW1lID0gZXh0ZW5kKHt9LCBvYmplY3QpO1xuICBmcmFtZS5fcGFyZW50ID0gb2JqZWN0O1xuICByZXR1cm4gZnJhbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBibG9ja1BhcmFtcyhwYXJhbXMsIGlkcykge1xuICBwYXJhbXMucGF0aCA9IGlkcztcbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZENvbnRleHRQYXRoKGNvbnRleHRQYXRoLCBpZCkge1xuICByZXR1cm4gKGNvbnRleHRQYXRoID8gY29udGV4dFBhdGggKyAnLicgOiAnJykgKyBpZDtcbn1cbiIsIi8vIFVTQUdFOlxuLy8gdmFyIGhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby12YXIgKi9cblxuLy8gdmFyIGxvY2FsID0gaGFuZGxlYmFycy5jcmVhdGUoKTtcblxudmFyIGhhbmRsZWJhcnMgPSByZXF1aXJlKCcuLi9kaXN0L2Nqcy9oYW5kbGViYXJzJylbJ2RlZmF1bHQnXTtcblxudmFyIHByaW50ZXIgPSByZXF1aXJlKCcuLi9kaXN0L2Nqcy9oYW5kbGViYXJzL2NvbXBpbGVyL3ByaW50ZXInKTtcbmhhbmRsZWJhcnMuUHJpbnRWaXNpdG9yID0gcHJpbnRlci5QcmludFZpc2l0b3I7XG5oYW5kbGViYXJzLnByaW50ID0gcHJpbnRlci5wcmludDtcblxubW9kdWxlLmV4cG9ydHMgPSBoYW5kbGViYXJzO1xuXG4vLyBQdWJsaXNoIGEgTm9kZS5qcyByZXF1aXJlKCkgaGFuZGxlciBmb3IgLmhhbmRsZWJhcnMgYW5kIC5oYnMgZmlsZXNcbmZ1bmN0aW9uIGV4dGVuc2lvbihtb2R1bGUsIGZpbGVuYW1lKSB7XG4gIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIHZhciB0ZW1wbGF0ZVN0cmluZyA9IGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0ZjgnKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBoYW5kbGViYXJzLmNvbXBpbGUodGVtcGxhdGVTdHJpbmcpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICh0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVxdWlyZS5leHRlbnNpb25zKSB7XG4gIHJlcXVpcmUuZXh0ZW5zaW9uc1snLmhhbmRsZWJhcnMnXSA9IGV4dGVuc2lvbjtcbiAgcmVxdWlyZS5leHRlbnNpb25zWycuaGJzJ10gPSBleHRlbnNpb247XG59XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMDktMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0UudHh0IG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5leHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vc291cmNlLW1hcC9zb3VyY2UtbWFwLWdlbmVyYXRvcicpLlNvdXJjZU1hcEdlbmVyYXRvcjtcbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSByZXF1aXJlKCcuL3NvdXJjZS1tYXAvc291cmNlLW1hcC1jb25zdW1lcicpLlNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5Tb3VyY2VOb2RlID0gcmVxdWlyZSgnLi9zb3VyY2UtbWFwL3NvdXJjZS1ub2RlJykuU291cmNlTm9kZTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgdmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuICAvKipcbiAgICogQSBkYXRhIHN0cnVjdHVyZSB3aGljaCBpcyBhIGNvbWJpbmF0aW9uIG9mIGFuIGFycmF5IGFuZCBhIHNldC4gQWRkaW5nIGEgbmV3XG4gICAqIG1lbWJlciBpcyBPKDEpLCB0ZXN0aW5nIGZvciBtZW1iZXJzaGlwIGlzIE8oMSksIGFuZCBmaW5kaW5nIHRoZSBpbmRleCBvZiBhblxuICAgKiBlbGVtZW50IGlzIE8oMSkuIFJlbW92aW5nIGVsZW1lbnRzIGZyb20gdGhlIHNldCBpcyBub3Qgc3VwcG9ydGVkLiBPbmx5XG4gICAqIHN0cmluZ3MgYXJlIHN1cHBvcnRlZCBmb3IgbWVtYmVyc2hpcC5cbiAgICovXG4gIGZ1bmN0aW9uIEFycmF5U2V0KCkge1xuICAgIHRoaXMuX2FycmF5ID0gW107XG4gICAgdGhpcy5fc2V0ID0ge307XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIG1ldGhvZCBmb3IgY3JlYXRpbmcgQXJyYXlTZXQgaW5zdGFuY2VzIGZyb20gYW4gZXhpc3RpbmcgYXJyYXkuXG4gICAqL1xuICBBcnJheVNldC5mcm9tQXJyYXkgPSBmdW5jdGlvbiBBcnJheVNldF9mcm9tQXJyYXkoYUFycmF5LCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgdmFyIHNldCA9IG5ldyBBcnJheVNldCgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHNldC5hZGQoYUFycmF5W2ldLCBhQWxsb3dEdXBsaWNhdGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHNldDtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJuIGhvdyBtYW55IHVuaXF1ZSBpdGVtcyBhcmUgaW4gdGhpcyBBcnJheVNldC4gSWYgZHVwbGljYXRlcyBoYXZlIGJlZW5cbiAgICogYWRkZWQsIHRoYW4gdGhvc2UgZG8gbm90IGNvdW50IHRvd2FyZHMgdGhlIHNpemUuXG4gICAqXG4gICAqIEByZXR1cm5zIE51bWJlclxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiBBcnJheVNldF9zaXplKCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9zZXQpLmxlbmd0aDtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIHRoZSBnaXZlbiBzdHJpbmcgdG8gdGhpcyBzZXQuXG4gICAqXG4gICAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIEFycmF5U2V0X2FkZChhU3RyLCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgdmFyIGlzRHVwbGljYXRlID0gdGhpcy5oYXMoYVN0cik7XG4gICAgdmFyIGlkeCA9IHRoaXMuX2FycmF5Lmxlbmd0aDtcbiAgICBpZiAoIWlzRHVwbGljYXRlIHx8IGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgICAgIHRoaXMuX2FycmF5LnB1c2goYVN0cik7XG4gICAgfVxuICAgIGlmICghaXNEdXBsaWNhdGUpIHtcbiAgICAgIHRoaXMuX3NldFt1dGlsLnRvU2V0U3RyaW5nKGFTdHIpXSA9IGlkeDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIElzIHRoZSBnaXZlbiBzdHJpbmcgYSBtZW1iZXIgb2YgdGhpcyBzZXQ/XG4gICAqXG4gICAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIEFycmF5U2V0X2hhcyhhU3RyKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9zZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpKTtcbiAgfTtcblxuICAvKipcbiAgICogV2hhdCBpcyB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIHN0cmluZyBpbiB0aGUgYXJyYXk/XG4gICAqXG4gICAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBBcnJheVNldF9pbmRleE9mKGFTdHIpIHtcbiAgICBpZiAodGhpcy5oYXMoYVN0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZXRbdXRpbC50b1NldFN0cmluZyhhU3RyKV07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYVN0ciArICdcIiBpcyBub3QgaW4gdGhlIHNldC4nKTtcbiAgfTtcblxuICAvKipcbiAgICogV2hhdCBpcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXg/XG4gICAqXG4gICAqIEBwYXJhbSBOdW1iZXIgYUlkeFxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24gQXJyYXlTZXRfYXQoYUlkeCkge1xuICAgIGlmIChhSWR4ID49IDAgJiYgYUlkeCA8IHRoaXMuX2FycmF5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5W2FJZHhdO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVsZW1lbnQgaW5kZXhlZCBieSAnICsgYUlkeCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc2V0ICh3aGljaCBoYXMgdGhlIHByb3BlciBpbmRpY2VzXG4gICAqIGluZGljYXRlZCBieSBpbmRleE9mKS4gTm90ZSB0aGF0IHRoaXMgaXMgYSBjb3B5IG9mIHRoZSBpbnRlcm5hbCBhcnJheSB1c2VkXG4gICAqIGZvciBzdG9yaW5nIHRoZSBtZW1iZXJzIHNvIHRoYXQgbm8gb25lIGNhbiBtZXNzIHdpdGggaW50ZXJuYWwgc3RhdGUuXG4gICAqL1xuICBBcnJheVNldC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIEFycmF5U2V0X3RvQXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5LnNsaWNlKCk7XG4gIH07XG5cbiAgZXhwb3J0cy5BcnJheVNldCA9IEFycmF5U2V0O1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKlxuICogQmFzZWQgb24gdGhlIEJhc2UgNjQgVkxRIGltcGxlbWVudGF0aW9uIGluIENsb3N1cmUgQ29tcGlsZXI6XG4gKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nsb3N1cmUtY29tcGlsZXIvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvY29tL2dvb2dsZS9kZWJ1Z2dpbmcvc291cmNlbWFwL0Jhc2U2NFZMUS5qYXZhXG4gKlxuICogQ29weXJpZ2h0IDIwMTEgVGhlIENsb3N1cmUgQ29tcGlsZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlXG4gKiAgICBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuICogICAgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkXG4gKiAgICB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEdvb2dsZSBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWRcbiAqICAgIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxuICogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4gKiBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgdmFyIGJhc2U2NCA9IHJlcXVpcmUoJy4vYmFzZTY0Jyk7XG5cbiAgLy8gQSBzaW5nbGUgYmFzZSA2NCBkaWdpdCBjYW4gY29udGFpbiA2IGJpdHMgb2YgZGF0YS4gRm9yIHRoZSBiYXNlIDY0IHZhcmlhYmxlXG4gIC8vIGxlbmd0aCBxdWFudGl0aWVzIHdlIHVzZSBpbiB0aGUgc291cmNlIG1hcCBzcGVjLCB0aGUgZmlyc3QgYml0IGlzIHRoZSBzaWduLFxuICAvLyB0aGUgbmV4dCBmb3VyIGJpdHMgYXJlIHRoZSBhY3R1YWwgdmFsdWUsIGFuZCB0aGUgNnRoIGJpdCBpcyB0aGVcbiAgLy8gY29udGludWF0aW9uIGJpdC4gVGhlIGNvbnRpbnVhdGlvbiBiaXQgdGVsbHMgdXMgd2hldGhlciB0aGVyZSBhcmUgbW9yZVxuICAvLyBkaWdpdHMgaW4gdGhpcyB2YWx1ZSBmb2xsb3dpbmcgdGhpcyBkaWdpdC5cbiAgLy9cbiAgLy8gICBDb250aW51YXRpb25cbiAgLy8gICB8ICAgIFNpZ25cbiAgLy8gICB8ICAgIHxcbiAgLy8gICBWICAgIFZcbiAgLy8gICAxMDEwMTFcblxuICB2YXIgVkxRX0JBU0VfU0hJRlQgPSA1O1xuXG4gIC8vIGJpbmFyeTogMTAwMDAwXG4gIHZhciBWTFFfQkFTRSA9IDEgPDwgVkxRX0JBU0VfU0hJRlQ7XG5cbiAgLy8gYmluYXJ5OiAwMTExMTFcbiAgdmFyIFZMUV9CQVNFX01BU0sgPSBWTFFfQkFTRSAtIDE7XG5cbiAgLy8gYmluYXJ5OiAxMDAwMDBcbiAgdmFyIFZMUV9DT05USU5VQVRJT05fQklUID0gVkxRX0JBU0U7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGZyb20gYSB0d28tY29tcGxlbWVudCB2YWx1ZSB0byBhIHZhbHVlIHdoZXJlIHRoZSBzaWduIGJpdCBpc1xuICAgKiBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAgICogICAxIGJlY29tZXMgMiAoMTAgYmluYXJ5KSwgLTEgYmVjb21lcyAzICgxMSBiaW5hcnkpXG4gICAqICAgMiBiZWNvbWVzIDQgKDEwMCBiaW5hcnkpLCAtMiBiZWNvbWVzIDUgKDEwMSBiaW5hcnkpXG4gICAqL1xuICBmdW5jdGlvbiB0b1ZMUVNpZ25lZChhVmFsdWUpIHtcbiAgICByZXR1cm4gYVZhbHVlIDwgMFxuICAgICAgPyAoKC1hVmFsdWUpIDw8IDEpICsgMVxuICAgICAgOiAoYVZhbHVlIDw8IDEpICsgMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0byBhIHR3by1jb21wbGVtZW50IHZhbHVlIGZyb20gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAgICogcGxhY2VkIGluIHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQuICBGb3IgZXhhbXBsZSwgYXMgZGVjaW1hbHM6XG4gICAqICAgMiAoMTAgYmluYXJ5KSBiZWNvbWVzIDEsIDMgKDExIGJpbmFyeSkgYmVjb21lcyAtMVxuICAgKiAgIDQgKDEwMCBiaW5hcnkpIGJlY29tZXMgMiwgNSAoMTAxIGJpbmFyeSkgYmVjb21lcyAtMlxuICAgKi9cbiAgZnVuY3Rpb24gZnJvbVZMUVNpZ25lZChhVmFsdWUpIHtcbiAgICB2YXIgaXNOZWdhdGl2ZSA9IChhVmFsdWUgJiAxKSA9PT0gMTtcbiAgICB2YXIgc2hpZnRlZCA9IGFWYWx1ZSA+PiAxO1xuICAgIHJldHVybiBpc05lZ2F0aXZlXG4gICAgICA/IC1zaGlmdGVkXG4gICAgICA6IHNoaWZ0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYmFzZSA2NCBWTFEgZW5jb2RlZCB2YWx1ZS5cbiAgICovXG4gIGV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2VuY29kZShhVmFsdWUpIHtcbiAgICB2YXIgZW5jb2RlZCA9IFwiXCI7XG4gICAgdmFyIGRpZ2l0O1xuXG4gICAgdmFyIHZscSA9IHRvVkxRU2lnbmVkKGFWYWx1ZSk7XG5cbiAgICBkbyB7XG4gICAgICBkaWdpdCA9IHZscSAmIFZMUV9CQVNFX01BU0s7XG4gICAgICB2bHEgPj4+PSBWTFFfQkFTRV9TSElGVDtcbiAgICAgIGlmICh2bHEgPiAwKSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBzdGlsbCBtb3JlIGRpZ2l0cyBpbiB0aGlzIHZhbHVlLCBzbyB3ZSBtdXN0IG1ha2Ugc3VyZSB0aGVcbiAgICAgICAgLy8gY29udGludWF0aW9uIGJpdCBpcyBtYXJrZWQuXG4gICAgICAgIGRpZ2l0IHw9IFZMUV9DT05USU5VQVRJT05fQklUO1xuICAgICAgfVxuICAgICAgZW5jb2RlZCArPSBiYXNlNjQuZW5jb2RlKGRpZ2l0KTtcbiAgICB9IHdoaWxlICh2bHEgPiAwKTtcblxuICAgIHJldHVybiBlbmNvZGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZWNvZGVzIHRoZSBuZXh0IGJhc2UgNjQgVkxRIHZhbHVlIGZyb20gdGhlIGdpdmVuIHN0cmluZyBhbmQgcmV0dXJucyB0aGVcbiAgICogdmFsdWUgYW5kIHRoZSByZXN0IG9mIHRoZSBzdHJpbmcgdmlhIHRoZSBvdXQgcGFyYW1ldGVyLlxuICAgKi9cbiAgZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiBiYXNlNjRWTFFfZGVjb2RlKGFTdHIsIGFJbmRleCwgYU91dFBhcmFtKSB7XG4gICAgdmFyIHN0ckxlbiA9IGFTdHIubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSAwO1xuICAgIHZhciBzaGlmdCA9IDA7XG4gICAgdmFyIGNvbnRpbnVhdGlvbiwgZGlnaXQ7XG5cbiAgICBkbyB7XG4gICAgICBpZiAoYUluZGV4ID49IHN0ckxlbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBtb3JlIGRpZ2l0cyBpbiBiYXNlIDY0IFZMUSB2YWx1ZS5cIik7XG4gICAgICB9XG5cbiAgICAgIGRpZ2l0ID0gYmFzZTY0LmRlY29kZShhU3RyLmNoYXJDb2RlQXQoYUluZGV4KyspKTtcbiAgICAgIGlmIChkaWdpdCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgZGlnaXQ6IFwiICsgYVN0ci5jaGFyQXQoYUluZGV4IC0gMSkpO1xuICAgICAgfVxuXG4gICAgICBjb250aW51YXRpb24gPSAhIShkaWdpdCAmIFZMUV9DT05USU5VQVRJT05fQklUKTtcbiAgICAgIGRpZ2l0ICY9IFZMUV9CQVNFX01BU0s7XG4gICAgICByZXN1bHQgPSByZXN1bHQgKyAoZGlnaXQgPDwgc2hpZnQpO1xuICAgICAgc2hpZnQgKz0gVkxRX0JBU0VfU0hJRlQ7XG4gICAgfSB3aGlsZSAoY29udGludWF0aW9uKTtcblxuICAgIGFPdXRQYXJhbS52YWx1ZSA9IGZyb21WTFFTaWduZWQocmVzdWx0KTtcbiAgICBhT3V0UGFyYW0ucmVzdCA9IGFJbmRleDtcbiAgfTtcblxufSk7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5pZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBkZWZpbmUgPSByZXF1aXJlKCdhbWRlZmluZScpKG1vZHVsZSwgcmVxdWlyZSk7XG59XG5kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4gIHZhciBpbnRUb0NoYXJNYXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycuc3BsaXQoJycpO1xuXG4gIC8qKlxuICAgKiBFbmNvZGUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2Ugb2YgMCB0byA2MyB0byBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0LlxuICAgKi9cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgaWYgKDAgPD0gbnVtYmVyICYmIG51bWJlciA8IGludFRvQ2hhck1hcC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBpbnRUb0NoYXJNYXBbbnVtYmVyXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk11c3QgYmUgYmV0d2VlbiAwIGFuZCA2MzogXCIgKyBhTnVtYmVyKTtcbiAgfTtcblxuICAvKipcbiAgICogRGVjb2RlIGEgc2luZ2xlIGJhc2UgNjQgY2hhcmFjdGVyIGNvZGUgZGlnaXQgdG8gYW4gaW50ZWdlci4gUmV0dXJucyAtMSBvblxuICAgKiBmYWlsdXJlLlxuICAgKi9cbiAgZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiAoY2hhckNvZGUpIHtcbiAgICB2YXIgYmlnQSA9IDY1OyAgICAgLy8gJ0EnXG4gICAgdmFyIGJpZ1ogPSA5MDsgICAgIC8vICdaJ1xuXG4gICAgdmFyIGxpdHRsZUEgPSA5NzsgIC8vICdhJ1xuICAgIHZhciBsaXR0bGVaID0gMTIyOyAvLyAneidcblxuICAgIHZhciB6ZXJvID0gNDg7ICAgICAvLyAnMCdcbiAgICB2YXIgbmluZSA9IDU3OyAgICAgLy8gJzknXG5cbiAgICB2YXIgcGx1cyA9IDQzOyAgICAgLy8gJysnXG4gICAgdmFyIHNsYXNoID0gNDc7ICAgIC8vICcvJ1xuXG4gICAgdmFyIGxpdHRsZU9mZnNldCA9IDI2O1xuICAgIHZhciBudW1iZXJPZmZzZXQgPSA1MjtcblxuICAgIC8vIDAgLSAyNTogQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcbiAgICBpZiAoYmlnQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBiaWdaKSB7XG4gICAgICByZXR1cm4gKGNoYXJDb2RlIC0gYmlnQSk7XG4gICAgfVxuXG4gICAgLy8gMjYgLSA1MTogYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcbiAgICBpZiAobGl0dGxlQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBsaXR0bGVaKSB7XG4gICAgICByZXR1cm4gKGNoYXJDb2RlIC0gbGl0dGxlQSArIGxpdHRsZU9mZnNldCk7XG4gICAgfVxuXG4gICAgLy8gNTIgLSA2MTogMDEyMzQ1Njc4OVxuICAgIGlmICh6ZXJvIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IG5pbmUpIHtcbiAgICAgIHJldHVybiAoY2hhckNvZGUgLSB6ZXJvICsgbnVtYmVyT2Zmc2V0KTtcbiAgICB9XG5cbiAgICAvLyA2MjogK1xuICAgIGlmIChjaGFyQ29kZSA9PSBwbHVzKSB7XG4gICAgICByZXR1cm4gNjI7XG4gICAgfVxuXG4gICAgLy8gNjM6IC9cbiAgICBpZiAoY2hhckNvZGUgPT0gc2xhc2gpIHtcbiAgICAgIHJldHVybiA2MztcbiAgICB9XG5cbiAgICAvLyBJbnZhbGlkIGJhc2U2NCBkaWdpdC5cbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbn0pO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZGVmaW5lID0gcmVxdWlyZSgnYW1kZWZpbmUnKShtb2R1bGUsIHJlcXVpcmUpO1xufVxuZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblxuICBleHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcbiAgZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCA9IDI7XG5cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZSBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoLlxuICAgKlxuICAgKiBAcGFyYW0gYUxvdyBJbmRpY2VzIGhlcmUgYW5kIGxvd2VyIGRvIG5vdCBjb250YWluIHRoZSBuZWVkbGUuXG4gICAqIEBwYXJhbSBhSGlnaCBJbmRpY2VzIGhlcmUgYW5kIGhpZ2hlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICAgKiBAcGFyYW0gYU5lZWRsZSBUaGUgZWxlbWVudCBiZWluZyBzZWFyY2hlZCBmb3IuXG4gICAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIG5vbi1lbXB0eSBhcnJheSBiZWluZyBzZWFyY2hlZC5cbiAgICogQHBhcmFtIGFDb21wYXJlIEZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBlbGVtZW50cyBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMS5cbiAgICogQHBhcmFtIGFCaWFzIEVpdGhlciAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICAgKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAgICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAgICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVjdXJzaXZlU2VhcmNoKGFMb3csIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICAgIC8vIFRoaXMgZnVuY3Rpb24gdGVybWluYXRlcyB3aGVuIG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHRydWU6XG4gICAgLy9cbiAgICAvLyAgIDEuIFdlIGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAgIC8vXG4gICAgLy8gICAyLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGJ1dCB3ZSBjYW4gcmV0dXJuIHRoZSBpbmRleCBvZlxuICAgIC8vICAgICAgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50LlxuICAgIC8vXG4gICAgLy8gICAzLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGFuZCB0aGVyZSBpcyBubyBuZXh0LWNsb3Nlc3RcbiAgICAvLyAgICAgIGVsZW1lbnQgdGhhbiB0aGUgb25lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCBzbyB3ZSByZXR1cm4gLTEuXG4gICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGFIaWdoIC0gYUxvdykgLyAyKSArIGFMb3c7XG4gICAgdmFyIGNtcCA9IGFDb21wYXJlKGFOZWVkbGUsIGFIYXlzdGFja1ttaWRdLCB0cnVlKTtcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICAvLyBGb3VuZCB0aGUgZWxlbWVudCB3ZSBhcmUgbG9va2luZyBmb3IuXG4gICAgICByZXR1cm4gbWlkO1xuICAgIH1cbiAgICBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICAvLyBPdXIgbmVlZGxlIGlzIGdyZWF0ZXIgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICAgIGlmIChhSGlnaCAtIG1pZCA+IDEpIHtcbiAgICAgICAgLy8gVGhlIGVsZW1lbnQgaXMgaW4gdGhlIHVwcGVyIGhhbGYuXG4gICAgICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2gobWlkLCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgZXhhY3QgbmVlZGxlIGVsZW1lbnQgd2FzIG5vdCBmb3VuZCBpbiB0aGlzIGhheXN0YWNrLiBEZXRlcm1pbmUgaWZcbiAgICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgICBpZiAoYUJpYXMgPT0gZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCkge1xuICAgICAgICByZXR1cm4gYUhpZ2ggPCBhSGF5c3RhY2subGVuZ3RoID8gYUhpZ2ggOiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtaWQ7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gT3VyIG5lZWRsZSBpcyBsZXNzIHRoYW4gYUhheXN0YWNrW21pZF0uXG4gICAgICBpZiAobWlkIC0gYUxvdyA+IDEpIHtcbiAgICAgICAgLy8gVGhlIGVsZW1lbnQgaXMgaW4gdGhlIGxvd2VyIGhhbGYuXG4gICAgICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2goYUxvdywgbWlkLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgICBpZiAoYUJpYXMgPT0gZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCkge1xuICAgICAgICByZXR1cm4gbWlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFMb3cgPCAwID8gLTEgOiBhTG93O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGJpbmFyeSBzZWFyY2ggd2hpY2ggd2lsbCBhbHdheXMgdHJ5IGFuZCByZXR1cm5cbiAgICogdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IGVsZW1lbnQgaWYgdGhlcmUgaXMgbm8gZXhhY3QgaGl0LiBUaGlzIGlzIGJlY2F1c2VcbiAgICogbWFwcGluZ3MgYmV0d2VlbiBvcmlnaW5hbCBhbmQgZ2VuZXJhdGVkIGxpbmUvY29sIHBhaXJzIGFyZSBzaW5nbGUgcG9pbnRzLFxuICAgKiBhbmQgdGhlcmUgaXMgYW4gaW1wbGljaXQgcmVnaW9uIGJldHdlZW4gZWFjaCBvZiB0aGVtLCBzbyBhIG1pc3MganVzdCBtZWFuc1xuICAgKiB0aGF0IHlvdSBhcmVuJ3Qgb24gdGhlIHZlcnkgc3RhcnQgb2YgYSByZWdpb24uXG4gICAqXG4gICAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IHlvdSBhcmUgbG9va2luZyBmb3IuXG4gICAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIGFycmF5IHRoYXQgaXMgYmVpbmcgc2VhcmNoZWQuXG4gICAqIEBwYXJhbSBhQ29tcGFyZSBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBuZWVkbGUgYW5kIGFuIGVsZW1lbnQgaW4gdGhlXG4gICAqICAgICBhcnJheSBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbmVlZGxlIGlzIGxlc3NcbiAgICogICAgIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlIGVsZW1lbnQsIHJlc3BlY3RpdmVseS5cbiAgICogQHBhcmFtIGFCaWFzIEVpdGhlciAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICAgKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAgICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAgICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICAgKiAgICAgRGVmYXVsdHMgdG8gJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gICAqL1xuICBleHBvcnRzLnNlYXJjaCA9IGZ1bmN0aW9uIHNlYXJjaChhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICAgIGlmIChhSGF5c3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gcmVjdXJzaXZlU2VhcmNoKC0xLCBhSGF5c3RhY2subGVuZ3RoLCBhTmVlZGxlLCBhSGF5c3RhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb21wYXJlLCBhQmlhcyB8fCBleHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLy8gV2UgaGF2ZSBmb3VuZCBlaXRoZXIgdGhlIGV4YWN0IGVsZW1lbnQsIG9yIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudCB0aGFuXG4gICAgLy8gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci4gSG93ZXZlciwgdGhlcmUgbWF5IGJlIG1vcmUgdGhhbiBvbmUgc3VjaFxuICAgIC8vIGVsZW1lbnQuIE1ha2Ugc3VyZSB3ZSBhbHdheXMgcmV0dXJuIHRoZSBzbWFsbGVzdCBvZiB0aGVzZS5cbiAgICB3aGlsZSAoaW5kZXggLSAxID49IDApIHtcbiAgICAgIGlmIChhQ29tcGFyZShhSGF5c3RhY2tbaW5kZXhdLCBhSGF5c3RhY2tbaW5kZXggLSAxXSwgdHJ1ZSkgIT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAtLWluZGV4O1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleDtcbiAgfTtcblxufSk7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTQgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5pZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBkZWZpbmUgPSByZXF1aXJlKCdhbWRlZmluZScpKG1vZHVsZSwgcmVxdWlyZSk7XG59XG5kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4gIHZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZSB3aGV0aGVyIG1hcHBpbmdCIGlzIGFmdGVyIG1hcHBpbmdBIHdpdGggcmVzcGVjdCB0byBnZW5lcmF0ZWRcbiAgICogcG9zaXRpb24uXG4gICAqL1xuICBmdW5jdGlvbiBnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKG1hcHBpbmdBLCBtYXBwaW5nQikge1xuICAgIC8vIE9wdGltaXplZCBmb3IgbW9zdCBjb21tb24gY2FzZVxuICAgIHZhciBsaW5lQSA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmU7XG4gICAgdmFyIGxpbmVCID0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgICB2YXIgY29sdW1uQSA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbjtcbiAgICB2YXIgY29sdW1uQiA9IG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgICByZXR1cm4gbGluZUIgPiBsaW5lQSB8fCBsaW5lQiA9PSBsaW5lQSAmJiBjb2x1bW5CID49IGNvbHVtbkEgfHxcbiAgICAgICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIDw9IDA7XG4gIH1cblxuICAvKipcbiAgICogQSBkYXRhIHN0cnVjdHVyZSB0byBwcm92aWRlIGEgc29ydGVkIHZpZXcgb2YgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gYVxuICAgKiBwZXJmb3JtYW5jZSBjb25zY2lvdXMgbWFubmVyLiBJdCB0cmFkZXMgYSBuZWdsaWJhYmxlIG92ZXJoZWFkIGluIGdlbmVyYWxcbiAgICogY2FzZSBmb3IgYSBsYXJnZSBzcGVlZHVwIGluIGNhc2Ugb2YgbWFwcGluZ3MgYmVpbmcgYWRkZWQgaW4gb3JkZXIuXG4gICAqL1xuICBmdW5jdGlvbiBNYXBwaW5nTGlzdCgpIHtcbiAgICB0aGlzLl9hcnJheSA9IFtdO1xuICAgIHRoaXMuX3NvcnRlZCA9IHRydWU7XG4gICAgLy8gU2VydmVzIGFzIGluZmltdW1cbiAgICB0aGlzLl9sYXN0ID0ge2dlbmVyYXRlZExpbmU6IC0xLCBnZW5lcmF0ZWRDb2x1bW46IDB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgdGhyb3VnaCBpbnRlcm5hbCBpdGVtcy4gVGhpcyBtZXRob2QgdGFrZXMgdGhlIHNhbWUgYXJndW1lbnRzIHRoYXRcbiAgICogYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCB0YWtlcy5cbiAgICpcbiAgICogTk9URTogVGhlIG9yZGVyIG9mIHRoZSBtYXBwaW5ncyBpcyBOT1QgZ3VhcmFudGVlZC5cbiAgICovXG4gIE1hcHBpbmdMaXN0LnByb3RvdHlwZS51bnNvcnRlZEZvckVhY2ggPVxuICAgIGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2ZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZykge1xuICAgICAgdGhpcy5fYXJyYXkuZm9yRWFjaChhQ2FsbGJhY2ssIGFUaGlzQXJnKTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgdGhlIGdpdmVuIHNvdXJjZSBtYXBwaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gT2JqZWN0IGFNYXBwaW5nXG4gICAqL1xuICBNYXBwaW5nTGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gTWFwcGluZ0xpc3RfYWRkKGFNYXBwaW5nKSB7XG4gICAgdmFyIG1hcHBpbmc7XG4gICAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIodGhpcy5fbGFzdCwgYU1hcHBpbmcpKSB7XG4gICAgICB0aGlzLl9sYXN0ID0gYU1hcHBpbmc7XG4gICAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc29ydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZsYXQsIHNvcnRlZCBhcnJheSBvZiBtYXBwaW5ncy4gVGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQgYnlcbiAgICogZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICAgKlxuICAgKiBXQVJOSU5HOiBUaGlzIG1ldGhvZCByZXR1cm5zIGludGVybmFsIGRhdGEgd2l0aG91dCBjb3B5aW5nLCBmb3JcbiAgICogcGVyZm9ybWFuY2UuIFRoZSByZXR1cm4gdmFsdWUgbXVzdCBOT1QgYmUgbXV0YXRlZCwgYW5kIHNob3VsZCBiZSB0cmVhdGVkIGFzXG4gICAqIGFuIGltbXV0YWJsZSBib3Jyb3cuIElmIHlvdSB3YW50IHRvIHRha2Ugb3duZXJzaGlwLCB5b3UgbXVzdCBtYWtlIHlvdXIgb3duXG4gICAqIGNvcHkuXG4gICAqL1xuICBNYXBwaW5nTGlzdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X3RvQXJyYXkoKSB7XG4gICAgaWYgKCF0aGlzLl9zb3J0ZWQpIHtcbiAgICAgIHRoaXMuX2FycmF5LnNvcnQodXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCk7XG4gICAgICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYXJyYXk7XG4gIH07XG5cbiAgZXhwb3J0cy5NYXBwaW5nTGlzdCA9IE1hcHBpbmdMaXN0O1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgLy8gSXQgdHVybnMgb3V0IHRoYXQgc29tZSAobW9zdD8pIEphdmFTY3JpcHQgZW5naW5lcyBkb24ndCBzZWxmLWhvc3RcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YC4gVGhpcyBtYWtlcyBzZW5zZSBiZWNhdXNlIEMrKyB3aWxsIGxpa2VseSByZW1haW5cbiAgLy8gZmFzdGVyIHRoYW4gSlMgd2hlbiBkb2luZyByYXcgQ1BVLWludGVuc2l2ZSBzb3J0aW5nLiBIb3dldmVyLCB3aGVuIHVzaW5nIGFcbiAgLy8gY3VzdG9tIGNvbXBhcmF0b3IgZnVuY3Rpb24sIGNhbGxpbmcgYmFjayBhbmQgZm9ydGggYmV0d2VlbiB0aGUgVk0ncyBDKysgYW5kXG4gIC8vIEpJVCdkIEpTIGlzIHJhdGhlciBzbG93ICphbmQqIGxvc2VzIEpJVCB0eXBlIGluZm9ybWF0aW9uLCByZXN1bHRpbmcgaW5cbiAgLy8gd29yc2UgZ2VuZXJhdGVkIGNvZGUgZm9yIHRoZSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRoYW4gd291bGQgYmUgb3B0aW1hbC4gSW5cbiAgLy8gZmFjdCwgd2hlbiBzb3J0aW5nIHdpdGggYSBjb21wYXJhdG9yLCB0aGVzZSBjb3N0cyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgb2ZcbiAgLy8gc29ydGluZyBpbiBDKysuIEJ5IHVzaW5nIG91ciBvd24gSlMtaW1wbGVtZW50ZWQgUXVpY2sgU29ydCAoYmVsb3cpLCB3ZSBnZXRcbiAgLy8gYSB+MzUwMG1zIG1lYW4gc3BlZWQtdXAgaW4gYGJlbmNoL2JlbmNoLmh0bWxgLlxuXG4gIC8qKlxuICAgKiBTd2FwIHRoZSBlbGVtZW50cyBpbmRleGVkIGJ5IGB4YCBhbmQgYHlgIGluIHRoZSBhcnJheSBgYXJ5YC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gICAqICAgICAgICBUaGUgYXJyYXkuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAqICAgICAgICBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IGl0ZW0uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAqICAgICAgICBUaGUgaW5kZXggb2YgdGhlIHNlY29uZCBpdGVtLlxuICAgKi9cbiAgZnVuY3Rpb24gc3dhcChhcnksIHgsIHkpIHtcbiAgICB2YXIgdGVtcCA9IGFyeVt4XTtcbiAgICBhcnlbeF0gPSBhcnlbeV07XG4gICAgYXJ5W3ldID0gdGVtcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgd2l0aGluIHRoZSByYW5nZSBgbG93IC4uIGhpZ2hgIGluY2x1c2l2ZS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxvd1xuICAgKiAgICAgICAgVGhlIGxvd2VyIGJvdW5kIG9uIHRoZSByYW5nZS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGhpZ2hcbiAgICogICAgICAgIFRoZSB1cHBlciBib3VuZCBvbiB0aGUgcmFuZ2UuXG4gICAqL1xuICBmdW5jdGlvbiByYW5kb21JbnRJblJhbmdlKGxvdywgaGlnaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGxvdyArIChNYXRoLnJhbmRvbSgpICogKGhpZ2ggLSBsb3cpKSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIFF1aWNrIFNvcnQgYWxnb3JpdGhtLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAgICogICAgICAgIEFuIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAgICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHBcbiAgICogICAgICAgIFN0YXJ0IGluZGV4IG9mIHRoZSBhcnJheVxuICAgKiBAcGFyYW0ge051bWJlcn0gclxuICAgKiAgICAgICAgRW5kIGluZGV4IG9mIHRoZSBhcnJheVxuICAgKi9cbiAgZnVuY3Rpb24gZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCByKSB7XG4gICAgLy8gSWYgb3VyIGxvd2VyIGJvdW5kIGlzIGxlc3MgdGhhbiBvdXIgdXBwZXIgYm91bmQsIHdlICgxKSBwYXJ0aXRpb24gdGhlXG4gICAgLy8gYXJyYXkgaW50byB0d28gcGllY2VzIGFuZCAoMikgcmVjdXJzZSBvbiBlYWNoIGhhbGYuIElmIGl0IGlzIG5vdCwgdGhpcyBpc1xuICAgIC8vIHRoZSBlbXB0eSBhcnJheSBhbmQgb3VyIGJhc2UgY2FzZS5cblxuICAgIGlmIChwIDwgcikge1xuICAgICAgLy8gKDEpIFBhcnRpdGlvbmluZy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGUgcGFydGl0aW9uaW5nIGNob29zZXMgYSBwaXZvdCBiZXR3ZWVuIGBwYCBhbmQgYHJgIGFuZCBtb3ZlcyBhbGxcbiAgICAgIC8vIGVsZW1lbnRzIHRoYXQgYXJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcGl2b3QgdG8gdGhlIGJlZm9yZSBpdCwgYW5kXG4gICAgICAvLyBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgYXJlIGdyZWF0ZXIgdGhhbiBpdCBhZnRlciBpdC4gVGhlIGVmZmVjdCBpcyB0aGF0XG4gICAgICAvLyBvbmNlIHBhcnRpdGlvbiBpcyBkb25lLCB0aGUgcGl2b3QgaXMgaW4gdGhlIGV4YWN0IHBsYWNlIGl0IHdpbGwgYmUgd2hlblxuICAgICAgLy8gdGhlIGFycmF5IGlzIHB1dCBpbiBzb3J0ZWQgb3JkZXIsIGFuZCBpdCB3aWxsIG5vdCBuZWVkIHRvIGJlIG1vdmVkXG4gICAgICAvLyBhZ2Fpbi4gVGhpcyBydW5zIGluIE8obikgdGltZS5cblxuICAgICAgLy8gQWx3YXlzIGNob29zZSBhIHJhbmRvbSBwaXZvdCBzbyB0aGF0IGFuIGlucHV0IGFycmF5IHdoaWNoIGlzIHJldmVyc2VcbiAgICAgIC8vIHNvcnRlZCBkb2VzIG5vdCBjYXVzZSBPKG5eMikgcnVubmluZyB0aW1lLlxuICAgICAgdmFyIHBpdm90SW5kZXggPSByYW5kb21JbnRJblJhbmdlKHAsIHIpO1xuICAgICAgdmFyIGkgPSBwIC0gMTtcblxuICAgICAgc3dhcChhcnksIHBpdm90SW5kZXgsIHIpO1xuICAgICAgdmFyIHBpdm90ID0gYXJ5W3JdO1xuXG4gICAgICAvLyBJbW1lZGlhdGVseSBhZnRlciBgamAgaXMgaW5jcmVtZW50ZWQgaW4gdGhpcyBsb29wLCB0aGUgZm9sbG93aW5nIGhvbGRcbiAgICAgIC8vIHRydWU6XG4gICAgICAvL1xuICAgICAgLy8gICAqIEV2ZXJ5IGVsZW1lbnQgaW4gYGFyeVtwIC4uIGldYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHBpdm90LlxuICAgICAgLy9cbiAgICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbaSsxIC4uIGotMV1gIGlzIGdyZWF0ZXIgdGhhbiB0aGUgcGl2b3QuXG4gICAgICBmb3IgKHZhciBqID0gcDsgaiA8IHI7IGorKykge1xuICAgICAgICBpZiAoY29tcGFyYXRvcihhcnlbal0sIHBpdm90KSA8PSAwKSB7XG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICAgIHN3YXAoYXJ5LCBpLCBqKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2FwKGFyeSwgaSArIDEsIGopO1xuICAgICAgdmFyIHEgPSBpICsgMTtcblxuICAgICAgLy8gKDIpIFJlY3Vyc2Ugb24gZWFjaCBoYWxmLlxuXG4gICAgICBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIHAsIHEgLSAxKTtcbiAgICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcSArIDEsIHIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTb3J0IHRoZSBnaXZlbiBhcnJheSBpbi1wbGFjZSB3aXRoIHRoZSBnaXZlbiBjb21wYXJhdG9yIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAgICogICAgICAgIEFuIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAgICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAgICovXG4gIGV4cG9ydHMucXVpY2tTb3J0ID0gZnVuY3Rpb24gKGFyeSwgY29tcGFyYXRvcikge1xuICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgMCwgYXJ5Lmxlbmd0aCAtIDEpO1xuICB9O1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgdmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbiAgdmFyIGJpbmFyeVNlYXJjaCA9IHJlcXVpcmUoJy4vYmluYXJ5LXNlYXJjaCcpO1xuICB2YXIgQXJyYXlTZXQgPSByZXF1aXJlKCcuL2FycmF5LXNldCcpLkFycmF5U2V0O1xuICB2YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG4gIHZhciBxdWlja1NvcnQgPSByZXF1aXJlKCcuL3F1aWNrLXNvcnQnKS5xdWlja1NvcnQ7XG5cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCkge1xuICAgIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICAgIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHNvdXJjZU1hcCA9IEpTT04ucGFyc2UoYVNvdXJjZU1hcC5yZXBsYWNlKC9eXFwpXFxdXFx9Jy8sICcnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZU1hcC5zZWN0aW9ucyAhPSBudWxsXG4gICAgICA/IG5ldyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIoc291cmNlTWFwKVxuICAgICAgOiBuZXcgQmFzaWNTb3VyY2VNYXBDb25zdW1lcihzb3VyY2VNYXApO1xuICB9XG5cbiAgU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcCA9IGZ1bmN0aW9uKGFTb3VyY2VNYXApIHtcbiAgICByZXR1cm4gQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwKGFTb3VyY2VNYXApO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAgICovXG4gIFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbiAgLy8gYF9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZCBgX19vcmlnaW5hbE1hcHBpbmdzYCBhcmUgYXJyYXlzIHRoYXQgaG9sZCB0aGVcbiAgLy8gcGFyc2VkIG1hcHBpbmcgY29vcmRpbmF0ZXMgZnJvbSB0aGUgc291cmNlIG1hcCdzIFwibWFwcGluZ3NcIiBhdHRyaWJ1dGUuIFRoZXlcbiAgLy8gYXJlIGxhemlseSBpbnN0YW50aWF0ZWQsIGFjY2Vzc2VkIHZpYSB0aGUgYF9nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gIC8vIGBfb3JpZ2luYWxNYXBwaW5nc2AgZ2V0dGVycyByZXNwZWN0aXZlbHksIGFuZCB3ZSBvbmx5IHBhcnNlIHRoZSBtYXBwaW5nc1xuICAvLyBhbmQgY3JlYXRlIHRoZXNlIGFycmF5cyBvbmNlIHF1ZXJpZWQgZm9yIGEgc291cmNlIGxvY2F0aW9uLiBXZSBqdW1wIHRocm91Z2hcbiAgLy8gdGhlc2UgaG9vcHMgYmVjYXVzZSB0aGVyZSBjYW4gYmUgbWFueSB0aG91c2FuZHMgb2YgbWFwcGluZ3MsIGFuZCBwYXJzaW5nXG4gIC8vIHRoZW0gaXMgZXhwZW5zaXZlLCBzbyB3ZSBvbmx5IHdhbnQgdG8gZG8gaXQgaWYgd2UgbXVzdC5cbiAgLy9cbiAgLy8gRWFjaCBvYmplY3QgaW4gdGhlIGFycmF5cyBpcyBvZiB0aGUgZm9ybTpcbiAgLy9cbiAgLy8gICAgIHtcbiAgLy8gICAgICAgZ2VuZXJhdGVkTGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgY29kZSxcbiAgLy8gICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4gIC8vICAgICAgIHNvdXJjZTogVGhlIHBhdGggdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIHRoYXQgZ2VuZXJhdGVkIHRoaXNcbiAgLy8gICAgICAgICAgICAgICBjaHVuayBvZiBjb2RlLFxuICAvLyAgICAgICBvcmlnaW5hbExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlIHRoYXRcbiAgLy8gICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuICAvLyAgICAgICBvcmlnaW5hbENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4gIC8vICAgICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuICAvLyAgICAgICBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgb3JpZ2luYWwgc3ltYm9sIHdoaWNoIGdlbmVyYXRlZCB0aGlzIGNodW5rIG9mXG4gIC8vICAgICAgICAgICAgIGNvZGUuXG4gIC8vICAgICB9XG4gIC8vXG4gIC8vIEFsbCBwcm9wZXJ0aWVzIGV4Y2VwdCBmb3IgYGdlbmVyYXRlZExpbmVgIGFuZCBgZ2VuZXJhdGVkQ29sdW1uYCBjYW4gYmVcbiAgLy8gYG51bGxgLlxuICAvL1xuICAvLyBgX2dlbmVyYXRlZE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zLlxuICAvL1xuICAvLyBgX29yaWdpbmFsTWFwcGluZ3NgIGlzIG9yZGVyZWQgYnkgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucy5cblxuICBTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IG51bGw7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdfZ2VuZXJhdGVkTWFwcGluZ3MnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncykge1xuICAgICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzO1xuICAgIH1cbiAgfSk7XG5cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG51bGw7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdfb3JpZ2luYWxNYXBwaW5ncycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzO1xuICAgIH1cbiAgfSk7XG5cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGluZGV4KSB7XG4gICAgICB2YXIgYyA9IGFTdHIuY2hhckF0KGluZGV4KTtcbiAgICAgIHJldHVybiBjID09PSBcIjtcIiB8fCBjID09PSBcIixcIjtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gICAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICAgKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICAgKi9cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50IF9wYXJzZU1hcHBpbmdzXCIpO1xuICAgIH07XG5cbiAgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSID0gMTtcbiAgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVIgPSAyO1xuXG4gIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcbiAgU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgZWFjaCBtYXBwaW5nIGJldHdlZW4gYW4gb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uIGFuZCBhXG4gICAqIGdlbmVyYXRlZCBsaW5lL2NvbHVtbiBpbiB0aGlzIHNvdXJjZSBtYXAuXG4gICAqXG4gICAqIEBwYXJhbSBGdW5jdGlvbiBhQ2FsbGJhY2tcbiAgICogICAgICAgIFRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aXRoIGVhY2ggbWFwcGluZy5cbiAgICogQHBhcmFtIE9iamVjdCBhQ29udGV4dFxuICAgKiAgICAgICAgT3B0aW9uYWwuIElmIHNwZWNpZmllZCwgdGhpcyBvYmplY3Qgd2lsbCBiZSB0aGUgdmFsdWUgb2YgYHRoaXNgIGV2ZXJ5XG4gICAqICAgICAgICB0aW1lIHRoYXQgYGFDYWxsYmFja2AgaXMgY2FsbGVkLlxuICAgKiBAcGFyYW0gYU9yZGVyXG4gICAqICAgICAgICBFaXRoZXIgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAgb3JcbiAgICogICAgICAgIGBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUmAuIFNwZWNpZmllcyB3aGV0aGVyIHlvdSB3YW50IHRvXG4gICAqICAgICAgICBpdGVyYXRlIG92ZXIgdGhlIG1hcHBpbmdzIHNvcnRlZCBieSB0aGUgZ2VuZXJhdGVkIGZpbGUncyBsaW5lL2NvbHVtblxuICAgKiAgICAgICAgb3JkZXIgb3IgdGhlIG9yaWdpbmFsJ3Mgc291cmNlL2xpbmUvY29sdW1uIG9yZGVyLCByZXNwZWN0aXZlbHkuIERlZmF1bHRzIHRvXG4gICAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYC5cbiAgICovXG4gIFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5lYWNoTWFwcGluZyA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZWFjaE1hcHBpbmcoYUNhbGxiYWNrLCBhQ29udGV4dCwgYU9yZGVyKSB7XG4gICAgICB2YXIgY29udGV4dCA9IGFDb250ZXh0IHx8IG51bGw7XG4gICAgICB2YXIgb3JkZXIgPSBhT3JkZXIgfHwgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSO1xuXG4gICAgICB2YXIgbWFwcGluZ3M7XG4gICAgICBzd2l0Y2ggKG9yZGVyKSB7XG4gICAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjpcbiAgICAgICAgbWFwcGluZ3MgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSOlxuICAgICAgICBtYXBwaW5ncyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3M7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvcmRlciBvZiBpdGVyYXRpb24uXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuc291cmNlUm9vdDtcbiAgICAgIG1hcHBpbmdzLm1hcChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgICB2YXIgc291cmNlID0gbWFwcGluZy5zb3VyY2UgPT09IG51bGwgPyBudWxsIDogdGhpcy5fc291cmNlcy5hdChtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCAmJiBzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB1dGlsLmpvaW4oc291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSxcbiAgICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uLFxuICAgICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgbmFtZTogbWFwcGluZy5uYW1lID09PSBudWxsID8gbnVsbCA6IHRoaXMuX25hbWVzLmF0KG1hcHBpbmcubmFtZSlcbiAgICAgICAgfTtcbiAgICAgIH0sIHRoaXMpLmZvckVhY2goYUNhbGxiYWNrLCBjb250ZXh0KTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICAgKiBsaW5lLCBhbmQgY29sdW1uIHByb3ZpZGVkLiBJZiBubyBjb2x1bW4gaXMgcHJvdmlkZWQsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gICAqIGNvcnJlc3BvbmRpbmcgdG8gYSBlaXRoZXIgdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3Igb3IgdGhlIG5leHRcbiAgICogY2xvc2VzdCBsaW5lIHRoYXQgaGFzIGFueSBtYXBwaW5ncy4gT3RoZXJ3aXNlLCByZXR1cm5zIGFsbCBtYXBwaW5nc1xuICAgKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBsaW5lIGFuZCBlaXRoZXIgdGhlIGNvbHVtbiB3ZSBhcmUgc2VhcmNoaW5nIGZvclxuICAgKiBvciB0aGUgbmV4dCBjbG9zZXN0IGNvbHVtbiB0aGF0IGhhcyBhbnkgb2Zmc2V0cy5cbiAgICpcbiAgICogVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIC0gY29sdW1uOiBPcHRpb25hbC4gdGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAgICpcbiAgICogYW5kIGFuIGFycmF5IG9mIG9iamVjdHMgaXMgcmV0dXJuZWQsIGVhY2ggd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICAgKi9cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvciA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yKGFBcmdzKSB7XG4gICAgICB2YXIgbGluZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpO1xuXG4gICAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIGV4YWN0IG1hdGNoLCBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmdcbiAgICAgIC8vIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IG1hcHBpbmcgbGVzcyB0aGFuIHRoZSBuZWVkbGUuIEJ5XG4gICAgICAvLyBzZXR0aW5nIG5lZWRsZS5vcmlnaW5hbENvbHVtbiB0byAwLCB3ZSB0aHVzIGZpbmQgdGhlIGxhc3QgbWFwcGluZyBmb3JcbiAgICAgIC8vIHRoZSBnaXZlbiBsaW5lLCBwcm92aWRlZCBzdWNoIGEgbWFwcGluZyBleGlzdHMuXG4gICAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgICBzb3VyY2U6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJyksXG4gICAgICAgIG9yaWdpbmFsTGluZTogbGluZSxcbiAgICAgICAgb3JpZ2luYWxDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJywgMClcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBuZWVkbGUuc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIG5lZWRsZS5zb3VyY2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzLmhhcyhuZWVkbGUuc291cmNlKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuZWVkbGUuc291cmNlID0gdGhpcy5fc291cmNlcy5pbmRleE9mKG5lZWRsZS5zb3VyY2UpO1xuXG4gICAgICB2YXIgbWFwcGluZ3MgPSBbXTtcblxuICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcobmVlZGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EKTtcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgICAgaWYgKGFBcmdzLmNvbHVtbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG9yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuXG4gICAgICAgICAgLy8gSXRlcmF0ZSB1bnRpbCBlaXRoZXIgd2UgcnVuIG91dCBvZiBtYXBwaW5ncywgb3Igd2UgcnVuIGludG9cbiAgICAgICAgICAvLyBhIG1hcHBpbmcgZm9yIGEgZGlmZmVyZW50IGxpbmUgdGhhbiB0aGUgb25lIHdlIGZvdW5kLiBTaW5jZVxuICAgICAgICAgIC8vIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgICAvLyB0aGUgbGluZSB3ZSBmb3VuZC5cbiAgICAgICAgICB3aGlsZSAobWFwcGluZyAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gb3JpZ2luYWxMaW5lKSB7XG4gICAgICAgICAgICBtYXBwaW5ncy5wdXNoKHtcbiAgICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSB3ZXJlIHNlYXJjaGluZyBmb3IuXG4gICAgICAgICAgLy8gU2luY2UgbWFwcGluZ3MgYXJlIHNvcnRlZCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvIGZpbmQgYWxsIG1hcHBpbmdzIGZvclxuICAgICAgICAgIC8vIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICAgIHdoaWxlIChtYXBwaW5nICYmXG4gICAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBsaW5lICYmXG4gICAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPT0gb3JpZ2luYWxDb2x1bW4pIHtcbiAgICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzWysraW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWFwcGluZ3M7XG4gICAgfTtcblxuICBleHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gU291cmNlTWFwQ29uc3VtZXI7XG5cbiAgLyoqXG4gICAqIEEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2ggd2UgY2FuXG4gICAqIHF1ZXJ5IGZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgZmlsZSBwb3NpdGlvbnMgYnkgZ2l2aW5nIGl0IGEgZmlsZVxuICAgKiBwb3NpdGlvbiBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAgICpcbiAgICogVGhlIG9ubHkgcGFyYW1ldGVyIGlzIHRoZSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yXG4gICAqIGFscmVhZHkgcGFyc2VkIHRvIGFuIG9iamVjdCkuIEFjY29yZGluZyB0byB0aGUgc3BlYywgc291cmNlIG1hcHMgaGF2ZSB0aGVcbiAgICogZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gICAqXG4gICAqICAgLSB2ZXJzaW9uOiBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICAgKiAgIC0gc291cmNlczogQW4gYXJyYXkgb2YgVVJMcyB0byB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGVzLlxuICAgKiAgIC0gbmFtZXM6IEFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHdoaWNoIGNhbiBiZSByZWZlcnJlbmNlZCBieSBpbmRpdmlkdWFsIG1hcHBpbmdzLlxuICAgKiAgIC0gc291cmNlUm9vdDogT3B0aW9uYWwuIFRoZSBVUkwgcm9vdCBmcm9tIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSByZWxhdGl2ZS5cbiAgICogICAtIHNvdXJjZXNDb250ZW50OiBPcHRpb25hbC4gQW4gYXJyYXkgb2YgY29udGVudHMgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAgICogICAtIG1hcHBpbmdzOiBBIHN0cmluZyBvZiBiYXNlNjQgVkxRcyB3aGljaCBjb250YWluIHRoZSBhY3R1YWwgbWFwcGluZ3MuXG4gICAqICAgLSBmaWxlOiBPcHRpb25hbC4gVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAqXG4gICAqIEhlcmUgaXMgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF06XG4gICAqXG4gICAqICAgICB7XG4gICAqICAgICAgIHZlcnNpb24gOiAzLFxuICAgKiAgICAgICBmaWxlOiBcIm91dC5qc1wiLFxuICAgKiAgICAgICBzb3VyY2VSb290IDogXCJcIixcbiAgICogICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICAgKiAgICAgICBuYW1lczogW1wic3JjXCIsIFwibWFwc1wiLCBcImFyZVwiLCBcImZ1blwiXSxcbiAgICogICAgICAgbWFwcGluZ3M6IFwiQUEsQUI7O0FCQ0RFO1wiXG4gICAqICAgICB9XG4gICAqXG4gICAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0P3BsaT0xI1xuICAgKi9cbiAgZnVuY3Rpb24gQmFzaWNTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwKSB7XG4gICAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gICAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgICAgc291cmNlTWFwID0gSlNPTi5wYXJzZShhU291cmNlTWFwLnJlcGxhY2UoL15cXClcXF1cXH0nLywgJycpKTtcbiAgICB9XG5cbiAgICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgICB2YXIgc291cmNlcyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZXMnKTtcbiAgICAvLyBTYXNzIDMuMyBsZWF2ZXMgb3V0IHRoZSAnbmFtZXMnIGFycmF5LCBzbyB3ZSBkZXZpYXRlIGZyb20gdGhlIHNwZWMgKHdoaWNoXG4gICAgLy8gcmVxdWlyZXMgdGhlIGFycmF5KSB0byBwbGF5IG5pY2UgaGVyZS5cbiAgICB2YXIgbmFtZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICduYW1lcycsIFtdKTtcbiAgICB2YXIgc291cmNlUm9vdCA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZVJvb3QnLCBudWxsKTtcbiAgICB2YXIgc291cmNlc0NvbnRlbnQgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzQ29udGVudCcsIG51bGwpO1xuICAgIHZhciBtYXBwaW5ncyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ21hcHBpbmdzJyk7XG4gICAgdmFyIGZpbGUgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdmaWxlJywgbnVsbCk7XG5cbiAgICAvLyBPbmNlIGFnYWluLCBTYXNzIGRldmlhdGVzIGZyb20gdGhlIHNwZWMgYW5kIHN1cHBsaWVzIHRoZSB2ZXJzaW9uIGFzIGFcbiAgICAvLyBzdHJpbmcgcmF0aGVyIHRoYW4gYSBudW1iZXIsIHNvIHdlIHVzZSBsb29zZSBlcXVhbGl0eSBjaGVja2luZyBoZXJlLlxuICAgIGlmICh2ZXJzaW9uICE9IHRoaXMuX3ZlcnNpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICAgIH1cblxuICAgIC8vIFNvbWUgc291cmNlIG1hcHMgcHJvZHVjZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbGlrZSBcIi4vZm9vLmpzXCIgaW5zdGVhZCBvZlxuICAgIC8vIFwiZm9vLmpzXCIuICBOb3JtYWxpemUgdGhlc2UgZmlyc3Qgc28gdGhhdCBmdXR1cmUgY29tcGFyaXNvbnMgd2lsbCBzdWNjZWVkLlxuICAgIC8vIFNlZSBidWd6aWwubGEvMTA5MDc2OC5cbiAgICBzb3VyY2VzID0gc291cmNlcy5tYXAodXRpbC5ub3JtYWxpemUpO1xuXG4gICAgLy8gUGFzcyBgdHJ1ZWAgYmVsb3cgdG8gYWxsb3cgZHVwbGljYXRlIG5hbWVzIGFuZCBzb3VyY2VzLiBXaGlsZSBzb3VyY2UgbWFwc1xuICAgIC8vIGFyZSBpbnRlbmRlZCB0byBiZSBjb21wcmVzc2VkIGFuZCBkZWR1cGxpY2F0ZWQsIHRoZSBUeXBlU2NyaXB0IGNvbXBpbGVyXG4gICAgLy8gc29tZXRpbWVzIGdlbmVyYXRlcyBzb3VyY2UgbWFwcyB3aXRoIGR1cGxpY2F0ZXMgaW4gdGhlbS4gU2VlIEdpdGh1YiBpc3N1ZVxuICAgIC8vICM3MiBhbmQgYnVnemlsLmxhLzg4OTQ5Mi5cbiAgICB0aGlzLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShuYW1lcywgdHJ1ZSk7XG4gICAgdGhpcy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShzb3VyY2VzLCB0cnVlKTtcblxuICAgIHRoaXMuc291cmNlUm9vdCA9IHNvdXJjZVJvb3Q7XG4gICAgdGhpcy5zb3VyY2VzQ29udGVudCA9IHNvdXJjZXNDb250ZW50O1xuICAgIHRoaXMuX21hcHBpbmdzID0gbWFwcGluZ3M7XG4gICAgdGhpcy5maWxlID0gZmlsZTtcbiAgfVxuXG4gIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuICBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGZyb20gYSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gICAqXG4gICAqIEBwYXJhbSBTb3VyY2VNYXBHZW5lcmF0b3IgYVNvdXJjZU1hcFxuICAgKiAgICAgICAgVGhlIHNvdXJjZSBtYXAgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuICAgKiBAcmV0dXJucyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyXG4gICAqL1xuICBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2Zyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCkge1xuICAgICAgdmFyIHNtYyA9IE9iamVjdC5jcmVhdGUoQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuXG4gICAgICB2YXIgbmFtZXMgPSBzbWMuX25hbWVzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX25hbWVzLnRvQXJyYXkoKSwgdHJ1ZSk7XG4gICAgICB2YXIgc291cmNlcyA9IHNtYy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9zb3VyY2VzLnRvQXJyYXkoKSwgdHJ1ZSk7XG4gICAgICBzbWMuc291cmNlUm9vdCA9IGFTb3VyY2VNYXAuX3NvdXJjZVJvb3Q7XG4gICAgICBzbWMuc291cmNlc0NvbnRlbnQgPSBhU291cmNlTWFwLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KHNtYy5fc291cmNlcy50b0FycmF5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYy5zb3VyY2VSb290KTtcbiAgICAgIHNtYy5maWxlID0gYVNvdXJjZU1hcC5fZmlsZTtcblxuICAgICAgLy8gQmVjYXVzZSB3ZSBhcmUgbW9kaWZ5aW5nIHRoZSBlbnRyaWVzIChieSBjb252ZXJ0aW5nIHN0cmluZyBzb3VyY2VzIGFuZFxuICAgICAgLy8gbmFtZXMgdG8gaW5kaWNlcyBpbnRvIHRoZSBzb3VyY2VzIGFuZCBuYW1lcyBBcnJheVNldHMpLCB3ZSBoYXZlIHRvIG1ha2VcbiAgICAgIC8vIGEgY29weSBvZiB0aGUgZW50cnkgb3IgZWxzZSBiYWQgdGhpbmdzIGhhcHBlbi4gU2hhcmVkIG11dGFibGUgc3RhdGVcbiAgICAgIC8vIHN0cmlrZXMgYWdhaW4hIFNlZSBnaXRodWIgaXNzdWUgIzE5MS5cblxuICAgICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gYVNvdXJjZU1hcC5fbWFwcGluZ3MudG9BcnJheSgpLnNsaWNlKCk7XG4gICAgICB2YXIgZGVzdEdlbmVyYXRlZE1hcHBpbmdzID0gc21jLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICAgIHZhciBkZXN0T3JpZ2luYWxNYXBwaW5ncyA9IHNtYy5fX29yaWdpbmFsTWFwcGluZ3MgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzcmNNYXBwaW5nID0gZ2VuZXJhdGVkTWFwcGluZ3NbaV07XG4gICAgICAgIHZhciBkZXN0TWFwcGluZyA9IG5ldyBNYXBwaW5nO1xuICAgICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRMaW5lO1xuICAgICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBzcmNNYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgICBpZiAoc3JjTWFwcGluZy5zb3VyY2UpIHtcbiAgICAgICAgICBkZXN0TWFwcGluZy5zb3VyY2UgPSBzb3VyY2VzLmluZGV4T2Yoc3JjTWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgIGRlc3RNYXBwaW5nLm9yaWdpbmFsTGluZSA9IHNyY01hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICAgIGRlc3RNYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gc3JjTWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAgIGlmIChzcmNNYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICAgIGRlc3RNYXBwaW5nLm5hbWUgPSBuYW1lcy5pbmRleE9mKHNyY01hcHBpbmcubmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVzdE9yaWdpbmFsTWFwcGluZ3MucHVzaChkZXN0TWFwcGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0R2VuZXJhdGVkTWFwcGluZ3MucHVzaChkZXN0TWFwcGluZyk7XG4gICAgICB9XG5cbiAgICAgIHF1aWNrU29ydChzbWMuX19vcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcblxuICAgICAgcmV0dXJuIHNtYztcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gICAqL1xuICBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gICAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdzb3VyY2VzJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VSb290ICE9IG51bGwgPyB1dGlsLmpvaW4odGhpcy5zb3VyY2VSb290LCBzKSA6IHM7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBQcm92aWRlIHRoZSBKSVQgd2l0aCBhIG5pY2Ugc2hhcGUgLyBoaWRkZW4gY2xhc3MuXG4gICAqL1xuICBmdW5jdGlvbiBNYXBwaW5nKCkge1xuICAgIHRoaXMuZ2VuZXJhdGVkTGluZSA9IDA7XG4gICAgdGhpcy5nZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICB0aGlzLm9yaWdpbmFsTGluZSA9IG51bGw7XG4gICAgdGhpcy5vcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gICAgdGhpcy5uYW1lID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gICAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICAgKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICAgKi9cbiAgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICAgIHZhciBnZW5lcmF0ZWRMaW5lID0gMTtcbiAgICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgICAgdmFyIHByZXZpb3VzU291cmNlID0gMDtcbiAgICAgIHZhciBwcmV2aW91c05hbWUgPSAwO1xuICAgICAgdmFyIGxlbmd0aCA9IGFTdHIubGVuZ3RoO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciBjYWNoZWRTZWdtZW50cyA9IHt9O1xuICAgICAgdmFyIHRlbXAgPSB7fTtcbiAgICAgIHZhciBvcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgICB2YXIgZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICAgIHZhciBtYXBwaW5nLCBzdHIsIHNlZ21lbnQsIGVuZCwgdmFsdWU7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBpZiAoYVN0ci5jaGFyQXQoaW5kZXgpID09PSAnOycpIHtcbiAgICAgICAgICBnZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYVN0ci5jaGFyQXQoaW5kZXgpID09PSAnLCcpIHtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIG1hcHBpbmcgPSBuZXcgTWFwcGluZygpO1xuICAgICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9IGdlbmVyYXRlZExpbmU7XG5cbiAgICAgICAgICAvLyBCZWNhdXNlIGVhY2ggb2Zmc2V0IGlzIGVuY29kZWQgcmVsYXRpdmUgdG8gdGhlIHByZXZpb3VzIG9uZSxcbiAgICAgICAgICAvLyBtYW55IHNlZ21lbnRzIG9mdGVuIGhhdmUgdGhlIHNhbWUgZW5jb2RpbmcuIFdlIGNhbiBleHBsb2l0IHRoaXNcbiAgICAgICAgICAvLyBmYWN0IGJ5IGNhY2hpbmcgdGhlIHBhcnNlZCB2YXJpYWJsZSBsZW5ndGggZmllbGRzIG9mIGVhY2ggc2VnbWVudCxcbiAgICAgICAgICAvLyBhbGxvd2luZyB1cyB0byBhdm9pZCBhIHNlY29uZCBwYXJzZSBpZiB3ZSBlbmNvdW50ZXIgdGhlIHNhbWVcbiAgICAgICAgICAvLyBzZWdtZW50IGFnYWluLlxuICAgICAgICAgIGZvciAoZW5kID0gaW5kZXg7IGVuZCA8IGxlbmd0aDsgZW5kKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGVuZCkpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0ciA9IGFTdHIuc2xpY2UoaW5kZXgsIGVuZCk7XG5cbiAgICAgICAgICBzZWdtZW50ID0gY2FjaGVkU2VnbWVudHNbc3RyXTtcbiAgICAgICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICAgICAgaW5kZXggKz0gc3RyLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VnbWVudCA9IFtdO1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgZW5kKSB7XG4gICAgICAgICAgICAgIGJhc2U2NFZMUS5kZWNvZGUoYVN0ciwgaW5kZXgsIHRlbXApO1xuICAgICAgICAgICAgICB2YWx1ZSA9IHRlbXAudmFsdWU7XG4gICAgICAgICAgICAgIGluZGV4ID0gdGVtcC5yZXN0O1xuICAgICAgICAgICAgICBzZWdtZW50LnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSwgYnV0IG5vIGxpbmUgYW5kIGNvbHVtbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSBhbmQgbGluZSwgYnV0IG5vIGNvbHVtbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWNoZWRTZWdtZW50c1tzdHJdID0gc2VnbWVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBHZW5lcmF0ZWQgY29sdW1uLlxuICAgICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gKyBzZWdtZW50WzBdO1xuICAgICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBzb3VyY2UuXG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHByZXZpb3VzU291cmNlICsgc2VnbWVudFsxXTtcbiAgICAgICAgICAgIHByZXZpb3VzU291cmNlICs9IHNlZ21lbnRbMV07XG5cbiAgICAgICAgICAgIC8vIE9yaWdpbmFsIGxpbmUuXG4gICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IHByZXZpb3VzT3JpZ2luYWxMaW5lICsgc2VnbWVudFsyXTtcbiAgICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmU7XG4gICAgICAgICAgICAvLyBMaW5lcyBhcmUgc3RvcmVkIDAtYmFzZWRcbiAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lICs9IDE7XG5cbiAgICAgICAgICAgIC8vIE9yaWdpbmFsIGNvbHVtbi5cbiAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBwcmV2aW91c09yaWdpbmFsQ29sdW1uICsgc2VnbWVudFszXTtcbiAgICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiA0KSB7XG4gICAgICAgICAgICAgIC8vIE9yaWdpbmFsIG5hbWUuXG4gICAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IHByZXZpb3VzTmFtZSArIHNlZ21lbnRbNF07XG4gICAgICAgICAgICAgIHByZXZpb3VzTmFtZSArPSBzZWdtZW50WzRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGdlbmVyYXRlZE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTWFwcGluZ3MucHVzaChtYXBwaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcXVpY2tTb3J0KGdlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IGdlbmVyYXRlZE1hcHBpbmdzO1xuXG4gICAgICBxdWlja1NvcnQob3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gICAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG9yaWdpbmFsTWFwcGluZ3M7XG4gICAgfTtcblxuICAvKipcbiAgICogRmluZCB0aGUgbWFwcGluZyB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgaHlwb3RoZXRpY2FsIFwibmVlZGxlXCIgbWFwcGluZyB0aGF0XG4gICAqIHdlIGFyZSBzZWFyY2hpbmcgZm9yIGluIHRoZSBnaXZlbiBcImhheXN0YWNrXCIgb2YgbWFwcGluZ3MuXG4gICAqL1xuICBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmcgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2ZpbmRNYXBwaW5nKGFOZWVkbGUsIGFNYXBwaW5ncywgYUxpbmVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb2x1bW5OYW1lLCBhQ29tcGFyYXRvciwgYUJpYXMpIHtcbiAgICAgIC8vIFRvIHJldHVybiB0aGUgcG9zaXRpb24gd2UgYXJlIHNlYXJjaGluZyBmb3IsIHdlIG11c3QgZmlyc3QgZmluZCB0aGVcbiAgICAgIC8vIG1hcHBpbmcgZm9yIHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgdGhlbiByZXR1cm4gdGhlIG9wcG9zaXRlIHBvc2l0aW9uIGl0XG4gICAgICAvLyBwb2ludHMgdG8uIEJlY2F1c2UgdGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHdlIGNhbiB1c2UgYmluYXJ5IHNlYXJjaCB0b1xuICAgICAgLy8gZmluZCB0aGUgYmVzdCBtYXBwaW5nLlxuXG4gICAgICBpZiAoYU5lZWRsZVthTGluZU5hbWVdIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTGluZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthTGluZU5hbWVdKTtcbiAgICAgIH1cbiAgICAgIGlmIChhTmVlZGxlW2FDb2x1bW5OYW1lXSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29sdW1uIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhTmVlZGxlW2FDb2x1bW5OYW1lXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiaW5hcnlTZWFyY2guc2VhcmNoKGFOZWVkbGUsIGFNYXBwaW5ncywgYUNvbXBhcmF0b3IsIGFCaWFzKTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBDb21wdXRlIHRoZSBsYXN0IGNvbHVtbiBmb3IgZWFjaCBnZW5lcmF0ZWQgbWFwcGluZy4gVGhlIGxhc3QgY29sdW1uIGlzXG4gICAqIGluY2x1c2l2ZS5cbiAgICovXG4gIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbXB1dGVDb2x1bW5TcGFucyA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfY29tcHV0ZUNvbHVtblNwYW5zKCkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgICAvLyBNYXBwaW5ncyBkbyBub3QgY29udGFpbiBhIGZpZWxkIGZvciB0aGUgbGFzdCBnZW5lcmF0ZWQgY29sdW1udC4gV2VcbiAgICAgICAgLy8gY2FuIGNvbWUgdXAgd2l0aCBhbiBvcHRpbWlzdGljIGVzdGltYXRlLCBob3dldmVyLCBieSBhc3N1bWluZyB0aGF0XG4gICAgICAgIC8vIG1hcHBpbmdzIGFyZSBjb250aWd1b3VzIChpLmUuIGdpdmVuIHR3byBjb25zZWN1dGl2ZSBtYXBwaW5ncywgdGhlXG4gICAgICAgIC8vIGZpcnN0IG1hcHBpbmcgZW5kcyB3aGVyZSB0aGUgc2Vjb25kIG9uZSBzdGFydHMpLlxuICAgICAgICBpZiAoaW5kZXggKyAxIDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIG5leHRNYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXggKyAxXTtcblxuICAgICAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgPT09IG5leHRNYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IG5leHRNYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtIDE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgbGFzdCBtYXBwaW5nIGZvciBlYWNoIGxpbmUgc3BhbnMgdGhlIGVudGlyZSBsaW5lLlxuICAgICAgICBtYXBwaW5nLmxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBJbmZpbml0eTtcbiAgICAgIH1cbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAgICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0XG4gICAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAgICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gICAqICAgICAnU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gICAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gICAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAgICogICAgIERlZmF1bHRzIHRvICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gICAqXG4gICAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLlxuICAgKiAgIC0gbmFtZTogVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIsIG9yIG51bGwuXG4gICAqL1xuICBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9vcmlnaW5hbFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgICB9O1xuXG4gICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgICAgbmVlZGxlLFxuICAgICAgICB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncyxcbiAgICAgICAgXCJnZW5lcmF0ZWRMaW5lXCIsXG4gICAgICAgIFwiZ2VuZXJhdGVkQ29sdW1uXCIsXG4gICAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQsXG4gICAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICAgKTtcblxuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9PT0gbmVlZGxlLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcobWFwcGluZywgJ3NvdXJjZScsIG51bGwpO1xuICAgICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuYXQoc291cmNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBzb3VyY2UgPSB1dGlsLmpvaW4odGhpcy5zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbmFtZSA9IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICduYW1lJywgbnVsbCk7XG4gICAgICAgICAgaWYgKG5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5hdChuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsTGluZScsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnb3JpZ2luYWxDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBuYW1lOiBudWxsXG4gICAgICB9O1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFJldHVybiB0cnVlIGlmIHdlIGhhdmUgdGhlIHNvdXJjZSBjb250ZW50IGZvciBldmVyeSBzb3VyY2UgaW4gdGhlIHNvdXJjZVxuICAgKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzID1cbiAgICBmdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyX2hhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCkge1xuICAgICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50Lmxlbmd0aCA+PSB0aGlzLl9zb3VyY2VzLnNpemUoKSAmJlxuICAgICAgICAhdGhpcy5zb3VyY2VzQ29udGVudC5zb21lKGZ1bmN0aW9uIChzYykgeyByZXR1cm4gc2MgPT0gbnVsbDsgfSk7XG4gICAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gICAqIG9yaWdpbmFsIHNvdXJjZSBmaWxlLiBSZXR1cm5zIG51bGwgaWYgbm8gb3JpZ2luYWwgc291cmNlIGNvbnRlbnQgaXNcbiAgICogYXZhaWxpYmxlLlxuICAgKi9cbiAgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfc291cmNlQ29udGVudEZvcihhU291cmNlLCBudWxsT25NaXNzaW5nKSB7XG4gICAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBhU291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIGFTb3VyY2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fc291cmNlcy5oYXMoYVNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKGFTb3VyY2UpXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHVybDtcbiAgICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbFxuICAgICAgICAgICYmICh1cmwgPSB1dGlsLnVybFBhcnNlKHRoaXMuc291cmNlUm9vdCkpKSB7XG4gICAgICAgIC8vIFhYWDogZmlsZTovLyBVUklzIGFuZCBhYnNvbHV0ZSBwYXRocyBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IgZm9yXG4gICAgICAgIC8vIG1hbnkgdXNlcnMuIFdlIGNhbiBoZWxwIHRoZW0gb3V0IHdoZW4gdGhleSBleHBlY3QgZmlsZTovLyBVUklzIHRvXG4gICAgICAgIC8vIGJlaGF2ZSBsaWtlIGl0IHdvdWxkIGlmIHRoZXkgd2VyZSBydW5uaW5nIGEgbG9jYWwgSFRUUCBzZXJ2ZXIuIFNlZVxuICAgICAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04ODU1OTcuXG4gICAgICAgIHZhciBmaWxlVXJpQWJzUGF0aCA9IGFTb3VyY2UucmVwbGFjZSgvXmZpbGU6XFwvXFwvLywgXCJcIik7XG4gICAgICAgIGlmICh1cmwuc2NoZW1lID09IFwiZmlsZVwiXG4gICAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhmaWxlVXJpQWJzUGF0aCkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoZmlsZVVyaUFic1BhdGgpXVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCghdXJsLnBhdGggfHwgdXJsLnBhdGggPT0gXCIvXCIpXG4gICAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhcIi9cIiArIGFTb3VyY2UpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKFwiL1wiICsgYVNvdXJjZSldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCByZWN1cnNpdmVseSBmcm9tXG4gICAgICAvLyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IuIEluIHRoYXQgY2FzZSwgd2VcbiAgICAgIC8vIGRvbid0IHdhbnQgdG8gdGhyb3cgaWYgd2UgY2FuJ3QgZmluZCB0aGUgc291cmNlIC0gd2UganVzdCB3YW50IHRvXG4gICAgICAvLyByZXR1cm4gbnVsbCwgc28gd2UgcHJvdmlkZSBhIGZsYWcgdG8gZXhpdCBncmFjZWZ1bGx5LlxuICAgICAgaWYgKG51bGxPbk1pc3NpbmcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgICAgfVxuICAgIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gICAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICAgKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gICAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICAgKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICAgKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICAgKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gICAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICAgKlxuICAgKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAgICovXG4gIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmdlbmVyYXRlZFBvc2l0aW9uRm9yID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJyk7XG4gICAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaW5lOiBudWxsLFxuICAgICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcblxuICAgICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgIG9yaWdpbmFsTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgICB9O1xuXG4gICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgICAgbmVlZGxlLFxuICAgICAgICB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFxuICAgICAgICBcIm9yaWdpbmFsTGluZVwiLFxuICAgICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICAgIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsXG4gICAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICAgKTtcblxuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IG5lZWRsZS5zb3VyY2UpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgICB9O1xuICAgIH07XG5cbiAgZXhwb3J0cy5CYXNpY1NvdXJjZU1hcENvbnN1bWVyID0gQmFzaWNTb3VyY2VNYXBDb25zdW1lcjtcblxuICAvKipcbiAgICogQW4gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyIGluc3RhbmNlIHJlcHJlc2VudHMgYSBwYXJzZWQgc291cmNlIG1hcCB3aGljaFxuICAgKiB3ZSBjYW4gcXVlcnkgZm9yIGluZm9ybWF0aW9uLiBJdCBkaWZmZXJzIGZyb20gQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpblxuICAgKiB0aGF0IGl0IHRha2VzIFwiaW5kZXhlZFwiIHNvdXJjZSBtYXBzIChpLmUuIG9uZXMgd2l0aCBhIFwic2VjdGlvbnNcIiBmaWVsZCkgYXNcbiAgICogaW5wdXQuXG4gICAqXG4gICAqIFRoZSBvbmx5IHBhcmFtZXRlciBpcyBhIHJhdyBzb3VyY2UgbWFwIChlaXRoZXIgYXMgYSBKU09OIHN0cmluZywgb3IgYWxyZWFkeVxuICAgKiBwYXJzZWQgdG8gYW4gb2JqZWN0KS4gQWNjb3JkaW5nIHRvIHRoZSBzcGVjIGZvciBpbmRleGVkIHNvdXJjZSBtYXBzLCB0aGV5XG4gICAqIGhhdmUgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICAgKlxuICAgKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAgICogICAtIGZpbGU6IE9wdGlvbmFsLiBUaGUgZ2VuZXJhdGVkIGZpbGUgdGhpcyBzb3VyY2UgbWFwIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICogICAtIHNlY3Rpb25zOiBBIGxpc3Qgb2Ygc2VjdGlvbiBkZWZpbml0aW9ucy5cbiAgICpcbiAgICogRWFjaCB2YWx1ZSB1bmRlciB0aGUgXCJzZWN0aW9uc1wiIGZpZWxkIGhhcyB0d28gZmllbGRzOlxuICAgKiAgIC0gb2Zmc2V0OiBUaGUgb2Zmc2V0IGludG8gdGhlIG9yaWdpbmFsIHNwZWNpZmllZCBhdCB3aGljaCB0aGlzIHNlY3Rpb25cbiAgICogICAgICAgYmVnaW5zIHRvIGFwcGx5LCBkZWZpbmVkIGFzIGFuIG9iamVjdCB3aXRoIGEgXCJsaW5lXCIgYW5kIFwiY29sdW1uXCJcbiAgICogICAgICAgZmllbGQuXG4gICAqICAgLSBtYXA6IEEgc291cmNlIG1hcCBkZWZpbml0aW9uLiBUaGlzIHNvdXJjZSBtYXAgY291bGQgYWxzbyBiZSBpbmRleGVkLFxuICAgKiAgICAgICBidXQgZG9lc24ndCBoYXZlIHRvIGJlLlxuICAgKlxuICAgKiBJbnN0ZWFkIG9mIHRoZSBcIm1hcFwiIGZpZWxkLCBpdCdzIGFsc28gcG9zc2libGUgdG8gaGF2ZSBhIFwidXJsXCIgZmllbGRcbiAgICogc3BlY2lmeWluZyBhIFVSTCB0byByZXRyaWV2ZSBhIHNvdXJjZSBtYXAgZnJvbSwgYnV0IHRoYXQncyBjdXJyZW50bHlcbiAgICogdW5zdXBwb3J0ZWQuXG4gICAqXG4gICAqIEhlcmUncyBhbiBleGFtcGxlIHNvdXJjZSBtYXAsIHRha2VuIGZyb20gdGhlIHNvdXJjZSBtYXAgc3BlY1swXSwgYnV0XG4gICAqIG1vZGlmaWVkIHRvIG9taXQgYSBzZWN0aW9uIHdoaWNoIHVzZXMgdGhlIFwidXJsXCIgZmllbGQuXG4gICAqXG4gICAqICB7XG4gICAqICAgIHZlcnNpb24gOiAzLFxuICAgKiAgICBmaWxlOiBcImFwcC5qc1wiLFxuICAgKiAgICBzZWN0aW9uczogW3tcbiAgICogICAgICBvZmZzZXQ6IHtsaW5lOjEwMCwgY29sdW1uOjEwfSxcbiAgICogICAgICBtYXA6IHtcbiAgICogICAgICAgIHZlcnNpb24gOiAzLFxuICAgKiAgICAgICAgZmlsZTogXCJzZWN0aW9uLmpzXCIsXG4gICAqICAgICAgICBzb3VyY2VzOiBbXCJmb28uanNcIiwgXCJiYXIuanNcIl0sXG4gICAqICAgICAgICBuYW1lczogW1wic3JjXCIsIFwibWFwc1wiLCBcImFyZVwiLCBcImZ1blwiXSxcbiAgICogICAgICAgIG1hcHBpbmdzOiBcIkFBQUEsRTs7QUJDREU7XCJcbiAgICogICAgICB9XG4gICAqICAgIH1dLFxuICAgKiAgfVxuICAgKlxuICAgKiBbMF06IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVUxUkdBZWhRd1J5cFVUb3ZGMUtSbHBpT0Z6ZTBiLV8yZ2M2ZkFIMEtZMGsvZWRpdCNoZWFkaW5nPWguNTM1ZXMzeGVwcmd0XG4gICAqL1xuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCkge1xuICAgIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICAgIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHNvdXJjZU1hcCA9IEpTT04ucGFyc2UoYVNvdXJjZU1hcC5yZXBsYWNlKC9eXFwpXFxdXFx9Jy8sICcnKSk7XG4gICAgfVxuXG4gICAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gICAgdmFyIHNlY3Rpb25zID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc2VjdGlvbnMnKTtcblxuICAgIGlmICh2ZXJzaW9uICE9IHRoaXMuX3ZlcnNpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICAgIH1cblxuICAgIHRoaXMuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gICAgdmFyIGxhc3RPZmZzZXQgPSB7XG4gICAgICBsaW5lOiAtMSxcbiAgICAgIGNvbHVtbjogMFxuICAgIH07XG4gICAgdGhpcy5fc2VjdGlvbnMgPSBzZWN0aW9ucy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIGlmIChzLnVybCkge1xuICAgICAgICAvLyBUaGUgdXJsIGZpZWxkIHdpbGwgcmVxdWlyZSBzdXBwb3J0IGZvciBhc3luY2hyb25pY2l0eS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzE2XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcG9ydCBmb3IgdXJsIGZpZWxkIGluIHNlY3Rpb25zIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSB1dGlsLmdldEFyZyhzLCAnb2Zmc2V0Jyk7XG4gICAgICB2YXIgb2Zmc2V0TGluZSA9IHV0aWwuZ2V0QXJnKG9mZnNldCwgJ2xpbmUnKTtcbiAgICAgIHZhciBvZmZzZXRDb2x1bW4gPSB1dGlsLmdldEFyZyhvZmZzZXQsICdjb2x1bW4nKTtcblxuICAgICAgaWYgKG9mZnNldExpbmUgPCBsYXN0T2Zmc2V0LmxpbmUgfHxcbiAgICAgICAgICAob2Zmc2V0TGluZSA9PT0gbGFzdE9mZnNldC5saW5lICYmIG9mZnNldENvbHVtbiA8IGxhc3RPZmZzZXQuY29sdW1uKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3Rpb24gb2Zmc2V0cyBtdXN0IGJlIG9yZGVyZWQgYW5kIG5vbi1vdmVybGFwcGluZy4nKTtcbiAgICAgIH1cbiAgICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdlbmVyYXRlZE9mZnNldDoge1xuICAgICAgICAgIC8vIFRoZSBvZmZzZXQgZmllbGRzIGFyZSAwLWJhc2VkLCBidXQgd2UgdXNlIDEtYmFzZWQgaW5kaWNlcyB3aGVuXG4gICAgICAgICAgLy8gZW5jb2RpbmcvZGVjb2RpbmcgZnJvbSBWTFEuXG4gICAgICAgICAgZ2VuZXJhdGVkTGluZTogb2Zmc2V0TGluZSArIDEsXG4gICAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBvZmZzZXRDb2x1bW4gKyAxXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnN1bWVyOiBuZXcgU291cmNlTWFwQ29uc3VtZXIodXRpbC5nZXRBcmcocywgJ21hcCcpKVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbiAgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gICAqL1xuICBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAgICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNvdXJjZXMucHVzaCh0aGlzLl9zZWN0aW9uc1tpXS5jb25zdW1lci5zb3VyY2VzW2pdKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICAgKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAgICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICAgKlxuICAgKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC5cbiAgICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC5cbiAgICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICAgKi9cbiAgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgICAgfTtcblxuICAgICAgLy8gRmluZCB0aGUgc2VjdGlvbiBjb250YWluaW5nIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24gd2UncmUgdHJ5aW5nIHRvIG1hcFxuICAgICAgLy8gdG8gYW4gb3JpZ2luYWwgcG9zaXRpb24uXG4gICAgICB2YXIgc2VjdGlvbkluZGV4ID0gYmluYXJ5U2VhcmNoLnNlYXJjaChuZWVkbGUsIHRoaXMuX3NlY3Rpb25zLFxuICAgICAgICBmdW5jdGlvbihuZWVkbGUsIHNlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgY21wID0gbmVlZGxlLmdlbmVyYXRlZExpbmUgLSBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lO1xuICAgICAgICAgIGlmIChjbXApIHtcbiAgICAgICAgICAgIHJldHVybiBjbXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIChuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgIHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgIH0pO1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tzZWN0aW9uSW5kZXhdO1xuXG4gICAgICBpZiAoIXNlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgICAgbmFtZTogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VjdGlvbi5jb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgICAgbGluZTogbmVlZGxlLmdlbmVyYXRlZExpbmUgLVxuICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgIGNvbHVtbjogbmVlZGxlLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgICA6IDApLFxuICAgICAgICBiaWFzOiBhQXJncy5iaWFzXG4gICAgICB9KTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBoYXZlIHRoZSBzb3VyY2UgY29udGVudCBmb3IgZXZlcnkgc291cmNlIGluIHRoZSBzb3VyY2VcbiAgICogbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzID1cbiAgICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2VjdGlvbnMuZXZlcnkoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHMuY29uc3VtZXIuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICAgKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gICAqIGF2YWlsYWJsZS5cbiAgICovXG4gIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gICAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX3NvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgbnVsbE9uTWlzc2luZykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICAgIHZhciBjb250ZW50ID0gc2VjdGlvbi5jb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIHRydWUpO1xuICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobnVsbE9uTWlzc2luZykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTb3VyY2UgKyAnXCIgaXMgbm90IGluIHRoZSBTb3VyY2VNYXAuJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAgICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gICAqIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAgICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAgICpcbiAgICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAgICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gICAqL1xuICBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmdlbmVyYXRlZFBvc2l0aW9uRm9yID1cbiAgICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcblxuICAgICAgICAvLyBPbmx5IGNvbnNpZGVyIHRoaXMgc2VjdGlvbiBpZiB0aGUgcmVxdWVzdGVkIHNvdXJjZSBpcyBpbiB0aGUgbGlzdCBvZlxuICAgICAgICAvLyBzb3VyY2VzIG9mIHRoZSBjb25zdW1lci5cbiAgICAgICAgaWYgKHNlY3Rpb24uY29uc3VtZXIuc291cmNlcy5pbmRleE9mKHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJykpID09PSAtMSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBnZW5lcmF0ZWRQb3NpdGlvbiA9IHNlY3Rpb24uY29uc3VtZXIuZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpO1xuICAgICAgICBpZiAoZ2VuZXJhdGVkUG9zaXRpb24pIHtcbiAgICAgICAgICB2YXIgcmV0ID0ge1xuICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkUG9zaXRpb24ubGluZSArXG4gICAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZFBvc2l0aW9uLmNvbHVtbiArXG4gICAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lXG4gICAgICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgICAgIDogMClcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsXG4gICAgICB9O1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAgICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gICAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gICAqL1xuICBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuICAgICAgICB2YXIgc2VjdGlvbk1hcHBpbmdzID0gc2VjdGlvbi5jb25zdW1lci5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VjdGlvbk1hcHBpbmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgdmFyIG1hcHBpbmcgPSBzZWN0aW9uTWFwcGluZ3NbaV07XG5cbiAgICAgICAgICB2YXIgc291cmNlID0gc2VjdGlvbi5jb25zdW1lci5fc291cmNlcy5hdChtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgICAgaWYgKHNlY3Rpb24uY29uc3VtZXIuc291cmNlUm9vdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc291cmNlID0gdXRpbC5qb2luKHNlY3Rpb24uY29uc3VtZXIuc291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fc291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcblxuICAgICAgICAgIHZhciBuYW1lID0gc2VjdGlvbi5jb25zdW1lci5fbmFtZXMuYXQobWFwcGluZy5uYW1lKTtcbiAgICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICAgICAgbmFtZSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG5cbiAgICAgICAgICAvLyBUaGUgbWFwcGluZ3MgY29taW5nIGZyb20gdGhlIGNvbnN1bWVyIGZvciB0aGUgc2VjdGlvbiBoYXZlXG4gICAgICAgICAgLy8gZ2VuZXJhdGVkIHBvc2l0aW9ucyByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIHNlY3Rpb24sIHNvIHdlXG4gICAgICAgICAgLy8gbmVlZCB0byBvZmZzZXQgdGhlbSB0byBiZSByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIGNvbmNhdGVuYXRlZFxuICAgICAgICAgIC8vIGdlbmVyYXRlZCBmaWxlLlxuICAgICAgICAgIHZhciBhZGp1c3RlZE1hcHBpbmcgPSB7XG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSArXG4gICAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG1hcHBpbmcuY29sdW1uICtcbiAgICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSlcbiAgICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICAgIDogMCxcbiAgICAgICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGFkanVzdGVkTWFwcGluZy5vcmlnaW5hbExpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgcXVpY2tTb3J0KHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCk7XG4gICAgICBxdWlja1NvcnQodGhpcy5fX29yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuICAgIH07XG5cbiAgZXhwb3J0cy5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIgPSBJbmRleGVkU291cmNlTWFwQ29uc3VtZXI7XG5cbn0pO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZGVmaW5lID0gcmVxdWlyZSgnYW1kZWZpbmUnKShtb2R1bGUsIHJlcXVpcmUpO1xufVxuZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblxuICB2YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG4gIHZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG4gIHZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG4gIHZhciBNYXBwaW5nTGlzdCA9IHJlcXVpcmUoJy4vbWFwcGluZy1saXN0JykuTWFwcGluZ0xpc3Q7XG5cbiAgLyoqXG4gICAqIEFuIGluc3RhbmNlIG9mIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IgcmVwcmVzZW50cyBhIHNvdXJjZSBtYXAgd2hpY2ggaXNcbiAgICogYmVpbmcgYnVpbHQgaW5jcmVtZW50YWxseS4gWW91IG1heSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIGZpbGU6IFRoZSBmaWxlbmFtZSBvZiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAgICogICAtIHNvdXJjZVJvb3Q6IEEgcm9vdCBmb3IgYWxsIHJlbGF0aXZlIFVSTHMgaW4gdGhpcyBzb3VyY2UgbWFwLlxuICAgKi9cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKSB7XG4gICAgaWYgKCFhQXJncykge1xuICAgICAgYUFyZ3MgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5fZmlsZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnZmlsZScsIG51bGwpO1xuICAgIHRoaXMuX3NvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZVJvb3QnLCBudWxsKTtcbiAgICB0aGlzLl9za2lwVmFsaWRhdGlvbiA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc2tpcFZhbGlkYXRpb24nLCBmYWxzZSk7XG4gICAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICAgIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG4gICAgdGhpcy5fbWFwcGluZ3MgPSBuZXcgTWFwcGluZ0xpc3QoKTtcbiAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xuICB9XG5cbiAgU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgU291cmNlTWFwR2VuZXJhdG9yIGJhc2VkIG9uIGEgU291cmNlTWFwQ29uc3VtZXJcbiAgICpcbiAgICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwLlxuICAgKi9cbiAgU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXAgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9mcm9tU291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lcikge1xuICAgICAgdmFyIHNvdXJjZVJvb3QgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlUm9vdDtcbiAgICAgIHZhciBnZW5lcmF0b3IgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKHtcbiAgICAgICAgZmlsZTogYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUsXG4gICAgICAgIHNvdXJjZVJvb3Q6IHNvdXJjZVJvb3RcbiAgICAgIH0pO1xuICAgICAgYVNvdXJjZU1hcENvbnN1bWVyLmVhY2hNYXBwaW5nKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICAgIHZhciBuZXdNYXBwaW5nID0ge1xuICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgbGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICAgICAgY29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG5ld01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXdNYXBwaW5nLm9yaWdpbmFsID0ge1xuICAgICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBuZXdNYXBwaW5nLm5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2VuZXJhdG9yLmFkZE1hcHBpbmcobmV3TWFwcGluZyk7XG4gICAgICB9KTtcbiAgICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgIGdlbmVyYXRvci5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBnZW5lcmF0b3I7XG4gICAgfTtcblxuICAvKipcbiAgICogQWRkIGEgc2luZ2xlIG1hcHBpbmcgZnJvbSBvcmlnaW5hbCBzb3VyY2UgbGluZSBhbmQgY29sdW1uIHRvIHRoZSBnZW5lcmF0ZWRcbiAgICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIGZvciB0aGlzIHNvdXJjZSBtYXAgYmVpbmcgY3JlYXRlZC4gVGhlIG1hcHBpbmdcbiAgICogb2JqZWN0IHNob3VsZCBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIGdlbmVyYXRlZDogQW4gb2JqZWN0IHdpdGggdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICAgKiAgIC0gb3JpZ2luYWw6IEFuIG9iamVjdCB3aXRoIHRoZSBvcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICAgKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUgKHJlbGF0aXZlIHRvIHRoZSBzb3VyY2VSb290KS5cbiAgICogICAtIG5hbWU6IEFuIG9wdGlvbmFsIG9yaWdpbmFsIHRva2VuIG5hbWUgZm9yIHRoaXMgbWFwcGluZy5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYWRkTWFwcGluZyA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FkZE1hcHBpbmcoYUFyZ3MpIHtcbiAgICAgIHZhciBnZW5lcmF0ZWQgPSB1dGlsLmdldEFyZyhhQXJncywgJ2dlbmVyYXRlZCcpO1xuICAgICAgdmFyIG9yaWdpbmFsID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdvcmlnaW5hbCcsIG51bGwpO1xuICAgICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJywgbnVsbCk7XG4gICAgICB2YXIgbmFtZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbmFtZScsIG51bGwpO1xuXG4gICAgICBpZiAoIXRoaXMuX3NraXBWYWxpZGF0aW9uKSB7XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRlTWFwcGluZyhnZW5lcmF0ZWQsIG9yaWdpbmFsLCBzb3VyY2UsIG5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgIXRoaXMuX3NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgdGhpcy5fc291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiAhdGhpcy5fbmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbWFwcGluZ3MuYWRkKHtcbiAgICAgICAgZ2VuZXJhdGVkTGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogZ2VuZXJhdGVkLmNvbHVtbixcbiAgICAgICAgb3JpZ2luYWxMaW5lOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmxpbmUsXG4gICAgICAgIG9yaWdpbmFsQ29sdW1uOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmNvbHVtbixcbiAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGEgc291cmNlIGZpbGUuXG4gICAqL1xuICBTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgICAgdmFyIHNvdXJjZSA9IGFTb3VyY2VGaWxlO1xuICAgICAgaWYgKHRoaXMuX3NvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuX3NvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhU291cmNlQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIC8vIEFkZCB0aGUgc291cmNlIGNvbnRlbnQgdG8gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgX3NvdXJjZXNDb250ZW50cyBtYXAgaWYgdGhlIHByb3BlcnR5IGlzIG51bGwuXG4gICAgICAgIGlmICghdGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV0gPSBhU291cmNlQ29udGVudDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgc291cmNlIGZpbGUgZnJvbSB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAgIC8vIElmIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcCBpcyBlbXB0eSwgc2V0IHRoZSBwcm9wZXJ0eSB0byBudWxsLlxuICAgICAgICBkZWxldGUgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV07XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9zb3VyY2VzQ29udGVudHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBtYXBwaW5ncyBvZiBhIHN1Yi1zb3VyY2UtbWFwIGZvciBhIHNwZWNpZmljIHNvdXJjZSBmaWxlIHRvIHRoZVxuICAgKiBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZC4gRWFjaCBtYXBwaW5nIHRvIHRoZSBzdXBwbGllZCBzb3VyY2UgZmlsZSBpc1xuICAgKiByZXdyaXR0ZW4gdXNpbmcgdGhlIHN1cHBsaWVkIHNvdXJjZSBtYXAuIE5vdGU6IFRoZSByZXNvbHV0aW9uIGZvciB0aGVcbiAgICogcmVzdWx0aW5nIG1hcHBpbmdzIGlzIHRoZSBtaW5pbWl1bSBvZiB0aGlzIG1hcCBhbmQgdGhlIHN1cHBsaWVkIG1hcC5cbiAgICpcbiAgICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkLlxuICAgKiBAcGFyYW0gYVNvdXJjZUZpbGUgT3B0aW9uYWwuIFRoZSBmaWxlbmFtZSBvZiB0aGUgc291cmNlIGZpbGUuXG4gICAqICAgICAgICBJZiBvbWl0dGVkLCBTb3VyY2VNYXBDb25zdW1lcidzIGZpbGUgcHJvcGVydHkgd2lsbCBiZSB1c2VkLlxuICAgKiBAcGFyYW0gYVNvdXJjZU1hcFBhdGggT3B0aW9uYWwuIFRoZSBkaXJuYW1lIG9mIHRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgbWFwXG4gICAqICAgICAgICB0byBiZSBhcHBsaWVkLiBJZiByZWxhdGl2ZSwgaXQgaXMgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcENvbnN1bWVyLlxuICAgKiAgICAgICAgVGhpcyBwYXJhbWV0ZXIgaXMgbmVlZGVkIHdoZW4gdGhlIHR3byBzb3VyY2UgbWFwcyBhcmVuJ3QgaW4gdGhlIHNhbWVcbiAgICogICAgICAgIGRpcmVjdG9yeSwgYW5kIHRoZSBzb3VyY2UgbWFwIHRvIGJlIGFwcGxpZWQgY29udGFpbnMgcmVsYXRpdmUgc291cmNlXG4gICAqICAgICAgICBwYXRocy4gSWYgc28sIHRob3NlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBuZWVkIHRvIGJlIHJld3JpdHRlblxuICAgKiAgICAgICAgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvci5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hcHBseVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIsIGFTb3VyY2VGaWxlLCBhU291cmNlTWFwUGF0aCkge1xuICAgICAgdmFyIHNvdXJjZUZpbGUgPSBhU291cmNlRmlsZTtcbiAgICAgIC8vIElmIGFTb3VyY2VGaWxlIGlzIG9taXR0ZWQsIHdlIHdpbGwgdXNlIHRoZSBmaWxlIHByb3BlcnR5IG9mIHRoZSBTb3VyY2VNYXBcbiAgICAgIGlmIChhU291cmNlRmlsZSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChhU291cmNlTWFwQ29uc3VtZXIuZmlsZSA9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1NvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgcmVxdWlyZXMgZWl0aGVyIGFuIGV4cGxpY2l0IHNvdXJjZSBmaWxlLCAnICtcbiAgICAgICAgICAgICdvciB0aGUgc291cmNlIG1hcFxcJ3MgXCJmaWxlXCIgcHJvcGVydHkuIEJvdGggd2VyZSBvbWl0dGVkLidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZUZpbGUgPSBhU291cmNlTWFwQ29uc3VtZXIuZmlsZTtcbiAgICAgIH1cbiAgICAgIHZhciBzb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICAgIC8vIE1ha2UgXCJzb3VyY2VGaWxlXCIgcmVsYXRpdmUgaWYgYW4gYWJzb2x1dGUgVXJsIGlzIHBhc3NlZC5cbiAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgICB9XG4gICAgICAvLyBBcHBseWluZyB0aGUgU291cmNlTWFwIGNhbiBhZGQgYW5kIHJlbW92ZSBpdGVtcyBmcm9tIHRoZSBzb3VyY2VzIGFuZFxuICAgICAgLy8gdGhlIG5hbWVzIGFycmF5LlxuICAgICAgdmFyIG5ld1NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgICAgIHZhciBuZXdOYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gICAgICAvLyBGaW5kIG1hcHBpbmdzIGZvciB0aGUgXCJzb3VyY2VGaWxlXCJcbiAgICAgIHRoaXMuX21hcHBpbmdzLnVuc29ydGVkRm9yRWFjaChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IHNvdXJjZUZpbGUgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIGl0IGNhbiBiZSBtYXBwZWQgYnkgdGhlIHNvdXJjZSBtYXAsIHRoZW4gdXBkYXRlIHRoZSBtYXBwaW5nLlxuICAgICAgICAgIHZhciBvcmlnaW5hbCA9IGFTb3VyY2VNYXBDb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG9yaWdpbmFsLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBDb3B5IG1hcHBpbmdcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gb3JpZ2luYWwuc291cmNlO1xuICAgICAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbC5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gb3JpZ2luYWwubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCAmJiAhbmV3U291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgICAgIG5ld1NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmFtZSA9IG1hcHBpbmcubmFtZTtcbiAgICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiAhbmV3TmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgbmV3TmFtZXMuYWRkKG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgIH0sIHRoaXMpO1xuICAgICAgdGhpcy5fc291cmNlcyA9IG5ld1NvdXJjZXM7XG4gICAgICB0aGlzLl9uYW1lcyA9IG5ld05hbWVzO1xuXG4gICAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50cyBvZiBhcHBsaWVkIG1hcC5cbiAgICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfTtcblxuICAvKipcbiAgICogQSBtYXBwaW5nIGNhbiBoYXZlIG9uZSBvZiB0aGUgdGhyZWUgbGV2ZWxzIG9mIGRhdGE6XG4gICAqXG4gICAqICAgMS4gSnVzdCB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICAgKiAgIDIuIFRoZSBHZW5lcmF0ZWQgcG9zaXRpb24sIG9yaWdpbmFsIHBvc2l0aW9uLCBhbmQgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIDMuIEdlbmVyYXRlZCBhbmQgb3JpZ2luYWwgcG9zaXRpb24sIG9yaWdpbmFsIHNvdXJjZSwgYXMgd2VsbCBhcyBhIG5hbWVcbiAgICogICAgICB0b2tlbi5cbiAgICpcbiAgICogVG8gbWFpbnRhaW4gY29uc2lzdGVuY3ksIHdlIHZhbGlkYXRlIHRoYXQgYW55IG5ldyBtYXBwaW5nIGJlaW5nIGFkZGVkIGZhbGxzXG4gICAqIGluIHRvIG9uZSBvZiB0aGVzZSBjYXRlZ29yaWVzLlxuICAgKi9cbiAgU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVNYXBwaW5nID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdmFsaWRhdGVNYXBwaW5nKGFHZW5lcmF0ZWQsIGFPcmlnaW5hbCwgYVNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFOYW1lKSB7XG4gICAgICBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgJiYgIWFPcmlnaW5hbCAmJiAhYVNvdXJjZSAmJiAhYU5hbWUpIHtcbiAgICAgICAgLy8gQ2FzZSAxLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhR2VuZXJhdGVkICYmICdsaW5lJyBpbiBhR2VuZXJhdGVkICYmICdjb2x1bW4nIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgICAgICAgICYmIGFPcmlnaW5hbCAmJiAnbGluZScgaW4gYU9yaWdpbmFsICYmICdjb2x1bW4nIGluIGFPcmlnaW5hbFxuICAgICAgICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgICAmJiBhT3JpZ2luYWwubGluZSA+IDAgJiYgYU9yaWdpbmFsLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgICAmJiBhU291cmNlKSB7XG4gICAgICAgIC8vIENhc2VzIDIgYW5kIDMuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWFwcGluZzogJyArIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBnZW5lcmF0ZWQ6IGFHZW5lcmF0ZWQsXG4gICAgICAgICAgc291cmNlOiBhU291cmNlLFxuICAgICAgICAgIG9yaWdpbmFsOiBhT3JpZ2luYWwsXG4gICAgICAgICAgbmFtZTogYU5hbWVcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZSB0aGUgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gdG8gdGhlIHN0cmVhbSBvZiBiYXNlIDY0IFZMUXNcbiAgICogc3BlY2lmaWVkIGJ5IHRoZSBzb3VyY2UgbWFwIGZvcm1hdC5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3NlcmlhbGl6ZU1hcHBpbmdzID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3Jfc2VyaWFsaXplTWFwcGluZ3MoKSB7XG4gICAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkTGluZSA9IDE7XG4gICAgICB2YXIgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IDA7XG4gICAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgICB2YXIgcHJldmlvdXNTb3VyY2UgPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG1hcHBpbmc7XG5cbiAgICAgIHZhciBtYXBwaW5ncyA9IHRoaXMuX21hcHBpbmdzLnRvQXJyYXkoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtYXBwaW5ncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBtYXBwaW5nID0gbWFwcGluZ3NbaV07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICAgIHdoaWxlIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9ICc7JztcbiAgICAgICAgICAgIHByZXZpb3VzR2VuZXJhdGVkTGluZSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgIGlmICghdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nLCBtYXBwaW5nc1tpIC0gMV0pKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ICs9ICcsJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdCArPSBiYXNlNjRWTFEuZW5jb2RlKHRoaXMuX3NvdXJjZXMuaW5kZXhPZihtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzU291cmNlKTtcbiAgICAgICAgICBwcmV2aW91c1NvdXJjZSA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihtYXBwaW5nLnNvdXJjZSk7XG5cbiAgICAgICAgICAvLyBsaW5lcyBhcmUgc3RvcmVkIDAtYmFzZWQgaW4gU291cmNlTWFwIHNwZWMgdmVyc2lvbiAzXG4gICAgICAgICAgcmVzdWx0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbExpbmUgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsTGluZSk7XG4gICAgICAgICAgcHJldmlvdXNPcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDE7XG5cbiAgICAgICAgICByZXN1bHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsQ29sdW1uKTtcbiAgICAgICAgICBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGJhc2U2NFZMUS5lbmNvZGUodGhpcy5fbmFtZXMuaW5kZXhPZihtYXBwaW5nLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzTmFtZSk7XG4gICAgICAgICAgICBwcmV2aW91c05hbWUgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICBTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50ID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfZ2VuZXJhdGVTb3VyY2VzQ29udGVudChhU291cmNlcywgYVNvdXJjZVJvb3QpIHtcbiAgICAgIHJldHVybiBhU291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoIXRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhU291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZShhU291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIga2V5ID0gdXRpbC50b1NldFN0cmluZyhzb3VyY2UpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX3NvdXJjZXNDb250ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkpXG4gICAgICAgICAgPyB0aGlzLl9zb3VyY2VzQ29udGVudHNba2V5XVxuICAgICAgICAgIDogbnVsbDtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIEV4dGVybmFsaXplIHRoZSBzb3VyY2UgbWFwLlxuICAgKi9cbiAgU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS50b0pTT04gPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b0pTT04oKSB7XG4gICAgICB2YXIgbWFwID0ge1xuICAgICAgICB2ZXJzaW9uOiB0aGlzLl92ZXJzaW9uLFxuICAgICAgICBzb3VyY2VzOiB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgICAgbmFtZXM6IHRoaXMuX25hbWVzLnRvQXJyYXkoKSxcbiAgICAgICAgbWFwcGluZ3M6IHRoaXMuX3NlcmlhbGl6ZU1hcHBpbmdzKClcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5fZmlsZSAhPSBudWxsKSB7XG4gICAgICAgIG1hcC5maWxlID0gdGhpcy5fZmlsZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgbWFwLnNvdXJjZVJvb3QgPSB0aGlzLl9zb3VyY2VSb290O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICBtYXAuc291cmNlc0NvbnRlbnQgPSB0aGlzLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KG1hcC5zb3VyY2VzLCBtYXAuc291cmNlUm9vdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXA7XG4gICAgfTtcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZCB0byBhIHN0cmluZy5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9TdHJpbmcgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKTtcbiAgICB9O1xuXG4gIGV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gU291cmNlTWFwR2VuZXJhdG9yO1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgdmFyIFNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG4gIHZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbiAgLy8gTWF0Y2hlcyBhIFdpbmRvd3Mtc3R5bGUgYFxcclxcbmAgbmV3bGluZSBvciBhIGBcXG5gIG5ld2xpbmUgdXNlZCBieSBhbGwgb3RoZXJcbiAgLy8gb3BlcmF0aW5nIHN5c3RlbXMgdGhlc2UgZGF5cyAoY2FwdHVyaW5nIHRoZSByZXN1bHQpLlxuICB2YXIgUkVHRVhfTkVXTElORSA9IC8oXFxyP1xcbikvO1xuXG4gIC8vIE5ld2xpbmUgY2hhcmFjdGVyIGNvZGUgZm9yIGNoYXJDb2RlQXQoKSBjb21wYXJpc29uc1xuICB2YXIgTkVXTElORV9DT0RFID0gMTA7XG5cbiAgLy8gUHJpdmF0ZSBzeW1ib2wgZm9yIGlkZW50aWZ5aW5nIGBTb3VyY2VOb2RlYHMgd2hlbiBtdWx0aXBsZSB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgc291cmNlLW1hcCBsaWJyYXJ5IGFyZSBsb2FkZWQuIFRoaXMgTVVTVCBOT1QgQ0hBTkdFIGFjcm9zc1xuICAvLyB2ZXJzaW9ucyFcbiAgdmFyIGlzU291cmNlTm9kZSA9IFwiJCQkaXNTb3VyY2VOb2RlJCQkXCI7XG5cbiAgLyoqXG4gICAqIFNvdXJjZU5vZGVzIHByb3ZpZGUgYSB3YXkgdG8gYWJzdHJhY3Qgb3ZlciBpbnRlcnBvbGF0aW5nL2NvbmNhdGVuYXRpbmdcbiAgICogc25pcHBldHMgb2YgZ2VuZXJhdGVkIEphdmFTY3JpcHQgc291cmNlIGNvZGUgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIGxpbmUgYW5kXG4gICAqIGNvbHVtbiBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0gYUxpbmUgVGhlIG9yaWdpbmFsIGxpbmUgbnVtYmVyLlxuICAgKiBAcGFyYW0gYUNvbHVtbiBUaGUgb3JpZ2luYWwgY29sdW1uIG51bWJlci5cbiAgICogQHBhcmFtIGFTb3VyY2UgVGhlIG9yaWdpbmFsIHNvdXJjZSdzIGZpbGVuYW1lLlxuICAgKiBAcGFyYW0gYUNodW5rcyBPcHRpb25hbC4gQW4gYXJyYXkgb2Ygc3RyaW5ncyB3aGljaCBhcmUgc25pcHBldHMgb2ZcbiAgICogICAgICAgIGdlbmVyYXRlZCBKUywgb3Igb3RoZXIgU291cmNlTm9kZXMuXG4gICAqIEBwYXJhbSBhTmFtZSBUaGUgb3JpZ2luYWwgaWRlbnRpZmllci5cbiAgICovXG4gIGZ1bmN0aW9uIFNvdXJjZU5vZGUoYUxpbmUsIGFDb2x1bW4sIGFTb3VyY2UsIGFDaHVua3MsIGFOYW1lKSB7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMuc291cmNlQ29udGVudHMgPSB7fTtcbiAgICB0aGlzLmxpbmUgPSBhTGluZSA9PSBudWxsID8gbnVsbCA6IGFMaW5lO1xuICAgIHRoaXMuY29sdW1uID0gYUNvbHVtbiA9PSBudWxsID8gbnVsbCA6IGFDb2x1bW47XG4gICAgdGhpcy5zb3VyY2UgPSBhU291cmNlID09IG51bGwgPyBudWxsIDogYVNvdXJjZTtcbiAgICB0aGlzLm5hbWUgPSBhTmFtZSA9PSBudWxsID8gbnVsbCA6IGFOYW1lO1xuICAgIHRoaXNbaXNTb3VyY2VOb2RlXSA9IHRydWU7XG4gICAgaWYgKGFDaHVua3MgIT0gbnVsbCkgdGhpcy5hZGQoYUNodW5rcyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFNvdXJjZU5vZGUgZnJvbSBnZW5lcmF0ZWQgY29kZSBhbmQgYSBTb3VyY2VNYXBDb25zdW1lci5cbiAgICpcbiAgICogQHBhcmFtIGFHZW5lcmF0ZWRDb2RlIFRoZSBnZW5lcmF0ZWQgY29kZVxuICAgKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBTb3VyY2VNYXAgZm9yIHRoZSBnZW5lcmF0ZWQgY29kZVxuICAgKiBAcGFyYW0gYVJlbGF0aXZlUGF0aCBPcHRpb25hbC4gVGhlIHBhdGggdGhhdCByZWxhdGl2ZSBzb3VyY2VzIGluIHRoZVxuICAgKiAgICAgICAgU291cmNlTWFwQ29uc3VtZXIgc2hvdWxkIGJlIHJlbGF0aXZlIHRvLlxuICAgKi9cbiAgU291cmNlTm9kZS5mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCA9XG4gICAgZnVuY3Rpb24gU291cmNlTm9kZV9mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcChhR2VuZXJhdGVkQ29kZSwgYVNvdXJjZU1hcENvbnN1bWVyLCBhUmVsYXRpdmVQYXRoKSB7XG4gICAgICAvLyBUaGUgU291cmNlTm9kZSB3ZSB3YW50IHRvIGZpbGwgd2l0aCB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAgICAgIC8vIGFuZCB0aGUgU291cmNlTWFwXG4gICAgICB2YXIgbm9kZSA9IG5ldyBTb3VyY2VOb2RlKCk7XG5cbiAgICAgIC8vIEFsbCBldmVuIGluZGljZXMgb2YgdGhpcyBhcnJheSBhcmUgb25lIGxpbmUgb2YgdGhlIGdlbmVyYXRlZCBjb2RlLFxuICAgICAgLy8gd2hpbGUgYWxsIG9kZCBpbmRpY2VzIGFyZSB0aGUgbmV3bGluZXMgYmV0d2VlbiB0d28gYWRqYWNlbnQgbGluZXNcbiAgICAgIC8vIChzaW5jZSBgUkVHRVhfTkVXTElORWAgY2FwdHVyZXMgaXRzIG1hdGNoKS5cbiAgICAgIC8vIFByb2Nlc3NlZCBmcmFnbWVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGlzIGFycmF5LCBieSBjYWxsaW5nIGBzaGlmdE5leHRMaW5lYC5cbiAgICAgIHZhciByZW1haW5pbmdMaW5lcyA9IGFHZW5lcmF0ZWRDb2RlLnNwbGl0KFJFR0VYX05FV0xJTkUpO1xuICAgICAgdmFyIHNoaWZ0TmV4dExpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxpbmVDb250ZW50cyA9IHJlbWFpbmluZ0xpbmVzLnNoaWZ0KCk7XG4gICAgICAgIC8vIFRoZSBsYXN0IGxpbmUgb2YgYSBmaWxlIG1pZ2h0IG5vdCBoYXZlIGEgbmV3bGluZS5cbiAgICAgICAgdmFyIG5ld0xpbmUgPSByZW1haW5pbmdMaW5lcy5zaGlmdCgpIHx8IFwiXCI7XG4gICAgICAgIHJldHVybiBsaW5lQ29udGVudHMgKyBuZXdMaW5lO1xuICAgICAgfTtcblxuICAgICAgLy8gV2UgbmVlZCB0byByZW1lbWJlciB0aGUgcG9zaXRpb24gb2YgXCJyZW1haW5pbmdMaW5lc1wiXG4gICAgICB2YXIgbGFzdEdlbmVyYXRlZExpbmUgPSAxLCBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcblxuICAgICAgLy8gVGhlIGdlbmVyYXRlIFNvdXJjZU5vZGVzIHdlIG5lZWQgYSBjb2RlIHJhbmdlLlxuICAgICAgLy8gVG8gZXh0cmFjdCBpdCBjdXJyZW50IGFuZCBsYXN0IG1hcHBpbmcgaXMgdXNlZC5cbiAgICAgIC8vIEhlcmUgd2Ugc3RvcmUgdGhlIGxhc3QgbWFwcGluZy5cbiAgICAgIHZhciBsYXN0TWFwcGluZyA9IG51bGw7XG5cbiAgICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgICBpZiAobGFzdE1hcHBpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSBhZGQgdGhlIGNvZGUgZnJvbSBcImxhc3RNYXBwaW5nXCIgdG8gXCJtYXBwaW5nXCI6XG4gICAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlcmUgaXMgYSBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICAgIGlmIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgICAgdmFyIGNvZGUgPSBcIlwiO1xuICAgICAgICAgICAgLy8gQXNzb2NpYXRlIGZpcnN0IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgICAgIC8vIFRoZSByZW1haW5pbmcgY29kZSBpcyBhZGRlZCB3aXRob3V0IG1hcHBpbmdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgICAgIC8vIEFzc29jaWF0ZSB0aGUgY29kZSBiZXR3ZWVuIFwibGFzdEdlbmVyYXRlZENvbHVtblwiIGFuZFxuICAgICAgICAgICAgLy8gXCJtYXBwaW5nLmdlbmVyYXRlZENvbHVtblwiIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1swXTtcbiAgICAgICAgICAgIHZhciBjb2RlID0gbmV4dExpbmUuc3Vic3RyKDAsIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgICAgcmVtYWluaW5nTGluZXNbMF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIGNvZGUpO1xuICAgICAgICAgICAgLy8gTm8gbW9yZSByZW1haW5pbmcgY29kZSwgY29udGludWVcbiAgICAgICAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgYWRkIHRoZSBnZW5lcmF0ZWQgY29kZSB1bnRpbCB0aGUgZmlyc3QgbWFwcGluZ1xuICAgICAgICAvLyB0byB0aGUgU291cmNlTm9kZSB3aXRob3V0IGFueSBtYXBwaW5nLlxuICAgICAgICAvLyBFYWNoIGxpbmUgaXMgYWRkZWQgYXMgc2VwYXJhdGUgc3RyaW5nLlxuICAgICAgICB3aGlsZSAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICBub2RlLmFkZChzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRDb2x1bW4gPCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikge1xuICAgICAgICAgIHZhciBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzWzBdO1xuICAgICAgICAgIG5vZGUuYWRkKG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikpO1xuICAgICAgICAgIHJlbWFpbmluZ0xpbmVzWzBdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgIH1cbiAgICAgICAgbGFzdE1hcHBpbmcgPSBtYXBwaW5nO1xuICAgICAgfSwgdGhpcyk7XG4gICAgICAvLyBXZSBoYXZlIHByb2Nlc3NlZCBhbGwgbWFwcGluZ3MuXG4gICAgICBpZiAocmVtYWluaW5nTGluZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAobGFzdE1hcHBpbmcpIHtcbiAgICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIHJlbWFpbmluZyBjb2RlIGluIHRoZSBjdXJyZW50IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYW5kIGFkZCB0aGUgcmVtYWluaW5nIGxpbmVzIHdpdGhvdXQgYW55IG1hcHBpbmdcbiAgICAgICAgbm9kZS5hZGQocmVtYWluaW5nTGluZXMuam9pbihcIlwiKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvcHkgc291cmNlc0NvbnRlbnQgaW50byBTb3VyY2VOb2RlXG4gICAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoYVJlbGF0aXZlUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbm9kZTtcblxuICAgICAgZnVuY3Rpb24gYWRkTWFwcGluZ1dpdGhDb2RlKG1hcHBpbmcsIGNvZGUpIHtcbiAgICAgICAgaWYgKG1hcHBpbmcgPT09IG51bGwgfHwgbWFwcGluZy5zb3VyY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vZGUuYWRkKGNvZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBhUmVsYXRpdmVQYXRoXG4gICAgICAgICAgICA/IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICAgIDogbWFwcGluZy5zb3VyY2U7XG4gICAgICAgICAgbm9kZS5hZGQobmV3IFNvdXJjZU5vZGUobWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhIGNodW5rIG9mIGdlbmVyYXRlZCBKUyB0byB0aGlzIHNvdXJjZSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAgICogICAgICAgIFNvdXJjZU5vZGUsIG9yIGFuIGFycmF5IHdoZXJlIGVhY2ggbWVtYmVyIGlzIG9uZSBvZiB0aG9zZSB0aGluZ3MuXG4gICAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2FkZChhQ2h1bmspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgICBhQ2h1bmsuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy5hZGQoY2h1bmspO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmIChhQ2h1bmspIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGFDaHVuayk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgXCJFeHBlY3RlZCBhIFNvdXJjZU5vZGUsIHN0cmluZywgb3IgYW4gYXJyYXkgb2YgU291cmNlTm9kZXMgYW5kIHN0cmluZ3MuIEdvdCBcIiArIGFDaHVua1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhIGNodW5rIG9mIGdlbmVyYXRlZCBKUyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgc291cmNlIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSBhQ2h1bmsgQSBzdHJpbmcgc25pcHBldCBvZiBnZW5lcmF0ZWQgSlMgY29kZSwgYW5vdGhlciBpbnN0YW5jZSBvZlxuICAgKiAgICAgICAgU291cmNlTm9kZSwgb3IgYW4gYXJyYXkgd2hlcmUgZWFjaCBtZW1iZXIgaXMgb25lIG9mIHRob3NlIHRoaW5ncy5cbiAgICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3ByZXBlbmQoYUNodW5rKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYUNodW5rKSkge1xuICAgICAgZm9yICh2YXIgaSA9IGFDaHVuay5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy5wcmVwZW5kKGFDaHVua1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4udW5zaGlmdChhQ2h1bmspO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgSlMgc25pcHBldHMgaW4gdGhpcyBub2RlIGFuZCBpdHMgY2hpbGRyZW4uIFRoZVxuICAgKiB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGZvciBlYWNoIHNuaXBwZXQgb2YgSlMgYW5kIGlzIHBhc3NlZCB0aGF0XG4gICAqIHNuaXBwZXQgYW5kIHRoZSBpdHMgb3JpZ2luYWwgYXNzb2NpYXRlZCBzb3VyY2UncyBsaW5lL2NvbHVtbiBsb2NhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICAgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfd2FsayhhRm4pIHtcbiAgICB2YXIgY2h1bms7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNodW5rID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChjaHVua1tpc1NvdXJjZU5vZGVdKSB7XG4gICAgICAgIGNodW5rLndhbGsoYUZuKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoY2h1bmsgIT09ICcnKSB7XG4gICAgICAgICAgYUZuKGNodW5rLCB7IHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBMaWtlIGBTdHJpbmcucHJvdG90eXBlLmpvaW5gIGV4Y2VwdCBmb3IgU291cmNlTm9kZXMuIEluc2VydHMgYGFTdHJgIGJldHdlZW5cbiAgICogZWFjaCBvZiBgdGhpcy5jaGlsZHJlbmAuXG4gICAqXG4gICAqIEBwYXJhbSBhU2VwIFRoZSBzZXBhcmF0b3IuXG4gICAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gU291cmNlTm9kZV9qb2luKGFTZXApIHtcbiAgICB2YXIgbmV3Q2hpbGRyZW47XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICBuZXdDaGlsZHJlbiA9IFtdO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbi0xOyBpKyspIHtcbiAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaChhU2VwKTtcbiAgICAgIH1cbiAgICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSBvbiB0aGUgdmVyeSByaWdodC1tb3N0IHNvdXJjZSBzbmlwcGV0LiBVc2VmdWxcbiAgICogZm9yIHRyaW1taW5nIHdoaXRlc3BhY2UgZnJvbSB0aGUgZW5kIG9mIGEgc291cmNlIG5vZGUsIGV0Yy5cbiAgICpcbiAgICogQHBhcmFtIGFQYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAqIEBwYXJhbSBhUmVwbGFjZW1lbnQgVGhlIHRoaW5nIHRvIHJlcGxhY2UgdGhlIHBhdHRlcm4gd2l0aC5cbiAgICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlLnJlcGxhY2VSaWdodCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgbGFzdENoaWxkID0gdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0Q2hpbGRbaXNTb3VyY2VOb2RlXSkge1xuICAgICAgbGFzdENoaWxkLnJlcGxhY2VSaWdodChhUGF0dGVybiwgYVJlcGxhY2VtZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGxhc3RDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXSA9IGxhc3RDaGlsZC5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCgnJy5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGEgc291cmNlIGZpbGUuIFRoaXMgd2lsbCBiZSBhZGRlZCB0byB0aGUgU291cmNlTWFwR2VuZXJhdG9yXG4gICAqIGluIHRoZSBzb3VyY2VzQ29udGVudCBmaWVsZC5cbiAgICpcbiAgICogQHBhcmFtIGFTb3VyY2VGaWxlIFRoZSBmaWxlbmFtZSBvZiB0aGUgc291cmNlIGZpbGVcbiAgICogQHBhcmFtIGFTb3VyY2VDb250ZW50IFRoZSBjb250ZW50IG9mIHRoZSBzb3VyY2UgZmlsZVxuICAgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUuc2V0U291cmNlQ29udGVudCA9XG4gICAgZnVuY3Rpb24gU291cmNlTm9kZV9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgICAgdGhpcy5zb3VyY2VDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKGFTb3VyY2VGaWxlKV0gPSBhU291cmNlQ29udGVudDtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgU291cmNlTm9kZXMuIFRoZSB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaFxuICAgKiBzb3VyY2UgZmlsZSBjb250ZW50IGFuZCBpcyBwYXNzZWQgdGhlIGZpbGVuYW1lIGFuZCBzb3VyY2UgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICAgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUud2Fsa1NvdXJjZUNvbnRlbnRzID1cbiAgICBmdW5jdGlvbiBTb3VyY2VOb2RlX3dhbGtTb3VyY2VDb250ZW50cyhhRm4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldW2lzU291cmNlTm9kZV0pIHtcbiAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLndhbGtTb3VyY2VDb250ZW50cyhhRm4pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzb3VyY2VzID0gT2JqZWN0LmtleXModGhpcy5zb3VyY2VDb250ZW50cyk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBhRm4odXRpbC5mcm9tU2V0U3RyaW5nKHNvdXJjZXNbaV0pLCB0aGlzLnNvdXJjZUNvbnRlbnRzW3NvdXJjZXNbaV1dKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlLiBXYWxrcyBvdmVyIHRoZSB0cmVlXG4gICAqIGFuZCBjb25jYXRlbmF0ZXMgYWxsIHRoZSB2YXJpb3VzIHNuaXBwZXRzIHRvZ2V0aGVyIHRvIG9uZSBzdHJpbmcuXG4gICAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfdG9TdHJpbmcoKSB7XG4gICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgc3RyICs9IGNodW5rO1xuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlIGFsb25nIHdpdGggYSBzb3VyY2VcbiAgICogbWFwLlxuICAgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmdXaXRoU291cmNlTWFwID0gZnVuY3Rpb24gU291cmNlTm9kZV90b1N0cmluZ1dpdGhTb3VyY2VNYXAoYUFyZ3MpIHtcbiAgICB2YXIgZ2VuZXJhdGVkID0ge1xuICAgICAgY29kZTogXCJcIixcbiAgICAgIGxpbmU6IDEsXG4gICAgICBjb2x1bW46IDBcbiAgICB9O1xuICAgIHZhciBtYXAgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKTtcbiAgICB2YXIgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgIHZhciBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgIHZhciBsYXN0T3JpZ2luYWxMaW5lID0gbnVsbDtcbiAgICB2YXIgbGFzdE9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgICB2YXIgbGFzdE9yaWdpbmFsTmFtZSA9IG51bGw7XG4gICAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaywgb3JpZ2luYWwpIHtcbiAgICAgIGdlbmVyYXRlZC5jb2RlICs9IGNodW5rO1xuICAgICAgaWYgKG9yaWdpbmFsLnNvdXJjZSAhPT0gbnVsbFxuICAgICAgICAgICYmIG9yaWdpbmFsLmxpbmUgIT09IG51bGxcbiAgICAgICAgICAmJiBvcmlnaW5hbC5jb2x1bW4gIT09IG51bGwpIHtcbiAgICAgICAgaWYobGFzdE9yaWdpbmFsU291cmNlICE9PSBvcmlnaW5hbC5zb3VyY2VcbiAgICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTGluZSAhPT0gb3JpZ2luYWwubGluZVxuICAgICAgICAgICB8fCBsYXN0T3JpZ2luYWxDb2x1bW4gIT09IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgICB8fCBsYXN0T3JpZ2luYWxOYW1lICE9PSBvcmlnaW5hbC5uYW1lKSB7XG4gICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgICAgbGFzdE9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmxpbmU7XG4gICAgICAgIGxhc3RPcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgICAgbGFzdE9yaWdpbmFsTmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuZ3RoID0gY2h1bmsubGVuZ3RoOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGlmIChjaHVuay5jaGFyQ29kZUF0KGlkeCkgPT09IE5FV0xJTkVfQ09ERSkge1xuICAgICAgICAgIGdlbmVyYXRlZC5saW5lKys7XG4gICAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbiA9IDA7XG4gICAgICAgICAgLy8gTWFwcGluZ3MgZW5kIGF0IGVvbFxuICAgICAgICAgIGlmIChpZHggKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZW5lcmF0ZWQuY29sdW1uKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLndhbGtTb3VyY2VDb250ZW50cyhmdW5jdGlvbiAoc291cmNlRmlsZSwgc291cmNlQ29udGVudCkge1xuICAgICAgbWFwLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgc291cmNlQ29udGVudCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyBjb2RlOiBnZW5lcmF0ZWQuY29kZSwgbWFwOiBtYXAgfTtcbiAgfTtcblxuICBleHBvcnRzLlNvdXJjZU5vZGUgPSBTb3VyY2VOb2RlO1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgYSBoZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdmFsdWVzIGZyb20gcGFyYW1ldGVyL29wdGlvbnNcbiAgICogb2JqZWN0cy5cbiAgICpcbiAgICogQHBhcmFtIGFyZ3MgVGhlIG9iamVjdCB3ZSBhcmUgZXh0cmFjdGluZyB2YWx1ZXMgZnJvbVxuICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2UgYXJlIGdldHRpbmcuXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgQW4gb3B0aW9uYWwgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nXG4gICAqIGZyb20gdGhlIG9iamVjdC4gSWYgdGhpcyBpcyBub3Qgc3BlY2lmaWVkIGFuZCB0aGUgcHJvcGVydHkgaXMgbWlzc2luZywgYW5cbiAgICogZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAqL1xuICBmdW5jdGlvbiBnZXRBcmcoYUFyZ3MsIGFOYW1lLCBhRGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKGFOYW1lIGluIGFBcmdzKSB7XG4gICAgICByZXR1cm4gYUFyZ3NbYU5hbWVdO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgcmV0dXJuIGFEZWZhdWx0VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYU5hbWUgKyAnXCIgaXMgYSByZXF1aXJlZCBhcmd1bWVudC4nKTtcbiAgICB9XG4gIH1cbiAgZXhwb3J0cy5nZXRBcmcgPSBnZXRBcmc7XG5cbiAgdmFyIHVybFJlZ2V4cCA9IC9eKD86KFtcXHcrXFwtLl0rKTopP1xcL1xcLyg/OihcXHcrOlxcdyspQCk/KFtcXHcuXSopKD86OihcXGQrKSk/KFxcUyopJC87XG4gIHZhciBkYXRhVXJsUmVnZXhwID0gL15kYXRhOi4rXFwsLiskLztcblxuICBmdW5jdGlvbiB1cmxQYXJzZShhVXJsKSB7XG4gICAgdmFyIG1hdGNoID0gYVVybC5tYXRjaCh1cmxSZWdleHApO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc2NoZW1lOiBtYXRjaFsxXSxcbiAgICAgIGF1dGg6IG1hdGNoWzJdLFxuICAgICAgaG9zdDogbWF0Y2hbM10sXG4gICAgICBwb3J0OiBtYXRjaFs0XSxcbiAgICAgIHBhdGg6IG1hdGNoWzVdXG4gICAgfTtcbiAgfVxuICBleHBvcnRzLnVybFBhcnNlID0gdXJsUGFyc2U7XG5cbiAgZnVuY3Rpb24gdXJsR2VuZXJhdGUoYVBhcnNlZFVybCkge1xuICAgIHZhciB1cmwgPSAnJztcbiAgICBpZiAoYVBhcnNlZFVybC5zY2hlbWUpIHtcbiAgICAgIHVybCArPSBhUGFyc2VkVXJsLnNjaGVtZSArICc6JztcbiAgICB9XG4gICAgdXJsICs9ICcvLyc7XG4gICAgaWYgKGFQYXJzZWRVcmwuYXV0aCkge1xuICAgICAgdXJsICs9IGFQYXJzZWRVcmwuYXV0aCArICdAJztcbiAgICB9XG4gICAgaWYgKGFQYXJzZWRVcmwuaG9zdCkge1xuICAgICAgdXJsICs9IGFQYXJzZWRVcmwuaG9zdDtcbiAgICB9XG4gICAgaWYgKGFQYXJzZWRVcmwucG9ydCkge1xuICAgICAgdXJsICs9IFwiOlwiICsgYVBhcnNlZFVybC5wb3J0XG4gICAgfVxuICAgIGlmIChhUGFyc2VkVXJsLnBhdGgpIHtcbiAgICAgIHVybCArPSBhUGFyc2VkVXJsLnBhdGg7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgZXhwb3J0cy51cmxHZW5lcmF0ZSA9IHVybEdlbmVyYXRlO1xuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVzIGEgcGF0aCwgb3IgdGhlIHBhdGggcG9ydGlvbiBvZiBhIFVSTDpcbiAgICpcbiAgICogLSBSZXBsYWNlcyBjb25zZXF1dGl2ZSBzbGFzaGVzIHdpdGggb25lIHNsYXNoLlxuICAgKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJy4nIHBhcnRzLlxuICAgKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJzxkaXI+Ly4uJyBwYXJ0cy5cbiAgICpcbiAgICogQmFzZWQgb24gY29kZSBpbiB0aGUgTm9kZS5qcyAncGF0aCcgY29yZSBtb2R1bGUuXG4gICAqXG4gICAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciB1cmwgdG8gbm9ybWFsaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gbm9ybWFsaXplKGFQYXRoKSB7XG4gICAgdmFyIHBhdGggPSBhUGF0aDtcbiAgICB2YXIgdXJsID0gdXJsUGFyc2UoYVBhdGgpO1xuICAgIGlmICh1cmwpIHtcbiAgICAgIGlmICghdXJsLnBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFQYXRoO1xuICAgICAgfVxuICAgICAgcGF0aCA9IHVybC5wYXRoO1xuICAgIH1cbiAgICB2YXIgaXNBYnNvbHV0ZSA9IChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAgIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoL1xcLysvKTtcbiAgICBmb3IgKHZhciBwYXJ0LCB1cCA9IDAsIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgICAgdXArKztcbiAgICAgIH0gZWxzZSBpZiAodXAgPiAwKSB7XG4gICAgICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgICAgIC8vIFRoZSBmaXJzdCBwYXJ0IGlzIGJsYW5rIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlLiBUcnlpbmcgdG8gZ29cbiAgICAgICAgICAvLyBhYm92ZSB0aGUgcm9vdCBpcyBhIG5vLW9wLiBUaGVyZWZvcmUgd2UgY2FuIHJlbW92ZSBhbGwgJy4uJyBwYXJ0c1xuICAgICAgICAgIC8vIGRpcmVjdGx5IGFmdGVyIHRoZSByb290LlxuICAgICAgICAgIHBhcnRzLnNwbGljZShpICsgMSwgdXApO1xuICAgICAgICAgIHVwID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMik7XG4gICAgICAgICAgdXAtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBwYXRoID0gcGFydHMuam9pbignLycpO1xuXG4gICAgaWYgKHBhdGggPT09ICcnKSB7XG4gICAgICBwYXRoID0gaXNBYnNvbHV0ZSA/ICcvJyA6ICcuJztcbiAgICB9XG5cbiAgICBpZiAodXJsKSB7XG4gICAgICB1cmwucGF0aCA9IHBhdGg7XG4gICAgICByZXR1cm4gdXJsR2VuZXJhdGUodXJsKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG5cbiAgLyoqXG4gICAqIEpvaW5zIHR3byBwYXRocy9VUkxzLlxuICAgKlxuICAgKiBAcGFyYW0gYVJvb3QgVGhlIHJvb3QgcGF0aCBvciBVUkwuXG4gICAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgam9pbmVkIHdpdGggdGhlIHJvb3QuXG4gICAqXG4gICAqIC0gSWYgYVBhdGggaXMgYSBVUkwgb3IgYSBkYXRhIFVSSSwgYVBhdGggaXMgcmV0dXJuZWQsIHVubGVzcyBhUGF0aCBpcyBhXG4gICAqICAgc2NoZW1lLXJlbGF0aXZlIFVSTDogVGhlbiB0aGUgc2NoZW1lIG9mIGFSb290LCBpZiBhbnksIGlzIHByZXBlbmRlZFxuICAgKiAgIGZpcnN0LlxuICAgKiAtIE90aGVyd2lzZSBhUGF0aCBpcyBhIHBhdGguIElmIGFSb290IGlzIGEgVVJMLCB0aGVuIGl0cyBwYXRoIHBvcnRpb25cbiAgICogICBpcyB1cGRhdGVkIHdpdGggdGhlIHJlc3VsdCBhbmQgYVJvb3QgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSB0aGUgcmVzdWx0XG4gICAqICAgaXMgcmV0dXJuZWQuXG4gICAqICAgLSBJZiBhUGF0aCBpcyBhYnNvbHV0ZSwgdGhlIHJlc3VsdCBpcyBhUGF0aC5cbiAgICogICAtIE90aGVyd2lzZSB0aGUgdHdvIHBhdGhzIGFyZSBqb2luZWQgd2l0aCBhIHNsYXNoLlxuICAgKiAtIEpvaW5pbmcgZm9yIGV4YW1wbGUgJ2h0dHA6Ly8nIGFuZCAnd3d3LmV4YW1wbGUuY29tJyBpcyBhbHNvIHN1cHBvcnRlZC5cbiAgICovXG4gIGZ1bmN0aW9uIGpvaW4oYVJvb3QsIGFQYXRoKSB7XG4gICAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgICBhUm9vdCA9IFwiLlwiO1xuICAgIH1cbiAgICBpZiAoYVBhdGggPT09IFwiXCIpIHtcbiAgICAgIGFQYXRoID0gXCIuXCI7XG4gICAgfVxuICAgIHZhciBhUGF0aFVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgICB2YXIgYVJvb3RVcmwgPSB1cmxQYXJzZShhUm9vdCk7XG4gICAgaWYgKGFSb290VXJsKSB7XG4gICAgICBhUm9vdCA9IGFSb290VXJsLnBhdGggfHwgJy8nO1xuICAgIH1cblxuICAgIC8vIGBqb2luKGZvbywgJy8vd3d3LmV4YW1wbGUub3JnJylgXG4gICAgaWYgKGFQYXRoVXJsICYmICFhUGF0aFVybC5zY2hlbWUpIHtcbiAgICAgIGlmIChhUm9vdFVybCkge1xuICAgICAgICBhUGF0aFVybC5zY2hlbWUgPSBhUm9vdFVybC5zY2hlbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVBhdGhVcmwpO1xuICAgIH1cblxuICAgIGlmIChhUGF0aFVybCB8fCBhUGF0aC5tYXRjaChkYXRhVXJsUmVnZXhwKSkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgIC8vIGBqb2luKCdodHRwOi8vJywgJ3d3dy5leGFtcGxlLmNvbScpYFxuICAgIGlmIChhUm9vdFVybCAmJiAhYVJvb3RVcmwuaG9zdCAmJiAhYVJvb3RVcmwucGF0aCkge1xuICAgICAgYVJvb3RVcmwuaG9zdCA9IGFQYXRoO1xuICAgICAgcmV0dXJuIHVybEdlbmVyYXRlKGFSb290VXJsKTtcbiAgICB9XG5cbiAgICB2YXIgam9pbmVkID0gYVBhdGguY2hhckF0KDApID09PSAnLydcbiAgICAgID8gYVBhdGhcbiAgICAgIDogbm9ybWFsaXplKGFSb290LnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgYVBhdGgpO1xuXG4gICAgaWYgKGFSb290VXJsKSB7XG4gICAgICBhUm9vdFVybC5wYXRoID0gam9pbmVkO1xuICAgICAgcmV0dXJuIHVybEdlbmVyYXRlKGFSb290VXJsKTtcbiAgICB9XG4gICAgcmV0dXJuIGpvaW5lZDtcbiAgfVxuICBleHBvcnRzLmpvaW4gPSBqb2luO1xuXG4gIC8qKlxuICAgKiBNYWtlIGEgcGF0aCByZWxhdGl2ZSB0byBhIFVSTCBvciBhbm90aGVyIHBhdGguXG4gICAqXG4gICAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAgICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBtYWRlIHJlbGF0aXZlIHRvIGFSb290LlxuICAgKi9cbiAgZnVuY3Rpb24gcmVsYXRpdmUoYVJvb3QsIGFQYXRoKSB7XG4gICAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgICBhUm9vdCA9IFwiLlwiO1xuICAgIH1cblxuICAgIGFSb290ID0gYVJvb3QucmVwbGFjZSgvXFwvJC8sICcnKTtcblxuICAgIC8vIEl0IGlzIHBvc3NpYmxlIGZvciB0aGUgcGF0aCB0byBiZSBhYm92ZSB0aGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBzaW1wbHlcbiAgICAvLyBjaGVja2luZyB3aGV0aGVyIHRoZSByb290IGlzIGEgcHJlZml4IG9mIHRoZSBwYXRoIHdvbid0IHdvcmsuIEluc3RlYWQsIHdlXG4gICAgLy8gbmVlZCB0byByZW1vdmUgY29tcG9uZW50cyBmcm9tIHRoZSByb290IG9uZSBieSBvbmUsIHVudGlsIGVpdGhlciB3ZSBmaW5kXG4gICAgLy8gYSBwcmVmaXggdGhhdCBmaXRzLCBvciB3ZSBydW4gb3V0IG9mIGNvbXBvbmVudHMgdG8gcmVtb3ZlLlxuICAgIHZhciBsZXZlbCA9IDA7XG4gICAgd2hpbGUgKGFQYXRoLmluZGV4T2YoYVJvb3QgKyAnLycpICE9PSAwKSB7XG4gICAgICB2YXIgaW5kZXggPSBhUm9vdC5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBhUGF0aDtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIG9ubHkgcGFydCBvZiB0aGUgcm9vdCB0aGF0IGlzIGxlZnQgaXMgdGhlIHNjaGVtZSAoaS5lLiBodHRwOi8vLFxuICAgICAgLy8gZmlsZTovLy8sIGV0Yy4pLCBvbmUgb3IgbW9yZSBzbGFzaGVzICgvKSwgb3Igc2ltcGx5IG5vdGhpbmcgYXQgYWxsLCB3ZVxuICAgICAgLy8gaGF2ZSBleGhhdXN0ZWQgYWxsIGNvbXBvbmVudHMsIHNvIHRoZSBwYXRoIGlzIG5vdCByZWxhdGl2ZSB0byB0aGUgcm9vdC5cbiAgICAgIGFSb290ID0gYVJvb3Quc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgaWYgKGFSb290Lm1hdGNoKC9eKFteXFwvXSs6XFwvKT9cXC8qJC8pKSB7XG4gICAgICAgIHJldHVybiBhUGF0aDtcbiAgICAgIH1cblxuICAgICAgKytsZXZlbDtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgd2UgYWRkIGEgXCIuLi9cIiBmb3IgZWFjaCBjb21wb25lbnQgd2UgcmVtb3ZlZCBmcm9tIHRoZSByb290LlxuICAgIHJldHVybiBBcnJheShsZXZlbCArIDEpLmpvaW4oXCIuLi9cIikgKyBhUGF0aC5zdWJzdHIoYVJvb3QubGVuZ3RoICsgMSk7XG4gIH1cbiAgZXhwb3J0cy5yZWxhdGl2ZSA9IHJlbGF0aXZlO1xuXG4gIC8qKlxuICAgKiBCZWNhdXNlIGJlaGF2aW9yIGdvZXMgd2Fja3kgd2hlbiB5b3Ugc2V0IGBfX3Byb3RvX19gIG9uIG9iamVjdHMsIHdlXG4gICAqIGhhdmUgdG8gcHJlZml4IGFsbCB0aGUgc3RyaW5ncyBpbiBvdXIgc2V0IHdpdGggYW4gYXJiaXRyYXJ5IGNoYXJhY3Rlci5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvcHVsbC8zMSBhbmRcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMzBcbiAgICpcbiAgICogQHBhcmFtIFN0cmluZyBhU3RyXG4gICAqL1xuICBmdW5jdGlvbiB0b1NldFN0cmluZyhhU3RyKSB7XG4gICAgcmV0dXJuICckJyArIGFTdHI7XG4gIH1cbiAgZXhwb3J0cy50b1NldFN0cmluZyA9IHRvU2V0U3RyaW5nO1xuXG4gIGZ1bmN0aW9uIGZyb21TZXRTdHJpbmcoYVN0cikge1xuICAgIHJldHVybiBhU3RyLnN1YnN0cigxKTtcbiAgfVxuICBleHBvcnRzLmZyb21TZXRTdHJpbmcgPSBmcm9tU2V0U3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdoZXJlIHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICAgKlxuICAgKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gICAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uLCBidXQgZGlmZmVyZW50IGdlbmVyYXRlZFxuICAgKiBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYSBtYXBwaW5nIHdpdGggYVxuICAgKiBzdHViYmVkIG91dCBtYXBwaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gICAgdmFyIGNtcCA9IG1hcHBpbmdBLnNvdXJjZSAtIG1hcHBpbmdCLnNvdXJjZTtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gICAgaWYgKGNtcCAhPT0gMCB8fCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICAgIGlmIChjbXAgIT09IDApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcHBpbmdBLm5hbWUgLSBtYXBwaW5nQi5uYW1lO1xuICB9O1xuICBleHBvcnRzLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zID0gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnM7XG5cbiAgLyoqXG4gICAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBkZWZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgaW5kaWNlcyB3aGVyZVxuICAgKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gICAqXG4gICAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAgICogbWFwcGluZ3Mgd2l0aCB0aGUgc2FtZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uLCBidXQgZGlmZmVyZW50XG4gICAqIHNvdXJjZS9uYW1lL29yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiB0aGUgc2FtZS4gVXNlZnVsIHdoZW4gc2VhcmNoaW5nIGZvciBhXG4gICAqIG1hcHBpbmcgd2l0aCBhIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IsIG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gICAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICAgIGlmIChjbXAgIT09IDApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICAgIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0Euc291cmNlIC0gbWFwcGluZ0Iuc291cmNlO1xuICAgIGlmIChjbXAgIT09IDApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICAgIGlmIChjbXAgIT09IDApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIHJldHVybiBtYXBwaW5nQS5uYW1lIC0gbWFwcGluZ0IubmFtZTtcbiAgfTtcbiAgZXhwb3J0cy5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCA9IGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkO1xuXG4gIGZ1bmN0aW9uIHN0cmNtcChhU3RyMSwgYVN0cjIpIHtcbiAgICBpZiAoYVN0cjEgPT09IGFTdHIyKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBpZiAoYVN0cjEgPiBhU3RyMikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBpbmZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgc3RyaW5ncyB3aGVyZVxuICAgKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gICAqL1xuICBmdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgICB2YXIgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gICAgaWYgKGNtcCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gICAgaWYgKGNtcCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICAgIGlmIChjbXAgIT09IDApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICAgIGlmIChjbXAgIT09IDApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG4gIH07XG4gIGV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZDtcblxufSk7XG4iLCJJbnRsUG9seWZpbGwuX19hZGRMb2NhbGVEYXRhKHtsb2NhbGU6XCJlblwiLGRhdGU6e2NhOltcImdyZWdvcnlcIixcImJ1ZGRoaXN0XCIsXCJjaGluZXNlXCIsXCJjb3B0aWNcIixcImRhbmdpXCIsXCJldGhpb2FhXCIsXCJldGhpb3BpY1wiLFwiZ2VuZXJpY1wiLFwiaGVicmV3XCIsXCJpbmRpYW5cIixcImlzbGFtaWNcIixcImlzbGFtaWNjXCIsXCJqYXBhbmVzZVwiLFwicGVyc2lhblwiLFwicm9jXCJdLGhvdXJObzA6dHJ1ZSxob3VyMTI6dHJ1ZSxmb3JtYXRzOntzaG9ydDpcInsxfSwgezB9XCIsbWVkaXVtOlwiezF9LCB7MH1cIixmdWxsOlwiezF9ICdhdCcgezB9XCIsbG9uZzpcInsxfSAnYXQnIHswfVwiLGF2YWlsYWJsZUZvcm1hdHM6e1wiZFwiOlwiZFwiLFwiRVwiOlwiY2NjXCIsRWQ6XCJkIEVcIixFaG06XCJFIGg6bW0gYVwiLEVIbTpcIkUgSEg6bW1cIixFaG1zOlwiRSBoOm1tOnNzIGFcIixFSG1zOlwiRSBISDptbTpzc1wiLEd5OlwieSBHXCIsR3lNTU06XCJNTU0geSBHXCIsR3lNTU1kOlwiTU1NIGQsIHkgR1wiLEd5TU1NRWQ6XCJFLCBNTU0gZCwgeSBHXCIsXCJoXCI6XCJoIGFcIixcIkhcIjpcIkhIXCIsaG06XCJoOm1tIGFcIixIbTpcIkhIOm1tXCIsaG1zOlwiaDptbTpzcyBhXCIsSG1zOlwiSEg6bW06c3NcIixobXN2OlwiaDptbTpzcyBhIHZcIixIbXN2OlwiSEg6bW06c3MgdlwiLGhtdjpcImg6bW0gYSB2XCIsSG12OlwiSEg6bW0gdlwiLFwiTVwiOlwiTFwiLE1kOlwiTS9kXCIsTUVkOlwiRSwgTS9kXCIsTU1NOlwiTExMXCIsTU1NZDpcIk1NTSBkXCIsTU1NRWQ6XCJFLCBNTU0gZFwiLE1NTU1kOlwiTU1NTSBkXCIsbXM6XCJtbTpzc1wiLFwieVwiOlwieVwiLHlNOlwiTS95XCIseU1kOlwiTS9kL3lcIix5TUVkOlwiRSwgTS9kL3lcIix5TU1NOlwiTU1NIHlcIix5TU1NZDpcIk1NTSBkLCB5XCIseU1NTUVkOlwiRSwgTU1NIGQsIHlcIix5TU1NTTpcIk1NTU0geVwiLHlRUVE6XCJRUVEgeVwiLHlRUVFROlwiUVFRUSB5XCJ9LGRhdGVGb3JtYXRzOnt5TU1NTUVFRUVkOlwiRUVFRSwgTU1NTSBkLCB5XCIseU1NTU1kOlwiTU1NTSBkLCB5XCIseU1NTWQ6XCJNTU0gZCwgeVwiLHlNZDpcIk0vZC95eVwifSx0aW1lRm9ybWF0czp7aG1tc3N6enp6OlwiaDptbTpzcyBhIHp6enpcIixobXN6OlwiaDptbTpzcyBhIHpcIixobXM6XCJoOm1tOnNzIGFcIixobTpcImg6bW0gYVwifX0sY2FsZW5kYXJzOntidWRkaGlzdDp7bW9udGhzOntuYXJyb3c6W1wiSlwiLFwiRlwiLFwiTVwiLFwiQVwiLFwiTVwiLFwiSlwiLFwiSlwiLFwiQVwiLFwiU1wiLFwiT1wiLFwiTlwiLFwiRFwiXSxzaG9ydDpbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCJdLGxvbmc6W1wiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZXJhczp7bmFycm93OltcIkJFXCJdLHNob3J0OltcIkJFXCJdLGxvbmc6W1wiQkVcIl19LGRheVBlcmlvZHM6e2FtOlwiQU1cIixwbTpcIlBNXCJ9fSxjaGluZXNlOnttb250aHM6e25hcnJvdzpbXCIxXCIsXCIyXCIsXCIzXCIsXCI0XCIsXCI1XCIsXCI2XCIsXCI3XCIsXCI4XCIsXCI5XCIsXCIxMFwiLFwiMTFcIixcIjEyXCJdLHNob3J0OltcIk1vMVwiLFwiTW8yXCIsXCJNbzNcIixcIk1vNFwiLFwiTW81XCIsXCJNbzZcIixcIk1vN1wiLFwiTW84XCIsXCJNbzlcIixcIk1vMTBcIixcIk1vMTFcIixcIk1vMTJcIl0sbG9uZzpbXCJNb250aDFcIixcIk1vbnRoMlwiLFwiTW9udGgzXCIsXCJNb250aDRcIixcIk1vbnRoNVwiLFwiTW9udGg2XCIsXCJNb250aDdcIixcIk1vbnRoOFwiLFwiTW9udGg5XCIsXCJNb250aDEwXCIsXCJNb250aDExXCIsXCJNb250aDEyXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LGNvcHRpYzp7bW9udGhzOntuYXJyb3c6W1wiMVwiLFwiMlwiLFwiM1wiLFwiNFwiLFwiNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiMTBcIixcIjExXCIsXCIxMlwiLFwiMTNcIl0sc2hvcnQ6W1wiVG91dFwiLFwiQmFiYVwiLFwiSGF0b3JcIixcIktpYWhrXCIsXCJUb2JhXCIsXCJBbXNoaXJcIixcIkJhcmFtaGF0XCIsXCJCYXJhbW91ZGFcIixcIkJhc2hhbnNcIixcIlBhb25hXCIsXCJFcGVwXCIsXCJNZXNyYVwiLFwiTmFzaWVcIl0sbG9uZzpbXCJUb3V0XCIsXCJCYWJhXCIsXCJIYXRvclwiLFwiS2lhaGtcIixcIlRvYmFcIixcIkFtc2hpclwiLFwiQmFyYW1oYXRcIixcIkJhcmFtb3VkYVwiLFwiQmFzaGFuc1wiLFwiUGFvbmFcIixcIkVwZXBcIixcIk1lc3JhXCIsXCJOYXNpZVwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGVyYXM6e25hcnJvdzpbXCJFUkEwXCIsXCJFUkExXCJdLHNob3J0OltcIkVSQTBcIixcIkVSQTFcIl0sbG9uZzpbXCJFUkEwXCIsXCJFUkExXCJdfSxkYXlQZXJpb2RzOnthbTpcIkFNXCIscG06XCJQTVwifX0sZGFuZ2k6e21vbnRoczp7bmFycm93OltcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIl0sc2hvcnQ6W1wiTW8xXCIsXCJNbzJcIixcIk1vM1wiLFwiTW80XCIsXCJNbzVcIixcIk1vNlwiLFwiTW83XCIsXCJNbzhcIixcIk1vOVwiLFwiTW8xMFwiLFwiTW8xMVwiLFwiTW8xMlwiXSxsb25nOltcIk1vbnRoMVwiLFwiTW9udGgyXCIsXCJNb250aDNcIixcIk1vbnRoNFwiLFwiTW9udGg1XCIsXCJNb250aDZcIixcIk1vbnRoN1wiLFwiTW9udGg4XCIsXCJNb250aDlcIixcIk1vbnRoMTBcIixcIk1vbnRoMTFcIixcIk1vbnRoMTJcIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxkYXlQZXJpb2RzOnthbTpcIkFNXCIscG06XCJQTVwifX0sZXRoaW9waWM6e21vbnRoczp7bmFycm93OltcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIixcIjEzXCJdLHNob3J0OltcIk1lc2tlcmVtXCIsXCJUZWtlbXRcIixcIkhlZGFyXCIsXCJUYWhzYXNcIixcIlRlclwiLFwiWWVrYXRpdFwiLFwiTWVnYWJpdFwiLFwiTWlhemlhXCIsXCJHZW5ib3RcIixcIlNlbmVcIixcIkhhbWxlXCIsXCJOZWhhc3NlXCIsXCJQYWd1bWVuXCJdLGxvbmc6W1wiTWVza2VyZW1cIixcIlRla2VtdFwiLFwiSGVkYXJcIixcIlRhaHNhc1wiLFwiVGVyXCIsXCJZZWthdGl0XCIsXCJNZWdhYml0XCIsXCJNaWF6aWFcIixcIkdlbmJvdFwiLFwiU2VuZVwiLFwiSGFtbGVcIixcIk5laGFzc2VcIixcIlBhZ3VtZW5cIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxlcmFzOntuYXJyb3c6W1wiRVJBMFwiLFwiRVJBMVwiXSxzaG9ydDpbXCJFUkEwXCIsXCJFUkExXCJdLGxvbmc6W1wiRVJBMFwiLFwiRVJBMVwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LGV0aGlvYWE6e21vbnRoczp7bmFycm93OltcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIixcIjEzXCJdLHNob3J0OltcIk1lc2tlcmVtXCIsXCJUZWtlbXRcIixcIkhlZGFyXCIsXCJUYWhzYXNcIixcIlRlclwiLFwiWWVrYXRpdFwiLFwiTWVnYWJpdFwiLFwiTWlhemlhXCIsXCJHZW5ib3RcIixcIlNlbmVcIixcIkhhbWxlXCIsXCJOZWhhc3NlXCIsXCJQYWd1bWVuXCJdLGxvbmc6W1wiTWVza2VyZW1cIixcIlRla2VtdFwiLFwiSGVkYXJcIixcIlRhaHNhc1wiLFwiVGVyXCIsXCJZZWthdGl0XCIsXCJNZWdhYml0XCIsXCJNaWF6aWFcIixcIkdlbmJvdFwiLFwiU2VuZVwiLFwiSGFtbGVcIixcIk5laGFzc2VcIixcIlBhZ3VtZW5cIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxlcmFzOntuYXJyb3c6W1wiRVJBMFwiXSxzaG9ydDpbXCJFUkEwXCJdLGxvbmc6W1wiRVJBMFwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LGdlbmVyaWM6e21vbnRoczp7bmFycm93OltcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIl0sc2hvcnQ6W1wiTTAxXCIsXCJNMDJcIixcIk0wM1wiLFwiTTA0XCIsXCJNMDVcIixcIk0wNlwiLFwiTTA3XCIsXCJNMDhcIixcIk0wOVwiLFwiTTEwXCIsXCJNMTFcIixcIk0xMlwiXSxsb25nOltcIk0wMVwiLFwiTTAyXCIsXCJNMDNcIixcIk0wNFwiLFwiTTA1XCIsXCJNMDZcIixcIk0wN1wiLFwiTTA4XCIsXCJNMDlcIixcIk0xMFwiLFwiTTExXCIsXCJNMTJcIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxlcmFzOntuYXJyb3c6W1wiRVJBMFwiLFwiRVJBMVwiXSxzaG9ydDpbXCJFUkEwXCIsXCJFUkExXCJdLGxvbmc6W1wiRVJBMFwiLFwiRVJBMVwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LGdyZWdvcnk6e21vbnRoczp7bmFycm93OltcIkpcIixcIkZcIixcIk1cIixcIkFcIixcIk1cIixcIkpcIixcIkpcIixcIkFcIixcIlNcIixcIk9cIixcIk5cIixcIkRcIl0sc2hvcnQ6W1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiXSxsb25nOltcIkphbnVhcnlcIixcIkZlYnJ1YXJ5XCIsXCJNYXJjaFwiLFwiQXByaWxcIixcIk1heVwiLFwiSnVuZVwiLFwiSnVseVwiLFwiQXVndXN0XCIsXCJTZXB0ZW1iZXJcIixcIk9jdG9iZXJcIixcIk5vdmVtYmVyXCIsXCJEZWNlbWJlclwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGVyYXM6e25hcnJvdzpbXCJCXCIsXCJBXCIsXCJCQ0VcIixcIkNFXCJdLHNob3J0OltcIkJDXCIsXCJBRFwiLFwiQkNFXCIsXCJDRVwiXSxsb25nOltcIkJlZm9yZSBDaHJpc3RcIixcIkFubm8gRG9taW5pXCIsXCJCZWZvcmUgQ29tbW9uIEVyYVwiLFwiQ29tbW9uIEVyYVwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LGhlYnJldzp7bW9udGhzOntuYXJyb3c6W1wiMVwiLFwiMlwiLFwiM1wiLFwiNFwiLFwiNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiMTBcIixcIjExXCIsXCIxMlwiLFwiMTNcIixcIjdcIl0sc2hvcnQ6W1wiVGlzaHJpXCIsXCJIZXNodmFuXCIsXCJLaXNsZXZcIixcIlRldmV0XCIsXCJTaGV2YXRcIixcIkFkYXIgSVwiLFwiQWRhclwiLFwiTmlzYW5cIixcIkl5YXJcIixcIlNpdmFuXCIsXCJUYW11elwiLFwiQXZcIixcIkVsdWxcIixcIkFkYXIgSUlcIl0sbG9uZzpbXCJUaXNocmlcIixcIkhlc2h2YW5cIixcIktpc2xldlwiLFwiVGV2ZXRcIixcIlNoZXZhdFwiLFwiQWRhciBJXCIsXCJBZGFyXCIsXCJOaXNhblwiLFwiSXlhclwiLFwiU2l2YW5cIixcIlRhbXV6XCIsXCJBdlwiLFwiRWx1bFwiLFwiQWRhciBJSVwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGVyYXM6e25hcnJvdzpbXCJBTVwiXSxzaG9ydDpbXCJBTVwiXSxsb25nOltcIkFNXCJdfSxkYXlQZXJpb2RzOnthbTpcIkFNXCIscG06XCJQTVwifX0saW5kaWFuOnttb250aHM6e25hcnJvdzpbXCIxXCIsXCIyXCIsXCIzXCIsXCI0XCIsXCI1XCIsXCI2XCIsXCI3XCIsXCI4XCIsXCI5XCIsXCIxMFwiLFwiMTFcIixcIjEyXCJdLHNob3J0OltcIkNoYWl0cmFcIixcIlZhaXNha2hhXCIsXCJKeWFpc3RoYVwiLFwiQXNhZGhhXCIsXCJTcmF2YW5hXCIsXCJCaGFkcmFcIixcIkFzdmluYVwiLFwiS2FydGlrYVwiLFwiQWdyYWhheWFuYVwiLFwiUGF1c2FcIixcIk1hZ2hhXCIsXCJQaGFsZ3VuYVwiXSxsb25nOltcIkNoYWl0cmFcIixcIlZhaXNha2hhXCIsXCJKeWFpc3RoYVwiLFwiQXNhZGhhXCIsXCJTcmF2YW5hXCIsXCJCaGFkcmFcIixcIkFzdmluYVwiLFwiS2FydGlrYVwiLFwiQWdyYWhheWFuYVwiLFwiUGF1c2FcIixcIk1hZ2hhXCIsXCJQaGFsZ3VuYVwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGVyYXM6e25hcnJvdzpbXCJTYWthXCJdLHNob3J0OltcIlNha2FcIl0sbG9uZzpbXCJTYWthXCJdfSxkYXlQZXJpb2RzOnthbTpcIkFNXCIscG06XCJQTVwifX0saXNsYW1pYzp7bW9udGhzOntuYXJyb3c6W1wiMVwiLFwiMlwiLFwiM1wiLFwiNFwiLFwiNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiMTBcIixcIjExXCIsXCIxMlwiXSxzaG9ydDpbXCJNdWguXCIsXCJTYWYuXCIsXCJSYWIuIElcIixcIlJhYi4gSUlcIixcIkp1bS4gSVwiLFwiSnVtLiBJSVwiLFwiUmFqLlwiLFwiU2hhLlwiLFwiUmFtLlwiLFwiU2hhdy5cIixcIkRodcq7bC1RLlwiLFwiRGh1yrtsLUguXCJdLGxvbmc6W1wiTXVoYXJyYW1cIixcIlNhZmFyXCIsXCJSYWJpyrsgSVwiLFwiUmFiacq7IElJXCIsXCJKdW1hZGEgSVwiLFwiSnVtYWRhIElJXCIsXCJSYWphYlwiLFwiU2hhyrtiYW5cIixcIlJhbWFkYW5cIixcIlNoYXd3YWxcIixcIkRodcq7bC1Racq7ZGFoXCIsXCJEaHXKu2wtSGlqamFoXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZXJhczp7bmFycm93OltcIkFIXCJdLHNob3J0OltcIkFIXCJdLGxvbmc6W1wiQUhcIl19LGRheVBlcmlvZHM6e2FtOlwiQU1cIixwbTpcIlBNXCJ9fSxpc2xhbWljYzp7bW9udGhzOntuYXJyb3c6W1wiMVwiLFwiMlwiLFwiM1wiLFwiNFwiLFwiNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiMTBcIixcIjExXCIsXCIxMlwiXSxzaG9ydDpbXCJNdWguXCIsXCJTYWYuXCIsXCJSYWIuIElcIixcIlJhYi4gSUlcIixcIkp1bS4gSVwiLFwiSnVtLiBJSVwiLFwiUmFqLlwiLFwiU2hhLlwiLFwiUmFtLlwiLFwiU2hhdy5cIixcIkRodcq7bC1RLlwiLFwiRGh1yrtsLUguXCJdLGxvbmc6W1wiTXVoYXJyYW1cIixcIlNhZmFyXCIsXCJSYWJpyrsgSVwiLFwiUmFiacq7IElJXCIsXCJKdW1hZGEgSVwiLFwiSnVtYWRhIElJXCIsXCJSYWphYlwiLFwiU2hhyrtiYW5cIixcIlJhbWFkYW5cIixcIlNoYXd3YWxcIixcIkRodcq7bC1Racq7ZGFoXCIsXCJEaHXKu2wtSGlqamFoXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZXJhczp7bmFycm93OltcIkFIXCJdLHNob3J0OltcIkFIXCJdLGxvbmc6W1wiQUhcIl19LGRheVBlcmlvZHM6e2FtOlwiQU1cIixwbTpcIlBNXCJ9fSxqYXBhbmVzZTp7bW9udGhzOntuYXJyb3c6W1wiSlwiLFwiRlwiLFwiTVwiLFwiQVwiLFwiTVwiLFwiSlwiLFwiSlwiLFwiQVwiLFwiU1wiLFwiT1wiLFwiTlwiLFwiRFwiXSxzaG9ydDpbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCJdLGxvbmc6W1wiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZXJhczp7bmFycm93OltcIlRhaWthICg2NDXigJM2NTApXCIsXCJIYWt1Y2hpICg2NTDigJM2NzEpXCIsXCJIYWt1aMWNICg2NzLigJM2ODYpXCIsXCJTaHVjaMWNICg2ODbigJM3MDEpXCIsXCJUYWloxY0gKDcwMeKAkzcwNClcIixcIktlaXVuICg3MDTigJM3MDgpXCIsXCJXYWTFjSAoNzA44oCTNzE1KVwiLFwiUmVpa2kgKDcxNeKAkzcxNylcIixcIlnFjXLFjSAoNzE34oCTNzI0KVwiLFwiSmlua2kgKDcyNOKAkzcyOSlcIixcIlRlbnB5xY0gKDcyOeKAkzc0OSlcIixcIlRlbnB5xY0ta2FtcMWNICg3NDktNzQ5KVwiLFwiVGVucHnFjS1zaMWNaMWNICg3NDktNzU3KVwiLFwiVGVucHnFjS1oxY1qaSAoNzU3LTc2NSlcIixcIlRlbnB5xY0tamluZ28gKDc2NS03NjcpXCIsXCJKaW5nby1rZWl1biAoNzY3LTc3MClcIixcIkjFjWtpICg3NzDigJM3ODApXCIsXCJUZW4txY0gKDc4MS03ODIpXCIsXCJFbnJ5YWt1ICg3ODLigJM4MDYpXCIsXCJEYWlkxY0gKDgwNuKAkzgxMClcIixcIkvFjW5pbiAoODEw4oCTODI0KVwiLFwiVGVuY2jFjSAoODI04oCTODM0KVwiLFwiSsWNd2EgKDgzNOKAkzg0OClcIixcIkthasWNICg4NDjigJM4NTEpXCIsXCJOaW5qdSAoODUx4oCTODU0KVwiLFwiU2Fpa8WNICg4NTTigJM4NTcpXCIsXCJUZW4tYW4gKDg1Ny04NTkpXCIsXCJKxY1nYW4gKDg1OeKAkzg3NylcIixcIkdhbmd5xY0gKDg3N+KAkzg4NSlcIixcIk5pbm5hICg4ODXigJM4ODkpXCIsXCJLYW5wecWNICg4ODnigJM4OTgpXCIsXCJTaMWNdGFpICg4OTjigJM5MDEpXCIsXCJFbmdpICg5MDHigJM5MjMpXCIsXCJFbmNoxY0gKDkyM+KAkzkzMSlcIixcIkrFjWhlaSAoOTMx4oCTOTM4KVwiLFwiVGVuZ3nFjSAoOTM44oCTOTQ3KVwiLFwiVGVucnlha3UgKDk0N+KAkzk1NylcIixcIlRlbnRva3UgKDk1N+KAkzk2MSlcIixcIsWMd2EgKDk2MeKAkzk2NClcIixcIkvFjWjFjSAoOTY04oCTOTY4KVwiLFwiQW5uYSAoOTY44oCTOTcwKVwiLFwiVGVucm9rdSAoOTcw4oCTOTczKVwiLFwiVGVu4oCZZW4gKDk3M+KAkzk3NilcIixcIkrFjWdlbiAoOTc24oCTOTc4KVwiLFwiVGVuZ2VuICg5NzjigJM5ODMpXCIsXCJFaWthbiAoOTgz4oCTOTg1KVwiLFwiS2FubmEgKDk4NeKAkzk4NylcIixcIkVpZW4gKDk4N+KAkzk4OSlcIixcIkVpc28gKDk4OeKAkzk5MClcIixcIlNoxY1yeWFrdSAoOTkw4oCTOTk1KVwiLFwiQ2jFjXRva3UgKDk5NeKAkzk5OSlcIixcIkNoxY1oxY0gKDk5OeKAkzEwMDQpXCIsXCJLYW5rxY0gKDEwMDTigJMxMDEyKVwiLFwiQ2jFjXdhICgxMDEy4oCTMTAxNylcIixcIkthbm5pbiAoMTAxN+KAkzEwMjEpXCIsXCJKaWFuICgxMDIx4oCTMTAyNClcIixcIk1hbmp1ICgxMDI04oCTMTAyOClcIixcIkNoxY1nZW4gKDEwMjjigJMxMDM3KVwiLFwiQ2jFjXJ5YWt1ICgxMDM34oCTMTA0MClcIixcIkNoxY1recWrICgxMDQw4oCTMTA0NClcIixcIkthbnRva3UgKDEwNDTigJMxMDQ2KVwiLFwiRWlzaMWNICgxMDQ24oCTMTA1MylcIixcIlRlbmdpICgxMDUz4oCTMTA1OClcIixcIkvFjWhlaSAoMTA1OOKAkzEwNjUpXCIsXCJKaXJ5YWt1ICgxMDY14oCTMTA2OSlcIixcIkVua3nFqyAoMTA2OeKAkzEwNzQpXCIsXCJTaMWNaG8gKDEwNzTigJMxMDc3KVwiLFwiU2jFjXJ5YWt1ICgxMDc34oCTMTA4MSlcIixcIkVpaMWNICgxMDgx4oCTMTA4NClcIixcIsWMdG9rdSAoMTA4NOKAkzEwODcpXCIsXCJLYW5qaSAoMTA4N+KAkzEwOTQpXCIsXCJLYWjFjSAoMTA5NOKAkzEwOTYpXCIsXCJFaWNoxY0gKDEwOTbigJMxMDk3KVwiLFwiSsWNdG9rdSAoMTA5N+KAkzEwOTkpXCIsXCJLxY13YSAoMTA5OeKAkzExMDQpXCIsXCJDaMWNamkgKDExMDTigJMxMTA2KVwiLFwiS2FzaMWNICgxMTA24oCTMTEwOClcIixcIlRlbm5pbiAoMTEwOOKAkzExMTApXCIsXCJUZW4tZWkgKDExMTAtMTExMylcIixcIkVpa3nFqyAoMTExM+KAkzExMTgpXCIsXCJHZW7igJllaSAoMTExOOKAkzExMjApXCIsXCJIxY1hbiAoMTEyMOKAkzExMjQpXCIsXCJUZW5qaSAoMTEyNOKAkzExMjYpXCIsXCJEYWlqaSAoMTEyNuKAkzExMzEpXCIsXCJUZW5zaMWNICgxMTMx4oCTMTEzMilcIixcIkNoxY1zaMWNICgxMTMy4oCTMTEzNSlcIixcIkjFjWVuICgxMTM14oCTMTE0MSlcIixcIkVpamkgKDExNDHigJMxMTQyKVwiLFwiS8WNamkgKDExNDLigJMxMTQ0KVwiLFwiVGVu4oCZecWNICgxMTQ04oCTMTE0NSlcIixcIkt5xathbiAoMTE0NeKAkzExNTEpXCIsXCJOaW5wZWkgKDExNTHigJMxMTU0KVwiLFwiS3nFq2p1ICgxMTU04oCTMTE1NilcIixcIkjFjWdlbiAoMTE1NuKAkzExNTkpXCIsXCJIZWlqaSAoMTE1OeKAkzExNjApXCIsXCJFaXJ5YWt1ICgxMTYw4oCTMTE2MSlcIixcIsWMaG8gKDExNjHigJMxMTYzKVwiLFwiQ2jFjWthbiAoMTE2M+KAkzExNjUpXCIsXCJFaW1hbiAoMTE2NeKAkzExNjYpXCIsXCJOaW7igJlhbiAoMTE2NuKAkzExNjkpXCIsXCJLYcWNICgxMTY54oCTMTE3MSlcIixcIlNoxY1hbiAoMTE3MeKAkzExNzUpXCIsXCJBbmdlbiAoMTE3NeKAkzExNzcpXCIsXCJKaXNoxY0gKDExNzfigJMxMTgxKVwiLFwiWcWNd2EgKDExODHigJMxMTgyKVwiLFwiSnVlaSAoMTE4MuKAkzExODQpXCIsXCJHZW5yeWFrdSAoMTE4NOKAkzExODUpXCIsXCJCdW5qaSAoMTE4NeKAkzExOTApXCIsXCJLZW5recWrICgxMTkw4oCTMTE5OSlcIixcIlNoxY1qaSAoMTE5OeKAkzEyMDEpXCIsXCJLZW5uaW4gKDEyMDHigJMxMjA0KVwiLFwiR2Vua3nFqyAoMTIwNOKAkzEyMDYpXCIsXCJLZW7igJllaSAoMTIwNuKAkzEyMDcpXCIsXCJKxY1nZW4gKDEyMDfigJMxMjExKVwiLFwiS2Vucnlha3UgKDEyMTHigJMxMjEzKVwiLFwiS2VucMWNICgxMjEz4oCTMTIxOSlcIixcIkrFjWt5xasgKDEyMTnigJMxMjIyKVwiLFwiSsWNxY0gKDEyMjLigJMxMjI0KVwiLFwiR2VubmluICgxMjI04oCTMTIyNSlcIixcIkthcm9rdSAoMTIyNeKAkzEyMjcpXCIsXCJBbnRlaSAoMTIyN+KAkzEyMjkpXCIsXCJLYW5raSAoMTIyOeKAkzEyMzIpXCIsXCJKxY1laSAoMTIzMuKAkzEyMzMpXCIsXCJUZW5wdWt1ICgxMjMz4oCTMTIzNClcIixcIkJ1bnJ5YWt1ICgxMjM04oCTMTIzNSlcIixcIkthdGVpICgxMjM14oCTMTIzOClcIixcIlJ5YWt1bmluICgxMjM44oCTMTIzOSlcIixcIkVu4oCZxY0gKDEyMznigJMxMjQwKVwiLFwiTmluamkgKDEyNDDigJMxMjQzKVwiLFwiS2FuZ2VuICgxMjQz4oCTMTI0NylcIixcIkjFjWppICgxMjQ34oCTMTI0OSlcIixcIktlbmNoxY0gKDEyNDnigJMxMjU2KVwiLFwiS8WNZ2VuICgxMjU24oCTMTI1NylcIixcIlNoxY1rYSAoMTI1N+KAkzEyNTkpXCIsXCJTaMWNZ2VuICgxMjU54oCTMTI2MClcIixcIkJ1buKAmcWNICgxMjYw4oCTMTI2MSlcIixcIkvFjWNoxY0gKDEyNjHigJMxMjY0KVwiLFwiQnVu4oCZZWkgKDEyNjTigJMxMjc1KVwiLFwiS2VuamkgKDEyNzXigJMxMjc4KVwiLFwiS8WNYW4gKDEyNzjigJMxMjg4KVwiLFwiU2jFjcWNICgxMjg44oCTMTI5MylcIixcIkVpbmluICgxMjkz4oCTMTI5OSlcIixcIlNoxY1hbiAoMTI5OeKAkzEzMDIpXCIsXCJLZW5nZW4gKDEzMDLigJMxMzAzKVwiLFwiS2FnZW4gKDEzMDPigJMxMzA2KVwiLFwiVG9rdWppICgxMzA24oCTMTMwOClcIixcIkVua3nFjSAoMTMwOOKAkzEzMTEpXCIsXCLFjGNoxY0gKDEzMTHigJMxMzEyKVwiLFwiU2jFjXdhICgxMzEy4oCTMTMxNylcIixcIkJ1bnDFjSAoMTMxN+KAkzEzMTkpXCIsXCJHZW7FjSAoMTMxOeKAkzEzMjEpXCIsXCJHZW5rxY0gKDEzMjHigJMxMzI0KVwiLFwiU2jFjWNoxasgKDEzMjTigJMxMzI2KVwiLFwiS2FyeWFrdSAoMTMyNuKAkzEzMjkpXCIsXCJHZW50b2t1ICgxMzI54oCTMTMzMSlcIixcIkdlbmvFjSAoMTMzMeKAkzEzMzQpXCIsXCJLZW5tdSAoMTMzNOKAkzEzMzYpXCIsXCJFbmdlbiAoMTMzNuKAkzEzNDApXCIsXCJLxY1rb2t1ICgxMzQw4oCTMTM0NilcIixcIlNoxY1oZWkgKDEzNDbigJMxMzcwKVwiLFwiS2VudG9rdSAoMTM3MOKAkzEzNzIpXCIsXCJCdW5jaMWrICgxMzcy4oCTMTM3NSlcIixcIlRlbmp1ICgxMzc14oCTMTM3OSlcIixcIkvFjXJ5YWt1ICgxMzc54oCTMTM4MSlcIixcIkvFjXdhICgxMzgx4oCTMTM4NClcIixcIkdlbmNoxasgKDEzODTigJMxMzkyKVwiLFwiTWVpdG9rdSAoMTM4NOKAkzEzODcpXCIsXCJLYWtlaSAoMTM4N+KAkzEzODkpXCIsXCJLxY3FjSAoMTM4OeKAkzEzOTApXCIsXCJNZWl0b2t1ICgxMzkw4oCTMTM5NClcIixcIsWMZWkgKDEzOTTigJMxNDI4KVwiLFwiU2jFjWNoxY0gKDE0MjjigJMxNDI5KVwiLFwiRWlrecWNICgxNDI54oCTMTQ0MSlcIixcIktha2l0c3UgKDE0NDHigJMxNDQ0KVwiLFwiQnVu4oCZYW4gKDE0NDTigJMxNDQ5KVwiLFwiSMWNdG9rdSAoMTQ0OeKAkzE0NTIpXCIsXCJLecWNdG9rdSAoMTQ1MuKAkzE0NTUpXCIsXCJLxY1zaMWNICgxNDU14oCTMTQ1NylcIixcIkNoxY1yb2t1ICgxNDU34oCTMTQ2MClcIixcIkthbnNoxY0gKDE0NjDigJMxNDY2KVwiLFwiQnVuc2jFjSAoMTQ2NuKAkzE0NjcpXCIsXCLFjG5pbiAoMTQ2N+KAkzE0NjkpXCIsXCJCdW5tZWkgKDE0NjnigJMxNDg3KVwiLFwiQ2jFjWt5xY0gKDE0ODfigJMxNDg5KVwiLFwiRW50b2t1ICgxNDg54oCTMTQ5MilcIixcIk1lacWNICgxNDky4oCTMTUwMSlcIixcIkJ1bmtpICgxNTAx4oCTMTUwNClcIixcIkVpc2jFjSAoMTUwNOKAkzE1MjEpXCIsXCJUYWllaSAoMTUyMeKAkzE1MjgpXCIsXCJLecWNcm9rdSAoMTUyOOKAkzE1MzIpXCIsXCJUZW5idW4gKDE1MzLigJMxNTU1KVwiLFwiS8WNamkgKDE1NTXigJMxNTU4KVwiLFwiRWlyb2t1ICgxNTU44oCTMTU3MClcIixcIkdlbmtpICgxNTcw4oCTMTU3MylcIixcIlRlbnNoxY0gKDE1NzPigJMxNTkyKVwiLFwiQnVucm9rdSAoMTU5MuKAkzE1OTYpXCIsXCJLZWljaMWNICgxNTk24oCTMTYxNSlcIixcIkdlbm5hICgxNjE14oCTMTYyNClcIixcIkthbuKAmWVpICgxNjI04oCTMTY0NClcIixcIlNoxY1obyAoMTY0NOKAkzE2NDgpXCIsXCJLZWlhbiAoMTY0OOKAkzE2NTIpXCIsXCJKxY3FjSAoMTY1MuKAkzE2NTUpXCIsXCJNZWlyZWtpICgxNjU14oCTMTY1OClcIixcIk1hbmppICgxNjU44oCTMTY2MSlcIixcIkthbmJ1biAoMTY2MeKAkzE2NzMpXCIsXCJFbnDFjSAoMTY3M+KAkzE2ODEpXCIsXCJUZW5uYSAoMTY4MeKAkzE2ODQpXCIsXCJKxY1recWNICgxNjg04oCTMTY4OClcIixcIkdlbnJva3UgKDE2ODjigJMxNzA0KVwiLFwiSMWNZWkgKDE3MDTigJMxNzExKVwiLFwiU2jFjXRva3UgKDE3MTHigJMxNzE2KVwiLFwiS3nFjWjFjSAoMTcxNuKAkzE3MzYpXCIsXCJHZW5idW4gKDE3MzbigJMxNzQxKVwiLFwiS2FucMWNICgxNzQx4oCTMTc0NClcIixcIkVua3nFjSAoMTc0NOKAkzE3NDgpXCIsXCJLYW7igJllbiAoMTc0OOKAkzE3NTEpXCIsXCJIxY1yZWtpICgxNzUx4oCTMTc2NClcIixcIk1laXdhICgxNzY04oCTMTc3MilcIixcIkFu4oCZZWkgKDE3NzLigJMxNzgxKVwiLFwiVGVubWVpICgxNzgx4oCTMTc4OSlcIixcIkthbnNlaSAoMTc4OeKAkzE4MDEpXCIsXCJLecWNd2EgKDE4MDHigJMxODA0KVwiLFwiQnVua2EgKDE4MDTigJMxODE4KVwiLFwiQnVuc2VpICgxODE44oCTMTgzMClcIixcIlRlbnDFjSAoMTgzMOKAkzE4NDQpXCIsXCJLxY1rYSAoMTg0NOKAkzE4NDgpXCIsXCJLYWVpICgxODQ44oCTMTg1NClcIixcIkFuc2VpICgxODU04oCTMTg2MClcIixcIk1hbuKAmWVuICgxODYw4oCTMTg2MSlcIixcIkJ1bmt5xasgKDE4NjHigJMxODY0KVwiLFwiR2VuamkgKDE4NjTigJMxODY1KVwiLFwiS2VpxY0gKDE4NjXigJMxODY4KVwiLFwiTVwiLFwiVFwiLFwiU1wiLFwiSFwiXSxzaG9ydDpbXCJUYWlrYSAoNjQ14oCTNjUwKVwiLFwiSGFrdWNoaSAoNjUw4oCTNjcxKVwiLFwiSGFrdWjFjSAoNjcy4oCTNjg2KVwiLFwiU2h1Y2jFjSAoNjg24oCTNzAxKVwiLFwiVGFpaMWNICg3MDHigJM3MDQpXCIsXCJLZWl1biAoNzA04oCTNzA4KVwiLFwiV2FkxY0gKDcwOOKAkzcxNSlcIixcIlJlaWtpICg3MTXigJM3MTcpXCIsXCJZxY1yxY0gKDcxN+KAkzcyNClcIixcIkppbmtpICg3MjTigJM3MjkpXCIsXCJUZW5wecWNICg3MjnigJM3NDkpXCIsXCJUZW5wecWNLWthbXDFjSAoNzQ5LTc0OSlcIixcIlRlbnB5xY0tc2jFjWjFjSAoNzQ5LTc1NylcIixcIlRlbnB5xY0taMWNamkgKDc1Ny03NjUpXCIsXCJUZW5wecWNLWppbmdvICg3NjUtNzY3KVwiLFwiSmluZ28ta2VpdW4gKDc2Ny03NzApXCIsXCJIxY1raSAoNzcw4oCTNzgwKVwiLFwiVGVuLcWNICg3ODEtNzgyKVwiLFwiRW5yeWFrdSAoNzgy4oCTODA2KVwiLFwiRGFpZMWNICg4MDbigJM4MTApXCIsXCJLxY1uaW4gKDgxMOKAkzgyNClcIixcIlRlbmNoxY0gKDgyNOKAkzgzNClcIixcIkrFjXdhICg4MzTigJM4NDgpXCIsXCJLYWrFjSAoODQ44oCTODUxKVwiLFwiTmluanUgKDg1MeKAkzg1NClcIixcIlNhaWvFjSAoODU04oCTODU3KVwiLFwiVGVuLWFuICg4NTctODU5KVwiLFwiSsWNZ2FuICg4NTnigJM4NzcpXCIsXCJHYW5necWNICg4NzfigJM4ODUpXCIsXCJOaW5uYSAoODg14oCTODg5KVwiLFwiS2FucHnFjSAoODg54oCTODk4KVwiLFwiU2jFjXRhaSAoODk44oCTOTAxKVwiLFwiRW5naSAoOTAx4oCTOTIzKVwiLFwiRW5jaMWNICg5MjPigJM5MzEpXCIsXCJKxY1oZWkgKDkzMeKAkzkzOClcIixcIlRlbmd5xY0gKDkzOOKAkzk0NylcIixcIlRlbnJ5YWt1ICg5NDfigJM5NTcpXCIsXCJUZW50b2t1ICg5NTfigJM5NjEpXCIsXCLFjHdhICg5NjHigJM5NjQpXCIsXCJLxY1oxY0gKDk2NOKAkzk2OClcIixcIkFubmEgKDk2OOKAkzk3MClcIixcIlRlbnJva3UgKDk3MOKAkzk3MylcIixcIlRlbuKAmWVuICg5NzPigJM5NzYpXCIsXCJKxY1nZW4gKDk3NuKAkzk3OClcIixcIlRlbmdlbiAoOTc44oCTOTgzKVwiLFwiRWlrYW4gKDk4M+KAkzk4NSlcIixcIkthbm5hICg5ODXigJM5ODcpXCIsXCJFaWVuICg5ODfigJM5ODkpXCIsXCJFaXNvICg5ODnigJM5OTApXCIsXCJTaMWNcnlha3UgKDk5MOKAkzk5NSlcIixcIkNoxY10b2t1ICg5OTXigJM5OTkpXCIsXCJDaMWNaMWNICg5OTnigJMxMDA0KVwiLFwiS2Fua8WNICgxMDA04oCTMTAxMilcIixcIkNoxY13YSAoMTAxMuKAkzEwMTcpXCIsXCJLYW5uaW4gKDEwMTfigJMxMDIxKVwiLFwiSmlhbiAoMTAyMeKAkzEwMjQpXCIsXCJNYW5qdSAoMTAyNOKAkzEwMjgpXCIsXCJDaMWNZ2VuICgxMDI44oCTMTAzNylcIixcIkNoxY1yeWFrdSAoMTAzN+KAkzEwNDApXCIsXCJDaMWNa3nFqyAoMTA0MOKAkzEwNDQpXCIsXCJLYW50b2t1ICgxMDQ04oCTMTA0NilcIixcIkVpc2jFjSAoMTA0NuKAkzEwNTMpXCIsXCJUZW5naSAoMTA1M+KAkzEwNTgpXCIsXCJLxY1oZWkgKDEwNTjigJMxMDY1KVwiLFwiSmlyeWFrdSAoMTA2NeKAkzEwNjkpXCIsXCJFbmt5xasgKDEwNjnigJMxMDc0KVwiLFwiU2jFjWhvICgxMDc04oCTMTA3NylcIixcIlNoxY1yeWFrdSAoMTA3N+KAkzEwODEpXCIsXCJFaWjFjSAoMTA4MeKAkzEwODQpXCIsXCLFjHRva3UgKDEwODTigJMxMDg3KVwiLFwiS2FuamkgKDEwODfigJMxMDk0KVwiLFwiS2FoxY0gKDEwOTTigJMxMDk2KVwiLFwiRWljaMWNICgxMDk24oCTMTA5NylcIixcIkrFjXRva3UgKDEwOTfigJMxMDk5KVwiLFwiS8WNd2EgKDEwOTnigJMxMTA0KVwiLFwiQ2jFjWppICgxMTA04oCTMTEwNilcIixcIkthc2jFjSAoMTEwNuKAkzExMDgpXCIsXCJUZW5uaW4gKDExMDjigJMxMTEwKVwiLFwiVGVuLWVpICgxMTEwLTExMTMpXCIsXCJFaWt5xasgKDExMTPigJMxMTE4KVwiLFwiR2Vu4oCZZWkgKDExMTjigJMxMTIwKVwiLFwiSMWNYW4gKDExMjDigJMxMTI0KVwiLFwiVGVuamkgKDExMjTigJMxMTI2KVwiLFwiRGFpamkgKDExMjbigJMxMTMxKVwiLFwiVGVuc2jFjSAoMTEzMeKAkzExMzIpXCIsXCJDaMWNc2jFjSAoMTEzMuKAkzExMzUpXCIsXCJIxY1lbiAoMTEzNeKAkzExNDEpXCIsXCJFaWppICgxMTQx4oCTMTE0MilcIixcIkvFjWppICgxMTQy4oCTMTE0NClcIixcIlRlbuKAmXnFjSAoMTE0NOKAkzExNDUpXCIsXCJLecWrYW4gKDExNDXigJMxMTUxKVwiLFwiTmlucGVpICgxMTUx4oCTMTE1NClcIixcIkt5xatqdSAoMTE1NOKAkzExNTYpXCIsXCJIxY1nZW4gKDExNTbigJMxMTU5KVwiLFwiSGVpamkgKDExNTnigJMxMTYwKVwiLFwiRWlyeWFrdSAoMTE2MOKAkzExNjEpXCIsXCLFjGhvICgxMTYx4oCTMTE2MylcIixcIkNoxY1rYW4gKDExNjPigJMxMTY1KVwiLFwiRWltYW4gKDExNjXigJMxMTY2KVwiLFwiTmlu4oCZYW4gKDExNjbigJMxMTY5KVwiLFwiS2HFjSAoMTE2OeKAkzExNzEpXCIsXCJTaMWNYW4gKDExNzHigJMxMTc1KVwiLFwiQW5nZW4gKDExNzXigJMxMTc3KVwiLFwiSmlzaMWNICgxMTc34oCTMTE4MSlcIixcIlnFjXdhICgxMTgx4oCTMTE4MilcIixcIkp1ZWkgKDExODLigJMxMTg0KVwiLFwiR2Vucnlha3UgKDExODTigJMxMTg1KVwiLFwiQnVuamkgKDExODXigJMxMTkwKVwiLFwiS2Vua3nFqyAoMTE5MOKAkzExOTkpXCIsXCJTaMWNamkgKDExOTnigJMxMjAxKVwiLFwiS2VubmluICgxMjAx4oCTMTIwNClcIixcIkdlbmt5xasgKDEyMDTigJMxMjA2KVwiLFwiS2Vu4oCZZWkgKDEyMDbigJMxMjA3KVwiLFwiSsWNZ2VuICgxMjA34oCTMTIxMSlcIixcIktlbnJ5YWt1ICgxMjEx4oCTMTIxMylcIixcIktlbnDFjSAoMTIxM+KAkzEyMTkpXCIsXCJKxY1recWrICgxMjE54oCTMTIyMilcIixcIkrFjcWNICgxMjIy4oCTMTIyNClcIixcIkdlbm5pbiAoMTIyNOKAkzEyMjUpXCIsXCJLYXJva3UgKDEyMjXigJMxMjI3KVwiLFwiQW50ZWkgKDEyMjfigJMxMjI5KVwiLFwiS2Fua2kgKDEyMjnigJMxMjMyKVwiLFwiSsWNZWkgKDEyMzLigJMxMjMzKVwiLFwiVGVucHVrdSAoMTIzM+KAkzEyMzQpXCIsXCJCdW5yeWFrdSAoMTIzNOKAkzEyMzUpXCIsXCJLYXRlaSAoMTIzNeKAkzEyMzgpXCIsXCJSeWFrdW5pbiAoMTIzOOKAkzEyMzkpXCIsXCJFbuKAmcWNICgxMjM54oCTMTI0MClcIixcIk5pbmppICgxMjQw4oCTMTI0MylcIixcIkthbmdlbiAoMTI0M+KAkzEyNDcpXCIsXCJIxY1qaSAoMTI0N+KAkzEyNDkpXCIsXCJLZW5jaMWNICgxMjQ54oCTMTI1NilcIixcIkvFjWdlbiAoMTI1NuKAkzEyNTcpXCIsXCJTaMWNa2EgKDEyNTfigJMxMjU5KVwiLFwiU2jFjWdlbiAoMTI1OeKAkzEyNjApXCIsXCJCdW7igJnFjSAoMTI2MOKAkzEyNjEpXCIsXCJLxY1jaMWNICgxMjYx4oCTMTI2NClcIixcIkJ1buKAmWVpICgxMjY04oCTMTI3NSlcIixcIktlbmppICgxMjc14oCTMTI3OClcIixcIkvFjWFuICgxMjc44oCTMTI4OClcIixcIlNoxY3FjSAoMTI4OOKAkzEyOTMpXCIsXCJFaW5pbiAoMTI5M+KAkzEyOTkpXCIsXCJTaMWNYW4gKDEyOTnigJMxMzAyKVwiLFwiS2VuZ2VuICgxMzAy4oCTMTMwMylcIixcIkthZ2VuICgxMzAz4oCTMTMwNilcIixcIlRva3VqaSAoMTMwNuKAkzEzMDgpXCIsXCJFbmt5xY0gKDEzMDjigJMxMzExKVwiLFwixYxjaMWNICgxMzEx4oCTMTMxMilcIixcIlNoxY13YSAoMTMxMuKAkzEzMTcpXCIsXCJCdW5wxY0gKDEzMTfigJMxMzE5KVwiLFwiR2VuxY0gKDEzMTnigJMxMzIxKVwiLFwiR2Vua8WNICgxMzIx4oCTMTMyNClcIixcIlNoxY1jaMWrICgxMzI04oCTMTMyNilcIixcIkthcnlha3UgKDEzMjbigJMxMzI5KVwiLFwiR2VudG9rdSAoMTMyOeKAkzEzMzEpXCIsXCJHZW5rxY0gKDEzMzHigJMxMzM0KVwiLFwiS2VubXUgKDEzMzTigJMxMzM2KVwiLFwiRW5nZW4gKDEzMzbigJMxMzQwKVwiLFwiS8WNa29rdSAoMTM0MOKAkzEzNDYpXCIsXCJTaMWNaGVpICgxMzQ24oCTMTM3MClcIixcIktlbnRva3UgKDEzNzDigJMxMzcyKVwiLFwiQnVuY2jFqyAoMTM3MuKAkzEzNzUpXCIsXCJUZW5qdSAoMTM3NeKAkzEzNzkpXCIsXCJLxY1yeWFrdSAoMTM3OeKAkzEzODEpXCIsXCJLxY13YSAoMTM4MeKAkzEzODQpXCIsXCJHZW5jaMWrICgxMzg04oCTMTM5MilcIixcIk1laXRva3UgKDEzODTigJMxMzg3KVwiLFwiS2FrZWkgKDEzODfigJMxMzg5KVwiLFwiS8WNxY0gKDEzODnigJMxMzkwKVwiLFwiTWVpdG9rdSAoMTM5MOKAkzEzOTQpXCIsXCLFjGVpICgxMzk04oCTMTQyOClcIixcIlNoxY1jaMWNICgxNDI44oCTMTQyOSlcIixcIkVpa3nFjSAoMTQyOeKAkzE0NDEpXCIsXCJLYWtpdHN1ICgxNDQx4oCTMTQ0NClcIixcIkJ1buKAmWFuICgxNDQ04oCTMTQ0OSlcIixcIkjFjXRva3UgKDE0NDnigJMxNDUyKVwiLFwiS3nFjXRva3UgKDE0NTLigJMxNDU1KVwiLFwiS8WNc2jFjSAoMTQ1NeKAkzE0NTcpXCIsXCJDaMWNcm9rdSAoMTQ1N+KAkzE0NjApXCIsXCJLYW5zaMWNICgxNDYw4oCTMTQ2NilcIixcIkJ1bnNoxY0gKDE0NjbigJMxNDY3KVwiLFwixYxuaW4gKDE0NjfigJMxNDY5KVwiLFwiQnVubWVpICgxNDY54oCTMTQ4NylcIixcIkNoxY1recWNICgxNDg34oCTMTQ4OSlcIixcIkVudG9rdSAoMTQ4OeKAkzE0OTIpXCIsXCJNZWnFjSAoMTQ5MuKAkzE1MDEpXCIsXCJCdW5raSAoMTUwMeKAkzE1MDQpXCIsXCJFaXNoxY0gKDE1MDTigJMxNTIxKVwiLFwiVGFpZWkgKDE1MjHigJMxNTI4KVwiLFwiS3nFjXJva3UgKDE1MjjigJMxNTMyKVwiLFwiVGVuYnVuICgxNTMy4oCTMTU1NSlcIixcIkvFjWppICgxNTU14oCTMTU1OClcIixcIkVpcm9rdSAoMTU1OOKAkzE1NzApXCIsXCJHZW5raSAoMTU3MOKAkzE1NzMpXCIsXCJUZW5zaMWNICgxNTcz4oCTMTU5MilcIixcIkJ1bnJva3UgKDE1OTLigJMxNTk2KVwiLFwiS2VpY2jFjSAoMTU5NuKAkzE2MTUpXCIsXCJHZW5uYSAoMTYxNeKAkzE2MjQpXCIsXCJLYW7igJllaSAoMTYyNOKAkzE2NDQpXCIsXCJTaMWNaG8gKDE2NDTigJMxNjQ4KVwiLFwiS2VpYW4gKDE2NDjigJMxNjUyKVwiLFwiSsWNxY0gKDE2NTLigJMxNjU1KVwiLFwiTWVpcmVraSAoMTY1NeKAkzE2NTgpXCIsXCJNYW5qaSAoMTY1OOKAkzE2NjEpXCIsXCJLYW5idW4gKDE2NjHigJMxNjczKVwiLFwiRW5wxY0gKDE2NzPigJMxNjgxKVwiLFwiVGVubmEgKDE2ODHigJMxNjg0KVwiLFwiSsWNa3nFjSAoMTY4NOKAkzE2ODgpXCIsXCJHZW5yb2t1ICgxNjg44oCTMTcwNClcIixcIkjFjWVpICgxNzA04oCTMTcxMSlcIixcIlNoxY10b2t1ICgxNzEx4oCTMTcxNilcIixcIkt5xY1oxY0gKDE3MTbigJMxNzM2KVwiLFwiR2VuYnVuICgxNzM24oCTMTc0MSlcIixcIkthbnDFjSAoMTc0MeKAkzE3NDQpXCIsXCJFbmt5xY0gKDE3NDTigJMxNzQ4KVwiLFwiS2Fu4oCZZW4gKDE3NDjigJMxNzUxKVwiLFwiSMWNcmVraSAoMTc1MeKAkzE3NjQpXCIsXCJNZWl3YSAoMTc2NOKAkzE3NzIpXCIsXCJBbuKAmWVpICgxNzcy4oCTMTc4MSlcIixcIlRlbm1laSAoMTc4MeKAkzE3ODkpXCIsXCJLYW5zZWkgKDE3ODnigJMxODAxKVwiLFwiS3nFjXdhICgxODAx4oCTMTgwNClcIixcIkJ1bmthICgxODA04oCTMTgxOClcIixcIkJ1bnNlaSAoMTgxOOKAkzE4MzApXCIsXCJUZW5wxY0gKDE4MzDigJMxODQ0KVwiLFwiS8WNa2EgKDE4NDTigJMxODQ4KVwiLFwiS2FlaSAoMTg0OOKAkzE4NTQpXCIsXCJBbnNlaSAoMTg1NOKAkzE4NjApXCIsXCJNYW7igJllbiAoMTg2MOKAkzE4NjEpXCIsXCJCdW5recWrICgxODYx4oCTMTg2NClcIixcIkdlbmppICgxODY04oCTMTg2NSlcIixcIktlacWNICgxODY14oCTMTg2OClcIixcIk1laWppXCIsXCJUYWlzaMWNXCIsXCJTaMWNd2FcIixcIkhlaXNlaVwiXSxsb25nOltcIlRhaWthICg2NDXigJM2NTApXCIsXCJIYWt1Y2hpICg2NTDigJM2NzEpXCIsXCJIYWt1aMWNICg2NzLigJM2ODYpXCIsXCJTaHVjaMWNICg2ODbigJM3MDEpXCIsXCJUYWloxY0gKDcwMeKAkzcwNClcIixcIktlaXVuICg3MDTigJM3MDgpXCIsXCJXYWTFjSAoNzA44oCTNzE1KVwiLFwiUmVpa2kgKDcxNeKAkzcxNylcIixcIlnFjXLFjSAoNzE34oCTNzI0KVwiLFwiSmlua2kgKDcyNOKAkzcyOSlcIixcIlRlbnB5xY0gKDcyOeKAkzc0OSlcIixcIlRlbnB5xY0ta2FtcMWNICg3NDktNzQ5KVwiLFwiVGVucHnFjS1zaMWNaMWNICg3NDktNzU3KVwiLFwiVGVucHnFjS1oxY1qaSAoNzU3LTc2NSlcIixcIlRlbnB5xY0tamluZ28gKDc2NS03NjcpXCIsXCJKaW5nby1rZWl1biAoNzY3LTc3MClcIixcIkjFjWtpICg3NzDigJM3ODApXCIsXCJUZW4txY0gKDc4MS03ODIpXCIsXCJFbnJ5YWt1ICg3ODLigJM4MDYpXCIsXCJEYWlkxY0gKDgwNuKAkzgxMClcIixcIkvFjW5pbiAoODEw4oCTODI0KVwiLFwiVGVuY2jFjSAoODI04oCTODM0KVwiLFwiSsWNd2EgKDgzNOKAkzg0OClcIixcIkthasWNICg4NDjigJM4NTEpXCIsXCJOaW5qdSAoODUx4oCTODU0KVwiLFwiU2Fpa8WNICg4NTTigJM4NTcpXCIsXCJUZW4tYW4gKDg1Ny04NTkpXCIsXCJKxY1nYW4gKDg1OeKAkzg3NylcIixcIkdhbmd5xY0gKDg3N+KAkzg4NSlcIixcIk5pbm5hICg4ODXigJM4ODkpXCIsXCJLYW5wecWNICg4ODnigJM4OTgpXCIsXCJTaMWNdGFpICg4OTjigJM5MDEpXCIsXCJFbmdpICg5MDHigJM5MjMpXCIsXCJFbmNoxY0gKDkyM+KAkzkzMSlcIixcIkrFjWhlaSAoOTMx4oCTOTM4KVwiLFwiVGVuZ3nFjSAoOTM44oCTOTQ3KVwiLFwiVGVucnlha3UgKDk0N+KAkzk1NylcIixcIlRlbnRva3UgKDk1N+KAkzk2MSlcIixcIsWMd2EgKDk2MeKAkzk2NClcIixcIkvFjWjFjSAoOTY04oCTOTY4KVwiLFwiQW5uYSAoOTY44oCTOTcwKVwiLFwiVGVucm9rdSAoOTcw4oCTOTczKVwiLFwiVGVu4oCZZW4gKDk3M+KAkzk3NilcIixcIkrFjWdlbiAoOTc24oCTOTc4KVwiLFwiVGVuZ2VuICg5NzjigJM5ODMpXCIsXCJFaWthbiAoOTgz4oCTOTg1KVwiLFwiS2FubmEgKDk4NeKAkzk4NylcIixcIkVpZW4gKDk4N+KAkzk4OSlcIixcIkVpc28gKDk4OeKAkzk5MClcIixcIlNoxY1yeWFrdSAoOTkw4oCTOTk1KVwiLFwiQ2jFjXRva3UgKDk5NeKAkzk5OSlcIixcIkNoxY1oxY0gKDk5OeKAkzEwMDQpXCIsXCJLYW5rxY0gKDEwMDTigJMxMDEyKVwiLFwiQ2jFjXdhICgxMDEy4oCTMTAxNylcIixcIkthbm5pbiAoMTAxN+KAkzEwMjEpXCIsXCJKaWFuICgxMDIx4oCTMTAyNClcIixcIk1hbmp1ICgxMDI04oCTMTAyOClcIixcIkNoxY1nZW4gKDEwMjjigJMxMDM3KVwiLFwiQ2jFjXJ5YWt1ICgxMDM34oCTMTA0MClcIixcIkNoxY1recWrICgxMDQw4oCTMTA0NClcIixcIkthbnRva3UgKDEwNDTigJMxMDQ2KVwiLFwiRWlzaMWNICgxMDQ24oCTMTA1MylcIixcIlRlbmdpICgxMDUz4oCTMTA1OClcIixcIkvFjWhlaSAoMTA1OOKAkzEwNjUpXCIsXCJKaXJ5YWt1ICgxMDY14oCTMTA2OSlcIixcIkVua3nFqyAoMTA2OeKAkzEwNzQpXCIsXCJTaMWNaG8gKDEwNzTigJMxMDc3KVwiLFwiU2jFjXJ5YWt1ICgxMDc34oCTMTA4MSlcIixcIkVpaMWNICgxMDgx4oCTMTA4NClcIixcIsWMdG9rdSAoMTA4NOKAkzEwODcpXCIsXCJLYW5qaSAoMTA4N+KAkzEwOTQpXCIsXCJLYWjFjSAoMTA5NOKAkzEwOTYpXCIsXCJFaWNoxY0gKDEwOTbigJMxMDk3KVwiLFwiSsWNdG9rdSAoMTA5N+KAkzEwOTkpXCIsXCJLxY13YSAoMTA5OeKAkzExMDQpXCIsXCJDaMWNamkgKDExMDTigJMxMTA2KVwiLFwiS2FzaMWNICgxMTA24oCTMTEwOClcIixcIlRlbm5pbiAoMTEwOOKAkzExMTApXCIsXCJUZW4tZWkgKDExMTAtMTExMylcIixcIkVpa3nFqyAoMTExM+KAkzExMTgpXCIsXCJHZW7igJllaSAoMTExOOKAkzExMjApXCIsXCJIxY1hbiAoMTEyMOKAkzExMjQpXCIsXCJUZW5qaSAoMTEyNOKAkzExMjYpXCIsXCJEYWlqaSAoMTEyNuKAkzExMzEpXCIsXCJUZW5zaMWNICgxMTMx4oCTMTEzMilcIixcIkNoxY1zaMWNICgxMTMy4oCTMTEzNSlcIixcIkjFjWVuICgxMTM14oCTMTE0MSlcIixcIkVpamkgKDExNDHigJMxMTQyKVwiLFwiS8WNamkgKDExNDLigJMxMTQ0KVwiLFwiVGVu4oCZecWNICgxMTQ04oCTMTE0NSlcIixcIkt5xathbiAoMTE0NeKAkzExNTEpXCIsXCJOaW5wZWkgKDExNTHigJMxMTU0KVwiLFwiS3nFq2p1ICgxMTU04oCTMTE1NilcIixcIkjFjWdlbiAoMTE1NuKAkzExNTkpXCIsXCJIZWlqaSAoMTE1OeKAkzExNjApXCIsXCJFaXJ5YWt1ICgxMTYw4oCTMTE2MSlcIixcIsWMaG8gKDExNjHigJMxMTYzKVwiLFwiQ2jFjWthbiAoMTE2M+KAkzExNjUpXCIsXCJFaW1hbiAoMTE2NeKAkzExNjYpXCIsXCJOaW7igJlhbiAoMTE2NuKAkzExNjkpXCIsXCJLYcWNICgxMTY54oCTMTE3MSlcIixcIlNoxY1hbiAoMTE3MeKAkzExNzUpXCIsXCJBbmdlbiAoMTE3NeKAkzExNzcpXCIsXCJKaXNoxY0gKDExNzfigJMxMTgxKVwiLFwiWcWNd2EgKDExODHigJMxMTgyKVwiLFwiSnVlaSAoMTE4MuKAkzExODQpXCIsXCJHZW5yeWFrdSAoMTE4NOKAkzExODUpXCIsXCJCdW5qaSAoMTE4NeKAkzExOTApXCIsXCJLZW5recWrICgxMTkw4oCTMTE5OSlcIixcIlNoxY1qaSAoMTE5OeKAkzEyMDEpXCIsXCJLZW5uaW4gKDEyMDHigJMxMjA0KVwiLFwiR2Vua3nFqyAoMTIwNOKAkzEyMDYpXCIsXCJLZW7igJllaSAoMTIwNuKAkzEyMDcpXCIsXCJKxY1nZW4gKDEyMDfigJMxMjExKVwiLFwiS2Vucnlha3UgKDEyMTHigJMxMjEzKVwiLFwiS2VucMWNICgxMjEz4oCTMTIxOSlcIixcIkrFjWt5xasgKDEyMTnigJMxMjIyKVwiLFwiSsWNxY0gKDEyMjLigJMxMjI0KVwiLFwiR2VubmluICgxMjI04oCTMTIyNSlcIixcIkthcm9rdSAoMTIyNeKAkzEyMjcpXCIsXCJBbnRlaSAoMTIyN+KAkzEyMjkpXCIsXCJLYW5raSAoMTIyOeKAkzEyMzIpXCIsXCJKxY1laSAoMTIzMuKAkzEyMzMpXCIsXCJUZW5wdWt1ICgxMjMz4oCTMTIzNClcIixcIkJ1bnJ5YWt1ICgxMjM04oCTMTIzNSlcIixcIkthdGVpICgxMjM14oCTMTIzOClcIixcIlJ5YWt1bmluICgxMjM44oCTMTIzOSlcIixcIkVu4oCZxY0gKDEyMznigJMxMjQwKVwiLFwiTmluamkgKDEyNDDigJMxMjQzKVwiLFwiS2FuZ2VuICgxMjQz4oCTMTI0NylcIixcIkjFjWppICgxMjQ34oCTMTI0OSlcIixcIktlbmNoxY0gKDEyNDnigJMxMjU2KVwiLFwiS8WNZ2VuICgxMjU24oCTMTI1NylcIixcIlNoxY1rYSAoMTI1N+KAkzEyNTkpXCIsXCJTaMWNZ2VuICgxMjU54oCTMTI2MClcIixcIkJ1buKAmcWNICgxMjYw4oCTMTI2MSlcIixcIkvFjWNoxY0gKDEyNjHigJMxMjY0KVwiLFwiQnVu4oCZZWkgKDEyNjTigJMxMjc1KVwiLFwiS2VuamkgKDEyNzXigJMxMjc4KVwiLFwiS8WNYW4gKDEyNzjigJMxMjg4KVwiLFwiU2jFjcWNICgxMjg44oCTMTI5MylcIixcIkVpbmluICgxMjkz4oCTMTI5OSlcIixcIlNoxY1hbiAoMTI5OeKAkzEzMDIpXCIsXCJLZW5nZW4gKDEzMDLigJMxMzAzKVwiLFwiS2FnZW4gKDEzMDPigJMxMzA2KVwiLFwiVG9rdWppICgxMzA24oCTMTMwOClcIixcIkVua3nFjSAoMTMwOOKAkzEzMTEpXCIsXCLFjGNoxY0gKDEzMTHigJMxMzEyKVwiLFwiU2jFjXdhICgxMzEy4oCTMTMxNylcIixcIkJ1bnDFjSAoMTMxN+KAkzEzMTkpXCIsXCJHZW7FjSAoMTMxOeKAkzEzMjEpXCIsXCJHZW5rxY0gKDEzMjHigJMxMzI0KVwiLFwiU2jFjWNoxasgKDEzMjTigJMxMzI2KVwiLFwiS2FyeWFrdSAoMTMyNuKAkzEzMjkpXCIsXCJHZW50b2t1ICgxMzI54oCTMTMzMSlcIixcIkdlbmvFjSAoMTMzMeKAkzEzMzQpXCIsXCJLZW5tdSAoMTMzNOKAkzEzMzYpXCIsXCJFbmdlbiAoMTMzNuKAkzEzNDApXCIsXCJLxY1rb2t1ICgxMzQw4oCTMTM0NilcIixcIlNoxY1oZWkgKDEzNDbigJMxMzcwKVwiLFwiS2VudG9rdSAoMTM3MOKAkzEzNzIpXCIsXCJCdW5jaMWrICgxMzcy4oCTMTM3NSlcIixcIlRlbmp1ICgxMzc14oCTMTM3OSlcIixcIkvFjXJ5YWt1ICgxMzc54oCTMTM4MSlcIixcIkvFjXdhICgxMzgx4oCTMTM4NClcIixcIkdlbmNoxasgKDEzODTigJMxMzkyKVwiLFwiTWVpdG9rdSAoMTM4NOKAkzEzODcpXCIsXCJLYWtlaSAoMTM4N+KAkzEzODkpXCIsXCJLxY3FjSAoMTM4OeKAkzEzOTApXCIsXCJNZWl0b2t1ICgxMzkw4oCTMTM5NClcIixcIsWMZWkgKDEzOTTigJMxNDI4KVwiLFwiU2jFjWNoxY0gKDE0MjjigJMxNDI5KVwiLFwiRWlrecWNICgxNDI54oCTMTQ0MSlcIixcIktha2l0c3UgKDE0NDHigJMxNDQ0KVwiLFwiQnVu4oCZYW4gKDE0NDTigJMxNDQ5KVwiLFwiSMWNdG9rdSAoMTQ0OeKAkzE0NTIpXCIsXCJLecWNdG9rdSAoMTQ1MuKAkzE0NTUpXCIsXCJLxY1zaMWNICgxNDU14oCTMTQ1NylcIixcIkNoxY1yb2t1ICgxNDU34oCTMTQ2MClcIixcIkthbnNoxY0gKDE0NjDigJMxNDY2KVwiLFwiQnVuc2jFjSAoMTQ2NuKAkzE0NjcpXCIsXCLFjG5pbiAoMTQ2N+KAkzE0NjkpXCIsXCJCdW5tZWkgKDE0NjnigJMxNDg3KVwiLFwiQ2jFjWt5xY0gKDE0ODfigJMxNDg5KVwiLFwiRW50b2t1ICgxNDg54oCTMTQ5MilcIixcIk1lacWNICgxNDky4oCTMTUwMSlcIixcIkJ1bmtpICgxNTAx4oCTMTUwNClcIixcIkVpc2jFjSAoMTUwNOKAkzE1MjEpXCIsXCJUYWllaSAoMTUyMeKAkzE1MjgpXCIsXCJLecWNcm9rdSAoMTUyOOKAkzE1MzIpXCIsXCJUZW5idW4gKDE1MzLigJMxNTU1KVwiLFwiS8WNamkgKDE1NTXigJMxNTU4KVwiLFwiRWlyb2t1ICgxNTU44oCTMTU3MClcIixcIkdlbmtpICgxNTcw4oCTMTU3MylcIixcIlRlbnNoxY0gKDE1NzPigJMxNTkyKVwiLFwiQnVucm9rdSAoMTU5MuKAkzE1OTYpXCIsXCJLZWljaMWNICgxNTk24oCTMTYxNSlcIixcIkdlbm5hICgxNjE14oCTMTYyNClcIixcIkthbuKAmWVpICgxNjI04oCTMTY0NClcIixcIlNoxY1obyAoMTY0NOKAkzE2NDgpXCIsXCJLZWlhbiAoMTY0OOKAkzE2NTIpXCIsXCJKxY3FjSAoMTY1MuKAkzE2NTUpXCIsXCJNZWlyZWtpICgxNjU14oCTMTY1OClcIixcIk1hbmppICgxNjU44oCTMTY2MSlcIixcIkthbmJ1biAoMTY2MeKAkzE2NzMpXCIsXCJFbnDFjSAoMTY3M+KAkzE2ODEpXCIsXCJUZW5uYSAoMTY4MeKAkzE2ODQpXCIsXCJKxY1recWNICgxNjg04oCTMTY4OClcIixcIkdlbnJva3UgKDE2ODjigJMxNzA0KVwiLFwiSMWNZWkgKDE3MDTigJMxNzExKVwiLFwiU2jFjXRva3UgKDE3MTHigJMxNzE2KVwiLFwiS3nFjWjFjSAoMTcxNuKAkzE3MzYpXCIsXCJHZW5idW4gKDE3MzbigJMxNzQxKVwiLFwiS2FucMWNICgxNzQx4oCTMTc0NClcIixcIkVua3nFjSAoMTc0NOKAkzE3NDgpXCIsXCJLYW7igJllbiAoMTc0OOKAkzE3NTEpXCIsXCJIxY1yZWtpICgxNzUx4oCTMTc2NClcIixcIk1laXdhICgxNzY04oCTMTc3MilcIixcIkFu4oCZZWkgKDE3NzLigJMxNzgxKVwiLFwiVGVubWVpICgxNzgx4oCTMTc4OSlcIixcIkthbnNlaSAoMTc4OeKAkzE4MDEpXCIsXCJLecWNd2EgKDE4MDHigJMxODA0KVwiLFwiQnVua2EgKDE4MDTigJMxODE4KVwiLFwiQnVuc2VpICgxODE44oCTMTgzMClcIixcIlRlbnDFjSAoMTgzMOKAkzE4NDQpXCIsXCJLxY1rYSAoMTg0NOKAkzE4NDgpXCIsXCJLYWVpICgxODQ44oCTMTg1NClcIixcIkFuc2VpICgxODU04oCTMTg2MClcIixcIk1hbuKAmWVuICgxODYw4oCTMTg2MSlcIixcIkJ1bmt5xasgKDE4NjHigJMxODY0KVwiLFwiR2VuamkgKDE4NjTigJMxODY1KVwiLFwiS2VpxY0gKDE4NjXigJMxODY4KVwiLFwiTWVpamlcIixcIlRhaXNoxY1cIixcIlNoxY13YVwiLFwiSGVpc2VpXCJdfSxkYXlQZXJpb2RzOnthbTpcIkFNXCIscG06XCJQTVwifX0scGVyc2lhbjp7bW9udGhzOntuYXJyb3c6W1wiMVwiLFwiMlwiLFwiM1wiLFwiNFwiLFwiNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiMTBcIixcIjExXCIsXCIxMlwiXSxzaG9ydDpbXCJGYXJ2YXJkaW5cIixcIk9yZGliZWhlc2h0XCIsXCJLaG9yZGFkXCIsXCJUaXJcIixcIk1vcmRhZFwiLFwiU2hhaHJpdmFyXCIsXCJNZWhyXCIsXCJBYmFuXCIsXCJBemFyXCIsXCJEZXlcIixcIkJhaG1hblwiLFwiRXNmYW5kXCJdLGxvbmc6W1wiRmFydmFyZGluXCIsXCJPcmRpYmVoZXNodFwiLFwiS2hvcmRhZFwiLFwiVGlyXCIsXCJNb3JkYWRcIixcIlNoYWhyaXZhclwiLFwiTWVoclwiLFwiQWJhblwiLFwiQXphclwiLFwiRGV5XCIsXCJCYWhtYW5cIixcIkVzZmFuZFwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGVyYXM6e25hcnJvdzpbXCJBUFwiXSxzaG9ydDpbXCJBUFwiXSxsb25nOltcIkFQXCJdfSxkYXlQZXJpb2RzOnthbTpcIkFNXCIscG06XCJQTVwifX0scm9jOnttb250aHM6e25hcnJvdzpbXCJKXCIsXCJGXCIsXCJNXCIsXCJBXCIsXCJNXCIsXCJKXCIsXCJKXCIsXCJBXCIsXCJTXCIsXCJPXCIsXCJOXCIsXCJEXCJdLHNob3J0OltcIkphblwiLFwiRmViXCIsXCJNYXJcIixcIkFwclwiLFwiTWF5XCIsXCJKdW5cIixcIkp1bFwiLFwiQXVnXCIsXCJTZXBcIixcIk9jdFwiLFwiTm92XCIsXCJEZWNcIl0sbG9uZzpbXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxlcmFzOntuYXJyb3c6W1wiQmVmb3JlIFIuTy5DLlwiLFwiTWluZ3VvXCJdLHNob3J0OltcIkJlZm9yZSBSLk8uQy5cIixcIk1pbmd1b1wiXSxsb25nOltcIkJlZm9yZSBSLk8uQy5cIixcIk1pbmd1b1wiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19fX0sbnVtYmVyOntudTpbXCJsYXRuXCJdLHBhdHRlcm5zOntkZWNpbWFsOntwb3NpdGl2ZVBhdHRlcm46XCJ7bnVtYmVyfVwiLG5lZ2F0aXZlUGF0dGVybjpcInttaW51c1NpZ259e251bWJlcn1cIn0sY3VycmVuY3k6e3Bvc2l0aXZlUGF0dGVybjpcIntjdXJyZW5jeX17bnVtYmVyfVwiLG5lZ2F0aXZlUGF0dGVybjpcInttaW51c1NpZ259e2N1cnJlbmN5fXtudW1iZXJ9XCJ9LHBlcmNlbnQ6e3Bvc2l0aXZlUGF0dGVybjpcIntudW1iZXJ9e3BlcmNlbnRTaWdufVwiLG5lZ2F0aXZlUGF0dGVybjpcInttaW51c1NpZ259e251bWJlcn17cGVyY2VudFNpZ259XCJ9fSxzeW1ib2xzOntsYXRuOntkZWNpbWFsOlwiLlwiLGdyb3VwOlwiLFwiLG5hbjpcIk5hTlwiLHBsdXNTaWduOlwiK1wiLG1pbnVzU2lnbjpcIi1cIixwZXJjZW50U2lnbjpcIiVcIixpbmZpbml0eTpcIuKInlwifX0sY3VycmVuY2llczp7QVVEOlwiQSRcIixCUkw6XCJSJFwiLENBRDpcIkNBJFwiLENOWTpcIkNOwqVcIixFVVI6XCLigqxcIixHQlA6XCLCo1wiLEhLRDpcIkhLJFwiLElMUzpcIuKCqlwiLElOUjpcIuKCuVwiLEpQWTpcIsKlXCIsS1JXOlwi4oKpXCIsTVhOOlwiTVgkXCIsTlpEOlwiTlokXCIsVFdEOlwiTlQkXCIsVVNEOlwiJFwiLFZORDpcIuKCq1wiLFhBRjpcIkZDRkFcIixYQ0Q6XCJFQyRcIixYT0Y6XCJDRkFcIixYUEY6XCJDRlBGXCJ9fX0pOyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyByZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggYXJyYXkgd2l0aCBkaXJlY3RvcnkgbmFtZXMgdGhlcmVcbi8vIG11c3QgYmUgbm8gc2xhc2hlcywgZW1wdHkgZWxlbWVudHMsIG9yIGRldmljZSBuYW1lcyAoYzpcXCkgaW4gdGhlIGFycmF5XG4vLyAoc28gYWxzbyBubyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIC0gaXQgZG9lcyBub3QgZGlzdGluZ3Vpc2hcbi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocylcbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkge1xuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbGFzdCA9IHBhcnRzW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgcGFydHMudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFydHM7XG59XG5cbi8vIFNwbGl0IGEgZmlsZW5hbWUgaW50byBbcm9vdCwgZGlyLCBiYXNlbmFtZSwgZXh0XSwgdW5peCB2ZXJzaW9uXG4vLyAncm9vdCcgaXMganVzdCBhIHNsYXNoLCBvciBub3RoaW5nLlxudmFyIHNwbGl0UGF0aFJlID1cbiAgICAvXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLztcbnZhciBzcGxpdFBhdGggPSBmdW5jdGlvbihmaWxlbmFtZSkge1xuICByZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSk7XG59O1xuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6IHByb2Nlc3MuY3dkKCk7XG5cbiAgICAvLyBTa2lwIGVtcHR5IGFuZCBpbnZhbGlkIGVudHJpZXNcbiAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICByZXR1cm4gKChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoKSB8fCAnLic7XG59O1xuXG4vLyBwYXRoLm5vcm1hbGl6ZShwYXRoKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLFxuICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJztcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIWlzQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICBpZiAoIXBhdGggJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5qb2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH0pLmpvaW4oJy8nKSk7XG59O1xuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlbGF0aXZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gIHRvID0gZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7XG5cbiAgZnVuY3Rpb24gdHJpbShhcnIpIHtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICAgIGlmIChhcnJbZW5kXSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBhcnIuc2xpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7XG4gIH1cblxuICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICB2YXIgdG9QYXJ0cyA9IHRyaW0odG8uc3BsaXQoJy8nKSk7XG5cbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcbiAgdmFyIHNhbWVQYXJ0c0xlbmd0aCA9IGxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgb3V0cHV0UGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7XG4gIH1cblxuICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuXG4gIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59O1xuXG5leHBvcnRzLnNlcCA9ICcvJztcbmV4cG9ydHMuZGVsaW1pdGVyID0gJzonO1xuXG5leHBvcnRzLmRpcm5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciByZXN1bHQgPSBzcGxpdFBhdGgocGF0aCksXG4gICAgICByb290ID0gcmVzdWx0WzBdLFxuICAgICAgZGlyID0gcmVzdWx0WzFdO1xuXG4gIGlmICghcm9vdCAmJiAhZGlyKSB7XG4gICAgLy8gTm8gZGlybmFtZSB3aGF0c29ldmVyXG4gICAgcmV0dXJuICcuJztcbiAgfVxuXG4gIGlmIChkaXIpIHtcbiAgICAvLyBJdCBoYXMgYSBkaXJuYW1lLCBzdHJpcCB0cmFpbGluZyBzbGFzaFxuICAgIGRpciA9IGRpci5zdWJzdHIoMCwgZGlyLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgcmV0dXJuIHJvb3QgKyBkaXI7XG59O1xuXG5cbmV4cG9ydHMuYmFzZW5hbWUgPSBmdW5jdGlvbihwYXRoLCBleHQpIHtcbiAgdmFyIGYgPSBzcGxpdFBhdGgocGF0aClbMl07XG4gIC8vIFRPRE86IG1ha2UgdGhpcyBjb21wYXJpc29uIGNhc2UtaW5zZW5zaXRpdmUgb24gd2luZG93cz9cbiAgaWYgKGV4dCAmJiBmLnN1YnN0cigtMSAqIGV4dC5sZW5ndGgpID09PSBleHQpIHtcbiAgICBmID0gZi5zdWJzdHIoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gZjtcbn07XG5cblxuZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gc3BsaXRQYXRoKHBhdGgpWzNdO1xufTtcblxuZnVuY3Rpb24gZmlsdGVyICh4cywgZikge1xuICAgIGlmICh4cy5maWx0ZXIpIHJldHVybiB4cy5maWx0ZXIoZik7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGYoeHNbaV0sIGksIHhzKSkgcmVzLnB1c2goeHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBTdHJpbmcucHJvdG90eXBlLnN1YnN0ciAtIG5lZ2F0aXZlIGluZGV4IGRvbid0IHdvcmsgaW4gSUU4XG52YXIgc3Vic3RyID0gJ2FiJy5zdWJzdHIoLTEpID09PSAnYidcbiAgICA/IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHsgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbikgfVxuICAgIDogZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikge1xuICAgICAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IHN0ci5sZW5ndGggKyBzdGFydDtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbik7XG4gICAgfVxuO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8vIHZpbTp0cz00OnN0cz00OnN3PTQ6XG4vKiFcbiAqXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDE3IEtyaXMgS293YWwgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVRcbiAqIGxpY2Vuc2UgZm91bmQgYXQgaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xL2Jsb2IvdjEvTElDRU5TRVxuICpcbiAqIFdpdGggcGFydHMgYnkgVHlsZXIgQ2xvc2VcbiAqIENvcHlyaWdodCAyMDA3LTIwMDkgVHlsZXIgQ2xvc2UgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgWCBsaWNlbnNlIGZvdW5kXG4gKiBhdCBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLmh0bWxcbiAqIEZvcmtlZCBhdCByZWZfc2VuZC5qcyB2ZXJzaW9uOiAyMDA5LTA1LTExXG4gKlxuICogV2l0aCBwYXJ0cyBieSBNYXJrIE1pbGxlclxuICogQ29weXJpZ2h0IChDKSAyMDExIEdvb2dsZSBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cbihmdW5jdGlvbiAoZGVmaW5pdGlvbikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy8gVGhpcyBmaWxlIHdpbGwgZnVuY3Rpb24gcHJvcGVybHkgYXMgYSA8c2NyaXB0PiB0YWcsIG9yIGEgbW9kdWxlXG4gICAgLy8gdXNpbmcgQ29tbW9uSlMgYW5kIE5vZGVKUyBvciBSZXF1aXJlSlMgbW9kdWxlIGZvcm1hdHMuICBJblxuICAgIC8vIENvbW1vbi9Ob2RlL1JlcXVpcmVKUywgdGhlIG1vZHVsZSBleHBvcnRzIHRoZSBRIEFQSSBhbmQgd2hlblxuICAgIC8vIGV4ZWN1dGVkIGFzIGEgc2ltcGxlIDxzY3JpcHQ+LCBpdCBjcmVhdGVzIGEgUSBnbG9iYWwgaW5zdGVhZC5cblxuICAgIC8vIE1vbnRhZ2UgUmVxdWlyZVxuICAgIGlmICh0eXBlb2YgYm9vdHN0cmFwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgYm9vdHN0cmFwKFwicHJvbWlzZVwiLCBkZWZpbml0aW9uKTtcblxuICAgIC8vIENvbW1vbkpTXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xuXG4gICAgLy8gUmVxdWlyZUpTXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZGVmaW5pdGlvbik7XG5cbiAgICAvLyBTRVMgKFNlY3VyZSBFY21hU2NyaXB0KVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNlcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoIXNlcy5vaygpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXMubWFrZVEgPSBkZWZpbml0aW9uO1xuICAgICAgICB9XG5cbiAgICAvLyA8c2NyaXB0PlxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBQcmVmZXIgd2luZG93IG92ZXIgc2VsZiBmb3IgYWRkLW9uIHNjcmlwdHMuIFVzZSBzZWxmIGZvclxuICAgICAgICAvLyBub24td2luZG93ZWQgY29udGV4dHMuXG4gICAgICAgIHZhciBnbG9iYWwgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogc2VsZjtcblxuICAgICAgICAvLyBHZXQgdGhlIGB3aW5kb3dgIG9iamVjdCwgc2F2ZSB0aGUgcHJldmlvdXMgUSBnbG9iYWxcbiAgICAgICAgLy8gYW5kIGluaXRpYWxpemUgUSBhcyBhIGdsb2JhbC5cbiAgICAgICAgdmFyIHByZXZpb3VzUSA9IGdsb2JhbC5RO1xuICAgICAgICBnbG9iYWwuUSA9IGRlZmluaXRpb24oKTtcblxuICAgICAgICAvLyBBZGQgYSBub0NvbmZsaWN0IGZ1bmN0aW9uIHNvIFEgY2FuIGJlIHJlbW92ZWQgZnJvbSB0aGVcbiAgICAgICAgLy8gZ2xvYmFsIG5hbWVzcGFjZS5cbiAgICAgICAgZ2xvYmFsLlEubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdsb2JhbC5RID0gcHJldmlvdXNRO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGVudmlyb25tZW50IHdhcyBub3QgYW50aWNpcGF0ZWQgYnkgUS4gUGxlYXNlIGZpbGUgYSBidWcuXCIpO1xuICAgIH1cblxufSkoZnVuY3Rpb24gKCkge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBoYXNTdGFja3MgPSBmYWxzZTtcbnRyeSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCk7XG59IGNhdGNoIChlKSB7XG4gICAgaGFzU3RhY2tzID0gISFlLnN0YWNrO1xufVxuXG4vLyBBbGwgY29kZSBhZnRlciB0aGlzIHBvaW50IHdpbGwgYmUgZmlsdGVyZWQgZnJvbSBzdGFjayB0cmFjZXMgcmVwb3J0ZWRcbi8vIGJ5IFEuXG52YXIgcVN0YXJ0aW5nTGluZSA9IGNhcHR1cmVMaW5lKCk7XG52YXIgcUZpbGVOYW1lO1xuXG4vLyBzaGltc1xuXG4vLyB1c2VkIGZvciBmYWxsYmFjayBpbiBcImFsbFJlc29sdmVkXCJcbnZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbi8vIFVzZSB0aGUgZmFzdGVzdCBwb3NzaWJsZSBtZWFucyB0byBleGVjdXRlIGEgdGFzayBpbiBhIGZ1dHVyZSB0dXJuXG4vLyBvZiB0aGUgZXZlbnQgbG9vcC5cbnZhciBuZXh0VGljayA9KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBsaW5rZWQgbGlzdCBvZiB0YXNrcyAoc2luZ2xlLCB3aXRoIGhlYWQgbm9kZSlcbiAgICB2YXIgaGVhZCA9IHt0YXNrOiB2b2lkIDAsIG5leHQ6IG51bGx9O1xuICAgIHZhciB0YWlsID0gaGVhZDtcbiAgICB2YXIgZmx1c2hpbmcgPSBmYWxzZTtcbiAgICB2YXIgcmVxdWVzdFRpY2sgPSB2b2lkIDA7XG4gICAgdmFyIGlzTm9kZUpTID0gZmFsc2U7XG4gICAgLy8gcXVldWUgZm9yIGxhdGUgdGFza3MsIHVzZWQgYnkgdW5oYW5kbGVkIHJlamVjdGlvbiB0cmFja2luZ1xuICAgIHZhciBsYXRlclF1ZXVlID0gW107XG5cbiAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgLyoganNoaW50IGxvb3BmdW5jOiB0cnVlICovXG4gICAgICAgIHZhciB0YXNrLCBkb21haW47XG5cbiAgICAgICAgd2hpbGUgKGhlYWQubmV4dCkge1xuICAgICAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgICAgICAgIHRhc2sgPSBoZWFkLnRhc2s7XG4gICAgICAgICAgICBoZWFkLnRhc2sgPSB2b2lkIDA7XG4gICAgICAgICAgICBkb21haW4gPSBoZWFkLmRvbWFpbjtcblxuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICAgIGhlYWQuZG9tYWluID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVuU2luZ2xlKHRhc2ssIGRvbWFpbik7XG5cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAobGF0ZXJRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRhc2sgPSBsYXRlclF1ZXVlLnBvcCgpO1xuICAgICAgICAgICAgcnVuU2luZ2xlKHRhc2spO1xuICAgICAgICB9XG4gICAgICAgIGZsdXNoaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIHJ1bnMgYSBzaW5nbGUgZnVuY3Rpb24gaW4gdGhlIGFzeW5jIHF1ZXVlXG4gICAgZnVuY3Rpb24gcnVuU2luZ2xlKHRhc2ssIGRvbWFpbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGFzaygpO1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChpc05vZGVKUykge1xuICAgICAgICAgICAgICAgIC8vIEluIG5vZGUsIHVuY2F1Z2h0IGV4Y2VwdGlvbnMgYXJlIGNvbnNpZGVyZWQgZmF0YWwgZXJyb3JzLlxuICAgICAgICAgICAgICAgIC8vIFJlLXRocm93IHRoZW0gc3luY2hyb25vdXNseSB0byBpbnRlcnJ1cHQgZmx1c2hpbmchXG5cbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgY29udGludWF0aW9uIGlmIHRoZSB1bmNhdWdodCBleGNlcHRpb24gaXMgc3VwcHJlc3NlZFxuICAgICAgICAgICAgICAgIC8vIGxpc3RlbmluZyBcInVuY2F1Z2h0RXhjZXB0aW9uXCIgZXZlbnRzIChhcyBkb21haW5zIGRvZXMpLlxuICAgICAgICAgICAgICAgIC8vIENvbnRpbnVlIGluIG5leHQgZXZlbnQgdG8gYXZvaWQgdGljayByZWN1cnNpb24uXG4gICAgICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZsdXNoLCAwKTtcbiAgICAgICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IGU7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gYnJvd3NlcnMsIHVuY2F1Z2h0IGV4Y2VwdGlvbnMgYXJlIG5vdCBmYXRhbC5cbiAgICAgICAgICAgICAgICAvLyBSZS10aHJvdyB0aGVtIGFzeW5jaHJvbm91c2x5IHRvIGF2b2lkIHNsb3ctZG93bnMuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV4dFRpY2sgPSBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICB0YWlsID0gdGFpbC5uZXh0ID0ge1xuICAgICAgICAgICAgdGFzazogdGFzayxcbiAgICAgICAgICAgIGRvbWFpbjogaXNOb2RlSlMgJiYgcHJvY2Vzcy5kb21haW4sXG4gICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgICAgICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmVxdWVzdFRpY2soKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgcHJvY2Vzcy50b1N0cmluZygpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIiAmJiBwcm9jZXNzLm5leHRUaWNrKSB7XG4gICAgICAgIC8vIEVuc3VyZSBRIGlzIGluIGEgcmVhbCBOb2RlIGVudmlyb25tZW50LCB3aXRoIGEgYHByb2Nlc3MubmV4dFRpY2tgLlxuICAgICAgICAvLyBUbyBzZWUgdGhyb3VnaCBmYWtlIE5vZGUgZW52aXJvbm1lbnRzOlxuICAgICAgICAvLyAqIE1vY2hhIHRlc3QgcnVubmVyIC0gZXhwb3NlcyBhIGBwcm9jZXNzYCBnbG9iYWwgd2l0aG91dCBhIGBuZXh0VGlja2BcbiAgICAgICAgLy8gKiBCcm93c2VyaWZ5IC0gZXhwb3NlcyBhIGBwcm9jZXNzLm5leFRpY2tgIGZ1bmN0aW9uIHRoYXQgdXNlc1xuICAgICAgICAvLyAgIGBzZXRUaW1lb3V0YC4gSW4gdGhpcyBjYXNlIGBzZXRJbW1lZGlhdGVgIGlzIHByZWZlcnJlZCBiZWNhdXNlXG4gICAgICAgIC8vICAgIGl0IGlzIGZhc3Rlci4gQnJvd3NlcmlmeSdzIGBwcm9jZXNzLnRvU3RyaW5nKClgIHlpZWxkc1xuICAgICAgICAvLyAgIFwiW29iamVjdCBPYmplY3RdXCIsIHdoaWxlIGluIGEgcmVhbCBOb2RlIGVudmlyb25tZW50XG4gICAgICAgIC8vICAgYHByb2Nlc3MudG9TdHJpbmcoKWAgeWllbGRzIFwiW29iamVjdCBwcm9jZXNzXVwiLlxuICAgICAgICBpc05vZGVKUyA9IHRydWU7XG5cbiAgICAgICAgcmVxdWVzdFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICAgICAgfTtcblxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIEluIElFMTAsIE5vZGUuanMgMC45Kywgb3IgaHR0cHM6Ly9naXRodWIuY29tL05vYmxlSlMvc2V0SW1tZWRpYXRlXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXF1ZXN0VGljayA9IHNldEltbWVkaWF0ZS5iaW5kKHdpbmRvdywgZmx1c2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGZsdXNoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAodHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIC8vIG1vZGVybiBicm93c2Vyc1xuICAgICAgICAvLyBodHRwOi8vd3d3Lm5vbmJsb2NraW5nLmlvLzIwMTEvMDYvd2luZG93bmV4dHRpY2suaHRtbFxuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICAvLyBBdCBsZWFzdCBTYWZhcmkgVmVyc2lvbiA2LjAuNSAoODUzNi4zMC4xKSBpbnRlcm1pdHRlbnRseSBjYW5ub3QgY3JlYXRlXG4gICAgICAgIC8vIHdvcmtpbmcgbWVzc2FnZSBwb3J0cyB0aGUgZmlyc3QgdGltZSBhIHBhZ2UgbG9hZHMuXG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVxdWVzdFRpY2sgPSByZXF1ZXN0UG9ydFRpY2s7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoO1xuICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlcXVlc3RQb3J0VGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIE9wZXJhIHJlcXVpcmVzIHVzIHRvIHByb3ZpZGUgYSBtZXNzYWdlIHBheWxvYWQsIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgICAgICAgIC8vIHdoZXRoZXIgd2UgdXNlIGl0LlxuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZsdXNoLCAwKTtcbiAgICAgICAgICAgIHJlcXVlc3RQb3J0VGljaygpO1xuICAgICAgICB9O1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gb2xkIGJyb3dzZXJzXG4gICAgICAgIHJlcXVlc3RUaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmbHVzaCwgMCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIHJ1bnMgYSB0YXNrIGFmdGVyIGFsbCBvdGhlciB0YXNrcyBoYXZlIGJlZW4gcnVuXG4gICAgLy8gdGhpcyBpcyB1c2VmdWwgZm9yIHVuaGFuZGxlZCByZWplY3Rpb24gdHJhY2tpbmcgdGhhdCBuZWVkcyB0byBoYXBwZW5cbiAgICAvLyBhZnRlciBhbGwgYHRoZW5gZCB0YXNrcyBoYXZlIGJlZW4gcnVuLlxuICAgIG5leHRUaWNrLnJ1bkFmdGVyID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgbGF0ZXJRdWV1ZS5wdXNoKHRhc2spO1xuICAgICAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICAgICAgICBmbHVzaGluZyA9IHRydWU7XG4gICAgICAgICAgICByZXF1ZXN0VGljaygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gbmV4dFRpY2s7XG59KSgpO1xuXG4vLyBBdHRlbXB0IHRvIG1ha2UgZ2VuZXJpY3Mgc2FmZSBpbiB0aGUgZmFjZSBvZiBkb3duc3RyZWFtXG4vLyBtb2RpZmljYXRpb25zLlxuLy8gVGhlcmUgaXMgbm8gc2l0dWF0aW9uIHdoZXJlIHRoaXMgaXMgbmVjZXNzYXJ5LlxuLy8gSWYgeW91IG5lZWQgYSBzZWN1cml0eSBndWFyYW50ZWUsIHRoZXNlIHByaW1vcmRpYWxzIG5lZWQgdG8gYmVcbi8vIGRlZXBseSBmcm96ZW4gYW55d2F5LCBhbmQgaWYgeW91IGRvbuKAmXQgbmVlZCBhIHNlY3VyaXR5IGd1YXJhbnRlZSxcbi8vIHRoaXMgaXMganVzdCBwbGFpbiBwYXJhbm9pZC5cbi8vIEhvd2V2ZXIsIHRoaXMgKiptaWdodCoqIGhhdmUgdGhlIG5pY2Ugc2lkZS1lZmZlY3Qgb2YgcmVkdWNpbmcgdGhlIHNpemUgb2Zcbi8vIHRoZSBtaW5pZmllZCBjb2RlIGJ5IHJlZHVjaW5nIHguY2FsbCgpIHRvIG1lcmVseSB4KClcbi8vIFNlZSBNYXJrIE1pbGxlcuKAmXMgZXhwbGFuYXRpb24gb2Ygd2hhdCB0aGlzIGRvZXMuXG4vLyBodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1jb252ZW50aW9uczpzYWZlX21ldGFfcHJvZ3JhbW1pbmdcbnZhciBjYWxsID0gRnVuY3Rpb24uY2FsbDtcbmZ1bmN0aW9uIHVuY3VycnlUaGlzKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2FsbC5hcHBseShmLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG4vLyBUaGlzIGlzIGVxdWl2YWxlbnQsIGJ1dCBzbG93ZXI6XG4vLyB1bmN1cnJ5VGhpcyA9IEZ1bmN0aW9uX2JpbmQuYmluZChGdW5jdGlvbl9iaW5kLmNhbGwpO1xuLy8gaHR0cDovL2pzcGVyZi5jb20vdW5jdXJyeXRoaXNcblxudmFyIGFycmF5X3NsaWNlID0gdW5jdXJyeVRoaXMoQXJyYXkucHJvdG90eXBlLnNsaWNlKTtcblxudmFyIGFycmF5X3JlZHVjZSA9IHVuY3VycnlUaGlzKFxuICAgIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgfHwgZnVuY3Rpb24gKGNhbGxiYWNrLCBiYXNpcykge1xuICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIC8vIGNvbmNlcm5pbmcgdGhlIGluaXRpYWwgdmFsdWUsIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIHNlZWsgdG8gdGhlIGZpcnN0IHZhbHVlIGluIHRoZSBhcnJheSwgYWNjb3VudGluZ1xuICAgICAgICAgICAgLy8gZm9yIHRoZSBwb3NzaWJpbGl0eSB0aGF0IGlzIGlzIGEgc3BhcnNlIGFycmF5XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzaXMgPSB0aGlzW2luZGV4KytdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCsraW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlICgxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWR1Y2VcbiAgICAgICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAvLyBhY2NvdW50IGZvciB0aGUgcG9zc2liaWxpdHkgdGhhdCB0aGUgYXJyYXkgaXMgc3BhcnNlXG4gICAgICAgICAgICBpZiAoaW5kZXggaW4gdGhpcykge1xuICAgICAgICAgICAgICAgIGJhc2lzID0gY2FsbGJhY2soYmFzaXMsIHRoaXNbaW5kZXhdLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2lzO1xuICAgIH1cbik7XG5cbnZhciBhcnJheV9pbmRleE9mID0gdW5jdXJyeVRoaXMoXG4gICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgfHwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8vIG5vdCBhIHZlcnkgZ29vZCBzaGltLCBidXQgZ29vZCBlbm91Z2ggZm9yIG91ciBvbmUgdXNlIG9mIGl0XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbik7XG5cbnZhciBhcnJheV9tYXAgPSB1bmN1cnJ5VGhpcyhcbiAgICBBcnJheS5wcm90b3R5cGUubWFwIHx8IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc3ApIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgY29sbGVjdCA9IFtdO1xuICAgICAgICBhcnJheV9yZWR1Y2Uoc2VsZiwgZnVuY3Rpb24gKHVuZGVmaW5lZCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICBjb2xsZWN0LnB1c2goY2FsbGJhY2suY2FsbCh0aGlzcCwgdmFsdWUsIGluZGV4LCBzZWxmKSk7XG4gICAgICAgIH0sIHZvaWQgMCk7XG4gICAgICAgIHJldHVybiBjb2xsZWN0O1xuICAgIH1cbik7XG5cbnZhciBvYmplY3RfY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiAocHJvdG90eXBlKSB7XG4gICAgZnVuY3Rpb24gVHlwZSgpIHsgfVxuICAgIFR5cGUucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgIHJldHVybiBuZXcgVHlwZSgpO1xufTtcblxudmFyIG9iamVjdF9kZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmdW5jdGlvbiAob2JqLCBwcm9wLCBkZXNjcmlwdG9yKSB7XG4gICAgb2JqW3Byb3BdID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIG9iamVjdF9oYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuXG52YXIgb2JqZWN0X2tleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3RfaGFzT3duUHJvcGVydHkob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn07XG5cbnZhciBvYmplY3RfdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcblxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IE9iamVjdCh2YWx1ZSk7XG59XG5cbi8vIGdlbmVyYXRvciByZWxhdGVkIHNoaW1zXG5cbi8vIEZJWE1FOiBSZW1vdmUgdGhpcyBmdW5jdGlvbiBvbmNlIEVTNiBnZW5lcmF0b3JzIGFyZSBpbiBTcGlkZXJNb25rZXkuXG5mdW5jdGlvbiBpc1N0b3BJdGVyYXRpb24oZXhjZXB0aW9uKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgb2JqZWN0X3RvU3RyaW5nKGV4Y2VwdGlvbikgPT09IFwiW29iamVjdCBTdG9wSXRlcmF0aW9uXVwiIHx8XG4gICAgICAgIGV4Y2VwdGlvbiBpbnN0YW5jZW9mIFFSZXR1cm5WYWx1ZVxuICAgICk7XG59XG5cbi8vIEZJWE1FOiBSZW1vdmUgdGhpcyBoZWxwZXIgYW5kIFEucmV0dXJuIG9uY2UgRVM2IGdlbmVyYXRvcnMgYXJlIGluXG4vLyBTcGlkZXJNb25rZXkuXG52YXIgUVJldHVyblZhbHVlO1xuaWYgKHR5cGVvZiBSZXR1cm5WYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIFFSZXR1cm5WYWx1ZSA9IFJldHVyblZhbHVlO1xufSBlbHNlIHtcbiAgICBRUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH07XG59XG5cbi8vIGxvbmcgc3RhY2sgdHJhY2VzXG5cbnZhciBTVEFDS19KVU1QX1NFUEFSQVRPUiA9IFwiRnJvbSBwcmV2aW91cyBldmVudDpcIjtcblxuZnVuY3Rpb24gbWFrZVN0YWNrVHJhY2VMb25nKGVycm9yLCBwcm9taXNlKSB7XG4gICAgLy8gSWYgcG9zc2libGUsIHRyYW5zZm9ybSB0aGUgZXJyb3Igc3RhY2sgdHJhY2UgYnkgcmVtb3ZpbmcgTm9kZSBhbmQgUVxuICAgIC8vIGNydWZ0LCB0aGVuIGNvbmNhdGVuYXRpbmcgd2l0aCB0aGUgc3RhY2sgdHJhY2Ugb2YgYHByb21pc2VgLiBTZWUgIzU3LlxuICAgIGlmIChoYXNTdGFja3MgJiZcbiAgICAgICAgcHJvbWlzZS5zdGFjayAmJlxuICAgICAgICB0eXBlb2YgZXJyb3IgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgZXJyb3IgIT09IG51bGwgJiZcbiAgICAgICAgZXJyb3Iuc3RhY2tcbiAgICApIHtcbiAgICAgICAgdmFyIHN0YWNrcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBwID0gcHJvbWlzZTsgISFwOyBwID0gcC5zb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChwLnN0YWNrICYmICghZXJyb3IuX19taW5pbXVtU3RhY2tDb3VudGVyX18gfHwgZXJyb3IuX19taW5pbXVtU3RhY2tDb3VudGVyX18gPiBwLnN0YWNrQ291bnRlcikpIHtcbiAgICAgICAgICAgICAgICBvYmplY3RfZGVmaW5lUHJvcGVydHkoZXJyb3IsIFwiX19taW5pbXVtU3RhY2tDb3VudGVyX19cIiwge3ZhbHVlOiBwLnN0YWNrQ291bnRlciwgY29uZmlndXJhYmxlOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgc3RhY2tzLnVuc2hpZnQocC5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2tzLnVuc2hpZnQoZXJyb3Iuc3RhY2spO1xuXG4gICAgICAgIHZhciBjb25jYXRlZFN0YWNrcyA9IHN0YWNrcy5qb2luKFwiXFxuXCIgKyBTVEFDS19KVU1QX1NFUEFSQVRPUiArIFwiXFxuXCIpO1xuICAgICAgICB2YXIgc3RhY2sgPSBmaWx0ZXJTdGFja1N0cmluZyhjb25jYXRlZFN0YWNrcyk7XG4gICAgICAgIG9iamVjdF9kZWZpbmVQcm9wZXJ0eShlcnJvciwgXCJzdGFja1wiLCB7dmFsdWU6IHN0YWNrLCBjb25maWd1cmFibGU6IHRydWV9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlclN0YWNrU3RyaW5nKHN0YWNrU3RyaW5nKSB7XG4gICAgdmFyIGxpbmVzID0gc3RhY2tTdHJpbmcuc3BsaXQoXCJcXG5cIik7XG4gICAgdmFyIGRlc2lyZWRMaW5lcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGxpbmUgPSBsaW5lc1tpXTtcblxuICAgICAgICBpZiAoIWlzSW50ZXJuYWxGcmFtZShsaW5lKSAmJiAhaXNOb2RlRnJhbWUobGluZSkgJiYgbGluZSkge1xuICAgICAgICAgICAgZGVzaXJlZExpbmVzLnB1c2gobGluZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlc2lyZWRMaW5lcy5qb2luKFwiXFxuXCIpO1xufVxuXG5mdW5jdGlvbiBpc05vZGVGcmFtZShzdGFja0xpbmUpIHtcbiAgICByZXR1cm4gc3RhY2tMaW5lLmluZGV4T2YoXCIobW9kdWxlLmpzOlwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgc3RhY2tMaW5lLmluZGV4T2YoXCIobm9kZS5qczpcIikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBnZXRGaWxlTmFtZUFuZExpbmVOdW1iZXIoc3RhY2tMaW5lKSB7XG4gICAgLy8gTmFtZWQgZnVuY3Rpb25zOiBcImF0IGZ1bmN0aW9uTmFtZSAoZmlsZW5hbWU6bGluZU51bWJlcjpjb2x1bW5OdW1iZXIpXCJcbiAgICAvLyBJbiBJRTEwIGZ1bmN0aW9uIG5hbWUgY2FuIGhhdmUgc3BhY2VzIChcIkFub255bW91cyBmdW5jdGlvblwiKSBPX29cbiAgICB2YXIgYXR0ZW1wdDEgPSAvYXQgLisgXFwoKC4rKTooXFxkKyk6KD86XFxkKylcXCkkLy5leGVjKHN0YWNrTGluZSk7XG4gICAgaWYgKGF0dGVtcHQxKSB7XG4gICAgICAgIHJldHVybiBbYXR0ZW1wdDFbMV0sIE51bWJlcihhdHRlbXB0MVsyXSldO1xuICAgIH1cblxuICAgIC8vIEFub255bW91cyBmdW5jdGlvbnM6IFwiYXQgZmlsZW5hbWU6bGluZU51bWJlcjpjb2x1bW5OdW1iZXJcIlxuICAgIHZhciBhdHRlbXB0MiA9IC9hdCAoW14gXSspOihcXGQrKTooPzpcXGQrKSQvLmV4ZWMoc3RhY2tMaW5lKTtcbiAgICBpZiAoYXR0ZW1wdDIpIHtcbiAgICAgICAgcmV0dXJuIFthdHRlbXB0MlsxXSwgTnVtYmVyKGF0dGVtcHQyWzJdKV07XG4gICAgfVxuXG4gICAgLy8gRmlyZWZveCBzdHlsZTogXCJmdW5jdGlvbkBmaWxlbmFtZTpsaW5lTnVtYmVyIG9yIEBmaWxlbmFtZTpsaW5lTnVtYmVyXCJcbiAgICB2YXIgYXR0ZW1wdDMgPSAvLipAKC4rKTooXFxkKykkLy5leGVjKHN0YWNrTGluZSk7XG4gICAgaWYgKGF0dGVtcHQzKSB7XG4gICAgICAgIHJldHVybiBbYXR0ZW1wdDNbMV0sIE51bWJlcihhdHRlbXB0M1syXSldO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNJbnRlcm5hbEZyYW1lKHN0YWNrTGluZSkge1xuICAgIHZhciBmaWxlTmFtZUFuZExpbmVOdW1iZXIgPSBnZXRGaWxlTmFtZUFuZExpbmVOdW1iZXIoc3RhY2tMaW5lKTtcblxuICAgIGlmICghZmlsZU5hbWVBbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZmlsZU5hbWUgPSBmaWxlTmFtZUFuZExpbmVOdW1iZXJbMF07XG4gICAgdmFyIGxpbmVOdW1iZXIgPSBmaWxlTmFtZUFuZExpbmVOdW1iZXJbMV07XG5cbiAgICByZXR1cm4gZmlsZU5hbWUgPT09IHFGaWxlTmFtZSAmJlxuICAgICAgICBsaW5lTnVtYmVyID49IHFTdGFydGluZ0xpbmUgJiZcbiAgICAgICAgbGluZU51bWJlciA8PSBxRW5kaW5nTGluZTtcbn1cblxuLy8gZGlzY292ZXIgb3duIGZpbGUgbmFtZSBhbmQgbGluZSBudW1iZXIgcmFuZ2UgZm9yIGZpbHRlcmluZyBzdGFja1xuLy8gdHJhY2VzXG5mdW5jdGlvbiBjYXB0dXJlTGluZSgpIHtcbiAgICBpZiAoIWhhc1N0YWNrcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2YXIgbGluZXMgPSBlLnN0YWNrLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICB2YXIgZmlyc3RMaW5lID0gbGluZXNbMF0uaW5kZXhPZihcIkBcIikgPiAwID8gbGluZXNbMV0gOiBsaW5lc1syXTtcbiAgICAgICAgdmFyIGZpbGVOYW1lQW5kTGluZU51bWJlciA9IGdldEZpbGVOYW1lQW5kTGluZU51bWJlcihmaXJzdExpbmUpO1xuICAgICAgICBpZiAoIWZpbGVOYW1lQW5kTGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcUZpbGVOYW1lID0gZmlsZU5hbWVBbmRMaW5lTnVtYmVyWzBdO1xuICAgICAgICByZXR1cm4gZmlsZU5hbWVBbmRMaW5lTnVtYmVyWzFdO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGVwcmVjYXRlKGNhbGxiYWNrLCBuYW1lLCBhbHRlcm5hdGl2ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4obmFtZSArIFwiIGlzIGRlcHJlY2F0ZWQsIHVzZSBcIiArIGFsdGVybmF0aXZlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBcIiBpbnN0ZWFkLlwiLCBuZXcgRXJyb3IoXCJcIikuc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseShjYWxsYmFjaywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG4vLyBlbmQgb2Ygc2hpbXNcbi8vIGJlZ2lubmluZyBvZiByZWFsIHdvcmtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgcHJvbWlzZSBmb3IgYW4gaW1tZWRpYXRlIHJlZmVyZW5jZSwgcGFzc2VzIHByb21pc2VzIHRocm91Z2gsIG9yXG4gKiBjb2VyY2VzIHByb21pc2VzIGZyb20gZGlmZmVyZW50IHN5c3RlbXMuXG4gKiBAcGFyYW0gdmFsdWUgaW1tZWRpYXRlIHJlZmVyZW5jZSBvciBwcm9taXNlXG4gKi9cbmZ1bmN0aW9uIFEodmFsdWUpIHtcbiAgICAvLyBJZiB0aGUgb2JqZWN0IGlzIGFscmVhZHkgYSBQcm9taXNlLCByZXR1cm4gaXQgZGlyZWN0bHkuICBUaGlzIGVuYWJsZXNcbiAgICAvLyB0aGUgcmVzb2x2ZSBmdW5jdGlvbiB0byBib3RoIGJlIHVzZWQgdG8gY3JlYXRlZCByZWZlcmVuY2VzIGZyb20gb2JqZWN0cyxcbiAgICAvLyBidXQgdG8gdG9sZXJhYmx5IGNvZXJjZSBub24tcHJvbWlzZXMgdG8gcHJvbWlzZXMuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gYXNzaW1pbGF0ZSB0aGVuYWJsZXNcbiAgICBpZiAoaXNQcm9taXNlQWxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjb2VyY2UodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdWxmaWxsKHZhbHVlKTtcbiAgICB9XG59XG5RLnJlc29sdmUgPSBRO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgdGFzayBpbiBhIGZ1dHVyZSB0dXJuIG9mIHRoZSBldmVudCBsb29wLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdGFza1xuICovXG5RLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbi8qKlxuICogQ29udHJvbHMgd2hldGhlciBvciBub3QgbG9uZyBzdGFjayB0cmFjZXMgd2lsbCBiZSBvblxuICovXG5RLmxvbmdTdGFja1N1cHBvcnQgPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgY291bnRlciBpcyB1c2VkIHRvIGRldGVybWluZSB0aGUgc3RvcHBpbmcgcG9pbnQgZm9yIGJ1aWxkaW5nXG4gKiBsb25nIHN0YWNrIHRyYWNlcy4gSW4gbWFrZVN0YWNrVHJhY2VMb25nIHdlIHdhbGsgYmFja3dhcmRzIHRocm91Z2hcbiAqIHRoZSBsaW5rZWQgbGlzdCBvZiBwcm9taXNlcywgb25seSBzdGFja3Mgd2hpY2ggd2VyZSBjcmVhdGVkIGJlZm9yZVxuICogdGhlIHJlamVjdGlvbiBhcmUgY29uY2F0ZW5hdGVkLlxuICovXG52YXIgbG9uZ1N0YWNrQ291bnRlciA9IDE7XG5cbi8vIGVuYWJsZSBsb25nIHN0YWNrcyBpZiBRX0RFQlVHIGlzIHNldFxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuUV9ERUJVRykge1xuICAgIFEubG9uZ1N0YWNrU3VwcG9ydCA9IHRydWU7XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHtwcm9taXNlLCByZXNvbHZlLCByZWplY3R9IG9iamVjdC5cbiAqXG4gKiBgcmVzb2x2ZWAgaXMgYSBjYWxsYmFjayB0byBpbnZva2Ugd2l0aCBhIG1vcmUgcmVzb2x2ZWQgdmFsdWUgZm9yIHRoZVxuICogcHJvbWlzZS4gVG8gZnVsZmlsbCB0aGUgcHJvbWlzZSwgaW52b2tlIGByZXNvbHZlYCB3aXRoIGFueSB2YWx1ZSB0aGF0IGlzXG4gKiBub3QgYSB0aGVuYWJsZS4gVG8gcmVqZWN0IHRoZSBwcm9taXNlLCBpbnZva2UgYHJlc29sdmVgIHdpdGggYSByZWplY3RlZFxuICogdGhlbmFibGUsIG9yIGludm9rZSBgcmVqZWN0YCB3aXRoIHRoZSByZWFzb24gZGlyZWN0bHkuIFRvIHJlc29sdmUgdGhlXG4gKiBwcm9taXNlIHRvIGFub3RoZXIgdGhlbmFibGUsIHRodXMgcHV0dGluZyBpdCBpbiB0aGUgc2FtZSBzdGF0ZSwgaW52b2tlXG4gKiBgcmVzb2x2ZWAgd2l0aCB0aGF0IG90aGVyIHRoZW5hYmxlLlxuICovXG5RLmRlZmVyID0gZGVmZXI7XG5mdW5jdGlvbiBkZWZlcigpIHtcbiAgICAvLyBpZiBcIm1lc3NhZ2VzXCIgaXMgYW4gXCJBcnJheVwiLCB0aGF0IGluZGljYXRlcyB0aGF0IHRoZSBwcm9taXNlIGhhcyBub3QgeWV0XG4gICAgLy8gYmVlbiByZXNvbHZlZC4gIElmIGl0IGlzIFwidW5kZWZpbmVkXCIsIGl0IGhhcyBiZWVuIHJlc29sdmVkLiAgRWFjaFxuICAgIC8vIGVsZW1lbnQgb2YgdGhlIG1lc3NhZ2VzIGFycmF5IGlzIGl0c2VsZiBhbiBhcnJheSBvZiBjb21wbGV0ZSBhcmd1bWVudHMgdG9cbiAgICAvLyBmb3J3YXJkIHRvIHRoZSByZXNvbHZlZCBwcm9taXNlLiAgV2UgY29lcmNlIHRoZSByZXNvbHV0aW9uIHZhbHVlIHRvIGFcbiAgICAvLyBwcm9taXNlIHVzaW5nIHRoZSBgcmVzb2x2ZWAgZnVuY3Rpb24gYmVjYXVzZSBpdCBoYW5kbGVzIGJvdGggZnVsbHlcbiAgICAvLyBub24tdGhlbmFibGUgdmFsdWVzIGFuZCBvdGhlciB0aGVuYWJsZXMgZ3JhY2VmdWxseS5cbiAgICB2YXIgbWVzc2FnZXMgPSBbXSwgcHJvZ3Jlc3NMaXN0ZW5lcnMgPSBbXSwgcmVzb2x2ZWRQcm9taXNlO1xuXG4gICAgdmFyIGRlZmVycmVkID0gb2JqZWN0X2NyZWF0ZShkZWZlci5wcm90b3R5cGUpO1xuICAgIHZhciBwcm9taXNlID0gb2JqZWN0X2NyZWF0ZShQcm9taXNlLnByb3RvdHlwZSk7XG5cbiAgICBwcm9taXNlLnByb21pc2VEaXNwYXRjaCA9IGZ1bmN0aW9uIChyZXNvbHZlLCBvcCwgb3BlcmFuZHMpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMpO1xuICAgICAgICBpZiAobWVzc2FnZXMpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goYXJncyk7XG4gICAgICAgICAgICBpZiAob3AgPT09IFwid2hlblwiICYmIG9wZXJhbmRzWzFdKSB7IC8vIHByb2dyZXNzIG9wZXJhbmRcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0xpc3RlbmVycy5wdXNoKG9wZXJhbmRzWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkUHJvbWlzZS5wcm9taXNlRGlzcGF0Y2guYXBwbHkocmVzb2x2ZWRQcm9taXNlLCBhcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFhYWCBkZXByZWNhdGVkXG4gICAgcHJvbWlzZS52YWx1ZU9mID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAobWVzc2FnZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZWFyZXJWYWx1ZSA9IG5lYXJlcihyZXNvbHZlZFByb21pc2UpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKG5lYXJlclZhbHVlKSkge1xuICAgICAgICAgICAgcmVzb2x2ZWRQcm9taXNlID0gbmVhcmVyVmFsdWU7IC8vIHNob3J0ZW4gY2hhaW5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmVhcmVyVmFsdWU7XG4gICAgfTtcblxuICAgIHByb21pc2UuaW5zcGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFyZXNvbHZlZFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXRlOiBcInBlbmRpbmdcIiB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlZFByb21pc2UuaW5zcGVjdCgpO1xuICAgIH07XG5cbiAgICBpZiAoUS5sb25nU3RhY2tTdXBwb3J0ICYmIGhhc1N0YWNrcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IGRvbid0IHRyeSB0byB1c2UgYEVycm9yLmNhcHR1cmVTdGFja1RyYWNlYCBvciB0cmFuc2ZlciB0aGVcbiAgICAgICAgICAgIC8vIGFjY2Vzc29yIGFyb3VuZDsgdGhhdCBjYXVzZXMgbWVtb3J5IGxlYWtzIGFzIHBlciBHSC0xMTEuIEp1c3RcbiAgICAgICAgICAgIC8vIHJlaWZ5IHRoZSBzdGFjayB0cmFjZSBhcyBhIHN0cmluZyBBU0FQLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEF0IHRoZSBzYW1lIHRpbWUsIGN1dCBvZmYgdGhlIGZpcnN0IGxpbmU7IGl0J3MgYWx3YXlzIGp1c3RcbiAgICAgICAgICAgIC8vIFwiW29iamVjdCBQcm9taXNlXVxcblwiLCBhcyBwZXIgdGhlIGB0b1N0cmluZ2AuXG4gICAgICAgICAgICBwcm9taXNlLnN0YWNrID0gZS5zdGFjay5zdWJzdHJpbmcoZS5zdGFjay5pbmRleE9mKFwiXFxuXCIpICsgMSk7XG4gICAgICAgICAgICBwcm9taXNlLnN0YWNrQ291bnRlciA9IGxvbmdTdGFja0NvdW50ZXIrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5PVEU6IHdlIGRvIHRoZSBjaGVja3MgZm9yIGByZXNvbHZlZFByb21pc2VgIGluIGVhY2ggbWV0aG9kLCBpbnN0ZWFkIG9mXG4gICAgLy8gY29uc29saWRhdGluZyB0aGVtIGludG8gYGJlY29tZWAsIHNpbmNlIG90aGVyd2lzZSB3ZSdkIGNyZWF0ZSBuZXdcbiAgICAvLyBwcm9taXNlcyB3aXRoIHRoZSBsaW5lcyBgYmVjb21lKHdoYXRldmVyKHZhbHVlKSlgLiBTZWUgZS5nLiBHSC0yNTIuXG5cbiAgICBmdW5jdGlvbiBiZWNvbWUobmV3UHJvbWlzZSkge1xuICAgICAgICByZXNvbHZlZFByb21pc2UgPSBuZXdQcm9taXNlO1xuXG4gICAgICAgIGlmIChRLmxvbmdTdGFja1N1cHBvcnQgJiYgaGFzU3RhY2tzKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGhvbGQgYSByZWZlcmVuY2UgdG8gdGhlIG5ldyBwcm9taXNlIGlmIGxvbmcgc3RhY2tzXG4gICAgICAgICAgICAvLyBhcmUgZW5hYmxlZCB0byByZWR1Y2UgbWVtb3J5IHVzYWdlXG4gICAgICAgICAgICBwcm9taXNlLnNvdXJjZSA9IG5ld1Byb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICBhcnJheV9yZWR1Y2UobWVzc2FnZXMsIGZ1bmN0aW9uICh1bmRlZmluZWQsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG5ld1Byb21pc2UucHJvbWlzZURpc3BhdGNoLmFwcGx5KG5ld1Byb21pc2UsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHZvaWQgMCk7XG5cbiAgICAgICAgbWVzc2FnZXMgPSB2b2lkIDA7XG4gICAgICAgIHByb2dyZXNzTGlzdGVuZXJzID0gdm9pZCAwO1xuICAgIH1cblxuICAgIGRlZmVycmVkLnByb21pc2UgPSBwcm9taXNlO1xuICAgIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHJlc29sdmVkUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYmVjb21lKFEodmFsdWUpKTtcbiAgICB9O1xuXG4gICAgZGVmZXJyZWQuZnVsZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAocmVzb2x2ZWRQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBiZWNvbWUoZnVsZmlsbCh2YWx1ZSkpO1xuICAgIH07XG4gICAgZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICBpZiAocmVzb2x2ZWRQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBiZWNvbWUocmVqZWN0KHJlYXNvbikpO1xuICAgIH07XG4gICAgZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24gKHByb2dyZXNzKSB7XG4gICAgICAgIGlmIChyZXNvbHZlZFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFycmF5X3JlZHVjZShwcm9ncmVzc0xpc3RlbmVycywgZnVuY3Rpb24gKHVuZGVmaW5lZCwgcHJvZ3Jlc3NMaXN0ZW5lcikge1xuICAgICAgICAgICAgUS5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NMaXN0ZW5lcihwcm9ncmVzcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgdm9pZCAwKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRlZmVycmVkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBOb2RlLXN0eWxlIGNhbGxiYWNrIHRoYXQgd2lsbCByZXNvbHZlIG9yIHJlamVjdCB0aGUgZGVmZXJyZWRcbiAqIHByb21pc2UuXG4gKiBAcmV0dXJucyBhIG5vZGViYWNrXG4gKi9cbmRlZmVyLnByb3RvdHlwZS5tYWtlTm9kZVJlc29sdmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVycm9yLCB2YWx1ZSkge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHNlbGYucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgc2VsZi5yZXNvbHZlKGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG4vKipcbiAqIEBwYXJhbSByZXNvbHZlciB7RnVuY3Rpb259IGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG5vdGhpbmcgYW5kIGFjY2VwdHNcbiAqIHRoZSByZXNvbHZlLCByZWplY3QsIGFuZCBub3RpZnkgZnVuY3Rpb25zIGZvciBhIGRlZmVycmVkLlxuICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgbWF5IGJlIHJlc29sdmVkIHdpdGggdGhlIGdpdmVuIHJlc29sdmUgYW5kIHJlamVjdFxuICogZnVuY3Rpb25zLCBvciByZWplY3RlZCBieSBhIHRocm93biBleGNlcHRpb24gaW4gcmVzb2x2ZXJcbiAqL1xuUS5Qcm9taXNlID0gcHJvbWlzZTsgLy8gRVM2XG5RLnByb21pc2UgPSBwcm9taXNlO1xuZnVuY3Rpb24gcHJvbWlzZShyZXNvbHZlcikge1xuICAgIGlmICh0eXBlb2YgcmVzb2x2ZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicmVzb2x2ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICB0cnkge1xuICAgICAgICByZXNvbHZlcihkZWZlcnJlZC5yZXNvbHZlLCBkZWZlcnJlZC5yZWplY3QsIGRlZmVycmVkLm5vdGlmeSk7XG4gICAgfSBjYXRjaCAocmVhc29uKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgIH1cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cblxucHJvbWlzZS5yYWNlID0gcmFjZTsgLy8gRVM2XG5wcm9taXNlLmFsbCA9IGFsbDsgLy8gRVM2XG5wcm9taXNlLnJlamVjdCA9IHJlamVjdDsgLy8gRVM2XG5wcm9taXNlLnJlc29sdmUgPSBROyAvLyBFUzZcblxuLy8gWFhYIGV4cGVyaW1lbnRhbC4gIFRoaXMgbWV0aG9kIGlzIGEgd2F5IHRvIGRlbm90ZSB0aGF0IGEgbG9jYWwgdmFsdWUgaXNcbi8vIHNlcmlhbGl6YWJsZSBhbmQgc2hvdWxkIGJlIGltbWVkaWF0ZWx5IGRpc3BhdGNoZWQgdG8gYSByZW1vdGUgdXBvbiByZXF1ZXN0LFxuLy8gaW5zdGVhZCBvZiBwYXNzaW5nIGEgcmVmZXJlbmNlLlxuUS5wYXNzQnlDb3B5ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIC8vZnJlZXplKG9iamVjdCk7XG4gICAgLy9wYXNzQnlDb3BpZXMuc2V0KG9iamVjdCwgdHJ1ZSk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnBhc3NCeUNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy9mcmVlemUob2JqZWN0KTtcbiAgICAvL3Bhc3NCeUNvcGllcy5zZXQob2JqZWN0LCB0cnVlKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogSWYgdHdvIHByb21pc2VzIGV2ZW50dWFsbHkgZnVsZmlsbCB0byB0aGUgc2FtZSB2YWx1ZSwgcHJvbWlzZXMgdGhhdCB2YWx1ZSxcbiAqIGJ1dCBvdGhlcndpc2UgcmVqZWN0cy5cbiAqIEBwYXJhbSB4IHtBbnkqfVxuICogQHBhcmFtIHkge0FueSp9XG4gKiBAcmV0dXJucyB7QW55Kn0gYSBwcm9taXNlIGZvciB4IGFuZCB5IGlmIHRoZXkgYXJlIHRoZSBzYW1lLCBidXQgYSByZWplY3Rpb25cbiAqIG90aGVyd2lzZS5cbiAqXG4gKi9cblEuam9pbiA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgcmV0dXJuIFEoeCkuam9pbih5KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiAodGhhdCkge1xuICAgIHJldHVybiBRKFt0aGlzLCB0aGF0XSkuc3ByZWFkKGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIGlmICh4ID09PSB5KSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBcIj09PVwiIHNob3VsZCBiZSBPYmplY3QuaXMgb3IgZXF1aXZcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUSBjYW4ndCBqb2luOiBub3QgdGhlIHNhbWU6IFwiICsgeCArIFwiIFwiICsgeSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSBmaXJzdCBvZiBhbiBhcnJheSBvZiBwcm9taXNlcyB0byBiZWNvbWUgc2V0dGxlZC5cbiAqIEBwYXJhbSBhbnN3ZXJzIHtBcnJheVtBbnkqXX0gcHJvbWlzZXMgdG8gcmFjZVxuICogQHJldHVybnMge0FueSp9IHRoZSBmaXJzdCBwcm9taXNlIHRvIGJlIHNldHRsZWRcbiAqL1xuUS5yYWNlID0gcmFjZTtcbmZ1bmN0aW9uIHJhY2UoYW5zd2VyUHMpIHtcbiAgICByZXR1cm4gcHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIFN3aXRjaCB0byB0aGlzIG9uY2Ugd2UgY2FuIGFzc3VtZSBhdCBsZWFzdCBFUzVcbiAgICAgICAgLy8gYW5zd2VyUHMuZm9yRWFjaChmdW5jdGlvbiAoYW5zd2VyUCkge1xuICAgICAgICAvLyAgICAgUShhbnN3ZXJQKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyBVc2UgdGhpcyBpbiB0aGUgbWVhbnRpbWVcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFuc3dlclBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBRKGFuc3dlclBzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUucmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKFEucmFjZSk7XG59O1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBQcm9taXNlIHdpdGggYSBwcm9taXNlIGRlc2NyaXB0b3Igb2JqZWN0IGFuZCBvcHRpb25hbCBmYWxsYmFja1xuICogZnVuY3Rpb24uICBUaGUgZGVzY3JpcHRvciBjb250YWlucyBtZXRob2RzIGxpa2Ugd2hlbihyZWplY3RlZCksIGdldChuYW1lKSxcbiAqIHNldChuYW1lLCB2YWx1ZSksIHBvc3QobmFtZSwgYXJncyksIGFuZCBkZWxldGUobmFtZSksIHdoaWNoIGFsbFxuICogcmV0dXJuIGVpdGhlciBhIHZhbHVlLCBhIHByb21pc2UgZm9yIGEgdmFsdWUsIG9yIGEgcmVqZWN0aW9uLiAgVGhlIGZhbGxiYWNrXG4gKiBhY2NlcHRzIHRoZSBvcGVyYXRpb24gbmFtZSwgYSByZXNvbHZlciwgYW5kIGFueSBmdXJ0aGVyIGFyZ3VtZW50cyB0aGF0IHdvdWxkXG4gKiBoYXZlIGJlZW4gZm9yd2FyZGVkIHRvIHRoZSBhcHByb3ByaWF0ZSBtZXRob2QgYWJvdmUgaGFkIGEgbWV0aG9kIGJlZW5cbiAqIHByb3ZpZGVkIHdpdGggdGhlIHByb3BlciBuYW1lLiAgVGhlIEFQSSBtYWtlcyBubyBndWFyYW50ZWVzIGFib3V0IHRoZSBuYXR1cmVcbiAqIG9mIHRoZSByZXR1cm5lZCBvYmplY3QsIGFwYXJ0IGZyb20gdGhhdCBpdCBpcyB1c2FibGUgd2hlcmVldmVyIHByb21pc2VzIGFyZVxuICogYm91Z2h0IGFuZCBzb2xkLlxuICovXG5RLm1ha2VQcm9taXNlID0gUHJvbWlzZTtcbmZ1bmN0aW9uIFByb21pc2UoZGVzY3JpcHRvciwgZmFsbGJhY2ssIGluc3BlY3QpIHtcbiAgICBpZiAoZmFsbGJhY2sgPT09IHZvaWQgMCkge1xuICAgICAgICBmYWxsYmFjayA9IGZ1bmN0aW9uIChvcCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJQcm9taXNlIGRvZXMgbm90IHN1cHBvcnQgb3BlcmF0aW9uOiBcIiArIG9wXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGluc3BlY3QgPT09IHZvaWQgMCkge1xuICAgICAgICBpbnNwZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtzdGF0ZTogXCJ1bmtub3duXCJ9O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlID0gb2JqZWN0X2NyZWF0ZShQcm9taXNlLnByb3RvdHlwZSk7XG5cbiAgICBwcm9taXNlLnByb21pc2VEaXNwYXRjaCA9IGZ1bmN0aW9uIChyZXNvbHZlLCBvcCwgYXJncykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3Jbb3BdKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZGVzY3JpcHRvcltvcF0uYXBwbHkocHJvbWlzZSwgYXJncyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbGxiYWNrLmNhbGwocHJvbWlzZSwgb3AsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlamVjdChleGNlcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvbWlzZS5pbnNwZWN0ID0gaW5zcGVjdDtcblxuICAgIC8vIFhYWCBkZXByZWNhdGVkIGB2YWx1ZU9mYCBhbmQgYGV4Y2VwdGlvbmAgc3VwcG9ydFxuICAgIGlmIChpbnNwZWN0KSB7XG4gICAgICAgIHZhciBpbnNwZWN0ZWQgPSBpbnNwZWN0KCk7XG4gICAgICAgIGlmIChpbnNwZWN0ZWQuc3RhdGUgPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICAgICAgcHJvbWlzZS5leGNlcHRpb24gPSBpbnNwZWN0ZWQucmVhc29uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvbWlzZS52YWx1ZU9mID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGluc3BlY3RlZCA9IGluc3BlY3QoKTtcbiAgICAgICAgICAgIGlmIChpbnNwZWN0ZWQuc3RhdGUgPT09IFwicGVuZGluZ1wiIHx8XG4gICAgICAgICAgICAgICAgaW5zcGVjdGVkLnN0YXRlID09PSBcInJlamVjdGVkXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbnNwZWN0ZWQudmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cblByb21pc2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgUHJvbWlzZV1cIjtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiAoZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3NlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIHZhciBkb25lID0gZmFsc2U7ICAgLy8gZW5zdXJlIHRoZSB1bnRydXN0ZWQgcHJvbWlzZSBtYWtlcyBhdCBtb3N0IGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNpbmdsZSBjYWxsIHRvIG9uZSBvZiB0aGUgY2FsbGJhY2tzXG5cbiAgICBmdW5jdGlvbiBfZnVsZmlsbGVkKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGZ1bGZpbGxlZCA9PT0gXCJmdW5jdGlvblwiID8gZnVsZmlsbGVkKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9yZWplY3RlZChleGNlcHRpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZWplY3RlZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBtYWtlU3RhY2tUcmFjZUxvbmcoZXhjZXB0aW9uLCBzZWxmKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdGVkKGV4Y2VwdGlvbik7XG4gICAgICAgICAgICB9IGNhdGNoIChuZXdFeGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ld0V4Y2VwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlamVjdChleGNlcHRpb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9wcm9ncmVzc2VkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcHJvZ3Jlc3NlZCA9PT0gXCJmdW5jdGlvblwiID8gcHJvZ3Jlc3NlZCh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5wcm9taXNlRGlzcGF0Y2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKF9mdWxmaWxsZWQodmFsdWUpKTtcbiAgICAgICAgfSwgXCJ3aGVuXCIsIFtmdW5jdGlvbiAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKF9yZWplY3RlZChleGNlcHRpb24pKTtcbiAgICAgICAgfV0pO1xuICAgIH0pO1xuXG4gICAgLy8gUHJvZ3Jlc3MgcHJvcGFnYXRvciBuZWVkIHRvIGJlIGF0dGFjaGVkIGluIHRoZSBjdXJyZW50IHRpY2suXG4gICAgc2VsZi5wcm9taXNlRGlzcGF0Y2godm9pZCAwLCBcIndoZW5cIiwgW3ZvaWQgMCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZTtcbiAgICAgICAgdmFyIHRocmV3ID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IF9wcm9ncmVzc2VkKHZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyZXcgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKFEub25lcnJvcikge1xuICAgICAgICAgICAgICAgIFEub25lcnJvcihlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhyZXcpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLm5vdGlmeShuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cblEudGFwID0gZnVuY3Rpb24gKHByb21pc2UsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFEocHJvbWlzZSkudGFwKGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogV29ya3MgYWxtb3N0IGxpa2UgXCJmaW5hbGx5XCIsIGJ1dCBub3QgY2FsbGVkIGZvciByZWplY3Rpb25zLlxuICogT3JpZ2luYWwgcmVzb2x1dGlvbiB2YWx1ZSBpcyBwYXNzZWQgdGhyb3VnaCBjYWxsYmFjayB1bmFmZmVjdGVkLlxuICogQ2FsbGJhY2sgbWF5IHJldHVybiBhIHByb21pc2UgdGhhdCB3aWxsIGJlIGF3YWl0ZWQgZm9yLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtRLlByb21pc2V9XG4gKiBAZXhhbXBsZVxuICogZG9Tb21ldGhpbmcoKVxuICogICAudGhlbiguLi4pXG4gKiAgIC50YXAoY29uc29sZS5sb2cpXG4gKiAgIC50aGVuKC4uLik7XG4gKi9cblByb21pc2UucHJvdG90eXBlLnRhcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gUShjYWxsYmFjayk7XG5cbiAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suZmNhbGwodmFsdWUpLnRoZW5SZXNvbHZlKHZhbHVlKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogUmVnaXN0ZXJzIGFuIG9ic2VydmVyIG9uIGEgcHJvbWlzZS5cbiAqXG4gKiBHdWFyYW50ZWVzOlxuICpcbiAqIDEuIHRoYXQgZnVsZmlsbGVkIGFuZCByZWplY3RlZCB3aWxsIGJlIGNhbGxlZCBvbmx5IG9uY2UuXG4gKiAyLiB0aGF0IGVpdGhlciB0aGUgZnVsZmlsbGVkIGNhbGxiYWNrIG9yIHRoZSByZWplY3RlZCBjYWxsYmFjayB3aWxsIGJlXG4gKiAgICBjYWxsZWQsIGJ1dCBub3QgYm90aC5cbiAqIDMuIHRoYXQgZnVsZmlsbGVkIGFuZCByZWplY3RlZCB3aWxsIG5vdCBiZSBjYWxsZWQgaW4gdGhpcyB0dXJuLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAgICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSB0byBvYnNlcnZlXG4gKiBAcGFyYW0gZnVsZmlsbGVkICBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2l0aCB0aGUgZnVsZmlsbGVkIHZhbHVlXG4gKiBAcGFyYW0gcmVqZWN0ZWQgICBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2l0aCB0aGUgcmVqZWN0aW9uIGV4Y2VwdGlvblxuICogQHBhcmFtIHByb2dyZXNzZWQgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGFueSBwcm9ncmVzcyBub3RpZmljYXRpb25zXG4gKiBAcmV0dXJuIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgaW52b2tlZCBjYWxsYmFja1xuICovXG5RLndoZW4gPSB3aGVuO1xuZnVuY3Rpb24gd2hlbih2YWx1ZSwgZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3NlZCkge1xuICAgIHJldHVybiBRKHZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzZWQpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuUmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWU7IH0pO1xufTtcblxuUS50aGVuUmVzb2x2ZSA9IGZ1bmN0aW9uIChwcm9taXNlLCB2YWx1ZSkge1xuICAgIHJldHVybiBRKHByb21pc2UpLnRoZW5SZXNvbHZlKHZhbHVlKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRoZW5SZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IHJlYXNvbjsgfSk7XG59O1xuXG5RLnRoZW5SZWplY3QgPSBmdW5jdGlvbiAocHJvbWlzZSwgcmVhc29uKSB7XG4gICAgcmV0dXJuIFEocHJvbWlzZSkudGhlblJlamVjdChyZWFzb24pO1xufTtcblxuLyoqXG4gKiBJZiBhbiBvYmplY3QgaXMgbm90IGEgcHJvbWlzZSwgaXQgaXMgYXMgXCJuZWFyXCIgYXMgcG9zc2libGUuXG4gKiBJZiBhIHByb21pc2UgaXMgcmVqZWN0ZWQsIGl0IGlzIGFzIFwibmVhclwiIGFzIHBvc3NpYmxlIHRvby5cbiAqIElmIGl04oCZcyBhIGZ1bGZpbGxlZCBwcm9taXNlLCB0aGUgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmVhcmVyLlxuICogSWYgaXTigJlzIGEgZGVmZXJyZWQgcHJvbWlzZSBhbmQgdGhlIGRlZmVycmVkIGhhcyBiZWVuIHJlc29sdmVkLCB0aGVcbiAqIHJlc29sdXRpb24gaXMgXCJuZWFyZXJcIi5cbiAqIEBwYXJhbSBvYmplY3RcbiAqIEByZXR1cm5zIG1vc3QgcmVzb2x2ZWQgKG5lYXJlc3QpIGZvcm0gb2YgdGhlIG9iamVjdFxuICovXG5cbi8vIFhYWCBzaG91bGQgd2UgcmUtZG8gdGhpcz9cblEubmVhcmVyID0gbmVhcmVyO1xuZnVuY3Rpb24gbmVhcmVyKHZhbHVlKSB7XG4gICAgaWYgKGlzUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGluc3BlY3RlZCA9IHZhbHVlLmluc3BlY3QoKTtcbiAgICAgICAgaWYgKGluc3BlY3RlZC5zdGF0ZSA9PT0gXCJmdWxmaWxsZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3RlZC52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgcHJvbWlzZS5cbiAqIE90aGVyd2lzZSBpdCBpcyBhIGZ1bGZpbGxlZCB2YWx1ZS5cbiAqL1xuUS5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG5mdW5jdGlvbiBpc1Byb21pc2Uob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIFByb21pc2U7XG59XG5cblEuaXNQcm9taXNlQWxpa2UgPSBpc1Byb21pc2VBbGlrZTtcbmZ1bmN0aW9uIGlzUHJvbWlzZUFsaWtlKG9iamVjdCkge1xuICAgIHJldHVybiBpc09iamVjdChvYmplY3QpICYmIHR5cGVvZiBvYmplY3QudGhlbiA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIG9iamVjdCBpcyBhIHBlbmRpbmcgcHJvbWlzZSwgbWVhbmluZyBub3RcbiAqIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cbiAqL1xuUS5pc1BlbmRpbmcgPSBpc1BlbmRpbmc7XG5mdW5jdGlvbiBpc1BlbmRpbmcob2JqZWN0KSB7XG4gICAgcmV0dXJuIGlzUHJvbWlzZShvYmplY3QpICYmIG9iamVjdC5pbnNwZWN0KCkuc3RhdGUgPT09IFwicGVuZGluZ1wiO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5pc1BlbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zcGVjdCgpLnN0YXRlID09PSBcInBlbmRpbmdcIjtcbn07XG5cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgdmFsdWUgb3IgZnVsZmlsbGVkXG4gKiBwcm9taXNlLlxuICovXG5RLmlzRnVsZmlsbGVkID0gaXNGdWxmaWxsZWQ7XG5mdW5jdGlvbiBpc0Z1bGZpbGxlZChvYmplY3QpIHtcbiAgICByZXR1cm4gIWlzUHJvbWlzZShvYmplY3QpIHx8IG9iamVjdC5pbnNwZWN0KCkuc3RhdGUgPT09IFwiZnVsZmlsbGVkXCI7XG59XG5cblByb21pc2UucHJvdG90eXBlLmlzRnVsZmlsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJmdWxmaWxsZWRcIjtcbn07XG5cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgcmVqZWN0ZWQgcHJvbWlzZS5cbiAqL1xuUS5pc1JlamVjdGVkID0gaXNSZWplY3RlZDtcbmZ1bmN0aW9uIGlzUmVqZWN0ZWQob2JqZWN0KSB7XG4gICAgcmV0dXJuIGlzUHJvbWlzZShvYmplY3QpICYmIG9iamVjdC5pbnNwZWN0KCkuc3RhdGUgPT09IFwicmVqZWN0ZWRcIjtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuaXNSZWplY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNwZWN0KCkuc3RhdGUgPT09IFwicmVqZWN0ZWRcIjtcbn07XG5cbi8vLy8gQkVHSU4gVU5IQU5ETEVEIFJFSkVDVElPTiBUUkFDS0lOR1xuXG4vLyBUaGlzIHByb21pc2UgbGlicmFyeSBjb25zdW1lcyBleGNlcHRpb25zIHRocm93biBpbiBoYW5kbGVycyBzbyB0aGV5IGNhbiBiZVxuLy8gaGFuZGxlZCBieSBhIHN1YnNlcXVlbnQgcHJvbWlzZS4gIFRoZSBleGNlcHRpb25zIGdldCBhZGRlZCB0byB0aGlzIGFycmF5IHdoZW5cbi8vIHRoZXkgYXJlIGNyZWF0ZWQsIGFuZCByZW1vdmVkIHdoZW4gdGhleSBhcmUgaGFuZGxlZC4gIE5vdGUgdGhhdCBpbiBFUzYgb3Jcbi8vIHNoaW1tZWQgZW52aXJvbm1lbnRzLCB0aGlzIHdvdWxkIG5hdHVyYWxseSBiZSBhIGBTZXRgLlxudmFyIHVuaGFuZGxlZFJlYXNvbnMgPSBbXTtcbnZhciB1bmhhbmRsZWRSZWplY3Rpb25zID0gW107XG52YXIgcmVwb3J0ZWRVbmhhbmRsZWRSZWplY3Rpb25zID0gW107XG52YXIgdHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zID0gdHJ1ZTtcblxuZnVuY3Rpb24gcmVzZXRVbmhhbmRsZWRSZWplY3Rpb25zKCkge1xuICAgIHVuaGFuZGxlZFJlYXNvbnMubGVuZ3RoID0gMDtcbiAgICB1bmhhbmRsZWRSZWplY3Rpb25zLmxlbmd0aCA9IDA7XG5cbiAgICBpZiAoIXRyYWNrVW5oYW5kbGVkUmVqZWN0aW9ucykge1xuICAgICAgICB0cmFja1VuaGFuZGxlZFJlamVjdGlvbnMgPSB0cnVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdHJhY2tSZWplY3Rpb24ocHJvbWlzZSwgcmVhc29uKSB7XG4gICAgaWYgKCF0cmFja1VuaGFuZGxlZFJlamVjdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHByb2Nlc3MuZW1pdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIFEubmV4dFRpY2sucnVuQWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFycmF5X2luZGV4T2YodW5oYW5kbGVkUmVqZWN0aW9ucywgcHJvbWlzZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbWl0KFwidW5oYW5kbGVkUmVqZWN0aW9uXCIsIHJlYXNvbiwgcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgcmVwb3J0ZWRVbmhhbmRsZWRSZWplY3Rpb25zLnB1c2gocHJvbWlzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVuaGFuZGxlZFJlamVjdGlvbnMucHVzaChwcm9taXNlKTtcbiAgICBpZiAocmVhc29uICYmIHR5cGVvZiByZWFzb24uc3RhY2sgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdW5oYW5kbGVkUmVhc29ucy5wdXNoKHJlYXNvbi5zdGFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdW5oYW5kbGVkUmVhc29ucy5wdXNoKFwiKG5vIHN0YWNrKSBcIiArIHJlYXNvbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1bnRyYWNrUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgICBpZiAoIXRyYWNrVW5oYW5kbGVkUmVqZWN0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGF0ID0gYXJyYXlfaW5kZXhPZih1bmhhbmRsZWRSZWplY3Rpb25zLCBwcm9taXNlKTtcbiAgICBpZiAoYXQgIT09IC0xKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcHJvY2Vzcy5lbWl0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIFEubmV4dFRpY2sucnVuQWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhdFJlcG9ydCA9IGFycmF5X2luZGV4T2YocmVwb3J0ZWRVbmhhbmRsZWRSZWplY3Rpb25zLCBwcm9taXNlKTtcbiAgICAgICAgICAgICAgICBpZiAoYXRSZXBvcnQgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW1pdChcInJlamVjdGlvbkhhbmRsZWRcIiwgdW5oYW5kbGVkUmVhc29uc1thdF0sIHByb21pc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXBvcnRlZFVuaGFuZGxlZFJlamVjdGlvbnMuc3BsaWNlKGF0UmVwb3J0LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB1bmhhbmRsZWRSZWplY3Rpb25zLnNwbGljZShhdCwgMSk7XG4gICAgICAgIHVuaGFuZGxlZFJlYXNvbnMuc3BsaWNlKGF0LCAxKTtcbiAgICB9XG59XG5cblEucmVzZXRVbmhhbmRsZWRSZWplY3Rpb25zID0gcmVzZXRVbmhhbmRsZWRSZWplY3Rpb25zO1xuXG5RLmdldFVuaGFuZGxlZFJlYXNvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gTWFrZSBhIGNvcHkgc28gdGhhdCBjb25zdW1lcnMgY2FuJ3QgaW50ZXJmZXJlIHdpdGggb3VyIGludGVybmFsIHN0YXRlLlxuICAgIHJldHVybiB1bmhhbmRsZWRSZWFzb25zLnNsaWNlKCk7XG59O1xuXG5RLnN0b3BVbmhhbmRsZWRSZWplY3Rpb25UcmFja2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXNldFVuaGFuZGxlZFJlamVjdGlvbnMoKTtcbiAgICB0cmFja1VuaGFuZGxlZFJlamVjdGlvbnMgPSBmYWxzZTtcbn07XG5cbnJlc2V0VW5oYW5kbGVkUmVqZWN0aW9ucygpO1xuXG4vLy8vIEVORCBVTkhBTkRMRUQgUkVKRUNUSU9OIFRSQUNLSU5HXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHJlamVjdGVkIHByb21pc2UuXG4gKiBAcGFyYW0gcmVhc29uIHZhbHVlIGRlc2NyaWJpbmcgdGhlIGZhaWx1cmVcbiAqL1xuUS5yZWplY3QgPSByZWplY3Q7XG5mdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gICAgdmFyIHJlamVjdGlvbiA9IFByb21pc2Uoe1xuICAgICAgICBcIndoZW5cIjogZnVuY3Rpb24gKHJlamVjdGVkKSB7XG4gICAgICAgICAgICAvLyBub3RlIHRoYXQgdGhlIGVycm9yIGhhcyBiZWVuIGhhbmRsZWRcbiAgICAgICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgICAgICAgIHVudHJhY2tSZWplY3Rpb24odGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0ZWQgPyByZWplY3RlZChyZWFzb24pIDogdGhpcztcbiAgICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIGZhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJyZWplY3RlZFwiLCByZWFzb246IHJlYXNvbiB9O1xuICAgIH0pO1xuXG4gICAgLy8gTm90ZSB0aGF0IHRoZSByZWFzb24gaGFzIG5vdCBiZWVuIGhhbmRsZWQuXG4gICAgdHJhY2tSZWplY3Rpb24ocmVqZWN0aW9uLCByZWFzb24pO1xuXG4gICAgcmV0dXJuIHJlamVjdGlvbjtcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgZnVsZmlsbGVkIHByb21pc2UgZm9yIGFuIGltbWVkaWF0ZSByZWZlcmVuY2UuXG4gKiBAcGFyYW0gdmFsdWUgaW1tZWRpYXRlIHJlZmVyZW5jZVxuICovXG5RLmZ1bGZpbGwgPSBmdWxmaWxsO1xuZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkge1xuICAgIHJldHVybiBQcm9taXNlKHtcbiAgICAgICAgXCJ3aGVuXCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRcIjogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVtuYW1lXTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXRcIjogZnVuY3Rpb24gKG5hbWUsIHJocykge1xuICAgICAgICAgICAgdmFsdWVbbmFtZV0gPSByaHM7XG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVsZXRlXCI6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBkZWxldGUgdmFsdWVbbmFtZV07XG4gICAgICAgIH0sXG4gICAgICAgIFwicG9zdFwiOiBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICAgICAgLy8gTWFyayBNaWxsZXIgcHJvcG9zZXMgdGhhdCBwb3N0IHdpdGggbm8gbmFtZSBzaG91bGQgYXBwbHkgYVxuICAgICAgICAgICAgLy8gcHJvbWlzZWQgZnVuY3Rpb24uXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gbnVsbCB8fCBuYW1lID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlW25hbWVdLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJhcHBseVwiOiBmdW5jdGlvbiAodGhpc3AsIGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5hcHBseSh0aGlzcCwgYXJncyk7XG4gICAgICAgIH0sXG4gICAgICAgIFwia2V5c1wiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0X2tleXModmFsdWUpO1xuICAgICAgICB9XG4gICAgfSwgdm9pZCAwLCBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJmdWxmaWxsZWRcIiwgdmFsdWU6IHZhbHVlIH07XG4gICAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlbmFibGVzIHRvIFEgcHJvbWlzZXMuXG4gKiBAcGFyYW0gcHJvbWlzZSB0aGVuYWJsZSBwcm9taXNlXG4gKiBAcmV0dXJucyBhIFEgcHJvbWlzZVxuICovXG5mdW5jdGlvbiBjb2VyY2UocHJvbWlzZSkge1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgUS5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcm9taXNlLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgZGVmZXJyZWQucmVqZWN0LCBkZWZlcnJlZC5ub3RpZnkpO1xuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChleGNlcHRpb24pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cbi8qKlxuICogQW5ub3RhdGVzIGFuIG9iamVjdCBzdWNoIHRoYXQgaXQgd2lsbCBuZXZlciBiZVxuICogdHJhbnNmZXJyZWQgYXdheSBmcm9tIHRoaXMgcHJvY2VzcyBvdmVyIGFueSBwcm9taXNlXG4gKiBjb21tdW5pY2F0aW9uIGNoYW5uZWwuXG4gKiBAcGFyYW0gb2JqZWN0XG4gKiBAcmV0dXJucyBwcm9taXNlIGEgd3JhcHBpbmcgb2YgdGhhdCBvYmplY3QgdGhhdFxuICogYWRkaXRpb25hbGx5IHJlc3BvbmRzIHRvIHRoZSBcImlzRGVmXCIgbWVzc2FnZVxuICogd2l0aG91dCBhIHJlamVjdGlvbi5cbiAqL1xuUS5tYXN0ZXIgPSBtYXN0ZXI7XG5mdW5jdGlvbiBtYXN0ZXIob2JqZWN0KSB7XG4gICAgcmV0dXJuIFByb21pc2Uoe1xuICAgICAgICBcImlzRGVmXCI6IGZ1bmN0aW9uICgpIHt9XG4gICAgfSwgZnVuY3Rpb24gZmFsbGJhY2sob3AsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKG9iamVjdCwgb3AsIGFyZ3MpO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFEob2JqZWN0KS5pbnNwZWN0KCk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogU3ByZWFkcyB0aGUgdmFsdWVzIG9mIGEgcHJvbWlzZWQgYXJyYXkgb2YgYXJndW1lbnRzIGludG8gdGhlXG4gKiBmdWxmaWxsbWVudCBjYWxsYmFjay5cbiAqIEBwYXJhbSBmdWxmaWxsZWQgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyB2YXJpYWRpYyBhcmd1bWVudHMgZnJvbSB0aGVcbiAqIHByb21pc2VkIGFycmF5XG4gKiBAcGFyYW0gcmVqZWN0ZWQgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyB0aGUgZXhjZXB0aW9uIGlmIHRoZSBwcm9taXNlXG4gKiBpcyByZWplY3RlZC5cbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZSBvciB0aHJvd24gZXhjZXB0aW9uIG9mXG4gKiBlaXRoZXIgY2FsbGJhY2suXG4gKi9cblEuc3ByZWFkID0gc3ByZWFkO1xuZnVuY3Rpb24gc3ByZWFkKHZhbHVlLCBmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gICAgcmV0dXJuIFEodmFsdWUpLnNwcmVhZChmdWxmaWxsZWQsIHJlamVjdGVkKTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuc3ByZWFkID0gZnVuY3Rpb24gKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgICByZXR1cm4gdGhpcy5hbGwoKS50aGVuKGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICByZXR1cm4gZnVsZmlsbGVkLmFwcGx5KHZvaWQgMCwgYXJyYXkpO1xuICAgIH0sIHJlamVjdGVkKTtcbn07XG5cbi8qKlxuICogVGhlIGFzeW5jIGZ1bmN0aW9uIGlzIGEgZGVjb3JhdG9yIGZvciBnZW5lcmF0b3IgZnVuY3Rpb25zLCB0dXJuaW5nXG4gKiB0aGVtIGludG8gYXN5bmNocm9ub3VzIGdlbmVyYXRvcnMuICBBbHRob3VnaCBnZW5lcmF0b3JzIGFyZSBvbmx5IHBhcnRcbiAqIG9mIHRoZSBuZXdlc3QgRUNNQVNjcmlwdCA2IGRyYWZ0cywgdGhpcyBjb2RlIGRvZXMgbm90IGNhdXNlIHN5bnRheFxuICogZXJyb3JzIGluIG9sZGVyIGVuZ2luZXMuICBUaGlzIGNvZGUgc2hvdWxkIGNvbnRpbnVlIHRvIHdvcmsgYW5kIHdpbGxcbiAqIGluIGZhY3QgaW1wcm92ZSBvdmVyIHRpbWUgYXMgdGhlIGxhbmd1YWdlIGltcHJvdmVzLlxuICpcbiAqIEVTNiBnZW5lcmF0b3JzIGFyZSBjdXJyZW50bHkgcGFydCBvZiBWOCB2ZXJzaW9uIDMuMTkgd2l0aCB0aGVcbiAqIC0taGFybW9ueS1nZW5lcmF0b3JzIHJ1bnRpbWUgZmxhZyBlbmFibGVkLiAgU3BpZGVyTW9ua2V5IGhhcyBoYWQgdGhlbVxuICogZm9yIGxvbmdlciwgYnV0IHVuZGVyIGFuIG9sZGVyIFB5dGhvbi1pbnNwaXJlZCBmb3JtLiAgVGhpcyBmdW5jdGlvblxuICogd29ya3Mgb24gYm90aCBraW5kcyBvZiBnZW5lcmF0b3JzLlxuICpcbiAqIERlY29yYXRlcyBhIGdlbmVyYXRvciBmdW5jdGlvbiBzdWNoIHRoYXQ6XG4gKiAgLSBpdCBtYXkgeWllbGQgcHJvbWlzZXNcbiAqICAtIGV4ZWN1dGlvbiB3aWxsIGNvbnRpbnVlIHdoZW4gdGhhdCBwcm9taXNlIGlzIGZ1bGZpbGxlZFxuICogIC0gdGhlIHZhbHVlIG9mIHRoZSB5aWVsZCBleHByZXNzaW9uIHdpbGwgYmUgdGhlIGZ1bGZpbGxlZCB2YWx1ZVxuICogIC0gaXQgcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWUgKHdoZW4gdGhlIGdlbmVyYXRvclxuICogICAgc3RvcHMgaXRlcmF0aW5nKVxuICogIC0gdGhlIGRlY29yYXRlZCBmdW5jdGlvbiByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZVxuICogICAgb2YgdGhlIGdlbmVyYXRvciBvciB0aGUgZmlyc3QgcmVqZWN0ZWQgcHJvbWlzZSBhbW9uZyB0aG9zZVxuICogICAgeWllbGRlZC5cbiAqICAtIGlmIGFuIGVycm9yIGlzIHRocm93biBpbiB0aGUgZ2VuZXJhdG9yLCBpdCBwcm9wYWdhdGVzIHRocm91Z2hcbiAqICAgIGV2ZXJ5IGZvbGxvd2luZyB5aWVsZCB1bnRpbCBpdCBpcyBjYXVnaHQsIG9yIHVudGlsIGl0IGVzY2FwZXNcbiAqICAgIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gYWx0b2dldGhlciwgYW5kIGlzIHRyYW5zbGF0ZWQgaW50byBhXG4gKiAgICByZWplY3Rpb24gZm9yIHRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZSBkZWNvcmF0ZWQgZ2VuZXJhdG9yLlxuICovXG5RLmFzeW5jID0gYXN5bmM7XG5mdW5jdGlvbiBhc3luYyhtYWtlR2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gd2hlbiB2ZXJiIGlzIFwic2VuZFwiLCBhcmcgaXMgYSB2YWx1ZVxuICAgICAgICAvLyB3aGVuIHZlcmIgaXMgXCJ0aHJvd1wiLCBhcmcgaXMgYW4gZXhjZXB0aW9uXG4gICAgICAgIGZ1bmN0aW9uIGNvbnRpbnVlcih2ZXJiLCBhcmcpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgICAgICAgIC8vIFVudGlsIFY4IDMuMTkgLyBDaHJvbWl1bSAyOSBpcyByZWxlYXNlZCwgU3BpZGVyTW9ua2V5IGlzIHRoZSBvbmx5XG4gICAgICAgICAgICAvLyBlbmdpbmUgdGhhdCBoYXMgYSBkZXBsb3llZCBiYXNlIG9mIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBnZW5lcmF0b3JzLlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgU00ncyBnZW5lcmF0b3JzIHVzZSB0aGUgUHl0aG9uLWluc3BpcmVkIHNlbWFudGljcyBvZlxuICAgICAgICAgICAgLy8gb3V0ZGF0ZWQgRVM2IGRyYWZ0cy4gIFdlIHdvdWxkIGxpa2UgdG8gc3VwcG9ydCBFUzYsIGJ1dCB3ZSdkIGFsc29cbiAgICAgICAgICAgIC8vIGxpa2UgdG8gbWFrZSBpdCBwb3NzaWJsZSB0byB1c2UgZ2VuZXJhdG9ycyBpbiBkZXBsb3llZCBicm93c2Vycywgc29cbiAgICAgICAgICAgIC8vIHdlIGFsc28gc3VwcG9ydCBQeXRob24tc3R5bGUgZ2VuZXJhdG9ycy4gIEF0IHNvbWUgcG9pbnQgd2UgY2FuIHJlbW92ZVxuICAgICAgICAgICAgLy8gdGhpcyBibG9jay5cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBTdG9wSXRlcmF0aW9uID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgLy8gRVM2IEdlbmVyYXRvcnNcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBnZW5lcmF0b3JbdmVyYl0oYXJnKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChleGNlcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFEocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2hlbihyZXN1bHQudmFsdWUsIGNhbGxiYWNrLCBlcnJiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNwaWRlck1vbmtleSBHZW5lcmF0b3JzXG4gICAgICAgICAgICAgICAgLy8gRklYTUU6IFJlbW92ZSB0aGlzIGNhc2Ugd2hlbiBTTSBkb2VzIEVTNiBnZW5lcmF0b3JzLlxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGdlbmVyYXRvclt2ZXJiXShhcmcpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdG9wSXRlcmF0aW9uKGV4Y2VwdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBRKGV4Y2VwdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdoZW4ocmVzdWx0LCBjYWxsYmFjaywgZXJyYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdlbmVyYXRvciA9IG1ha2VHZW5lcmF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gY29udGludWVyLmJpbmQoY29udGludWVyLCBcIm5leHRcIik7XG4gICAgICAgIHZhciBlcnJiYWNrID0gY29udGludWVyLmJpbmQoY29udGludWVyLCBcInRocm93XCIpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIFRoZSBzcGF3biBmdW5jdGlvbiBpcyBhIHNtYWxsIHdyYXBwZXIgYXJvdW5kIGFzeW5jIHRoYXQgaW1tZWRpYXRlbHlcbiAqIGNhbGxzIHRoZSBnZW5lcmF0b3IgYW5kIGFsc28gZW5kcyB0aGUgcHJvbWlzZSBjaGFpbiwgc28gdGhhdCBhbnlcbiAqIHVuaGFuZGxlZCBlcnJvcnMgYXJlIHRocm93biBpbnN0ZWFkIG9mIGZvcndhcmRlZCB0byB0aGUgZXJyb3JcbiAqIGhhbmRsZXIuIFRoaXMgaXMgdXNlZnVsIGJlY2F1c2UgaXQncyBleHRyZW1lbHkgY29tbW9uIHRvIHJ1blxuICogZ2VuZXJhdG9ycyBhdCB0aGUgdG9wLWxldmVsIHRvIHdvcmsgd2l0aCBsaWJyYXJpZXMuXG4gKi9cblEuc3Bhd24gPSBzcGF3bjtcbmZ1bmN0aW9uIHNwYXduKG1ha2VHZW5lcmF0b3IpIHtcbiAgICBRLmRvbmUoUS5hc3luYyhtYWtlR2VuZXJhdG9yKSgpKTtcbn1cblxuLy8gRklYTUU6IFJlbW92ZSB0aGlzIGludGVyZmFjZSBvbmNlIEVTNiBnZW5lcmF0b3JzIGFyZSBpbiBTcGlkZXJNb25rZXkuXG4vKipcbiAqIFRocm93cyBhIFJldHVyblZhbHVlIGV4Y2VwdGlvbiB0byBzdG9wIGFuIGFzeW5jaHJvbm91cyBnZW5lcmF0b3IuXG4gKlxuICogVGhpcyBpbnRlcmZhY2UgaXMgYSBzdG9wLWdhcCBtZWFzdXJlIHRvIHN1cHBvcnQgZ2VuZXJhdG9yIHJldHVyblxuICogdmFsdWVzIGluIG9sZGVyIEZpcmVmb3gvU3BpZGVyTW9ua2V5LiAgSW4gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IEVTNlxuICogZ2VuZXJhdG9ycyBsaWtlIENocm9taXVtIDI5LCBqdXN0IHVzZSBcInJldHVyblwiIGluIHlvdXIgZ2VuZXJhdG9yXG4gKiBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHZhbHVlIHRoZSByZXR1cm4gdmFsdWUgZm9yIHRoZSBzdXJyb3VuZGluZyBnZW5lcmF0b3JcbiAqIEB0aHJvd3MgUmV0dXJuVmFsdWUgZXhjZXB0aW9uIHdpdGggdGhlIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqIC8vIEVTNiBzdHlsZVxuICogUS5hc3luYyhmdW5jdGlvbiogKCkge1xuICogICAgICB2YXIgZm9vID0geWllbGQgZ2V0Rm9vUHJvbWlzZSgpO1xuICogICAgICB2YXIgYmFyID0geWllbGQgZ2V0QmFyUHJvbWlzZSgpO1xuICogICAgICByZXR1cm4gZm9vICsgYmFyO1xuICogfSlcbiAqIC8vIE9sZGVyIFNwaWRlck1vbmtleSBzdHlsZVxuICogUS5hc3luYyhmdW5jdGlvbiAoKSB7XG4gKiAgICAgIHZhciBmb28gPSB5aWVsZCBnZXRGb29Qcm9taXNlKCk7XG4gKiAgICAgIHZhciBiYXIgPSB5aWVsZCBnZXRCYXJQcm9taXNlKCk7XG4gKiAgICAgIFEucmV0dXJuKGZvbyArIGJhcik7XG4gKiB9KVxuICovXG5RW1wicmV0dXJuXCJdID0gX3JldHVybjtcbmZ1bmN0aW9uIF9yZXR1cm4odmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgUVJldHVyblZhbHVlKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGUgcHJvbWlzZWQgZnVuY3Rpb24gZGVjb3JhdG9yIGVuc3VyZXMgdGhhdCBhbnkgcHJvbWlzZSBhcmd1bWVudHNcbiAqIGFyZSBzZXR0bGVkIGFuZCBwYXNzZWQgYXMgdmFsdWVzIChgdGhpc2AgaXMgYWxzbyBzZXR0bGVkIGFuZCBwYXNzZWRcbiAqIGFzIGEgdmFsdWUpLiAgSXQgd2lsbCBhbHNvIGVuc3VyZSB0aGF0IHRoZSByZXN1bHQgb2YgYSBmdW5jdGlvbiBpc1xuICogYWx3YXlzIGEgcHJvbWlzZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogdmFyIGFkZCA9IFEucHJvbWlzZWQoZnVuY3Rpb24gKGEsIGIpIHtcbiAqICAgICByZXR1cm4gYSArIGI7XG4gKiB9KTtcbiAqIGFkZChRKGEpLCBRKEIpKTtcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gZGVjb3JhdGVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gYSBmdW5jdGlvbiB0aGF0IGhhcyBiZWVuIGRlY29yYXRlZC5cbiAqL1xuUS5wcm9taXNlZCA9IHByb21pc2VkO1xuZnVuY3Rpb24gcHJvbWlzZWQoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3ByZWFkKFt0aGlzLCBhbGwoYXJndW1lbnRzKV0sIGZ1bmN0aW9uIChzZWxmLCBhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbi8qKlxuICogc2VuZHMgYSBtZXNzYWdlIHRvIGEgdmFsdWUgaW4gYSBmdXR1cmUgdHVyblxuICogQHBhcmFtIG9iamVjdCogdGhlIHJlY2lwaWVudFxuICogQHBhcmFtIG9wIHRoZSBuYW1lIG9mIHRoZSBtZXNzYWdlIG9wZXJhdGlvbiwgZS5nLiwgXCJ3aGVuXCIsXG4gKiBAcGFyYW0gYXJncyBmdXJ0aGVyIGFyZ3VtZW50cyB0byBiZSBmb3J3YXJkZWQgdG8gdGhlIG9wZXJhdGlvblxuICogQHJldHVybnMgcmVzdWx0IHtQcm9taXNlfSBhIHByb21pc2UgZm9yIHRoZSByZXN1bHQgb2YgdGhlIG9wZXJhdGlvblxuICovXG5RLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG5mdW5jdGlvbiBkaXNwYXRjaChvYmplY3QsIG9wLCBhcmdzKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChvcCwgYXJncyk7XG59XG5cblByb21pc2UucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKG9wLCBhcmdzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgUS5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYucHJvbWlzZURpc3BhdGNoKGRlZmVycmVkLnJlc29sdmUsIG9wLCBhcmdzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBvYmplY3RcbiAqIEBwYXJhbSBuYW1lICAgICAgbmFtZSBvZiBwcm9wZXJ0eSB0byBnZXRcbiAqIEByZXR1cm4gcHJvbWlzZSBmb3IgdGhlIHByb3BlcnR5IHZhbHVlXG4gKi9cblEuZ2V0ID0gZnVuY3Rpb24gKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcImdldFwiLCBba2V5XSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJnZXRcIiwgW2tleV0pO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3Igb2JqZWN0IG9iamVjdFxuICogQHBhcmFtIG5hbWUgICAgICBuYW1lIG9mIHByb3BlcnR5IHRvIHNldFxuICogQHBhcmFtIHZhbHVlICAgICBuZXcgdmFsdWUgb2YgcHJvcGVydHlcbiAqIEByZXR1cm4gcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZVxuICovXG5RLnNldCA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKFwic2V0XCIsIFtrZXksIHZhbHVlXSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKFwic2V0XCIsIFtrZXksIHZhbHVlXSk7XG59O1xuXG4vKipcbiAqIERlbGV0ZXMgYSBwcm9wZXJ0eSBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBvYmplY3RcbiAqIEBwYXJhbSBuYW1lICAgICAgbmFtZSBvZiBwcm9wZXJ0eSB0byBkZWxldGVcbiAqIEByZXR1cm4gcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZVxuICovXG5RLmRlbCA9IC8vIFhYWCBsZWdhY3lcblFbXCJkZWxldGVcIl0gPSBmdW5jdGlvbiAob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKFwiZGVsZXRlXCIsIFtrZXldKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmRlbCA9IC8vIFhYWCBsZWdhY3lcblByb21pc2UucHJvdG90eXBlW1wiZGVsZXRlXCJdID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKFwiZGVsZXRlXCIsIFtrZXldKTtcbn07XG5cbi8qKlxuICogSW52b2tlcyBhIG1ldGhvZCBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBvYmplY3RcbiAqIEBwYXJhbSBuYW1lICAgICAgbmFtZSBvZiBtZXRob2QgdG8gaW52b2tlXG4gKiBAcGFyYW0gdmFsdWUgICAgIGEgdmFsdWUgdG8gcG9zdCwgdHlwaWNhbGx5IGFuIGFycmF5IG9mXG4gKiAgICAgICAgICAgICAgICAgIGludm9jYXRpb24gYXJndW1lbnRzIGZvciBwcm9taXNlcyB0aGF0XG4gKiAgICAgICAgICAgICAgICAgIGFyZSB1bHRpbWF0ZWx5IGJhY2tlZCB3aXRoIGByZXNvbHZlYCB2YWx1ZXMsXG4gKiAgICAgICAgICAgICAgICAgIGFzIG9wcG9zZWQgdG8gdGhvc2UgYmFja2VkIHdpdGggVVJMc1xuICogICAgICAgICAgICAgICAgICB3aGVyZWluIHRoZSBwb3N0ZWQgdmFsdWUgY2FuIGJlIGFueVxuICogICAgICAgICAgICAgICAgICBKU09OIHNlcmlhbGl6YWJsZSBvYmplY3QuXG4gKiBAcmV0dXJuIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWVcbiAqL1xuLy8gYm91bmQgbG9jYWxseSBiZWNhdXNlIGl0IGlzIHVzZWQgYnkgb3RoZXIgbWV0aG9kc1xuUS5tYXBwbHkgPSAvLyBYWFggQXMgcHJvcG9zZWQgYnkgXCJSZWRzYW5kcm9cIlxuUS5wb3N0ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgYXJncykge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJwb3N0XCIsIFtuYW1lLCBhcmdzXSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5tYXBwbHkgPSAvLyBYWFggQXMgcHJvcG9zZWQgYnkgXCJSZWRzYW5kcm9cIlxuUHJvbWlzZS5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChuYW1lLCBhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJwb3N0XCIsIFtuYW1lLCBhcmdzXSk7XG59O1xuXG4vKipcbiAqIEludm9rZXMgYSBtZXRob2QgaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgb2JqZWN0XG4gKiBAcGFyYW0gbmFtZSAgICAgIG5hbWUgb2YgbWV0aG9kIHRvIGludm9rZVxuICogQHBhcmFtIC4uLmFyZ3MgICBhcnJheSBvZiBpbnZvY2F0aW9uIGFyZ3VtZW50c1xuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlXG4gKi9cblEuc2VuZCA9IC8vIFhYWCBNYXJrIE1pbGxlcidzIHByb3Bvc2VkIHBhcmxhbmNlXG5RLm1jYWxsID0gLy8gWFhYIEFzIHByb3Bvc2VkIGJ5IFwiUmVkc2FuZHJvXCJcblEuaW52b2tlID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSAvKi4uLmFyZ3MqLykge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJwb3N0XCIsIFtuYW1lLCBhcnJheV9zbGljZShhcmd1bWVudHMsIDIpXSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5zZW5kID0gLy8gWFhYIE1hcmsgTWlsbGVyJ3MgcHJvcG9zZWQgcGFybGFuY2VcblByb21pc2UucHJvdG90eXBlLm1jYWxsID0gLy8gWFhYIEFzIHByb3Bvc2VkIGJ5IFwiUmVkc2FuZHJvXCJcblByb21pc2UucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uIChuYW1lIC8qLi4uYXJncyovKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJwb3N0XCIsIFtuYW1lLCBhcnJheV9zbGljZShhcmd1bWVudHMsIDEpXSk7XG59O1xuXG4vKipcbiAqIEFwcGxpZXMgdGhlIHByb21pc2VkIGZ1bmN0aW9uIGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IGZ1bmN0aW9uXG4gKiBAcGFyYW0gYXJncyAgICAgIGFycmF5IG9mIGFwcGxpY2F0aW9uIGFyZ3VtZW50c1xuICovXG5RLmZhcHBseSA9IGZ1bmN0aW9uIChvYmplY3QsIGFyZ3MpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKFwiYXBwbHlcIiwgW3ZvaWQgMCwgYXJnc10pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZmFwcGx5ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcImFwcGx5XCIsIFt2b2lkIDAsIGFyZ3NdKTtcbn07XG5cbi8qKlxuICogQ2FsbHMgdGhlIHByb21pc2VkIGZ1bmN0aW9uIGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IGZ1bmN0aW9uXG4gKiBAcGFyYW0gLi4uYXJncyAgIGFycmF5IG9mIGFwcGxpY2F0aW9uIGFyZ3VtZW50c1xuICovXG5RW1widHJ5XCJdID1cblEuZmNhbGwgPSBmdW5jdGlvbiAob2JqZWN0IC8qIC4uLmFyZ3MqLykge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJhcHBseVwiLCBbdm9pZCAwLCBhcnJheV9zbGljZShhcmd1bWVudHMsIDEpXSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5mY2FsbCA9IGZ1bmN0aW9uICgvKi4uLmFyZ3MqLykge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKFwiYXBwbHlcIiwgW3ZvaWQgMCwgYXJyYXlfc2xpY2UoYXJndW1lbnRzKV0pO1xufTtcblxuLyoqXG4gKiBCaW5kcyB0aGUgcHJvbWlzZWQgZnVuY3Rpb24sIHRyYW5zZm9ybWluZyByZXR1cm4gdmFsdWVzIGludG8gYSBmdWxmaWxsZWRcbiAqIHByb21pc2UgYW5kIHRocm93biBlcnJvcnMgaW50byBhIHJlamVjdGVkIG9uZS5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgZnVuY3Rpb25cbiAqIEBwYXJhbSAuLi5hcmdzICAgYXJyYXkgb2YgYXBwbGljYXRpb24gYXJndW1lbnRzXG4gKi9cblEuZmJpbmQgPSBmdW5jdGlvbiAob2JqZWN0IC8qLi4uYXJncyovKSB7XG4gICAgdmFyIHByb21pc2UgPSBRKG9iamVjdCk7XG4gICAgdmFyIGFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiBmYm91bmQoKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlLmRpc3BhdGNoKFwiYXBwbHlcIiwgW1xuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGFyZ3MuY29uY2F0KGFycmF5X3NsaWNlKGFyZ3VtZW50cykpXG4gICAgICAgIF0pO1xuICAgIH07XG59O1xuUHJvbWlzZS5wcm90b3R5cGUuZmJpbmQgPSBmdW5jdGlvbiAoLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgdmFyIGFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMpO1xuICAgIHJldHVybiBmdW5jdGlvbiBmYm91bmQoKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlLmRpc3BhdGNoKFwiYXBwbHlcIiwgW1xuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGFyZ3MuY29uY2F0KGFycmF5X3NsaWNlKGFyZ3VtZW50cykpXG4gICAgICAgIF0pO1xuICAgIH07XG59O1xuXG4vKipcbiAqIFJlcXVlc3RzIHRoZSBuYW1lcyBvZiB0aGUgb3duZWQgcHJvcGVydGllcyBvZiBhIHByb21pc2VkXG4gKiBvYmplY3QgaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgb2JqZWN0XG4gKiBAcmV0dXJuIHByb21pc2UgZm9yIHRoZSBrZXlzIG9mIHRoZSBldmVudHVhbGx5IHNldHRsZWQgb2JqZWN0XG4gKi9cblEua2V5cyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKFwia2V5c1wiLCBbXSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKFwia2V5c1wiLCBbXSk7XG59O1xuXG4vKipcbiAqIFR1cm5zIGFuIGFycmF5IG9mIHByb21pc2VzIGludG8gYSBwcm9taXNlIGZvciBhbiBhcnJheS4gIElmIGFueSBvZlxuICogdGhlIHByb21pc2VzIGdldHMgcmVqZWN0ZWQsIHRoZSB3aG9sZSBhcnJheSBpcyByZWplY3RlZCBpbW1lZGlhdGVseS5cbiAqIEBwYXJhbSB7QXJyYXkqfSBhbiBhcnJheSAob3IgcHJvbWlzZSBmb3IgYW4gYXJyYXkpIG9mIHZhbHVlcyAob3JcbiAqIHByb21pc2VzIGZvciB2YWx1ZXMpXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIGFuIGFycmF5IG9mIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlc1xuICovXG4vLyBCeSBNYXJrIE1pbGxlclxuLy8gaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9c3RyYXdtYW46Y29uY3VycmVuY3kmcmV2PTEzMDg3NzY1MjEjYWxsZnVsZmlsbGVkXG5RLmFsbCA9IGFsbDtcbmZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICAgIHJldHVybiB3aGVuKHByb21pc2VzLCBmdW5jdGlvbiAocHJvbWlzZXMpIHtcbiAgICAgICAgdmFyIHBlbmRpbmdDb3VudCA9IDA7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgICAgIGFycmF5X3JlZHVjZShwcm9taXNlcywgZnVuY3Rpb24gKHVuZGVmaW5lZCwgcHJvbWlzZSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzbmFwc2hvdDtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBpc1Byb21pc2UocHJvbWlzZSkgJiZcbiAgICAgICAgICAgICAgICAoc25hcHNob3QgPSBwcm9taXNlLmluc3BlY3QoKSkuc3RhdGUgPT09IFwiZnVsZmlsbGVkXCJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHByb21pc2VzW2luZGV4XSA9IHNuYXBzaG90LnZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICArK3BlbmRpbmdDb3VudDtcbiAgICAgICAgICAgICAgICB3aGVuKFxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0tcGVuZGluZ0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShwcm9taXNlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5ub3RpZnkoeyBpbmRleDogaW5kZXgsIHZhbHVlOiBwcm9ncmVzcyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHZvaWQgMCk7XG4gICAgICAgIGlmIChwZW5kaW5nQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocHJvbWlzZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH0pO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5hbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgcmVzb2x2ZWQgcHJvbWlzZSBvZiBhbiBhcnJheS4gUHJpb3IgcmVqZWN0ZWQgcHJvbWlzZXMgYXJlXG4gKiBpZ25vcmVkLiAgUmVqZWN0cyBvbmx5IGlmIGFsbCBwcm9taXNlcyBhcmUgcmVqZWN0ZWQuXG4gKiBAcGFyYW0ge0FycmF5Kn0gYW4gYXJyYXkgY29udGFpbmluZyB2YWx1ZXMgb3IgcHJvbWlzZXMgZm9yIHZhbHVlc1xuICogQHJldHVybnMgYSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgcmVzb2x2ZWQgcHJvbWlzZSxcbiAqIG9yIGEgcmVqZWN0ZWQgcHJvbWlzZSBpZiBhbGwgcHJvbWlzZXMgYXJlIHJlamVjdGVkLlxuICovXG5RLmFueSA9IGFueTtcblxuZnVuY3Rpb24gYW55KHByb21pc2VzKSB7XG4gICAgaWYgKHByb21pc2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gUS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIHZhciBwZW5kaW5nQ291bnQgPSAwO1xuICAgIGFycmF5X3JlZHVjZShwcm9taXNlcywgZnVuY3Rpb24gKHByZXYsIGN1cnJlbnQsIGluZGV4KSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gcHJvbWlzZXNbaW5kZXhdO1xuXG4gICAgICAgIHBlbmRpbmdDb3VudCsrO1xuXG4gICAgICAgIHdoZW4ocHJvbWlzZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MpO1xuICAgICAgICBmdW5jdGlvbiBvbkZ1bGZpbGxlZChyZXN1bHQpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvblJlamVjdGVkKGVycikge1xuICAgICAgICAgICAgcGVuZGluZ0NvdW50LS07XG4gICAgICAgICAgICBpZiAocGVuZGluZ0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPSAoXCJRIGNhbid0IGdldCBmdWxmaWxsbWVudCB2YWx1ZSBmcm9tIGFueSBwcm9taXNlLCBhbGwgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInByb21pc2VzIHdlcmUgcmVqZWN0ZWQuIExhc3QgZXJyb3IgbWVzc2FnZTogXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb25Qcm9ncmVzcyhwcm9ncmVzcykge1xuICAgICAgICAgICAgZGVmZXJyZWQubm90aWZ5KHtcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHByb2dyZXNzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHVuZGVmaW5lZCk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuYW55ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhbnkodGhpcyk7XG59O1xuXG4vKipcbiAqIFdhaXRzIGZvciBhbGwgcHJvbWlzZXMgdG8gYmUgc2V0dGxlZCwgZWl0aGVyIGZ1bGZpbGxlZCBvclxuICogcmVqZWN0ZWQuICBUaGlzIGlzIGRpc3RpbmN0IGZyb20gYGFsbGAgc2luY2UgdGhhdCB3b3VsZCBzdG9wXG4gKiB3YWl0aW5nIGF0IHRoZSBmaXJzdCByZWplY3Rpb24uICBUaGUgcHJvbWlzZSByZXR1cm5lZCBieVxuICogYGFsbFJlc29sdmVkYCB3aWxsIG5ldmVyIGJlIHJlamVjdGVkLlxuICogQHBhcmFtIHByb21pc2VzIGEgcHJvbWlzZSBmb3IgYW4gYXJyYXkgKG9yIGFuIGFycmF5KSBvZiBwcm9taXNlc1xuICogKG9yIHZhbHVlcylcbiAqIEByZXR1cm4gYSBwcm9taXNlIGZvciBhbiBhcnJheSBvZiBwcm9taXNlc1xuICovXG5RLmFsbFJlc29sdmVkID0gZGVwcmVjYXRlKGFsbFJlc29sdmVkLCBcImFsbFJlc29sdmVkXCIsIFwiYWxsU2V0dGxlZFwiKTtcbmZ1bmN0aW9uIGFsbFJlc29sdmVkKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIHdoZW4ocHJvbWlzZXMsIGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgICAgICBwcm9taXNlcyA9IGFycmF5X21hcChwcm9taXNlcywgUSk7XG4gICAgICAgIHJldHVybiB3aGVuKGFsbChhcnJheV9tYXAocHJvbWlzZXMsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gd2hlbihwcm9taXNlLCBub29wLCBub29wKTtcbiAgICAgICAgfSkpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZXM7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5hbGxSZXNvbHZlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYWxsUmVzb2x2ZWQodGhpcyk7XG59O1xuXG4vKipcbiAqIEBzZWUgUHJvbWlzZSNhbGxTZXR0bGVkXG4gKi9cblEuYWxsU2V0dGxlZCA9IGFsbFNldHRsZWQ7XG5mdW5jdGlvbiBhbGxTZXR0bGVkKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIFEocHJvbWlzZXMpLmFsbFNldHRsZWQoKTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBhcnJheSBvZiBwcm9taXNlcyBpbnRvIGEgcHJvbWlzZSBmb3IgYW4gYXJyYXkgb2YgdGhlaXIgc3RhdGVzIChhc1xuICogcmV0dXJuZWQgYnkgYGluc3BlY3RgKSB3aGVuIHRoZXkgaGF2ZSBhbGwgc2V0dGxlZC5cbiAqIEBwYXJhbSB7QXJyYXlbQW55Kl19IHZhbHVlcyBhbiBhcnJheSAob3IgcHJvbWlzZSBmb3IgYW4gYXJyYXkpIG9mIHZhbHVlcyAob3JcbiAqIHByb21pc2VzIGZvciB2YWx1ZXMpXG4gKiBAcmV0dXJucyB7QXJyYXlbU3RhdGVdfSBhbiBhcnJheSBvZiBzdGF0ZXMgZm9yIHRoZSByZXNwZWN0aXZlIHZhbHVlcy5cbiAqL1xuUHJvbWlzZS5wcm90b3R5cGUuYWxsU2V0dGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgICAgICByZXR1cm4gYWxsKGFycmF5X21hcChwcm9taXNlcywgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgICAgIHByb21pc2UgPSBRKHByb21pc2UpO1xuICAgICAgICAgICAgZnVuY3Rpb24gcmVnYXJkbGVzcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZS5pbnNwZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHJlZ2FyZGxlc3MsIHJlZ2FyZGxlc3MpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIENhcHR1cmVzIHRoZSBmYWlsdXJlIG9mIGEgcHJvbWlzZSwgZ2l2aW5nIGFuIG9wb3J0dW5pdHkgdG8gcmVjb3ZlclxuICogd2l0aCBhIGNhbGxiYWNrLiAgSWYgdGhlIGdpdmVuIHByb21pc2UgaXMgZnVsZmlsbGVkLCB0aGUgcmV0dXJuZWRcbiAqIHByb21pc2UgaXMgZnVsZmlsbGVkLlxuICogQHBhcmFtIHtBbnkqfSBwcm9taXNlIGZvciBzb21ldGhpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRvIGZ1bGZpbGwgdGhlIHJldHVybmVkIHByb21pc2UgaWYgdGhlXG4gKiBnaXZlbiBwcm9taXNlIGlzIHJlamVjdGVkXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGNhbGxiYWNrXG4gKi9cblEuZmFpbCA9IC8vIFhYWCBsZWdhY3lcblFbXCJjYXRjaFwiXSA9IGZ1bmN0aW9uIChvYmplY3QsIHJlamVjdGVkKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS50aGVuKHZvaWQgMCwgcmVqZWN0ZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZmFpbCA9IC8vIFhYWCBsZWdhY3lcblByb21pc2UucHJvdG90eXBlW1wiY2F0Y2hcIl0gPSBmdW5jdGlvbiAocmVqZWN0ZWQpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZvaWQgMCwgcmVqZWN0ZWQpO1xufTtcblxuLyoqXG4gKiBBdHRhY2hlcyBhIGxpc3RlbmVyIHRoYXQgY2FuIHJlc3BvbmQgdG8gcHJvZ3Jlc3Mgbm90aWZpY2F0aW9ucyBmcm9tIGFcbiAqIHByb21pc2UncyBvcmlnaW5hdGluZyBkZWZlcnJlZC4gVGhpcyBsaXN0ZW5lciByZWNlaXZlcyB0aGUgZXhhY3QgYXJndW1lbnRzXG4gKiBwYXNzZWQgdG8gYGBkZWZlcnJlZC5ub3RpZnlgYC5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZSBmb3Igc29tZXRoaW5nXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0byByZWNlaXZlIGFueSBwcm9ncmVzcyBub3RpZmljYXRpb25zXG4gKiBAcmV0dXJucyB0aGUgZ2l2ZW4gcHJvbWlzZSwgdW5jaGFuZ2VkXG4gKi9cblEucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbmZ1bmN0aW9uIHByb2dyZXNzKG9iamVjdCwgcHJvZ3Jlc3NlZCkge1xuICAgIHJldHVybiBRKG9iamVjdCkudGhlbih2b2lkIDAsIHZvaWQgMCwgcHJvZ3Jlc3NlZCk7XG59XG5cblByb21pc2UucHJvdG90eXBlLnByb2dyZXNzID0gZnVuY3Rpb24gKHByb2dyZXNzZWQpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZvaWQgMCwgdm9pZCAwLCBwcm9ncmVzc2VkKTtcbn07XG5cbi8qKlxuICogUHJvdmlkZXMgYW4gb3Bwb3J0dW5pdHkgdG8gb2JzZXJ2ZSB0aGUgc2V0dGxpbmcgb2YgYSBwcm9taXNlLFxuICogcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBwcm9taXNlIGlzIGZ1bGZpbGxlZCBvciByZWplY3RlZC4gIEZvcndhcmRzXG4gKiB0aGUgcmVzb2x1dGlvbiB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aGVuIHRoZSBjYWxsYmFjayBpcyBkb25lLlxuICogVGhlIGNhbGxiYWNrIGNhbiByZXR1cm4gYSBwcm9taXNlIHRvIGRlZmVyIGNvbXBsZXRpb24uXG4gKiBAcGFyYW0ge0FueSp9IHByb21pc2VcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRvIG9ic2VydmUgdGhlIHJlc29sdXRpb24gb2YgdGhlIGdpdmVuXG4gKiBwcm9taXNlLCB0YWtlcyBubyBhcmd1bWVudHMuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBnaXZlbiBwcm9taXNlIHdoZW5cbiAqIGBgZmluYGAgaXMgZG9uZS5cbiAqL1xuUS5maW4gPSAvLyBYWFggbGVnYWN5XG5RW1wiZmluYWxseVwiXSA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KVtcImZpbmFsbHlcIl0oY2FsbGJhY2spO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZmluID0gLy8gWFhYIGxlZ2FjeVxuUHJvbWlzZS5wcm90b3R5cGVbXCJmaW5hbGx5XCJdID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjayB8fCB0eXBlb2YgY2FsbGJhY2suYXBwbHkgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJRIGNhbid0IGFwcGx5IGZpbmFsbHkgY2FsbGJhY2tcIik7XG4gICAgfVxuICAgIGNhbGxiYWNrID0gUShjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmZjYWxsKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgLy8gVE9ETyBhdHRlbXB0IHRvIHJlY3ljbGUgdGhlIHJlamVjdGlvbiB3aXRoIFwidGhpc1wiLlxuICAgICAgICByZXR1cm4gY2FsbGJhY2suZmNhbGwoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFRlcm1pbmF0ZXMgYSBjaGFpbiBvZiBwcm9taXNlcywgZm9yY2luZyByZWplY3Rpb25zIHRvIGJlXG4gKiB0aHJvd24gYXMgZXhjZXB0aW9ucy5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZSBhdCB0aGUgZW5kIG9mIGEgY2hhaW4gb2YgcHJvbWlzZXNcbiAqIEByZXR1cm5zIG5vdGhpbmdcbiAqL1xuUS5kb25lID0gZnVuY3Rpb24gKG9iamVjdCwgZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRvbmUoZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uIChmdWxmaWxsZWQsIHJlamVjdGVkLCBwcm9ncmVzcykge1xuICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIC8vIGZvcndhcmQgdG8gYSBmdXR1cmUgdHVybiBzbyB0aGF0IGBgd2hlbmBgXG4gICAgICAgIC8vIGRvZXMgbm90IGNhdGNoIGl0IGFuZCB0dXJuIGl0IGludG8gYSByZWplY3Rpb24uXG4gICAgICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbWFrZVN0YWNrVHJhY2VMb25nKGVycm9yLCBwcm9taXNlKTtcbiAgICAgICAgICAgIGlmIChRLm9uZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBRLm9uZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IGBuZXh0VGlja2BpbmcgdmlhIGFuIHVubmVjZXNzYXJ5IGB3aGVuYC5cbiAgICB2YXIgcHJvbWlzZSA9IGZ1bGZpbGxlZCB8fCByZWplY3RlZCB8fCBwcm9ncmVzcyA/XG4gICAgICAgIHRoaXMudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkLCBwcm9ncmVzcykgOlxuICAgICAgICB0aGlzO1xuXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MgJiYgcHJvY2Vzcy5kb21haW4pIHtcbiAgICAgICAgb25VbmhhbmRsZWRFcnJvciA9IHByb2Nlc3MuZG9tYWluLmJpbmQob25VbmhhbmRsZWRFcnJvcik7XG4gICAgfVxuXG4gICAgcHJvbWlzZS50aGVuKHZvaWQgMCwgb25VbmhhbmRsZWRFcnJvcik7XG59O1xuXG4vKipcbiAqIENhdXNlcyBhIHByb21pc2UgdG8gYmUgcmVqZWN0ZWQgaWYgaXQgZG9lcyBub3QgZ2V0IGZ1bGZpbGxlZCBiZWZvcmVcbiAqIHNvbWUgbWlsbGlzZWNvbmRzIHRpbWUgb3V0LlxuICogQHBhcmFtIHtBbnkqfSBwcm9taXNlXG4gKiBAcGFyYW0ge051bWJlcn0gbWlsbGlzZWNvbmRzIHRpbWVvdXRcbiAqIEBwYXJhbSB7QW55Kn0gY3VzdG9tIGVycm9yIG1lc3NhZ2Ugb3IgRXJyb3Igb2JqZWN0IChvcHRpb25hbClcbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHJlc29sdXRpb24gb2YgdGhlIGdpdmVuIHByb21pc2UgaWYgaXQgaXNcbiAqIGZ1bGZpbGxlZCBiZWZvcmUgdGhlIHRpbWVvdXQsIG90aGVyd2lzZSByZWplY3RlZC5cbiAqL1xuUS50aW1lb3V0ID0gZnVuY3Rpb24gKG9iamVjdCwgbXMsIGVycm9yKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS50aW1lb3V0KG1zLCBlcnJvcik7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gKG1zLCBlcnJvcikge1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdmFyIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWVycm9yIHx8IFwic3RyaW5nXCIgPT09IHR5cGVvZiBlcnJvcikge1xuICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZXJyb3IgfHwgXCJUaW1lZCBvdXQgYWZ0ZXIgXCIgKyBtcyArIFwiIG1zXCIpO1xuICAgICAgICAgICAgZXJyb3IuY29kZSA9IFwiRVRJTUVET1VUXCI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICB9LCBtcyk7XG5cbiAgICB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiAoZXhjZXB0aW9uKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXhjZXB0aW9uKTtcbiAgICB9LCBkZWZlcnJlZC5ub3RpZnkpO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgZ2l2ZW4gdmFsdWUgKG9yIHByb21pc2VkIHZhbHVlKSwgc29tZVxuICogbWlsbGlzZWNvbmRzIGFmdGVyIGl0IHJlc29sdmVkLiBQYXNzZXMgcmVqZWN0aW9ucyBpbW1lZGlhdGVseS5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZVxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbGxpc2Vjb25kc1xuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgZ2l2ZW4gcHJvbWlzZSBhZnRlciBtaWxsaXNlY29uZHNcbiAqIHRpbWUgaGFzIGVsYXBzZWQgc2luY2UgdGhlIHJlc29sdXRpb24gb2YgdGhlIGdpdmVuIHByb21pc2UuXG4gKiBJZiB0aGUgZ2l2ZW4gcHJvbWlzZSByZWplY3RzLCB0aGF0IGlzIHBhc3NlZCBpbW1lZGlhdGVseS5cbiAqL1xuUS5kZWxheSA9IGZ1bmN0aW9uIChvYmplY3QsIHRpbWVvdXQpIHtcbiAgICBpZiAodGltZW91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRpbWVvdXQgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kZWxheSh0aW1lb3V0KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmRlbGF5ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodmFsdWUpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFBhc3NlcyBhIGNvbnRpbnVhdGlvbiB0byBhIE5vZGUgZnVuY3Rpb24sIHdoaWNoIGlzIGNhbGxlZCB3aXRoIHRoZSBnaXZlblxuICogYXJndW1lbnRzIHByb3ZpZGVkIGFzIGFuIGFycmF5LCBhbmQgcmV0dXJucyBhIHByb21pc2UuXG4gKlxuICogICAgICBRLm5mYXBwbHkoRlMucmVhZEZpbGUsIFtfX2ZpbGVuYW1lXSlcbiAqICAgICAgLnRoZW4oZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAqICAgICAgfSlcbiAqXG4gKi9cblEubmZhcHBseSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYXJncykge1xuICAgIHJldHVybiBRKGNhbGxiYWNrKS5uZmFwcGx5KGFyZ3MpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubmZhcHBseSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICB2YXIgbm9kZUFyZ3MgPSBhcnJheV9zbGljZShhcmdzKTtcbiAgICBub2RlQXJncy5wdXNoKGRlZmVycmVkLm1ha2VOb2RlUmVzb2x2ZXIoKSk7XG4gICAgdGhpcy5mYXBwbHkobm9kZUFyZ3MpLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogUGFzc2VzIGEgY29udGludWF0aW9uIHRvIGEgTm9kZSBmdW5jdGlvbiwgd2hpY2ggaXMgY2FsbGVkIHdpdGggdGhlIGdpdmVuXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgaW5kaXZpZHVhbGx5LCBhbmQgcmV0dXJucyBhIHByb21pc2UuXG4gKiBAZXhhbXBsZVxuICogUS5uZmNhbGwoRlMucmVhZEZpbGUsIF9fZmlsZW5hbWUpXG4gKiAudGhlbihmdW5jdGlvbiAoY29udGVudCkge1xuICogfSlcbiAqXG4gKi9cblEubmZjYWxsID0gZnVuY3Rpb24gKGNhbGxiYWNrIC8qLi4uYXJncyovKSB7XG4gICAgdmFyIGFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBRKGNhbGxiYWNrKS5uZmFwcGx5KGFyZ3MpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubmZjYWxsID0gZnVuY3Rpb24gKC8qLi4uYXJncyovKSB7XG4gICAgdmFyIG5vZGVBcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzKTtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIG5vZGVBcmdzLnB1c2goZGVmZXJyZWQubWFrZU5vZGVSZXNvbHZlcigpKTtcbiAgICB0aGlzLmZhcHBseShub2RlQXJncykuZmFpbChkZWZlcnJlZC5yZWplY3QpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBXcmFwcyBhIE5vZGVKUyBjb250aW51YXRpb24gcGFzc2luZyBmdW5jdGlvbiBhbmQgcmV0dXJucyBhbiBlcXVpdmFsZW50XG4gKiB2ZXJzaW9uIHRoYXQgcmV0dXJucyBhIHByb21pc2UuXG4gKiBAZXhhbXBsZVxuICogUS5uZmJpbmQoRlMucmVhZEZpbGUsIF9fZmlsZW5hbWUpKFwidXRmLThcIilcbiAqIC50aGVuKGNvbnNvbGUubG9nKVxuICogLmRvbmUoKVxuICovXG5RLm5mYmluZCA9XG5RLmRlbm9kZWlmeSA9IGZ1bmN0aW9uIChjYWxsYmFjayAvKi4uLmFyZ3MqLykge1xuICAgIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlEgY2FuJ3Qgd3JhcCBhbiB1bmRlZmluZWQgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIHZhciBiYXNlQXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vZGVBcmdzID0gYmFzZUFyZ3MuY29uY2F0KGFycmF5X3NsaWNlKGFyZ3VtZW50cykpO1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgICAgICBub2RlQXJncy5wdXNoKGRlZmVycmVkLm1ha2VOb2RlUmVzb2x2ZXIoKSk7XG4gICAgICAgIFEoY2FsbGJhY2spLmZhcHBseShub2RlQXJncykuZmFpbChkZWZlcnJlZC5yZWplY3QpO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubmZiaW5kID1cblByb21pc2UucHJvdG90eXBlLmRlbm9kZWlmeSA9IGZ1bmN0aW9uICgvKi4uLmFyZ3MqLykge1xuICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgcmV0dXJuIFEuZGVub2RlaWZ5LmFwcGx5KHZvaWQgMCwgYXJncyk7XG59O1xuXG5RLm5iaW5kID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0aGlzcCAvKi4uLmFyZ3MqLykge1xuICAgIHZhciBiYXNlQXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vZGVBcmdzID0gYmFzZUFyZ3MuY29uY2F0KGFycmF5X3NsaWNlKGFyZ3VtZW50cykpO1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgICAgICBub2RlQXJncy5wdXNoKGRlZmVycmVkLm1ha2VOb2RlUmVzb2x2ZXIoKSk7XG4gICAgICAgIGZ1bmN0aW9uIGJvdW5kKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHRoaXNwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIFEoYm91bmQpLmZhcHBseShub2RlQXJncykuZmFpbChkZWZlcnJlZC5yZWplY3QpO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubmJpbmQgPSBmdW5jdGlvbiAoLyp0aGlzcCwgLi4uYXJncyovKSB7XG4gICAgdmFyIGFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDApO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICByZXR1cm4gUS5uYmluZC5hcHBseSh2b2lkIDAsIGFyZ3MpO1xufTtcblxuLyoqXG4gKiBDYWxscyBhIG1ldGhvZCBvZiBhIE5vZGUtc3R5bGUgb2JqZWN0IHRoYXQgYWNjZXB0cyBhIE5vZGUtc3R5bGVcbiAqIGNhbGxiYWNrIHdpdGggYSBnaXZlbiBhcnJheSBvZiBhcmd1bWVudHMsIHBsdXMgYSBwcm92aWRlZCBjYWxsYmFjay5cbiAqIEBwYXJhbSBvYmplY3QgYW4gb2JqZWN0IHRoYXQgaGFzIHRoZSBuYW1lZCBtZXRob2RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIG1ldGhvZCBvZiBvYmplY3RcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIG1ldGhvZDsgdGhlIGNhbGxiYWNrXG4gKiB3aWxsIGJlIHByb3ZpZGVkIGJ5IFEgYW5kIGFwcGVuZGVkIHRvIHRoZXNlIGFyZ3VtZW50cy5cbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9yIGVycm9yXG4gKi9cblEubm1hcHBseSA9IC8vIFhYWCBBcyBwcm9wb3NlZCBieSBcIlJlZHNhbmRyb1wiXG5RLm5wb3N0ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgYXJncykge1xuICAgIHJldHVybiBRKG9iamVjdCkubnBvc3QobmFtZSwgYXJncyk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5ubWFwcGx5ID0gLy8gWFhYIEFzIHByb3Bvc2VkIGJ5IFwiUmVkc2FuZHJvXCJcblByb21pc2UucHJvdG90eXBlLm5wb3N0ID0gZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgICB2YXIgbm9kZUFyZ3MgPSBhcnJheV9zbGljZShhcmdzIHx8IFtdKTtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIG5vZGVBcmdzLnB1c2goZGVmZXJyZWQubWFrZU5vZGVSZXNvbHZlcigpKTtcbiAgICB0aGlzLmRpc3BhdGNoKFwicG9zdFwiLCBbbmFtZSwgbm9kZUFyZ3NdKS5mYWlsKGRlZmVycmVkLnJlamVjdCk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIENhbGxzIGEgbWV0aG9kIG9mIGEgTm9kZS1zdHlsZSBvYmplY3QgdGhhdCBhY2NlcHRzIGEgTm9kZS1zdHlsZVxuICogY2FsbGJhY2ssIGZvcndhcmRpbmcgdGhlIGdpdmVuIHZhcmlhZGljIGFyZ3VtZW50cywgcGx1cyBhIHByb3ZpZGVkXG4gKiBjYWxsYmFjayBhcmd1bWVudC5cbiAqIEBwYXJhbSBvYmplY3QgYW4gb2JqZWN0IHRoYXQgaGFzIHRoZSBuYW1lZCBtZXRob2RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIG1ldGhvZCBvZiBvYmplY3RcbiAqIEBwYXJhbSAuLi5hcmdzIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBtZXRob2Q7IHRoZSBjYWxsYmFjayB3aWxsXG4gKiBiZSBwcm92aWRlZCBieSBRIGFuZCBhcHBlbmRlZCB0byB0aGVzZSBhcmd1bWVudHMuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSB2YWx1ZSBvciBlcnJvclxuICovXG5RLm5zZW5kID0gLy8gWFhYIEJhc2VkIG9uIE1hcmsgTWlsbGVyJ3MgcHJvcG9zZWQgXCJzZW5kXCJcblEubm1jYWxsID0gLy8gWFhYIEJhc2VkIG9uIFwiUmVkc2FuZHJvJ3NcIiBwcm9wb3NhbFxuUS5uaW52b2tlID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSAvKi4uLmFyZ3MqLykge1xuICAgIHZhciBub2RlQXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMik7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBub2RlQXJncy5wdXNoKGRlZmVycmVkLm1ha2VOb2RlUmVzb2x2ZXIoKSk7XG4gICAgUShvYmplY3QpLmRpc3BhdGNoKFwicG9zdFwiLCBbbmFtZSwgbm9kZUFyZ3NdKS5mYWlsKGRlZmVycmVkLnJlamVjdCk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5uc2VuZCA9IC8vIFhYWCBCYXNlZCBvbiBNYXJrIE1pbGxlcidzIHByb3Bvc2VkIFwic2VuZFwiXG5Qcm9taXNlLnByb3RvdHlwZS5ubWNhbGwgPSAvLyBYWFggQmFzZWQgb24gXCJSZWRzYW5kcm8nc1wiIHByb3Bvc2FsXG5Qcm9taXNlLnByb3RvdHlwZS5uaW52b2tlID0gZnVuY3Rpb24gKG5hbWUgLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgbm9kZUFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDEpO1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgIHRoaXMuZGlzcGF0Y2goXCJwb3N0XCIsIFtuYW1lLCBub2RlQXJnc10pLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogSWYgYSBmdW5jdGlvbiB3b3VsZCBsaWtlIHRvIHN1cHBvcnQgYm90aCBOb2RlIGNvbnRpbnVhdGlvbi1wYXNzaW5nLXN0eWxlIGFuZFxuICogcHJvbWlzZS1yZXR1cm5pbmctc3R5bGUsIGl0IGNhbiBlbmQgaXRzIGludGVybmFsIHByb21pc2UgY2hhaW4gd2l0aFxuICogYG5vZGVpZnkobm9kZWJhY2spYCwgZm9yd2FyZGluZyB0aGUgb3B0aW9uYWwgbm9kZWJhY2sgYXJndW1lbnQuICBJZiB0aGUgdXNlclxuICogZWxlY3RzIHRvIHVzZSBhIG5vZGViYWNrLCB0aGUgcmVzdWx0IHdpbGwgYmUgc2VudCB0aGVyZS4gIElmIHRoZXkgZG8gbm90XG4gKiBwYXNzIGEgbm9kZWJhY2ssIHRoZXkgd2lsbCByZWNlaXZlIHRoZSByZXN1bHQgcHJvbWlzZS5cbiAqIEBwYXJhbSBvYmplY3QgYSByZXN1bHQgKG9yIGEgcHJvbWlzZSBmb3IgYSByZXN1bHQpXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBub2RlYmFjayBhIE5vZGUuanMtc3R5bGUgY2FsbGJhY2tcbiAqIEByZXR1cm5zIGVpdGhlciB0aGUgcHJvbWlzZSBvciBub3RoaW5nXG4gKi9cblEubm9kZWlmeSA9IG5vZGVpZnk7XG5mdW5jdGlvbiBub2RlaWZ5KG9iamVjdCwgbm9kZWJhY2spIHtcbiAgICByZXR1cm4gUShvYmplY3QpLm5vZGVpZnkobm9kZWJhY2spO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5ub2RlaWZ5ID0gZnVuY3Rpb24gKG5vZGViYWNrKSB7XG4gICAgaWYgKG5vZGViYWNrKSB7XG4gICAgICAgIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG5vZGViYWNrKG51bGwsIHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG5vZGViYWNrKGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59O1xuXG5RLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJRLm5vQ29uZmxpY3Qgb25seSB3b3JrcyB3aGVuIFEgaXMgdXNlZCBhcyBhIGdsb2JhbFwiKTtcbn07XG5cbi8vIEFsbCBjb2RlIGJlZm9yZSB0aGlzIHBvaW50IHdpbGwgYmUgZmlsdGVyZWQgZnJvbSBzdGFjayB0cmFjZXMuXG52YXIgcUVuZGluZ0xpbmUgPSBjYXB0dXJlTGluZSgpO1xuXG5yZXR1cm4gUTtcblxufSk7XG4iLCIvKlxuICogc21vb3Roc2Nyb2xsIHBvbHlmaWxsIC0gdjAuMy41XG4gKiBodHRwczovL2lhbWR1c3Rhbi5naXRodWIuaW8vc21vb3Roc2Nyb2xsXG4gKiAyMDE2IChjKSBEdXN0YW4gS2FzdGVuLCBKZXJlbWlhcyBNZW5pY2hlbGxpIC0gTUlUIExpY2Vuc2VcbiAqL1xuXG4oZnVuY3Rpb24odywgZCwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKlxuICAgKiBhbGlhc2VzXG4gICAqIHc6IHdpbmRvdyBnbG9iYWwgb2JqZWN0XG4gICAqIGQ6IGRvY3VtZW50XG4gICAqIHVuZGVmaW5lZDogdW5kZWZpbmVkXG4gICAqL1xuXG4gIC8vIHBvbHlmaWxsXG4gIGZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgIC8vIHJldHVybiB3aGVuIHNjcm9sbEJlaGF2aW9yIGludGVyZmFjZSBpcyBzdXBwb3J0ZWRcbiAgICBpZiAoJ3Njcm9sbEJlaGF2aW9yJyBpbiBkLmRvY3VtZW50RWxlbWVudC5zdHlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogZ2xvYmFsc1xuICAgICAqL1xuICAgIHZhciBFbGVtZW50ID0gdy5IVE1MRWxlbWVudCB8fCB3LkVsZW1lbnQ7XG4gICAgdmFyIFNDUk9MTF9USU1FID0gNDY4O1xuXG4gICAgLypcbiAgICAgKiBvYmplY3QgZ2F0aGVyaW5nIG9yaWdpbmFsIHNjcm9sbCBtZXRob2RzXG4gICAgICovXG4gICAgdmFyIG9yaWdpbmFsID0ge1xuICAgICAgc2Nyb2xsOiB3LnNjcm9sbCB8fCB3LnNjcm9sbFRvLFxuICAgICAgc2Nyb2xsQnk6IHcuc2Nyb2xsQnksXG4gICAgICBlbFNjcm9sbDogRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsIHx8IHNjcm9sbEVsZW1lbnQsXG4gICAgICBzY3JvbGxJbnRvVmlldzogRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBkZWZpbmUgdGltaW5nIG1ldGhvZFxuICAgICAqL1xuICAgIHZhciBub3cgPSB3LnBlcmZvcm1hbmNlICYmIHcucGVyZm9ybWFuY2Uubm93XG4gICAgICA/IHcucGVyZm9ybWFuY2Uubm93LmJpbmQody5wZXJmb3JtYW5jZSkgOiBEYXRlLm5vdztcblxuICAgIC8qKlxuICAgICAqIGNoYW5nZXMgc2Nyb2xsIHBvc2l0aW9uIGluc2lkZSBhbiBlbGVtZW50XG4gICAgICogQG1ldGhvZCBzY3JvbGxFbGVtZW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNjcm9sbEVsZW1lbnQoeCwgeSkge1xuICAgICAgdGhpcy5zY3JvbGxMZWZ0ID0geDtcbiAgICAgIHRoaXMuc2Nyb2xsVG9wID0geTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIHJlc3VsdCBvZiBhcHBseWluZyBlYXNlIG1hdGggZnVuY3Rpb24gdG8gYSBudW1iZXJcbiAgICAgKiBAbWV0aG9kIGVhc2VcbiAgICAgKiBAcGFyYW0ge051bWJlcn0ga1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZWFzZShrKSB7XG4gICAgICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhIHNtb290aCBiZWhhdmlvciBzaG91bGQgYmUgYXBwbGllZFxuICAgICAqIEBtZXRob2Qgc2hvdWxkQmFpbE91dFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0geFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3VsZEJhaWxPdXQoeCkge1xuICAgICAgaWYgKHR5cGVvZiB4ICE9PSAnb2JqZWN0J1xuICAgICAgICAgICAgfHwgeCA9PT0gbnVsbFxuICAgICAgICAgICAgfHwgeC5iZWhhdmlvciA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICB8fCB4LmJlaGF2aW9yID09PSAnYXV0bydcbiAgICAgICAgICAgIHx8IHguYmVoYXZpb3IgPT09ICdpbnN0YW50Jykge1xuICAgICAgICAvLyBmaXJzdCBhcmcgbm90IGFuIG9iamVjdC9udWxsXG4gICAgICAgIC8vIG9yIGJlaGF2aW9yIGlzIGF1dG8sIGluc3RhbnQgb3IgdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHggPT09ICdvYmplY3QnXG4gICAgICAgICAgICAmJiB4LmJlaGF2aW9yID09PSAnc21vb3RoJykge1xuICAgICAgICAvLyBmaXJzdCBhcmd1bWVudCBpcyBhbiBvYmplY3QgYW5kIGJlaGF2aW9yIGlzIHNtb290aFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIHRocm93IGVycm9yIHdoZW4gYmVoYXZpb3IgaXMgbm90IHN1cHBvcnRlZFxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYmVoYXZpb3Igbm90IHZhbGlkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZmluZHMgc2Nyb2xsYWJsZSBwYXJlbnQgb2YgYW4gZWxlbWVudFxuICAgICAqIEBtZXRob2QgZmluZFNjcm9sbGFibGVQYXJlbnRcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAgICogQHJldHVybnMge05vZGV9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZFNjcm9sbGFibGVQYXJlbnQoZWwpIHtcbiAgICAgIHZhciBpc0JvZHk7XG4gICAgICB2YXIgaGFzU2Nyb2xsYWJsZVNwYWNlO1xuICAgICAgdmFyIGhhc1Zpc2libGVPdmVyZmxvdztcblxuICAgICAgZG8ge1xuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG5cbiAgICAgICAgLy8gc2V0IGNvbmRpdGlvbiB2YXJpYWJsZXNcbiAgICAgICAgaXNCb2R5ID0gZWwgPT09IGQuYm9keTtcbiAgICAgICAgaGFzU2Nyb2xsYWJsZVNwYWNlID1cbiAgICAgICAgICBlbC5jbGllbnRIZWlnaHQgPCBlbC5zY3JvbGxIZWlnaHQgfHxcbiAgICAgICAgICBlbC5jbGllbnRXaWR0aCA8IGVsLnNjcm9sbFdpZHRoO1xuICAgICAgICBoYXNWaXNpYmxlT3ZlcmZsb3cgPVxuICAgICAgICAgIHcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkub3ZlcmZsb3cgPT09ICd2aXNpYmxlJztcbiAgICAgIH0gd2hpbGUgKCFpc0JvZHkgJiYgIShoYXNTY3JvbGxhYmxlU3BhY2UgJiYgIWhhc1Zpc2libGVPdmVyZmxvdykpO1xuXG4gICAgICBpc0JvZHkgPSBoYXNTY3JvbGxhYmxlU3BhY2UgPSBoYXNWaXNpYmxlT3ZlcmZsb3cgPSBudWxsO1xuXG4gICAgICByZXR1cm4gZWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2VsZiBpbnZva2VkIGZ1bmN0aW9uIHRoYXQsIGdpdmVuIGEgY29udGV4dCwgc3RlcHMgdGhyb3VnaCBzY3JvbGxpbmdcbiAgICAgKiBAbWV0aG9kIHN0ZXBcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0ZXAoY29udGV4dCkge1xuICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHZhciBjdXJyZW50WDtcbiAgICAgIHZhciBjdXJyZW50WTtcbiAgICAgIHZhciBlbGFwc2VkID0gKHRpbWUgLSBjb250ZXh0LnN0YXJ0VGltZSkgLyBTQ1JPTExfVElNRTtcblxuICAgICAgLy8gYXZvaWQgZWxhcHNlZCB0aW1lcyBoaWdoZXIgdGhhbiBvbmVcbiAgICAgIGVsYXBzZWQgPSBlbGFwc2VkID4gMSA/IDEgOiBlbGFwc2VkO1xuXG4gICAgICAvLyBhcHBseSBlYXNpbmcgdG8gZWxhcHNlZCB0aW1lXG4gICAgICB2YWx1ZSA9IGVhc2UoZWxhcHNlZCk7XG5cbiAgICAgIGN1cnJlbnRYID0gY29udGV4dC5zdGFydFggKyAoY29udGV4dC54IC0gY29udGV4dC5zdGFydFgpICogdmFsdWU7XG4gICAgICBjdXJyZW50WSA9IGNvbnRleHQuc3RhcnRZICsgKGNvbnRleHQueSAtIGNvbnRleHQuc3RhcnRZKSAqIHZhbHVlO1xuXG4gICAgICBjb250ZXh0Lm1ldGhvZC5jYWxsKGNvbnRleHQuc2Nyb2xsYWJsZSwgY3VycmVudFgsIGN1cnJlbnRZKTtcblxuICAgICAgLy8gc2Nyb2xsIG1vcmUgaWYgd2UgaGF2ZSBub3QgcmVhY2hlZCBvdXIgZGVzdGluYXRpb25cbiAgICAgIGlmIChjdXJyZW50WCAhPT0gY29udGV4dC54IHx8IGN1cnJlbnRZICE9PSBjb250ZXh0LnkpIHtcbiAgICAgICAgdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcC5iaW5kKHcsIGNvbnRleHQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzY3JvbGxzIHdpbmRvdyB3aXRoIGEgc21vb3RoIGJlaGF2aW9yXG4gICAgICogQG1ldGhvZCBzbW9vdGhTY3JvbGxcbiAgICAgKiBAcGFyYW0ge09iamVjdHxOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbW9vdGhTY3JvbGwoZWwsIHgsIHkpIHtcbiAgICAgIHZhciBzY3JvbGxhYmxlO1xuICAgICAgdmFyIHN0YXJ0WDtcbiAgICAgIHZhciBzdGFydFk7XG4gICAgICB2YXIgbWV0aG9kO1xuICAgICAgdmFyIHN0YXJ0VGltZSA9IG5vdygpO1xuXG4gICAgICAvLyBkZWZpbmUgc2Nyb2xsIGNvbnRleHRcbiAgICAgIGlmIChlbCA9PT0gZC5ib2R5KSB7XG4gICAgICAgIHNjcm9sbGFibGUgPSB3O1xuICAgICAgICBzdGFydFggPSB3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldDtcbiAgICAgICAgc3RhcnRZID0gdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXQ7XG4gICAgICAgIG1ldGhvZCA9IG9yaWdpbmFsLnNjcm9sbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcm9sbGFibGUgPSBlbDtcbiAgICAgICAgc3RhcnRYID0gZWwuc2Nyb2xsTGVmdDtcbiAgICAgICAgc3RhcnRZID0gZWwuc2Nyb2xsVG9wO1xuICAgICAgICBtZXRob2QgPSBzY3JvbGxFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICAvLyBzY3JvbGwgbG9vcGluZyBvdmVyIGEgZnJhbWVcbiAgICAgIHN0ZXAoe1xuICAgICAgICBzY3JvbGxhYmxlOiBzY3JvbGxhYmxlLFxuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgc3RhcnRUaW1lOiBzdGFydFRpbWUsXG4gICAgICAgIHN0YXJ0WDogc3RhcnRYLFxuICAgICAgICBzdGFydFk6IHN0YXJ0WSxcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBPUklHSU5BTCBNRVRIT0RTIE9WRVJSSURFU1xuICAgICAqL1xuXG4gICAgLy8gdy5zY3JvbGwgYW5kIHcuc2Nyb2xsVG9cbiAgICB3LnNjcm9sbCA9IHcuc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCB8fCBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCB8fCBhcmd1bWVudHNbMV1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdyxcbiAgICAgICAgZC5ib2R5LFxuICAgICAgICB+fmFyZ3VtZW50c1swXS5sZWZ0LFxuICAgICAgICB+fmFyZ3VtZW50c1swXS50b3BcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIHcuc2Nyb2xsQnlcbiAgICB3LnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbEJ5LmNhbGwoXG4gICAgICAgICAgdyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCB8fCBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCB8fCBhcmd1bWVudHNbMV1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdyxcbiAgICAgICAgZC5ib2R5LFxuICAgICAgICB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgKHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0KSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0udG9wICsgKHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0KVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsIGFuZCBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUb1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCA9IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbFRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9yaWdpbmFsLmVsU2Nyb2xsLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgfHwgYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCB8fCBhcmd1bWVudHNbMV1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVmdCA9IGFyZ3VtZW50c1swXS5sZWZ0O1xuICAgICAgdmFyIHRvcCA9IGFyZ3VtZW50c1swXS50b3A7XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB0eXBlb2YgbGVmdCA9PT0gJ251bWJlcicgPyBsZWZ0IDogdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHR5cGVvZiB0b3AgPT09ICdudW1iZXInID8gdG9wIDogdGhpcy5zY3JvbGxUb3BcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEJ5XG4gICAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsQnkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmcwID0gYXJndW1lbnRzWzBdO1xuXG4gICAgICBpZiAodHlwZW9mIGFyZzAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsKHtcbiAgICAgICAgICBsZWZ0OiBhcmcwLmxlZnQgKyB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgdG9wOiBhcmcwLnRvcCArIHRoaXMuc2Nyb2xsVG9wLFxuICAgICAgICAgIGJlaGF2aW9yOiBhcmcwLmJlaGF2aW9yXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zY3JvbGwoXG4gICAgICAgICAgdGhpcy5zY3JvbGxMZWZ0ICsgYXJnMCxcbiAgICAgICAgICB0aGlzLnNjcm9sbFRvcCArIGFyZ3VtZW50c1sxXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbEludG9WaWV3LmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMF1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICB2YXIgc2Nyb2xsYWJsZVBhcmVudCA9IGZpbmRTY3JvbGxhYmxlUGFyZW50KHRoaXMpO1xuICAgICAgdmFyIHBhcmVudFJlY3RzID0gc2Nyb2xsYWJsZVBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBjbGllbnRSZWN0cyA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChzY3JvbGxhYmxlUGFyZW50ICE9PSBkLmJvZHkpIHtcbiAgICAgICAgLy8gcmV2ZWFsIGVsZW1lbnQgaW5zaWRlIHBhcmVudFxuICAgICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQsXG4gICAgICAgICAgc2Nyb2xsYWJsZVBhcmVudC5zY3JvbGxMZWZ0ICsgY2xpZW50UmVjdHMubGVmdCAtIHBhcmVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgc2Nyb2xsYWJsZVBhcmVudC5zY3JvbGxUb3AgKyBjbGllbnRSZWN0cy50b3AgLSBwYXJlbnRSZWN0cy50b3BcbiAgICAgICAgKTtcbiAgICAgICAgLy8gcmV2ZWFsIHBhcmVudCBpbiB2aWV3cG9ydFxuICAgICAgICB3LnNjcm9sbEJ5KHtcbiAgICAgICAgICBsZWZ0OiBwYXJlbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHRvcDogcGFyZW50UmVjdHMudG9wLFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluIHZpZXdwb3J0XG4gICAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICAgIGxlZnQ6IGNsaWVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgdG9wOiBjbGllbnRSZWN0cy50b3AsXG4gICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gY29tbW9uanNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHsgcG9seWZpbGw6IHBvbHlmaWxsIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gZ2xvYmFsXG4gICAgcG9seWZpbGwoKTtcbiAgfVxufSkod2luZG93LCBkb2N1bWVudCk7XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG4iXX0=
