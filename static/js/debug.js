(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

module.exports = {
	"caret-down": require('./views/templates/lib/caret-down'),
	"checkmark": require('./views/templates/lib/checkmark'),
	"edit": require('./views/templates/lib/edit'),
	"error": require('./views/templates/lib/error'),
	"ex": require('./views/templates/lib/ex'),
	"garbage": require('./views/templates/lib/garbage'),
	"justify": require('./views/templates/lib/justify'),
	"leftArrow": require('./views/templates/lib/leftArrow'),
	"minus": require('./views/templates/lib/minus'),
	"plus": require('./views/templates/lib/plus'),
	"search": require('./views/templates/lib/search')
};

},{"./views/templates/lib/caret-down":187,"./views/templates/lib/checkmark":188,"./views/templates/lib/edit":189,"./views/templates/lib/error":190,"./views/templates/lib/ex":191,"./views/templates/lib/garbage":192,"./views/templates/lib/justify":193,"./views/templates/lib/leftArrow":194,"./views/templates/lib/minus":195,"./views/templates/lib/plus":196,"./views/templates/lib/search":197}],2:[function(require,module,exports){
'use strict';

module.exports = {
	About: require('./views/templates/About'),
	AccountHome: require('./views/templates/AccountHome'),
	AccountPayments: require('./views/templates/AccountPayments'),
	AddTransaction: require('./views/templates/AddTransaction'),
	AdminHeader: require('./views/templates/AdminHeader'),
	AdminPlus: require('./views/templates/AdminPlus'),
	ButtonFlow: require('./views/templates/ButtonFlow'),
	CollectionManager: require('./views/templates/CollectionManager'),
	Contact: require('./views/templates/Contact'),
	Csa: require('./views/templates/Csa'),
	CsaItem: require('./views/templates/CsaItem'),
	CsaTransaction: require('./views/templates/CsaTransaction'),
	CustomEmail: require('./views/templates/CustomEmail'),
	CustomerInfo: require('./views/templates/CustomerInfo'),
	Deleter: require('./views/templates/Deleter'),
	DeliveryDate: require('./views/templates/DeliveryDate'),
	Document: require('./views/templates/Document'),
	Dragger: require('./views/templates/Dragger'),
	EditCsaTransaction: require('./views/templates/EditCsaTransaction'),
	EmailHeader: require('./views/templates/EmailHeader'),
	FarmReminder: require('./views/templates/FarmReminder'),
	FieldEdit: require('./views/templates/FieldEdit'),
	FieldError: require('./views/templates/FieldError'),
	FoodOmission: require('./views/templates/FoodOmission'),
	Footer: require('./views/templates/Footer'),
	Form: require('./views/templates/Form'),
	GetInvolved: require('./views/templates/GetInvolved'),
	GroupReminder: require('./views/templates/GroupReminder'),
	Header: require('./views/templates/Header'),
	Home: require('./views/templates/Home'),
	HomeReminder: require('./views/templates/HomeReminder'),
	InfoWindow: require('./views/templates/InfoWindow'),
	List: require('./views/templates/List'),
	Location: require('./views/templates/Location'),
	Locations: require('./views/templates/Locations'),
	Login: require('./views/templates/Login'),
	ManageCustomer: require('./views/templates/ManageCustomer'),
	MemberInfo: require('./views/templates/MemberInfo'),
	MemberTypeahead: require('./views/templates/MemberTypeahead'),
	Members: require('./views/templates/Members'),
	Modal: require('./views/templates/Modal'),
	OrderOptions: require('./views/templates/OrderOptions'),
	Reporting: require('./views/templates/Reporting'),
	ResetPassword: require('./views/templates/ResetPassword'),
	SeasonalAddOn: require('./views/templates/SeasonalAddOn'),
	Seasons: require('./views/templates/Seasons'),
	ShareBox: require('./views/templates/ShareBox'),
	ShareExample: require('./views/templates/ShareExample'),
	SharePatch: require('./views/templates/SharePatch'),
	StaffProfile: require('./views/templates/StaffProfile'),
	Toast: require('./views/templates/Toast'),
	Transactions: require('./views/templates/Transactions'),
	TypeAhead: require('./views/templates/TypeAhead'),
	Verify: require('./views/templates/Verify'),
	WeekOptions: require('./views/templates/WeekOptions'),
	WeeklyReminder: require('./views/templates/WeeklyReminder'),
	deliveryMatrix: require('./views/templates/deliveryMatrix')
};

},{"./views/templates/About":130,"./views/templates/AccountHome":131,"./views/templates/AccountPayments":132,"./views/templates/AddTransaction":133,"./views/templates/AdminHeader":134,"./views/templates/AdminPlus":135,"./views/templates/ButtonFlow":136,"./views/templates/CollectionManager":137,"./views/templates/Contact":138,"./views/templates/Csa":139,"./views/templates/CsaItem":140,"./views/templates/CsaTransaction":141,"./views/templates/CustomEmail":142,"./views/templates/CustomerInfo":143,"./views/templates/Deleter":144,"./views/templates/DeliveryDate":145,"./views/templates/Document":146,"./views/templates/Dragger":147,"./views/templates/EditCsaTransaction":148,"./views/templates/EmailHeader":149,"./views/templates/FarmReminder":150,"./views/templates/FieldEdit":151,"./views/templates/FieldError":152,"./views/templates/FoodOmission":153,"./views/templates/Footer":154,"./views/templates/Form":155,"./views/templates/GetInvolved":156,"./views/templates/GroupReminder":157,"./views/templates/Header":158,"./views/templates/Home":159,"./views/templates/HomeReminder":160,"./views/templates/InfoWindow":161,"./views/templates/List":162,"./views/templates/Location":163,"./views/templates/Locations":164,"./views/templates/Login":165,"./views/templates/ManageCustomer":166,"./views/templates/MemberInfo":167,"./views/templates/MemberTypeahead":168,"./views/templates/Members":169,"./views/templates/Modal":170,"./views/templates/OrderOptions":171,"./views/templates/Reporting":172,"./views/templates/ResetPassword":173,"./views/templates/SeasonalAddOn":174,"./views/templates/Seasons":175,"./views/templates/ShareBox":176,"./views/templates/ShareExample":177,"./views/templates/SharePatch":178,"./views/templates/StaffProfile":179,"./views/templates/Toast":180,"./views/templates/Transactions":181,"./views/templates/TypeAhead":182,"./views/templates/Verify":183,"./views/templates/WeekOptions":184,"./views/templates/WeeklyReminder":185,"./views/templates/deliveryMatrix":186}],3:[function(require,module,exports){
'use strict';

module.exports = {
	About: require('./views/About'),
	AccountHome: require('./views/AccountHome'),
	AccountPayments: require('./views/AccountPayments'),
	AddTransaction: require('./views/AddTransaction'),
	AdminHeader: require('./views/AdminHeader'),
	AdminPlus: require('./views/AdminPlus'),
	ButtonFlow: require('./views/ButtonFlow'),
	CollectionManager: require('./views/CollectionManager'),
	Contact: require('./views/Contact'),
	Csa: require('./views/Csa'),
	CustomerInfo: require('./views/CustomerInfo'),
	Deleter: require('./views/Deleter'),
	Dragger: require('./views/Dragger'),
	FoodOmission: require('./views/FoodOmission'),
	Footer: require('./views/Footer'),
	Form: require('./views/Form'),
	GetInvolved: require('./views/GetInvolved'),
	Header: require('./views/Header'),
	Home: require('./views/Home'),
	List: require('./views/List'),
	Locations: require('./views/Locations'),
	Login: require('./views/Login'),
	ManageCustomer: require('./views/ManageCustomer'),
	MemberTypeahead: require('./views/MemberTypeahead'),
	MyView: require('./views/MyView'),
	OrderOptions: require('./views/OrderOptions'),
	Reporting: require('./views/Reporting'),
	ResetPassword: require('./views/ResetPassword'),
	Seasons: require('./views/Seasons'),
	ShareBox: require('./views/ShareBox'),
	SharePatch: require('./views/SharePatch'),
	Signup: require('./views/Signup'),
	Submitter: require('./views/Submitter'),
	Toast: require('./views/Toast'),
	Transactions: require('./views/Transactions'),
	TypeAhead: require('./views/TypeAhead'),
	Verify: require('./views/Verify'),
	WeekOptions: require('./views/WeekOptions'),
	WeeklyReminder: require('./views/WeeklyReminder'),
	modal: require('./views/modal')
};

},{"./views/About":70,"./views/AccountHome":71,"./views/AccountPayments":72,"./views/AddTransaction":73,"./views/AdminHeader":74,"./views/AdminPlus":75,"./views/ButtonFlow":76,"./views/CollectionManager":77,"./views/Contact":78,"./views/Csa":79,"./views/CustomerInfo":80,"./views/Deleter":81,"./views/Dragger":82,"./views/FoodOmission":83,"./views/Footer":84,"./views/Form":85,"./views/GetInvolved":86,"./views/Header":87,"./views/Home":88,"./views/List":89,"./views/Locations":90,"./views/Login":91,"./views/ManageCustomer":92,"./views/MemberTypeahead":93,"./views/MyView":94,"./views/OrderOptions":95,"./views/Reporting":96,"./views/ResetPassword":97,"./views/Seasons":98,"./views/ShareBox":99,"./views/SharePatch":100,"./views/Signup":101,"./views/Submitter":102,"./views/Toast":103,"./views/Transactions":104,"./views/TypeAhead":105,"./views/Verify":106,"./views/WeekOptions":107,"./views/WeeklyReminder":108,"./views/modal":112}],4:[function(require,module,exports){
"use strict";

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// JavaScript autoComplete v1.0.4
// https://github.com/Pixabay/JavaScript-autoComplete
var autoComplete = function () {
  function e(e) {
    function t(e, t) {
      return e.classList ? e.classList.contains(t) : new RegExp("\\b" + t + "\\b").test(e.className);
    }function o(e, t, o) {
      e.attachEvent ? e.attachEvent("on" + t, o) : e.addEventListener(t, o);
    }function s(e, t, o) {
      e.detachEvent ? e.detachEvent("on" + t, o) : e.removeEventListener(t, o);
    }function n(e, s, n, l) {
      o(l || document, s, function (o) {
        for (var s, l = o.target || o.srcElement; l && !(s = t(l, e));) {
          l = l.parentElement;
        }s && n.call(l, o);
      });
    }if (document.querySelector) {
      var l = { selector: 0, source: 0, minChars: 3, delay: 150, offsetLeft: 0, offsetTop: 1, cache: 1, menuClass: "", renderItem: function renderItem(e, t) {
          t = t.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");var o = new RegExp("(" + t.split(" ").join("|") + ")", "gi");return '<div class="autocomplete-suggestion" data-val="' + e + '">' + e.replace(o, "<b>$1</b>") + "</div>";
        }, onSelect: function onSelect() {} };for (var c in e) {
        e.hasOwnProperty(c) && (l[c] = e[c]);
      }for (var a = "object" == (0, _typeof3.default)(l.selector) ? [l.selector] : document.querySelectorAll(l.selector), u = 0; u < a.length; u++) {
        var i = a[u];i.sc = document.createElement("div"), i.sc.className = "autocomplete-suggestions " + l.menuClass, i.autocompleteAttr = i.getAttribute("autocomplete"), i.setAttribute("autocomplete", "off"), i.cache = {}, i.last_val = "", i.updateSC = function (e, t) {
          var o = i.getBoundingClientRect();if (i.sc.style.left = Math.round(o.left + (window.pageXOffset || document.documentElement.scrollLeft) + l.offsetLeft) + "px", i.sc.style.top = Math.round(o.bottom + (window.pageYOffset || document.documentElement.scrollTop) + l.offsetTop) + "px", i.sc.style.width = Math.round(o.right - o.left) + "px", !e && (i.sc.style.display = "block", i.sc.maxHeight || (i.sc.maxHeight = parseInt((window.getComputedStyle ? getComputedStyle(i.sc, null) : i.sc.currentStyle).maxHeight)), i.sc.suggestionHeight || (i.sc.suggestionHeight = i.sc.querySelector(".autocomplete-suggestion").offsetHeight), i.sc.suggestionHeight)) if (t) {
            var s = i.sc.scrollTop,
                n = t.getBoundingClientRect().top - i.sc.getBoundingClientRect().top;n + i.sc.suggestionHeight - i.sc.maxHeight > 0 ? i.sc.scrollTop = n + i.sc.suggestionHeight + s - i.sc.maxHeight : 0 > n && (i.sc.scrollTop = n + s);
          } else i.sc.scrollTop = 0;
        }, o(window, "resize", i.updateSC), document.body.appendChild(i.sc), n("autocomplete-suggestion", "mouseleave", function () {
          var e = i.sc.querySelector(".autocomplete-suggestion.selected");e && setTimeout(function () {
            e.className = e.className.replace("selected", "");
          }, 20);
        }, i.sc), n("autocomplete-suggestion", "mouseover", function () {
          var e = i.sc.querySelector(".autocomplete-suggestion.selected");e && (e.className = e.className.replace("selected", "")), this.className += " selected";
        }, i.sc), n("autocomplete-suggestion", "mousedown", function (e) {
          if (t(this, "autocomplete-suggestion")) {
            var o = this.getAttribute("data-val");i.value = o, l.onSelect(e, o, this), i.sc.style.display = "none";
          }
        }, i.sc), i.blurHandler = function () {
          try {
            var e = document.querySelector(".autocomplete-suggestions:hover");
          } catch (t) {
            var e = 0;
          }e ? i !== document.activeElement && setTimeout(function () {
            i.focus();
          }, 20) : (i.last_val = i.value, i.sc.style.display = "none", setTimeout(function () {
            i.sc.style.display = "none";
          }, 350));
        }, o(i, "blur", i.blurHandler);var r = function r(e) {
          var t = i.value;if (i.cache[t] = e, e.length && t.length >= l.minChars) {
            for (var o = "", s = 0; s < e.length; s++) {
              o += l.renderItem(e[s], t);
            }i.sc.innerHTML = o, i.updateSC(0);
          } else i.sc.style.display = "none";
        };i.keydownHandler = function (e) {
          var t = window.event ? e.keyCode : e.which;if ((40 == t || 38 == t) && i.sc.innerHTML) {
            var o,
                s = i.sc.querySelector(".autocomplete-suggestion.selected");return s ? (o = 40 == t ? s.nextSibling : s.previousSibling, o ? (s.className = s.className.replace("selected", ""), o.className += " selected", i.value = o.getAttribute("data-val")) : (s.className = s.className.replace("selected", ""), i.value = i.last_val, o = 0)) : (o = 40 == t ? i.sc.querySelector(".autocomplete-suggestion") : i.sc.childNodes[i.sc.childNodes.length - 1], o.className += " selected", i.value = o.getAttribute("data-val")), i.updateSC(0, o), !1;
          }if (27 == t) i.value = i.last_val, i.sc.style.display = "none";else if (13 == t || 9 == t) {
            var s = i.sc.querySelector(".autocomplete-suggestion.selected");s && "none" != i.sc.style.display && (l.onSelect(e, s.getAttribute("data-val"), s), setTimeout(function () {
              i.sc.style.display = "none";
            }, 20));
          }
        }, o(i, "keydown", i.keydownHandler), i.keyupHandler = function (e) {
          var t = window.event ? e.keyCode : e.which;if (!t || (35 > t || t > 40) && 13 != t && 27 != t) {
            var o = i.value;if (o.length >= l.minChars) {
              if (o != i.last_val) {
                if (i.last_val = o, clearTimeout(i.timer), l.cache) {
                  if (o in i.cache) return void r(i.cache[o]);for (var s = 1; s < o.length - l.minChars; s++) {
                    var n = o.slice(0, o.length - s);if (n in i.cache && !i.cache[n].length) return void r([]);
                  }
                }i.timer = setTimeout(function () {
                  l.source(o, r);
                }, l.delay);
              }
            } else i.last_val = o, i.sc.style.display = "none";
          }
        }, o(i, "keyup", i.keyupHandler), i.focusHandler = function (e) {
          i.last_val = "\n", i.keyupHandler(e);
        }, l.minChars || o(i, "focus", i.focusHandler);
      }this.destroy = function () {
        for (var e = 0; e < a.length; e++) {
          var t = a[e];s(window, "resize", t.updateSC), s(t, "blur", t.blurHandler), s(t, "focus", t.focusHandler), s(t, "keydown", t.keydownHandler), s(t, "keyup", t.keyupHandler), t.autocompleteAttr ? t.setAttribute("autocomplete", t.autocompleteAttr) : t.removeAttribute("autocomplete"), document.body.removeChild(t.sc), t = null;
        }
      };
    }
  }return e;
}();!function () {
  "function" == typeof define && define.amd ? define("autoComplete", function () {
    return autoComplete;
  }) : "undefined" != typeof module && module.exports ? module.exports = autoComplete : window.autoComplete = autoComplete;
}();

},{"babel-runtime/helpers/typeof":249}],5:[function(require,module,exports){
'use strict';

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {

    Currency: new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2
    }),

    FillRange: function FillRange(start, end) {
        return Array(end - start + 1).fill().map(function (item, index) {
            return start + index;
        });
    },
    GetCoordinateInputs: function GetCoordinateInputs(datum, value) {
        var longitude = value ? value[0] : '',
            latitude = value ? value[1] : '';

        return '' + ('<div data-js="' + datum.name + '" class="form-group">\n            <label>' + datum.label + '</label>\n            <div>\n                <input type="text" placeholder="Enter longitude" value="' + longitude + '"/>\n                <input type="text" placeholder="Enter latitude" value="' + latitude + '"/>\n            </div>\n        </div>');
    },
    GetFormField: function GetFormField(datum, value) {
        var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (datum.range === 'Geography') return this.GetCoordinateInputs(datum, value);

        var icon = datum.metadata ? datum.metadata.icon ? this.Icons[datum.metadata.icon] : '' : '';

        var options = datum.metadata ? datum.metadata.options : false;

        value = value === undefined || value === null ? '' : value;

        var label = datum.fk || datum.label ? '<label>' + (datum.fk || datum.label) + '</label>' : '';

        if (options) {
            if (typeof options === 'function') {
                options();return this.GetSelect(datum, value, [], icon, label);
            } else if (Array.isArray(options)) return this.GetSelect(datum, value, options, icon, label);
        }

        var image = datum.range === 'ImageUrl' ? '<div><img src="' + this.ImageSrc(value) + '" /></div>' : '';

        var placeholder = meta.noPlaceholder ? '' : datum.label || '';

        var input = datum.fk ? '<div data-view="typeAhead" data-name="' + datum.fk + '"></div>' : datum.range === 'Text' && meta.key === '_id' || meta.key === 'id' && datum.name === 'description' ? '<textarea data-js="' + datum.name + '" rows="3">' + value + '</textarea>' : datum.range === 'List' || (0, _typeof3.default)(datum.range) === 'object' ? '<div data-js="' + datum.name + '" data-name="' + datum.name + '"></div>' : '<input type="' + this.RangeToInputType[datum.range] + '" data-js="' + datum.name + '" placeholder="' + placeholder + '" value="' + value + '" />';

        return '' + ('<div class="form-group ' + (image ? 'has-image' : '') + '">\n            ' + label + '\n            ' + input + '\n            ' + image + '\n            ' + icon + '\n        </div>');
    },
    GetFormFields: function GetFormFields(data) {
        var _this = this;

        var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (!data) return '';

        return data.filter(function (datum) {
            return meta[datum.name || datum.fk] && meta[datum.name || datum.fk].hide ? false : true;
        }).map(function (datum) {
            return _this.GetFormField(datum, model && model[datum.name], meta);
        }).join('');
    },
    GetIcon: function GetIcon(name, opts) {
        return (0, _apply2.default)(this.Icons[name], this, [opts]);
    },
    GetListItems: function GetListItems() {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return items.map(function (item) {
            var attr = opts.dataAttr ? 'data-' + opts.dataAttr + '="' + item[opts.dataAttr] + '"' : '';
            return '<li ' + attr + '>' + (item.label || item) + '</li>';
        }).join('');
    },
    GetSelect: function GetSelect(datum, selectedValue, optionsData, icon) {
        var label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';

        if (typeof selectedValue === 'boolean' || typeof selectedValue === 'number') selectedValue = selectedValue.toString();

        var options = optionsData.length ? this.GetSelectOptions(optionsData, selectedValue, { valueAttr: 'name' }) : '';

        return '' + ('<div class="form-group">\n            ' + label + '\n            <select data-js="' + datum.name + '">\n                <option disabled ' + (!selectedValue ? 'selected' : '') + ' value>' + datum.label + '</option>\n                ' + options + '\n            </select>\n            ' + icon + '\n        </div>');
    },
    GetSelectOptions: function GetSelectOptions() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var selectedValue = arguments[1];
        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { valueAttr: 'value' };

        return options.map(function (option) {
            return '<option ' + (selectedValue === option[opts.valueAttr] ? 'selected' : '') + ' value="' + option[opts.valueAttr] + '">' + option.label + '</option>';
        }).join('');
    },


    Icons: require('./.IconMap'),

    IconDataJs: function IconDataJs(p) {
        return p.name ? 'data-js="' + p.name + '"' : '';
    },
    ImageSrc: function ImageSrc(name) {
        return 'https://storage.googleapis.com/thoreau-would-be-proud/' + name;
    },
    ParseTextLinks: function ParseTextLinks(text) {
        var start = text.indexOf('{{'),
            end = void 0,
            rest = void 0,
            target = void 0,
            key = void 0,
            value = void 0,
            replacement = void 0;

        if (start === -1) return text;

        rest = text.slice(start);
        target = rest.slice(0, rest.indexOf('}') + 2);
        key = target.slice(2, target.indexOf(':'));
        value = target.slice(target.indexOf(':') + 1, target.indexOf('}'));

        replacement = /email/i.test(target) ? '<a href="mailto:' + value + '" class="link">' + key + '</a>' : /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/gi.test(value) ? '<a target="_blank" href="' + value + '" class="link">' + key + '</a>' : '<span data-js="link" data-name="' + value + '" class="link">' + key + '</span>';

        return this.ParseTextLinks(text.replace(target, replacement));
    },
    Range: function Range(int) {
        return (0, _from2.default)(Array(int).keys());
    },


    RangeToInputType: {
        Email: 'email',
        ImageUrl: 'text',
        Password: 'password',
        String: 'text',
        Text: 'text'
    }

};

},{"./.IconMap":1,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/reflect/apply":237,"babel-runtime/helpers/typeof":249}],6:[function(require,module,exports){
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MyError = function MyError(err) {
    return this.handle(err);
};

(0, _extends3.default)(MyError.prototype, {

    handle: function handle(err) {
        console.log(err.stack || err);
    }

});

module.exports = MyError;

},{"babel-runtime/helpers/extends":246}],7:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _create2.default)((0, _extends3.default)({}, require('../../lib/MyObject'), {

    Request: {
        constructor: function constructor(data) {
            var _this = this;

            var req = new XMLHttpRequest();

            return new _promise2.default(function (resolve, reject) {

                req.onload = function () {
                    [500, 404, 401].includes(this.status) ? reject(this.response) : resolve(JSON.parse(this.response));
                };

                var path = '/' + data.resource + (data.id ? '/' + data.id : '');

                if (data.method === "get" || data.method === "options") {
                    var qs = data.qs ? '?' + data.qs : '';
                    req.open(data.method, '' + path + qs);
                    //req.open( data.method, `/${data.resource}${qs}` )
                    _this.setHeaders(req, data.headers);
                    req.send(null);
                } else {
                    req.open(data.method.toUpperCase(), path, true);
                    _this.setHeaders(req, data.headers);
                    req.send(data.data || null);
                }
            });
        },
        plainEscape: function plainEscape(sText) {
            /* how should I treat a text/plain form encoding? what characters are not allowed? this is what I suppose...: */
            /* "4\3\7 - Einstein said E=mc2" ----> "4\\3\\7\ -\ Einstein\ said\ E\=mc2" */
            return sText.replace(/[\s\=\\]/g, "\\$&");
        },
        setHeaders: function setHeaders(req) {
            var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            req.setRequestHeader("Accept", headers.accept || 'application/json');
            req.setRequestHeader("Content-Type", headers.contentType || 'text/plain');
            (0, _keys2.default)(headers).forEach(function (key) {
                return req.setRequestHeader(key, headers[key]);
            });
        }
    },

    _factory: function _factory(data) {
        return (0, _create2.default)(this.Request, {}).constructor(data);
    },
    constructor: function constructor() {

        if (!XMLHttpRequest.prototype.sendAsBinary) {
            XMLHttpRequest.prototype.sendAsBinary = function (sData) {
                var nBytes = sData.length,
                    ui8Data = new Uint8Array(nBytes);
                for (var nIdx = 0; nIdx < nBytes; nIdx++) {
                    ui8Data[nIdx] = sData.charCodeAt(nIdx) & 0xff;
                }
                this.send(ui8Data);
            };
        }

        return this._factory.bind(this);
    }
}), {}).constructor();

},{"../../lib/MyObject":204,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],8:[function(require,module,exports){
(function (process,global){
"use strict";

var _iterator = require("babel-runtime/core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _create = require("babel-runtime/core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _freeze = require("babel-runtime/core-js/object/freeze");

var _freeze2 = _interopRequireDefault(_freeze);

var _fromCodePoint = require("babel-runtime/core-js/string/from-code-point");

var _fromCodePoint2 = _interopRequireDefault(_fromCodePoint);

var _preventExtensions = require("babel-runtime/core-js/object/prevent-extensions");

var _preventExtensions2 = _interopRequireDefault(_preventExtensions);

var _defineProperty = require("babel-runtime/core-js/reflect/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _construct = require("babel-runtime/core-js/reflect/construct");

var _construct2 = _interopRequireDefault(_construct);

var _sinh = require("babel-runtime/core-js/math/sinh");

var _sinh2 = _interopRequireDefault(_sinh);

var _imul = require("babel-runtime/core-js/math/imul");

var _imul2 = _interopRequireDefault(_imul);

var _acosh = require("babel-runtime/core-js/math/acosh");

var _acosh2 = _interopRequireDefault(_acosh);

var _of = require("babel-runtime/core-js/array/of");

var _of2 = _interopRequireDefault(_of);

var _setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _is = require("babel-runtime/core-js/object/is");

var _is2 = _interopRequireDefault(_is);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _symbol = require("babel-runtime/core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _sign = require("babel-runtime/core-js/math/sign");

var _sign2 = _interopRequireDefault(_sign);

var _log1p = require("babel-runtime/core-js/math/log1p");

var _log1p2 = _interopRequireDefault(_log1p);

var _expm = require("babel-runtime/core-js/math/expm1");

var _expm2 = _interopRequireDefault(_expm);

var _from = require("babel-runtime/core-js/array/from");

var _from2 = _interopRequireDefault(_from);

var _getOwnPropertyNames = require("babel-runtime/core-js/object/get-own-property-names");

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _isExtensible = require("babel-runtime/core-js/object/is-extensible");

var _isExtensible2 = _interopRequireDefault(_isExtensible);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

!function e(t, n, r) {
  function s(i, u) {
    if (!n[i]) {
      if (!t[i]) {
        var c = "function" == typeof require && require;if (!u && c) return c(i, !0);if (o) return o(i, !0);var a = new Error("Cannot find module '" + i + "'");throw a.code = "MODULE_NOT_FOUND", a;
      }var f = n[i] = { exports: {} };t[i][0].call(f.exports, function (n) {
        var e = t[i][1][n];return s(e ? e : n);
      }, f, f.exports, e, t, n, r);
    }return n[i].exports;
  }for (var o = "function" == typeof require && require, i = 0; i < r.length; i++) {
    s(r[i]);
  }return s;
}({ 1: [function (t, n, e) {
    (function (n) {
      "use strict";
      if (t(189), t(2), n._babelPolyfill) throw new Error("only one instance of babel-polyfill is allowed");n._babelPolyfill = !0;
    }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
  }, { 189: 189, 2: 2 }], 2: [function (t, n, e) {
    n.exports = t(190);
  }, { 190: 190 }], 3: [function (t, n, e) {
    n.exports = function (t) {
      if ("function" != typeof t) throw TypeError(t + " is not a function!");return t;
    };
  }, {}], 4: [function (t, n, e) {
    var r = t(84)("unscopables"),
        o = Array.prototype;void 0 == o[r] && t(32)(o, r, {}), n.exports = function (t) {
      o[r][t] = !0;
    };
  }, { 32: 32, 84: 84 }], 5: [function (t, n, e) {
    var r = t(39);n.exports = function (t) {
      if (!r(t)) throw TypeError(t + " is not an object!");return t;
    };
  }, { 39: 39 }], 6: [function (t, n, e) {
    "use strict";
    var r = t(81),
        o = t(77),
        i = t(80);n.exports = [].copyWithin || function copyWithin(t, n) {
      var e = r(this),
          u = i(e.length),
          c = o(t, u),
          a = o(n, u),
          s = arguments,
          f = s.length > 2 ? s[2] : void 0,
          l = Math.min((void 0 === f ? u : o(f, u)) - a, u - c),
          h = 1;for (c > a && a + l > c && (h = -1, a += l - 1, c += l - 1); l-- > 0;) {
        a in e ? e[c] = e[a] : delete e[c], c += h, a += h;
      }return e;
    };
  }, { 77: 77, 80: 80, 81: 81 }], 7: [function (t, n, e) {
    "use strict";
    var r = t(81),
        o = t(77),
        i = t(80);n.exports = [].fill || function fill(t) {
      for (var n = r(this, !0), e = i(n.length), u = arguments, c = u.length, a = o(c > 1 ? u[1] : void 0, e), s = c > 2 ? u[2] : void 0, f = void 0 === s ? e : o(s, e); f > a;) {
        n[a++] = t;
      }return n;
    };
  }, { 77: 77, 80: 80, 81: 81 }], 8: [function (t, n, e) {
    var r = t(79),
        o = t(80),
        i = t(77);n.exports = function (t) {
      return function (n, e, u) {
        var c,
            a = r(n),
            s = o(a.length),
            f = i(u, s);if (t && e != e) {
          for (; s > f;) {
            if (c = a[f++], c != c) return !0;
          }
        } else for (; s > f; f++) {
          if ((t || f in a) && a[f] === e) return t || f;
        }return !t && -1;
      };
    };
  }, { 77: 77, 79: 79, 80: 80 }], 9: [function (t, n, e) {
    var r = t(18),
        o = t(35),
        i = t(81),
        u = t(80),
        c = t(10);n.exports = function (t) {
      var n = 1 == t,
          e = 2 == t,
          a = 3 == t,
          s = 4 == t,
          f = 6 == t,
          l = 5 == t || f;return function (h, p, v) {
        for (var g, y, d = i(h), m = o(d), x = r(p, v, 3), S = u(m.length), b = 0, w = n ? c(h, S) : e ? c(h, 0) : void 0; S > b; b++) {
          if ((l || b in m) && (g = m[b], y = x(g, b, d), t)) if (n) w[b] = y;else if (y) switch (t) {case 3:
              return !0;case 5:
              return g;case 6:
              return b;case 2:
              w.push(g);} else if (s) return !1;
        }return f ? -1 : a || s ? s : w;
      };
    };
  }, { 10: 10, 18: 18, 35: 35, 80: 80, 81: 81 }], 10: [function (t, n, e) {
    var r = t(39),
        o = t(37),
        i = t(84)("species");n.exports = function (t, n) {
      var e;return o(t) && (e = t.constructor, "function" != typeof e || e !== Array && !o(e.prototype) || (e = void 0), r(e) && (e = e[i], null === e && (e = void 0))), new (void 0 === e ? Array : e)(n);
    };
  }, { 37: 37, 39: 39, 84: 84 }], 11: [function (t, n, e) {
    var r = t(12),
        o = t(84)("toStringTag"),
        i = "Arguments" == r(function () {
      return arguments;
    }());n.exports = function (t) {
      var n, e, u;return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (e = (n = Object(t))[o]) ? e : i ? r(n) : "Object" == (u = r(n)) && "function" == typeof n.callee ? "Arguments" : u;
    };
  }, { 12: 12, 84: 84 }], 12: [function (t, n, e) {
    var r = {}.toString;n.exports = function (t) {
      return r.call(t).slice(8, -1);
    };
  }, {}], 13: [function (t, n, e) {
    "use strict";
    var r = t(47),
        o = t(32),
        i = t(54),
        u = t(18),
        c = t(70),
        a = t(20),
        s = t(28),
        f = t(43),
        l = t(45),
        h = t(83)("id"),
        p = t(31),
        v = t(39),
        g = t(66),
        y = t(21),
        d = _isExtensible2.default || v,
        m = y ? "_s" : "size",
        x = 0,
        S = function S(t, n) {
      if (!v(t)) return "symbol" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) ? t : ("string" == typeof t ? "S" : "P") + t;if (!p(t, h)) {
        if (!d(t)) return "F";if (!n) return "E";o(t, h, ++x);
      }return "O" + t[h];
    },
        b = function b(t, n) {
      var e,
          r = S(n);if ("F" !== r) return t._i[r];for (e = t._f; e; e = e.n) {
        if (e.k == n) return e;
      }
    };n.exports = { getConstructor: function getConstructor(t, n, e, o) {
        var f = t(function (t, i) {
          c(t, f, n), t._i = r.create(null), t._f = void 0, t._l = void 0, t[m] = 0, void 0 != i && s(i, e, t[o], t);
        });return i(f.prototype, { clear: function clear() {
            for (var t = this, n = t._i, e = t._f; e; e = e.n) {
              e.r = !0, e.p && (e.p = e.p.n = void 0), delete n[e.i];
            }t._f = t._l = void 0, t[m] = 0;
          }, "delete": function _delete(t) {
            var n = this,
                e = b(n, t);if (e) {
              var r = e.n,
                  o = e.p;delete n._i[e.i], e.r = !0, o && (o.n = r), r && (r.p = o), n._f == e && (n._f = r), n._l == e && (n._l = o), n[m]--;
            }return !!e;
          }, forEach: function forEach(t) {
            for (var n, e = u(t, arguments.length > 1 ? arguments[1] : void 0, 3); n = n ? n.n : this._f;) {
              for (e(n.v, n.k, this); n && n.r;) {
                n = n.p;
              }
            }
          }, has: function has(t) {
            return !!b(this, t);
          } }), y && r.setDesc(f.prototype, "size", { get: function get() {
            return a(this[m]);
          } }), f;
      }, def: function def(t, n, e) {
        var r,
            o,
            i = b(t, n);return i ? i.v = e : (t._l = i = { i: o = S(n, !0), k: n, v: e, p: r = t._l, n: void 0, r: !1 }, t._f || (t._f = i), r && (r.n = i), t[m]++, "F" !== o && (t._i[o] = i)), t;
      }, getEntry: b, setStrong: function setStrong(t, n, e) {
        f(t, n, function (t, n) {
          this._t = t, this._k = n, this._l = void 0;
        }, function () {
          for (var t = this, n = t._k, e = t._l; e && e.r;) {
            e = e.p;
          }return t._t && (t._l = e = e ? e.n : t._t._f) ? "keys" == n ? l(0, e.k) : "values" == n ? l(0, e.v) : l(0, [e.k, e.v]) : (t._t = void 0, l(1));
        }, e ? "entries" : "values", !e, !0), g(n);
      } };
  }, { 18: 18, 20: 20, 21: 21, 28: 28, 31: 31, 32: 32, 39: 39, 43: 43, 45: 45, 47: 47, 54: 54, 66: 66, 70: 70, 83: 83 }], 14: [function (t, n, e) {
    var r = t(28),
        o = t(11);n.exports = function (t) {
      return function toJSON() {
        if (o(this) != t) throw TypeError(t + "#toJSON isn't generic");var n = [];return r(this, !1, n.push, n), n;
      };
    };
  }, { 11: 11, 28: 28 }], 15: [function (t, n, e) {
    "use strict";
    var r = t(32),
        o = t(54),
        i = t(5),
        u = t(70),
        c = t(28),
        a = t(9),
        s = t(83)("weak"),
        f = t(39),
        l = t(31),
        h = _isExtensible2.default || f,
        p = a(5),
        v = a(6),
        g = 0,
        y = function y(t) {
      return t._l || (t._l = new d());
    },
        d = function d() {
      this.a = [];
    },
        m = function m(t, n) {
      return p(t.a, function (t) {
        return t[0] === n;
      });
    };d.prototype = { get: function get(t) {
        var n = m(this, t);return n ? n[1] : void 0;
      }, has: function has(t) {
        return !!m(this, t);
      }, set: function set(t, n) {
        var e = m(this, t);e ? e[1] = n : this.a.push([t, n]);
      }, "delete": function _delete(t) {
        var n = v(this.a, function (n) {
          return n[0] === t;
        });return ~n && this.a.splice(n, 1), !!~n;
      } }, n.exports = { getConstructor: function getConstructor(t, n, e, r) {
        var i = t(function (t, o) {
          u(t, i, n), t._i = g++, t._l = void 0, void 0 != o && c(o, e, t[r], t);
        });return o(i.prototype, { "delete": function _delete(t) {
            return f(t) ? h(t) ? l(t, s) && l(t[s], this._i) && delete t[s][this._i] : y(this)["delete"](t) : !1;
          }, has: function has(t) {
            return f(t) ? h(t) ? l(t, s) && l(t[s], this._i) : y(this).has(t) : !1;
          } }), i;
      }, def: function def(t, n, e) {
        return h(i(n)) ? (l(n, s) || r(n, s, {}), n[s][t._i] = e) : y(t).set(n, e), t;
      }, frozenStore: y, WEAK: s };
  }, { 28: 28, 31: 31, 32: 32, 39: 39, 5: 5, 54: 54, 70: 70, 83: 83, 9: 9 }], 16: [function (t, n, e) {
    "use strict";
    var r = t(30),
        o = t(19),
        i = t(62),
        u = t(54),
        c = t(28),
        a = t(70),
        s = t(39),
        f = t(25),
        l = t(44),
        h = t(67);n.exports = function (t, n, e, p, v, g) {
      var y = r[t],
          d = y,
          m = v ? "set" : "add",
          x = d && d.prototype,
          S = {},
          b = function b(t) {
        var n = x[t];i(x, t, "delete" == t ? function (t) {
          return g && !s(t) ? !1 : n.call(this, 0 === t ? 0 : t);
        } : "has" == t ? function has(t) {
          return g && !s(t) ? !1 : n.call(this, 0 === t ? 0 : t);
        } : "get" == t ? function get(t) {
          return g && !s(t) ? void 0 : n.call(this, 0 === t ? 0 : t);
        } : "add" == t ? function add(t) {
          return n.call(this, 0 === t ? 0 : t), this;
        } : function set(t, e) {
          return n.call(this, 0 === t ? 0 : t, e), this;
        });
      };if ("function" == typeof d && (g || x.forEach && !f(function () {
        new d().entries().next();
      }))) {
        var w,
            E = new d(),
            O = E[m](g ? {} : -0, 1) != E,
            P = f(function () {
          E.has(1);
        }),
            _ = l(function (t) {
          new d(t);
        });_ || (d = n(function (n, e) {
          a(n, d, t);var r = new y();return void 0 != e && c(e, v, r[m], r), r;
        }), d.prototype = x, x.constructor = d), g || E.forEach(function (t, n) {
          w = 1 / n === -(1 / 0);
        }), (P || w) && (b("delete"), b("has"), v && b("get")), (w || O) && b(m), g && x.clear && delete x.clear;
      } else d = p.getConstructor(n, t, v, m), u(d.prototype, e);return h(d, t), S[t] = d, o(o.G + o.W + o.F * (d != y), S), g || p.setStrong(d, t, v), d;
    };
  }, { 19: 19, 25: 25, 28: 28, 30: 30, 39: 39, 44: 44, 54: 54, 62: 62, 67: 67, 70: 70 }], 17: [function (t, n, e) {
    var r = n.exports = { version: "1.2.5" };"number" == typeof __e && (__e = r);
  }, {}], 18: [function (t, n, e) {
    var r = t(3);n.exports = function (t, n, e) {
      if (r(t), void 0 === n) return t;switch (e) {case 1:
          return function (e) {
            return t.call(n, e);
          };case 2:
          return function (e, r) {
            return t.call(n, e, r);
          };case 3:
          return function (e, r, o) {
            return t.call(n, e, r, o);
          };}return function () {
        return t.apply(n, arguments);
      };
    };
  }, { 3: 3 }], 19: [function (t, n, e) {
    var r = t(30),
        o = t(17),
        i = t(32),
        u = t(62),
        c = "prototype",
        a = function a(t, n) {
      return function () {
        return t.apply(n, arguments);
      };
    },
        s = function s(t, n, e) {
      var f,
          l,
          h,
          p,
          v = t & s.G,
          g = t & s.P,
          y = v ? r : t & s.S ? r[n] || (r[n] = {}) : (r[n] || {})[c],
          d = v ? o : o[n] || (o[n] = {});v && (e = n);for (f in e) {
        l = !(t & s.F) && y && f in y, h = (l ? y : e)[f], p = t & s.B && l ? a(h, r) : g && "function" == typeof h ? a(Function.call, h) : h, y && !l && u(y, f, h), d[f] != h && i(d, f, p), g && ((d[c] || (d[c] = {}))[f] = h);
      }
    };r.core = o, s.F = 1, s.G = 2, s.S = 4, s.P = 8, s.B = 16, s.W = 32, n.exports = s;
  }, { 17: 17, 30: 30, 32: 32, 62: 62 }], 20: [function (t, n, e) {
    n.exports = function (t) {
      if (void 0 == t) throw TypeError("Can't call method on  " + t);return t;
    };
  }, {}], 21: [function (t, n, e) {
    n.exports = !t(25)(function () {
      return 7 != Object.defineProperty({}, "a", { get: function get() {
          return 7;
        } }).a;
    });
  }, { 25: 25 }], 22: [function (t, n, e) {
    var r = t(39),
        o = t(30).document,
        i = r(o) && r(o.createElement);n.exports = function (t) {
      return i ? o.createElement(t) : {};
    };
  }, { 30: 30, 39: 39 }], 23: [function (t, n, e) {
    var r = t(47);n.exports = function (t) {
      var n = r.getKeys(t),
          e = r.getSymbols;if (e) for (var o, i = e(t), u = r.isEnum, c = 0; i.length > c;) {
        u.call(t, o = i[c++]) && n.push(o);
      }return n;
    };
  }, { 47: 47 }], 24: [function (t, n, e) {
    var r = t(84)("match");n.exports = function (t) {
      var n = /./;try {
        "/./"[t](n);
      } catch (e) {
        try {
          return n[r] = !1, !"/./"[t](n);
        } catch (o) {}
      }return !0;
    };
  }, { 84: 84 }], 25: [function (t, n, e) {
    n.exports = function (t) {
      try {
        return !!t();
      } catch (n) {
        return !0;
      }
    };
  }, {}], 26: [function (t, n, e) {
    "use strict";
    var r = t(32),
        o = t(62),
        i = t(25),
        u = t(20),
        c = t(84);n.exports = function (t, n, e) {
      var a = c(t),
          s = ""[t];i(function () {
        var n = {};return n[a] = function () {
          return 7;
        }, 7 != ""[t](n);
      }) && (o(String.prototype, t, e(u, a, s)), r(RegExp.prototype, a, 2 == n ? function (t, n) {
        return s.call(t, this, n);
      } : function (t) {
        return s.call(t, this);
      }));
    };
  }, { 20: 20, 25: 25, 32: 32, 62: 62, 84: 84 }], 27: [function (t, n, e) {
    "use strict";
    var r = t(5);n.exports = function () {
      var t = r(this),
          n = "";return t.global && (n += "g"), t.ignoreCase && (n += "i"), t.multiline && (n += "m"), t.unicode && (n += "u"), t.sticky && (n += "y"), n;
    };
  }, { 5: 5 }], 28: [function (t, n, e) {
    var r = t(18),
        o = t(41),
        i = t(36),
        u = t(5),
        c = t(80),
        a = t(85);n.exports = function (t, n, e, s) {
      var f,
          l,
          h,
          p = a(t),
          v = r(e, s, n ? 2 : 1),
          g = 0;if ("function" != typeof p) throw TypeError(t + " is not iterable!");if (i(p)) for (f = c(t.length); f > g; g++) {
        n ? v(u(l = t[g])[0], l[1]) : v(t[g]);
      } else for (h = p.call(t); !(l = h.next()).done;) {
        o(h, v, l.value, n);
      }
    };
  }, { 18: 18, 36: 36, 41: 41, 5: 5, 80: 80, 85: 85 }], 29: [function (t, n, e) {
    var r = {}.toString,
        o = t(79),
        i = t(47).getNames,
        u = "object" == (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) && _getOwnPropertyNames2.default ? (0, _getOwnPropertyNames2.default)(window) : [],
        c = function c(t) {
      try {
        return i(t);
      } catch (n) {
        return u.slice();
      }
    };n.exports.get = function getOwnPropertyNames(t) {
      return u && "[object Window]" == r.call(t) ? c(t) : i(o(t));
    };
  }, { 47: 47, 79: 79 }], 30: [function (t, n, e) {
    var r = n.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = r);
  }, {}], 31: [function (t, n, e) {
    var r = {}.hasOwnProperty;n.exports = function (t, n) {
      return r.call(t, n);
    };
  }, {}], 32: [function (t, n, e) {
    var r = t(47),
        o = t(61);n.exports = t(21) ? function (t, n, e) {
      return r.setDesc(t, n, o(1, e));
    } : function (t, n, e) {
      return t[n] = e, t;
    };
  }, { 21: 21, 47: 47, 61: 61 }], 33: [function (t, n, e) {
    n.exports = t(30).document && document.documentElement;
  }, { 30: 30 }], 34: [function (t, n, e) {
    n.exports = function (t, n, e) {
      var r = void 0 === e;switch (n.length) {case 0:
          return r ? t() : t.call(e);case 1:
          return r ? t(n[0]) : t.call(e, n[0]);case 2:
          return r ? t(n[0], n[1]) : t.call(e, n[0], n[1]);case 3:
          return r ? t(n[0], n[1], n[2]) : t.call(e, n[0], n[1], n[2]);case 4:
          return r ? t(n[0], n[1], n[2], n[3]) : t.call(e, n[0], n[1], n[2], n[3]);}return t.apply(e, n);
    };
  }, {}], 35: [function (t, n, e) {
    var r = t(12);n.exports = Object("z").propertyIsEnumerable(0) ? Object : function (t) {
      return "String" == r(t) ? t.split("") : Object(t);
    };
  }, { 12: 12 }], 36: [function (t, n, e) {
    var r = t(46),
        o = t(84)("iterator"),
        i = Array.prototype;n.exports = function (t) {
      return (r.Array || i[o]) === t;
    };
  }, { 46: 46, 84: 84 }], 37: [function (t, n, e) {
    var r = t(12);n.exports = Array.isArray || function (t) {
      return "Array" == r(t);
    };
  }, { 12: 12 }], 38: [function (t, n, e) {
    var r = t(39),
        o = Math.floor;n.exports = function isInteger(t) {
      return !r(t) && isFinite(t) && o(t) === t;
    };
  }, { 39: 39 }], 39: [function (t, n, e) {
    n.exports = function (t) {
      return "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) ? null !== t : "function" == typeof t;
    };
  }, {}], 40: [function (t, n, e) {
    var r = t(39),
        o = t(12),
        i = t(84)("match");n.exports = function (t) {
      var n;return r(t) && (void 0 !== (n = t[i]) ? !!n : "RegExp" == o(t));
    };
  }, { 12: 12, 39: 39, 84: 84 }], 41: [function (t, n, e) {
    var r = t(5);n.exports = function (t, n, e, o) {
      try {
        return o ? n(r(e)[0], e[1]) : n(e);
      } catch (i) {
        var u = t["return"];throw void 0 !== u && r(u.call(t)), i;
      }
    };
  }, { 5: 5 }], 42: [function (t, n, e) {
    "use strict";
    var r = t(47),
        o = t(61),
        i = t(67),
        u = {};t(32)(u, t(84)("iterator"), function () {
      return this;
    }), n.exports = function (t, n, e) {
      t.prototype = r.create(u, { next: o(1, e) }), i(t, n + " Iterator");
    };
  }, { 32: 32, 47: 47, 61: 61, 67: 67, 84: 84 }], 43: [function (t, n, e) {
    "use strict";
    var r = t(49),
        o = t(19),
        i = t(62),
        u = t(32),
        c = t(31),
        a = t(84)("iterator"),
        s = t(46),
        f = t(42),
        l = t(67),
        h = t(47).getProto,
        p = !([].keys && "next" in [].keys()),
        v = "@@iterator",
        g = "keys",
        y = "values",
        d = function d() {
      return this;
    };n.exports = function (t, n, e, m, x, S, b) {
      f(e, n, m);var w,
          E,
          O = function O(t) {
        if (!p && t in _) return _[t];switch (t) {case g:
            return function keys() {
              return new e(this, t);
            };case y:
            return function values() {
              return new e(this, t);
            };}return function entries() {
          return new e(this, t);
        };
      },
          P = n + " Iterator",
          _ = t.prototype,
          M = _[a] || _[v] || x && _[x],
          F = M || O(x);if (M) {
        var A = h(F.call(new t()));l(A, P, !0), !r && c(_, v) && u(A, a, d);
      }if (r && !b || !p && a in _ || u(_, a, F), s[n] = F, s[P] = d, x) if (w = { values: x == y ? F : O(y), keys: S ? F : O(g), entries: x != y ? F : O("entries") }, b) for (E in w) {
        E in _ || i(_, E, w[E]);
      } else o(o.P + o.F * p, n, w);return w;
    };
  }, { 19: 19, 31: 31, 32: 32, 42: 42, 46: 46, 47: 47, 49: 49, 62: 62, 67: 67, 84: 84 }], 44: [function (t, n, e) {
    var r = t(84)("iterator"),
        o = !1;try {
      var i = [7][r]();i["return"] = function () {
        o = !0;
      }, (0, _from2.default)(i, function () {
        throw 2;
      });
    } catch (u) {}n.exports = function (t, n) {
      if (!n && !o) return !1;var e = !1;try {
        var i = [7],
            u = i[r]();u.next = function () {
          e = !0;
        }, i[r] = function () {
          return u;
        }, t(i);
      } catch (c) {}return e;
    };
  }, { 84: 84 }], 45: [function (t, n, e) {
    n.exports = function (t, n) {
      return { value: n, done: !!t };
    };
  }, {}], 46: [function (t, n, e) {
    n.exports = {};
  }, {}], 47: [function (t, n, e) {
    var r = Object;n.exports = { create: r.create, getProto: r.getPrototypeOf, isEnum: {}.propertyIsEnumerable, getDesc: r.getOwnPropertyDescriptor, setDesc: r.defineProperty, setDescs: r.defineProperties, getKeys: r.keys, getNames: r.getOwnPropertyNames, getSymbols: r.getOwnPropertySymbols, each: [].forEach };
  }, {}], 48: [function (t, n, e) {
    var r = t(47),
        o = t(79);n.exports = function (t, n) {
      for (var e, i = o(t), u = r.getKeys(i), c = u.length, a = 0; c > a;) {
        if (i[e = u[a++]] === n) return e;
      }
    };
  }, { 47: 47, 79: 79 }], 49: [function (t, n, e) {
    n.exports = !1;
  }, {}], 50: [function (t, n, e) {
    n.exports = _expm2.default || function expm1(t) {
      return 0 == (t = +t) ? t : t > -1e-6 && 1e-6 > t ? t + t * t / 2 : Math.exp(t) - 1;
    };
  }, {}], 51: [function (t, n, e) {
    n.exports = _log1p2.default || function log1p(t) {
      return (t = +t) > -1e-8 && 1e-8 > t ? t - t * t / 2 : Math.log(1 + t);
    };
  }, {}], 52: [function (t, n, e) {
    n.exports = _sign2.default || function sign(t) {
      return 0 == (t = +t) || t != t ? t : 0 > t ? -1 : 1;
    };
  }, {}], 53: [function (t, n, e) {
    var r,
        o,
        i,
        u = t(30),
        c = t(76).set,
        a = u.MutationObserver || u.WebKitMutationObserver,
        s = u.process,
        f = "process" == t(12)(s),
        l = function l() {
      var t, n;for (f && (t = s.domain) && (s.domain = null, t.exit()); r;) {
        n = r.domain, n && n.enter(), r.fn.call(), n && n.exit(), r = r.next;
      }o = void 0, t && t.enter();
    };if (f) i = function i() {
      s.nextTick(l);
    };else if (a) {
      var h = 1,
          p = document.createTextNode("");new a(l).observe(p, { characterData: !0 }), i = function i() {
        p.data = h = -h;
      };
    } else i = function i() {
      c.call(u, l);
    };n.exports = function asap(t) {
      var n = { fn: t, next: void 0, domain: f && s.domain };o && (o.next = n), r || (r = n, i()), o = n;
    };
  }, { 12: 12, 30: 30, 76: 76 }], 54: [function (t, n, e) {
    var r = t(62);n.exports = function (t, n) {
      for (var e in n) {
        r(t, e, n[e]);
      }return t;
    };
  }, { 62: 62 }], 55: [function (t, n, e) {
    var r = t(47),
        o = t(81),
        i = t(35);n.exports = t(25)(function () {
      var t = _assign2.default,
          n = {},
          e = {},
          r = (0, _symbol2.default)(),
          o = "abcdefghijklmnopqrst";return n[r] = 7, o.split("").forEach(function (t) {
        e[t] = t;
      }), 7 != t({}, n)[r] || (0, _keys2.default)(t({}, e)).join("") != o;
    }) ? function assign(t, n) {
      for (var e = o(t), u = arguments, c = u.length, a = 1, s = r.getKeys, f = r.getSymbols, l = r.isEnum; c > a;) {
        for (var h, p = i(u[a++]), v = f ? s(p).concat(f(p)) : s(p), g = v.length, y = 0; g > y;) {
          l.call(p, h = v[y++]) && (e[h] = p[h]);
        }
      }return e;
    } : _assign2.default;
  }, { 25: 25, 35: 35, 47: 47, 81: 81 }], 56: [function (t, n, e) {
    var r = (t(19), t(17)),
        o = t(25);n.exports = function (n, e) {
      var i = t(19),
          u = (r.Object || {})[n] || Object[n],
          c = {};c[n] = e(u), i(i.S + i.F * o(function () {
        u(1);
      }), "Object", c);
    };
  }, { 17: 17, 19: 19, 25: 25 }], 57: [function (t, n, e) {
    var r = t(47),
        o = t(79),
        i = r.isEnum;n.exports = function (t) {
      return function (n) {
        for (var e, u = o(n), c = r.getKeys(u), a = c.length, s = 0, f = []; a > s;) {
          i.call(u, e = c[s++]) && f.push(t ? [e, u[e]] : u[e]);
        }return f;
      };
    };
  }, { 47: 47, 79: 79 }], 58: [function (t, n, e) {
    var r = t(47),
        o = t(5),
        i = t(30).Reflect;n.exports = i && i.ownKeys || function ownKeys(t) {
      var n = r.getNames(o(t)),
          e = r.getSymbols;return e ? n.concat(e(t)) : n;
    };
  }, { 30: 30, 47: 47, 5: 5 }], 59: [function (t, n, e) {
    "use strict";
    var r = t(60),
        o = t(34),
        i = t(3);n.exports = function () {
      for (var t = i(this), n = arguments.length, e = Array(n), u = 0, c = r._, a = !1; n > u;) {
        (e[u] = arguments[u++]) === c && (a = !0);
      }return function () {
        var r,
            i = this,
            u = arguments,
            s = u.length,
            f = 0,
            l = 0;if (!a && !s) return o(t, e, i);if (r = e.slice(), a) for (; n > f; f++) {
          r[f] === c && (r[f] = u[l++]);
        }for (; s > l;) {
          r.push(u[l++]);
        }return o(t, r, i);
      };
    };
  }, { 3: 3, 34: 34, 60: 60 }], 60: [function (t, n, e) {
    n.exports = t(30);
  }, { 30: 30 }], 61: [function (t, n, e) {
    n.exports = function (t, n) {
      return { enumerable: !(1 & t), configurable: !(2 & t), writable: !(4 & t), value: n };
    };
  }, {}], 62: [function (t, n, e) {
    var r = t(30),
        o = t(32),
        i = t(83)("src"),
        u = "toString",
        c = Function[u],
        a = ("" + c).split(u);t(17).inspectSource = function (t) {
      return c.call(t);
    }, (n.exports = function (t, n, e, u) {
      "function" == typeof e && (e.hasOwnProperty(i) || o(e, i, t[n] ? "" + t[n] : a.join(String(n))), e.hasOwnProperty("name") || o(e, "name", n)), t === r ? t[n] = e : (u || delete t[n], o(t, n, e));
    })(Function.prototype, u, function toString() {
      return "function" == typeof this && this[i] || c.call(this);
    });
  }, { 17: 17, 30: 30, 32: 32, 83: 83 }], 63: [function (t, n, e) {
    n.exports = function (t, n) {
      var e = n === Object(n) ? function (t) {
        return n[t];
      } : n;return function (n) {
        return String(n).replace(t, e);
      };
    };
  }, {}], 64: [function (t, n, e) {
    n.exports = _is2.default || function is(t, n) {
      return t === n ? 0 !== t || 1 / t === 1 / n : t != t && n != n;
    };
  }, {}], 65: [function (t, n, e) {
    var r = t(47).getDesc,
        o = t(39),
        i = t(5),
        u = function u(t, n) {
      if (i(t), !o(n) && null !== n) throw TypeError(n + ": can't set as prototype!");
    };n.exports = { set: _setPrototypeOf2.default || ("__proto__" in {} ? function (n, e, o) {
        try {
          o = t(18)(Function.call, r(Object.prototype, "__proto__").set, 2), o(n, []), e = !(n instanceof Array);
        } catch (i) {
          e = !0;
        }return function setPrototypeOf(t, n) {
          return u(t, n), e ? t.__proto__ = n : o(t, n), t;
        };
      }({}, !1) : void 0), check: u };
  }, { 18: 18, 39: 39, 47: 47, 5: 5 }], 66: [function (t, n, e) {
    "use strict";
    var r = t(30),
        o = t(47),
        i = t(21),
        u = t(84)("species");n.exports = function (t) {
      var n = r[t];i && n && !n[u] && o.setDesc(n, u, { configurable: !0, get: function get() {
          return this;
        } });
    };
  }, { 21: 21, 30: 30, 47: 47, 84: 84 }], 67: [function (t, n, e) {
    var r = t(47).setDesc,
        o = t(31),
        i = t(84)("toStringTag");n.exports = function (t, n, e) {
      t && !o(t = e ? t : t.prototype, i) && r(t, i, { configurable: !0, value: n });
    };
  }, { 31: 31, 47: 47, 84: 84 }], 68: [function (t, n, e) {
    var r = t(30),
        o = "__core-js_shared__",
        i = r[o] || (r[o] = {});n.exports = function (t) {
      return i[t] || (i[t] = {});
    };
  }, { 30: 30 }], 69: [function (t, n, e) {
    var r = t(5),
        o = t(3),
        i = t(84)("species");n.exports = function (t, n) {
      var e,
          u = r(t).constructor;return void 0 === u || void 0 == (e = r(u)[i]) ? n : o(e);
    };
  }, { 3: 3, 5: 5, 84: 84 }], 70: [function (t, n, e) {
    n.exports = function (t, n, e) {
      if (!(t instanceof n)) throw TypeError(e + ": use the 'new' operator!");return t;
    };
  }, {}], 71: [function (t, n, e) {
    var r = t(78),
        o = t(20);n.exports = function (t) {
      return function (n, e) {
        var i,
            u,
            c = String(o(n)),
            a = r(e),
            s = c.length;return 0 > a || a >= s ? t ? "" : void 0 : (i = c.charCodeAt(a), 55296 > i || i > 56319 || a + 1 === s || (u = c.charCodeAt(a + 1)) < 56320 || u > 57343 ? t ? c.charAt(a) : i : t ? c.slice(a, a + 2) : (i - 55296 << 10) + (u - 56320) + 65536);
      };
    };
  }, { 20: 20, 78: 78 }], 72: [function (t, n, e) {
    var r = t(40),
        o = t(20);n.exports = function (t, n, e) {
      if (r(n)) throw TypeError("String#" + e + " doesn't accept regex!");return String(o(t));
    };
  }, { 20: 20, 40: 40 }], 73: [function (t, n, e) {
    var r = t(80),
        o = t(74),
        i = t(20);n.exports = function (t, n, e, u) {
      var c = String(i(t)),
          a = c.length,
          s = void 0 === e ? " " : String(e),
          f = r(n);if (a >= f) return c;"" == s && (s = " ");var l = f - a,
          h = o.call(s, Math.ceil(l / s.length));return h.length > l && (h = h.slice(0, l)), u ? h + c : c + h;
    };
  }, { 20: 20, 74: 74, 80: 80 }], 74: [function (t, n, e) {
    "use strict";
    var r = t(78),
        o = t(20);n.exports = function repeat(t) {
      var n = String(o(this)),
          e = "",
          i = r(t);if (0 > i || i == 1 / 0) throw RangeError("Count can't be negative");for (; i > 0; (i >>>= 1) && (n += n)) {
        1 & i && (e += n);
      }return e;
    };
  }, { 20: 20, 78: 78 }], 75: [function (t, n, e) {
    var r = t(19),
        o = t(20),
        i = t(25),
        u = "\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF",
        c = "[" + u + "]",
        a = "​",
        s = RegExp("^" + c + c + "*"),
        f = RegExp(c + c + "*$"),
        l = function l(t, n) {
      var e = {};e[t] = n(h), r(r.P + r.F * i(function () {
        return !!u[t]() || a[t]() != a;
      }), "String", e);
    },
        h = l.trim = function (t, n) {
      return t = String(o(t)), 1 & n && (t = t.replace(s, "")), 2 & n && (t = t.replace(f, "")), t;
    };n.exports = l;
  }, { 19: 19, 20: 20, 25: 25 }], 76: [function (t, n, e) {
    "use strict";
    var r,
        o,
        i,
        u = t(18),
        c = t(34),
        a = t(33),
        s = t(22),
        f = t(30),
        l = f.process,
        h = f.setImmediate,
        p = f.clearImmediate,
        v = f.MessageChannel,
        g = 0,
        y = {},
        d = "onreadystatechange",
        m = function m() {
      var t = +this;if (y.hasOwnProperty(t)) {
        var n = y[t];delete y[t], n();
      }
    },
        x = function x(t) {
      m.call(t.data);
    };h && p || (h = function setImmediate(t) {
      for (var n = [], e = 1; arguments.length > e;) {
        n.push(arguments[e++]);
      }return y[++g] = function () {
        c("function" == typeof t ? t : Function(t), n);
      }, r(g), g;
    }, p = function clearImmediate(t) {
      delete y[t];
    }, "process" == t(12)(l) ? r = function r(t) {
      l.nextTick(u(m, t, 1));
    } : v ? (o = new v(), i = o.port2, o.port1.onmessage = x, r = u(i.postMessage, i, 1)) : f.addEventListener && "function" == typeof postMessage && !f.importScripts ? (r = function r(t) {
      f.postMessage(t + "", "*");
    }, f.addEventListener("message", x, !1)) : r = d in s("script") ? function (t) {
      a.appendChild(s("script"))[d] = function () {
        a.removeChild(this), m.call(t);
      };
    } : function (t) {
      setTimeout(u(m, t, 1), 0);
    }), n.exports = { set: h, clear: p };
  }, { 12: 12, 18: 18, 22: 22, 30: 30, 33: 33, 34: 34 }], 77: [function (t, n, e) {
    var r = t(78),
        o = Math.max,
        i = Math.min;n.exports = function (t, n) {
      return t = r(t), 0 > t ? o(t + n, 0) : i(t, n);
    };
  }, { 78: 78 }], 78: [function (t, n, e) {
    var r = Math.ceil,
        o = Math.floor;n.exports = function (t) {
      return isNaN(t = +t) ? 0 : (t > 0 ? o : r)(t);
    };
  }, {}], 79: [function (t, n, e) {
    var r = t(35),
        o = t(20);n.exports = function (t) {
      return r(o(t));
    };
  }, { 20: 20, 35: 35 }], 80: [function (t, n, e) {
    var r = t(78),
        o = Math.min;n.exports = function (t) {
      return t > 0 ? o(r(t), 9007199254740991) : 0;
    };
  }, { 78: 78 }], 81: [function (t, n, e) {
    var r = t(20);n.exports = function (t) {
      return Object(r(t));
    };
  }, { 20: 20 }], 82: [function (t, n, e) {
    var r = t(39);n.exports = function (t, n) {
      if (!r(t)) return t;var e, o;if (n && "function" == typeof (e = t.toString) && !r(o = e.call(t))) return o;if ("function" == typeof (e = t.valueOf) && !r(o = e.call(t))) return o;if (!n && "function" == typeof (e = t.toString) && !r(o = e.call(t))) return o;throw TypeError("Can't convert object to primitive value");
    };
  }, { 39: 39 }], 83: [function (t, n, e) {
    var r = 0,
        o = Math.random();n.exports = function (t) {
      return "Symbol(".concat(void 0 === t ? "" : t, ")_", (++r + o).toString(36));
    };
  }, {}], 84: [function (t, n, e) {
    var r = t(68)("wks"),
        o = t(83),
        i = t(30).Symbol;n.exports = function (t) {
      return r[t] || (r[t] = i && i[t] || (i || o)("Symbol." + t));
    };
  }, { 30: 30, 68: 68, 83: 83 }], 85: [function (t, n, e) {
    var r = t(11),
        o = t(84)("iterator"),
        i = t(46);n.exports = t(17).getIteratorMethod = function (t) {
      return void 0 != t ? t[o] || t["@@iterator"] || i[r(t)] : void 0;
    };
  }, { 11: 11, 17: 17, 46: 46, 84: 84 }], 86: [function (t, n, e) {
    "use strict";
    var r,
        o = t(47),
        i = t(21),
        u = t(61),
        c = t(33),
        a = t(22),
        s = t(31),
        f = t(12),
        l = t(19),
        h = t(34),
        p = t(9),
        v = t(83)("__proto__"),
        g = t(39),
        y = t(5),
        d = t(3),
        m = t(81),
        x = t(79),
        S = t(78),
        b = t(77),
        w = t(80),
        E = t(35),
        O = t(25),
        P = Object.prototype,
        _ = [],
        M = _.slice,
        F = _.join,
        A = o.setDesc,
        j = o.getDesc,
        N = o.setDescs,
        I = t(8)(!1),
        k = {};i || (r = !O(function () {
      return 7 != A(a("div"), "a", { get: function get() {
          return 7;
        } }).a;
    }), o.setDesc = function (t, n, e) {
      if (r) try {
        return A(t, n, e);
      } catch (o) {}if ("get" in e || "set" in e) throw TypeError("Accessors not supported!");return "value" in e && (y(t)[n] = e.value), t;
    }, o.getDesc = function (t, n) {
      if (r) try {
        return j(t, n);
      } catch (e) {}return s(t, n) ? u(!P.propertyIsEnumerable.call(t, n), t[n]) : void 0;
    }, o.setDescs = N = function N(t, n) {
      y(t);for (var e, r = o.getKeys(n), i = r.length, u = 0; i > u;) {
        o.setDesc(t, e = r[u++], n[e]);
      }return t;
    }), l(l.S + l.F * !i, "Object", { getOwnPropertyDescriptor: o.getDesc, defineProperty: o.setDesc, defineProperties: N });var D = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),
        T = D.concat("length", "prototype"),
        L = D.length,
        _R = function R() {
      var t,
          n = a("iframe"),
          e = L,
          r = ">";for (n.style.display = "none", c.appendChild(n), n.src = "javascript:", t = n.contentWindow.document, t.open(), t.write("<script>document.F=Object</script" + r), t.close(), _R = t.F; e--;) {
        delete _R.prototype[D[e]];
      }return _R();
    },
        C = function C(t, n) {
      return function (e) {
        var r,
            o = x(e),
            i = 0,
            u = [];for (r in o) {
          r != v && s(o, r) && u.push(r);
        }for (; n > i;) {
          s(o, r = t[i++]) && (~I(u, r) || u.push(r));
        }return u;
      };
    },
        G = function G() {};l(l.S, "Object", { getPrototypeOf: o.getProto = o.getProto || function (t) {
        return t = m(t), s(t, v) ? t[v] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? P : null;
      }, getOwnPropertyNames: o.getNames = o.getNames || C(T, T.length, !0), create: o.create = o.create || function (t, n) {
        var e;return null !== t ? (G.prototype = y(t), e = new G(), G.prototype = null, e[v] = t) : e = _R(), void 0 === n ? e : N(e, n);
      }, keys: o.getKeys = o.getKeys || C(D, L, !1) });var W = function W(t, n, e) {
      if (!(n in k)) {
        for (var r = [], o = 0; n > o; o++) {
          r[o] = "a[" + o + "]";
        }k[n] = Function("F,a", "return new F(" + r.join(",") + ")");
      }return k[n](t, e);
    };l(l.P, "Function", { bind: function bind(t) {
        var n = d(this),
            e = M.call(arguments, 1),
            r = function r() {
          var o = e.concat(M.call(arguments));return this instanceof r ? W(n, o.length, o) : h(n, o, t);
        };return g(n.prototype) && (r.prototype = n.prototype), r;
      } });var z = O(function () {
      c && M.call(c);
    });l(l.P + l.F * z, "Array", { slice: function slice(t, n) {
        var e = w(this.length),
            r = f(this);if (n = void 0 === n ? e : n, "Array" == r) return M.call(this, t, n);for (var o = b(t, e), i = b(n, e), u = w(i - o), c = Array(u), a = 0; u > a; a++) {
          c[a] = "String" == r ? this.charAt(o + a) : this[o + a];
        }return c;
      } }), l(l.P + l.F * (E != Object), "Array", { join: function join() {
        return F.apply(E(this), arguments);
      } }), l(l.S, "Array", { isArray: t(37) });var K = function K(t) {
      return function (n, e) {
        d(n);var r = E(this),
            o = w(r.length),
            i = t ? o - 1 : 0,
            u = t ? -1 : 1;if (arguments.length < 2) for (;;) {
          if (i in r) {
            e = r[i], i += u;break;
          }if (i += u, t ? 0 > i : i >= o) throw TypeError("Reduce of empty array with no initial value");
        }for (; t ? i >= 0 : o > i; i += u) {
          i in r && (e = n(e, r[i], i, this));
        }return e;
      };
    },
        U = function U(t) {
      return function (n) {
        return t(this, n, arguments[1]);
      };
    };l(l.P, "Array", { forEach: o.each = o.each || U(p(0)), map: U(p(1)), filter: U(p(2)), some: U(p(3)), every: U(p(4)), reduce: K(!1), reduceRight: K(!0), indexOf: U(I), lastIndexOf: function lastIndexOf(t, n) {
        var e = x(this),
            r = w(e.length),
            o = r - 1;for (arguments.length > 1 && (o = Math.min(o, S(n))), 0 > o && (o = w(r + o)); o >= 0; o--) {
          if (o in e && e[o] === t) return o;
        }return -1;
      } }), l(l.S, "Date", { now: function now() {
        return +new Date();
      } });var q = function q(t) {
      return t > 9 ? t : "0" + t;
    },
        J = new Date(-5e13 - 1),
        B = !(J.toISOString && "0385-07-25T07:06:39.999Z" == J.toISOString() && O(function () {
      new Date(NaN).toISOString();
    }));l(l.P + l.F * B, "Date", { toISOString: function toISOString() {
        if (!isFinite(this)) throw RangeError("Invalid time value");var t = this,
            n = t.getUTCFullYear(),
            e = t.getUTCMilliseconds(),
            r = 0 > n ? "-" : n > 9999 ? "+" : "";return r + ("00000" + Math.abs(n)).slice(r ? -6 : -4) + "-" + q(t.getUTCMonth() + 1) + "-" + q(t.getUTCDate()) + "T" + q(t.getUTCHours()) + ":" + q(t.getUTCMinutes()) + ":" + q(t.getUTCSeconds()) + "." + (e > 99 ? e : "0" + q(e)) + "Z";
      } });
  }, { 12: 12, 19: 19, 21: 21, 22: 22, 25: 25, 3: 3, 31: 31, 33: 33, 34: 34, 35: 35, 37: 37, 39: 39, 47: 47, 5: 5, 61: 61, 77: 77, 78: 78, 79: 79, 8: 8, 80: 80, 81: 81, 83: 83, 9: 9 }], 87: [function (t, n, e) {
    "use strict";
    var r = t(19);r(r.P, "Array", { copyWithin: t(6) }), t(4)("copyWithin");
  }, { 19: 19, 4: 4, 6: 6 }], 88: [function (t, n, e) {
    var r = t(19);r(r.P, "Array", { fill: t(7) }), t(4)("fill");
  }, { 19: 19, 4: 4, 7: 7 }], 89: [function (t, n, e) {
    "use strict";
    var r = "findIndex",
        o = t(19),
        i = !0,
        u = t(9)(6);r in [] && Array(1)[r](function () {
      i = !1;
    }), o(o.P + o.F * i, "Array", { findIndex: function findIndex(t) {
        return u(this, t, arguments.length > 1 ? arguments[1] : void 0);
      } }), t(4)(r);
  }, { 19: 19, 4: 4, 9: 9 }], 90: [function (t, n, e) {
    "use strict";
    var r = "find",
        o = t(19),
        i = !0,
        u = t(9)(5);r in [] && Array(1)[r](function () {
      i = !1;
    }), o(o.P + o.F * i, "Array", { find: function find(t) {
        return u(this, t, arguments.length > 1 ? arguments[1] : void 0);
      } }), t(4)(r);
  }, { 19: 19, 4: 4, 9: 9 }], 91: [function (t, n, e) {
    "use strict";
    var r = t(18),
        o = t(19),
        i = t(81),
        u = t(41),
        c = t(36),
        a = t(80),
        s = t(85);o(o.S + o.F * !t(44)(function (t) {
      (0, _from2.default)(t);
    }), "Array", { from: function from(t) {
        var n,
            e,
            o,
            f,
            l = i(t),
            h = "function" == typeof this ? this : Array,
            p = arguments,
            v = p.length,
            g = v > 1 ? p[1] : void 0,
            y = void 0 !== g,
            d = 0,
            m = s(l);if (y && (g = r(g, v > 2 ? p[2] : void 0, 2)), void 0 == m || h == Array && c(m)) for (n = a(l.length), e = new h(n); n > d; d++) {
          e[d] = y ? g(l[d], d) : l[d];
        } else for (f = m.call(l), e = new h(); !(o = f.next()).done; d++) {
          e[d] = y ? u(f, g, [o.value, d], !0) : o.value;
        }return e.length = d, e;
      } });
  }, { 18: 18, 19: 19, 36: 36, 41: 41, 44: 44, 80: 80, 81: 81, 85: 85 }], 92: [function (t, n, e) {
    "use strict";
    var r = t(4),
        o = t(45),
        i = t(46),
        u = t(79);n.exports = t(43)(Array, "Array", function (t, n) {
      this._t = u(t), this._i = 0, this._k = n;
    }, function () {
      var t = this._t,
          n = this._k,
          e = this._i++;return !t || e >= t.length ? (this._t = void 0, o(1)) : "keys" == n ? o(0, e) : "values" == n ? o(0, t[e]) : o(0, [e, t[e]]);
    }, "values"), i.Arguments = i.Array, r("keys"), r("values"), r("entries");
  }, { 4: 4, 43: 43, 45: 45, 46: 46, 79: 79 }], 93: [function (t, n, e) {
    "use strict";
    var r = t(19);r(r.S + r.F * t(25)(function () {
      function F() {}return !(_of2.default.call(F) instanceof F);
    }), "Array", { of: function of() {
        for (var t = 0, n = arguments, e = n.length, r = new ("function" == typeof this ? this : Array)(e); e > t;) {
          r[t] = n[t++];
        }return r.length = e, r;
      } });
  }, { 19: 19, 25: 25 }], 94: [function (t, n, e) {
    t(66)("Array");
  }, { 66: 66 }], 95: [function (t, n, e) {
    "use strict";
    var r = t(47),
        o = t(39),
        i = t(84)("hasInstance"),
        u = Function.prototype;i in u || r.setDesc(u, i, { value: function value(t) {
        if ("function" != typeof this || !o(t)) return !1;if (!o(this.prototype)) return t instanceof this;for (; t = r.getProto(t);) {
          if (this.prototype === t) return !0;
        }return !1;
      } });
  }, { 39: 39, 47: 47, 84: 84 }], 96: [function (t, n, e) {
    var r = t(47).setDesc,
        o = t(61),
        i = t(31),
        u = Function.prototype,
        c = /^\s*function ([^ (]*)/,
        a = "name";a in u || t(21) && r(u, a, { configurable: !0, get: function get() {
        var t = ("" + this).match(c),
            n = t ? t[1] : "";return i(this, a) || r(this, a, o(5, n)), n;
      } });
  }, { 21: 21, 31: 31, 47: 47, 61: 61 }], 97: [function (t, n, e) {
    "use strict";
    var r = t(13);t(16)("Map", function (t) {
      return function Map() {
        return t(this, arguments.length > 0 ? arguments[0] : void 0);
      };
    }, { get: function get(t) {
        var n = r.getEntry(this, t);return n && n.v;
      }, set: function set(t, n) {
        return r.def(this, 0 === t ? 0 : t, n);
      } }, r, !0);
  }, { 13: 13, 16: 16 }], 98: [function (t, n, e) {
    var r = t(19),
        o = t(51),
        i = Math.sqrt,
        u = _acosh2.default;r(r.S + r.F * !(u && 710 == Math.floor(u(Number.MAX_VALUE))), "Math", { acosh: function acosh(t) {
        return (t = +t) < 1 ? NaN : t > 94906265.62425156 ? Math.log(t) + Math.LN2 : o(t - 1 + i(t - 1) * i(t + 1));
      } });
  }, { 19: 19, 51: 51 }], 99: [function (t, n, e) {
    function asinh(t) {
      return isFinite(t = +t) && 0 != t ? 0 > t ? -asinh(-t) : Math.log(t + Math.sqrt(t * t + 1)) : t;
    }var r = t(19);r(r.S, "Math", { asinh: asinh });
  }, { 19: 19 }], 100: [function (t, n, e) {
    var r = t(19);r(r.S, "Math", { atanh: function atanh(t) {
        return 0 == (t = +t) ? t : Math.log((1 + t) / (1 - t)) / 2;
      } });
  }, { 19: 19 }], 101: [function (t, n, e) {
    var r = t(19),
        o = t(52);r(r.S, "Math", { cbrt: function cbrt(t) {
        return o(t = +t) * Math.pow(Math.abs(t), 1 / 3);
      } });
  }, { 19: 19, 52: 52 }], 102: [function (t, n, e) {
    var r = t(19);r(r.S, "Math", { clz32: function clz32(t) {
        return (t >>>= 0) ? 31 - Math.floor(Math.log(t + .5) * Math.LOG2E) : 32;
      } });
  }, { 19: 19 }], 103: [function (t, n, e) {
    var r = t(19),
        o = Math.exp;r(r.S, "Math", { cosh: function cosh(t) {
        return (o(t = +t) + o(-t)) / 2;
      } });
  }, { 19: 19 }], 104: [function (t, n, e) {
    var r = t(19);r(r.S, "Math", { expm1: t(50) });
  }, { 19: 19, 50: 50 }], 105: [function (t, n, e) {
    var r = t(19),
        o = t(52),
        i = Math.pow,
        u = i(2, -52),
        c = i(2, -23),
        a = i(2, 127) * (2 - c),
        s = i(2, -126),
        f = function f(t) {
      return t + 1 / u - 1 / u;
    };r(r.S, "Math", { fround: function fround(t) {
        var n,
            e,
            r = Math.abs(t),
            i = o(t);return s > r ? i * f(r / s / c) * s * c : (n = (1 + c / u) * r, e = n - (n - r), e > a || e != e ? i * (1 / 0) : i * e);
      } });
  }, { 19: 19, 52: 52 }], 106: [function (t, n, e) {
    var r = t(19),
        o = Math.abs;r(r.S, "Math", { hypot: function hypot(t, n) {
        for (var e, r, i = 0, u = 0, c = arguments, a = c.length, s = 0; a > u;) {
          e = o(c[u++]), e > s ? (r = s / e, i = i * r * r + 1, s = e) : e > 0 ? (r = e / s, i += r * r) : i += e;
        }return s === 1 / 0 ? 1 / 0 : s * Math.sqrt(i);
      } });
  }, { 19: 19 }], 107: [function (t, n, e) {
    var r = t(19),
        o = _imul2.default;r(r.S + r.F * t(25)(function () {
      return -5 != o(4294967295, 5) || 2 != o.length;
    }), "Math", { imul: function imul(t, n) {
        var e = 65535,
            r = +t,
            o = +n,
            i = e & r,
            u = e & o;return 0 | i * u + ((e & r >>> 16) * u + i * (e & o >>> 16) << 16 >>> 0);
      } });
  }, { 19: 19, 25: 25 }], 108: [function (t, n, e) {
    var r = t(19);r(r.S, "Math", { log10: function log10(t) {
        return Math.log(t) / Math.LN10;
      } });
  }, { 19: 19 }], 109: [function (t, n, e) {
    var r = t(19);r(r.S, "Math", { log1p: t(51) });
  }, { 19: 19, 51: 51 }], 110: [function (t, n, e) {
    var r = t(19);r(r.S, "Math", { log2: function log2(t) {
        return Math.log(t) / Math.LN2;
      } });
  }, { 19: 19 }], 111: [function (t, n, e) {
    var r = t(19);r(r.S, "Math", { sign: t(52) });
  }, { 19: 19, 52: 52 }], 112: [function (t, n, e) {
    var r = t(19),
        o = t(50),
        i = Math.exp;r(r.S + r.F * t(25)(function () {
      return -2e-17 != !(0, _sinh2.default)(-2e-17);
    }), "Math", { sinh: function sinh(t) {
        return Math.abs(t = +t) < 1 ? (o(t) - o(-t)) / 2 : (i(t - 1) - i(-t - 1)) * (Math.E / 2);
      } });
  }, { 19: 19, 25: 25, 50: 50 }], 113: [function (t, n, e) {
    var r = t(19),
        o = t(50),
        i = Math.exp;r(r.S, "Math", { tanh: function tanh(t) {
        var n = o(t = +t),
            e = o(-t);return n == 1 / 0 ? 1 : e == 1 / 0 ? -1 : (n - e) / (i(t) + i(-t));
      } });
  }, { 19: 19, 50: 50 }], 114: [function (t, n, e) {
    var r = t(19);r(r.S, "Math", { trunc: function trunc(t) {
        return (t > 0 ? Math.floor : Math.ceil)(t);
      } });
  }, { 19: 19 }], 115: [function (t, n, e) {
    "use strict";
    var r = t(47),
        o = t(30),
        i = t(31),
        u = t(12),
        c = t(82),
        a = t(25),
        s = t(75).trim,
        f = "Number",
        l = o[f],
        h = l,
        p = l.prototype,
        v = u(r.create(p)) == f,
        g = "trim" in String.prototype,
        y = function y(t) {
      var n = c(t, !1);if ("string" == typeof n && n.length > 2) {
        n = g ? n.trim() : s(n, 3);var e,
            r,
            o,
            i = n.charCodeAt(0);if (43 === i || 45 === i) {
          if (e = n.charCodeAt(2), 88 === e || 120 === e) return NaN;
        } else if (48 === i) {
          switch (n.charCodeAt(1)) {case 66:case 98:
              r = 2, o = 49;break;case 79:case 111:
              r = 8, o = 55;break;default:
              return +n;}for (var u, a = n.slice(2), f = 0, l = a.length; l > f; f++) {
            if (u = a.charCodeAt(f), 48 > u || u > o) return NaN;
          }return parseInt(a, r);
        }
      }return +n;
    };l(" 0o1") && l("0b1") && !l("+0x1") || (l = function Number(t) {
      var n = arguments.length < 1 ? 0 : t,
          e = this;return e instanceof l && (v ? a(function () {
        p.valueOf.call(e);
      }) : u(e) != f) ? new h(y(n)) : y(n);
    }, r.each.call(t(21) ? r.getNames(h) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), function (t) {
      i(h, t) && !i(l, t) && r.setDesc(l, t, r.getDesc(h, t));
    }), l.prototype = p, p.constructor = l, t(62)(o, f, l));
  }, { 12: 12, 21: 21, 25: 25, 30: 30, 31: 31, 47: 47, 62: 62, 75: 75, 82: 82 }], 116: [function (t, n, e) {
    var r = t(19);r(r.S, "Number", { EPSILON: Math.pow(2, -52) });
  }, { 19: 19 }], 117: [function (t, n, e) {
    var r = t(19),
        o = t(30).isFinite;r(r.S, "Number", { isFinite: function isFinite(t) {
        return "number" == typeof t && o(t);
      } });
  }, { 19: 19, 30: 30 }], 118: [function (t, n, e) {
    var r = t(19);r(r.S, "Number", { isInteger: t(38) });
  }, { 19: 19, 38: 38 }], 119: [function (t, n, e) {
    var r = t(19);r(r.S, "Number", { isNaN: function isNaN(t) {
        return t != t;
      } });
  }, { 19: 19 }], 120: [function (t, n, e) {
    var r = t(19),
        o = t(38),
        i = Math.abs;r(r.S, "Number", { isSafeInteger: function isSafeInteger(t) {
        return o(t) && i(t) <= 9007199254740991;
      } });
  }, { 19: 19, 38: 38 }], 121: [function (t, n, e) {
    var r = t(19);r(r.S, "Number", { MAX_SAFE_INTEGER: 9007199254740991 });
  }, { 19: 19 }], 122: [function (t, n, e) {
    var r = t(19);r(r.S, "Number", { MIN_SAFE_INTEGER: -9007199254740991 });
  }, { 19: 19 }], 123: [function (t, n, e) {
    var r = t(19);r(r.S, "Number", { parseFloat: parseFloat });
  }, { 19: 19 }], 124: [function (t, n, e) {
    var r = t(19);r(r.S, "Number", { parseInt: parseInt });
  }, { 19: 19 }], 125: [function (t, n, e) {
    var r = t(19);r(r.S + r.F, "Object", { assign: t(55) });
  }, { 19: 19, 55: 55 }], 126: [function (t, n, e) {
    var r = t(39);t(56)("freeze", function (t) {
      return function freeze(n) {
        return t && r(n) ? t(n) : n;
      };
    });
  }, { 39: 39, 56: 56 }], 127: [function (t, n, e) {
    var r = t(79);t(56)("getOwnPropertyDescriptor", function (t) {
      return function getOwnPropertyDescriptor(n, e) {
        return t(r(n), e);
      };
    });
  }, { 56: 56, 79: 79 }], 128: [function (t, n, e) {
    t(56)("getOwnPropertyNames", function () {
      return t(29).get;
    });
  }, { 29: 29, 56: 56 }], 129: [function (t, n, e) {
    var r = t(81);t(56)("getPrototypeOf", function (t) {
      return function getPrototypeOf(n) {
        return t(r(n));
      };
    });
  }, { 56: 56, 81: 81 }], 130: [function (t, n, e) {
    var r = t(39);t(56)("isExtensible", function (t) {
      return function isExtensible(n) {
        return r(n) ? t ? t(n) : !0 : !1;
      };
    });
  }, { 39: 39, 56: 56 }], 131: [function (t, n, e) {
    var r = t(39);t(56)("isFrozen", function (t) {
      return function isFrozen(n) {
        return r(n) ? t ? t(n) : !1 : !0;
      };
    });
  }, { 39: 39, 56: 56 }], 132: [function (t, n, e) {
    var r = t(39);t(56)("isSealed", function (t) {
      return function isSealed(n) {
        return r(n) ? t ? t(n) : !1 : !0;
      };
    });
  }, { 39: 39, 56: 56 }], 133: [function (t, n, e) {
    var r = t(19);r(r.S, "Object", { is: t(64) });
  }, { 19: 19, 64: 64 }], 134: [function (t, n, e) {
    var r = t(81);t(56)("keys", function (t) {
      return function keys(n) {
        return t(r(n));
      };
    });
  }, { 56: 56, 81: 81 }], 135: [function (t, n, e) {
    var r = t(39);t(56)("preventExtensions", function (t) {
      return function preventExtensions(n) {
        return t && r(n) ? t(n) : n;
      };
    });
  }, { 39: 39, 56: 56 }], 136: [function (t, n, e) {
    var r = t(39);t(56)("seal", function (t) {
      return function seal(n) {
        return t && r(n) ? t(n) : n;
      };
    });
  }, { 39: 39, 56: 56 }], 137: [function (t, n, e) {
    var r = t(19);r(r.S, "Object", { setPrototypeOf: t(65).set });
  }, { 19: 19, 65: 65 }], 138: [function (t, n, e) {
    "use strict";
    var r = t(11),
        o = {};o[t(84)("toStringTag")] = "z", o + "" != "[object z]" && t(62)(Object.prototype, "toString", function toString() {
      return "[object " + r(this) + "]";
    }, !0);
  }, { 11: 11, 62: 62, 84: 84 }], 139: [function (t, n, e) {
    "use strict";
    var r,
        o = t(47),
        i = t(49),
        u = t(30),
        c = t(18),
        a = t(11),
        s = t(19),
        f = t(39),
        l = t(5),
        h = t(3),
        p = t(70),
        v = t(28),
        g = t(65).set,
        y = t(64),
        d = t(84)("species"),
        m = t(69),
        x = t(83)("record"),
        S = t(53),
        b = "Promise",
        w = u.process,
        E = "process" == a(w),
        O = u[b],
        P = function P(t) {
      var n = new O(function () {});return t && (n.constructor = Object), O.resolve(n) === n;
    },
        _ = function () {
      function P2(t) {
        var n = new O(t);return g(n, P2.prototype), n;
      }var n = !1;try {
        if (n = O && O.resolve && P(), g(P2, O), P2.prototype = o.create(O.prototype, { constructor: { value: P2 } }), P2.resolve(5).then(function () {}) instanceof P2 || (n = !1), n && t(21)) {
          var e = !1;O.resolve(o.setDesc({}, "then", { get: function get() {
              e = !0;
            } })), n = e;
        }
      } catch (r) {
        n = !1;
      }return n;
    }(),
        M = function M(t) {
      return f(t) && (_ ? "Promise" == a(t) : x in t);
    },
        F = function F(t, n) {
      return i && t === O && n === r ? !0 : y(t, n);
    },
        A = function A(t) {
      var n = l(t)[d];return void 0 != n ? n : t;
    },
        j = function j(t) {
      var n;return f(t) && "function" == typeof (n = t.then) ? n : !1;
    },
        N = function N(t, n) {
      if (!t.n) {
        t.n = !0;var e = t.c;S(function () {
          for (var r = t.v, o = 1 == t.s, i = 0, c = function c(n) {
            var e,
                i,
                u = o ? n.ok : n.fail;try {
              u ? (o || (t.h = !0), e = u === !0 ? r : u(r), e === n.P ? n.rej(TypeError("Promise-chain cycle")) : (i = j(e)) ? i.call(e, n.res, n.rej) : n.res(e)) : n.rej(r);
            } catch (c) {
              n.rej(c);
            }
          }; e.length > i;) {
            c(e[i++]);
          }e.length = 0, t.n = !1, n && setTimeout(function () {
            var n,
                e,
                o = t.p;I(o) && (E ? w.emit("unhandledRejection", r, o) : (n = u.onunhandledrejection) ? n({ promise: o, reason: r }) : (e = u.console) && e.error && e.error("Unhandled promise rejection", r)), t.a = void 0;
          }, 1);
        });
      }
    },
        I = function I(t) {
      var n,
          e = t[x],
          r = e.a || e.c,
          o = 0;if (e.h) return !1;for (; r.length > o;) {
        if (n = r[o++], n.fail || !I(n.P)) return !1;
      }return !0;
    },
        k = function k(t) {
      var n = this;n.d || (n.d = !0, n = n.r || n, n.v = t, n.s = 2, n.a = n.c.slice(), N(n, !0));
    },
        D = function D(t) {
      var n,
          e = this;if (!e.d) {
        e.d = !0, e = e.r || e;try {
          (n = j(t)) ? S(function () {
            var r = { r: e, d: !1 };try {
              n.call(t, c(D, r, 1), c(k, r, 1));
            } catch (o) {
              k.call(r, o);
            }
          }) : (e.v = t, e.s = 1, N(e, !1));
        } catch (r) {
          k.call({ r: e, d: !1 }, r);
        }
      }
    };_ || (O = function Promise(t) {
      h(t);var n = { p: p(this, O, b), c: [], a: void 0, s: 0, d: !1, v: void 0, h: !1, n: !1 };this[x] = n;try {
        t(c(D, n, 1), c(k, n, 1));
      } catch (e) {
        k.call(n, e);
      }
    }, t(54)(O.prototype, { then: function then(t, n) {
        var e = { ok: "function" == typeof t ? t : !0, fail: "function" == typeof n ? n : !1 },
            r = e.P = new (m(this, O))(function (t, n) {
          e.res = t, e.rej = n;
        });h(e.res), h(e.rej);var o = this[x];return o.c.push(e), o.a && o.a.push(e), o.s && N(o, !1), r;
      }, "catch": function _catch(t) {
        return this.then(void 0, t);
      } })), s(s.G + s.W + s.F * !_, { Promise: O }), t(67)(O, b), t(66)(b), r = t(17)[b], s(s.S + s.F * !_, b, { reject: function reject(t) {
        return new this(function (n, e) {
          e(t);
        });
      } }), s(s.S + s.F * (!_ || P(!0)), b, { resolve: function resolve(t) {
        return M(t) && F(t.constructor, this) ? t : new this(function (n) {
          n(t);
        });
      } }), s(s.S + s.F * !(_ && t(44)(function (t) {
      O.all(t)["catch"](function () {});
    })), b, { all: function all(t) {
        var n = A(this),
            e = [];return new n(function (r, i) {
          v(t, !1, e.push, e);var u = e.length,
              c = Array(u);u ? o.each.call(e, function (t, e) {
            n.resolve(t).then(function (t) {
              c[e] = t, --u || r(c);
            }, i);
          }) : r(c);
        });
      }, race: function race(t) {
        var n = A(this);return new n(function (e, r) {
          v(t, !1, function (t) {
            n.resolve(t).then(e, r);
          });
        });
      } });
  }, { 11: 11, 17: 17, 18: 18, 19: 19, 21: 21, 28: 28, 3: 3, 30: 30, 39: 39, 44: 44, 47: 47, 49: 49, 5: 5, 53: 53, 54: 54, 64: 64, 65: 65, 66: 66, 67: 67, 69: 69, 70: 70, 83: 83, 84: 84 }], 140: [function (t, n, e) {
    var r = t(19),
        o = Function.apply;r(r.S, "Reflect", { apply: function apply(t, n, e) {
        return o.call(t, n, e);
      } });
  }, { 19: 19 }], 141: [function (t, n, e) {
    var r = t(47),
        o = t(19),
        i = t(3),
        u = t(5),
        c = t(39),
        a = Function.bind || t(17).Function.prototype.bind;o(o.S + o.F * t(25)(function () {
      function F() {}return !((0, _construct2.default)(function () {}, [], F) instanceof F);
    }), "Reflect", { construct: function construct(t, n) {
        i(t);var e = arguments.length < 3 ? t : i(arguments[2]);if (t == e) {
          if (void 0 != n) switch (u(n).length) {case 0:
              return new t();case 1:
              return new t(n[0]);case 2:
              return new t(n[0], n[1]);case 3:
              return new t(n[0], n[1], n[2]);case 4:
              return new t(n[0], n[1], n[2], n[3]);}var o = [null];return o.push.apply(o, n), new (a.apply(t, o))();
        }var s = e.prototype,
            f = r.create(c(s) ? s : Object.prototype),
            l = Function.apply.call(t, f, n);return c(l) ? l : f;
      } });
  }, { 17: 17, 19: 19, 25: 25, 3: 3, 39: 39, 47: 47, 5: 5 }], 142: [function (t, n, e) {
    var r = t(47),
        o = t(19),
        i = t(5);o(o.S + o.F * t(25)(function () {
      (0, _defineProperty2.default)(r.setDesc({}, 1, { value: 1 }), 1, { value: 2 });
    }), "Reflect", { defineProperty: function defineProperty(t, n, e) {
        i(t);try {
          return r.setDesc(t, n, e), !0;
        } catch (o) {
          return !1;
        }
      } });
  }, { 19: 19, 25: 25, 47: 47, 5: 5 }], 143: [function (t, n, e) {
    var r = t(19),
        o = t(47).getDesc,
        i = t(5);r(r.S, "Reflect", { deleteProperty: function deleteProperty(t, n) {
        var e = o(i(t), n);return e && !e.configurable ? !1 : delete t[n];
      } });
  }, { 19: 19, 47: 47, 5: 5 }], 144: [function (t, n, e) {
    "use strict";
    var r = t(19),
        o = t(5),
        i = function i(t) {
      this._t = o(t), this._i = 0;var n,
          e = this._k = [];for (n in t) {
        e.push(n);
      }
    };t(42)(i, "Object", function () {
      var t,
          n = this,
          e = n._k;do {
        if (n._i >= e.length) return { value: void 0, done: !0 };
      } while (!((t = e[n._i++]) in n._t));return { value: t, done: !1 };
    }), r(r.S, "Reflect", { enumerate: function enumerate(t) {
        return new i(t);
      } });
  }, { 19: 19, 42: 42, 5: 5 }], 145: [function (t, n, e) {
    var r = t(47),
        o = t(19),
        i = t(5);o(o.S, "Reflect", { getOwnPropertyDescriptor: function getOwnPropertyDescriptor(t, n) {
        return r.getDesc(i(t), n);
      } });
  }, { 19: 19, 47: 47, 5: 5 }], 146: [function (t, n, e) {
    var r = t(19),
        o = t(47).getProto,
        i = t(5);r(r.S, "Reflect", { getPrototypeOf: function getPrototypeOf(t) {
        return o(i(t));
      } });
  }, { 19: 19, 47: 47, 5: 5 }], 147: [function (t, n, e) {
    function get(t, n) {
      var e,
          i,
          a = arguments.length < 3 ? t : arguments[2];return c(t) === a ? t[n] : (e = r.getDesc(t, n)) ? o(e, "value") ? e.value : void 0 !== e.get ? e.get.call(a) : void 0 : u(i = r.getProto(t)) ? get(i, n, a) : void 0;
    }var r = t(47),
        o = t(31),
        i = t(19),
        u = t(39),
        c = t(5);i(i.S, "Reflect", { get: get });
  }, { 19: 19, 31: 31, 39: 39, 47: 47, 5: 5 }], 148: [function (t, n, e) {
    var r = t(19);r(r.S, "Reflect", { has: function has(t, n) {
        return n in t;
      } });
  }, { 19: 19 }], 149: [function (t, n, e) {
    var r = t(19),
        o = t(5),
        i = _isExtensible2.default;r(r.S, "Reflect", { isExtensible: function isExtensible(t) {
        return o(t), i ? i(t) : !0;
      } });
  }, { 19: 19, 5: 5 }], 150: [function (t, n, e) {
    var r = t(19);r(r.S, "Reflect", { ownKeys: t(58) });
  }, { 19: 19, 58: 58 }], 151: [function (t, n, e) {
    var r = t(19),
        o = t(5),
        i = _preventExtensions2.default;r(r.S, "Reflect", { preventExtensions: function preventExtensions(t) {
        o(t);try {
          return i && i(t), !0;
        } catch (n) {
          return !1;
        }
      } });
  }, { 19: 19, 5: 5 }], 152: [function (t, n, e) {
    var r = t(19),
        o = t(65);o && r(r.S, "Reflect", { setPrototypeOf: function setPrototypeOf(t, n) {
        o.check(t, n);try {
          return o.set(t, n), !0;
        } catch (e) {
          return !1;
        }
      } });
  }, { 19: 19, 65: 65 }], 153: [function (t, n, e) {
    function set(t, n, e) {
      var i,
          s,
          f = arguments.length < 4 ? t : arguments[3],
          l = r.getDesc(c(t), n);if (!l) {
        if (a(s = r.getProto(t))) return set(s, n, e, f);l = u(0);
      }return o(l, "value") ? l.writable !== !1 && a(f) ? (i = r.getDesc(f, n) || u(0), i.value = e, r.setDesc(f, n, i), !0) : !1 : void 0 === l.set ? !1 : (l.set.call(f, e), !0);
    }var r = t(47),
        o = t(31),
        i = t(19),
        u = t(61),
        c = t(5),
        a = t(39);i(i.S, "Reflect", { set: set });
  }, { 19: 19, 31: 31, 39: 39, 47: 47, 5: 5, 61: 61 }], 154: [function (t, n, e) {
    var r = t(47),
        o = t(30),
        i = t(40),
        u = t(27),
        c = o.RegExp,
        a = c,
        s = c.prototype,
        f = /a/g,
        l = /a/g,
        h = new c(f) !== f;!t(21) || h && !t(25)(function () {
      return l[t(84)("match")] = !1, c(f) != f || c(l) == l || "/a/i" != c(f, "i");
    }) || (c = function RegExp(t, n) {
      var e = i(t),
          r = void 0 === n;return this instanceof c || !e || t.constructor !== c || !r ? h ? new a(e && !r ? t.source : t, n) : a((e = t instanceof c) ? t.source : t, e && r ? u.call(t) : n) : t;
    }, r.each.call(r.getNames(a), function (t) {
      t in c || r.setDesc(c, t, { configurable: !0, get: function get() {
          return a[t];
        }, set: function set(n) {
          a[t] = n;
        } });
    }), s.constructor = c, c.prototype = s, t(62)(o, "RegExp", c)), t(66)("RegExp");
  }, { 21: 21, 25: 25, 27: 27, 30: 30, 40: 40, 47: 47, 62: 62, 66: 66, 84: 84 }], 155: [function (t, n, e) {
    var r = t(47);t(21) && "g" != /./g.flags && r.setDesc(RegExp.prototype, "flags", { configurable: !0, get: t(27) });
  }, { 21: 21, 27: 27, 47: 47 }], 156: [function (t, n, e) {
    t(26)("match", 1, function (t, n) {
      return function match(e) {
        "use strict";
        var r = t(this),
            o = void 0 == e ? void 0 : e[n];return void 0 !== o ? o.call(e, r) : new RegExp(e)[n](String(r));
      };
    });
  }, { 26: 26 }], 157: [function (t, n, e) {
    t(26)("replace", 2, function (t, n, e) {
      return function replace(r, o) {
        "use strict";
        var i = t(this),
            u = void 0 == r ? void 0 : r[n];return void 0 !== u ? u.call(r, i, o) : e.call(String(i), r, o);
      };
    });
  }, { 26: 26 }], 158: [function (t, n, e) {
    t(26)("search", 1, function (t, n) {
      return function search(e) {
        "use strict";
        var r = t(this),
            o = void 0 == e ? void 0 : e[n];return void 0 !== o ? o.call(e, r) : new RegExp(e)[n](String(r));
      };
    });
  }, { 26: 26 }], 159: [function (t, n, e) {
    t(26)("split", 2, function (t, n, e) {
      return function split(r, o) {
        "use strict";
        var i = t(this),
            u = void 0 == r ? void 0 : r[n];return void 0 !== u ? u.call(r, i, o) : e.call(String(i), r, o);
      };
    });
  }, { 26: 26 }], 160: [function (t, n, e) {
    "use strict";
    var r = t(13);t(16)("Set", function (t) {
      return function Set() {
        return t(this, arguments.length > 0 ? arguments[0] : void 0);
      };
    }, { add: function add(t) {
        return r.def(this, t = 0 === t ? 0 : t, t);
      } }, r);
  }, { 13: 13, 16: 16 }], 161: [function (t, n, e) {
    "use strict";
    var r = t(19),
        o = t(71)(!1);r(r.P, "String", { codePointAt: function codePointAt(t) {
        return o(this, t);
      } });
  }, { 19: 19, 71: 71 }], 162: [function (t, n, e) {
    "use strict";
    var r = t(19),
        o = t(80),
        i = t(72),
        u = "endsWith",
        c = ""[u];r(r.P + r.F * t(24)(u), "String", { endsWith: function endsWith(t) {
        var n = i(this, t, u),
            e = arguments,
            r = e.length > 1 ? e[1] : void 0,
            a = o(n.length),
            s = void 0 === r ? a : Math.min(o(r), a),
            f = String(t);return c ? c.call(n, f, s) : n.slice(s - f.length, s) === f;
      } });
  }, { 19: 19, 24: 24, 72: 72, 80: 80 }], 163: [function (t, n, e) {
    var r = t(19),
        o = t(77),
        i = String.fromCharCode,
        u = _fromCodePoint2.default;r(r.S + r.F * (!!u && 1 != u.length), "String", { fromCodePoint: function fromCodePoint(t) {
        for (var n, e = [], r = arguments, u = r.length, c = 0; u > c;) {
          if (n = +r[c++], o(n, 1114111) !== n) throw RangeError(n + " is not a valid code point");e.push(65536 > n ? i(n) : i(((n -= 65536) >> 10) + 55296, n % 1024 + 56320));
        }return e.join("");
      } });
  }, { 19: 19, 77: 77 }], 164: [function (t, n, e) {
    "use strict";
    var r = t(19),
        o = t(72),
        i = "includes";r(r.P + r.F * t(24)(i), "String", { includes: function includes(t) {
        return !!~o(this, t, i).indexOf(t, arguments.length > 1 ? arguments[1] : void 0);
      } });
  }, { 19: 19, 24: 24, 72: 72 }], 165: [function (t, n, e) {
    "use strict";
    var r = t(71)(!0);t(43)(String, "String", function (t) {
      this._t = String(t), this._i = 0;
    }, function () {
      var t,
          n = this._t,
          e = this._i;return e >= n.length ? { value: void 0, done: !0 } : (t = r(n, e), this._i += t.length, { value: t, done: !1 });
    });
  }, { 43: 43, 71: 71 }], 166: [function (t, n, e) {
    var r = t(19),
        o = t(79),
        i = t(80);r(r.S, "String", { raw: function raw(t) {
        for (var n = o(t.raw), e = i(n.length), r = arguments, u = r.length, c = [], a = 0; e > a;) {
          c.push(String(n[a++])), u > a && c.push(String(r[a]));
        }return c.join("");
      } });
  }, { 19: 19, 79: 79, 80: 80 }], 167: [function (t, n, e) {
    var r = t(19);r(r.P, "String", { repeat: t(74) });
  }, { 19: 19, 74: 74 }], 168: [function (t, n, e) {
    "use strict";
    var r = t(19),
        o = t(80),
        i = t(72),
        u = "startsWith",
        c = ""[u];r(r.P + r.F * t(24)(u), "String", { startsWith: function startsWith(t) {
        var n = i(this, t, u),
            e = arguments,
            r = o(Math.min(e.length > 1 ? e[1] : void 0, n.length)),
            a = String(t);return c ? c.call(n, a, r) : n.slice(r, r + a.length) === a;
      } });
  }, { 19: 19, 24: 24, 72: 72, 80: 80 }], 169: [function (t, n, e) {
    "use strict";
    t(75)("trim", function (t) {
      return function trim() {
        return t(this, 3);
      };
    });
  }, { 75: 75 }], 170: [function (t, n, e) {
    "use strict";
    var r = t(47),
        o = t(30),
        i = t(31),
        u = t(21),
        c = t(19),
        a = t(62),
        s = t(25),
        f = t(68),
        l = t(67),
        h = t(83),
        p = t(84),
        v = t(48),
        g = t(29),
        y = t(23),
        d = t(37),
        m = t(5),
        x = t(79),
        S = t(61),
        b = r.getDesc,
        w = r.setDesc,
        E = r.create,
        O = g.get,
        P = o.Symbol,
        _ = o.JSON,
        M = _ && _.stringify,
        F = !1,
        A = p("_hidden"),
        j = r.isEnum,
        N = f("symbol-registry"),
        I = f("symbols"),
        k = "function" == typeof P,
        D = Object.prototype,
        T = u && s(function () {
      return 7 != E(w({}, "a", { get: function get() {
          return w(this, "a", { value: 7 }).a;
        } })).a;
    }) ? function (t, n, e) {
      var r = b(D, n);r && delete D[n], w(t, n, e), r && t !== D && w(D, n, r);
    } : w,
        L = function L(t) {
      var n = I[t] = E(P.prototype);return n._k = t, u && F && T(D, t, { configurable: !0, set: function set(n) {
          i(this, A) && i(this[A], t) && (this[A][t] = !1), T(this, t, S(1, n));
        } }), n;
    },
        R = function R(t) {
      return "symbol" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t));
    },
        C = function defineProperty(t, n, e) {
      return e && i(I, n) ? (e.enumerable ? (i(t, A) && t[A][n] && (t[A][n] = !1), e = E(e, { enumerable: S(0, !1) })) : (i(t, A) || w(t, A, S(1, {})), t[A][n] = !0), T(t, n, e)) : w(t, n, e);
    },
        G = function defineProperties(t, n) {
      m(t);for (var e, r = y(n = x(n)), o = 0, i = r.length; i > o;) {
        C(t, e = r[o++], n[e]);
      }return t;
    },
        W = function create(t, n) {
      return void 0 === n ? E(t) : G(E(t), n);
    },
        z = function propertyIsEnumerable(t) {
      var n = j.call(this, t);return n || !i(this, t) || !i(I, t) || i(this, A) && this[A][t] ? n : !0;
    },
        K = function getOwnPropertyDescriptor(t, n) {
      var e = b(t = x(t), n);return !e || !i(I, n) || i(t, A) && t[A][n] || (e.enumerable = !0), e;
    },
        U = function getOwnPropertyNames(t) {
      for (var n, e = O(x(t)), r = [], o = 0; e.length > o;) {
        i(I, n = e[o++]) || n == A || r.push(n);
      }return r;
    },
        q = function getOwnPropertySymbols(t) {
      for (var n, e = O(x(t)), r = [], o = 0; e.length > o;) {
        i(I, n = e[o++]) && r.push(I[n]);
      }return r;
    },
        J = function stringify(t) {
      if (void 0 !== t && !R(t)) {
        for (var n, e, r = [t], o = 1, i = arguments; i.length > o;) {
          r.push(i[o++]);
        }return n = r[1], "function" == typeof n && (e = n), (e || !d(n)) && (n = function n(t, _n) {
          return e && (_n = e.call(this, t, _n)), R(_n) ? void 0 : _n;
        }), r[1] = n, M.apply(_, r);
      }
    },
        B = s(function () {
      var t = P();return "[null]" != M([t]) || "{}" != M({ a: t }) || "{}" != M(Object(t));
    });k || (P = function _Symbol2() {
      if (R(this)) throw TypeError("Symbol is not a constructor");return L(h(arguments.length > 0 ? arguments[0] : void 0));
    }, a(P.prototype, "toString", function toString() {
      return this._k;
    }), R = function R(t) {
      return t instanceof P;
    }, r.create = W, r.isEnum = z, r.getDesc = K, r.setDesc = C, r.setDescs = G, r.getNames = g.get = U, r.getSymbols = q, u && !t(49) && a(D, "propertyIsEnumerable", z, !0));var V = { "for": function _for(t) {
        return i(N, t += "") ? N[t] : N[t] = P(t);
      }, keyFor: function keyFor(t) {
        return v(N, t);
      }, useSetter: function useSetter() {
        F = !0;
      }, useSimple: function useSimple() {
        F = !1;
      } };r.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), function (t) {
      var n = p(t);V[t] = k ? n : L(n);
    }), F = !0, c(c.G + c.W, { Symbol: P }), c(c.S, "Symbol", V), c(c.S + c.F * !k, "Object", { create: W, defineProperty: C, defineProperties: G, getOwnPropertyDescriptor: K, getOwnPropertyNames: U, getOwnPropertySymbols: q }), _ && c(c.S + c.F * (!k || B), "JSON", { stringify: J }), l(P, "Symbol"), l(Math, "Math", !0), l(o.JSON, "JSON", !0);
  }, { 19: 19, 21: 21, 23: 23, 25: 25, 29: 29, 30: 30, 31: 31, 37: 37, 47: 47, 48: 48, 49: 49, 5: 5, 61: 61, 62: 62, 67: 67, 68: 68, 79: 79, 83: 83, 84: 84 }], 171: [function (t, n, e) {
    "use strict";
    var r = t(47),
        o = t(62),
        i = t(15),
        u = t(39),
        c = t(31),
        a = i.frozenStore,
        s = i.WEAK,
        f = _isExtensible2.default || u,
        l = {},
        h = t(16)("WeakMap", function (t) {
      return function WeakMap() {
        return t(this, arguments.length > 0 ? arguments[0] : void 0);
      };
    }, { get: function get(t) {
        if (u(t)) {
          if (!f(t)) return a(this).get(t);if (c(t, s)) return t[s][this._i];
        }
      }, set: function set(t, n) {
        return i.def(this, t, n);
      } }, i, !0, !0);7 != new h().set((_freeze2.default || Object)(l), 7).get(l) && r.each.call(["delete", "has", "get", "set"], function (t) {
      var n = h.prototype,
          e = n[t];o(n, t, function (n, r) {
        if (u(n) && !f(n)) {
          var o = a(this)[t](n, r);return "set" == t ? this : o;
        }return e.call(this, n, r);
      });
    });
  }, { 15: 15, 16: 16, 31: 31, 39: 39, 47: 47, 62: 62 }], 172: [function (t, n, e) {
    "use strict";
    var r = t(15);t(16)("WeakSet", function (t) {
      return function WeakSet() {
        return t(this, arguments.length > 0 ? arguments[0] : void 0);
      };
    }, { add: function add(t) {
        return r.def(this, t, !0);
      } }, r, !1, !0);
  }, { 15: 15, 16: 16 }], 173: [function (t, n, e) {
    "use strict";
    var r = t(19),
        o = t(8)(!0);r(r.P, "Array", { includes: function includes(t) {
        return o(this, t, arguments.length > 1 ? arguments[1] : void 0);
      } }), t(4)("includes");
  }, { 19: 19, 4: 4, 8: 8 }], 174: [function (t, n, e) {
    var r = t(19);r(r.P, "Map", { toJSON: t(14)("Map") });
  }, { 14: 14, 19: 19 }], 175: [function (t, n, e) {
    var r = t(19),
        o = t(57)(!0);r(r.S, "Object", { entries: function entries(t) {
        return o(t);
      } });
  }, { 19: 19, 57: 57 }], 176: [function (t, n, e) {
    var r = t(47),
        o = t(19),
        i = t(58),
        u = t(79),
        c = t(61);o(o.S, "Object", { getOwnPropertyDescriptors: function getOwnPropertyDescriptors(t) {
        for (var n, e, o = u(t), a = r.setDesc, s = r.getDesc, f = i(o), l = {}, h = 0; f.length > h;) {
          e = s(o, n = f[h++]), n in l ? a(l, n, c(0, e)) : l[n] = e;
        }return l;
      } });
  }, { 19: 19, 47: 47, 58: 58, 61: 61, 79: 79 }], 177: [function (t, n, e) {
    var r = t(19),
        o = t(57)(!1);r(r.S, "Object", { values: function values(t) {
        return o(t);
      } });
  }, { 19: 19, 57: 57 }], 178: [function (t, n, e) {
    var r = t(19),
        o = t(63)(/[\\^$*+?.()|[\]{}]/g, "\\$&");r(r.S, "RegExp", { escape: function escape(t) {
        return o(t);
      } });
  }, { 19: 19, 63: 63 }], 179: [function (t, n, e) {
    var r = t(19);r(r.P, "Set", { toJSON: t(14)("Set") });
  }, { 14: 14, 19: 19 }], 180: [function (t, n, e) {
    "use strict";
    var r = t(19),
        o = t(71)(!0);r(r.P, "String", { at: function at(t) {
        return o(this, t);
      } });
  }, { 19: 19, 71: 71 }], 181: [function (t, n, e) {
    "use strict";
    var r = t(19),
        o = t(73);r(r.P, "String", { padLeft: function padLeft(t) {
        return o(this, t, arguments.length > 1 ? arguments[1] : void 0, !0);
      } });
  }, { 19: 19, 73: 73 }], 182: [function (t, n, e) {
    "use strict";
    var r = t(19),
        o = t(73);r(r.P, "String", { padRight: function padRight(t) {
        return o(this, t, arguments.length > 1 ? arguments[1] : void 0, !1);
      } });
  }, { 19: 19, 73: 73 }], 183: [function (t, n, e) {
    "use strict";
    t(75)("trimLeft", function (t) {
      return function trimLeft() {
        return t(this, 1);
      };
    });
  }, { 75: 75 }], 184: [function (t, n, e) {
    "use strict";
    t(75)("trimRight", function (t) {
      return function trimRight() {
        return t(this, 2);
      };
    });
  }, { 75: 75 }], 185: [function (t, n, e) {
    var r = t(47),
        o = t(19),
        i = t(18),
        u = t(17).Array || Array,
        c = {},
        a = function a(t, n) {
      r.each.call(t.split(","), function (t) {
        void 0 == n && t in u ? c[t] = u[t] : t in [] && (c[t] = i(Function.call, [][t], n));
      });
    };a("pop,reverse,shift,keys,values,entries", 1), a("indexOf,every,some,forEach,map,filter,find,findIndex,includes", 3), a("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill"), o(o.S, "Array", c);
  }, { 17: 17, 18: 18, 19: 19, 47: 47 }], 186: [function (t, n, e) {
    t(92);var r = t(30),
        o = t(32),
        i = t(46),
        u = t(84)("iterator"),
        c = r.NodeList,
        a = r.HTMLCollection,
        s = c && c.prototype,
        f = a && a.prototype,
        l = i.NodeList = i.HTMLCollection = i.Array;!c || u in s || o(s, u, l), !a || u in f || o(f, u, l);
  }, { 30: 30, 32: 32, 46: 46, 84: 84, 92: 92 }], 187: [function (t, n, e) {
    var r = t(19),
        o = t(76);r(r.G + r.B, { setImmediate: o.set, clearImmediate: o.clear });
  }, { 19: 19, 76: 76 }], 188: [function (t, n, e) {
    var r = t(30),
        o = t(19),
        i = t(34),
        u = t(59),
        c = r.navigator,
        a = !!c && /MSIE .\./.test(c.userAgent),
        s = function s(t) {
      return a ? function (n, e) {
        return t(i(u, [].slice.call(arguments, 2), "function" == typeof n ? n : Function(n)), e);
      } : t;
    };o(o.G + o.B + o.F * a, { setTimeout: s(r.setTimeout), setInterval: s(r.setInterval) });
  }, { 19: 19, 30: 30, 34: 34, 59: 59 }], 189: [function (t, n, e) {
    t(86), t(170), t(125), t(133), t(137), t(138), t(126), t(136), t(135), t(131), t(132), t(130), t(127), t(129), t(134), t(128), t(96), t(95), t(115), t(116), t(117), t(118), t(119), t(120), t(121), t(122), t(123), t(124), t(98), t(99), t(100), t(101), t(102), t(103), t(104), t(105), t(106), t(107), t(108), t(109), t(110), t(111), t(112), t(113), t(114), t(163), t(166), t(169), t(165), t(161), t(162), t(164), t(167), t(168), t(91), t(93), t(92), t(94), t(87), t(88), t(90), t(89), t(154), t(155), t(156), t(157), t(158), t(159), t(139), t(97), t(160), t(171), t(172), t(140), t(141), t(142), t(143), t(144), t(147), t(145), t(146), t(148), t(149), t(150), t(151), t(153), t(152), t(173), t(180), t(181), t(182), t(183), t(184), t(178), t(176), t(177), t(175), t(174), t(179), t(185), t(188), t(187), t(186), n.exports = t(17);
  }, { 100: 100, 101: 101, 102: 102, 103: 103, 104: 104, 105: 105, 106: 106, 107: 107, 108: 108, 109: 109, 110: 110, 111: 111, 112: 112, 113: 113, 114: 114, 115: 115, 116: 116, 117: 117, 118: 118, 119: 119, 120: 120, 121: 121, 122: 122, 123: 123, 124: 124, 125: 125, 126: 126, 127: 127, 128: 128, 129: 129, 130: 130, 131: 131, 132: 132, 133: 133, 134: 134, 135: 135, 136: 136, 137: 137, 138: 138, 139: 139, 140: 140, 141: 141, 142: 142, 143: 143, 144: 144, 145: 145, 146: 146, 147: 147, 148: 148, 149: 149, 150: 150, 151: 151, 152: 152, 153: 153, 154: 154, 155: 155, 156: 156, 157: 157, 158: 158, 159: 159, 160: 160, 161: 161, 162: 162, 163: 163, 164: 164, 165: 165, 166: 166, 167: 167, 168: 168, 169: 169, 17: 17, 170: 170, 171: 171, 172: 172, 173: 173, 174: 174, 175: 175, 176: 176, 177: 177, 178: 178, 179: 179, 180: 180, 181: 181, 182: 182, 183: 183, 184: 184, 185: 185, 186: 186, 187: 187, 188: 188, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96, 97: 97, 98: 98, 99: 99 }], 190: [function (t, n, e) {
    (function (t) {
      !function (t) {
        "use strict";
        function wrap(t, n, e, r) {
          var o = (0, _create2.default)((n || Generator).prototype),
              i = new Context(r || []);return o._invoke = makeInvokeMethod(t, e, i), o;
        }function tryCatch(t, n, e) {
          try {
            return { type: "normal", arg: t.call(n, e) };
          } catch (r) {
            return { type: "throw", arg: r };
          }
        }function Generator() {}function GeneratorFunction() {}function GeneratorFunctionPrototype() {}function defineIteratorMethods(t) {
          ["next", "throw", "return"].forEach(function (n) {
            t[n] = function (t) {
              return this._invoke(n, t);
            };
          });
        }function AwaitArgument(t) {
          this.arg = t;
        }function AsyncIterator(t) {
          function invoke(n, o) {
            var i = t[n](o),
                u = i.value;return u instanceof AwaitArgument ? _promise2.default.resolve(u.arg).then(e, r) : _promise2.default.resolve(u).then(function (t) {
              return i.value = t, i;
            });
          }function enqueue(t, e) {
            function callInvokeWithMethodAndArg() {
              return invoke(t, e);
            }return n = n ? n.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : new _promise2.default(function (t) {
              t(callInvokeWithMethodAndArg());
            });
          }"object" == (typeof process === "undefined" ? "undefined" : (0, _typeof3.default)(process)) && process.domain && (invoke = process.domain.bind(invoke));var n,
              e = invoke.bind(t, "next"),
              r = invoke.bind(t, "throw");invoke.bind(t, "return");this._invoke = enqueue;
        }function makeInvokeMethod(t, n, r) {
          var o = c;return function invoke(i, u) {
            if (o === s) throw new Error("Generator is already running");if (o === f) {
              if ("throw" === i) throw u;return doneResult();
            }for (;;) {
              var h = r.delegate;if (h) {
                if ("return" === i || "throw" === i && h.iterator[i] === e) {
                  r.delegate = null;var p = h.iterator["return"];if (p) {
                    var v = tryCatch(p, h.iterator, u);if ("throw" === v.type) {
                      i = "throw", u = v.arg;continue;
                    }
                  }if ("return" === i) continue;
                }var v = tryCatch(h.iterator[i], h.iterator, u);if ("throw" === v.type) {
                  r.delegate = null, i = "throw", u = v.arg;continue;
                }i = "next", u = e;var g = v.arg;if (!g.done) return o = a, g;r[h.resultName] = g.value, r.next = h.nextLoc, r.delegate = null;
              }if ("next" === i) r._sent = u, o === a ? r.sent = u : r.sent = e;else if ("throw" === i) {
                if (o === c) throw o = f, u;r.dispatchException(u) && (i = "next", u = e);
              } else "return" === i && r.abrupt("return", u);o = s;var v = tryCatch(t, n, r);if ("normal" === v.type) {
                o = r.done ? f : a;var g = { value: v.arg, done: r.done };if (v.arg !== l) return g;r.delegate && "next" === i && (u = e);
              } else "throw" === v.type && (o = f, i = "throw", u = v.arg);
            }
          };
        }function pushTryEntry(t) {
          var n = { tryLoc: t[0] };1 in t && (n.catchLoc = t[1]), 2 in t && (n.finallyLoc = t[2], n.afterLoc = t[3]), this.tryEntries.push(n);
        }function resetTryEntry(t) {
          var n = t.completion || {};n.type = "normal", delete n.arg, t.completion = n;
        }function Context(t) {
          this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0);
        }function values(t) {
          if (t) {
            var n = t[o];if (n) return n.call(t);if ("function" == typeof t.next) return t;if (!isNaN(t.length)) {
              var i = -1,
                  u = function next() {
                for (; ++i < t.length;) {
                  if (r.call(t, i)) return next.value = t[i], next.done = !1, next;
                }return next.value = e, next.done = !0, next;
              };return u.next = u;
            }
          }return { next: doneResult };
        }function doneResult() {
          return { value: e, done: !0 };
        }var e,
            r = Object.prototype.hasOwnProperty,
            o = "function" == typeof _symbol2.default && _iterator2.default || "@@iterator",
            i = "object" == (typeof n === "undefined" ? "undefined" : (0, _typeof3.default)(n)),
            u = t.regeneratorRuntime;if (u) return void (i && (n.exports = u));u = t.regeneratorRuntime = i ? n.exports : {}, u.wrap = wrap;var c = "suspendedStart",
            a = "suspendedYield",
            s = "executing",
            f = "completed",
            l = {},
            h = GeneratorFunctionPrototype.prototype = Generator.prototype;GeneratorFunction.prototype = h.constructor = GeneratorFunctionPrototype, GeneratorFunctionPrototype.constructor = GeneratorFunction, GeneratorFunction.displayName = "GeneratorFunction", u.isGeneratorFunction = function (t) {
          var n = "function" == typeof t && t.constructor;return n ? n === GeneratorFunction || "GeneratorFunction" === (n.displayName || n.name) : !1;
        }, u.mark = function (t) {
          return _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(t, GeneratorFunctionPrototype) : t.__proto__ = GeneratorFunctionPrototype, t.prototype = (0, _create2.default)(h), t;
        }, u.awrap = function (t) {
          return new AwaitArgument(t);
        }, defineIteratorMethods(AsyncIterator.prototype), u.async = function (t, n, e, r) {
          var o = new AsyncIterator(wrap(t, n, e, r));return u.isGeneratorFunction(n) ? o : o.next().then(function (t) {
            return t.done ? t.value : o.next();
          });
        }, defineIteratorMethods(h), h[o] = function () {
          return this;
        }, h.toString = function () {
          return "[object Generator]";
        }, u.keys = function (t) {
          var n = [];for (var e in t) {
            n.push(e);
          }return n.reverse(), function next() {
            for (; n.length;) {
              var e = n.pop();if (e in t) return next.value = e, next.done = !1, next;
            }return next.done = !0, next;
          };
        }, u.values = values, Context.prototype = { constructor: Context, reset: function reset(t) {
            if (this.prev = 0, this.next = 0, this.sent = e, this.done = !1, this.delegate = null, this.tryEntries.forEach(resetTryEntry), !t) for (var n in this) {
              "t" === n.charAt(0) && r.call(this, n) && !isNaN(+n.slice(1)) && (this[n] = e);
            }
          }, stop: function stop() {
            this.done = !0;var t = this.tryEntries[0],
                n = t.completion;if ("throw" === n.type) throw n.arg;return this.rval;
          }, dispatchException: function dispatchException(t) {
            function handle(e, r) {
              return i.type = "throw", i.arg = t, n.next = e, !!r;
            }if (this.done) throw t;for (var n = this, e = this.tryEntries.length - 1; e >= 0; --e) {
              var o = this.tryEntries[e],
                  i = o.completion;if ("root" === o.tryLoc) return handle("end");if (o.tryLoc <= this.prev) {
                var u = r.call(o, "catchLoc"),
                    c = r.call(o, "finallyLoc");if (u && c) {
                  if (this.prev < o.catchLoc) return handle(o.catchLoc, !0);if (this.prev < o.finallyLoc) return handle(o.finallyLoc);
                } else if (u) {
                  if (this.prev < o.catchLoc) return handle(o.catchLoc, !0);
                } else {
                  if (!c) throw new Error("try statement without catch or finally");if (this.prev < o.finallyLoc) return handle(o.finallyLoc);
                }
              }
            }
          }, abrupt: function abrupt(t, n) {
            for (var e = this.tryEntries.length - 1; e >= 0; --e) {
              var o = this.tryEntries[e];if (o.tryLoc <= this.prev && r.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                var i = o;break;
              }
            }i && ("break" === t || "continue" === t) && i.tryLoc <= n && n <= i.finallyLoc && (i = null);var u = i ? i.completion : {};return u.type = t, u.arg = n, i ? this.next = i.finallyLoc : this.complete(u), l;
          }, complete: function complete(t, n) {
            if ("throw" === t.type) throw t.arg;"break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = t.arg, this.next = "end") : "normal" === t.type && n && (this.next = n);
          }, finish: function finish(t) {
            for (var n = this.tryEntries.length - 1; n >= 0; --n) {
              var e = this.tryEntries[n];if (e.finallyLoc === t) return this.complete(e.completion, e.afterLoc), resetTryEntry(e), l;
            }
          }, "catch": function _catch(t) {
            for (var n = this.tryEntries.length - 1; n >= 0; --n) {
              var e = this.tryEntries[n];if (e.tryLoc === t) {
                var r = e.completion;if ("throw" === r.type) {
                  var o = r.arg;resetTryEntry(e);
                }return o;
              }
            }throw new Error("illegal catch attempt");
          }, delegateYield: function delegateYield(t, n, e) {
            return this.delegate = { iterator: values(t), resultName: n, nextLoc: e }, l;
          } };
      }("object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) ? t : "object" == (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) ? window : "object" == (typeof self === "undefined" ? "undefined" : (0, _typeof3.default)(self)) ? self : this);
    }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
  }, {}] }, {}, [1]);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":432,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/array/of":213,"babel-runtime/core-js/math/acosh":217,"babel-runtime/core-js/math/expm1":218,"babel-runtime/core-js/math/imul":219,"babel-runtime/core-js/math/log1p":220,"babel-runtime/core-js/math/sign":221,"babel-runtime/core-js/math/sinh":222,"babel-runtime/core-js/object/assign":225,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/freeze":229,"babel-runtime/core-js/object/get-own-property-names":230,"babel-runtime/core-js/object/is":232,"babel-runtime/core-js/object/is-extensible":231,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/object/prevent-extensions":234,"babel-runtime/core-js/object/set-prototype-of":235,"babel-runtime/core-js/promise":236,"babel-runtime/core-js/reflect/construct":238,"babel-runtime/core-js/reflect/define-property":239,"babel-runtime/core-js/string/from-code-point":241,"babel-runtime/core-js/symbol":242,"babel-runtime/core-js/symbol/iterator":243,"babel-runtime/helpers/typeof":249}],9:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _create2.default)({
    create: function create(rawName, opts) {
        var name = this._processName(rawName);

        return (0, _create2.default)(this.Views[name], (0, _extends3.default)({
            Dragger: { value: this.Dragger },
            Header: { value: this.Header },
            Toast: { value: this.Toast },
            documentName: { value: rawName },
            name: { value: name },
            factory: { value: this },
            template: { value: this.Templates[name] },
            user: { value: this.User }
        })).constructor(opts);
    },
    _processName: function _processName(name) {
        var hyphen = name.indexOf('-');
        if (hyphen !== -1) return name.charAt(0).toUpperCase() + name.slice(1, hyphen) + name.charAt(hyphen + 1).toUpperCase() + name.slice(hyphen + 2);

        return name.charAt(0).toUpperCase() + name.slice(1);
    }
}, {
    Dragger: { value: require('../views/Dragger') },
    Header: { value: require('../views/Header') },
    Templates: { value: require('../.TemplateMap') },
    Toast: { value: require('../views/Toast') },
    User: { value: require('../models/User') },
    Views: { value: require('../.ViewMap') }
});

},{"../.TemplateMap":2,"../.ViewMap":3,"../models/User":42,"../views/Dragger":82,"../views/Header":87,"../views/Toast":103,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/extends":246}],10:[function(require,module,exports){
"use strict";

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function ($) {
  "use strict";
  var MagicSuggest = function MagicSuggest(element, options) {
    var ms = this;var defaults = { allowFreeEntries: true, allowDuplicates: false, ajaxConfig: {}, autoSelect: true, selectFirst: false, queryParam: "query", beforeSend: function beforeSend() {}, cls: "", data: null, dataUrlParams: {}, disabled: false, disabledField: null, displayField: "name", editable: true, expanded: false, expandOnFocus: false, groupBy: null, hideTrigger: false, highlight: true, id: null, infoMsgCls: "", inputCfg: {}, invalidCls: "ms-inv", matchCase: false, maxDropHeight: 290, maxEntryLength: null, maxEntryRenderer: function maxEntryRenderer(v) {
        return "Please reduce your entry by " + v + " character" + (v > 1 ? "s" : "");
      }, maxSuggestions: null, maxSelection: 10, maxSelectionRenderer: function maxSelectionRenderer(v) {
        return "You cannot choose more than " + v + " item" + (v > 1 ? "s" : "");
      }, method: "POST", minChars: 0, minCharsRenderer: function minCharsRenderer(v) {
        return "Please type " + v + " more character" + (v > 1 ? "s" : "");
      }, mode: "local", name: null, noSuggestionText: "No suggestions", placeholder: "Type or click here", renderer: null, required: false, resultAsString: false, resultAsStringDelimiter: ",", resultsField: "results", selectionCls: "", selectionContainer: null, selectionPosition: "inner", selectionRenderer: null, selectionStacked: false, sortDir: "asc", sortOrder: null, strictSuggest: false, style: "", toggleOnClick: false, typeDelay: 400, useTabKey: false, useCommaKey: true, useZebraStyle: false, value: null, valueField: "id", vregex: null, vtype: null };var conf = $.extend({}, options);var cfg = $.extend(true, {}, defaults, conf);this.addToSelection = function (items, isSilent) {
      if (!cfg.maxSelection || _selection.length < cfg.maxSelection) {
        if (!$.isArray(items)) {
          items = [items];
        }var valuechanged = false;$.each(items, function (index, json) {
          if (cfg.allowDuplicates || $.inArray(json[cfg.valueField], ms.getValue()) === -1) {
            _selection.push(json);valuechanged = true;
          }
        });if (valuechanged === true) {
          self._renderSelection();this.empty();if (isSilent !== true) {
            $(this).trigger("selectionchange", [this, this.getSelection()]);
          }
        }
      }this.input.attr("placeholder", cfg.selectionPosition === "inner" && this.getValue().length > 0 ? "" : cfg.placeholder);
    };this.clear = function (isSilent) {
      this.removeFromSelection(_selection.slice(0), isSilent);
    };this.collapse = function () {
      if (cfg.expanded === true) {
        this.combobox.detach();cfg.expanded = false;$(this).trigger("collapse", [this]);
      }
    };this.disable = function () {
      this.container.addClass("ms-ctn-disabled");cfg.disabled = true;ms.input.attr("disabled", true);
    };this.empty = function () {
      this.input.val("");
    };this.enable = function () {
      this.container.removeClass("ms-ctn-disabled");cfg.disabled = false;ms.input.attr("disabled", false);
    };this.expand = function () {
      if (!cfg.expanded && (this.input.val().length >= cfg.minChars || this.combobox.children().size() > 0)) {
        this.combobox.appendTo(this.container);self._processSuggestions();cfg.expanded = true;$(this).trigger("expand", [this]);
      }
    };this.isDisabled = function () {
      return cfg.disabled;
    };this.isValid = function () {
      var valid = cfg.required === false || _selection.length > 0;if (cfg.vtype || cfg.vregex) {
        $.each(_selection, function (index, item) {
          valid = valid && self._validateSingleItem(item[cfg.valueField]);
        });
      }return valid;
    };this.getDataUrlParams = function () {
      return cfg.dataUrlParams;
    };this.getName = function () {
      return cfg.name;
    };this.getSelection = function () {
      return _selection;
    };this.getRawValue = function () {
      return ms.input.val();
    };this.getValue = function () {
      return $.map(_selection, function (o) {
        return o[cfg.valueField];
      });
    };this.removeFromSelection = function (items, isSilent) {
      if (!$.isArray(items)) {
        items = [items];
      }var valuechanged = false;$.each(items, function (index, json) {
        var i = $.inArray(json[cfg.valueField], ms.getValue());if (i > -1) {
          _selection.splice(i, 1);valuechanged = true;
        }
      });if (valuechanged === true) {
        self._renderSelection();if (isSilent !== true) {
          $(this).trigger("selectionchange", [this, this.getSelection()]);
        }if (cfg.expandOnFocus) {
          ms.expand();
        }if (cfg.expanded) {
          self._processSuggestions();
        }
      }this.input.attr("placeholder", cfg.selectionPosition === "inner" && this.getValue().length > 0 ? "" : cfg.placeholder);
    };this.getData = function () {
      return _cbData;
    };this.setData = function (data) {
      cfg.data = data;self._processSuggestions();
    };this.setName = function (name) {
      cfg.name = name;if (name) {
        cfg.name += name.indexOf("[]") > 0 ? "" : "[]";
      }if (ms._valueContainer) {
        $.each(ms._valueContainer.children(), function (i, el) {
          el.name = cfg.name;
        });
      }
    };this.setSelection = function (items) {
      this.clear();this.addToSelection(items);
    };this.setValue = function (values) {
      var items = [];$.each(values, function (index, value) {
        var found = false;$.each(_cbData, function (i, item) {
          if (item[cfg.valueField] == value) {
            items.push(item);found = true;return false;
          }
        });if (!found) {
          if ((typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) === "object") {
            items.push(value);
          } else {
            var json = {};json[cfg.valueField] = value;json[cfg.displayField] = value;items.push(json);
          }
        }
      });if (items.length > 0) {
        this.addToSelection(items);
      }
    };this.setDataUrlParams = function (params) {
      cfg.dataUrlParams = $.extend({}, params);
    };var _selection = [],
        _comboItemHeight = 0,
        _timer,
        _hasFocus = false,
        _groups = null,
        _cbData = [],
        _ctrlDown = false,
        KEYCODES = { BACKSPACE: 8, TAB: 9, ENTER: 13, CTRL: 17, ESC: 27, SPACE: 32, UPARROW: 38, DOWNARROW: 40, COMMA: 188 };var self = { _displaySuggestions: function _displaySuggestions(data) {
        ms.combobox.show();ms.combobox.empty();var resHeight = 0,
            nbGroups = 0;if (_groups === null) {
          self._renderComboItems(data);resHeight = _comboItemHeight * data.length;
        } else {
          for (var grpName in _groups) {
            nbGroups += 1;$("<div/>", { "class": "ms-res-group", html: grpName }).appendTo(ms.combobox);self._renderComboItems(_groups[grpName].items, true);
          }var _groupItemHeight = ms.combobox.find(".ms-res-group").outerHeight();if (_groupItemHeight !== null) {
            var tmpResHeight = nbGroups * _groupItemHeight;resHeight = _comboItemHeight * data.length + tmpResHeight;
          } else {
            resHeight = _comboItemHeight * (data.length + nbGroups);
          }
        }if (resHeight < ms.combobox.height() || resHeight <= cfg.maxDropHeight) {
          ms.combobox.height(resHeight);
        } else if (resHeight >= ms.combobox.height() && resHeight > cfg.maxDropHeight) {
          ms.combobox.height(cfg.maxDropHeight);
        }if (data.length === 1 && cfg.autoSelect === true) {
          ms.combobox.children().filter(":not(.ms-res-item-disabled):last").addClass("ms-res-item-active");
        }if (cfg.selectFirst === true) {
          ms.combobox.children().filter(":not(.ms-res-item-disabled):first").addClass("ms-res-item-active");
        }if (data.length === 0 && ms.getRawValue() !== "") {
          var noSuggestionText = cfg.noSuggestionText.replace(/\{\{.*\}\}/, ms.input.val());self._updateHelper(noSuggestionText);ms.collapse();
        }if (cfg.allowFreeEntries === false) {
          if (data.length === 0) {
            $(ms.input).addClass(cfg.invalidCls);ms.combobox.hide();
          } else {
            $(ms.input).removeClass(cfg.invalidCls);
          }
        }
      }, _getEntriesFromStringArray: function _getEntriesFromStringArray(data) {
        var json = [];$.each(data, function (index, s) {
          var entry = {};entry[cfg.displayField] = entry[cfg.valueField] = $.trim(s);json.push(entry);
        });return json;
      }, _highlightSuggestion: function _highlightSuggestion(html) {
        var q = ms.input.val();var specialCharacters = ["^", "$", "*", "+", "?", ".", "(", ")", ":", "!", "|", "{", "}", "[", "]"];$.each(specialCharacters, function (index, value) {
          q = q.replace(value, "\\" + value);
        });if (q.length === 0) {
          return html;
        }var glob = cfg.matchCase === true ? "g" : "gi";return html.replace(new RegExp("(" + q + ")(?!([^<]+)?>)", glob), "<em>$1</em>");
      }, _moveSelectedRow: function _moveSelectedRow(dir) {
        if (!cfg.expanded) {
          ms.expand();
        }var list, start, active, scrollPos;list = ms.combobox.find(".ms-res-item:not(.ms-res-item-disabled)");if (dir === "down") {
          start = list.eq(0);
        } else {
          start = list.filter(":last");
        }active = ms.combobox.find(".ms-res-item-active:not(.ms-res-item-disabled):first");if (active.length > 0) {
          if (dir === "down") {
            start = active.nextAll(".ms-res-item:not(.ms-res-item-disabled)").first();if (start.length === 0) {
              start = list.eq(0);
            }scrollPos = ms.combobox.scrollTop();ms.combobox.scrollTop(0);if (start[0].offsetTop + start.outerHeight() > ms.combobox.height()) {
              ms.combobox.scrollTop(scrollPos + _comboItemHeight);
            }
          } else {
            start = active.prevAll(".ms-res-item:not(.ms-res-item-disabled)").first();if (start.length === 0) {
              start = list.filter(":last");ms.combobox.scrollTop(_comboItemHeight * list.length);
            }if (start[0].offsetTop < ms.combobox.scrollTop()) {
              ms.combobox.scrollTop(ms.combobox.scrollTop() - _comboItemHeight);
            }
          }
        }list.removeClass("ms-res-item-active");start.addClass("ms-res-item-active");
      }, _processSuggestions: function _processSuggestions(source) {
        var json = null,
            data = source || cfg.data;if (data !== null) {
          if (typeof data === "function") {
            data = data.call(ms, ms.getRawValue());
          }if (typeof data === "string") {
            $(ms).trigger("beforeload", [ms]);var queryParams = {};queryParams[cfg.queryParam] = ms.input.val();var params = $.extend(queryParams, cfg.dataUrlParams);$.ajax($.extend({ type: cfg.method, url: data, data: params, beforeSend: cfg.beforeSend, success: function success(asyncData) {
                json = typeof asyncData === "string" ? JSON.parse(asyncData) : asyncData;self._processSuggestions(json);$(ms).trigger("load", [ms, json]);if (self._asyncValues) {
                  ms.setValue(typeof self._asyncValues === "string" ? JSON.parse(self._asyncValues) : self._asyncValues);self._renderSelection();delete self._asyncValues;
                }
              }, error: function error() {
                throw "Could not reach server";
              } }, cfg.ajaxConfig));return;
          } else {
            if (data.length > 0 && typeof data[0] === "string") {
              _cbData = self._getEntriesFromStringArray(data);
            } else {
              _cbData = data[cfg.resultsField] || data;
            }
          }var sortedData = cfg.mode === "remote" ? _cbData : self._sortAndTrim(_cbData);self._displaySuggestions(self._group(sortedData));
        }
      }, _render: function _render(el) {
        ms.setName(cfg.name);ms.container = $("<div/>", { "class": "ms-ctn form-control " + (cfg.resultAsString ? "ms-as-string " : "") + cfg.cls + ($(el).hasClass("input-lg") ? " input-lg" : "") + ($(el).hasClass("input-sm") ? " input-sm" : "") + (cfg.disabled === true ? " ms-ctn-disabled" : "") + (cfg.editable === true ? "" : " ms-ctn-readonly") + (cfg.hideTrigger === false ? "" : " ms-no-trigger"), style: cfg.style, id: cfg.id });ms.container.focus($.proxy(handlers._onFocus, this));ms.container.blur($.proxy(handlers._onBlur, this));ms.container.keydown($.proxy(handlers._onKeyDown, this));ms.container.keyup($.proxy(handlers._onKeyUp, this));ms.input = $("<input/>", $.extend({ type: "text", "class": cfg.editable === true ? "" : " ms-input-readonly", readonly: !cfg.editable, placeholder: cfg.placeholder, disabled: cfg.disabled }, cfg.inputCfg));ms.input.focus($.proxy(handlers._onInputFocus, this));ms.input.click($.proxy(handlers._onInputClick, this));ms.combobox = $("<div/>", { "class": "ms-res-ctn dropdown-menu" }).height(cfg.maxDropHeight);ms.combobox.on("click", "div.ms-res-item", $.proxy(handlers._onComboItemSelected, this));ms.combobox.on("mouseover", "div.ms-res-item", $.proxy(handlers._onComboItemMouseOver, this));if (cfg.selectionContainer) {
          ms.selectionContainer = cfg.selectionContainer;$(ms.selectionContainer).addClass("ms-sel-ctn");
        } else {
          ms.selectionContainer = $("<div/>", { "class": "ms-sel-ctn" });
        }ms.selectionContainer.click($.proxy(handlers._onFocus, this));if (cfg.selectionPosition === "inner" && !cfg.selectionContainer) {
          ms.selectionContainer.append(ms.input);
        } else {
          ms.container.append(ms.input);
        }ms.helper = $("<span/>", { "class": "ms-helper " + cfg.infoMsgCls });self._updateHelper();ms.container.append(ms.helper);$(el).replaceWith(ms.container);if (!cfg.selectionContainer) {
          switch (cfg.selectionPosition) {case "bottom":
              ms.selectionContainer.insertAfter(ms.container);if (cfg.selectionStacked === true) {
                ms.selectionContainer.width(ms.container.width());ms.selectionContainer.addClass("ms-stacked");
              }break;case "right":
              ms.selectionContainer.insertAfter(ms.container);ms.container.css("float", "left");break;default:
              ms.container.append(ms.selectionContainer);break;}
        }if (cfg.hideTrigger === false) {
          ms.trigger = $("<div/>", { "class": "ms-trigger", html: '<div class="ms-trigger-ico"></div>' });ms.trigger.click($.proxy(handlers._onTriggerClick, this));ms.container.append(ms.trigger);
        }$(window).resize($.proxy(handlers._onWindowResized, this));if (cfg.value !== null || cfg.data !== null) {
          if (typeof cfg.data === "string") {
            self._asyncValues = cfg.value;self._processSuggestions();
          } else {
            self._processSuggestions();if (cfg.value !== null) {
              ms.setValue(cfg.value);self._renderSelection();
            }
          }
        }$("body").click(function (e) {
          if (ms.container.hasClass("ms-ctn-focus") && ms.container.has(e.target).length === 0 && e.target.className.indexOf("ms-res-item") < 0 && e.target.className.indexOf("ms-close-btn") < 0 && ms.container[0] !== e.target) {
            handlers._onBlur();
          }
        });if (cfg.expanded === true) {
          cfg.expanded = false;ms.expand();
        }
      }, _renderComboItems: function _renderComboItems(items, isGrouped) {
        var ref = this,
            html = "";$.each(items, function (index, value) {
          var displayed = cfg.renderer !== null ? cfg.renderer.call(ref, value) : value[cfg.displayField];var disabled = cfg.disabledField !== null && value[cfg.disabledField] === true;var resultItemEl = $("<div/>", { "class": "ms-res-item " + (isGrouped ? "ms-res-item-grouped " : "") + (disabled ? "ms-res-item-disabled " : "") + (index % 2 === 1 && cfg.useZebraStyle === true ? "ms-res-odd" : ""), html: cfg.highlight === true ? self._highlightSuggestion(displayed) : displayed, "data-json": (0, _stringify2.default)(value) });html += $("<div/>").append(resultItemEl).html();
        });ms.combobox.append(html);_comboItemHeight = ms.combobox.find(".ms-res-item:first").outerHeight();
      }, _renderSelection: function _renderSelection() {
        var ref = this,
            w = 0,
            inputOffset = 0,
            items = [],
            asText = cfg.resultAsString === true && !_hasFocus;ms.selectionContainer.find(".ms-sel-item").remove();if (ms._valueContainer !== undefined) {
          ms._valueContainer.remove();
        }$.each(_selection, function (index, value) {
          var selectedItemEl,
              delItemEl,
              selectedItemHtml = cfg.selectionRenderer !== null ? cfg.selectionRenderer.call(ref, value) : value[cfg.displayField];var validCls = self._validateSingleItem(value[cfg.displayField]) ? "" : " ms-sel-invalid";if (asText === true) {
            selectedItemEl = $("<div/>", { "class": "ms-sel-item ms-sel-text " + cfg.selectionCls + validCls, html: selectedItemHtml + (index === _selection.length - 1 ? "" : cfg.resultAsStringDelimiter) }).data("json", value);
          } else {
            selectedItemEl = $("<div/>", { "class": "ms-sel-item " + cfg.selectionCls + validCls, html: selectedItemHtml }).data("json", value);if (cfg.disabled === false) {
              delItemEl = $("<span/>", { "class": "ms-close-btn" }).data("json", value).appendTo(selectedItemEl);delItemEl.click($.proxy(handlers._onTagTriggerClick, ref));
            }
          }items.push(selectedItemEl);
        });ms.selectionContainer.prepend(items);ms._valueContainer = $("<div/>", { style: "display: none;" });$.each(ms.getValue(), function (i, val) {
          var el = $("<input/>", { type: "hidden", name: cfg.name, value: val });el.appendTo(ms._valueContainer);
        });ms._valueContainer.appendTo(ms.selectionContainer);if (cfg.selectionPosition === "inner" && !cfg.selectionContainer) {
          ms.input.width(0);inputOffset = ms.input.offset().left - ms.selectionContainer.offset().left;w = ms.container.width() - inputOffset - 42;ms.input.width(w);
        }if (_selection.length === cfg.maxSelection) {
          self._updateHelper(cfg.maxSelectionRenderer.call(this, _selection.length));
        } else {
          ms.helper.hide();
        }
      }, _selectItem: function _selectItem(item) {
        if (cfg.maxSelection === 1) {
          _selection = [];
        }ms.addToSelection(item.data("json"));item.removeClass("ms-res-item-active");if (cfg.expandOnFocus === false || _selection.length === cfg.maxSelection) {
          ms.collapse();
        }if (!_hasFocus) {
          ms.input.focus();
        } else if (_hasFocus && (cfg.expandOnFocus || _ctrlDown)) {
          self._processSuggestions();if (_ctrlDown) {
            ms.expand();
          }
        }
      }, _sortAndTrim: function _sortAndTrim(data) {
        var q = ms.getRawValue(),
            filtered = [],
            newSuggestions = [],
            selectedValues = ms.getValue();if (q.length > 0) {
          $.each(data, function (index, obj) {
            var name = obj[cfg.displayField];if (cfg.matchCase === true && name.indexOf(q) > -1 || cfg.matchCase === false && name.toLowerCase().indexOf(q.toLowerCase()) > -1) {
              if (cfg.strictSuggest === false || name.toLowerCase().indexOf(q.toLowerCase()) === 0) {
                filtered.push(obj);
              }
            }
          });
        } else {
          filtered = data;
        }$.each(filtered, function (index, obj) {
          if (cfg.allowDuplicates || $.inArray(obj[cfg.valueField], selectedValues) === -1) {
            newSuggestions.push(obj);
          }
        });if (cfg.sortOrder !== null) {
          newSuggestions.sort(function (a, b) {
            if (a[cfg.sortOrder] < b[cfg.sortOrder]) {
              return cfg.sortDir === "asc" ? -1 : 1;
            }if (a[cfg.sortOrder] > b[cfg.sortOrder]) {
              return cfg.sortDir === "asc" ? 1 : -1;
            }return 0;
          });
        }if (cfg.maxSuggestions && cfg.maxSuggestions > 0) {
          newSuggestions = newSuggestions.slice(0, cfg.maxSuggestions);
        }return newSuggestions;
      }, _group: function _group(data) {
        if (cfg.groupBy !== null) {
          _groups = {};$.each(data, function (index, value) {
            var props = cfg.groupBy.indexOf(".") > -1 ? cfg.groupBy.split(".") : cfg.groupBy;var prop = value[cfg.groupBy];if (typeof props != "string") {
              prop = value;while (props.length > 0) {
                prop = prop[props.shift()];
              }
            }if (_groups[prop] === undefined) {
              _groups[prop] = { title: prop, items: [value] };
            } else {
              _groups[prop].items.push(value);
            }
          });
        }return data;
      }, _updateHelper: function _updateHelper(html) {
        ms.helper.html(html);if (!ms.helper.is(":visible")) {
          ms.helper.fadeIn();
        }
      }, _validateSingleItem: function _validateSingleItem(value) {
        if (cfg.vregex !== null && cfg.vregex instanceof RegExp) {
          return cfg.vregex.test(value);
        } else if (cfg.vtype !== null) {
          switch (cfg.vtype) {case "alpha":
              return (/^[a-zA-Z_]+$/.test(value)
              );case "alphanum":
              return (/^[a-zA-Z0-9_]+$/.test(value)
              );case "email":
              return (/^(\w+)([\-+.][\w]+)*@(\w[\-\w]*\.){1,5}([A-Za-z]){2,6}$/.test(value)
              );case "url":
              return (/(((^https?)|(^ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i.test(value)
              );case "ipaddress":
              return (/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(value)
              );}
        }return true;
      } };var handlers = { _onBlur: function _onBlur() {
        ms.container.removeClass("ms-ctn-focus");ms.collapse();_hasFocus = false;if (ms.getRawValue() !== "" && cfg.allowFreeEntries === true) {
          var obj = {};obj[cfg.displayField] = obj[cfg.valueField] = ms.getRawValue().trim();ms.addToSelection(obj);
        }self._renderSelection();if (ms.isValid() === false) {
          ms.container.addClass(cfg.invalidCls);
        } else if (ms.input.val() !== "" && cfg.allowFreeEntries === false) {
          ms.empty();self._updateHelper("");
        }$(ms).trigger("blur", [ms]);
      }, _onComboItemMouseOver: function _onComboItemMouseOver(e) {
        var target = $(e.currentTarget);if (!target.hasClass("ms-res-item-disabled")) {
          ms.combobox.children().removeClass("ms-res-item-active");target.addClass("ms-res-item-active");
        }
      }, _onComboItemSelected: function _onComboItemSelected(e) {
        var target = $(e.currentTarget);if (!target.hasClass("ms-res-item-disabled")) {
          self._selectItem($(e.currentTarget));
        }
      }, _onFocus: function _onFocus() {
        ms.input.focus();
      }, _onInputClick: function _onInputClick() {
        if (ms.isDisabled() === false && _hasFocus) {
          if (cfg.toggleOnClick === true) {
            if (cfg.expanded) {
              ms.collapse();
            } else {
              ms.expand();
            }
          }
        }
      }, _onInputFocus: function _onInputFocus() {
        if (ms.isDisabled() === false && !_hasFocus) {
          _hasFocus = true;ms.container.addClass("ms-ctn-focus");ms.container.removeClass(cfg.invalidCls);var curLength = ms.getRawValue().length;if (cfg.expandOnFocus === true) {
            ms.expand();
          }if (_selection.length === cfg.maxSelection) {
            self._updateHelper(cfg.maxSelectionRenderer.call(this, _selection.length));
          } else if (curLength < cfg.minChars) {
            self._updateHelper(cfg.minCharsRenderer.call(this, cfg.minChars - curLength));
          }self._renderSelection();$(ms).trigger("focus", [ms]);
        }
      }, _onKeyDown: function _onKeyDown(e) {
        var active = ms.combobox.find(".ms-res-item-active:not(.ms-res-item-disabled):first"),
            freeInput = ms.input.val();$(ms).trigger("keydown", [ms, e]);if (e.keyCode === KEYCODES.TAB && (cfg.useTabKey === false || cfg.useTabKey === true && active.length === 0 && ms.input.val().length === 0)) {
          handlers._onBlur();return;
        }switch (e.keyCode) {case KEYCODES.BACKSPACE:
            if (freeInput.length === 0 && ms.getSelection().length > 0 && cfg.selectionPosition === "inner") {
              _selection.pop();self._renderSelection();$(ms).trigger("selectionchange", [ms, ms.getSelection()]);ms.input.attr("placeholder", cfg.selectionPosition === "inner" && ms.getValue().length > 0 ? "" : cfg.placeholder);ms.input.focus();e.preventDefault();
            }break;case KEYCODES.TAB:case KEYCODES.ESC:
            e.preventDefault();break;case KEYCODES.ENTER:
            if (freeInput !== "" || cfg.expanded) {
              e.preventDefault();
            }break;case KEYCODES.COMMA:
            if (cfg.useCommaKey === true) {
              e.preventDefault();
            }break;case KEYCODES.CTRL:
            _ctrlDown = true;break;case KEYCODES.DOWNARROW:
            e.preventDefault();self._moveSelectedRow("down");break;case KEYCODES.UPARROW:
            e.preventDefault();self._moveSelectedRow("up");break;default:
            if (_selection.length === cfg.maxSelection) {
              e.preventDefault();
            }break;}
      }, _onKeyUp: function _onKeyUp(e) {
        var freeInput = ms.getRawValue(),
            inputValid = $.trim(ms.input.val()).length > 0 && (!cfg.maxEntryLength || $.trim(ms.input.val()).length <= cfg.maxEntryLength),
            selected,
            obj = {};$(ms).trigger("keyup", [ms, e]);clearTimeout(_timer);if (e.keyCode === KEYCODES.ESC && cfg.expanded) {
          ms.combobox.hide();
        }if (e.keyCode === KEYCODES.TAB && cfg.useTabKey === false || e.keyCode > KEYCODES.ENTER && e.keyCode < KEYCODES.SPACE) {
          if (e.keyCode === KEYCODES.CTRL) {
            _ctrlDown = false;
          }return;
        }switch (e.keyCode) {case KEYCODES.UPARROW:case KEYCODES.DOWNARROW:
            e.preventDefault();break;case KEYCODES.ENTER:case KEYCODES.TAB:case KEYCODES.COMMA:
            if (e.keyCode !== KEYCODES.COMMA || cfg.useCommaKey === true) {
              e.preventDefault();if (cfg.expanded === true) {
                selected = ms.combobox.find(".ms-res-item-active:not(.ms-res-item-disabled):first");if (selected.length > 0) {
                  self._selectItem(selected);return;
                }
              }if (inputValid === true && cfg.allowFreeEntries === true) {
                obj[cfg.displayField] = obj[cfg.valueField] = freeInput.trim();ms.addToSelection(obj);ms.collapse();ms.input.focus();
              }break;
            }default:
            if (_selection.length === cfg.maxSelection) {
              self._updateHelper(cfg.maxSelectionRenderer.call(this, _selection.length));
            } else {
              if (freeInput.length < cfg.minChars) {
                self._updateHelper(cfg.minCharsRenderer.call(this, cfg.minChars - freeInput.length));if (cfg.expanded === true) {
                  ms.collapse();
                }
              } else if (cfg.maxEntryLength && freeInput.length > cfg.maxEntryLength) {
                self._updateHelper(cfg.maxEntryRenderer.call(this, freeInput.length - cfg.maxEntryLength));if (cfg.expanded === true) {
                  ms.collapse();
                }
              } else {
                ms.helper.hide();if (cfg.minChars <= freeInput.length) {
                  _timer = setTimeout(function () {
                    if (cfg.expanded === true) {
                      self._processSuggestions();
                    } else {
                      ms.expand();
                    }
                  }, cfg.typeDelay);
                }
              }
            }break;}
      }, _onTagTriggerClick: function _onTagTriggerClick(e) {
        ms.removeFromSelection($(e.currentTarget).data("json"));
      }, _onTriggerClick: function _onTriggerClick() {
        if (ms.isDisabled() === false && !(cfg.expandOnFocus === true && _selection.length === cfg.maxSelection)) {
          $(ms).trigger("triggerclick", [ms]);if (cfg.expanded === true) {
            ms.collapse();
          } else {
            var curLength = ms.getRawValue().length;if (curLength >= cfg.minChars) {
              ms.input.focus();ms.expand();
            } else {
              self._updateHelper(cfg.minCharsRenderer.call(this, cfg.minChars - curLength));
            }
          }
        }
      }, _onWindowResized: function _onWindowResized() {
        self._renderSelection();
      } };if (element !== null) {
      self._render(element);
    }
  };$.fn.magicSuggest = function (options) {
    var obj = $(this);if (obj.size() === 1 && obj.data("magicSuggest")) {
      return obj.data("magicSuggest");
    }obj.each(function (i) {
      var cntr = $(this);if (cntr.data("magicSuggest")) {
        return;
      }if (this.nodeName.toLowerCase() === "select") {
        options.data = [];options.value = [];$.each(this.children, function (index, child) {
          if (child.nodeName && child.nodeName.toLowerCase() === "option") {
            options.data.push({ id: child.value, name: child.text });if ($(child).attr("selected")) {
              options.value.push(child.value);
            }
          }
        });
      }var def = {};$.each(this.attributes, function (i, att) {
        def[att.name] = att.name === "value" && att.value !== "" ? JSON.parse(att.value) : att.value;
      });var field = new MagicSuggest(this, $.extend([], $.fn.magicSuggest.defaults, options, def));cntr.data("magicSuggest", field);field.container.data("magicSuggest", field);
    });if (obj.size() === 1) {
      return obj.data("magicSuggest");
    }return obj;
  };$.fn.magicSuggest.defaults = {};
})(jQuery);

},{"babel-runtime/core-js/json/stringify":216,"babel-runtime/helpers/typeof":249}],11:[function(require,module,exports){
'use strict';

var $ = require('jquery');

require('./polyfill');
require('./babel-polyfill');

window.$ = window.jQuery = $;
window.initGMap = function () {
    return true;
};

require('bootstrap');
require('./plugins/bootstrap-datetimepicker');
require('./magicsuggest.js');

window.onload = function () {
    require('./router').initialize();
    require('./views/modal');
};

},{"./babel-polyfill":8,"./magicsuggest.js":10,"./plugins/bootstrap-datetimepicker":45,"./polyfill":47,"./router":48,"./views/modal":112,"bootstrap":251,"jquery":"jquery"}],12:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    attributes: [{
        name: 'name',
        label: 'Name',
        range: 'String',
        error: 'Please enter a name with no spaces.',
        validate: function validate(val) {
            return val.trim() !== '' && !/\s/.test(val);
        },
        metadata: {}
    }],

    meta: {
        key: 'name'
    },

    resource: 'Collection'
});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],13:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _create2.default)((0, _extends3.default)({}, require('./__proto__'), {

    data: {
        currentCollection: 'Pages',
        currentView: ''
    },

    meta: {
        CsaPageShare: {
            add: false,
            delete: false
        },
        Pages: {
            add: false,
            delete: false
        },
        seasonalAddOnOption: {
            displayAttr: ['seasonalAddOn', 'name']
        },
        sharedeliveryoption: {
            displayAttr: ['share', 'deliveryoption']
        },
        sharegroupdropoff: {
            displayAttr: ['share', 'groupdropoff']
        },
        shareoption: {
            displayAttr: ['name']
        },
        shareoptionoption: {
            displayAttr: ['shareoption', 'label']
        },
        shareoptionshare: {
            displayAttr: ['shareoption', 'share']
        },
        Staff: {
            add: true,
            delete: true
        },
        zipcoderoute: {
            displayAttr: ['zipcode', 'deliveryroute']
        }
    }

}));

},{"./__proto__":44,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/extends":246}],14:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _create2.default)((0, _extends3.default)({}, require('./__proto__'), {

    parse: function parse(response) {
        return response[0];
    }

}), { resource: { value: 'contactinfo' } });

},{"./__proto__":44,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/extends":246}],15:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    dayOfWeekMap: require('./DayOfWeek'),

    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            return (0, _extends3.default)(row, {
                dayOfWeek: _this.dayOfWeekMap[row.dayofweek],
                starttime: _this.moment(_this.moment().format('YYYY-MM-DD') + ' ' + row.starttime).format('h:mmA'),
                endtime: _this.moment(_this.moment().format('YYYY-MM-DD') + ' ' + row.endtime).format('h:mmA')
            });
        });
    },


    resource: "deliveryroute"

});

},{"./DayOfWeek":20,"./__proto__":44,"babel-runtime/helpers/extends":246}],16:[function(require,module,exports){
'use strict';

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    actions: ['Adjustment', 'Payment', 'Reimbursement', 'Season Signup'],

    attributes: ['action', 'value', 'checkNumber', 'initiator', 'created', 'description'],

    getBalance: function getBalance() {
        return this.data.reduce(function (memo, datum) {
            if (datum.action === 'Payment') memo -= datum.value;else memo += datum.value;
            return memo;
        }, 0);
    },
    isNegative: function isNegative(row) {
        if (row.action === 'Payment') return true;

        if (row.action === 'Adjustment' && row.value < 0) return true;
    },
    parse: function parse(response) {
        var _this = this;

        response = response.map(function (row) {
            return _this.parseOne(row);
        });

        if (this.sortAttr) response.sort(function (a, b) {
            return a[_this.sortAttr] > b[_this.sortAttr];
        });

        return response;
    },
    parseOne: function parseOne(datum) {
        return (0, _extends3.default)(datum, { isNegative: this.isNegative(datum) }, { created: (0, _typeof3.default)(datum.created) === 'object' ? datum.created.raw : datum.created });
    },


    resource: 'csaTransaction',

    sortAttr: 'created'

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246,"babel-runtime/helpers/typeof":249}],17:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    dayOfWeekMap: require('./DayOfWeek'),

    parse: function parse(response) {
        var _this = this;

        var groupIds = [];

        return response.reduce(function (memo, row) {
            if (groupIds.includes(row.id)) return memo;
            groupIds.push(row.id);

            var starttime = _this.moment(_this.moment().format('YYYY-MM-DD') + ' ' + row.starttime).format('h:mmA');
            var endtime = _this.moment(_this.moment().format('YYYY-MM-DD') + ' ' + row.endtime).format('h:mmA');

            memo.push((0, _extends3.default)({}, row, {
                location: row.location ? JSON.parse(row.location).coordinates : undefined,
                hours: _this.dayOfWeekMap[row.dayofweek] + ' ' + starttime + ' - ' + endtime
            }));

            return memo;
        }, []);
    },


    resource: 'currentGroups'

});

},{"./DayOfWeek":20,"./__proto__":44,"babel-runtime/helpers/extends":246}],18:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {
    getSizeOptions: function getSizeOptions() {
        return this.data.produceOptions.filter(function (option) {
            return (/size/i.test(option.prompt)
            );
        });
    },


    resource: 'currentShare'

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],19:[function(require,module,exports){
'use strict';

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Member: require('./Member'),
    Person: require('./Person'),

    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            return (0, _keys2.default)(row).reduce(function (memo, key) {
                var index = key.indexOf('.');
                memo[key.slice(0, index)].data[key.slice(index + 1)] = row[key];
                return memo;
            }, { member: (0, _create2.default)(_this.Member, { data: { value: {} } }),
                person: (0, _create2.default)(_this.Person, { data: { value: {} } })
            });
        });
    },


    resource: 'person'

});

},{"./Member":30,"./Person":37,"./__proto__":44,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/extends":246}],20:[function(require,module,exports){
'use strict';

module.exports = {
    0: 'Sunday',
    1: 'Monday',
    2: 'Tuesday',
    3: 'Wednesday',
    4: 'Thursday',
    5: 'Friday',
    6: 'Saturday'
};

},{}],21:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return (0, _keys2.default)(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (!memo[table]) memo[table] = {};
                memo[table][key.slice(index + 1)] = row[key];
                return memo;
            }, {});
        });
    },


    resource: 'membersharedelivery'

});

},{"./__proto__":44,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/extends":246}],22:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = require('backbone').Model.extend((0, _extends3.default)({}, require('../../../lib/MyObject').prototype, {
    parse: function parse(moment) {
        return {
            id: moment.dayOfYear(),
            date: moment.format('YYYY-MM-DD'),
            dayOfWeek: moment.format('ddd'),
            dayOfMonth: moment.format('D'),
            epoch: moment.unix(),
            month: moment.format('MMM'),
            monthNum: moment.format('M')
        };
    }
}));

},{"../../../lib/MyObject":204,"babel-runtime/helpers/extends":246,"backbone":"backbone"}],23:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = require('backbone').Model.extend((0, _extends3.default)({}, require('../../../lib/MyObject').prototype, {

    dayOfWeekMap: require('./DayOfWeek'),

    parse: function parse(response) {
        return (0, _extends3.default)(response, {
            dayOfWeek: this.dayOfWeekMap[response.dayofweek],
            starttime: this.moment(this.moment().format('YYYY-MM-DD') + ' ' + response.starttime).format('h:mmA'),
            endtime: this.moment(this.moment().format('YYYY-MM-DD') + ' ' + response.endtime).format('h:mmA')
        });
    },


    urlRoot: "/deliveryroute"

}));

},{"../../../lib/MyObject":204,"./DayOfWeek":20,"babel-runtime/helpers/extends":246,"backbone":"backbone"}],24:[function(require,module,exports){
'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    attributes: {},

    data: {},

    meta: {
        key: '_id'
    },

    toList: function toList(document) {
        document = document || this.data;
        return (0, _keys2.default)(document).sort().map(function (key) {
            return { key: key, value: document[key] };
        });
    },
    toObj: function toObj() {
        this.data = this.reducer(this.data, function (datum) {
            return (0, _defineProperty3.default)({}, datum.key, datum.value);
        });
        return this;
    }
});

},{"./__proto__":44,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246}],25:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = require('backbone').Model.extend((0, _extends3.default)({}, require('../../../lib/MyObject').prototype, {

    dayOfWeekMap: require('./DeliveryRoute').prototype.dayOfWeekMap,

    initialize: function initialize() {
        var _this = this;

        this.on('change:dayofweek', function () {
            return _this.updateReadableDay();
        });
    },
    updateReadableDay: function updateReadableDay() {
        this.set({ dayOfWeek: this.dayOfWeekMap[this.get('dayofweek')] });
    }
}));

},{"../../../lib/MyObject":204,"./DeliveryRoute":23,"babel-runtime/helpers/extends":246,"backbone":"backbone"}],26:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    CsaDelivery: require('./CsaDelivery'),

    getHours: function getHours() {
        var _this = this;

        return this.CsaDelivery.get({ query: { label: 'farm' } }).then(function () {
            var farmPickup = _this.CsaDelivery.data[0];
            _this.data[0].hours = farmPickup.dayOfWeek + ' ' + farmPickup.starttime + ' - ' + farmPickup.endtime;
            return _promise2.default.resolve();
        });
    },
    parse: function parse(response) {
        return response.map(function (row) {
            return (0, _extends3.default)({
                name: 'Pick-up from our farm!',
                street: row.farmpickup.split(',')[0],
                cityStateZip: row.cityStateZip,
                location: JSON.parse(row.location).coordinates
            });
        });
    },


    resource: 'contactinfo'

});

},{"./CsaDelivery":15,"./__proto__":44,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],27:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return row.location ? (0, _extends3.default)(row, { location: JSON.parse(row.location).coordinates }) : row;
        });
    },


    resource: 'farmermarket'

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],28:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    resource: 'food'

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],29:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    attributes: [{ name: 'farmerMarket', el: 'farmerMarketsList', label: "Farmer's Market", color: '#ed1c24' }, { name: 'retailOutlet', el: 'retailOutletsList', label: 'Retail Outlet', color: '#ffdd14' }, { name: 'restaurant', el: 'restaurantsList', label: 'Restaurant', color: '#231f20' }, { name: 'groupLocation', el: 'groupLocationsList', label: 'Group Location', color: '#f8941e' }, { name: 'deliveryRange', label: 'Delivery Range', color: '#ed1c24' }, { name: 'farmPickup', el: 'groupLocationsList', label: 'Patchwork Gardens' }],

    data: {
        deliveryRangeCoords: [{ lat: 39.871435, lng: -84.367880 }, { lat: 39.901132, lng: -84.097279 }, { lat: 39.926834, lng: -83.806420 }, { lat: 39.813106, lng: -83.815755 }, { lat: 39.726784, lng: -83.788941 }, { lat: 39.615032, lng: -84.008702 }, { lat: 39.526260, lng: -84.088909 }, { lat: 39.542528, lng: -84.293660 }, { lat: 39.601278, lng: -84.369877 }]
    }

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],30:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    resource: 'member'

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],31:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    resource: 'memberfoodomission'

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],32:[function(require,module,exports){
'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends4.default)({}, require('./__proto__'), {
    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            var startDate = _this.moment(row['share.startdate']),
                endDate = _this.moment(row['share.enddate']);

            return (0, _keys2.default)(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);

                if (table !== 'share') return memo;

                return (0, _extends4.default)(memo, (0, _defineProperty3.default)({}, key.slice(index + 1), row[key]), {
                    duration: Math.ceil(endDate.diff(startDate, 'days') / 7),
                    humanEnddate: endDate.format("MMM D"),
                    humanStartdate: startDate.format("MMM D")
                });
            }, { membershareid: row['membershare.id'] });
        });
    },


    resource: 'membershare'
});

},{"./__proto__":44,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246}],33:[function(require,module,exports){
'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends4.default)({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return (0, _keys2.default)(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (table !== 'seasonalAddOn' && table !== 'seasonalAddOnOption') return memo;

                return (0, _extends4.default)(memo, (0, _defineProperty3.default)({}, key.slice(index + 1), row[key]));
            }, { addOn: row['seasonalAddOn.label'], addOnOption: row['seasonalAddOnOption.label'] });
        });
    },


    resource: 'memberShareSeasonalAddOn'
});

},{"./__proto__":44,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246}],34:[function(require,module,exports){
'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends4.default)({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return (0, _keys2.default)(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (table !== 'shareoptionoption') return memo;

                return (0, _extends4.default)(memo, (0, _defineProperty3.default)({}, key.slice(index + 1), row[key]));
            }, { shareoptionid: row['membershareoption.shareoptionid'], membershareoptionid: row['membershareoption.id'] });
        });
    },


    resource: 'membershareoption'
});

},{"./__proto__":44,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246}],35:[function(require,module,exports){
'use strict';

module.exports = {
    data: [{ label: 'About', name: 'about' }, { label: 'CSA Program', name: 'csa' }, { label: 'Locations', name: 'locations' }, { label: 'Get Involved', name: 'get-involved' }, { label: 'Contact', name: 'contact' }]
};

},{}],36:[function(require,module,exports){
'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends4.default)({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return (0, _keys2.default)(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (table !== 'shareoption') return memo;

                return (0, _extends4.default)(memo, (0, _defineProperty3.default)({}, key.slice(index + 1), row[key]));
            }, {});
        });
    },


    resource: 'shareoptionshare'
});

},{"./__proto__":44,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246}],37:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    resource: 'person'

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],38:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return row.location ? (0, _extends3.default)(row, { location: JSON.parse(row.location).coordinates }) : row;
        });
    },


    resource: 'restaurant'

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],39:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return row.location ? (0, _extends3.default)(row, { location: JSON.parse(row.location).coordinates }) : row;
        });
    },


    resource: 'retailoutlet'

});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],40:[function(require,module,exports){
'use strict';

var _isInteger = require('babel-runtime/core-js/number/is-integer');

var _isInteger2 = _interopRequireDefault(_isInteger);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = require('backbone').Model.extend((0, _extends3.default)({}, require('../../../lib/MyObject').prototype, {

    Collection: require('backbone').Collection,

    DeliveryDate: require('./DeliveryDate'),

    Dropoff: require('./Dropoff'),

    dayOfWeekMap: require('./DeliveryRoute').prototype.dayOfWeekMap,

    determineNextDeliveryCutoff: function determineNextDeliveryCutoff(dayOfWeek) {
        var nextDeliveryDay = dayOfWeek > 4 ? 15 : 8;
        return this.moment().day(nextDeliveryDay).hour(0).minute(0).second(0).millisecond(0);
    },
    getDeliveryDates: function getDeliveryDates() {
        var dates = [],
            now = this.moment(),
            deliveryDay = this.get('selectedDelivery').dayofweek,
            deliveryDate = this.moment(this.get('startdate')),
            endDate = this.moment(this.get('enddate')),
            nextDeliveryCutoff = this.determineNextDeliveryCutoff(now.day()),
            startDay = startDay = deliveryDate.day();

        if (!(0, _isInteger2.default)(deliveryDay)) return new this.Collection([]);

        while (startDay != deliveryDay) {
            deliveryDate.add(1, 'days');
            startDay = this.moment(deliveryDate).day();
        }

        while (endDate.diff(deliveryDate, 'days') >= 0) {
            var model = new this.DeliveryDate(deliveryDate, { parse: true });
            if (deliveryDate.diff(nextDeliveryCutoff) < 0) model.set({ unselectable: true });
            dates.push(model);
            deliveryDate.add(7, 'days');
        }

        this.set({ deliveryDates: new this.Collection(dates) });

        return this.get('deliveryDates');
    },
    getDeliveryOptions: function getDeliveryOptions() {
        var _this = this;

        if (this.has('deliveryoptions')) return this.Q(this.get('deliveryoptions'));

        return this.Q(new (this.Collection.extend({ url: "/sharedeliveryoption" }))().fetch({ data: { shareid: this.id } })).then(function (mappings) {
            var deliveryOptions = new (_this.Collection.extend({ url: "/deliveryoption" }))();

            _this.set({ deliveryoptions: deliveryOptions });

            if (mappings.length === 0) return _this.Q();

            return _this.Q(deliveryOptions.fetch({ data: { id: mappings.map(function (record) {
                        return record.deliveryoptionid;
                    }).join(',') } }));
        }).fail(function (e) {
            return console.log("Getting Delivery Options : " + e.stack || e);
        });
    },
    getGroupDropoffs: function getGroupDropoffs() {
        var _this2 = this;

        var mappings = new (this.Collection.extend({ url: "/sharegroupdropoff" }))();

        if (this.has('groupdropoffs')) return this.Q(this.get('groupdropoffs'));

        return this.Q(mappings.fetch({ data: { shareid: this.id } })).then(function () {
            var groupDropoffs;

            if (mappings.length === 0) return;

            groupDropoffs = new (_this2.Collection.extend({ model: _this2.Dropoff, url: "/groupdropoff" }))();
            _this2.set({ groupdropoffs: groupDropoffs });

            return _this2.Q(groupDropoffs.fetch({ data: { id: mappings.map(function (record) {
                        return record.get('groupdropoffid');
                    }).join(',') } }));
        }).then(function () {

            if (mappings.length === 0) return _this2.set('groupdropoffs', []);

            _this2.get('groupdropoffs').forEach(function (dropoff) {
                var mapping = mappings.find(function (model) {
                    return model.get('groupdropoffid') == dropoff.id;
                });

                dropoff.set({
                    dayofweek: mapping.get('dayofweek'),
                    starttime: _this2.timeToHumanTime(mapping.get('starttime')),
                    endtime: _this2.timeToHumanTime(mapping.get('endtime'))
                });
            });
        }).fail(function (e) {
            return console.log("Getting Group Dropoffs : " + e.stack || e);
        });
    },
    getSelectedDates: function getSelectedDates() {
        var _this3 = this;

        this.set({ selectedDates: this._(this.get('deliveryDates').reject(function (deliveryDay) {
                return deliveryDay.get('unselectable');
            })).reject(function (deliveryDay) {
                return _this3._(_this3.get('skipDays')).contains(deliveryDay.id);
            })
        });
    },
    getShareOptions: function getShareOptions() {
        var _this4 = this;

        if (this.has('shareoptions')) return this.Q(this.get('shareoptions'));

        return this.Q(new (this.Collection.extend({ url: "/shareoptionshare" }))().fetch({ data: { shareid: this.id } })).then(function (mappings) {
            var shareOptions;

            if (mappings.length === 0) return;

            shareOptions = new (_this4.Collection.extend({ url: "/shareoption" }))();
            _this4.set({ shareoptions: shareOptions });

            return _this4.Q(shareOptions.fetch({ data: { id: mappings.map(function (record) {
                        return record.shareoptionid;
                    }).join(',') } }));
        }).then(function () {
            return _this4.Q.all(_this4.get('shareoptions').map(function (shareOption) {
                shareOption.set({ options: new (_this4.Collection.extend({ comparator: _this4.shareOptionOptionComparator, url: "/shareoptionoption" }))() });
                return _this4.Q(shareOption.get('options').fetch({ data: { shareoptionid: shareOption.id } }));
            }));
        }).then(function () {
            _this4.get('shareoptions').comparator = _this4.shareOptionComparator;
            _this4.get('shareoptions').sort();
        }).fail(function (e) {
            return console.log("Getting Share Options : " + e.stack || e);
        });
    },
    moneyToFloat: function moneyToFloat(money) {
        return parseFloat(money.replace(/\$|,/g, ""));
    },
    parse: function parse(response) {
        var startDate = this.moment(response.startdate),
            endDate = this.moment(response.enddate);

        return (0, _extends3.default)(response, {
            duration: Math.ceil(endDate.diff(startDate, 'days') / 7),
            humanEnddate: endDate.format("MMM D"),
            humanStartdate: startDate.format("MMM D"),
            startEpoch: startDate.unix()
        });
    },
    shareOptionComparator: function shareOptionComparator(a, b) {
        var moneyToFloat = function moneyToFloat(money) {
            return parseFloat(money.replace(/\$|,/g, ""));
        },
            aVal = moneyToFloat(a.get('options').at(a.get('options').length - 1).get('price')),
            bVal = moneyToFloat(b.get('options').at(b.get('options').length - 1).get('price'));

        return aVal > bVal ? -1 : bVal > aVal ? 1 : 0;
    },
    shareOptionOptionComparator: function shareOptionOptionComparator(a, b) {
        var moneyToFloat = function moneyToFloat(money) {
            return parseFloat(money.replace(/\$|,/g, ""));
        },
            aVal = moneyToFloat(a.get('price')),
            bVal = moneyToFloat(b.get('price'));

        return aVal > bVal ? 1 : bVal > aVal ? -1 : 0;
    },
    timeToHumanTime: function timeToHumanTime(time) {
        return this.moment(this.moment().format('YYYY-MM-DD') + ' ' + time).format('h:mmA');
    }
}));

},{"../../../lib/MyObject":204,"./DeliveryDate":22,"./DeliveryRoute":23,"./Dropoff":25,"babel-runtime/core-js/number/is-integer":223,"babel-runtime/helpers/extends":246,"backbone":"backbone"}],41:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    resource: 'shareoptionoption'
});

},{"./__proto__":44,"babel-runtime/helpers/extends":246}],42:[function(require,module,exports){
'use strict';

module.exports = new (require('backbone').Model.extend({

    defaults: function defaults() {
        return { state: {} };
    },

    isAdmin: function isAdmin() {
        var roles = this.get('roles');

        if (!Array.isArray(roles)) return false;

        return roles.includes('admin');
    },
    isLoggedIn: function isLoggedIn() {
        return Boolean(this.id && this.get('emailVerified'));
    },
    url: function url() {
        return "/user";
    }
}))();

},{"backbone":"backbone"}],43:[function(require,module,exports){
'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    ContactInfo: require('./ContactInfo'),
    CurrentGroups: require('./CurrentGroups'),
    DayOfWeekMap: require('./DayOfWeek'),
    DeliveryRoute: (0, _create2.default)(require('./__proto__'), { resource: { value: 'deliveryroute' } }),
    SkipWeeks: (0, _create2.default)(require('./__proto__'), { resource: { value: 'membershareskipweek' } }),

    attachments: [],

    getSkipWeekStatus: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(customer) {
            var _this = this;

            var skipWeeks, startOfWeek, endOfWeek;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            customer.isSkipping = false;
                            _context.next = 3;
                            return this.SkipWeeks.get({ query: { membershareid: customer.memberShareId } });

                        case 3:
                            skipWeeks = _context.sent;
                            startOfWeek = this.Moment().startOf('isoWeek');
                            endOfWeek = this.Moment().endOf('isoWeek');


                            skipWeeks.forEach(function (sw) {
                                var skipDate = _this.Moment(sw.date);
                                if (skipDate.isBetween(startOfWeek, endOfWeek) || skipDate.isSame(startOfWeek) || skipDate.isSame(endOfWeek)) customer.isSkipping = true;
                            });

                        case 7:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function getSkipWeekStatus(_x) {
            return _ref.apply(this, arguments);
        }

        return getSkipWeekStatus;
    }(),
    getDayOptions: function getDayOptions() {
        return (0, _entries2.default)(this.DayOfWeekMap).map(function (_ref2) {
            var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),
                k = _ref3[0],
                v = _ref3[1];

            return '<option value="' + k + '">' + v + '</option>';
        }).join('');
    },
    getGroupNameOptions: function getGroupNameOptions() {
        return this.CurrentGroups.data.map(function (datum) {
            return '<option value="' + datum.name + '">' + datum.name + '</option>';
        }).join('');
    },


    metadata: {
        columns: [{ name: 'name', label: 'Name' }, { name: 'email', label: 'Email' }, { name: 'secondaryEmail', label: 'Secondary Email' }, { name: 'deliveryLabel', label: 'Delivery Type' }, { name: 'dayofweek', label: 'Delivery Day' }]
    },

    parse: function parse(response) {
        var _this2 = this;

        var contactInfo = this.ContactInfo.data;
        var farmPickupInfo = this.DeliveryRoute.data[0];

        return response.map(function (row) {

            if (row.deliveryName === 'farm') {
                row = (0, _extends3.default)({}, row, { pickupAddress: contactInfo.farmpickup, dayofweek: farmPickupInfo.dayofweek, starttime: farmPickupInfo.starttime, endtime: farmPickupInfo.endtime });
            }

            return (0, _extends3.default)({}, row, {
                dayofweek: _this2.DayOfWeekMap[row.dayofweek],
                starttime: row.starttime ? _this2.Moment(_this2.Moment().format('YYYY-MM-DD') + ' ' + row.starttime).format('h:mmA') : null,
                endtime: row.endtime ? _this2.Moment(_this2.Moment().format('YYYY-MM-DD') + ' ' + row.endtime).format('h:mmA') : null
            });
        });
    },
    sortIntoEmails: function sortIntoEmails(list) {
        var _this3 = this;

        var hasAttachment = Boolean(this.attachments.length);
        var customLinesArray = void 0,
            customLinesMarkup = void 0;

        if (this.emailIsCustom) {
            customLinesArray = this.customTextValue.split('\n');
            customLinesMarkup = customLinesArray.reduce(function (memo, line) {
                if (!line.length) return memo;
                return memo + '<p>' + line + '</p>';
            }, '');
        }

        return list.reduce(function (memo, customer) {
            var key = customer.dropoffName || customer.deliveryName;
            var bodyTemplate = _this3.emailIsCustom && _this3.replaceDefaultTemplate ? _this3.Templates.custom({ paragraphs: customLinesMarkup }) : _this3.Templates[customer.dropoffName ? 'group' : customer.deliveryName]((0, _extends3.default)({}, customer, { hasAttachment: hasAttachment, customText: customLinesMarkup }));

            if (!memo[key]) {
                memo[key] = {};
                memo[key].recipients = [];
                memo[key].subject = _this3.subjectLine;
                memo[key].template = _this3.Templates.emailHeader() + bodyTemplate;
            }

            memo[key].recipients.push(customer.email);
            if (customer.secondaryEmail) memo[key].recipients.push(customer.secondaryEmail);

            return memo;
        }, {});
    },


    resource: 'weekly-reminder',

    Templates: {
        custom: require('../views/templates/CustomEmail'),
        farm: require('../views/templates/FarmReminder'),
        group: require('../views/templates/GroupReminder'),
        emailHeader: require('../views/templates/EmailHeader'),
        home: require('../views/templates/HomeReminder')
    }

});

},{"../views/templates/CustomEmail":142,"../views/templates/EmailHeader":149,"../views/templates/FarmReminder":150,"../views/templates/GroupReminder":157,"../views/templates/HomeReminder":160,"./ContactInfo":14,"./CurrentGroups":17,"./DayOfWeek":20,"./__proto__":44,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/entries":228,"babel-runtime/helpers/asyncToGenerator":244,"babel-runtime/helpers/extends":246,"babel-runtime/helpers/slicedToArray":247,"babel-runtime/regenerator":250}],44:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('../../../lib/Model'), require('events').EventEmitter.prototype, {

    Xhr: require('../Xhr'),

    Moment: require('moment'),

    add: function add(datum) {
        this.data.push(datum);

        if (this.storeBy) this._storeOne(datum);

        return this;
    },
    delete: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(id) {
            var _this = this;

            var datum;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return this.Xhr({ method: 'DELETE', resource: this.resource, id: id });

                        case 2:
                            datum = this.data.find(function (datum) {
                                return datum.id == id;
                            });


                            if (this.store) {
                                (0, _keys2.default)(this.store).forEach(function (attr) {
                                    _this.store[attr][datum[attr]] = _this.store[attr][datum[attr]].filter(function (datum) {
                                        return datum.id != id;
                                    });
                                    if (_this.store[attr][datum[attr]].length === 0) {
                                        _this.store[attr][datum[attr]] = undefined;
                                    }
                                });
                            }

                            this.data = this.data.filter(function (datum) {
                                return datum.id != id;
                            });

                            return _context.abrupt('return', datum);

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function _delete(_x) {
            return _ref.apply(this, arguments);
        }

        return _delete;
    }(),
    deleteByKey: function () {
        var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            var _this2 = this;

            var keyValue, key, datum;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            keyValue = this.data[this.meta.key];
                            _context2.next = 3;
                            return this.Xhr({ method: 'DELETE', resource: this.resource, id: keyValue });

                        case 3:
                            key = this.meta.key;


                            if (Array.isArray(this.data)) {
                                datum = this.data.find(function (datum) {
                                    return datum[key] == keyValue;
                                });


                                if (this.store) {
                                    (0, _keys2.default)(this.store).forEach(function (attr) {
                                        _this2.store[attr][datum[attr]] = _this2.store[attr][datum[attr]].filter(function (datum) {
                                            return datum[key] != keyValue;
                                        });
                                        if (_this2.store[attr][datum[attr]].length === 0) {
                                            _this2.store[attr][datum[attr]] = undefined;
                                        }
                                    });
                                }

                                this.data = this.data.filter(function (datum) {
                                    return datum[key] != keyValue;
                                });
                            }

                            return _context2.abrupt('return', this.data);

                        case 6:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function deleteByKey() {
            return _ref2.apply(this, arguments);
        }

        return deleteByKey;
    }(),
    get: function get() {
        var _this3 = this;

        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { query: {} };

        if (opts.query || this.pagination) (0, _extends3.default)(opts.query, this.pagination);
        return this.Xhr({ method: opts.method || 'get', resource: opts.resource || this.resource, headers: this.headers || {}, qs: opts.query ? (0, _stringify2.default)(opts.query) : undefined }).then(function (response) {
            if (opts.storeBy) _this3._resetStore(opts.storeBy);
            _this3.data = _this3.parse ? _this3.parse(response) : response;
            if (opts.storeBy) _this3._store();
            return _promise2.default.resolve(_this3.data);
        });
    },
    getCount: function getCount() {
        var _this4 = this;

        return this.Xhr({ method: 'get', resource: this.resource, headers: this.headers || {}, qs: (0, _stringify2.default)({ countOnly: true }) }).then(function (response) {
            var count = Array.isArray(response) ? response[0].count : response.result;
            _this4.meta.count = count;
            return _promise2.default.resolve(count);
        });
    },
    git: function git(attr) {
        return this.data[attr];
    },
    moneyToReal: function moneyToReal(price) {
        return parseFloat(price.replace(/\$|,/g, ""));
    },
    patch: function patch(id, data) {
        var _this5 = this;

        return this.Xhr({ method: 'patch', id: id, resource: this.resource, headers: (0, _extends3.default)({ v2: true }, this.headers || {}), data: (0, _stringify2.default)(data || this.data) }).then(function (response) {

            if (Array.isArray(_this5.data)) {
                _this5.data = _this5.data ? _this5.data.concat(response) : [response];
                if (_this5.store) (0, _keys2.default)(_this5.store).forEach(function (attr) {
                    return _this5._store(response, attr);
                });
            } else {
                _this5.data = response;
            }

            return _promise2.default.resolve(response);
        });
    },
    _put: function _put(keyValue, data) {
        var _this6 = this;

        var item = this.data.find(function (datum) {
            return datum[_this6.meta.key] == keyValue;
        });
        if (item) {
            (0, _keys2.default)(data).forEach(function (key) {
                return item[key] = data[key];
            });
        }
        return this;
    },
    put: function put(id, data) {
        var _this7 = this;

        return this.Xhr({ method: 'put', id: id, resource: this.resource, headers: this.headers || {}, data: (0, _stringify2.default)(data) }).then(function (response) {

            if (Array.isArray(_this7.data)) {} else {
                _this7.data = response;
            }

            return _promise2.default.resolve(response);
        });
    },
    post: function post(model) {
        var _this8 = this;

        return this.Xhr({ method: 'post', resource: this.resource, headers: (0, _extends3.default)({ v2: true }, this.headers || {}), data: (0, _stringify2.default)(model || this.data) }).then(function (response) {

            if (Array.isArray(_this8.data)) {
                _this8.data = _this8.data ? _this8.data.concat(response) : [response];
                if (_this8.store) (0, _keys2.default)(_this8.store).forEach(function (attr) {
                    return _this8._store(response, attr);
                });
            } else {
                _this8.data = response;
            }

            return _promise2.default.resolve(response);
        });
    },
    remove: function remove(item) {
        var index = this.data.findIndex(function (datum) {
            return (0, _stringify2.default)(datum) === (0, _stringify2.default)(item);
        });

        if (index === -1) return;

        this.data.splice(index, 1);
    },
    set: function set(attr, value) {
        this.data[attr] = value;
        this.emit(attr + 'Changed');
    },
    validate: function validate(data) {
        var _this9 = this;

        var valid = true;

        (0, _keys2.default)(data).forEach(function (name) {
            var val = data[name],
                attribute = _this9.attributes.find(function (attr) {
                return attr.name === name || attr.columnName === name;
            });

            if ((attribute === undefined || !attribute.validate) && !(attribute.fk && attribute.validate)) {
                _this9.data[name] = val ? typeof val === 'string' ? val.trim() : val : undefined;
            } else if (valid && !_this9.validateDatum(attribute, val)) {
                _this9.emit('validationError', attribute);
                valid = false;
            } else if (_this9.validateDatum(attribute, val)) {
                _this9.data[name] = typeof val === 'string' ? val.trim() : val;
            }
        });

        return valid;
    },
    validateDatum: function validateDatum(attr, val) {
        return attr.validate.call(this, typeof val === 'string' ? val.trim() : val);
    },
    validateRepeatPassword: function validateRepeatPassword() {
        var valid = true;

        if (this.data.repeatPassword !== this.data.password) {
            this.emit('validationError', this.attributes.find(function (attr) {
                return attr.name === 'repeatPassword';
            }));
            valid = false;
        }

        return valid;
    }
});

},{"../../../lib/Model":202,"../Xhr":7,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/asyncToGenerator":244,"babel-runtime/helpers/extends":246,"babel-runtime/regenerator":250,"events":429,"moment":"moment"}],45:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*! version : 4.17.37
 =========================================================
 bootstrap-datetimejs
 https://github.com/Eonasdan/bootstrap-datetimepicker
 Copyright (c) 2015 Jonathan Peterson
 =========================================================
 */
/*
 The MIT License (MIT)

 Copyright (c) 2015 Jonathan Peterson

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
/*global define:false */
/*global exports:false */
/*global require:false */
/*global jQuery:false */
/*global moment:false */
(function (factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        // AMD is used - Register as an anonymous module.
        define(['jquery', 'moment'], factory);
    } else if ((typeof exports === 'undefined' ? 'undefined' : (0, _typeof3.default)(exports)) === 'object') {
        factory(require('jquery'), require('moment'));
    } else {
        // Neither AMD nor CommonJS used. Use global variables.
        if (typeof jQuery === 'undefined') {
            throw 'bootstrap-datetimepicker requires jQuery to be loaded first';
        }
        if (typeof moment === 'undefined') {
            throw 'bootstrap-datetimepicker requires Moment.js to be loaded first';
        }
        factory(jQuery, moment);
    }
})(function ($, moment) {
    'use strict';

    if (!moment) {
        throw new Error('bootstrap-datetimepicker requires Moment.js to be loaded first');
    }

    var dateTimePicker = function dateTimePicker(element, options) {
        var picker = {},
            date,
            viewDate,
            unset = true,
            input,
            component = false,
            widget = false,
            use24Hours,
            minViewModeNumber = 0,
            actualFormat,
            parseFormats,
            currentViewMode,
            datePickerModes = [{
            clsName: 'days',
            navFnc: 'M',
            navStep: 1
        }, {
            clsName: 'months',
            navFnc: 'y',
            navStep: 1
        }, {
            clsName: 'years',
            navFnc: 'y',
            navStep: 10
        }, {
            clsName: 'decades',
            navFnc: 'y',
            navStep: 100
        }],
            viewModes = ['days', 'months', 'years', 'decades'],
            verticalModes = ['top', 'bottom', 'auto'],
            horizontalModes = ['left', 'right', 'auto'],
            toolbarPlacements = ['default', 'top', 'bottom'],
            keyMap = {
            'up': 38,
            38: 'up',
            'down': 40,
            40: 'down',
            'left': 37,
            37: 'left',
            'right': 39,
            39: 'right',
            'tab': 9,
            9: 'tab',
            'escape': 27,
            27: 'escape',
            'enter': 13,
            13: 'enter',
            'pageUp': 33,
            33: 'pageUp',
            'pageDown': 34,
            34: 'pageDown',
            'shift': 16,
            16: 'shift',
            'control': 17,
            17: 'control',
            'space': 32,
            32: 'space',
            't': 84,
            84: 't',
            'delete': 46,
            46: 'delete'
        },
            keyState = {},


        /********************************************************************************
         *
         * Private functions
         *
         ********************************************************************************/
        getMoment = function getMoment(d) {
            var tzEnabled = false,
                returnMoment,
                currentZoneOffset,
                incomingZoneOffset,
                timeZoneIndicator,
                dateWithTimeZoneInfo;

            if (moment.tz !== undefined && options.timeZone !== undefined && options.timeZone !== null && options.timeZone !== '') {
                tzEnabled = true;
            }
            if (d === undefined || d === null) {
                if (tzEnabled) {
                    returnMoment = moment().tz(options.timeZone).startOf('d');
                } else {
                    returnMoment = moment().startOf('d');
                }
            } else {
                if (tzEnabled) {
                    currentZoneOffset = moment().tz(options.timeZone).utcOffset();
                    incomingZoneOffset = moment(d, parseFormats, options.useStrict).utcOffset();
                    if (incomingZoneOffset !== currentZoneOffset) {
                        timeZoneIndicator = moment().tz(options.timeZone).format('Z');
                        dateWithTimeZoneInfo = moment(d, parseFormats, options.useStrict).format('YYYY-MM-DD[T]HH:mm:ss') + timeZoneIndicator;
                        returnMoment = moment(dateWithTimeZoneInfo, parseFormats, options.useStrict).tz(options.timeZone);
                    } else {
                        returnMoment = moment(d, parseFormats, options.useStrict).tz(options.timeZone);
                    }
                } else {
                    returnMoment = moment(d, parseFormats, options.useStrict);
                }
            }
            return returnMoment;
        },
            isEnabled = function isEnabled(granularity) {
            if (typeof granularity !== 'string' || granularity.length > 1) {
                throw new TypeError('isEnabled expects a single character string parameter');
            }
            switch (granularity) {
                case 'y':
                    return actualFormat.indexOf('Y') !== -1;
                case 'M':
                    return actualFormat.indexOf('M') !== -1;
                case 'd':
                    return actualFormat.toLowerCase().indexOf('d') !== -1;
                case 'h':
                case 'H':
                    return actualFormat.toLowerCase().indexOf('h') !== -1;
                case 'm':
                    return actualFormat.indexOf('m') !== -1;
                case 's':
                    return actualFormat.indexOf('s') !== -1;
                default:
                    return false;
            }
        },
            hasTime = function hasTime() {
            return isEnabled('h') || isEnabled('m') || isEnabled('s');
        },
            hasDate = function hasDate() {
            return isEnabled('y') || isEnabled('M') || isEnabled('d');
        },
            getDatePickerTemplate = function getDatePickerTemplate() {
            var headTemplate = $('<thead>').append($('<tr>').append($('<th>').addClass('prev').attr('data-action', 'previous').append($('<span>').addClass(options.icons.previous))).append($('<th>').addClass('picker-switch').attr('data-action', 'pickerSwitch').attr('colspan', options.calendarWeeks ? '6' : '5')).append($('<th>').addClass('next').attr('data-action', 'next').append($('<span>').addClass(options.icons.next)))),
                contTemplate = $('<tbody>').append($('<tr>').append($('<td>').attr('colspan', options.calendarWeeks ? '8' : '7')));

            return [$('<div>').addClass('datepicker-days').append($('<table>').addClass('table-condensed').append(headTemplate).append($('<tbody>'))), $('<div>').addClass('datepicker-months').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone())), $('<div>').addClass('datepicker-years').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone())), $('<div>').addClass('datepicker-decades').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone()))];
        },
            getTimePickerMainTemplate = function getTimePickerMainTemplate() {
            var topRow = $('<tr>'),
                middleRow = $('<tr>'),
                bottomRow = $('<tr>');

            if (isEnabled('h')) {
                topRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.incrementHour }).addClass('btn').attr('data-action', 'incrementHours').append($('<span>').addClass(options.icons.up))));
                middleRow.append($('<td>').append($('<span>').addClass('timepicker-hour').attr({ 'data-time-component': 'hours', 'title': options.tooltips.pickHour }).attr('data-action', 'showHours')));
                bottomRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.decrementHour }).addClass('btn').attr('data-action', 'decrementHours').append($('<span>').addClass(options.icons.down))));
            }
            if (isEnabled('m')) {
                if (isEnabled('h')) {
                    topRow.append($('<td>').addClass('separator'));
                    middleRow.append($('<td>').addClass('separator').html(':'));
                    bottomRow.append($('<td>').addClass('separator'));
                }
                topRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.incrementMinute }).addClass('btn').attr('data-action', 'incrementMinutes').append($('<span>').addClass(options.icons.up))));
                middleRow.append($('<td>').append($('<span>').addClass('timepicker-minute').attr({ 'data-time-component': 'minutes', 'title': options.tooltips.pickMinute }).attr('data-action', 'showMinutes')));
                bottomRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.decrementMinute }).addClass('btn').attr('data-action', 'decrementMinutes').append($('<span>').addClass(options.icons.down))));
            }
            if (isEnabled('s')) {
                if (isEnabled('m')) {
                    topRow.append($('<td>').addClass('separator'));
                    middleRow.append($('<td>').addClass('separator').html(':'));
                    bottomRow.append($('<td>').addClass('separator'));
                }
                topRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.incrementSecond }).addClass('btn').attr('data-action', 'incrementSeconds').append($('<span>').addClass(options.icons.up))));
                middleRow.append($('<td>').append($('<span>').addClass('timepicker-second').attr({ 'data-time-component': 'seconds', 'title': options.tooltips.pickSecond }).attr('data-action', 'showSeconds')));
                bottomRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.decrementSecond }).addClass('btn').attr('data-action', 'decrementSeconds').append($('<span>').addClass(options.icons.down))));
            }

            if (!use24Hours) {
                topRow.append($('<td>').addClass('separator'));
                middleRow.append($('<td>').append($('<button>').addClass('btn btn-primary').attr({ 'data-action': 'togglePeriod', tabindex: '-1', 'title': options.tooltips.togglePeriod })));
                bottomRow.append($('<td>').addClass('separator'));
            }

            return $('<div>').addClass('timepicker-picker').append($('<table>').addClass('table-condensed').append([topRow, middleRow, bottomRow]));
        },
            getTimePickerTemplate = function getTimePickerTemplate() {
            var hoursView = $('<div>').addClass('timepicker-hours').append($('<table>').addClass('table-condensed')),
                minutesView = $('<div>').addClass('timepicker-minutes').append($('<table>').addClass('table-condensed')),
                secondsView = $('<div>').addClass('timepicker-seconds').append($('<table>').addClass('table-condensed')),
                ret = [getTimePickerMainTemplate()];

            if (isEnabled('h')) {
                ret.push(hoursView);
            }
            if (isEnabled('m')) {
                ret.push(minutesView);
            }
            if (isEnabled('s')) {
                ret.push(secondsView);
            }

            return ret;
        },
            getToolbar = function getToolbar() {
            var row = [];
            if (options.showTodayButton) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'today', 'title': options.tooltips.today }).append($('<span>').addClass(options.icons.today))));
            }
            if (!options.sideBySide && hasDate() && hasTime()) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'togglePicker', 'title': options.tooltips.selectTime }).append($('<span>').addClass(options.icons.time))));
            }
            if (options.showClear) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'clear', 'title': options.tooltips.clear }).append($('<span>').addClass(options.icons.clear))));
            }
            if (options.showClose) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'close', 'title': options.tooltips.close }).append($('<span>').addClass(options.icons.close))));
            }
            return $('<table>').addClass('table-condensed').append($('<tbody>').append($('<tr>').append(row)));
        },
            getTemplate = function getTemplate() {
            var template = $('<div>').addClass('bootstrap-datetimepicker-widget dropdown-menu'),
                dateView = $('<div>').addClass('datepicker').append(getDatePickerTemplate()),
                timeView = $('<div>').addClass('timepicker').append(getTimePickerTemplate()),
                content = $('<ul>').addClass('list-unstyled'),
                toolbar = $('<li>').addClass('picker-switch' + (options.collapse ? ' accordion-toggle' : '')).append(getToolbar());

            if (options.inline) {
                template.removeClass('dropdown-menu');
            }

            if (use24Hours) {
                template.addClass('usetwentyfour');
            }
            if (isEnabled('s') && !use24Hours) {
                template.addClass('wider');
            }

            if (options.sideBySide && hasDate() && hasTime()) {
                template.addClass('timepicker-sbs');
                if (options.toolbarPlacement === 'top') {
                    template.append(toolbar);
                }
                template.append($('<div>').addClass('row').append(dateView.addClass('col-md-6')).append(timeView.addClass('col-md-6')));
                if (options.toolbarPlacement === 'bottom') {
                    template.append(toolbar);
                }
                return template;
            }

            if (options.toolbarPlacement === 'top') {
                content.append(toolbar);
            }
            if (hasDate()) {
                content.append($('<li>').addClass(options.collapse && hasTime() ? 'collapse in' : '').append(dateView));
            }
            if (options.toolbarPlacement === 'default') {
                content.append(toolbar);
            }
            if (hasTime()) {
                content.append($('<li>').addClass(options.collapse && hasDate() ? 'collapse' : '').append(timeView));
            }
            if (options.toolbarPlacement === 'bottom') {
                content.append(toolbar);
            }
            return template.append(content);
        },
            dataToOptions = function dataToOptions() {
            var eData,
                dataOptions = {};

            if (element.is('input') || options.inline) {
                eData = element.data();
            } else {
                eData = element.find('input').data();
            }

            if (eData.dateOptions && eData.dateOptions instanceof Object) {
                dataOptions = $.extend(true, dataOptions, eData.dateOptions);
            }

            $.each(options, function (key) {
                var attributeName = 'date' + key.charAt(0).toUpperCase() + key.slice(1);
                if (eData[attributeName] !== undefined) {
                    dataOptions[key] = eData[attributeName];
                }
            });
            return dataOptions;
        },
            place = function place() {
            var position = (component || element).position(),
                offset = (component || element).offset(),
                vertical = options.widgetPositioning.vertical,
                horizontal = options.widgetPositioning.horizontal,
                parent;

            if (options.widgetParent) {
                parent = options.widgetParent.append(widget);
            } else if (element.is('input')) {
                parent = element.after(widget).parent();
            } else if (options.inline) {
                parent = element.append(widget);
                return;
            } else {
                parent = element;
                element.children().first().after(widget);
            }

            // Top and bottom logic
            if (vertical === 'auto') {
                if (offset.top + widget.height() * 1.5 >= $(window).height() + $(window).scrollTop() && widget.height() + element.outerHeight() < offset.top) {
                    vertical = 'top';
                } else {
                    vertical = 'bottom';
                }
            }

            // Left and right logic
            if (horizontal === 'auto') {
                if (parent.width() < offset.left + widget.outerWidth() / 2 && offset.left + widget.outerWidth() > $(window).width()) {
                    horizontal = 'right';
                } else {
                    horizontal = 'left';
                }
            }

            if (vertical === 'top') {
                widget.addClass('top').removeClass('bottom');
            } else {
                widget.addClass('bottom').removeClass('top');
            }

            if (horizontal === 'right') {
                widget.addClass('pull-right');
            } else {
                widget.removeClass('pull-right');
            }

            // find the first parent element that has a relative css positioning
            if (parent.css('position') !== 'relative') {
                parent = parent.parents().filter(function () {
                    return $(this).css('position') === 'relative';
                }).first();
            }

            if (parent.length === 0) {
                throw new Error('datetimepicker component should be placed within a relative positioned container');
            }

            widget.css({
                top: vertical === 'top' ? 'auto' : position.top + element.outerHeight(),
                bottom: vertical === 'top' ? position.top + element.outerHeight() : 'auto',
                left: horizontal === 'left' ? parent === element ? 0 : position.left : 'auto',
                right: horizontal === 'left' ? 'auto' : parent.outerWidth() - element.outerWidth() - (parent === element ? 0 : position.left)
            });
        },
            notifyEvent = function notifyEvent(e) {
            if (e.type === 'dp.change' && (e.date && e.date.isSame(e.oldDate) || !e.date && !e.oldDate)) {
                return;
            }
            element.trigger(e);
        },
            viewUpdate = function viewUpdate(e) {
            if (e === 'y') {
                e = 'YYYY';
            }
            notifyEvent({
                type: 'dp.update',
                change: e,
                viewDate: viewDate.clone()
            });
        },
            showMode = function showMode(dir) {
            if (!widget) {
                return;
            }
            if (dir) {
                currentViewMode = Math.max(minViewModeNumber, Math.min(3, currentViewMode + dir));
            }
            widget.find('.datepicker > div').hide().filter('.datepicker-' + datePickerModes[currentViewMode].clsName).show();
        },
            fillDow = function fillDow() {
            var row = $('<tr>'),
                currentDate = viewDate.clone().startOf('w').startOf('d');

            if (options.calendarWeeks === true) {
                row.append($('<th>').addClass('cw').text('#'));
            }

            while (currentDate.isBefore(viewDate.clone().endOf('w'))) {
                row.append($('<th>').addClass('dow').text(currentDate.format('dd')));
                currentDate.add(1, 'd');
            }
            widget.find('.datepicker-days thead').append(row);
        },
            isInDisabledDates = function isInDisabledDates(testDate) {
            return options.disabledDates[testDate.format('YYYY-MM-DD')] === true;
        },
            isInEnabledDates = function isInEnabledDates(testDate) {
            return options.enabledDates[testDate.format('YYYY-MM-DD')] === true;
        },
            isInDisabledHours = function isInDisabledHours(testDate) {
            return options.disabledHours[testDate.format('H')] === true;
        },
            isInEnabledHours = function isInEnabledHours(testDate) {
            return options.enabledHours[testDate.format('H')] === true;
        },
            isValid = function isValid(targetMoment, granularity) {
            if (!targetMoment.isValid()) {
                return false;
            }
            if (options.disabledDates && granularity === 'd' && isInDisabledDates(targetMoment)) {
                return false;
            }
            if (options.enabledDates && granularity === 'd' && !isInEnabledDates(targetMoment)) {
                return false;
            }
            if (options.minDate && targetMoment.isBefore(options.minDate, granularity)) {
                return false;
            }
            if (options.maxDate && targetMoment.isAfter(options.maxDate, granularity)) {
                return false;
            }
            if (options.daysOfWeekDisabled && granularity === 'd' && options.daysOfWeekDisabled.indexOf(targetMoment.day()) !== -1) {
                return false;
            }
            if (options.disabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && isInDisabledHours(targetMoment)) {
                return false;
            }
            if (options.enabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && !isInEnabledHours(targetMoment)) {
                return false;
            }
            if (options.disabledTimeIntervals && (granularity === 'h' || granularity === 'm' || granularity === 's')) {
                var found = false;
                $.each(options.disabledTimeIntervals, function () {
                    if (targetMoment.isBetween(this[0], this[1])) {
                        found = true;
                        return false;
                    }
                });
                if (found) {
                    return false;
                }
            }
            return true;
        },
            fillMonths = function fillMonths() {
            var spans = [],
                monthsShort = viewDate.clone().startOf('y').startOf('d');
            while (monthsShort.isSame(viewDate, 'y')) {
                spans.push($('<span>').attr('data-action', 'selectMonth').addClass('month').text(monthsShort.format('MMM')));
                monthsShort.add(1, 'M');
            }
            widget.find('.datepicker-months td').empty().append(spans);
        },
            updateMonths = function updateMonths() {
            var monthsView = widget.find('.datepicker-months'),
                monthsViewHeader = monthsView.find('th'),
                months = monthsView.find('tbody').find('span');

            monthsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevYear);
            monthsViewHeader.eq(1).attr('title', options.tooltips.selectYear);
            monthsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextYear);

            monthsView.find('.disabled').removeClass('disabled');

            if (!isValid(viewDate.clone().subtract(1, 'y'), 'y')) {
                monthsViewHeader.eq(0).addClass('disabled');
            }

            monthsViewHeader.eq(1).text(viewDate.year());

            if (!isValid(viewDate.clone().add(1, 'y'), 'y')) {
                monthsViewHeader.eq(2).addClass('disabled');
            }

            months.removeClass('active');
            if (date.isSame(viewDate, 'y') && !unset) {
                months.eq(date.month()).addClass('active');
            }

            months.each(function (index) {
                if (!isValid(viewDate.clone().month(index), 'M')) {
                    $(this).addClass('disabled');
                }
            });
        },
            updateYears = function updateYears() {
            var yearsView = widget.find('.datepicker-years'),
                yearsViewHeader = yearsView.find('th'),
                startYear = viewDate.clone().subtract(5, 'y'),
                endYear = viewDate.clone().add(6, 'y'),
                html = '';

            yearsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevDecade);
            yearsViewHeader.eq(1).attr('title', options.tooltips.selectDecade);
            yearsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextDecade);

            yearsView.find('.disabled').removeClass('disabled');

            if (options.minDate && options.minDate.isAfter(startYear, 'y')) {
                yearsViewHeader.eq(0).addClass('disabled');
            }

            yearsViewHeader.eq(1).text(startYear.year() + '-' + endYear.year());

            if (options.maxDate && options.maxDate.isBefore(endYear, 'y')) {
                yearsViewHeader.eq(2).addClass('disabled');
            }

            while (!startYear.isAfter(endYear, 'y')) {
                html += '<span data-action="selectYear" class="year' + (startYear.isSame(date, 'y') && !unset ? ' active' : '') + (!isValid(startYear, 'y') ? ' disabled' : '') + '">' + startYear.year() + '</span>';
                startYear.add(1, 'y');
            }

            yearsView.find('td').html(html);
        },
            updateDecades = function updateDecades() {
            var decadesView = widget.find('.datepicker-decades'),
                decadesViewHeader = decadesView.find('th'),
                startDecade = moment({ y: viewDate.year() - viewDate.year() % 100 - 1 }),
                endDecade = startDecade.clone().add(100, 'y'),
                startedAt = startDecade.clone(),
                html = '';

            decadesViewHeader.eq(0).find('span').attr('title', options.tooltips.prevCentury);
            decadesViewHeader.eq(2).find('span').attr('title', options.tooltips.nextCentury);

            decadesView.find('.disabled').removeClass('disabled');

            if (startDecade.isSame(moment({ y: 1900 })) || options.minDate && options.minDate.isAfter(startDecade, 'y')) {
                decadesViewHeader.eq(0).addClass('disabled');
            }

            decadesViewHeader.eq(1).text(startDecade.year() + '-' + endDecade.year());

            if (startDecade.isSame(moment({ y: 2000 })) || options.maxDate && options.maxDate.isBefore(endDecade, 'y')) {
                decadesViewHeader.eq(2).addClass('disabled');
            }

            while (!startDecade.isAfter(endDecade, 'y')) {
                html += '<span data-action="selectDecade" class="decade' + (startDecade.isSame(date, 'y') ? ' active' : '') + (!isValid(startDecade, 'y') ? ' disabled' : '') + '" data-selection="' + (startDecade.year() + 6) + '">' + (startDecade.year() + 1) + ' - ' + (startDecade.year() + 12) + '</span>';
                startDecade.add(12, 'y');
            }
            html += '<span></span><span></span><span></span>'; //push the dangling block over, at least this way it's even

            decadesView.find('td').html(html);
            decadesViewHeader.eq(1).text(startedAt.year() + 1 + '-' + startDecade.year());
        },
            fillDate = function fillDate() {
            var daysView = widget.find('.datepicker-days'),
                daysViewHeader = daysView.find('th'),
                currentDate,
                html = [],
                row,
                clsName,
                i;

            if (!hasDate()) {
                return;
            }

            daysViewHeader.eq(0).find('span').attr('title', options.tooltips.prevMonth);
            daysViewHeader.eq(1).attr('title', options.tooltips.selectMonth);
            daysViewHeader.eq(2).find('span').attr('title', options.tooltips.nextMonth);

            daysView.find('.disabled').removeClass('disabled');
            daysViewHeader.eq(1).text(viewDate.format(options.dayViewHeaderFormat));

            if (!isValid(viewDate.clone().subtract(1, 'M'), 'M')) {
                daysViewHeader.eq(0).addClass('disabled');
            }
            if (!isValid(viewDate.clone().add(1, 'M'), 'M')) {
                daysViewHeader.eq(2).addClass('disabled');
            }

            currentDate = viewDate.clone().startOf('M').startOf('w').startOf('d');

            for (i = 0; i < 42; i++) {
                //always display 42 days (should show 6 weeks)
                if (currentDate.weekday() === 0) {
                    row = $('<tr>');
                    if (options.calendarWeeks) {
                        row.append('<td class="cw">' + currentDate.week() + '</td>');
                    }
                    html.push(row);
                }
                clsName = '';
                if (currentDate.isBefore(viewDate, 'M')) {
                    clsName += ' old';
                }
                if (currentDate.isAfter(viewDate, 'M')) {
                    clsName += ' new';
                }
                if (currentDate.isSame(date, 'd') && !unset) {
                    clsName += ' active';
                }
                if (!isValid(currentDate, 'd')) {
                    clsName += ' disabled';
                }
                if (currentDate.isSame(getMoment(), 'd')) {
                    clsName += ' today';
                }
                if (currentDate.day() === 0 || currentDate.day() === 6) {
                    clsName += ' weekend';
                }
                row.append('<td data-action="selectDay" data-day="' + currentDate.format('L') + '" class="day' + clsName + '">' + currentDate.date() + '</td>');
                currentDate.add(1, 'd');
            }

            daysView.find('tbody').empty().append(html);

            updateMonths();

            updateYears();

            updateDecades();
        },
            fillHours = function fillHours() {
            var table = widget.find('.timepicker-hours table'),
                currentHour = viewDate.clone().startOf('d'),
                html = [],
                row = $('<tr>');

            if (viewDate.hour() > 11 && !use24Hours) {
                currentHour.hour(12);
            }
            while (currentHour.isSame(viewDate, 'd') && (use24Hours || viewDate.hour() < 12 && currentHour.hour() < 12 || viewDate.hour() > 11)) {
                if (currentHour.hour() % 4 === 0) {
                    row = $('<tr>');
                    html.push(row);
                }
                row.append('<td data-action="selectHour" class="hour' + (!isValid(currentHour, 'h') ? ' disabled' : '') + '">' + currentHour.format(use24Hours ? 'HH' : 'hh') + '</td>');
                currentHour.add(1, 'h');
            }
            table.empty().append(html);
        },
            fillMinutes = function fillMinutes() {
            var table = widget.find('.timepicker-minutes table'),
                currentMinute = viewDate.clone().startOf('h'),
                html = [],
                row = $('<tr>'),
                step = options.stepping === 1 ? 5 : options.stepping;

            while (viewDate.isSame(currentMinute, 'h')) {
                if (currentMinute.minute() % (step * 4) === 0) {
                    row = $('<tr>');
                    html.push(row);
                }
                row.append('<td data-action="selectMinute" class="minute' + (!isValid(currentMinute, 'm') ? ' disabled' : '') + '">' + currentMinute.format('mm') + '</td>');
                currentMinute.add(step, 'm');
            }
            table.empty().append(html);
        },
            fillSeconds = function fillSeconds() {
            var table = widget.find('.timepicker-seconds table'),
                currentSecond = viewDate.clone().startOf('m'),
                html = [],
                row = $('<tr>');

            while (viewDate.isSame(currentSecond, 'm')) {
                if (currentSecond.second() % 20 === 0) {
                    row = $('<tr>');
                    html.push(row);
                }
                row.append('<td data-action="selectSecond" class="second' + (!isValid(currentSecond, 's') ? ' disabled' : '') + '">' + currentSecond.format('ss') + '</td>');
                currentSecond.add(5, 's');
            }

            table.empty().append(html);
        },
            fillTime = function fillTime() {
            var toggle,
                newDate,
                timeComponents = widget.find('.timepicker span[data-time-component]');

            if (!use24Hours) {
                toggle = widget.find('.timepicker [data-action=togglePeriod]');
                newDate = date.clone().add(date.hours() >= 12 ? -12 : 12, 'h');

                toggle.text(date.format('A'));

                if (isValid(newDate, 'h')) {
                    toggle.removeClass('disabled');
                } else {
                    toggle.addClass('disabled');
                }
            }
            timeComponents.filter('[data-time-component=hours]').text(date.format(use24Hours ? 'HH' : 'hh'));
            timeComponents.filter('[data-time-component=minutes]').text(date.format('mm'));
            timeComponents.filter('[data-time-component=seconds]').text(date.format('ss'));

            fillHours();
            fillMinutes();
            fillSeconds();
        },
            update = function update() {
            if (!widget) {
                return;
            }
            fillDate();
            fillTime();
        },
            setValue = function setValue(targetMoment) {
            var oldDate = unset ? null : date;

            // case of calling setValue(null or false)
            if (!targetMoment) {
                unset = true;
                input.val('');
                element.data('date', '');
                notifyEvent({
                    type: 'dp.change',
                    date: false,
                    oldDate: oldDate
                });
                update();
                return;
            }

            targetMoment = targetMoment.clone().locale(options.locale);

            if (options.stepping !== 1) {
                targetMoment.minutes(Math.round(targetMoment.minutes() / options.stepping) * options.stepping % 60).seconds(0);
            }

            if (isValid(targetMoment)) {
                date = targetMoment;
                viewDate = date.clone();
                input.val(date.format(actualFormat));
                element.data('date', date.format(actualFormat));
                unset = false;
                update();
                notifyEvent({
                    type: 'dp.change',
                    date: date.clone(),
                    oldDate: oldDate
                });
            } else {
                if (!options.keepInvalid) {
                    input.val(unset ? '' : date.format(actualFormat));
                }
                notifyEvent({
                    type: 'dp.error',
                    date: targetMoment
                });
            }
        },
            hide = function hide() {
            ///<summary>Hides the widget. Possibly will emit dp.hide</summary>
            var transitioning = false;
            if (!widget) {
                return picker;
            }
            // Ignore event if in the middle of a picker transition
            widget.find('.collapse').each(function () {
                var collapseData = $(this).data('collapse');
                if (collapseData && collapseData.transitioning) {
                    transitioning = true;
                    return false;
                }
                return true;
            });
            if (transitioning) {
                return picker;
            }
            if (component && component.hasClass('btn')) {
                component.toggleClass('active');
            }
            widget.hide();

            $(window).off('resize', place);
            widget.off('click', '[data-action]');
            widget.off('mousedown', false);

            widget.remove();
            widget = false;

            notifyEvent({
                type: 'dp.hide',
                date: date.clone()
            });

            input.blur();

            return picker;
        },
            clear = function clear() {
            setValue(null);
        },


        /********************************************************************************
         *
         * Widget UI interaction functions
         *
         ********************************************************************************/
        actions = {
            next: function next() {
                var navFnc = datePickerModes[currentViewMode].navFnc;
                viewDate.add(datePickerModes[currentViewMode].navStep, navFnc);
                fillDate();
                viewUpdate(navFnc);
            },

            previous: function previous() {
                var navFnc = datePickerModes[currentViewMode].navFnc;
                viewDate.subtract(datePickerModes[currentViewMode].navStep, navFnc);
                fillDate();
                viewUpdate(navFnc);
            },

            pickerSwitch: function pickerSwitch() {
                showMode(1);
            },

            selectMonth: function selectMonth(e) {
                var month = $(e.target).closest('tbody').find('span').index($(e.target));
                viewDate.month(month);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()).month(viewDate.month()));
                    if (!options.inline) {
                        hide();
                    }
                } else {
                    showMode(-1);
                    fillDate();
                }
                viewUpdate('M');
            },

            selectYear: function selectYear(e) {
                var year = parseInt($(e.target).text(), 10) || 0;
                viewDate.year(year);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()));
                    if (!options.inline) {
                        hide();
                    }
                } else {
                    showMode(-1);
                    fillDate();
                }
                viewUpdate('YYYY');
            },

            selectDecade: function selectDecade(e) {
                var year = parseInt($(e.target).data('selection'), 10) || 0;
                viewDate.year(year);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()));
                    if (!options.inline) {
                        hide();
                    }
                } else {
                    showMode(-1);
                    fillDate();
                }
                viewUpdate('YYYY');
            },

            selectDay: function selectDay(e) {
                var day = viewDate.clone();
                if ($(e.target).is('.old')) {
                    day.subtract(1, 'M');
                }
                if ($(e.target).is('.new')) {
                    day.add(1, 'M');
                }
                setValue(day.date(parseInt($(e.target).text(), 10)));
                if (!hasTime() && !options.keepOpen && !options.inline) {
                    hide();
                }
            },

            incrementHours: function incrementHours() {
                var newDate = date.clone().add(1, 'h');
                if (isValid(newDate, 'h')) {
                    setValue(newDate);
                }
            },

            incrementMinutes: function incrementMinutes() {
                var newDate = date.clone().add(options.stepping, 'm');
                if (isValid(newDate, 'm')) {
                    setValue(newDate);
                }
            },

            incrementSeconds: function incrementSeconds() {
                var newDate = date.clone().add(1, 's');
                if (isValid(newDate, 's')) {
                    setValue(newDate);
                }
            },

            decrementHours: function decrementHours() {
                var newDate = date.clone().subtract(1, 'h');
                if (isValid(newDate, 'h')) {
                    setValue(newDate);
                }
            },

            decrementMinutes: function decrementMinutes() {
                var newDate = date.clone().subtract(options.stepping, 'm');
                if (isValid(newDate, 'm')) {
                    setValue(newDate);
                }
            },

            decrementSeconds: function decrementSeconds() {
                var newDate = date.clone().subtract(1, 's');
                if (isValid(newDate, 's')) {
                    setValue(newDate);
                }
            },

            togglePeriod: function togglePeriod() {
                setValue(date.clone().add(date.hours() >= 12 ? -12 : 12, 'h'));
            },

            togglePicker: function togglePicker(e) {
                var $this = $(e.target),
                    $parent = $this.closest('ul'),
                    expanded = $parent.find('.in'),
                    closed = $parent.find('.collapse:not(.in)'),
                    collapseData;

                if (expanded && expanded.length) {
                    collapseData = expanded.data('collapse');
                    if (collapseData && collapseData.transitioning) {
                        return;
                    }
                    if (expanded.collapse) {
                        // if collapse plugin is available through bootstrap.js then use it
                        expanded.collapse('hide');
                        closed.collapse('show');
                    } else {
                        // otherwise just toggle in class on the two views
                        expanded.removeClass('in');
                        closed.addClass('in');
                    }
                    if ($this.is('span')) {
                        $this.toggleClass(options.icons.time + ' ' + options.icons.date);
                    } else {
                        $this.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);
                    }

                    // NOTE: uncomment if toggled state will be restored in show()
                    //if (component) {
                    //    component.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);
                    //}
                }
            },

            showPicker: function showPicker() {
                widget.find('.timepicker > div:not(.timepicker-picker)').hide();
                widget.find('.timepicker .timepicker-picker').show();
            },

            showHours: function showHours() {
                widget.find('.timepicker .timepicker-picker').hide();
                widget.find('.timepicker .timepicker-hours').show();
            },

            showMinutes: function showMinutes() {
                widget.find('.timepicker .timepicker-picker').hide();
                widget.find('.timepicker .timepicker-minutes').show();
            },

            showSeconds: function showSeconds() {
                widget.find('.timepicker .timepicker-picker').hide();
                widget.find('.timepicker .timepicker-seconds').show();
            },

            selectHour: function selectHour(e) {
                var hour = parseInt($(e.target).text(), 10);

                if (!use24Hours) {
                    if (date.hours() >= 12) {
                        if (hour !== 12) {
                            hour += 12;
                        }
                    } else {
                        if (hour === 12) {
                            hour = 0;
                        }
                    }
                }
                setValue(date.clone().hours(hour));
                actions.showPicker.call(picker);
            },

            selectMinute: function selectMinute(e) {
                setValue(date.clone().minutes(parseInt($(e.target).text(), 10)));
                actions.showPicker.call(picker);
            },

            selectSecond: function selectSecond(e) {
                setValue(date.clone().seconds(parseInt($(e.target).text(), 10)));
                actions.showPicker.call(picker);
            },

            clear: clear,

            today: function today() {
                var todaysDate = getMoment();
                if (isValid(todaysDate, 'd')) {
                    setValue(todaysDate);
                }
            },

            close: hide
        },
            doAction = function doAction(e) {
            if ($(e.currentTarget).is('.disabled')) {
                return false;
            }
            actions[$(e.currentTarget).data('action')].apply(picker, arguments);
            return false;
        },
            show = function show() {
            ///<summary>Shows the widget. Possibly will emit dp.show and dp.change</summary>
            var currentMoment,
                useCurrentGranularity = {
                'year': function year(m) {
                    return m.month(0).date(1).hours(0).seconds(0).minutes(0);
                },
                'month': function month(m) {
                    return m.date(1).hours(0).seconds(0).minutes(0);
                },
                'day': function day(m) {
                    return m.hours(0).seconds(0).minutes(0);
                },
                'hour': function hour(m) {
                    return m.seconds(0).minutes(0);
                },
                'minute': function minute(m) {
                    return m.seconds(0);
                }
            };

            if (input.prop('disabled') || !options.ignoreReadonly && input.prop('readonly') || widget) {
                return picker;
            }
            if (input.val() !== undefined && input.val().trim().length !== 0) {
                setValue(parseInputDate(input.val().trim()));
            } else if (options.useCurrent && unset && (input.is('input') && input.val().trim().length === 0 || options.inline)) {
                currentMoment = getMoment();
                if (typeof options.useCurrent === 'string') {
                    currentMoment = useCurrentGranularity[options.useCurrent](currentMoment);
                }
                setValue(currentMoment);
            }

            widget = getTemplate();

            fillDow();
            fillMonths();

            widget.find('.timepicker-hours').hide();
            widget.find('.timepicker-minutes').hide();
            widget.find('.timepicker-seconds').hide();

            update();
            showMode();

            $(window).on('resize', place);
            widget.on('click', '[data-action]', doAction); // this handles clicks on the widget
            widget.on('mousedown', false);

            if (component && component.hasClass('btn')) {
                component.toggleClass('active');
            }
            widget.show();
            place();

            if (options.focusOnShow && !input.is(':focus')) {
                input.focus();
            }

            notifyEvent({
                type: 'dp.show'
            });
            return picker;
        },
            toggle = function toggle() {
            /// <summary>Shows or hides the widget</summary>
            return widget ? hide() : show();
        },
            parseInputDate = function parseInputDate(inputDate) {
            if (options.parseInputDate === undefined) {
                if (moment.isMoment(inputDate) || inputDate instanceof Date) {
                    inputDate = moment(inputDate);
                } else {
                    inputDate = getMoment(inputDate);
                }
            } else {
                inputDate = options.parseInputDate(inputDate);
            }
            inputDate.locale(options.locale);
            return inputDate;
        },
            keydown = function keydown(e) {
            var handler = null,
                index,
                index2,
                pressedKeys = [],
                pressedModifiers = {},
                currentKey = e.which,
                keyBindKeys,
                allModifiersPressed,
                pressed = 'p';

            keyState[currentKey] = pressed;

            for (index in keyState) {
                if (keyState.hasOwnProperty(index) && keyState[index] === pressed) {
                    pressedKeys.push(index);
                    if (parseInt(index, 10) !== currentKey) {
                        pressedModifiers[index] = true;
                    }
                }
            }

            for (index in options.keyBinds) {
                if (options.keyBinds.hasOwnProperty(index) && typeof options.keyBinds[index] === 'function') {
                    keyBindKeys = index.split(' ');
                    if (keyBindKeys.length === pressedKeys.length && keyMap[currentKey] === keyBindKeys[keyBindKeys.length - 1]) {
                        allModifiersPressed = true;
                        for (index2 = keyBindKeys.length - 2; index2 >= 0; index2--) {
                            if (!(keyMap[keyBindKeys[index2]] in pressedModifiers)) {
                                allModifiersPressed = false;
                                break;
                            }
                        }
                        if (allModifiersPressed) {
                            handler = options.keyBinds[index];
                            break;
                        }
                    }
                }
            }

            if (handler) {
                handler.call(picker, widget);
                e.stopPropagation();
                e.preventDefault();
            }
        },
            keyup = function keyup(e) {
            keyState[e.which] = 'r';
            e.stopPropagation();
            e.preventDefault();
        },
            change = function change(e) {
            var val = $(e.target).val().trim(),
                parsedDate = val ? parseInputDate(val) : null;
            setValue(parsedDate);
            e.stopImmediatePropagation();
            return false;
        },
            attachDatePickerElementEvents = function attachDatePickerElementEvents() {
            input.on({
                'change': change,
                'blur': options.debug ? '' : hide,
                'keydown': keydown,
                'keyup': keyup,
                'focus': options.allowInputToggle ? show : ''
            });

            if (element.is('input')) {
                input.on({
                    'focus': show
                });
            } else if (component) {
                component.on('click', toggle);
                component.on('mousedown', false);
            }
        },
            detachDatePickerElementEvents = function detachDatePickerElementEvents() {
            input.off({
                'change': change,
                'blur': blur,
                'keydown': keydown,
                'keyup': keyup,
                'focus': options.allowInputToggle ? hide : ''
            });

            if (element.is('input')) {
                input.off({
                    'focus': show
                });
            } else if (component) {
                component.off('click', toggle);
                component.off('mousedown', false);
            }
        },
            indexGivenDates = function indexGivenDates(givenDatesArray) {
            // Store given enabledDates and disabledDates as keys.
            // This way we can check their existence in O(1) time instead of looping through whole array.
            // (for example: options.enabledDates['2014-02-27'] === true)
            var givenDatesIndexed = {};
            $.each(givenDatesArray, function () {
                var dDate = parseInputDate(this);
                if (dDate.isValid()) {
                    givenDatesIndexed[dDate.format('YYYY-MM-DD')] = true;
                }
            });
            return (0, _keys2.default)(givenDatesIndexed).length ? givenDatesIndexed : false;
        },
            indexGivenHours = function indexGivenHours(givenHoursArray) {
            // Store given enabledHours and disabledHours as keys.
            // This way we can check their existence in O(1) time instead of looping through whole array.
            // (for example: options.enabledHours['2014-02-27'] === true)
            var givenHoursIndexed = {};
            $.each(givenHoursArray, function () {
                givenHoursIndexed[this] = true;
            });
            return (0, _keys2.default)(givenHoursIndexed).length ? givenHoursIndexed : false;
        },
            initFormatting = function initFormatting() {
            var format = options.format || 'L LT';

            actualFormat = format.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput) {
                var newinput = date.localeData().longDateFormat(formatInput) || formatInput;
                return newinput.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput2) {
                    //temp fix for #740
                    return date.localeData().longDateFormat(formatInput2) || formatInput2;
                });
            });

            parseFormats = options.extraFormats ? options.extraFormats.slice() : [];
            if (parseFormats.indexOf(format) < 0 && parseFormats.indexOf(actualFormat) < 0) {
                parseFormats.push(actualFormat);
            }

            use24Hours = actualFormat.toLowerCase().indexOf('a') < 1 && actualFormat.replace(/\[.*?\]/g, '').indexOf('h') < 1;

            if (isEnabled('y')) {
                minViewModeNumber = 2;
            }
            if (isEnabled('M')) {
                minViewModeNumber = 1;
            }
            if (isEnabled('d')) {
                minViewModeNumber = 0;
            }

            currentViewMode = Math.max(minViewModeNumber, currentViewMode);

            if (!unset) {
                setValue(date);
            }
        };

        /********************************************************************************
         *
         * Public API functions
         * =====================
         *
         * Important: Do not expose direct references to private objects or the options
         * object to the outer world. Always return a clone when returning values or make
         * a clone when setting a private variable.
         *
         ********************************************************************************/
        picker.destroy = function () {
            ///<summary>Destroys the widget and removes all attached event listeners</summary>
            hide();
            detachDatePickerElementEvents();
            element.removeData('DateTimePicker');
            element.removeData('date');
        };

        picker.toggle = toggle;

        picker.show = show;

        picker.hide = hide;

        picker.disable = function () {
            ///<summary>Disables the input element, the component is attached to, by adding a disabled="true" attribute to it.
            ///If the widget was visible before that call it is hidden. Possibly emits dp.hide</summary>
            hide();
            if (component && component.hasClass('btn')) {
                component.addClass('disabled');
            }
            input.prop('disabled', true);
            return picker;
        };

        picker.enable = function () {
            ///<summary>Enables the input element, the component is attached to, by removing disabled attribute from it.</summary>
            if (component && component.hasClass('btn')) {
                component.removeClass('disabled');
            }
            input.prop('disabled', false);
            return picker;
        };

        picker.ignoreReadonly = function (ignoreReadonly) {
            if (arguments.length === 0) {
                return options.ignoreReadonly;
            }
            if (typeof ignoreReadonly !== 'boolean') {
                throw new TypeError('ignoreReadonly () expects a boolean parameter');
            }
            options.ignoreReadonly = ignoreReadonly;
            return picker;
        };

        picker.options = function (newOptions) {
            if (arguments.length === 0) {
                return $.extend(true, {}, options);
            }

            if (!(newOptions instanceof Object)) {
                throw new TypeError('options() options parameter should be an object');
            }
            $.extend(true, options, newOptions);
            $.each(options, function (key, value) {
                if (picker[key] !== undefined) {
                    picker[key](value);
                } else {
                    throw new TypeError('option ' + key + ' is not recognized!');
                }
            });
            return picker;
        };

        picker.date = function (newDate) {
            ///<signature helpKeyword="$.fn.datetimepicker.date">
            ///<summary>Returns the component's model current date, a moment object or null if not set.</summary>
            ///<returns type="Moment">date.clone()</returns>
            ///</signature>
            ///<signature>
            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>
            ///<param name="newDate" locid="$.fn.datetimepicker.date_p:newDate">Takes string, Date, moment, null parameter.</param>
            ///</signature>
            if (arguments.length === 0) {
                if (unset) {
                    return null;
                }
                return date.clone();
            }

            if (newDate !== null && typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {
                throw new TypeError('date() parameter must be one of [null, string, moment or Date]');
            }

            setValue(newDate === null ? null : parseInputDate(newDate));
            return picker;
        };

        picker.format = function (newFormat) {
            ///<summary>test su</summary>
            ///<param name="newFormat">info about para</param>
            ///<returns type="string|boolean">returns foo</returns>
            if (arguments.length === 0) {
                return options.format;
            }

            if (typeof newFormat !== 'string' && (typeof newFormat !== 'boolean' || newFormat !== false)) {
                throw new TypeError('format() expects a sting or boolean:false parameter ' + newFormat);
            }

            options.format = newFormat;
            if (actualFormat) {
                initFormatting(); // reinit formatting
            }
            return picker;
        };

        picker.timeZone = function (newZone) {
            if (arguments.length === 0) {
                return options.timeZone;
            }

            options.timeZone = newZone;

            return picker;
        };

        picker.dayViewHeaderFormat = function (newFormat) {
            if (arguments.length === 0) {
                return options.dayViewHeaderFormat;
            }

            if (typeof newFormat !== 'string') {
                throw new TypeError('dayViewHeaderFormat() expects a string parameter');
            }

            options.dayViewHeaderFormat = newFormat;
            return picker;
        };

        picker.extraFormats = function (formats) {
            if (arguments.length === 0) {
                return options.extraFormats;
            }

            if (formats !== false && !(formats instanceof Array)) {
                throw new TypeError('extraFormats() expects an array or false parameter');
            }

            options.extraFormats = formats;
            if (parseFormats) {
                initFormatting(); // reinit formatting
            }
            return picker;
        };

        picker.disabledDates = function (dates) {
            ///<signature helpKeyword="$.fn.datetimepicker.disabledDates">
            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>
            ///<returns type="array">options.disabledDates</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of
            ///options.enabledDates if such exist.</summary>
            ///<param name="dates" locid="$.fn.datetimepicker.disabledDates_p:dates">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.disabledDates ? $.extend({}, options.disabledDates) : options.disabledDates;
            }

            if (!dates) {
                options.disabledDates = false;
                update();
                return picker;
            }
            if (!(dates instanceof Array)) {
                throw new TypeError('disabledDates() expects an array parameter');
            }
            options.disabledDates = indexGivenDates(dates);
            options.enabledDates = false;
            update();
            return picker;
        };

        picker.enabledDates = function (dates) {
            ///<signature helpKeyword="$.fn.datetimepicker.enabledDates">
            ///<summary>Returns an array with the currently set enabled dates on the component.</summary>
            ///<returns type="array">options.enabledDates</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledDates if such exist.</summary>
            ///<param name="dates" locid="$.fn.datetimepicker.enabledDates_p:dates">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.enabledDates ? $.extend({}, options.enabledDates) : options.enabledDates;
            }

            if (!dates) {
                options.enabledDates = false;
                update();
                return picker;
            }
            if (!(dates instanceof Array)) {
                throw new TypeError('enabledDates() expects an array parameter');
            }
            options.enabledDates = indexGivenDates(dates);
            options.disabledDates = false;
            update();
            return picker;
        };

        picker.daysOfWeekDisabled = function (daysOfWeekDisabled) {
            if (arguments.length === 0) {
                return options.daysOfWeekDisabled.splice(0);
            }

            if (typeof daysOfWeekDisabled === 'boolean' && !daysOfWeekDisabled) {
                options.daysOfWeekDisabled = false;
                update();
                return picker;
            }

            if (!(daysOfWeekDisabled instanceof Array)) {
                throw new TypeError('daysOfWeekDisabled() expects an array parameter');
            }
            options.daysOfWeekDisabled = daysOfWeekDisabled.reduce(function (previousValue, currentValue) {
                currentValue = parseInt(currentValue, 10);
                if (currentValue > 6 || currentValue < 0 || isNaN(currentValue)) {
                    return previousValue;
                }
                if (previousValue.indexOf(currentValue) === -1) {
                    previousValue.push(currentValue);
                }
                return previousValue;
            }, []).sort();
            if (options.useCurrent && !options.keepInvalid) {
                var tries = 0;
                while (!isValid(date, 'd')) {
                    date.add(1, 'd');
                    if (tries === 7) {
                        throw 'Tried 7 times to find a valid date';
                    }
                    tries++;
                }
                setValue(date);
            }
            update();
            return picker;
        };

        picker.maxDate = function (maxDate) {
            if (arguments.length === 0) {
                return options.maxDate ? options.maxDate.clone() : options.maxDate;
            }

            if (typeof maxDate === 'boolean' && maxDate === false) {
                options.maxDate = false;
                update();
                return picker;
            }

            if (typeof maxDate === 'string') {
                if (maxDate === 'now' || maxDate === 'moment') {
                    maxDate = getMoment();
                }
            }

            var parsedDate = parseInputDate(maxDate);

            if (!parsedDate.isValid()) {
                throw new TypeError('maxDate() Could not parse date parameter: ' + maxDate);
            }
            if (options.minDate && parsedDate.isBefore(options.minDate)) {
                throw new TypeError('maxDate() date parameter is before options.minDate: ' + parsedDate.format(actualFormat));
            }
            options.maxDate = parsedDate;
            if (options.useCurrent && !options.keepInvalid && date.isAfter(maxDate)) {
                setValue(options.maxDate);
            }
            if (viewDate.isAfter(parsedDate)) {
                viewDate = parsedDate.clone().subtract(options.stepping, 'm');
            }
            update();
            return picker;
        };

        picker.minDate = function (minDate) {
            if (arguments.length === 0) {
                return options.minDate ? options.minDate.clone() : options.minDate;
            }

            if (typeof minDate === 'boolean' && minDate === false) {
                options.minDate = false;
                update();
                return picker;
            }

            if (typeof minDate === 'string') {
                if (minDate === 'now' || minDate === 'moment') {
                    minDate = getMoment();
                }
            }

            var parsedDate = parseInputDate(minDate);

            if (!parsedDate.isValid()) {
                throw new TypeError('minDate() Could not parse date parameter: ' + minDate);
            }
            if (options.maxDate && parsedDate.isAfter(options.maxDate)) {
                throw new TypeError('minDate() date parameter is after options.maxDate: ' + parsedDate.format(actualFormat));
            }
            options.minDate = parsedDate;
            if (options.useCurrent && !options.keepInvalid && date.isBefore(minDate)) {
                setValue(options.minDate);
            }
            if (viewDate.isBefore(parsedDate)) {
                viewDate = parsedDate.clone().add(options.stepping, 'm');
            }
            update();
            return picker;
        };

        picker.defaultDate = function (defaultDate) {
            ///<signature helpKeyword="$.fn.datetimepicker.defaultDate">
            ///<summary>Returns a moment with the options.defaultDate option configuration or false if not set</summary>
            ///<returns type="Moment">date.clone()</returns>
            ///</signature>
            ///<signature>
            ///<summary>Will set the picker's inital date. If a boolean:false value is passed the options.defaultDate parameter is cleared.</summary>
            ///<param name="defaultDate" locid="$.fn.datetimepicker.defaultDate_p:defaultDate">Takes a string, Date, moment, boolean:false</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.defaultDate ? options.defaultDate.clone() : options.defaultDate;
            }
            if (!defaultDate) {
                options.defaultDate = false;
                return picker;
            }

            if (typeof defaultDate === 'string') {
                if (defaultDate === 'now' || defaultDate === 'moment') {
                    defaultDate = getMoment();
                }
            }

            var parsedDate = parseInputDate(defaultDate);
            if (!parsedDate.isValid()) {
                throw new TypeError('defaultDate() Could not parse date parameter: ' + defaultDate);
            }
            if (!isValid(parsedDate)) {
                throw new TypeError('defaultDate() date passed is invalid according to component setup validations');
            }

            options.defaultDate = parsedDate;

            if (options.defaultDate && options.inline || input.val().trim() === '') {
                setValue(options.defaultDate);
            }
            return picker;
        };

        picker.locale = function (locale) {
            if (arguments.length === 0) {
                return options.locale;
            }

            if (!moment.localeData(locale)) {
                throw new TypeError('locale() locale ' + locale + ' is not loaded from moment locales!');
            }

            options.locale = locale;
            date.locale(options.locale);
            viewDate.locale(options.locale);

            if (actualFormat) {
                initFormatting(); // reinit formatting
            }
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.stepping = function (stepping) {
            if (arguments.length === 0) {
                return options.stepping;
            }

            stepping = parseInt(stepping, 10);
            if (isNaN(stepping) || stepping < 1) {
                stepping = 1;
            }
            options.stepping = stepping;
            return picker;
        };

        picker.useCurrent = function (useCurrent) {
            var useCurrentOptions = ['year', 'month', 'day', 'hour', 'minute'];
            if (arguments.length === 0) {
                return options.useCurrent;
            }

            if (typeof useCurrent !== 'boolean' && typeof useCurrent !== 'string') {
                throw new TypeError('useCurrent() expects a boolean or string parameter');
            }
            if (typeof useCurrent === 'string' && useCurrentOptions.indexOf(useCurrent.toLowerCase()) === -1) {
                throw new TypeError('useCurrent() expects a string parameter of ' + useCurrentOptions.join(', '));
            }
            options.useCurrent = useCurrent;
            return picker;
        };

        picker.collapse = function (collapse) {
            if (arguments.length === 0) {
                return options.collapse;
            }

            if (typeof collapse !== 'boolean') {
                throw new TypeError('collapse() expects a boolean parameter');
            }
            if (options.collapse === collapse) {
                return picker;
            }
            options.collapse = collapse;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.icons = function (icons) {
            if (arguments.length === 0) {
                return $.extend({}, options.icons);
            }

            if (!(icons instanceof Object)) {
                throw new TypeError('icons() expects parameter to be an Object');
            }
            $.extend(options.icons, icons);
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.tooltips = function (tooltips) {
            if (arguments.length === 0) {
                return $.extend({}, options.tooltips);
            }

            if (!(tooltips instanceof Object)) {
                throw new TypeError('tooltips() expects parameter to be an Object');
            }
            $.extend(options.tooltips, tooltips);
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.useStrict = function (useStrict) {
            if (arguments.length === 0) {
                return options.useStrict;
            }

            if (typeof useStrict !== 'boolean') {
                throw new TypeError('useStrict() expects a boolean parameter');
            }
            options.useStrict = useStrict;
            return picker;
        };

        picker.sideBySide = function (sideBySide) {
            if (arguments.length === 0) {
                return options.sideBySide;
            }

            if (typeof sideBySide !== 'boolean') {
                throw new TypeError('sideBySide() expects a boolean parameter');
            }
            options.sideBySide = sideBySide;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.viewMode = function (viewMode) {
            if (arguments.length === 0) {
                return options.viewMode;
            }

            if (typeof viewMode !== 'string') {
                throw new TypeError('viewMode() expects a string parameter');
            }

            if (viewModes.indexOf(viewMode) === -1) {
                throw new TypeError('viewMode() parameter must be one of (' + viewModes.join(', ') + ') value');
            }

            options.viewMode = viewMode;
            currentViewMode = Math.max(viewModes.indexOf(viewMode), minViewModeNumber);

            showMode();
            return picker;
        };

        picker.toolbarPlacement = function (toolbarPlacement) {
            if (arguments.length === 0) {
                return options.toolbarPlacement;
            }

            if (typeof toolbarPlacement !== 'string') {
                throw new TypeError('toolbarPlacement() expects a string parameter');
            }
            if (toolbarPlacements.indexOf(toolbarPlacement) === -1) {
                throw new TypeError('toolbarPlacement() parameter must be one of (' + toolbarPlacements.join(', ') + ') value');
            }
            options.toolbarPlacement = toolbarPlacement;

            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.widgetPositioning = function (widgetPositioning) {
            if (arguments.length === 0) {
                return $.extend({}, options.widgetPositioning);
            }

            if ({}.toString.call(widgetPositioning) !== '[object Object]') {
                throw new TypeError('widgetPositioning() expects an object variable');
            }
            if (widgetPositioning.horizontal) {
                if (typeof widgetPositioning.horizontal !== 'string') {
                    throw new TypeError('widgetPositioning() horizontal variable must be a string');
                }
                widgetPositioning.horizontal = widgetPositioning.horizontal.toLowerCase();
                if (horizontalModes.indexOf(widgetPositioning.horizontal) === -1) {
                    throw new TypeError('widgetPositioning() expects horizontal parameter to be one of (' + horizontalModes.join(', ') + ')');
                }
                options.widgetPositioning.horizontal = widgetPositioning.horizontal;
            }
            if (widgetPositioning.vertical) {
                if (typeof widgetPositioning.vertical !== 'string') {
                    throw new TypeError('widgetPositioning() vertical variable must be a string');
                }
                widgetPositioning.vertical = widgetPositioning.vertical.toLowerCase();
                if (verticalModes.indexOf(widgetPositioning.vertical) === -1) {
                    throw new TypeError('widgetPositioning() expects vertical parameter to be one of (' + verticalModes.join(', ') + ')');
                }
                options.widgetPositioning.vertical = widgetPositioning.vertical;
            }
            update();
            return picker;
        };

        picker.calendarWeeks = function (calendarWeeks) {
            if (arguments.length === 0) {
                return options.calendarWeeks;
            }

            if (typeof calendarWeeks !== 'boolean') {
                throw new TypeError('calendarWeeks() expects parameter to be a boolean value');
            }

            options.calendarWeeks = calendarWeeks;
            update();
            return picker;
        };

        picker.showTodayButton = function (showTodayButton) {
            if (arguments.length === 0) {
                return options.showTodayButton;
            }

            if (typeof showTodayButton !== 'boolean') {
                throw new TypeError('showTodayButton() expects a boolean parameter');
            }

            options.showTodayButton = showTodayButton;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.showClear = function (showClear) {
            if (arguments.length === 0) {
                return options.showClear;
            }

            if (typeof showClear !== 'boolean') {
                throw new TypeError('showClear() expects a boolean parameter');
            }

            options.showClear = showClear;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.widgetParent = function (widgetParent) {
            if (arguments.length === 0) {
                return options.widgetParent;
            }

            if (typeof widgetParent === 'string') {
                widgetParent = $(widgetParent);
            }

            if (widgetParent !== null && typeof widgetParent !== 'string' && !(widgetParent instanceof $)) {
                throw new TypeError('widgetParent() expects a string or a jQuery object parameter');
            }

            options.widgetParent = widgetParent;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.keepOpen = function (keepOpen) {
            if (arguments.length === 0) {
                return options.keepOpen;
            }

            if (typeof keepOpen !== 'boolean') {
                throw new TypeError('keepOpen() expects a boolean parameter');
            }

            options.keepOpen = keepOpen;
            return picker;
        };

        picker.focusOnShow = function (focusOnShow) {
            if (arguments.length === 0) {
                return options.focusOnShow;
            }

            if (typeof focusOnShow !== 'boolean') {
                throw new TypeError('focusOnShow() expects a boolean parameter');
            }

            options.focusOnShow = focusOnShow;
            return picker;
        };

        picker.inline = function (inline) {
            if (arguments.length === 0) {
                return options.inline;
            }

            if (typeof inline !== 'boolean') {
                throw new TypeError('inline() expects a boolean parameter');
            }

            options.inline = inline;
            return picker;
        };

        picker.clear = function () {
            clear();
            return picker;
        };

        picker.keyBinds = function (keyBinds) {
            options.keyBinds = keyBinds;
            return picker;
        };

        picker.getMoment = function (d) {
            return getMoment(d);
        };

        picker.debug = function (debug) {
            if (typeof debug !== 'boolean') {
                throw new TypeError('debug() expects a boolean parameter');
            }

            options.debug = debug;
            return picker;
        };

        picker.allowInputToggle = function (allowInputToggle) {
            if (arguments.length === 0) {
                return options.allowInputToggle;
            }

            if (typeof allowInputToggle !== 'boolean') {
                throw new TypeError('allowInputToggle() expects a boolean parameter');
            }

            options.allowInputToggle = allowInputToggle;
            return picker;
        };

        picker.showClose = function (showClose) {
            if (arguments.length === 0) {
                return options.showClose;
            }

            if (typeof showClose !== 'boolean') {
                throw new TypeError('showClose() expects a boolean parameter');
            }

            options.showClose = showClose;
            return picker;
        };

        picker.keepInvalid = function (keepInvalid) {
            if (arguments.length === 0) {
                return options.keepInvalid;
            }

            if (typeof keepInvalid !== 'boolean') {
                throw new TypeError('keepInvalid() expects a boolean parameter');
            }
            options.keepInvalid = keepInvalid;
            return picker;
        };

        picker.datepickerInput = function (datepickerInput) {
            if (arguments.length === 0) {
                return options.datepickerInput;
            }

            if (typeof datepickerInput !== 'string') {
                throw new TypeError('datepickerInput() expects a string parameter');
            }

            options.datepickerInput = datepickerInput;
            return picker;
        };

        picker.parseInputDate = function (parseInputDate) {
            if (arguments.length === 0) {
                return options.parseInputDate;
            }

            if (typeof parseInputDate !== 'function') {
                throw new TypeError('parseInputDate() sholud be as function');
            }

            options.parseInputDate = parseInputDate;

            return picker;
        };

        picker.disabledTimeIntervals = function (disabledTimeIntervals) {
            ///<signature helpKeyword="$.fn.datetimepicker.disabledTimeIntervals">
            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>
            ///<returns type="array">options.disabledTimeIntervals</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of
            ///options.enabledDates if such exist.</summary>
            ///<param name="dates" locid="$.fn.datetimepicker.disabledTimeIntervals_p:dates">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.disabledTimeIntervals ? $.extend({}, options.disabledTimeIntervals) : options.disabledTimeIntervals;
            }

            if (!disabledTimeIntervals) {
                options.disabledTimeIntervals = false;
                update();
                return picker;
            }
            if (!(disabledTimeIntervals instanceof Array)) {
                throw new TypeError('disabledTimeIntervals() expects an array parameter');
            }
            options.disabledTimeIntervals = disabledTimeIntervals;
            update();
            return picker;
        };

        picker.disabledHours = function (hours) {
            ///<signature helpKeyword="$.fn.datetimepicker.disabledHours">
            ///<summary>Returns an array with the currently set disabled hours on the component.</summary>
            ///<returns type="array">options.disabledHours</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of
            ///options.enabledHours if such exist.</summary>
            ///<param name="hours" locid="$.fn.datetimepicker.disabledHours_p:hours">Takes an [ int ] of values and disallows the user to select only from those hours.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.disabledHours ? $.extend({}, options.disabledHours) : options.disabledHours;
            }

            if (!hours) {
                options.disabledHours = false;
                update();
                return picker;
            }
            if (!(hours instanceof Array)) {
                throw new TypeError('disabledHours() expects an array parameter');
            }
            options.disabledHours = indexGivenHours(hours);
            options.enabledHours = false;
            if (options.useCurrent && !options.keepInvalid) {
                var tries = 0;
                while (!isValid(date, 'h')) {
                    date.add(1, 'h');
                    if (tries === 24) {
                        throw 'Tried 24 times to find a valid date';
                    }
                    tries++;
                }
                setValue(date);
            }
            update();
            return picker;
        };

        picker.enabledHours = function (hours) {
            ///<signature helpKeyword="$.fn.datetimepicker.enabledHours">
            ///<summary>Returns an array with the currently set enabled hours on the component.</summary>
            ///<returns type="array">options.enabledHours</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledHours if such exist.</summary>
            ///<param name="hours" locid="$.fn.datetimepicker.enabledHours_p:hours">Takes an [ int ] of values and allows the user to select only from those hours.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.enabledHours ? $.extend({}, options.enabledHours) : options.enabledHours;
            }

            if (!hours) {
                options.enabledHours = false;
                update();
                return picker;
            }
            if (!(hours instanceof Array)) {
                throw new TypeError('enabledHours() expects an array parameter');
            }
            options.enabledHours = indexGivenHours(hours);
            options.disabledHours = false;
            if (options.useCurrent && !options.keepInvalid) {
                var tries = 0;
                while (!isValid(date, 'h')) {
                    date.add(1, 'h');
                    if (tries === 24) {
                        throw 'Tried 24 times to find a valid date';
                    }
                    tries++;
                }
                setValue(date);
            }
            update();
            return picker;
        };

        picker.viewDate = function (newDate) {
            ///<signature helpKeyword="$.fn.datetimepicker.viewDate">
            ///<summary>Returns the component's model current viewDate, a moment object or null if not set.</summary>
            ///<returns type="Moment">viewDate.clone()</returns>
            ///</signature>
            ///<signature>
            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>
            ///<param name="newDate" locid="$.fn.datetimepicker.date_p:newDate">Takes string, viewDate, moment, null parameter.</param>
            ///</signature>
            if (arguments.length === 0) {
                return viewDate.clone();
            }

            if (!newDate) {
                viewDate = date.clone();
                return picker;
            }

            if (typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {
                throw new TypeError('viewDate() parameter must be one of [string, moment or Date]');
            }

            viewDate = parseInputDate(newDate);
            viewUpdate();
            return picker;
        };

        // initializing element and component attributes
        if (element.is('input')) {
            input = element;
        } else {
            input = element.find(options.datepickerInput);
            if (input.size() === 0) {
                input = element.find('input');
            } else if (!input.is('input')) {
                throw new Error('CSS class "' + options.datepickerInput + '" cannot be applied to non input element');
            }
        }

        if (element.hasClass('input-group')) {
            // in case there is more then one 'input-group-addon' Issue #48
            if (element.find('.datepickerbutton').size() === 0) {
                component = element.find('.input-group-addon');
            } else {
                component = element.find('.datepickerbutton');
            }
        }

        if (!options.inline && !input.is('input')) {
            throw new Error('Could not initialize DateTimePicker without an input element');
        }

        // Set defaults for date here now instead of in var declaration
        date = getMoment();
        viewDate = date.clone();

        $.extend(true, options, dataToOptions());

        picker.options(options);

        initFormatting();

        attachDatePickerElementEvents();

        if (input.prop('disabled')) {
            picker.disable();
        }
        if (input.is('input') && input.val().trim().length !== 0) {
            setValue(parseInputDate(input.val().trim()));
        } else if (options.defaultDate && input.attr('placeholder') === undefined) {
            setValue(options.defaultDate);
        }
        if (options.inline) {
            show();
        }
        return picker;
    };

    /********************************************************************************
     *
     * jQuery plugin constructor and defaults object
     *
     ********************************************************************************/

    $.fn.datetimepicker = function (options) {
        return this.each(function () {
            var $this = $(this);
            if (!$this.data('DateTimePicker')) {
                // create a private copy of the defaults object
                options = $.extend(true, {}, $.fn.datetimepicker.defaults, options);
                $this.data('DateTimePicker', dateTimePicker($this, options));
            }
        });
    };

    $.fn.datetimepicker.defaults = {
        timeZone: 'Etc/UTC',
        format: false,
        dayViewHeaderFormat: 'MMMM YYYY',
        extraFormats: false,
        stepping: 1,
        minDate: false,
        maxDate: false,
        useCurrent: true,
        collapse: true,
        locale: moment.locale(),
        defaultDate: false,
        disabledDates: false,
        enabledDates: false,
        icons: {
            time: 'glyphicon glyphicon-time',
            date: 'glyphicon glyphicon-calendar',
            up: 'glyphicon glyphicon-chevron-up',
            down: 'glyphicon glyphicon-chevron-down',
            previous: 'glyphicon glyphicon-chevron-left',
            next: 'glyphicon glyphicon-chevron-right',
            today: 'glyphicon glyphicon-screenshot',
            clear: 'glyphicon glyphicon-trash',
            close: 'glyphicon glyphicon-remove'
        },
        tooltips: {
            today: 'Go to today',
            clear: 'Clear selection',
            close: 'Close the picker',
            selectMonth: 'Select Month',
            prevMonth: 'Previous Month',
            nextMonth: 'Next Month',
            selectYear: 'Select Year',
            prevYear: 'Previous Year',
            nextYear: 'Next Year',
            selectDecade: 'Select Decade',
            prevDecade: 'Previous Decade',
            nextDecade: 'Next Decade',
            prevCentury: 'Previous Century',
            nextCentury: 'Next Century',
            pickHour: 'Pick Hour',
            incrementHour: 'Increment Hour',
            decrementHour: 'Decrement Hour',
            pickMinute: 'Pick Minute',
            incrementMinute: 'Increment Minute',
            decrementMinute: 'Decrement Minute',
            pickSecond: 'Pick Second',
            incrementSecond: 'Increment Second',
            decrementSecond: 'Decrement Second',
            togglePeriod: 'Toggle Period',
            selectTime: 'Select Time'
        },
        useStrict: false,
        sideBySide: false,
        daysOfWeekDisabled: false,
        calendarWeeks: false,
        viewMode: 'days',
        toolbarPlacement: 'default',
        showTodayButton: false,
        showClear: false,
        showClose: false,
        widgetPositioning: {
            horizontal: 'auto',
            vertical: 'auto'
        },
        widgetParent: null,
        ignoreReadonly: false,
        keepOpen: false,
        focusOnShow: true,
        inline: false,
        keepInvalid: false,
        datepickerInput: '.datepickerinput',
        keyBinds: {
            up: function up(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(7, 'd'));
                } else {
                    this.date(d.clone().add(this.stepping(), 'm'));
                }
            },
            down: function down(widget) {
                if (!widget) {
                    this.show();
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(7, 'd'));
                } else {
                    this.date(d.clone().subtract(this.stepping(), 'm'));
                }
            },
            'control up': function controlUp(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(1, 'y'));
                } else {
                    this.date(d.clone().add(1, 'h'));
                }
            },
            'control down': function controlDown(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(1, 'y'));
                } else {
                    this.date(d.clone().subtract(1, 'h'));
                }
            },
            left: function left(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(1, 'd'));
                }
            },
            right: function right(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(1, 'd'));
                }
            },
            pageUp: function pageUp(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(1, 'M'));
                }
            },
            pageDown: function pageDown(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(1, 'M'));
                }
            },
            enter: function enter() {
                this.hide();
            },
            escape: function escape() {
                this.hide();
            },
            //tab: function (widget) { //this break the flow of the form. disabling for now
            //    var toggle = widget.find('.picker-switch a[data-action="togglePicker"]');
            //    if(toggle.length > 0) toggle.click();
            //},
            'control space': function controlSpace(widget) {
                if (widget.find('.timepicker').is(':visible')) {
                    widget.find('.btn[data-action="togglePeriod"]').click();
                }
            },
            t: function t() {
                this.date(this.getMoment());
            },
            'delete': function _delete() {
                this.clear();
            }
        },
        debug: false,
        allowInputToggle: false,
        disabledTimeIntervals: false,
        disabledHours: false,
        enabledHours: false,
        viewDate: false
    };
});

},{"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/typeof":249,"jquery":"jquery","moment":"moment"}],46:[function(require,module,exports){
"use strict";

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://spin.js.org/#v2.3.2
!function (a, b) {
  "object" == (typeof module === "undefined" ? "undefined" : (0, _typeof3.default)(module)) && module.exports ? module.exports = b() : "function" == typeof define && define.amd ? define(b) : a.Spinner = b();
}(undefined, function () {
  "use strict";
  function a(a, b) {
    var c,
        d = document.createElement(a || "div");for (c in b) {
      d[c] = b[c];
    }return d;
  }function b(a) {
    for (var b = 1, c = arguments.length; c > b; b++) {
      a.appendChild(arguments[b]);
    }return a;
  }function c(a, b, c, d) {
    var e = ["opacity", b, ~~(100 * a), c, d].join("-"),
        f = .01 + c / d * 100,
        g = Math.max(1 - (1 - a) / b * (100 - f), a),
        h = j.substring(0, j.indexOf("Animation")).toLowerCase(),
        i = h && "-" + h + "-" || "";return m[e] || (k.insertRule("@" + i + "keyframes " + e + "{0%{opacity:" + g + "}" + f + "%{opacity:" + a + "}" + (f + .01) + "%{opacity:1}" + (f + b) % 100 + "%{opacity:" + a + "}100%{opacity:" + g + "}}", k.cssRules.length), m[e] = 1), e;
  }function d(a, b) {
    var c,
        d,
        e = a.style;if (b = b.charAt(0).toUpperCase() + b.slice(1), void 0 !== e[b]) return b;for (d = 0; d < l.length; d++) {
      if (c = l[d] + b, void 0 !== e[c]) return c;
    }
  }function e(a, b) {
    for (var c in b) {
      a.style[d(a, c) || c] = b[c];
    }return a;
  }function f(a) {
    for (var b = 1; b < arguments.length; b++) {
      var c = arguments[b];for (var d in c) {
        void 0 === a[d] && (a[d] = c[d]);
      }
    }return a;
  }function g(a, b) {
    return "string" == typeof a ? a : a[b % a.length];
  }function h(a) {
    this.opts = f(a || {}, h.defaults, n);
  }function i() {
    function c(b, c) {
      return a("<" + b + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', c);
    }k.addRule(".spin-vml", "behavior:url(#default#VML)"), h.prototype.lines = function (a, d) {
      function f() {
        return e(c("group", { coordsize: k + " " + k, coordorigin: -j + " " + -j }), { width: k, height: k });
      }function h(a, h, i) {
        b(m, b(e(f(), { rotation: 360 / d.lines * a + "deg", left: ~~h }), b(e(c("roundrect", { arcsize: d.corners }), { width: j, height: d.scale * d.width, left: d.scale * d.radius, top: -d.scale * d.width >> 1, filter: i }), c("fill", { color: g(d.color, a), opacity: d.opacity }), c("stroke", { opacity: 0 }))));
      }var i,
          j = d.scale * (d.length + d.width),
          k = 2 * d.scale * j,
          l = -(d.width + d.length) * d.scale * 2 + "px",
          m = e(f(), { position: "absolute", top: l, left: l });if (d.shadow) for (i = 1; i <= d.lines; i++) {
        h(i, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
      }for (i = 1; i <= d.lines; i++) {
        h(i);
      }return b(a, m);
    }, h.prototype.opacity = function (a, b, c, d) {
      var e = a.firstChild;d = d.shadow && d.lines || 0, e && b + d < e.childNodes.length && (e = e.childNodes[b + d], e = e && e.firstChild, e = e && e.firstChild, e && (e.opacity = c));
    };
  }var j,
      k,
      l = ["webkit", "Moz", "ms", "O"],
      m = {},
      n = { lines: 12, length: 7, width: 5, radius: 10, scale: 1, corners: 1, color: "#000", opacity: .25, rotate: 0, direction: 1, speed: 1, trail: 100, fps: 20, zIndex: 2e9, className: "spinner", top: "50%", left: "50%", shadow: !1, hwaccel: !1, position: "absolute" };if (h.defaults = {}, f(h.prototype, { spin: function spin(b) {
      this.stop();var c = this,
          d = c.opts,
          f = c.el = a(null, { className: d.className });if (e(f, { position: d.position, width: 0, zIndex: d.zIndex, left: d.left, top: d.top }), b && b.insertBefore(f, b.firstChild || null), f.setAttribute("role", "progressbar"), c.lines(f, c.opts), !j) {
        var g,
            h = 0,
            i = (d.lines - 1) * (1 - d.direction) / 2,
            k = d.fps,
            l = k / d.speed,
            m = (1 - d.opacity) / (l * d.trail / 100),
            n = l / d.lines;!function o() {
          h++;for (var a = 0; a < d.lines; a++) {
            g = Math.max(1 - (h + (d.lines - a) * n) % l * m, d.opacity), c.opacity(f, a * d.direction + i, g, d);
          }c.timeout = c.el && setTimeout(o, ~~(1e3 / k));
        }();
      }return c;
    }, stop: function stop() {
      var a = this.el;return a && (clearTimeout(this.timeout), a.parentNode && a.parentNode.removeChild(a), this.el = void 0), this;
    }, lines: function lines(d, f) {
      function h(b, c) {
        return e(a(), { position: "absolute", width: f.scale * (f.length + f.width) + "px", height: f.scale * f.width + "px", background: b, boxShadow: c, transformOrigin: "left", transform: "rotate(" + ~~(360 / f.lines * k + f.rotate) + "deg) translate(" + f.scale * f.radius + "px,0)", borderRadius: (f.corners * f.scale * f.width >> 1) + "px" });
      }for (var i, k = 0, l = (f.lines - 1) * (1 - f.direction) / 2; k < f.lines; k++) {
        i = e(a(), { position: "absolute", top: 1 + ~(f.scale * f.width / 2) + "px", transform: f.hwaccel ? "translate3d(0,0,0)" : "", opacity: f.opacity, animation: j && c(f.opacity, f.trail, l + k * f.direction, f.lines) + " " + 1 / f.speed + "s linear infinite" }), f.shadow && b(i, e(h("#000", "0 0 4px #000"), { top: "2px" })), b(d, b(i, h(g(f.color, k), "0 0 1px rgba(0,0,0,.1)")));
      }return d;
    }, opacity: function opacity(a, b, c) {
      b < a.childNodes.length && (a.childNodes[b].style.opacity = c);
    } }), "undefined" != typeof document) {
    k = function () {
      var c = a("style", { type: "text/css" });return b(document.getElementsByTagName("head")[0], c), c.sheet || c.styleSheet;
    }();var o = e(a("group"), { behavior: "url(#default#VML)" });!d(o, "transform") && o.adj ? i() : j = d(o, "animation");
  }return h;
});

},{"babel-runtime/helpers/typeof":249}],47:[function(require,module,exports){
'use strict';

var _isInteger = require('babel-runtime/core-js/number/is-integer');

var _isInteger2 = _interopRequireDefault(_isInteger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
if (window.Element && !Element.prototype.closest) {
    Element.prototype.closest = function (s) {
        var matches = (this.document || this.ownerDocument).querySelectorAll(s),
            i,
            el = this;
        do {
            i = matches.length;
            while (--i >= 0 && matches.item(i) !== el) {};
        } while (i < 0 && (el = el.parentElement));
        return el;
    };
}

Number.isInteger = _isInteger2.default || function (value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

//https://gist.github.com/paulirish/1579671
var requestAnimationFramePolyfill = function () {
    var clock = Date.now();

    return function (callback) {

        var currentTime = Date.now();

        if (currentTime - clock > 16) {
            clock = currentTime;
            callback(currentTime);
        } else {
            setTimeout(function () {
                polyfill(callback);
            }, 0);
        }
    };
}();

window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || requestAnimationFramePolyfill;

if (!window.Intl) {
    require('intl');
    require('intl/locale-data/jsonp/en.js');
}

//http://www.javascriptkit.com/dhtmltutors/sticky-hover-issue-solutions.shtml
var touchsupport = 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
if (!touchsupport) {
    // browser doesn't support touch
    document.documentElement.classList.add("non-touch");
}

require('smoothscroll-polyfill').polyfill();

module.exports = true;

},{"babel-runtime/core-js/number/is-integer":223,"intl":"intl","intl/locale-data/jsonp/en.js":431,"smoothscroll-polyfill":436}],48:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _create2.default)({

    Error: require('../../lib/MyError'),

    ViewFactory: require('./factory/View'),

    Views: require('./.ViewMap'),

    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    clearAndNavigate: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(route) {
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return _promise2.default.all((0, _entries2.default)(this.views).map(function (_ref2) {
                                var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),
                                    key = _ref3[0],
                                    val = _ref3[1];

                                return val.delete();
                            }));

                        case 3:
                            this.currentView = undefined;
                            this.navigate(route);
                            _context.next = 10;
                            break;

                        case 7:
                            _context.prev = 7;
                            _context.t0 = _context['catch'](0);
                            this.Error(_context.t0);
                        case 10:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0, 7]]);
        }));

        function clearAndNavigate(_x) {
            return _ref.apply(this, arguments);
        }

        return clearAndNavigate;
    }(),
    initialize: function initialize() {
        var _this = this;

        this.content = document.querySelector('#content');

        window.onpopstate = this.handle.bind(this);

        this.user = require('./models/User');

        this.user.on('loggedIn', function () {
            return _this.onLogin();
        });

        this.user.on('loginAsCustomer', function () {
            return _this.clearAndNavigate('/sign-up');
        });

        this.userPromise = new _promise2.default(function (resolve, reject) {
            return _this.user.fetch().done(resolve).fail(reject);
        });

        this.footer = this.ViewFactory.create('footer', { insertion: { el: this.content, method: 'after' } });

        this.views = {};

        this.handle();
    },
    handle: function handle() {
        this.handler(window.location.pathname.split('/').slice(1));
    },
    handleHeader: function handleHeader(resource) {
        var _this2 = this;

        if (/verify|resetPassword/.test(resource)) return;else if (resource === 'admin-plus') {
            if (this.adminHeader) {
                this.adminHeader.onNavigation();
            } else {
                this.adminHeader = this.ViewFactory.create('adminHeader', { insertion: { el: this.content, method: 'insertBefore' } }).on('signout', function () {
                    return _this2.onSignout();
                });
            }
        } else {
            if (this.adminHeader) {
                this.adminHeader.hide();
            }
            if (this.header) {
                return;
            } else {
                this.header = this.ViewFactory.create('header', { insertion: { el: this.content, method: 'insertBefore' } }).on('navigate', this.onViewNavigate.bind(this)).on('signInClicked', function () {
                    return _this2.handleLogin();
                }).on('signOutClicked', function () {
                    return _this2.onSignout();
                }).on('removeLogin', function () {
                    return _this2.Login.delete().catch(_this2.Error);
                });
            }
        }
    },
    handleLogin: function handleLogin() {
        var _this3 = this;

        _promise2.default.all((0, _keys2.default)(this.views).map(function (view) {
            return _this3.views[view].hide();
        })).then(function () {
            _this3.Login = _this3.ViewFactory.create('login', { insertion: { el: _this3.content } }).on("success", function () {
                _this3.header.onLogin().then(function () {
                    return _this3.handle();
                }).catch(_this3.Error);
            }).on('loginCancelled', function () {
                _this3.header.displayingLogin = false;_this3.handle();
            });
        }).catch(this.Error);
    },
    handleFooter: function handleFooter(resource) {
        this.footer.els.container.classList.toggle('fd-hidden', /admin-plus|verify|resetPassword/.test(resource));
    },
    handler: function handler(path) {
        var _this4 = this;

        if (path[0] === 'admin') path[0] = 'admin-plus';
        var name = this.pathToView(path[0]),
            view = this.Views[name] ? path[0] : 'home';

        if (this.resources[path[0]]) view = path[0];

        this.userPromise.then(function () {
            _this4.handleHeader(path[0]);
            _this4.handleFooter(path[0]);

            if (_this4.user.id && path[0] === 'admin-plus') _this4.adminHeader.onUser(_this4.user);

            if (view === _this4.currentView) return _this4.views[view].onNavigation(path.slice(1));

            _promise2.default.all((0, _keys2.default)(_this4.views).map(function (view) {
                return _this4.views[view].hide();
            })).then(function () {
                _this4.currentView = view;

                if (_this4.header) _this4.header.toggleSignUpBtn(view);

                if (_this4.views[view]) return _this4.views[view].onNavigation(path);

                _this4.views[view] = !_this4.resources[view] ? _this4.ViewFactory.create(view, {
                    insertion: { el: _this4.content },
                    path: path
                }).on('navigate', function (route, options) {
                    return _this4.navigate(route, options);
                }).on('deleted', function () {
                    return delete _this4.views[view];
                }) : new _this4.resources[view].view((0, _extends3.default)({ factory: _this4.ViewFactory }, _this4.resources[view].options)).on('navigate', function (route, options) {
                    return _this4.navigate(route, options);
                }).on('deleted', function () {
                    return delete _this4.views[view];
                });

                if (path[0] !== 'admin-plus') document.body.scrollTop = 0;

                return _promise2.default.resolve();
            });
        }).catch(function (err) {
            return new _this4.Error(err);
        });
    },
    navigate: function navigate(location) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var path = ('' + window.location.pathname).split('/');

        if (options.replace || options.up) {
            path.pop();
            if (options.replace) path.push(location);
            location = path.join('/');
        } else if (options.append) {
            location = window.location.pathname + '/' + location;
        }

        if (location !== window.location.pathname) history.pushState({}, '', location);
        if (!options.silent) this.handle();
    },
    onLogin: function onLogin() {
        this.onUser(this.user);
        if (this.header) this.header.onLogin().catch(this.Error);
    },
    onViewNavigate: function onViewNavigate(route) {
        this.navigate(route, { trigger: true });
    },
    onSignout: function onSignout() {
        this.clearAndNavigate('/');
    },
    onUser: function onUser(user) {
        this.adminHeader ? this.adminHeader.onUser(this.user) : this.header.onUser(this.user);
    },
    pathToView: function pathToView(path) {
        var _this5 = this;

        var hyphenSplit = path.split('-');
        return hyphenSplit.map(function (item) {
            return _this5.capitalizeFirstLetter(item);
        }).join('');
    },


    resources: {
        "sign-up": { view: require('./views/Signup'), options: {} }
    }

});

},{"../../lib/MyError":203,"./.ViewMap":3,"./factory/View":9,"./models/User":42,"./views/Signup":101,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/entries":228,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/asyncToGenerator":244,"babel-runtime/helpers/extends":246,"babel-runtime/helpers/slicedToArray":247,"babel-runtime/regenerator":250}],49:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class='intro'>" + p.intro + "</div><p>" + p.paragraph + "</p>";
};

},{}],50:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div data-js=\"container\" class=\"Signup\">\n    <h1>Sign Up</h1>\n    <h2 data-js=\"intro\">Welcome to our CSA Sign Up Page</h2>\n    <section>\n        <div data-js=\"walkthrough\"></div>\n        <div class=\"nav-arrows\">\n            <div data-js=\"leftBtn\">\n                <span class=\"glyphicon glyphicon-menu-left\"></span>\n                <span>Back</span>\n            </div>\n            <div data-js=\"rightBtn\">\n                <span>Next</span>\n                <span class=\"glyphicon glyphicon-menu-right\"></span>\n            </div>\n        </div>\n    </section>\n</div>";
};

},{}],51:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"DateSelection\" data-js=\"container\">\n    <div>Not going to be around?</div>\n    <div>Please choose any dates for which you will not be available to receive or pick up your share.</div>\n    <ul data-js=\"shares\"></ul>\n</div>";
};

},{}],52:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"Delivery\" data-js=\"container\">\n    <p>Please select a delivery option for your share(s).</p>\n    <ul data-js=\"shares\"></ul>\n</div>";
};

},{}],53:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li class=\"delivery-option\" data-id=\"" + p.id + "\" data-js=\"container\">\n    <div>" + p.label + "</div>\n    <div data-js=\"deliveryPrice\"></div>\n</li>";
};

},{}],54:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"delivery-options\">\n    <div>\n        <div class=\"share-label\">\n            <div>" + p.label + "</div>\n            <div>\n                <span>" + p.humanStartdate + "</span>\n                <span>-</span>\n                <span>" + p.humanEnddate + "</span>\n            </div>\n            <div>" + p.duration + " weeks</div>\n        </div>\n        <div>\n            <div data-js=\"options\" class=\"options\"></div>\n            <div data-js=\"feedback\" class=\"feedback-messages\"></div>\n        </div>\n    </div>\n    <div data-js=\"dropoffs\"></div>\n    <div class=\"error\">Please select a valid option.</div>\n</li>";
};

},{}],55:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var price = p.price === '$0.00' ? 'No charge' : p.price + ' per week';

    return '' + ('<div data-js="container" class="dropoff">\n    <div>' + p.label + '</div>\n    <div>' + (p.venue || '') + '</div>\n    <div>' + p.street + '</div>\n    <div>' + p.cityStateZip + '</div>\n    <div>' + p.dayOfWeek + ' : ' + p.starttime + ' - ' + p.endtime + '</div>\n    <div>' + price + '</div>\n</div>');
};

},{}],56:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div class=\"dropoffs\" data-js=\"container\"></div>";
};

},{}],57:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div>On-farm pickup available " + p.dayOfWeek + " " + p.starttime + " - " + p.endtime + "</div>";
};

},{}],58:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div>Home delivery available " + p.dayOfWeek + " " + p.starttime + " - " + p.endtime + "</div>";
};

},{}],59:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"payment-option\">\n    <div>" + p.label + "</div>\n    <div>" + p.note + "</div>\n    <div class=\"method-total\"></div>    \n</li>";
};

},{}],60:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<ul class=\"payment-options\" data-js=\"container\"></ul>";
};

},{}],61:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div data-js="container" class="pickup-date ' + (p.selected ? 'selected' : '') + ' ' + (p.unselectable ? 'unselectable' : '') + '">\n    <div>' + p.dayOfWeek + '</div>\n    <div>' + p.month + '</div>\n    <div>' + p.dayOfMonth + '</div>\n</div>';
};

},{}],62:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"share-dates\">\n    <div>\n        <div class=\"share-label\">\n            <div>" + p.label + "</div>\n            <div>\n                <span>" + p.humanStartdate + "</span>\n                <span>-</span>\n                <span>" + p.humanEnddate + "</span>\n            </div>\n            <div>" + p.duration + " weeks</div>\n        </div>\n        <div data-js=\"dates\"></div>\n    </div>\n    <div class=\"error\">Please select at least one date to receive a share.</div>\n</li>";
};

},{}],63:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"share\" data-id=\"" + p.id + "\">\n    <div>\n        <div data-js=\"shareBox\"></div>\n        <div>" + p.description + "</div>\n    </div>\n</li>";
};

},{}],64:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var options = p.options.map(function (option) {
        return '<option value="' + option.id + '">' + option.label + '</option>';
    }).join(''),
        description = p.description ? '<span data-js="optionIcon" class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>' : '';

    return '' + ('<div data-js="container" class="share-option">\n    <div class="option-title">\n        <div>\n            <span>' + p.prompt + '</span>\n            ' + description + '\n       </div>\n        <div>\n            <select data-js="input" class="form-control">\n                ' + options + '\n            </select>    \n        </div>\n    </div>\n    <div class="total">\n        <div data-js="total"></div>\n    </div>\n</div>');
};

},{}],65:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"ShareOptions\" data-js=\"container\">\n    <p>Please make selections to customize your box</p>\n    <ul data-js=\"shares\"></ul>\n</div>";
};

},{}],66:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"Shares\" data-js=\"container\">\n    <p>As a member in our CSA program, you will receive a weekly box of fresh-picked, chemical-free produce all grown at Patchwork Gardens, right here in the Miami Valley.</p>\n    <p>If you\u2019re not quite sure you\u2019re ready for a CSA, check out our <span data-js=\"csaInfoBtn\" class=\"link\">CSA Program</span> page for more information</p>\n    <h2>Please select which season(s) you would like to join us</h2>\n    <ul data-js=\"shares\"></ul>\n    <div class=\"error\">Please select at least one share.</div>\n</div>";
};

},{}],67:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\">\n    <div class=\"single-share\">\n        <div data-js=\"shareBox\"></div>\n        <div>\n            <h4 data-js=\"weeklyHeader\">Weekly Options</h4>\n            <div data-js=\"options\"></div>\n        </div>\n        <div data-js=\"seasonalContainer\">\n            <h4>Seasonal Items</h4>\n            <div data-js=\"seasonalOptions\"></div>\n        </div>\n    </div>\n    <div>\n        <div><span>Share Total: </span><span data-js=\"weeklyTotal\"></span></div>\n        <div><span>Seasonal Items Total: </span><span data-js=\"seasonalTotal\">$0.00</span></div>\n    </div>\n</li>";
};

},{}],68:[function(require,module,exports){
'use strict';

module.exports = function (p) {

    var shares = p.shares.map(function (share) {

        var selectedOptions = share.selectedOptions.map(function (opt) {
            return '<div class="item-row">\n            <div>' + opt.optionName + '</div>\n            <div>\n                <span>' + opt.selectedOptionLabel + '</span>\n                <span>' + (p.unit || '') + '</span>\n            </div>\n            <div class="price">\n                <span>' + opt.price + '</span>\n                <span>per week</span>\n            </div>\n        </div>';
        }).join('');

        var seasonalAddOns = share.seasonalAddOns.map(function (addon) {
            return '<div class="item-row">\n            <div>' + addon.label + '</div>\n            <div>\n                <span>' + addon.selectedOptionLabel + '</span>\n                <span>' + (addon.unit || '') + '</span>\n            </div>\n            <div class="price">\n                <span>' + addon.price + '</span>\n            </div>\n        </div>';
        }).join('');

        var seasonalTotal = share.seasonalAddOns.length ? '<div><div>Seasonal Items Total :</div><div>' + share.seasonalOptionsTotal + '</div></div>' : '';

        var groupdropoff = share.selectedDelivery.groupdropoff ? '<div class="item-row">\n            <div>Drop-off Location</div>\n            <div>' + share.selectedDelivery.groupdropoff + '</div>\n        </div>' : '';

        var skipDays = share.skipDays.length ? '<div>\n            <div class="section-title">Dates You Will Not Pickup</div>\n            <div class="pickup-dates">' + share.skipDays.join('') + '</div>\n        </div>' : '';

        return '' + ('<div class="share-summary">\n        <div>' + share.shareBox + '</div>\n        <div>\n            <div class="section-title">Share Options</div>\n            ' + selectedOptions + '\n            ' + seasonalAddOns + '\n        </div>\n        <div>\n            <div class="section-title">Delivery</div>\n            <div class="item-row">\n                <div>Method</div>\n                <div>' + share.selectedDelivery.deliveryType + '</div>\n                <div class="price">\n                    <span>' + share.selectedDelivery.weeklyCost + '</span>\n                    <span>per week</span>\n                </div>  \n            </div>\n            ' + groupdropoff + '\n            <div class="item-row">\n                <div>Address</div>\n                <div>' + share.selectedDelivery.address + '</div>\n            </div>\n            <div class="item-row">\n                <div>Pick-up Hours</div>\n                <div>\n                    <span>' + share.selectedDelivery.dayOfWeek + ' </span>\n                    <span>' + share.selectedDelivery.starttime + ' - ' + share.selectedDelivery.endtime + '</span>\n                </div>\n            </div>\n        </div>\n        <div>\n            <div class="section-title">Dates Selected for Delivery</div>\n            <div class="item-row">\n                <div>Number of weeks selected</div>\n                <div>' + share.weeksSelected + '</div>\n            </div>\n            <div class="pickup-dates">\n                ' + share.selectedDates.join('') + '\n            </div>\n        </div>\n        ' + skipDays + '\n        <div class="share-total">\n            <div class="section-title">Share Total</div>\n            ' + seasonalTotal + '\n            <div>\n                <div>Weekly Share Price :</div>\n                <div>' + share.weeklyPrice + '</div>\n            </div>\n            <div>\n                <div>Number of Weeks :</div>\n                <div>' + share.weeksSelected + '</div>\n            </div>\n            <div>\n                <div>Share Total :</div>\n                <div>' + share.total + '</div>\n            </div>\n        </div>\n    </div>');
    }).join('');

    return '' + ('<div data-js="container" class="Summary ' + p.containerClass + '">\n    <div class="summaries">\n        ' + shares + '\n    </div>\n    <div data-js="grandTotal" class="grand-total"></div>\n    <div class="payment">    \n        <h2>Select a method of payment</h2>\n        <div data-js="paymentOptions"></div>\n        <form data-js="paymentForm" class="hide">\n            <div class="credit-card-info">\n                <label class="control-label number">Card Number</label>\n                <div>\n                    <input type="text" class="form-control" data-js="number" id="number">\n                    <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                </div>\n                <div>Visa, MasterCard, American Express, JCB, Discover, and Diners Club are accepted</div>\n            </div>\n            <div class="expiration">\n                <div>\n                    <label class="control-label">Exp Month</label>\n                    <div>\n                        <input type="number" class="form-control" data-js="exp_month" maxlength="2" size="3" placeholder="mm" id="exp_month">\n                        <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                    </div>\n                </div>\n                <div>\n                    <label class="control-label">Exp Year</label>\n                    <div>\n                        <input type="number" class="form-control" data-js="exp_year" maxlength="4" size="4" placeholder="yyyy" id="exp_year">\n                        <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <label class="control-label">CVC</label>\n                <div class="cvc">\n                    <input type="number" class="form-control" data-js="cvc" maxlength="4" size="4" id="cvc">\n                    <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                </div>\n            </div>\n        </form>\n        <div class="button-row">\n            <button data-js="signupBtn" class="hide btn-success">Become a Member!</button>\n        </div>\n    </div>\n</div>');
};

},{}],69:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div>Because you have selected home delivery, and your address could not be validated automatically, we would like you to verify your address and zip code</div>\n    <form class=\"form-horizontal\">\n        <div class=\"form-group\">\n            <label class=\"col-sm-3 control-label\">Address</label>\n            <div class=\"col-sm-9\">\n                <input type=\"text\" class=\"form-control\" id=\"verifiedAddress\" value=\"" + p.address + "\">\n            </div>\n        </div>\n        <div id=\"zipCodeFormGroup\" class=\"form-group\">\n            <label class=\"col-sm-3 control-label\">Zip Code</label>\n            <div class=\"col-sm-9\">\n                <input type=\"text\" class=\"form-control\" id=\"verifiedZipCode\" value=\"" + p.zipCode + "\">\n                <span id=\"zipCodeHelpBlock\" class=\"help-block hide\">Invalid Zip Code for Home Delivery</span>\n            </div>\n        </div>\n    </form>\n</div>";
};

},{}],70:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CustomContent = require('./util/CustomContent');

module.exports = (0, _extends3.default)({}, require('./__proto__'), CustomContent, {

    tables: [{ name: 'Staff', el: 'staff', sort: { 'order': 1 }, template: 'staffProfile' }],

    templates: {
        staffProfile: require('./templates/StaffProfile')
    }

});

},{"./__proto__":109,"./templates/StaffProfile":179,"./util/CustomContent":198,"babel-runtime/helpers/extends":246}],71:[function(require,module,exports){
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Customer: require('../models/Customer'),
    Delivery: require('../models/Delivery'),
    Transactions: require('../models/CsaTransaction'),

    Views: {
        personalInfo: function personalInfo() {
            return {
                model: (0, _create2.default)(this.Model).constructor({}, {
                    attributes: require('../../../models/AccountInfo').attributes,
                    meta: { noPlaceholder: true },
                    resource: 'accountInfo'
                }),
                templateOpts: function templateOpts() {
                    return {
                        heading: 'Your Account Info',
                        submitText: 'Update'
                    };
                },
                onCancelBtnClick: function onCancelBtnClick() {
                    this.emit('cancel');
                },

                toastSuccess: 'Account updated!'
            };
        }
    },

    events: {
        accountInfoBtn: 'click',
        backBtn: 'click',
        ordersBtn: 'click',
        paymentBtn: 'click',

        views: {
            personalInfo: [['posted', function (response) {
                var _this = this;

                (0, _keys2.default)(response).forEach(function (key) {
                    if (_this.user.has(key)) _this.user.set(key, response[key]);
                });

                this.selectedCustomer.person.data.name = response.name;
                this.selectedCustomer.person.data.email = response.email;
                this.selectedCustomer.person.data.secondaryEmail = response.secondaryEmail;
                this.selectedCustomer.member.data.phonenumber = response.phonenumber;
                this.selectedCustomer.member.data.address = response.address;
                this.selectedCustomer.member.data.extraaddress = response.extraaddress;
                this.selectedCustomer.member.data.zipcode = response.zipcode;

                this.clearSubviews();
            }], ['cancel', function () {
                var _this2 = this;

                this.hideEl(this.els.accountInfo).then(function () {
                    return _this2.showEl(_this2.els.accountNav);
                }).catch(this.Error);
            }]]
        }
    },

    addressSelected: function addressSelected() {
        var place = this.addressAutoComplete.getPlace(),
            zipcode = place.address_components.find(function (component) {
            return component.types[0] === "postal_code";
        }).short_name;

        this.views.personalInfo.model.set('zipcode', zipcode);
    },
    clearSubviews: function clearSubviews() {
        var _this3 = this;

        return _promise2.default.all([this.hideEl(this.els.accountInfo), this.hideEl(this.els.orderInfo), this.views.accountPayments.hide()]).then(function () {
            _this3.views.seasons.els.totals.classList.add('fd-hidden');
            _this3.views.sharePatch.reset();
            _this3.views.orderOptions.els.editSummary.classList.add('fd-hidden');
            _this3.views.weekOptions.els.editSummary.classList.add('fd-hidden');
            _this3.els.backBtn.classList.add('fd-hidden');
            return _this3.showEl(_this3.els.accountNav);
        }).catch(this.Error);
    },
    geolocate: function geolocate() {
        var _this4 = this;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                return _this4.addressAutoComplete.setBounds(new google.maps.Circle({
                    center: {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    },
                    radius: position.coords.accuracy }).getBounds());
            });
        }
    },
    initAutocomplete: function initAutocomplete() {
        this.addressAutoComplete = new google.maps.places.Autocomplete(this.views.personalInfo.els.address, { types: ['address'] });

        this.addressAutoComplete.addListener('place_changed', this.addressSelected.bind(this));
    },
    onAccountInfoBtnClick: function onAccountInfoBtnClick() {
        var _this5 = this;

        this.hideEl(this.els.accountNav).then(function () {
            _this5.els.backBtn.classList.remove('fd-hidden');
            _this5.populateAccountFields();
            return _this5.showEl(_this5.els.accountInfo);
        }).catch(this.Error);
    },
    onBackBtnClick: function onBackBtnClick() {
        this.clearSubviews();
    },
    onNavigation: function onNavigation() {
        var _this6 = this;

        return this.show().then(function () {
            return _this6.clearSubviews();
        }).then(function () {
            return _this6.views.seasons.update(_this6.selectedCustomer);
        }).catch(this.Error);
    },
    onOrdersBtnClick: function onOrdersBtnClick() {
        var _this7 = this;

        this.hideEl(this.els.accountNav).then(function () {
            return _this7.showEl(_this7.els.orderInfo);
        }).then(function () {
            _this7.views.orderOptions.hideSync();
            _this7.views.weekOptions.hideSync();
            _this7.els.backBtn.classList.remove('fd-hidden');
            return _this7.views.seasons.update(_this7.selectedCustomer);
        }).catch(this.Error);
    },
    onPaymentBtnClick: function onPaymentBtnClick() {
        var _this8 = this;

        this.hideEl(this.els.accountNav).then(function () {
            _this8.els.backBtn.classList.remove('fd-hidden');
            _this8.views.accountPayments.clear();
            _this8.views.accountPayments.views.seasons.update(_this8.selectedCustomer);
            return _this8.views.accountPayments.show();
        }).catch(this.Error);
    },
    patchMemberShare: function patchMemberShare() {
        var _this9 = this;

        var weekPatch = this.views.weekOptions.getPatchData();

        var weekDetail = '',
            emailTo = [this.selectedCustomer.person.data.email];

        if (this.selectedCustomer.person.data.secondaryEmail) emailTo.push(this.selectedCustomer.person.data.secondaryEmail);

        if (weekPatch.addedDates.length || weekPatch.removedDates.length) {
            weekDetail += ' ( ';
        }

        if (weekPatch.addedDates.length) {
            var description = weekPatch.addedDates.map(function (date) {
                return date.slice(5);
            }).join(',');
            weekDetail += 'Added Weeks: ' + description;
            if (weekPatch.removedDates.length) {
                weekDetail += ', ';
            }
        }

        if (weekPatch.removedDates.length) {
            var _description = weekPatch.removedDates.map(function (date) {
                return date.slice(5);
            }).join(',');
            weekDetail += 'Removed Weeks: ' + _description;
        }

        if (weekPatch.addedDates.length || weekPatch.removedDates.length) {
            weekDetail += ' ) ';
        }

        this.Xhr({
            id: this.memberShareId,
            method: 'patch',
            resource: 'member-order',
            data: (0, _stringify2.default)({
                adjustment: this.views.sharePatch.getPatchData(),
                memberShareId: this.memberShareId,
                name: this.selectedCustomer.person.data.name,
                orderOptions: this.views.orderOptions.getPatchData(),
                previousBalance: this.views.sharePatch.balance,
                shareLabel: this.selectedShare.label,
                weekOptions: weekPatch.allRemoved,
                weekDetail: weekDetail,
                to: emailTo
            })
        }).then(function () {
            _this9.Toast.showMessage('success', 'Order Updated! You will receive a confirmation email shortly.');

            (0, _keys2.default)(_this9.views).forEach(function (key) {
                var view = _this9.views[key];
                if (view.els.editSummary && !view.isHidden(view.els.editSummary)) view.els.editSummary.classList.add('fd-hidden');
            });

            _this9.views.seasons.els.container.scrollIntoView({ behavior: 'smooth' });
            _this9.views.seasons.select(_this9.memberShareId);
        }).catch(function (e) {
            console.log(e.stack || e);
            _this9.Toast.showMessage('error', 'Update Failed. Please contact us for assistance.');
        });
    },
    populateAccountFields: function populateAccountFields() {
        var _this10 = this;

        this.views.personalInfo.clear();

        this.views.personalInfo.model.set('oldZipcode', this.selectedCustomer.member.data.zipcode || '');

        (0, _keys2.default)(this.selectedCustomer.person.data).forEach(function (key) {
            if (_this10.views.personalInfo.els[key]) _this10.views.personalInfo.els[key].value = _this10.selectedCustomer.person.data[key];
        });

        (0, _keys2.default)(this.selectedCustomer.member.data).forEach(function (key) {
            if (_this10.views.personalInfo.els[key]) _this10.views.personalInfo.els[key].value = _this10.selectedCustomer.member.data[key];
        });
    },
    postRender: function postRender() {
        var _this11 = this;

        this.Customer.get({ query: { email: this.user.get('email'), 'id': { operation: 'join', value: { table: 'member', column: 'personid' } } } }).then(function () {
            var customer = _this11.Customer.data[0];
            _this11.selectedCustomer = customer;

            _this11.views.orderOptions.hide();
            _this11.views.weekOptions.hide();
            _this11.views.sharePatch.reset();

            window.google && window.google.maps ? _this11.initAutocomplete() : window.initGMap = function () {
                return _this11.initAutocomplete();
            };

            _this11.views.seasons.on('selected', function (data) {
                _this11.views.sharePatch.reset();
                _this11.selectedShare = data.share;
                _this11.memberShareId = _this11.selectedShare.membershareid;

                _promise2.default.all([_this11.Delivery.get({
                    query: {
                        membershareid: data.share.membershareid,
                        deliveryoptionid: { operation: 'join', value: { table: 'deliveryoption', column: 'id' } },
                        groupdropoffid: { operation: 'leftJoin', value: { table: 'groupdropoff', column: 'id' } }
                    }
                }), _this11.Transactions.get({ query: { memberShareId: data.share.membershareid } })]).then(function () {
                    var balance = _this11.Transactions.getBalance();
                    _this11.views.seasons.updateBalanceNotice(balance);
                    _this11.views.sharePatch.balance = balance;
                    (0, _extends3.default)(data, { delivery: _this11.Delivery });

                    _this11.views.orderOptions.update((0, _extends3.default)({}, data, { isAdmin: false })).then(function () {
                        _this11.views.seasons.updateWeeklyPriceAndTotal(_this11.views.orderOptions.originalWeeklyPrice, _this11.selectedShare.label, _this11.views.weekOptions.getTotalDates());
                        _this11.views.sharePatch.setOriginalWeeklyPrice(_this11.views.orderOptions.originalWeeklyPrice, _this11.views.weekOptions.getTotalDates());
                    }).catch(_this11.Error);

                    _this11.views.weekOptions.update((0, _extends3.default)({}, data, { isAdmin: false })).then(function () {
                        return _this11.views.sharePatch.setWeeksAffected(_this11.views.weekOptions.getWeeksAffected());
                    }).catch(_this11.Error);
                });
            });

            _this11.views.seasons.on('payBalance', function () {
                _this11.views.sharePatch.reset();

                return _this11.hideEl(_this11.els.orderInfo).then(function () {
                    return _this11.views.accountPayments.show();
                }).then(function () {
                    return _this11.views.accountPayments.update(customer, _this11.selectedShare, _this11.memberShareId);
                }).catch(_this11.Error);
            });

            _this11.views.orderOptions.on('deliveryChanged', function (data) {
                _this11.views.sharePatch.setWeeksAffected(_this11.views.weekOptions.getWeeksAffected());
                _this11.views.sharePatch.onWeeksReset();
                _this11.views.weekOptions.updateDelivery(data);
            });

            _this11.views.orderOptions.on('reset', function (model) {
                _this11.views.weekOptions.update(model);
                _this11.views.sharePatch.reset();
            });

            _this11.views.weekOptions.on('reset', function (model) {
                return _this11.views.sharePatch.onWeeksReset();
            });

            _this11.views.orderOptions.on('adjustment', function (data) {
                return _this11.views.sharePatch.onOptionsUpdate(data);
            });
            _this11.views.weekOptions.on('adjustment', function (data) {
                return _this11.views.sharePatch.onWeekUpdate(data);
            });

            _this11.views.sharePatch.on('patchMemberShare', function () {
                return _this11.patchMemberShare();
            });
        });

        return this;
    },


    requiresLogin: true

});

},{"../../../models/AccountInfo":205,"../models/CsaTransaction":16,"../models/Customer":19,"../models/Delivery":21,"./__proto__":109,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],72:[function(require,module,exports){
'use strict';

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Customer: require('../models/Customer'),
    Transactions: require('../models/CsaTransaction'),

    Views: {
        creditCard: function creditCard() {
            return {
                model: (0, _create2.default)(this.Model).constructor({}, {
                    attributes: require('../../../models/CreditCard').attributes,
                    meta: {
                        noPlaceholder: true
                    },
                    resource: 'payment'
                }),
                templateOpts: function templateOpts() {
                    return {
                        prompt: 'Please enter your credit card information.'
                    };
                },

                toastSuccess: 'Thank you for your payment! You will receive an email receipt shortly.'
            };
        }
    },

    events: {
        views: {
            creditCard: [['posted', function () {
                this.views.seasons.select(this.memberShareId);
            }]]
        }
    },

    clear: function clear() {
        this.els.total.textContent = '';
        this.els.ccWrapper.classList.add('fd-hidden');
    },
    postRender: function postRender() {
        var _this = this;

        this.Customer.get({ query: { email: this.user.get('email'), 'id': { operation: 'join', value: { table: 'member', column: 'personid' } } } }).then(function () {
            var customer = _this.Customer.data[0];
            if (!customer) return;

            _this.views.creditCard.model.set('member', customer.member.data);
            _this.views.creditCard.model.set('person', customer.person.data);

            _this.selectedCustomer = customer;

            _this.views.seasons.on('selected', function (data) {
                _this.selectedShare = data.share;
                _this.memberShareId = _this.selectedShare.membershareid;
                _this.Transactions.get({ query: { memberShareId: _this.memberShareId } }).then(function () {
                    _this.views.creditCard.model.set('share', _this.selectedShare);

                    _this.balance = _this.Transactions.getBalance();
                    _this.views.creditCard.model.set('total', _this.balance);

                    _this.els.total.textContent = 'Remaining Balance: ' + _this.Currency.format(_this.balance);
                    _this.slideIn(_this.els.total, 'right');

                    _this.els.ccWrapper.classList.toggle('fd-hidden', _this.balance <= 0);
                    if (_this.balance > 0) _this.slideIn(_this.els.ccWrapper, 'right');
                }).catch(_this.Error);
            });

            _this.views.seasons.update(customer);
        }).catch(this.Error);

        return this;
    },
    update: function update(customer, share, memberShareId) {
        var _this2 = this;

        this.selectedCustomer = customer;
        return this.views.seasons.update(customer).then(function () {
            return _this2.views.seasons.select(memberShareId);
        }).catch(this.Error);
    }
});

},{"../../../models/CreditCard":206,"../models/CsaTransaction":16,"../models/Customer":19,"./__proto__":109,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/extends":246}],73:[function(require,module,exports){
'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends4.default)({}, require('./__proto__'), {

    Pikaday: require('pikaday'),

    Views: {
        buttonFlow: function buttonFlow() {
            return {
                model: (0, _create2.default)(this.Model).constructor({
                    disabled: true,
                    states: {
                        start: [{ name: 'addTransaction', class: 'save-btn', text: 'Add Transaction', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmAdd', class: 'save-btn', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', class: 'reset-btn', nextState: 'start', text: 'Cancel', emit: true }]
                    }
                })
            };
        }
    },

    addTransaction: function addTransaction() {
        var _this = this;

        return this.model.post((0, _extends4.default)({ memberShareId: this.memberShareId }, this.model.attributes.reduce(function (memo, attr) {
            return (0, _extends4.default)(memo, (0, _defineProperty3.default)({}, attr, attr === 'created' ? _this.Moment(_this.els[attr].value, 'MMM D, YYYY').format('YYYY-MM-DD') : _this.els[attr].value));
        }, {}))).then(function (response) {
            return _this.emit('transactionAdded', response);
        }).catch(function (e) {
            _this.Error(e);_this.Toast.showMessage('error', 'Error adding transaction');
        });
    },
    onAddBlur: function onAddBlur(e) {
        isNaN(parseFloat(this.els.value.value)) ? this.els.form.classList.remove('active') : this.views.buttonFlow.enable();
    },
    onAddFocus: function onAddFocus(e) {
        this.els.form.classList.add('active');
    },
    onCancel: function onCancel() {
        this.reset();
        this.views.buttonFlow.disable();
    },
    postRender: function postRender() {
        var _this2 = this;

        this.model.attributes.forEach(function (attr) {
            _this2.els[attr].addEventListener('focus', function (e) {
                return _this2.onAddFocus(e);
            });
            _this2.els[attr].addEventListener('blur', function (e) {
                return _this2.onAddBlur(e);
            });
        });

        this.created = new this.Pikaday({ field: this.els.created, format: 'MMM D, YYYY' });

        this.views.buttonFlow.on('confirmAddClicked', function (e) {
            return _this2.addTransaction();
        });
        this.views.buttonFlow.on('cancelClicked', function (e) {
            return _this2.onCancel();
        });

        return this;
    },
    reset: function reset() {
        var _this3 = this;

        var now = this.Moment().format('MMM D, YYYY');
        this.model.attributes.forEach(function (attr) {
            return _this3.els[attr].value = attr === 'action' ? _this3.model.actions[0] : attr === 'initiator' ? 'admin' : attr === 'created' ? now : '';
        });

        this.created.setMoment(now);
    },
    templateOpts: function templateOpts() {
        return { actions: this.model.actions };
    },
    update: function update(memberShareId) {
        this.memberShareId = memberShareId;
        this.reset();
    }
});

},{"./__proto__":109,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246,"pikaday":"pikaday"}],74:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    events: {
        'signoutBtn': 'click'
    },

    templateOpts: { logo: '/static/img/logo.gif' },

    insertionMethod: 'before',

    onUser: function onUser() {
        this.els.name.textContent = this.user.get('name');
        this.els.userPanel.classList.remove('hide');
    },


    requiresLogin: false,

    onSignoutBtnClick: function onSignoutBtnClick() {
        document.cookie = 'patchworkjwt=; domain=' + window.location.hostname + '; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        this.user.clear();

        this.user.set(this.user.defaults());

        this.els.name.textContent = '';
        this.els.userPanel.classList.add('hide');

        this.emit('signout');
    }

});

},{"./__proto__":109,"babel-runtime/helpers/extends":246}],75:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    events: {
        'collectionManagerBtn': 'click',
        'manageCustomerBtn': 'click',
        'reportingBtn': 'click',
        'weeklyReminderBtn': 'click'
    },

    model: {

        manageCustomer: { label: 'Manage Customers', roles: new _set2.default(['admin']), url: 'manage-customer' },

        collectionManager: {
            label: 'Collection Manager',
            roles: new _set2.default(['admin']),
            url: 'collection-manager'
        },

        reporting: { label: '~_~ Reporting ~_~', roles: new _set2.default(['admin']), url: 'reporting' },

        weeklyReminder: { label: 'Weekly Reminder', roles: new _set2.default(['admin']), url: 'weekly-reminder' }
    },

    onCollectionManagerBtnClick: function onCollectionManagerBtnClick() {
        this.emit('navigate', 'admin-plus/collection-manager');
    },
    onManageCustomerBtnClick: function onManageCustomerBtnClick() {
        this.emit('navigate', 'admin-plus/manage-customer');
    },
    onNavigation: function onNavigation(path) {
        var _this = this;

        this.path = path;

        var key = this.keys.find(function (key) {
            return _this.model[key].url === path[0];
        });

        if (key !== undefined) return this.showView(key);

        _promise2.default.all((0, _keys2.default)(this.model).map(function (key) {
            var view = _this.model[key].view;
            return view ? view.hide() : _promise2.default.resolve();
        })).then(function () {
            _this.currentEl = _this.els.nav;return _this.showEl(_this.els.nav);
        }).catch(this.Error);
    },
    onReportingBtnClick: function onReportingBtnClick() {
        this.emit('navigate', 'admin-plus/reporting');
    },
    onWeeklyReminderBtnClick: function onWeeklyReminderBtnClick() {
        this.emit('navigate', 'admin-plus/weekly-reminder');
    },
    postRender: function postRender() {
        var _this2 = this;

        this.keys = (0, _keys2.default)(this.model);

        this.keys.forEach(function (name, i) {
            if (_this2.user.get('roles').filter(function (role) {
                return _this2.model[name].roles.has(role);
            }).length) {
                _this2.slurpTemplate({ template: '<button data-js="' + name + 'Btn">' + _this2.model[name].label + '</button>', insertion: { el: _this2.els.nav } });
            }
        });

        this.currentEl = this.els.nav;

        if (this.path.length > 1) this.onNavigation(this.path.slice(1));

        return this;
    },
    showView: function showView(key) {
        var _this3 = this;

        return this.hideEl(this.currentEl).then(function () {
            _this3.model[key].view ? _this3.model[key].view.onNavigation(_this3.path.slice(1)) : _this3.model[key].view = _this3.factory.create(key, { insertion: { el: _this3.els.views }, path: _this3.path.slice(1) }).on('navigate', function (route, opts) {
                return _this3.emit('navigate', route, opts);
            });

            _this3.currentView = _this3.model[key].view;
            _this3.currentEl = _this3.model[key].view.getContainer();
            return _promise2.default.resolve();
        }).catch(this.Error);
    },


    requiresLogin: true,

    requiresRole: 'admin'

});

},{"./__proto__":109,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/core-js/set":240,"babel-runtime/helpers/extends":246}],76:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {
    disable: function disable() {
        var _this = this;

        (0, _keys2.default)(this.model.data.states).forEach(function (stateName) {
            return _this.model.data.states[stateName].forEach(function (button) {
                var el = _this.els[button.name];
                el.removeEventListener('click', button.clickListener);
                el.classList.add('disabled');
            });
        });
    },
    enable: function enable() {
        var _this2 = this;

        (0, _keys2.default)(this.model.data.states).forEach(function (stateName) {
            return _this2.model.data.states[stateName].forEach(function (button) {
                var el = _this2.els[button.name];
                el.addEventListener('click', button.clickListener);
                el.classList.remove('disabled');
            });
        });
    },
    getListener: function getListener(name, button) {
        var _this3 = this;

        return function (e) {
            if (button.nextState) e.fdNextState = _this3.onNextState(button.nextState);
            if (button.emit) _this3.emit(name + 'Clicked', e);
        };
    },
    onNextState: function onNextState(newState) {
        var _this4 = this;

        return this.hideEl(this.els[this.state]).then(function () {
            _this4.showEl(_this4.els[newState]);
            return _promise2.default.resolve(_this4.state = newState);
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this5 = this;

        this.state = 'start';

        (0, _keys2.default)(this.model.data.states).forEach(function (stateName) {
            return _this5.model.data.states[stateName].forEach(function (button) {
                var el = _this5.els[button.name];
                button.clickListener = _this5.getListener(button.name, button);
                if (!_this5.model.disabled) {
                    el.addEventListener('click', button.clickListener);
                }
            });
        });

        return this;
    }
});

},{"./__proto__":109,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],77:[function(require,module,exports){
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _isNan = require('babel-runtime/core-js/number/is-nan');

var _isNan2 = _interopRequireDefault(_isNan);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    model: require('../models/CollectionManager'),

    Collection: require('../models/Collection'),
    DocumentModel: require('../models/Document'),

    Templates: {
        Document: require('./templates/Document')
    },

    Views: {
        collections: function collections() {
            return {
                events: {
                    list: 'click'
                },
                model: (0, _create2.default)(this.Model).constructor({
                    collection: (0, _create2.default)(this.Collection),
                    delete: false,
                    fetch: true
                }),
                itemTemplate: function itemTemplate(collection) {
                    return '<span>' + (collection.label || collection.name) + '</span>';
                },
                templateOpts: { heading: 'Collections', name: 'Collections', toggle: true }
            };
        },


        /*createCollection() {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create( this.Collection ).constructor(),
                templateOpts: { heading: 'Create Collection' }
            }
        },
         deleteCollection( model ) {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create( this.Collection ).constructor( model ),
                templateOpts: { message: `Delete "${model.name}" Collection?` }
            }
        },*/

        deleteDocument: function deleteDocument(document) {
            var collectionName = this.model.git('currentCollection'),
                collection = this.views.collections.collection.store.name[collectionName],
                meta = this.model.meta[collectionName] || {},
                schema = collection.schema;

            return {
                insertion: { el: this.els.mainPanel },
                model: (0, _create2.default)(this.DocumentModel).constructor(document, {
                    meta: { key: collection.key },
                    resource: collectionName
                }),
                templateOpts: { message: '<div><span>Delete </span>' + this.getDisplayValue(meta, document, schema) + '<span> from ' + collectionName + '?</span></div>' },
                toastSuccess: 'Item deleted.'
            };
        },
        documentList: function documentList() {
            var _this = this;

            var collectionName = this.model.git('currentCollection'),
                collection = this.views.collections.collection.store.name[collectionName],
                meta = this.model.meta[collectionName] || {},
                schema = collection.schema;

            return {
                model: (0, _create2.default)(this.Model).constructor((0, _extends3.default)({
                    add: true,
                    collection: (0, _create2.default)(this.DocumentModel).constructor([], {
                        meta: { key: collection.key },
                        resource: collectionName
                    }),
                    delete: true,
                    pageSize: 100,
                    skip: 0,
                    sort: { 'label': 1 },
                    scrollPagination: true
                }, meta)),
                events: { list: 'click' },
                insertion: { el: this.els.mainPanel },
                itemTemplate: function itemTemplate(datum) {
                    return _this.getDisplayValue(meta, datum, schema);
                }
            };
        },
        documentView: function documentView(model) {
            return {
                disallowEnterKeySubmission: true,
                insertion: { el: this.els.mainPanel },
                model: model,
                templateOpts: function templateOpts() {
                    return (0, _extends3.default)({ heading: model.heading }, model.meta.templateOptions);
                },

                Views: {
                    typeAhead: {
                        Type: 'Document',
                        templateOpts: { hideSearch: true }
                    }
                }
            };
        }
    },

    events: {
        createCollectionBtn: 'click',
        backBtn: 'click',
        resource: 'click',

        views: {
            collections: [['deleteClicked', function (collection) {
                var _this2 = this;

                this.clearCurrentView().then(function () {
                    return _promise2.default.resolve(_this2.createView('deleter', 'deleteCollection', collection));
                }).catch(this.Error);
            }], ['fetched', function () {
                this.views.collections.hideItems([this.model.git('currentCollection')]);
            }], ['itemClicked', function (model) {
                var _this3 = this;

                this.clearCurrentView().then(function () {
                    return _promise2.default.resolve(_this3.model.set('currentCollection', model.name));
                }).catch(this.Error);
            }], ['successfulDrop', function (data) {
                this.swapDocument({ document: data.dropped, to: data.droppedOn.name, from: this.model.git('currentCollection') }).catch(this.toastError.bind(this));
            }]],
            /*createCollection: [
                [ 'deleted', function() { this.model.set( 'currentView', 'documentList' ) } ],
                [ 'posted', function( collection ) { this.views.collections.add( collection ) } ]
            ],
            deleteCollection: [
                [ 'deleted', function() { this.model.set('currentView', 'documentList' ) } ],
                [ 'modelDeleted', function( model ) { this.views.collections.remove( model ) } ]
            ],*/
            deleteDocument: [['deleted', function () {
                this.model.set('currentView', 'documentList');
            }], ['modelDeleted', function (model) {
                var _this4 = this;

                this.views.documentList.remove(model);
                this.views.documentList.getCount().then(function (count) {
                    return _this4.updateCount(count);
                }).catch(this.Error);
            }]],
            documentList: [['addClicked', function () {
                var _this5 = this;

                this.clearCurrentView().then(function () {
                    return _promise2.default.resolve(_this5.createView('form', 'documentView', _this5.createDocumentModel()));
                }).catch(this.Error);
            }], ['itemClicked', function (document) {
                this.onDocumentSelected(document);
            }],
            //[ 'dragStart', function( type ) { this.views.collections.showDroppable( type ) } ],
            //[ 'dropped', function( data ) { this.views.collections.hideDroppable(); this.views.collections.checkDrop( data ) } ],
            ['deleteClicked', function (document) {
                var _this6 = this;

                this.clearCurrentView().then(function () {
                    _this6.createView('deleter', 'deleteDocument', document);
                    return _promise2.default.resolve(window.scrollTo(0, 0));
                }).catch(this.Error);
            }]],
            documentView: [['deleted', function (model) {
                this.model.set('currentView', 'documentList');
            }], ['put', function (model) {
                var _this7 = this;

                if (this.views.documentList.fetched) this.views.documentList.updateItem(this.createDocumentModel(model));
                this.clearCurrentView().then(function () {
                    return _promise2.default.resolve(_this7.model.set('currentView', 'documentList'));
                }).catch(this.Catch);
            }], ['posted', function (model) {
                var _this8 = this;

                if (this.views.documentList.fetched) this.views.documentList.add(model, true);
                this.clearCurrentView().then(function () {
                    return _promise2.default.resolve(_this8.model.set('currentView', 'documentList'));
                }).catch(this.Catch);
            }]]

        }
    },

    cachedTables: ['deliveryoption', 'deliveryroute', 'groupdropoff', 'producefamily', 'seasonalAddOn', 'share', 'shareoption'],

    clearCurrentView: function clearCurrentView() {
        var currentView = this.model.git('currentView');

        return currentView !== 'documentList' ? this.views[currentView].delete({ silent: true }) : this.views[currentView].hide();
    },
    createDocumentList: function createDocumentList(collectionName) {
        var _this9 = this;

        var fetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        this.createView('list', 'documentList');
        this.views.documentList.getCount().then(function (count) {
            return _this9.updateCount(count);
        }).catch(this.Error);
        return this.views.collections.unhideItems().hideItems([this.model.git('currentCollection')]);
    },
    createDocumentModel: function createDocumentModel() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var collectionName = this.model.git('currentCollection'),
            collection = this.views.collections.collection.store.name[collectionName],
            meta = (0, _extends3.default)(this.model.meta[collectionName] || {}, { noPlaceholder: true, key: collection.key });

        var schema = this.model.git('currentCollection') === 'Pages' ? collection[data.name] : collection.schema;

        schema.attributes.forEach(function (attr) {
            if (attr.range === 'Geography' && data[attr.name] && !Array.isArray(data[attr.name])) data[attr.name] = JSON.parse(data[attr.name]).coordinates;
            if (attr.fk) {
                if (!meta.validate) meta.validate = {};
                meta.validate[attr.columnName] = function (val) {
                    return val !== undefined;
                };
                attr.error = attr.fk + ' is a required field.';
            }
            if (meta.validate && meta.validate[attr.name || attr.columnName]) attr.validate = meta.validate[attr.name || attr.columnName];
        });

        return (0, _create2.default)(this.Model).constructor(data, (0, _extends3.default)({
            meta: meta,
            resource: collectionName,
            heading: this.getDisplayValue(meta, data, schema)
        }, schema));
    },
    createView: function createView(type, name, model) {
        var _this10 = this;

        this.views[name] = this.factory.create(type, (0, _apply2.default)(this.Views[name], this, [model]));

        if (this.events.views[name]) this.events.views[name].forEach(function (arr) {
            return _this10.views[name].on(arr[0], function (eventData) {
                return (0, _apply2.default)(arr[1], _this10, [eventData]);
            });
        });
        this.model.set('currentView', name);
    },
    getDisplayValue: function getDisplayValue(meta, datum, schema) {
        var _this11 = this;

        if (!(0, _keys2.default)(datum).length) return '<div>New ' + this.model.git('currentCollection') + '</div>';
        if (this.Templates[meta.displayAttr]) return this.Templates[meta.displayAttr](datum);

        var value = void 0;

        if (meta.displayAttr) {
            value = meta.displayAttr.map(function (attr) {
                var fkColumn = schema.attributes.find(function (schemaAttr) {
                    return schemaAttr.fk === attr;
                });

                if (fkColumn) {
                    if (!_this11[attr].store.id[datum[fkColumn.columnName]]) return 'No ' + fkColumn.fk + ' value chosen';
                    return _this11[attr].store.id[datum[fkColumn.columnName]].label || _this11[attr].store.id[datum[fkColumn.columnName]].name;
                }

                return attr === 'createdAt' ? _this11.Format.Moment.utc(datum[meta.displayAttr]).format('YYYY-MM-DD hh:mm:ss') : datum[attr];
            }).join(' -- ');
        } else {
            value = datum.label || datum.name;
        }

        return '<div><span>' + value + '</span></div>';
    },
    getDocument: function getDocument(collection, value) {
        var query = (0, _isNan2.default)(+value) ? { name: value } : { id: value };

        return (0, _create2.default)(this.Model).constructor({}, { resource: collection }).get({ query: query }).then(function (document) {
            return _promise2.default.resolve(document.length === 1 ? document[0] : document);
        });
    },
    onBackBtnClick: function onBackBtnClick() {
        this.emit('navigate', '/admin-plus');
    },
    onCreateCollectionBtnClick: function onCreateCollectionBtnClick() {
        var _this12 = this;

        this.clearCurrentView().then(function () {
            return _promise2.default.resolve(_this12.createView('form', 'createCollection'));
        }).catch(this.Error);
    },
    onDocumentSelected: function onDocumentSelected(document) {
        var _this13 = this;

        return this.clearCurrentView().then(function () {
            return _promise2.default.resolve(_this13.showDocumentView(document));
        }).catch(this.Error);
    },
    onNavigation: function onNavigation(path) {
        var _this14 = this;

        this.path = path;

        (this.isHidden() ? this.show() : _promise2.default.resolve()).then(function () {
            return _this14.clearCurrentView();
        }).then(function () {
            return _this14.showProperView(false);
        }).catch(this.Error);
    },
    onResourceClick: function onResourceClick() {
        var _this15 = this;

        if (this.model.git('currentView') === 'documentList') return;

        this.clearCurrentView().then(function () {
            return _promise2.default.resolve(_this15.model.set('currentView', 'documentList'));
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this16 = this;

        if (this.path.length > 0) this.model.set('currentCollection', this.path[0]);

        this.model.on('currentCollectionChanged', function () {
            return _this16.views.documentList.delete({ silent: true }).then(function () {
                return _this16.createDocumentList(_this16.model.git('currentCollection'));
            }).catch(_this16.Error);
        });

        this.model.on('currentViewChanged', function () {
            var currentView = _this16.model.git('currentView'),
                currentCollection = _this16.model.git('currentCollection'),
                path = currentView === 'documentView' ? '/' + currentCollection + '/' + (_this16.views.documentView.model.git('name') || _this16.views.documentView.model.git('id') || 'new-item') : currentView === 'documentList' ? '/' + currentCollection : '';

            _this16.emit('navigate', '/admin-plus/collection-manager' + path, { silent: true });

            (currentView === 'documentList' && _this16.views.documentList.collection.data.length === 0 ? _this16.views.documentList.fetch() : _promise2.default.resolve()).then(function () {
                return _this16.views[currentView].show();
            }).catch(_this16.Error);
        });

        _promise2.default.all(this.cachedTables.map(function (name) {
            _this16[name] = (0, _create2.default)(_this16.Model).constructor({}, { resource: name });
            return _this16[name].get({ storeBy: ['id'] });
        })).then(function () {
            return _this16.showProperView(true);
        }).catch(this.Error);

        return this;
    },
    showDocumentView: function showDocumentView(document) {
        this.createView('form', 'documentView', this.createDocumentModel(document));
    },
    showProperView: function showProperView() {
        var _this17 = this;

        var path = this.path;

        if (path.length && path[0] !== this.model.git('currentCollection')) return _promise2.default.resolve(this.model.set('currentCollection', path[0]));

        return (this.views.documentList ? _promise2.default.resolve() : this.createDocumentList(this.model.git('currentCollection'), this.path.length === 2 ? false : true)).then(function () {
            return path.length === 2 && path[1] !== 'new-item' ? _this17.getDocument(path[0], path[1]).then(function (document) {
                return Array.isArray(document) ? _promise2.default.resolve(_this17.model.set('currentView', 'documentList')) : _this17.clearCurrentView().then(function () {
                    return _promise2.default.resolve(_this17.showDocumentView(document, false));
                }).catch(_this17.Error);
            }) : _promise2.default.resolve(_this17.model.git('currentView') === 'documentList' ? '' : _this17.model.set('currentView', 'documentList'));
        }).catch(this.Error);
    },
    swapDocument: function swapDocument(_ref) {
        var _this18 = this;

        var document = _ref.document,
            to = _ref.to,
            from = _ref.from;

        return this.Xhr({ method: 'PATCH', resource: 'Document', id: document._id, data: (0, _stringify2.default)({ to: to, from: from }) }).then(function () {
            return _promise2.default.resolve(_this18.views.documentList.remove(document));
        });
    },
    toastError: function toastError(e) {
        this.Error(e);
        this.Toast.showMessage('error', 'Something went wrong. Please try again or contact Chris.');
    },
    updateCount: function updateCount(count) {
        var collection = this.views.collections.collection.store.name[this.model.git('currentCollection')];
        this.els.resource.textContent = (collection.label || collection.name) + ' (' + count + ')';
    }
});

},{"../models/Collection":12,"../models/CollectionManager":13,"../models/Document":24,"./__proto__":109,"./templates/Document":146,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/number/is-nan":224,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/core-js/reflect/apply":237,"babel-runtime/helpers/extends":246}],78:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CustomContent = require('./util/CustomContent');

module.exports = (0, _extends3.default)({}, require('./__proto__'), CustomContent, {

    tables: [{ name: 'contactinfo', el: 'contactInfo', template: 'contact' }],

    templates: {
        contact: require('./templates/Location')
    }

});

},{"./__proto__":109,"./templates/Location":163,"./util/CustomContent":198,"babel-runtime/helpers/extends":246}],79:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), require('./util/CustomContent'), {

    CurrentShare: require('../models/CurrentShare'),
    Shares: (0, _create2.default)(require('../models/__proto__'), { resource: { value: 'CsaPageShare' } }),
    ShareOptions: (0, _create2.default)(require('../models/__proto__'), { resource: { value: 'shareoption' } }),

    events: {
        signupBtn: 'click'
    },

    hashToElement: {
        'how-do-i-know': 'howDoIKnow'
    },

    insertAddOnDescriptions: function insertAddOnDescriptions() {
        var _this = this;

        this.ShareOptions.data.filter(function (opt) {
            return opt.name !== 'Share size';
        }).forEach(function (shareOpt) {
            var addOnInfo = _this.CurrentShare.data.produceOptions.find(function (produceOpt) {
                return produceOpt.shareoptionid === shareOpt.id && produceOpt.name === 'one';
            });

            _this.slurpTemplate({
                template: _this.templates.csaItem((0, _extends3.default)(addOnInfo, { heading: shareOpt.name })),
                insertion: { el: _this.els.addOnItems }
            });
        });
    },
    insertDeliveryMatrix: function insertDeliveryMatrix() {
        this.slurpTemplate({
            template: this.templates.deliveryMatrix({
                deliveryOptions: this.CurrentShare.data.deliveryOptions,
                sizeOptions: this.CurrentShare.getSizeOptions()
            }),
            insertion: { el: this.els.deliveryMatrix }
        });
    },
    insertShareDescription: function insertShareDescription(share) {
        var deliveryOpts = this.CurrentShare.data.deliveryOptions,
            sharePrice = parseFloat(this.CurrentShare.data.produceOptions.find(function (opt) {
            return opt.prompt = 'Share size' && share.name === opt.name;
        }).price.replace('$', '')),
            lowPrice = sharePrice + parseFloat(this.CurrentShare.data.deliveryOptions[0].price.replace('$', '')),
            highPrice = sharePrice + parseFloat(this.CurrentShare.data.deliveryOptions[this.CurrentShare.data.deliveryOptions.length - 1].price.replace('$', '')),
            priceRange = '$' + lowPrice.toFixed(2) + ' - $' + highPrice.toFixed(2);

        this.slurpTemplate({
            template: this.templates.csaItem((0, _extends3.default)(share.shareDescription, { price: priceRange })),
            insertion: { el: this.els.shareDescriptions }
        });
    },
    insertShareExample: function insertShareExample(share) {
        this.slurpTemplate({
            template: this.templates.shareExample(share.shareExample),
            insertion: { el: this.els.shareExamples }
        });
    },
    onSignupBtnClick: function onSignupBtnClick() {
        this.emit('navigate', 'sign-up');
    },
    postRender: function postRender() {
        var _this2 = this;

        require('./util/CustomContent').postRender.call(this);

        if (window.location.hash) {
            this.els[this.hashToElement[window.location.hash.slice(1)]].scrollIntoView({ behavior: 'smooth' });
        }

        _promise2.default.all([this.CurrentShare.get(), this.Shares.get(), this.ShareOptions.get()]).then(function () {
            _this2.insertDeliveryMatrix();

            _this2.Shares.data.forEach(function (share) {
                _this2.insertShareExample(share);
                _this2.insertShareDescription(share);
            });

            _this2.insertAddOnDescriptions();
        }).catch(this.Error);

        return this;
    },


    templates: {
        csaItem: require('./templates/CsaItem'),
        deliveryMatrix: require('./templates/deliveryMatrix'),
        shareExample: require('./templates/ShareExample')
    }

});

},{"../models/CurrentShare":18,"../models/__proto__":44,"./__proto__":109,"./templates/CsaItem":140,"./templates/ShareExample":177,"./templates/deliveryMatrix":186,"./util/CustomContent":198,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],80:[function(require,module,exports){
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    MemberFoodOmission: require('../models/MemberFoodOmission'),

    clear: function clear() {
        var _this = this;

        this.fields.forEach(function (field) {
            if (field.type === 'text') _this.els[field.name].textContent = '';
        });

        this.els.infoTable.querySelectorAll('.edited').forEach(function (el) {
            return el.classList.remove('edited');
        });

        this.FoodOmission.clear();

        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');
    },


    events: {
        resetBtn: 'click',
        saveBtn: 'click'
    },

    fields: [{ table: 'person', type: 'text', name: 'name', label: 'Name' }, { table: 'person', type: 'text', name: 'email', label: 'Email' }, { table: 'person', type: 'text', name: 'secondaryEmail', label: 'Secondary Email' }, { table: 'person', type: 'select', name: 'emailVerified', label: 'Email Verified' }, { table: 'member', type: 'text', name: 'phonenumber', label: 'Phone' }, { table: 'member', type: 'text', name: 'zipcode', label: 'Zip Code' }, { table: 'member', type: 'text', name: 'address', label: 'Address' }, { table: 'memberFoodOmission', type: 'magicSuggest', name: 'neverReceive', label: 'Opt-out Vegetable' }, { table: 'member', type: 'select', name: 'onpaymentplan', label: 'On Payment Plan' }],

    getTemplateOptions: function getTemplateOptions() {
        var isAdmin = window.location.pathname.indexOf('admin') !== -1;
        if (!isAdmin) this.fields.pop();
        return { fields: this.fields, isAdmin: isAdmin };
    },
    handleBlur: function handleBlur(e) {
        var el = e.target,
            field = this.fields.find(function (field) {
            return field.name === el.getAttribute('data-name');
        }),
            fieldValue = el.textContent.trim(),
            modelValue = this.model[field.table].data[field.name] || '';

        if (fieldValue !== modelValue) {
            el.classList.add('edited');
            this.editedFields[field.name] = fieldValue || null;
            this.showEditSummary();
            this.emit('edited');
        } else if (this.editedFields[field.name] !== undefined) {
            el.classList.remove('edited');
            this.editedFields[field.name] = undefined;
            this.showEditSummary();
        }
    },
    handleChange: function handleChange(e) {
        var el = e.target,
            field = this.fields.find(function (field) {
            return field.name === el.getAttribute('data-name');
        }),
            fieldValue = Boolean(el.value === "true"),
            modelValue = this.model[field.table].data[field.name];

        if (modelValue !== fieldValue) {
            el.classList.add('edited');
            this.editedFields[field.name] = Boolean(el.value === "true");
            this.emit('edited');
            this.showEditSummary();
        } else if (this.editedFields[field.name] !== undefined) {
            el.classList.remove('edited');
            this.editedFields[field.name] = undefined;
            this.showEditSummary();
        }
    },
    handleEdit: function handleEdit(e) {
        this.els.resetBtn.classList.remove('fd-hidden');
    },
    handleOmissionChange: function handleOmissionChange(e, m) {
        var values = m.val(),
            name = values.length ? m.val()[0].name : '',
            originalName = this.MemberFoodOmission.data.length ? this.MemberFoodOmission.data[0].name : '';

        if (originalName !== name) {
            this.editedFields.neverReceive = name;
            this.emit('edited');
            this.showEditSummary();
        } else if (this.editedFields.neverReceive !== undefined) {
            this.editedFields.neverReceive = undefined;
            this.showEditSummary();
        }
    },
    hasEdits: function hasEdits() {
        var _this2 = this;

        return (0, _keys2.default)(this.editedFields).filter(function (key) {
            return _this2.editedFields[key] !== undefined;
        }).length > 0;
    },
    onResetBtnClick: function onResetBtnClick() {
        this.reset(this.model);
    },
    onSaveBtnClick: function onSaveBtnClick() {
        var _this3 = this;

        var resourcesToUpdate = [];

        this.memberData = {};
        this.personData = {};
        this.memberFoodOmissionData = {};

        this.fields.forEach(function (field) {
            if (_this3.editedFields[field.name] !== undefined) {
                _this3[field.table + 'Data'][field.name] = _this3.editedFields[field.name];
                if (resourcesToUpdate.indexOf(field.table) === -1) resourcesToUpdate.push(field.table);
            }
        });

        return _promise2.default.all(resourcesToUpdate.map(function (resource) {
            return _this3['update' + (resource.charAt(0).toUpperCase() + resource.slice(1))]();
        })).then(function () {
            _this3.els.resetBtn.classList.add('fd-hidden');
            _this3.els.editSummary.classList.add('fd-hidden');

            _this3.Toast.showMessage('success', 'Customer Info Updated!');
            _this3.update(_this3.model);
        }).catch(this.Error);
    },
    populateTable: function populateTable() {
        var _this4 = this;

        this.fields.forEach(function (field) {
            if (field.type === 'text') return _this4.els[field.name].textContent = _this4.model[field.table].data[field.name];else if (field.name !== 'neverReceive') _this4.els[field.name].selectedIndex = _this4.model[field.table].data[field.name] ? 0 : 1;
        });

        if (this.MemberFoodOmission.data.length) {
            var datum = this.MemberFoodOmission.data[0],
                index = this.FoodOmission.Foods.data.findIndex(function (food) {
                return food.produceid == datum.produceid && food.produceid !== null || food.producefamilyid == datum.producefamilyid && datum.produceid === null;
            });

            if (index !== -1) {
                var foodDatum = this.FoodOmission.Foods.data[index];
                datum.name = foodDatum.name;
                this.FoodOmission.ms.setSelection([(0, _extends3.default)({}, foodDatum, { id: index })]);
            }
        }
    },
    postRender: function postRender() {
        var _this5 = this;

        this.FoodOmission = this.factory.create('foodOmission', { insertion: { el: this.els.neverReceive, method: 'after' } });

        this.els.neverReceive.remove();

        this.FoodOmission.initializeFoodOmission().then(function () {
            _this5.FoodOmission.removeHelperText();
            _this5.FoodOmission.unstyle();

            _this5.FoodOmission.on('selectionChange', function (e, m) {
                return _this5.handleOmissionChange(e, m);
            });
        });

        [].concat((0, _toConsumableArray3.default)(this.els.infoTable.querySelectorAll('div[contenteditable=true]'))).forEach(function (el) {
            return el.addEventListener('blur', function (e) {
                return _this5.handleBlur(e);
            });
        });

        [].concat((0, _toConsumableArray3.default)(this.els.infoTable.querySelectorAll('select'))).forEach(function (el) {
            return el.addEventListener('change', function (e) {
                return _this5.handleChange(e);
            });
        });

        this.on('edited', function (e) {
            return _this5.handleEdit(e);
        });

        return this;
    },
    reset: function reset(customer) {
        this.els.resetBtn.classList.add('fd-hidden');
        this.update(customer);
    },
    showEditSummary: function showEditSummary() {
        var _this6 = this;

        var hasEdits = this.hasEdits();

        this.els.changes.innerHTML = '';

        this.fields.forEach(function (field) {
            if (_this6.editedFields[field.name] !== undefined) {
                var oldValue = field.name === 'neverReceive' ? _this6.MemberFoodOmission.data.length ? _this6.MemberFoodOmission.data[0].name : '' : _this6.model[field.table].data[field.name];
                var newValue = _this6.editedFields[field.name];

                if (!oldValue && field.type !== 'select') oldValue = 'EMPTY';
                if (!newValue && field.type !== 'select') newValue = 'EMPTY';

                if (field.type === 'select') {
                    oldValue = oldValue.toString();
                    newValue = newValue.toString();
                }

                if (oldValue === 'EMPTY' && newValue === 'EMPTY') return;

                _this6.slurpTemplate({ insertion: { el: _this6.els.changes }, template: _this6.Templates.fieldEdit({ label: field.label, oldValue: oldValue, newValue: newValue }) });
            }
        });

        this.els.resetBtn.classList.toggle('fd-hidden', !hasEdits);

        if (!this.isHidden(this.els.editSummary) && hasEdits) return;

        this['slide' + (hasEdits ? 'In' : 'Out')](this.els.editSummary, 'right');
    },


    Templates: {
        fieldEdit: require('./templates/FieldEdit')
    },

    update: function update(customer) {
        var _this7 = this;

        this.clear();

        this.model = customer;
        this.editedFields = {};

        return this.MemberFoodOmission.get({ query: { memberid: customer.member.data.id } }).then(function () {
            return _this7.populateTable();
        }).then(function () {
            return _this7.show();
        }).catch(this.Error);
    },
    updateMember: function updateMember() {
        var _this8 = this;

        return this.Xhr({ method: 'PATCH', id: this.model.member.data.id, resource: 'member', data: (0, _stringify2.default)(this.memberData) }).then(function () {
            return _promise2.default.resolve((0, _keys2.default)(_this8.memberData).forEach(function (field) {
                return _this8.model.member.data[field] = _this8.memberData[field];
            }));
        });
    },
    updateMemberFoodOmission: function updateMemberFoodOmission() {
        var _this9 = this;

        var foodIdx = this.FoodOmission.Foods.data.findIndex(function (datum) {
            return datum.name == _this9.memberFoodOmissionData.neverReceive;
        });

        if (foodIdx === -1) return this.MemberFoodOmission.delete(this.MemberFoodOmission.data[0].id);

        var msData = this.FoodOmission.Foods.data[foodIdx],
            data = { memberid: this.model.member.data.id, produceid: msData.produceid, producefamilyid: msData.produceid ? null : msData.producefamilyid };

        return this.MemberFoodOmission.data.length ? this.MemberFoodOmission.patch(this.MemberFoodOmission.data[0].id, data) : this.MemberFoodOmission.post(data);
    },
    updatePerson: function updatePerson() {
        var _this10 = this;

        return this.Xhr({ method: 'PATCH', id: this.model.person.data.id, resource: 'person', data: (0, _stringify2.default)(this.personData) }).then(function () {
            return _promise2.default.resolve((0, _keys2.default)(_this10.personData).forEach(function (field) {
                return _this10.model.person.data[field] = _this10.personData[field];
            }));
        });
    }
});

},{"../models/MemberFoodOmission":31,"./__proto__":109,"./templates/FieldEdit":151,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246,"babel-runtime/helpers/toConsumableArray":248}],81:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), require('./Submitter'), {

    events: {
        cancelBtn: 'click',
        submitBtn: 'click'
    },

    onCancelBtnClick: function onCancelBtnClick() {
        this.delete();
    },
    onSubmitBtnClick: function onSubmitBtnClick() {
        var _this = this;

        if (this.submitting) return;
        this.onSubmitStart();
        this.submit().then(function () {
            return _promise2.default.resolve(_this.onSubmitEnd());
        }).then(function () {
            return _this.delete();
        }).catch(function (e) {
            return _this.handleSubmissionError(e);
        });
    },
    submit: function submit() {
        var _this2 = this;

        return this.model.deleteByKey().then(function (keyValue) {
            _this2.emit('modelDeleted', _this2.model.data);
            _this2.Toast.showMessage('success', _this2.toastSuccess || 'Success');
            return _promise2.default.resolve();
        });
    }
});

},{"./Submitter":102,"./__proto__":109,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],82:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _create2.default)((0, _extends3.default)({}, require('./__proto__'), {

    Icons: {
        error: require('./templates/lib/error')(),
        success: require('./templates/lib/checkmark')()
    },

    bindEvents: function bindEvents() {
        document.body.addEventListener('mousedown', this.onMouseDown);
        document.body.addEventListener('mouseup', this.onMouseUp);
        document.body.addEventListener('mousemove', this.onMouseMove);
    },
    listen: function listen() {
        this.listeners++;

        if (this.listeners === 1) this.bindEvents();
    },


    name: 'Dragger',

    postRender: function postRender() {
        var _this = this;

        this.listeners = 0;

        this.onMouseDown = function (e) {
            return _this.emit('mousedown', e);
        };
        this.onMouseUp = function (e) {
            return _this.emit('mouseup', e);
        };
        this.onMouseMove = function (e) {
            return _this.emit('mousemove', e);
        };

        return this;
    },
    stopListening: function stopListening() {
        this.listeners--;

        if (this.listeners === 0) this.unbindEvents();
    },


    template: require('./templates/Dragger'),

    unbindEvents: function unbindEvents() {
        document.body.removeEventListener('mousedown', this.onMouseDown);
        document.body.removeEventListener('mouseup', this.onMouseUp);
        document.body.removeEventListener('mousemove', this.onMouseMove);
    }
}), {}).constructor();

},{"./__proto__":109,"./templates/Dragger":147,"./templates/lib/checkmark":188,"./templates/lib/error":190,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/extends":246}],83:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    $: require('jquery'),

    Foods: require('../models/Food'),

    clear: function clear() {
        this.ms.clear();
    },
    getMagicSuggest: function getMagicSuggest() {
        return this.ms;
    },
    initializeFoodOmission: function initializeFoodOmission() {
        var _this = this;

        return this.Foods.get().then(function () {
            if (!_this.Foods.data.length) return _promise2.default.resolve();

            var data = _this.Foods.data.map(function (food, i) {
                return (0, _extends3.default)({ id: i }, food);
            }),
                renderer = function renderer(data) {
                return data.produceid ? '<span class="' + (data.producefamilyid ? 'produce-in-family' : '') + '">' + data.name + '</span>' : '<span class="produce-family">All ' + data.name + '</span>';
            };

            _this.ms = _this.$(_this.els.container).magicSuggest({
                allowFreeEntries: false,
                data: data,
                highlight: false,
                placeholder: '',
                maxDropHeight: 200,
                maxSelection: 1,
                renderer: renderer,
                selectionRenderer: renderer,
                valueField: 'id'
            });

            _this.ms.val = function (value) {
                return value ? _this.ms.setSelection(value) : _this.ms.getSelection();
            };

            _this.$(_this.ms).on('selectionchange', function (e, m) {
                return _this.emit('selectionChange', e, m);
            });

            return _promise2.default.resolve();
        }).catch(this.Error);
    },
    removeHelperText: function removeHelperText() {
        this.ms.helper[0].remove();
    },
    setPlaceholder: function setPlaceholder(text) {
        this.ms.input.attr('placeholder', text);
    },
    unstyle: function unstyle() {
        this.ms.container.removeClass('form-control');
    }
});

},{"../models/Food":28,"./__proto__":109,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246,"jquery":"jquery"}],84:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {});

},{"./__proto__":109,"babel-runtime/helpers/extends":246}],85:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Submitter = require('./Submitter');

module.exports = (0, _extends3.default)({}, require('./__proto__'), Submitter, {

    Flatpickr: require('flatpickr'),

    events: (0, _extends3.default)(Submitter.events, { form: 'submit', previewBtn: 'click' }),

    onPreviewBtnClick: function onPreviewBtnClick(e) {
        e.target.nextElementSibling.src = this.Format.ImageSrc(e.target.parentElement.previousElementSibling.value);
    },
    clear: function clear() {
        var _this = this;

        this.inputEls.forEach(function (el) {
            return el.value = '';
        });

        if (this.views) {
            (0, _keys2.default)(this.views).forEach(function (key) {
                var view = _this.views[key];

                if (view.itemViews) {
                    view.itemViews.forEach(function (itemView) {
                        if (itemView.name !== 'Form') return;
                        itemView.clear();
                    });
                } else {
                    if (view.name !== 'Form') return;
                    view.clear();
                }
            });
        }
    },
    getElementValue: function getElementValue(el, attribute) {
        if (attribute === undefined || !attribute.fk && attribute.range && typeof attribute.range === 'string') return el.value;
    },
    getFormValues: function getFormValues() {
        var _this2 = this;

        var attributes = this.model.attributes;

        var data = this.reducer((0, _keys2.default)(this.els), function (key) {
            return (/(INPUT|SELECT|TEXTAREA)/.test(_this2.els[key].tagName) ? (0, _defineProperty3.default)({}, key, _this2.getElementValue(_this2.els[key], attributes.find(function (attribute) {
                    return attribute.name === key;
                }))) : {}
            );
        });

        attributes.forEach(function (attribute) {
            if (attribute.fk) {
                data[attribute.columnName] = _this2.views[attribute.fk].getSelectedId();
            } else if (attribute.range === 'Geography') {
                data[attribute.name] = (0, _from2.default)(_this2.els[attribute.name].querySelectorAll('input')).map(function (el) {
                    return el.value;
                });
            } else if ((0, _typeof3.default)(attribute.range) === "object") {
                data[attribute.name] = _this2.views[attribute.name].getFormValues();
            } else if (attribute.range === "List") {
                data[attribute.name] = (0, _from2.default)(_this2.views[attribute.name].els.list.children).map(function (itemEl) {
                    var selector = attribute.itemRange === 'Text' ? '.item textarea' : '.item input';
                    return _this2.getElementValue(itemEl.querySelector(selector), { range: attribute.itemRange });
                });
            }
        });

        return data;
    },
    handleValidationError: function handleValidationError(attr) {
        var inputEl = attr.fk ? this.views[attr.fk].els.input : this.els[attr.name];
        this.Toast.showMessage('error', attr.error);
        inputEl.classList.add('error');
        this.onSubmitEnd();
    },
    initTypeAheads: function initTypeAheads() {
        var _this3 = this;

        this.model.attributes.forEach(function (attribute) {
            if (attribute.fk) _this3.views[attribute.fk].setResource(attribute.fk).initAutoComplete(_this3.model.git(attribute.columnName));else if (attribute.range === 'Time') {
                var flatpickr = _this3.Flatpickr(_this3.els[attribute.name], {
                    enableTime: true,
                    noCalendar: true,
                    dateFormat: "H:i"
                });
            } else if (attribute.range === 'Date') {
                var _flatpickr = _this3.Flatpickr(_this3.els[attribute.name], {});
            } else if ((0, _typeof3.default)(attribute.range) === "object") {
                _this3.Views[attribute.name] = {
                    disallowEnterKeySubmission: true,
                    model: (0, _create2.default)(_this3.Model).constructor(_this3.model.data[attribute.name], {
                        meta: (0, _extends3.default)({ isNested: !_this3.model.meta.isNested }, _this3.model.meta),
                        attributes: attribute.range
                    }),
                    templateOpts: { hideButtonRow: true },
                    Views: {}
                };
                var el = _this3.els[attribute.name];
                delete _this3.els[attribute.name];
                _this3.subviewElements = [{ el: el, view: 'form', name: attribute.name }];
                _this3.renderSubviews();
            } else if (attribute.range === "List") {
                var collectionData = _this3.model.git(attribute.name) ? _this3.model.git(attribute.name).map(function (datum) {
                    return { value: datum };
                }) : [];

                _this3.Views[attribute.name] = {
                    model: (0, _create2.default)(_this3.model).constructor({
                        add: true,
                        collection: (0, _create2.default)(_this3.Model).constructor(collectionData, { meta: { key: 'value' } }),
                        delete: true,
                        isDocumentList: false,
                        draggable: 'listItem'
                    }),
                    itemTemplate: function itemTemplate(datum) {
                        return (0, _apply2.default)(_this3.Format.GetFormField, _this3.Format, [{ range: attribute.itemRange }, datum.value, _this3.model.meta]);
                    }
                };
                var _el = _this3.els[attribute.name];
                delete _this3.els[attribute.name];
                _this3.subviewElements = [{ el: _el, view: 'list', name: attribute.name }];
                _this3.renderSubviews();
                _this3.views[attribute.name].on('addClicked', function () {
                    return _this3.views[attribute.name].add({ value: '' });
                });
                _this3.views[attribute.name].on('deleteClicked', function (datum) {
                    return _this3.views[attribute.name].remove(datum);
                });
            }
        });
    },
    onFormSubmit: function onFormSubmit(e) {
        e.preventDefault();
    },
    postRender: function postRender() {
        var _this4 = this;

        if (this.model.meta.isNested && this.els.container.closest('.form-group')) this.els.container.closest('.form-group').classList.add('vertical');
        this.inputEls = this.els.container.querySelectorAll('input, select, textarea');

        if (!this.disallowEnterKeySubmission) this.els.container.addEventListener('keyup', function (e) {
            if (e.keyCode === 13) _this4.onSubmitBtnClick();
        });

        this.inputEls.forEach(function (el) {
            return el.addEventListener('focus', function () {
                return el.classList.remove('error');
            });
        });

        if (this.model) {
            this.model.on('validationError', function (attr) {
                return _this4.handleValidationError(attr);
            });
            this.initTypeAheads();
            this.key = this.model.meta ? this.model.meta.key : '_id';
        }

        return this;
    },
    submit: function submit() {
        var _this5 = this;

        if (!this.validate(this.getFormValues())) return _promise2.default.resolve(this.onSubmitEnd());

        var method = !Boolean(this.model.data[this.key]) ? 'post' : this.key === 'id' ? 'patch' : 'put';

        return (method === 'post' ? this.model.post() : this.model[method](this.model.data[this.key], this.omit(this.model.data, [this.key]))).then(function () {
            _this5.emit(method === 'post' ? 'posted' : 'put', (0, _extends3.default)({}, _this5.model.data));
            _this5.model.data = {};
            _this5.clear();
            _this5.Toast.showMessage('success', _this5.toastSuccess || 'Success');
            return _promise2.default.resolve();
        });
    },
    validate: function validate(data) {
        var _this6 = this;

        var valid = true;

        if (!this.model.validate(data)) valid = false;

        if (this.views) {
            (0, _keys2.default)(this.views).forEach(function (key) {
                var view = _this6.views[key];

                if (view.itemViews) {
                    view.itemViews.forEach(function (itemView) {
                        if (itemView.name !== 'Form') return;
                        if (!itemView.validate(itemView.getFormValues())) valid = false;
                    });
                } else {
                    if (view.name !== 'Form') return;
                    if (!view.validate(view.getFormValues())) valid = false;
                }
            });
        }

        return valid;
    }
});

},{"./Submitter":102,"./__proto__":109,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/core-js/reflect/apply":237,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246,"babel-runtime/helpers/typeof":249,"flatpickr":430}],86:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CustomContent = require('./util/CustomContent');

module.exports = (0, _extends3.default)({}, require('./__proto__'), CustomContent, {});

},{"./__proto__":109,"./util/CustomContent":198,"babel-runtime/helpers/extends":246}],87:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Nav: require('../models/Nav'),

    events: {
        accountBtn: 'click',
        csaSignUpBtn: 'click',
        justify: 'click',
        navLinks: 'click',
        signInBtn: 'click',
        signOutBtn: 'click',
        title: 'click',
        userName: 'click'
    },

    checkForLogin: function checkForLogin() {
        if (this.displayingLogin) {
            this.displayingLogin = false;this.emit('removeLogin');
        }
    },
    onAccountBtnClick: function onAccountBtnClick() {
        this.toggleAccountMenu();
        this.emit('navigate', 'account-home');
    },
    onCsaSignUpBtnClick: function onCsaSignUpBtnClick() {
        this.checkForLogin();
        this.emit('navigate', 'sign-up');
    },
    onJustifyClick: function onJustifyClick() {
        this.els.navLinks.classList.toggle('is-mobile');
    },
    onLogin: function onLogin() {
        this.onUser();
        this.displayingLogin = false;
        this.toggleAccountUI();
        return _promise2.default.resolve();
    },
    onNavLinksClick: function onNavLinksClick(e) {
        this.checkForLogin();
        var el = e.target.closest('li');

        if (!el) return;

        this.emit('navigate', el.getAttribute('data-name'));
        if (this.els.navLinks.classList.contains('is-mobile')) this.els.navLinks.classList.remove('is-mobile');
    },
    onSignInBtnClick: function onSignInBtnClick() {
        if (this.displayingLogin) return;
        this.emit('signInClicked');
        this.displayingLogin = true;
    },
    onSignOutBtnClick: function onSignOutBtnClick() {
        document.cookie = 'patchworkjwt=; domain=' + window.location.hostname + '; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';

        this.user.clear();

        this.user.set(this.user.defaults());

        this.toggleAccountUI();
        this.toggleAccountMenu();

        this.emit('signOutClicked');

        this.Toast.showMessage('success', 'You are now signed out.');
    },
    onTitleClick: function onTitleClick() {
        this.checkForLogin();
        this.emit('navigate', '/');
    },
    onUser: function onUser() {
        this.els.userName.textContent = 'Hello, ' + this.user.get('name');
    },
    onUserNameClick: function onUserNameClick() {
        this.toggleAccountMenu();
    },
    postRender: function postRender() {
        var _this = this;

        this.on('imgLoaded', function () {
            return _this.els.nav.classList.remove('fd-hidden');
        });

        this.toggleAccountUI();

        if (this.user.isLoggedIn()) this.onUser();

        return this;
    },
    templateOpts: function templateOpts() {
        return { fields: this.Nav.data, home: { label: 'Patchwork Gardens', name: 'home' } };
    },
    toggleAccountUI: function toggleAccountUI() {
        this.els.signInBtn.classList.toggle('fd-hidden', this.user.isLoggedIn());
        this.els.memberMenu.classList.toggle('fd-hidden', !this.user || !this.user.id);
    },
    toggleAccountMenu: function toggleAccountMenu() {
        this.els.accountMenu.classList.toggle('fd-hidden', !this.els.accountMenu.classList.contains('fd-hidden'));
    },
    toggleSignUpBtn: function toggleSignUpBtn(view) {
        this.els.csaSignUpBtn.parentNode.classList.toggle('fd-hidden', view === 'home');
    }
});

},{"../models/Nav":35,"./__proto__":109,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],88:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CustomContent = require('./util/CustomContent');

module.exports = (0, _extends3.default)({}, require('./__proto__'), CustomContent, {

    events: {
        joinBtn: 'click'
    },

    onJoinBtnClick: function onJoinBtnClick() {
        this.emit('navigate', 'sign-up');
    },
    postRender: function postRender() {
        var _this = this;

        this.on('imgLoaded', function () {
            return _this.els.container.classList.add('img-loaded');
        });

        return CustomContent.postRender.call(this);
    }
});

},{"./__proto__":109,"./util/CustomContent":198,"babel-runtime/helpers/extends":246}],89:[function(require,module,exports){
'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Super = require('./__proto__');

module.exports = (0, _extends3.default)({}, Super, {
    add: function add(datum) {
        var _this = this;

        var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!this.collection) this.collection = (0, _create2.default)(this.Model);

        var keyValue = datum[this.key];
        var insertion = { el: this.els.list };

        this.collection.add(datum);
        this.collection.store[this.key][keyValue] = datum;

        if (sort && this.collection.data.length !== 1) {
            this.collection.sort(this.model.git('sort'));
            var index = this.collection.data.findIndex(function (datum) {
                return datum[_this.key] == keyValue;
            });

            if (index !== -1) insertion = this.els.list.children.item(index) ? { method: 'insertBefore', el: this.els.list.children.item(index) } : { el: this.els.list };
        }

        this.updateStyle();

        if (this.itemTemplate) {
            this.slurpTemplate({
                insertion: insertion,
                renderSubviews: true,
                template: this.getItemTemplateResult(keyValue, datum)
            });

            //this.els.list.querySelector(`*[data-key="${keyValue}"]`).scrollIntoView( { behavior: 'smooth' } )

            return;
        }

        this.itemViews[keyValue] = this.factory.create(this.model.git('view'), { insertion: insertion, model: (0, _create2.default)(this.collection.model).constructor(datum) }).on('deleted', function () {
            return _this.onDeleted(datum);
        });

        this.itemViews[keyValue].els.container.scrollIntoView({ behavior: 'smooth' });
    },
    checkDrag: function checkDrag(e) {
        if (!this.dragging) return;

        e.preventDefault();

        this.Dragger.els.container.classList.remove('fd-hidden');
        this.Dragger.els.container.style.top = e.clientY + 5 + 'px';
        this.Dragger.els.container.style.left = e.clientX + 5 + 'px';

        if (this.model.git('draggable') !== 'listItem') return;

        var listItemRectangles = (0, _from2.default)(this.els.list.children).map(function (item) {
            return { el: item, rectangle: item.getBoundingClientRect() };
        }),
            matchingItem = listItemRectangles.find(function (item) {
            return item.rectangle.right >= e.clientX && item.rectangle.left <= e.clientX && item.rectangle.bottom >= e.clientY && item.rectangle.top <= e.clientY;
        });

        if (!matchingItem || !matchingItem && this.dragoverEl || matchingItem && this.dragoverEl && matchingItem.el.isSameNode(this.dragging.el)) {
            if (this.dragoverEl) this.dragoverEl.classList.remove('dragover-top', 'dragover-bottom');
            this.dragoverEl = undefined;
            return;
        }

        if (matchingItem && !matchingItem.el.isSameNode(this.dragging.el)) {
            if (this.dragoverEl) this.dragoverEl.classList.remove('dragover-top', 'dragover-bottom');
            this.dragoverEl = matchingItem.el;
            var itemRect = matchingItem.el.querySelector('.item').getBoundingClientRect();

            if (e.clientY < itemRect.bottom - itemRect.height / 2) {
                if (this.dragoverEl.previousSibling && this.dragoverEl.previousSibling.isSameNode(this.dragging.el)) return;
                this.dragoverEl.classList.add('dragover-top');
            } else {
                if (this.dragoverEl.nextSibling && this.dragoverEl.nextSibling.isSameNode(this.dragging.el)) return;
                this.dragoverEl.classList.add('dragover-bottom');
            }
        }
    },
    checkDragEnd: function checkDragEnd(e) {
        if (!this.dragging) return;

        if (this.dragoverEl) {
            this.els.list.insertBefore(this.dragging.el, this.dragoverEl.classList.contains('dragover-top') ? this.dragoverEl : this.dragoverEl.nextSibling);
            this.dragoverEl.classList.remove('dragover-top', 'dragover-bottom');
            this.dragoverEl = undefined;
        }

        this.emit('dropped', { e: e, type: this.model.git('draggable'), model: this.dragging.model });
        this.dragging.el.classList.remove('is-dragging');
        this.els.list.classList.remove('is-dragging');
        this.Dragger.els.container.classList.add('fd-hidden');
        this.dragging = false;
    },
    checkDragStart: function checkDragStart(e) {
        var closestList = e.target.closest('.List');
        if (closestList === null || !closestList.isSameNode(this.els.container)) return;

        var el = e.target.closest('.item');
        if (!el) return null;

        var model = this.collection.store[this.key][el.parentNode.getAttribute('data-key')];

        this.dragging = { el: el.parentNode, model: model };
        this.dragging.el.classList.add('is-dragging');
        this.els.list.classList.add('is-dragging');
        if (model && model.label) this.Dragger.els.container.textContent = 'Move ' + model.label + '.';
        this.emit('dragStart', this.model.git('draggable'));
    },
    checkDrop: function checkDrop(_ref) {
        var e = _ref.e,
            type = _ref.type,
            model = _ref.model;

        if (this.model.git('droppable') !== type) return;

        var el = e.target.closest('.item');

        if (!el) return;

        var localModel = this.collection.store[this.key][el.parentNode.getAttribute('data-key')];

        if (!localModel) return;

        this.emit('successfulDrop', { dropped: model, droppedOn: localModel });
    },
    fetch: function fetch() {
        var _this2 = this;

        var nextPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        this.fetching = true;
        if (nextPage) this.model.set('skip', this.model.git('skip') + this.model.git('pageSize'));

        var query = this.key === 'id' ? {} : { skip: this.model.git('skip'), limit: this.model.git('pageSize'), sort: this.model.git('sort') };

        return this.collection.get({ query: query }).then(function (newData) {
            _this2.populateList(newData);
            _this2.fetched = true;
            _this2.fetching = false;
            _this2.emit('fetched');
            if (newData.length == 0 && nextPage) _this2.els.list.removeEventListener('scroll', _this2.onScrollPagination);
            return _promise2.default.resolve();
        });
    },
    getCount: function getCount() {
        var _this3 = this;

        return this.collection.getCount().then(function () {
            return _promise2.default.resolve(_this3.collection.meta.count);
        }).catch(this.Error);
    },
    getItemTemplateResult: function getItemTemplateResult(keyValue, datum) {
        var buttonsOnRight = this.model.git('delete') ? '<div class="buttons">' + this.deleteIcon + '</div>' : '',
            selection = this.toggleSelection ? '<div class="selection"><input data-js="checkbox" type="checkbox" /></div>' : '';

        return '' + ('<li data-key="' + keyValue + '">\n            ' + selection + '\n            <div class="item">' + this.itemTemplate(datum) + '</div>\n            ' + buttonsOnRight + '\n        </li>');
    },
    hide: function hide() {
        if (this.els.resetBtn) this.els.resetBtn.classList.add('fd-hidden');
        if (this.els.saveBtn) this.els.saveBtn.classList.add('fd-hidden');
        return (0, _apply2.default)(Super.hide, this, []);
    },
    hideItems: function hideItems(keys) {
        var _this4 = this;

        return _promise2.default.all(keys.map(function (key) {
            var el = _this4.els.list.querySelector('li[data-key="' + key + '"]');
            return el ? _this4.hideEl(el) : _promise2.default.resolve();
        })).catch(this.Error);
    },
    hideList: function hideList() {
        var _this5 = this;

        return this.hideEl(this.els.list).then(function () {
            return _promise2.default.resolve(_this5.els.toggle.classList.add('is-hidden'));
        }).catch(this.Error);
    },
    initializeDragDrop: function initializeDragDrop() {
        var _this6 = this;

        this.Dragger.on('mousedown', function (e) {
            return _this6.checkDragStart(e);
        });
        this.Dragger.on('mouseup', function (e) {
            return _this6.checkDragEnd(e);
        });
        this.Dragger.on('mousemove', function (e) {
            return _this6.checkDrag(e);
        });
        this.Dragger.listen();
    },
    initializeScrollPagination: function initializeScrollPagination() {
        var _this7 = this;

        var listEl = this.els.list;

        this.onScrollPagination = function (e) {
            if (_this7.fetching) return;
            if (_this7.scrollHeight - (listEl.scrollTop + _this7.offsetHeight) < 100) window.requestAnimationFrame(function () {
                return _this7.fetch(true).catch(_this7.Error);
            });
        };

        listEl.addEventListener('scroll', this.onScrollPagination);
    },
    empty: function empty() {
        this.els.list.innerHTML = '';
    },


    events: {
        addBtn: 'click',
        checkbox: 'change',
        goBackBtn: 'click',
        resetBtn: 'click',
        saveBtn: 'click',
        toggle: 'click'
    },

    getListItemKey: function getListItemKey(e) {
        var el = e.target.closest('.item');

        if (!el) return null;

        return this.collection.store[this.key][el.parentNode.getAttribute('data-key')];
    },
    hideDroppable: function hideDroppable() {
        this.els.list.classList.remove('is-droppable');
        (0, _from2.default)(this.els.list.children).forEach(function (child) {
            return child.removeChild(child.lastChild);
        });
    },
    onAddBtnClick: function onAddBtnClick(e) {
        this.collection.model ? this.add(this.collection.model.CreateDefault()) : this.emit('addClicked');
    },
    onCheckboxChange: function onCheckboxChange(e) {
        var el = e.target.closest('LI');

        if (!el) return false;

        var model = this.collection.store[this.key][el.getAttribute('data-key')];
        event = 'toggled' + (e.target.checked ? 'On' : 'Off');

        if (!model) return;

        el.classList.toggle('checked', e.target.checked);

        this.emit(event, model);
    },
    onGoBackBtnClick: function onGoBackBtnClick(e) {
        this.emit('goBackClicked');
    },
    onItemMouseenter: function onItemMouseenter(e) {
        e.target.classList.add('mouseover');
    },
    onItemMouseleave: function onItemMouseleave(e) {
        e.target.classList.remove('mouseover');
    },
    onListClick: function onListClick(e) {
        var model = this.getListItemKey(e);

        if (!model) return;

        this.emit('itemClicked', model);
    },
    onListDblclick: function onListDblclick(e) {
        var model = this.getListItemKey(e);

        if (!model) return;

        this.emit('itemDblClicked', model);
    },
    onResetBtnClick: function onResetBtnClick() {
        this.emit('resetClicked');
    },
    onSaveBtnClick: function onSaveBtnClick() {
        var _this8 = this;

        if (this.model.git('view')) {
            this.emit('saveClicked', (0, _keys2.default)(this.itemViews).map(function (key) {
                return _this8.itemViews[key].getProposedModel();
            }));
        }
    },
    onToggleClick: function onToggleClick() {
        this.els.list.classList.contains('fd-hidden') ? this.showList() : this.hideList();
    },
    populateList: function populateList(data) {
        var _this9 = this;

        data = data || this.collection.data;

        if (!Array.isArray(data)) data = [data];

        this.updateStyle();

        if (data.length === 0) return;

        if (this.model.git('view')) {
            var viewName = this.model.git('view');
            var fragment = data.reduce(function (fragment, datum) {
                var keyValue = datum[_this9.key];

                _this9.collection.store[_this9.key][keyValue] = datum;

                _this9.itemViews[keyValue] = _this9.factory.create(viewName, { model: (0, _create2.default)(_this9.collection.model).constructor(datum), storeFragment: true }).on('deleted', function () {
                    return _this9.onDeleted(datum);
                });

                while (_this9.itemViews[keyValue].fragment.firstChild) {
                    fragment.appendChild(_this9.itemViews[keyValue].fragment.firstChild);
                }return fragment;
            }, document.createDocumentFragment());

            this.els.list.appendChild(fragment);
        } else {
            this.slurpTemplate({
                insertion: { el: this.els.list },
                renderSubviews: true,
                template: data.reduce(function (memo, datum) {
                    var keyValue = datum[_this9.key];
                    _this9.collection.store[_this9.key][keyValue] = datum;
                    return memo + _this9.getItemTemplateResult(keyValue, datum);
                }, '')
            });

            if (this.model.git('scrollPagination')) {
                this.scrollHeight = this.els.list.scrollHeight;this.offsetHeight = this.els.list.offsetHeight;
            }
        }
    },
    postRender: function postRender() {
        var _this10 = this;

        this.collection = this.model.git('collection') || (0, _create2.default)(this.Model);
        this.key = this.collection.meta.key;

        if (this.collection) this.collection.store = (0, _defineProperty3.default)({}, this.key, {});

        if (this.model.git('delete')) {
            this.deleteIcon = this.Format.GetIcon('garbage');
            this.els.list.addEventListener('click', function (e) {
                var target = e.target;
                if (target.tagName === 'svg' && target.classList.contains('garbage')) {
                    _this10.emit('deleteClicked', _this10.collection.store[_this10.key][target.closest('LI').getAttribute('data-key')]);
                }
            });
        }

        if (this.model.git('fetch')) this.fetch().catch(this.Error);

        if (this.model.git('scrollPagination')) this.initializeScrollPagination();

        this.updateStyle();

        if (this.collection.data.length) this.populateList();

        if (this.model.git('draggable')) this.initializeDragDrop();

        return this;
    },
    remove: function remove(datum) {
        this.collection.remove(datum);

        this.updateStyle();

        if (this.model.git('view')) {
            delete this.itemViews[datum[this.key]];
        } else {
            var child = this.els.list.querySelector('[data-key="' + datum[this.key] + '"]');

            if (child) this.els.list.removeChild(child);
        }

        return this;
    },
    show: function show() {
        if (this.els.resetBtn) this.els.resetBtn.classList.remove('fd-hidden');
        if (this.els.saveBtn) this.els.saveBtn.classList.remove('fd-hidden');
        return (0, _apply2.default)(Super.show, this, []);
    },
    showList: function showList() {
        var _this11 = this;

        return this.showEl(this.els.list).then(function () {
            return _promise2.default.resolve(_this11.els.toggle.classList.remove('is-hidden'));
        }).catch(this.Error);
    },
    showDroppable: function showDroppable(type) {
        var _this12 = this;

        this.els.list.classList.add('is-droppable');
        (0, _from2.default)(this.els.list.children).forEach(function (child) {
            _this12.bindEvent('item', 'mouseenter', child);
            _this12.bindEvent('item', 'mouseleave', child);
            child.appendChild(_this12.htmlToFragment('<div class="drag">Drag here to move ' + type + '</div>'));
        });
    },
    unhideItems: function unhideItems() {
        var _this13 = this;

        _promise2.default.all((0, _from2.default)(this.els.list.querySelectorAll('li.fd-hidden')).map(function (el) {
            return _this13.showEl(el);
        })).catch(this.Error);

        return this;
    },
    update: function update(items) {
        this.collection.constructor(items, { storeBy: [this.key] });

        if (this.itemTemplate) return this.removeChildren(this.els.list).populateList();

        this.empty();

        (0, _extends3.default)(this, { itemViews: {} }).populateList();

        //window.scroll( { behavior: 'smooth', top: this.els.container.getBoundingClientRect().top + window.pageYOffset - 50 } )
        this.els.container.scrollIntoView({ behavior: 'smooth' });

        return this;
    },
    updateItem: function updateItem(model) {
        var keyValue = model.git(this.key);

        this.collection._put(keyValue, model.data);

        if (!this.model.git('view')) {
            var oldItem = this.els.list.querySelector('*[data-key="' + keyValue + '"]');
            this.slurpTemplate({
                insertion: { method: 'insertBefore', el: oldItem },
                renderSubviews: true,
                template: this.getItemTemplateResult(keyValue, model.data)
            });
            this.els.list.removeChild(oldItem);
        }
    },
    updateStyle: function updateStyle() {
        this.els.list.classList.toggle('no-items', this.collection.data.length === 0);
    }
});

},{"./__proto__":109,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/core-js/reflect/apply":237,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246}],90:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CustomContent = require('./util/CustomContent');

module.exports = (0, _extends3.default)({}, require('./__proto__'), CustomContent, {

    events: {
        legend: 'click',
        signupBtn: 'click'
    },

    model: require('../models/Locations'),

    models: {
        groupLocation: require('../models/CurrentGroups'),
        farmerMarket: require('../models/FarmerMarket'),
        retailOutlet: require('../models/RetailOutlet'),
        restaurant: require('../models/Restaurant'),
        farmPickup: require('../models/FarmPickup')
    },

    templates: {
        infoWindow: require('./templates/InfoWindow'),
        location: require('./templates/Location')
    },

    createDeliveryRange: function createDeliveryRange() {
        var overlayColor = this.model.attributes.find(function (attr) {
            return attr.name === 'deliveryRange';
        }).color;

        this.deliveryRange = new google.maps.Polygon({
            paths: this.model.data.deliveryRangeCoords,
            strokeColor: overlayColor,
            strokeOpacity: .3,
            strokeWeight: 1,
            fillColor: overlayColor,
            fillOpacity: .3,
            clickable: false
        });

        this.deliveryRange.setMap(this.map);
    },
    createMarkers: function createMarkers(data, category) {
        var _this = this;

        this.icons[category] = this.getIcon(category);
        this.markers[category] = [];

        data.forEach(function (datum) {
            if (!datum.location) return;

            var infowindow = new google.maps.InfoWindow({
                content: _this.templates.infoWindow(datum)
            });

            var marker = new google.maps.Marker({
                position: { lat: datum.location[0], lng: datum.location[1] },
                map: _this.map,
                draggable: false,
                icon: _this.icons[category],
                title: datum.name
            });

            _this.markers[category].push(marker);

            marker.addListener('click', function () {
                return infowindow.open(_this.map, marker);
            });
        });
    },
    fetchAndRender: function fetchAndRender() {
        var _this2 = this;

        var chain = _promise2.default.resolve();

        return _promise2.default.all((0, _keys2.default)(this.models).map(function (name) {
            chain = chain.then(function () {
                return _this2.models[name].get().then(function () {
                    return name === 'farmPickup' ? _this2.models.farmPickup.getHours() : _promise2.default.resolve();
                }).then(function () {
                    var modelAttr = _this2.model.attributes.find(function (attr) {
                        return attr.name === name;
                    }),
                        data = _this2.models[name].data;

                    _this2.insertListLocations(data, _this2.els[modelAttr.el]);
                    _this2.createMarkers(data, name);

                    return _promise2.default.resolve();
                }).catch(function (e) {
                    return _promise2.default.resolve(console.log('Failed to retrieve ' + name + ' data.'));
                });
            });
        }));
    },
    getIcon: function getIcon(category) {
        if (category === 'farmPickup') return '/static/img/favicon.png';

        var color = this.model.attributes.find(function (attr) {
            return category === attr.name;
        }).color;

        return {
            path: google.maps.SymbolPath.CIRCLE,
            strokeColor: color,
            fillColor: color,
            fillOpacity: 1,
            scale: 4
        };
    },
    initMap: function initMap() {
        var mapOpts = {
            center: { lat: 39.758948, lng: -84.191607 },
            zoom: 10,
            mapTypeControl: false
        };

        this.map = new google.maps.Map(this.els.map, mapOpts);

        this.markers = {};
        this.icons = {};

        this.createDeliveryRange();

        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(this.els.legend);
    },
    insertListLocations: function insertListLocations(data, el) {
        var _this3 = this;

        data.forEach(function (datum) {
            return _this3.slurpTemplate({
                template: _this3.templates.location(datum),
                insertion: { el: el }
            });
        });
    },
    onLegendClick: function onLegendClick(e) {
        if (e.target.tagName !== "INPUT") return;

        var category = e.target.getAttribute('data-name'),
            checked = e.target.checked;

        if (category === 'deliveryRange') return this.toggleDeliveryRange(checked);

        this.toggleMarkerCategory(category, checked);
    },
    onNavigation: function onNavigation() {
        return this.show().then(function () {
            return window.scrollTo(0, 0);
        }).catch(this.Error);
    },
    onSignupBtnClick: function onSignupBtnClick() {
        this.emit('navigate', 'sign-up');
    },
    postRender: function postRender() {
        if (window.google) {
            this.initMap();
        } else {
            window.initGMap = this.initMap;
        }

        this.fetchAndRender();

        return CustomContent.postRender.call(this);
    },
    templateOpts: function templateOpts() {
        return { categories: this.model.attributes };
    },
    toggleDeliveryRange: function toggleDeliveryRange(checked) {
        this.deliveryRange.setMap(checked ? this.map : null);
    },
    toggleMarkerCategory: function toggleMarkerCategory(category, checked) {
        var _this4 = this;

        this.markers[category].forEach(function (marker) {
            return marker.setMap(checked ? _this4.map : null);
        });
    }
});

},{"../models/CurrentGroups":17,"../models/FarmPickup":26,"../models/FarmerMarket":27,"../models/Locations":29,"../models/Restaurant":38,"../models/RetailOutlet":39,"./__proto__":109,"./templates/InfoWindow":161,"./templates/Location":163,"./util/CustomContent":198,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],91:[function(require,module,exports){
'use strict';

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Views: {
        loginForm: function loginForm() {
            return {
                handleSubmissionError: function handleSubmissionError(err) {
                    this.emit('loginError', err);
                    this.Error(err);
                    this.onSubmitEnd();
                },

                model: (0, _create2.default)(this.Model).constructor({}, {
                    attributes: require('../../../models/Login').attributes,
                    resource: 'auth'
                }),
                templateOpts: function templateOpts() {
                    return {
                        heading: 'Sign In'
                    };
                },
                onCancelBtnClick: function onCancelBtnClick() {
                    this.emit('cancel');
                },

                toastSuccess: 'You are signed in!'
            };
        },
        forgotPassword: function forgotPassword() {
            return {
                model: (0, _create2.default)(this.Model).constructor({}, {
                    attributes: [require('../../../models/Email')],
                    resource: 'reset-password'
                }),
                templateOpts: function templateOpts() {
                    return {
                        heading: 'Reset Password',
                        prompt: 'Please enter your email address'
                    };
                },
                onCancelBtnClick: function onCancelBtnClick() {
                    this.emit('cancel');
                }
            };
        }
    },

    events: {
        forgotPassword: 'click',

        views: {
            loginForm: [['posted', function (data) {
                this.user.set(data);
                this.emit("success", data);
                this.delete().catch(this.Error);
            }], ['loginError', function (err) {
                this.els.errorMessage.textContent = err;
                this.slideIn(this.els.errorMessage, 'right');
            }], ['cancel', function () {
                var _this = this;

                this.delete().then(function () {
                    return _this.emit('loginCancelled');
                }).catch(this.Error);
            }]],
            forgotPassword: [['posted', function (data) {
                this.Toast.showMessage('success', data.message);
            }], ['cancel', function () {
                var _this2 = this;

                this.views.forgotPassword.hide().then(function () {
                    return _this2.showEl(_this2.els.loginWrapper);
                }).catch(this.Error);
            }]]
        }
    },

    onForgotPasswordClick: function onForgotPasswordClick() {
        var _this3 = this;

        return this.hideEl(this.els.loginWrapper).then(function () {
            return _this3.views.forgotPassword.show();
        }).catch(this.Error);
    }
});

},{"../../../models/Email":207,"../../../models/Login":208,"./__proto__":109,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/extends":246}],92:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Customer: require('../models/Customer'),
    Delivery: require('../models/Delivery'),

    events: {
        customerLoginBtn: 'click'
    },

    patchMemberShare: function patchMemberShare() {
        var _this = this;

        var weekPatch = this.views.weekOptions.getPatchData();

        var weekDetail = '',
            emailTo = [this.selectedCustomer.person.data.email];

        if (this.selectedCustomer.person.data.secondaryEmail) emailTo.push(this.selectedCustomer.person.data.secondaryEmail);

        if (weekPatch.addedDates.length || weekPatch.removedDates.length) {
            weekDetail += ' ( ';
        }

        if (weekPatch.addedDates.length) {
            var description = weekPatch.addedDates.map(function (date) {
                return date.slice(5);
            }).join(',');
            weekDetail += 'Added Weeks: ' + description;
            if (weekPatch.removedDates.length) {
                weekDetail += ', ';
            }
        }

        if (weekPatch.removedDates.length) {
            var _description = weekPatch.removedDates.map(function (date) {
                return date.slice(5);
            }).join(',');
            weekDetail += 'Removed Weeks: ' + _description;
        }

        if (weekPatch.addedDates.length || weekPatch.removedDates.length) {
            weekDetail += ' ) ';
        }

        this.Xhr({
            id: this.memberShareId,
            method: 'patch',
            resource: 'member-order',
            data: (0, _stringify2.default)({
                adjustment: this.views.sharePatch.getPatchData(),
                memberShareId: this.memberShareId,
                name: this.selectedCustomer.person.data.name,
                orderOptions: this.views.orderOptions.getPatchData(),
                previousBalance: this.views.sharePatch.balance,
                shareLabel: this.selectedShare.label,
                weekOptions: weekPatch.allRemoved,
                weekDetail: weekDetail,
                to: emailTo
            })
        }).then(function () {
            _this.Toast.showMessage('success', 'Order Updated');
            _this.views.seasons.select(_this.memberShareId);
        }).catch(function (e) {
            console.log(e.stack || e);
            _this.Toast.showMessage('error', 'Update Failed');
        });
    },
    onCustomerLoginBtnClick: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            var data;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return this.Xhr({ method: 'PATCH', resource: 'customer-login', data: (0, _stringify2.default)({ customerId: this.selectedCustomer.person.data.id }) });

                        case 3:
                            data = _context.sent;

                            this.user.set(data);
                            this.user.trigger('loginAsCustomer');
                            _context.next = 11;
                            break;

                        case 8:
                            _context.prev = 8;
                            _context.t0 = _context['catch'](0);
                            this.Error(_context.t0);
                        case 11:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0, 8]]);
        }));

        function onCustomerLoginBtnClick() {
            return _ref.apply(this, arguments);
        }

        return onCustomerLoginBtnClick;
    }(),
    postRender: function postRender() {
        var _this2 = this;

        this.views.memberTypeahead.focus();

        this.views.memberTypeahead.on('customerSelected', function (customer) {
            _this2.views.seasons.views.orderDeleteButtonFlow.hideSync();
            _this2.selectedCustomer = customer;
            _this2.views.customerInfo.reset(customer);
            _this2.views.seasons.update(customer);
            _this2.views.orderOptions.hide();
            _this2.views.weekOptions.hide();
            _this2.views.transactions.hide();
            _this2.views.sharePatch.reset();
            _this2.views.seasons.els.totals.classList.add('fd-hidden');
            _this2.els.customerLogin.classList.remove('fd-hidden');
        });

        this.views.seasons.on('selected', function (data) {
            _this2.views.sharePatch.reset();
            _this2.selectedShare = data.share;
            _this2.memberShareId = _this2.selectedShare.membershareid;

            _this2.Delivery.get({
                query: {
                    membershareid: data.share.membershareid,
                    deliveryoptionid: { operation: 'join', value: { table: 'deliveryoption', column: 'id' } },
                    groupdropoffid: { operation: 'leftJoin', value: { table: 'groupdropoff', column: 'id' } }
                }
            }).then(function () {
                if (!_this2.Delivery.data.length) {
                    _this2.views.orderOptions.hide();
                    _this2.views.weekOptions.hide();
                    _this2.views.transactions.hide();
                    _this2.views.sharePatch.hide();
                    return _this2.views.seasons.showNoData();
                }

                (0, _extends3.default)(data, { delivery: _this2.Delivery });

                _this2.views.orderOptions.update((0, _extends3.default)({}, data, { isAdmin: true })).then(function () {
                    _this2.views.seasons.els.totals.classList.remove('fd-hidden');
                    _this2.views.seasons.updateWeeklyPriceAndTotal(_this2.views.orderOptions.originalWeeklyPrice, _this2.selectedShare.label, _this2.views.weekOptions.getTotalDates());
                    _this2.views.sharePatch.setOriginalWeeklyPrice(_this2.views.orderOptions.originalWeeklyPrice, _this2.views.weekOptions.getTotalDates());
                    _this2.views.seasons.views.orderDeleteButtonFlow.showSync();
                }).catch(_this2.Error);

                _this2.views.weekOptions.update((0, _extends3.default)({}, data, { isAdmin: true })).then(function () {
                    return _this2.views.sharePatch.setWeeksAffected(_this2.views.weekOptions.getWeeksAffected());
                }).catch(_this2.Error);
                _this2.views.transactions.update(data).then(function () {
                    return _this2.views.sharePatch.balance = _this2.views.transactions.model.getBalance();
                }).catch(_this2.Error);
            });
        });

        this.views.seasons.on('noSeasons', function () {
            return _promise2.default.all(['orderOptions', 'weekOptions', 'sharePatch', 'transactions'].map(function (view) {
                return _this2.views[view].hide();
            })).catch(_this2.Error);
        });

        this.views.orderOptions.on('deliveryChanged', function (data) {
            _this2.views.sharePatch.setWeeksAffected(_this2.views.weekOptions.getWeeksAffected());
            _this2.views.sharePatch.onWeeksReset();
            _this2.views.weekOptions.updateDelivery(data);
        });

        this.views.orderOptions.on('reset', function (model) {
            _this2.views.weekOptions.update(model);
            _this2.views.sharePatch.onOptionsReset();
        });

        this.views.weekOptions.on('reset', function (model) {
            return _this2.views.sharePatch.onWeeksReset();
        });

        this.views.orderOptions.on('adjustment', function (data) {
            return _this2.views.sharePatch.onOptionsUpdate(data);
        });
        this.views.weekOptions.on('adjustment', function (data) {
            return _this2.views.sharePatch.onWeekUpdate(data);
        });

        this.views.sharePatch.on('patchMemberShare', function () {
            return _this2.patchMemberShare();
        });

        return this;
    },


    requiresLogin: true,

    requiresRole: 'admin'

});

},{"../models/Customer":19,"../models/Delivery":21,"./__proto__":109,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/asyncToGenerator":244,"babel-runtime/helpers/extends":246,"babel-runtime/regenerator":250}],93:[function(require,module,exports){
'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    AutoComplete: require('../AutoComplete'),

    Customer: require('../models/Customer'),

    focus: function focus() {
        this.els.customerInput.focus();
    },
    postRender: function postRender() {
        var _this = this;

        var searchResults = void 0;
        new this.AutoComplete({
            delay: 500,
            selector: this.els.customerInput,
            minChars: 3,
            cache: false,
            renderItem: function renderItem(item, search) {
                return '<div class="autocomplete-suggestion" data-id="' + item.id + '">' + item.name + ' - ' + item.email + '</div>';
            },
            source: function () {
                var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(term, suggest) {
                    var personIds, attrResults;
                    return _regenerator2.default.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    term = term.trim();
                                    personIds = [];
                                    _context.next = 4;
                                    return _promise2.default.all(['name', 'email', 'secondaryEmail'].map(function (attr) {
                                        return _this.search(attr, term).catch(_this.Error);
                                    }));

                                case 4:
                                    attrResults = _context.sent;


                                    searchResults = attrResults.reduce(function (memo, curr) {
                                        curr = curr.filter(function (customer) {
                                            if (personIds.includes(customer.person.data.id)) return false;
                                            personIds.push(customer.person.data.id);
                                            return true;
                                        });

                                        return [].concat((0, _toConsumableArray3.default)(memo), (0, _toConsumableArray3.default)(curr));
                                    }, []);

                                    return _context.abrupt('return', suggest(searchResults.map(function (customer) {
                                        return customer.person.data;
                                    })));

                                case 7:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, _this);
                }));

                function source(_x, _x2) {
                    return _ref.apply(this, arguments);
                }

                return source;
            }(),
            onSelect: function onSelect(e, term, item) {
                _this.selectedCustomer = searchResults.find(function (customer) {
                    return customer.person.data.id == e.target.getAttribute('data-id');
                });
                _this.emit('customerSelected', _this.selectedCustomer);
            }
        });

        return this;
    },
    search: function () {
        var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(attr, term, suggest) {
            var _query;

            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return this.Customer.get({ query: (_query = {}, (0, _defineProperty3.default)(_query, attr, { operation: '~*', value: term }), (0, _defineProperty3.default)(_query, 'id', { operation: 'join', value: { table: 'member', column: 'personid' } }), _query) });

                        case 2:
                            return _context2.abrupt('return', this.Customer.data);

                        case 3:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function search(_x3, _x4, _x5) {
            return _ref2.apply(this, arguments);
        }

        return search;
    }()
});

},{"../AutoComplete":4,"../models/Customer":19,"./__proto__":109,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/asyncToGenerator":244,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246,"babel-runtime/helpers/toConsumableArray":248,"babel-runtime/regenerator":250}],94:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MyView = function MyView(data) {
    return (0, _extends3.default)(this, data).initialize();
};

(0, _extends3.default)(MyView.prototype, require('events').EventEmitter.prototype, {

    Collection: require('backbone').Collection,

    Error: require('../MyError'),

    Model: require('backbone').Model,

    _: require('underscore'),

    $: require('jquery'),

    Xhr: require('../Xhr'),

    delegateEvents: function delegateEvents(key, el) {
        var _this = this;

        var type;

        if (!this.events[key]) return;

        type = Object.prototype.toString.call(this.events[key]);

        if (type === '[object Object]') {
            this.bindEvent(key, this.events[key], el);
        } else if (type === '[object Array]') {
            this.events[key].forEach(function (singleEvent) {
                return _this.bindEvent(key, singleEvent, el);
            });
        }
    },


    delete: function _delete() {
        if (this.templateData && this.templateData.container) {
            this.templateData.container.remove();
            this.emit("deleted");
        }

        return _promise2.default.resolve();
    },

    fadeIn: function fadeIn(el) {
        var onFadeEnd = function onFadeEnd() {
            el.classList.remove('animate-in');
            el.removeEventListener('animationend', onFadeEnd);
        };

        el.addEventListener('animationend', onFadeEnd);
        if (el.classList.contains('fd-hidden')) el.classList.remove('fd-hidden');
        el.classList.add('animate-in');
    },
    fadeOut: function fadeOut(el) {
        var onFadeEnd = function onFadeEnd() {
            el.classList.add('fd-hidden');
            el.classList.remove('animate-out');
            el.removeEventListener('animationend', onFadeEnd);
        };

        el.addEventListener('animationend', onFadeEnd);
        el.classList.add('animate-out');
    },


    format: {
        capitalizeFirstLetter: function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
    },

    getFormData: function getFormData() {
        var _this2 = this;

        this.formData = {};

        (0, _keys2.default)(this.templateData).forEach(function (key) {
            var $el = _this2.templateData[key],
                val = $el.val();
            if (/INPUT|TEXTAREA|SELECT/.test($el.prop('tagName')) && val) _this2.formData[key] = val;
        });

        return this.formData;
    },

    getRouter: function getRouter() {
        return require('../router');
    },

    getTemplateOptions: function getTemplateOptions() {
        return {};
    },

    hide: function hide() {
        var _this3 = this;

        return new _promise2.default(function (resolve, reject) {
            _this3.templateData.container.hide();
            resolve();
        });
    },
    initialize: function initialize() {
        var _this4 = this;

        if (!this.container) this.container = this.$('#content');

        this.router = this.getRouter();

        this.modalView = require('./modal');

        this.$(window).resize(this._.throttle(function () {
            return _this4.size();
        }, 500));

        if (this.requiresLogin && !this.user.id) {
            this.Login = this.factory.create('login', { insertion: { el: document.querySelector('#content') } }).on("success", function () {
                _this4.router.onUser(_this4.user);

                if (_this4.requiresRole && !_this4._(_this4.user.get('roles')).contains(_this4.requiresRole)) {
                    return alert('You do not have access');
                }

                _this4.render();
            }).on('loginCancelled', function () {
                return _this4.router.navigate('/');
            });

            return this;
        } else if (this.user.id && this.requiresRole) {
            if (!this._(this.user.get('roles')).contains(this.requiresRole)) {
                return alert('You do not have access');
            }
        }

        return this.render();
    },


    isHidden: function isHidden() {
        return this.templateData.container.css('display') === 'none';
    },

    moment: require('moment'),

    onNavigation: function onNavigation(path) {
        return this.show();
    },


    postRender: function postRender() {
        this.renderSubviews();
        return this;
    },

    Q: require('q'),

    render: function render() {
        this.slurpTemplate({
            template: this.template(this.getTemplateOptions()),
            insertion: { $el: this.insertionEl || this.container, method: this.insertionMethod } });

        this.size();

        this.postRender();

        return this;
    },


    renderSubviews: function renderSubviews() {
        var _this5 = this;

        (0, _keys2.default)(this.subviews || []).forEach(function (key) {
            return _this5.subviews[key].forEach(function (subviewMeta) {
                _this5[subviewMeta.name] = new subviewMeta.view({ container: _this5.templateData[key] });
            });
        });
    },

    show: function show() {
        this.templateData.container.show();
        this.size();
        return this;
    },

    slideIn: function slideIn(el, direction) {
        var onSlideEnd = function onSlideEnd() {
            el.classList.remove('slide-in-' + direction);
            el.removeEventListener('animationend', onSlideEnd);
        };

        el.addEventListener('animationend', onSlideEnd);
        if (el.classList.contains('fd-hidden')) el.classList.remove('fd-hidden');
        el.classList.add('slide-in-' + direction);
    },
    slideOut: function slideOut(el, direction) {
        var onSlideEnd = function onSlideEnd() {
            el.classList.add('fd-hidden');
            el.classList.remove('slide-out-' + direction);
            el.removeEventListener('animationend', onSlideEnd);
        };

        el.addEventListener('animationend', onSlideEnd);
        el.classList.add('slide-out-' + direction);
    },


    slurpEl: function slurpEl(el) {

        var key = el.attr('data-js');

        this.templateData[key] = this.templateData.hasOwnProperty(key) ? this.templateData[key].add(el) : el;

        el.removeAttr('data-js');

        if (this.events[key]) this.delegateEvents(key, el);

        return this;
    },

    slurpTemplate: function slurpTemplate(options) {
        var _this6 = this;

        var $html = this.$(options.template),
            selector = '[data-js]';

        if (this.templateData === undefined) this.templateData = {};

        $html.each(function (index, el) {
            var $el = _this6.$(el);
            if ($el.is(selector)) _this6.slurpEl($el);
        });

        $html.get().forEach(function (el) {
            _this6.$(el).find(selector).each(function (i, elToBeSlurped) {
                return _this6.slurpEl(_this6.$(elToBeSlurped));
            });
        });

        if (options && options.insertion) options.insertion.$el[options.insertion.method ? options.insertion.method : 'append']($html);

        return this;
    },

    bindEvent: function bindEvent(elementKey, eventData, el) {
        var elements = el ? el : this.templateData[elementKey];

        elements.on(eventData.event || 'click', eventData.selector, eventData.meta, this[eventData.method].bind(this));
    },

    events: {},

    isMouseOnEl: function isMouseOnEl(event, el) {

        var elOffset = el.offset(),
            elHeight = el.outerHeight(true),
            elWidth = el.outerWidth(true);

        if (event.pageX < elOffset.left || event.pageX > elOffset.left + elWidth || event.pageY < elOffset.top || event.pageY > elOffset.top + elHeight) {

            return false;
        }

        return true;
    },

    requiresLogin: true,

    size: function size() {
        undefined;
    },

    user: require('../models/User'),

    util: require('util')

});

module.exports = MyView;

},{"../MyError":6,"../Xhr":7,"../models/User":42,"../router":48,"./modal":112,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246,"backbone":"backbone","events":429,"jquery":"jquery","moment":"moment","q":433,"underscore":"underscore","util":439}],95:[function(require,module,exports){
'use strict';

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Model = require('../models/__proto__');

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    DeliveryOptions: (0, _create2.default)(Model, { resource: { value: 'deliveryoption' } }),
    GroupDropoffs: (0, _create2.default)(Model, { resource: { value: 'groupdropoff' } }),
    MemberSelection: require('../models/MemberSelection'),
    MemberShareOption: (0, _create2.default)(Model, { resource: { value: 'membershareoption' } }),
    MemberSeasonalSelection: require('../models/MemberSeasonalSelection'),
    OrderOption: require('../models/OrderOption'),
    ShareOptionOption: require('../models/ShareOptionOption'),

    calculateWeeklyPrice: function calculateWeeklyPrice() {
        var optionPrice = this.MemberSelection.data.reduce(function (sum, selection) {
            return sum + Model.moneyToReal(selection.price);
        }, 0);
        return optionPrice + Model.moneyToReal(this.model.delivery.data[0].groupdropoff.price || this.model.delivery.data[0].deliveryoption.price);
    },
    calculatePriceAdjustment: function calculatePriceAdjustment() {
        var _this = this;

        return (0, _keys2.default)(this.editedFields).reduce(function (acc, key) {
            if (!_this.editedFields[key].newValue) return acc;

            var oldPrice = void 0,
                newPrice = void 0,
                oldGroup = void 0,
                diff = void 0;

            if (key === 'deliveryOption') {
                if (_this.editedFields.deliveryOption.newValue === 'group') return acc;
                oldGroup = _this.GroupDropoffs.data.find(function (option) {
                    return option.name === _this.editedFields.groupOption.oldValue;
                });
                oldPrice = oldGroup ? oldGroup.price : _this.DeliveryOptions.data.find(function (option) {
                    return option.name === _this.editedFields[key].oldValue;
                }).price;
                newPrice = _this.DeliveryOptions.data.find(function (option) {
                    return option.name === _this.editedFields[key].newValue;
                }).price;
            } else if (key === 'groupOption') {
                oldGroup = _this.GroupDropoffs.data.find(function (option) {
                    return option.name === _this.editedFields[key].oldValue;
                });
                oldPrice = oldGroup ? oldGroup.price : _this.DeliveryOptions.data.find(function (option) {
                    return option.name === _this.editedFields.deliveryOption.oldValue;
                }).price;
                newPrice = _this.GroupDropoffs.data.find(function (option) {
                    return option.name === _this.editedFields[key].newValue;
                }).price;
            } else {
                var shareOptionId = _this.OrderOption.data.find(function (option) {
                    return option.key === key;
                }).id;

                oldPrice = _this.ShareOptionOption.data.find(function (option) {
                    return option.name === _this.editedFields[key].oldValue && option.shareoptionid === shareOptionId;
                }).price;

                newPrice = _this.ShareOptionOption.data.find(function (option) {
                    return option.name === _this.editedFields[key].newValue && option.shareoptionid === shareOptionId;
                }).price;
            }

            diff = Model.moneyToReal(newPrice) - Model.moneyToReal(oldPrice);

            return acc + diff;
        }, 0);
    },
    checkHomeDelivery: function checkHomeDelivery() {
        var _this2 = this;

        return this.Xhr({
            method: 'get',
            resource: 'zipcoderoute',
            qs: (0, _stringify2.default)({
                zipcode: this.model.customer.member.data.zipcode,
                routeid: { operation: 'join', value: { table: 'deliveryroute', column: 'id' } }
            })
        }).then(function (response) {
            return _promise2.default.resolve(_this2.homeDeliveryAvailable = response.length && response[0]['deliveryroute.dayofweek']);
        });
    },
    clear: function clear() {
        this.els.changes.innerHTML = '';
        this.els.options.innerHTML = '';
        this.els.seasonalItemsList.innerHTML = '';

        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');

        this.els = {
            editSummary: this.els.editSummary,
            changes: this.els.changes,
            container: this.els.container,
            seasonalItems: this.els.seasonalItems,
            seasonalItemsList: this.els.seasonalItemsList,
            seasonLabel: this.els.seasonLabel,
            options: this.els.options,
            resetBtn: this.els.resetBtn,
            newWeeklyPrice: this.els.newWeeklyPrice,
            originalWeeklyPrice: this.els.originalWeeklyPrice
        };
    },


    events: {
        options: 'change',
        resetBtn: 'click'
    },

    getAdjustmentDescription: function getAdjustmentDescription() {
        var _this3 = this;

        return (0, _from2.default)(this.els.options.querySelectorAll('li.edited')).map(function (el) {
            var fieldName = el.getAttribute('data-name'),
                fieldLabel = _this3.capitalizeFirstLetter(fieldName),
                oldValue = _this3.editedFields[fieldName].oldValue ? _this3.editedFields[fieldName].oldValue.toString() : 'none',
                newValue = _this3.editedFields[fieldName].newValue.toString();

            return fieldLabel + ': ' + oldValue + ' to ' + newValue;
        }).join('\n\t');
    },
    getDeliveryData: function getDeliveryData() {
        var _this4 = this;

        var patchId = this.model.delivery.data[0].membersharedelivery.id,
            newDeliveryId = this.DeliveryOptions.data.find(function (option) {
            return option.name === _this4.editedFields.deliveryOption.newValue;
        }).id,
            dropoffId = this.editedFields.deliveryOption.newValue === 'group' ? this.GroupDropoffs.data.find(function (option) {
            return option.name === _this4.editedFields.groupOption.newValue;
        }).id : null;

        return {
            id: patchId,
            deliveryoptionid: newDeliveryId,
            groupdropoffid: dropoffId
        };
    },
    getShareOptionData: function getShareOptionData(key) {
        var _this5 = this;

        var shareOptionId = this.OrderOption.data.find(function (option) {
            return option.key === key;
        }).id,
            memberShareId = this.model.share.membershareid;

        var shareOptionOptionId = this.ShareOptionOption.data.find(function (option) {
            return option.name === _this5.editedFields[key].newValue && option.shareoptionid === shareOptionId;
        }).id;

        return {
            id: this.MemberSelection.data.find(function (memberSelection) {
                return shareOptionId == memberSelection.shareoptionid;
            }).membershareoptionid,
            shareoptionoptionid: shareOptionOptionId
        };
    },
    getPatchData: function getPatchData() {
        var _this6 = this;

        var rv = { membersharedelivery: this.editedFields.deliveryOption.newValue || this.editedFields.groupOption.newValue ? this.getDeliveryData() : {},
            membershareoption: []
        };

        (0, _keys2.default)(this.editedFields).forEach(function (key) {
            if (!_this6.editedFields[key].newValue || key === 'deliveryOption' || key === 'groupOption') return;

            rv.membershareoption.push(_this6.getShareOptionData(key));
        });

        return rv;
    },
    onOptionsChange: function onOptionsChange(e) {
        var listItemEl = e.target.closest('li.editable'),
            shareOptionKey = listItemEl.getAttribute('data-name'),
            val = e.target.value;

        if (shareOptionKey === 'deliveryOption' && val !== 'group') this.emit('deliveryChanged', { deliveryOption: val });
        if (shareOptionKey === 'groupOption' && val !== 'none') this.emit('deliveryChanged', { deliveryOption: 'group', groupOption: val });

        if (shareOptionKey === 'deliveryOption') {
            if (val !== 'group') {
                this.els.groupOption.selectedIndex = 0;
                this.els.groupOption.disabled = true;
                this.els.groupOption.closest('li').classList.remove('edited');
                this.editedFields.groupOption.newValue = undefined;
            } else {
                this.els.groupOption.disabled = false;
            }
        }

        if (this.editedFields[shareOptionKey].oldValue === val) {
            this.editedFields[shareOptionKey].newValue = undefined;
            listItemEl.classList.remove('edited');
            return this.showEditSummary();
        }

        this.editedFields[shareOptionKey].newValue = val;
        listItemEl.classList.add('edited');

        this.els.resetBtn.classList.remove('fd-hidden');

        this.showEditSummary();
    },
    onResetBtnClick: function onResetBtnClick() {
        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');
        this.update(this.model);
        this.emit('reset', this.model);
    },
    renderDeliveryOptions: function renderDeliveryOptions() {
        var _this7 = this;

        var option = (0, _extends3.default)({}, this.model.delivery.data[0]);

        this.slurpTemplate({ template: this.templates[this.optionTemplate]({ name: 'Delivery Option', id: 'deliveryOption' }), insertion: { el: this.els.options } });

        this.slurpTemplate({ template: this.templates[this.optionTemplate]({ name: 'Group Option', id: 'groupOption' }), insertion: { el: this.els.options } });

        if (this.optionTemplate === 'editableOption') {

            this.DeliveryOptions.data.forEach(function (option) {
                return option.name === 'home' && !_this7.homeDeliveryAvailable ? _this7.slurpTemplate({ template: _this7.templates.selectOption({ disabled: true, name: 'none', label: 'Out of Home Delivery Range' }), insertion: { el: _this7.els.deliveryOption } }) : _this7.slurpTemplate({ template: _this7.templates.selectOption(option), insertion: { el: _this7.els.deliveryOption } });
            });

            this.els.deliveryOption.querySelector('option[value=' + CSS.escape(option.deliveryoption.name)).selected = true;
            this.editedFields.deliveryOption = {};
            this.editedFields.deliveryOption.oldValue = this.els.deliveryOption.value;

            this.GroupDropoffs.data.unshift({ name: 'none', label: 'None' });
            this.GroupDropoffs.data.forEach(function (option) {
                return _this7.slurpTemplate({ template: _this7.templates.selectOption(option), insertion: { el: _this7.els.groupOption } });
            });

            if (!option.groupdropoff.id) {
                this.els.groupOption.selectedIndex = 0;
                this.els.groupOption.disabled = true;
            } else this.els.groupOption.querySelector('option[value=' + CSS.escape(option.groupdropoff.name)).selected = true;

            this.editedFields.groupOption = {};
            this.editedFields.groupOption.oldValue = this.els.groupOption.disabled ? undefined : this.els.groupOption.value;
        } else {
            this.els.deliveryOption.textContent = option.deliveryoption.label;
            this.els.groupOption.textContent = option.groupdropoff.label || 'N/A';
        }

        return this;
    },
    renderSeasonalItems: function renderSeasonalItems() {
        var _this8 = this;

        if (!this.MemberSeasonalSelection.data.length) return this.els.seasonalItems.classList.add('fd-hidden');

        this.MemberSeasonalSelection.data.forEach(function (selection) {
            return _this8.slurpTemplate({
                insertion: { el: _this8.els.seasonalItemsList },
                template: _this8.templates.seasonalItem(selection)
            });
        });

        this.els.seasonalItems.classList.remove('fd-hidden');
    },
    renderShareOptions: function renderShareOptions() {
        var _this9 = this;

        this.OrderOption.data.forEach(function (shareOption) {
            _this9.slurpTemplate({ template: _this9.templates[_this9.optionTemplate](shareOption), insertion: { el: _this9.els.options } });

            if (_this9.editable) {
                _this9.ShareOptionOption.data.forEach(function (option) {
                    if (option.shareoptionid === shareOption.id) _this9.slurpTemplate({
                        template: _this9.templates.selectOption(option), insertion: { el: _this9.els[shareOption.id] }
                    });
                });
            }
        });

        this.MemberSelection.data.forEach(function (selection) {
            if (_this9.editable) {
                var key = _this9.OrderOption.data.find(function (shareOption) {
                    return shareOption.id === selection.shareoptionid;
                }).key;
                _this9.els[selection.shareoptionid].querySelector('option[value=' + CSS.escape(selection.name)).selected = true;
                _this9.editedFields[key] = {};
                _this9.editedFields[key].oldValue = _this9.els[selection.shareoptionid].value;
            } else {
                _this9.els[selection.shareoptionid].textContent = selection.label;
            }
        });
    },
    showEditSummary: function showEditSummary() {
        var _this10 = this;

        var priceAdjustment = this.calculatePriceAdjustment(),
            edits = this.els.options.querySelectorAll('li.edited');

        this.els.changes.innerHTML = '';

        if (edits.length === 0) {
            this.emit('reset', this.model);
            this.els.resetBtn.classList.add('fd-hidden');
            return this.slideOut(this.els.editSummary, 'right');
        }

        edits.forEach(function (el) {
            var fieldName = el.getAttribute('data-name'),
                fieldLabel = _this10.capitalizeFirstLetter(fieldName),
                oldValue = _this10.editedFields[fieldName].oldValue ? _this10.editedFields[fieldName].oldValue.toString() : 'none',
                newValue = _this10.editedFields[fieldName].newValue.toString();

            _this10.slurpTemplate({ insertion: { el: _this10.els.changes }, template: _this10.templates.fieldEdit({ label: fieldLabel, oldValue: oldValue, newValue: newValue }) });
        });

        this.els.originalWeeklyPrice.textContent = this.Currency.format(this.originalWeeklyPrice);
        this.els.newWeeklyPrice.textContent = this.Currency.format(this.originalWeeklyPrice + priceAdjustment);

        this.emit('adjustment', { description: this.getAdjustmentDescription(), originalWeeklyPrice: this.originalWeeklyPrice, priceAdjustment: priceAdjustment });

        if (!this.isHidden(this.els.editSummary) && edits.length) return;

        this.slideIn(this.els.editSummary, 'right');
    },


    templates: {
        fieldEdit: require('./templates/FieldEdit'),
        archivedOption: function archivedOption(option) {
            return '<li><div class="cell">' + option.name + '</div><div class="cell" data-js="' + option.id + '"></div></li>';
        },
        editableOption: function editableOption(option) {
            return '<li data-name="' + (option.key || option.id) + '" class="editable"><span>' + option.name + '</span><select data-js="' + option.id + '"></select></li>';
        },
        seasonalItem: function seasonalItem(selection) {
            return '<div><span>' + selection.addOn + ': </span><span>' + selection.addOnOption + '</span></div>';
        },
        selectOption: function selectOption(option) {
            var disabled = option.disabled ? 'disabled' : '';
            var price = option.name === 'none' ? '' : option.name === 'group' ? ' &mdash; Varies' : ' &mdash; ' + option.price + '/week';

            return '<option ' + disabled + ' value="' + option.name + '">' + option.label + price + '</option>';
        }
    },

    update: function update(_ref) {
        var _this11 = this;

        var customer = _ref.customer,
            delivery = _ref.delivery,
            share = _ref.share,
            isAdmin = _ref.isAdmin;

        this.clear();
        this.editedFields = {};

        this.model = arguments[0];

        this.editable = isAdmin && this.Moment() < this.Moment(share.enddate);
        this.optionTemplate = this.editable ? 'editableOption' : 'archivedOption';

        this.els.seasonLabel.textContent = share.label;

        return (this.editable ? this.checkHomeDelivery() : _promise2.default.resolve()).then(function () {
            return _this11.OrderOption.get({ query: { shareid: share.id, shareoptionid: { operation: 'join', value: { table: 'shareoption', column: 'id' } } } });
        }).then(function () {
            return _this11.ShareOptionOption.get();
        }).then(function () {
            return _this11.MemberSelection.get({ query: { membershareid: share.membershareid, shareoptionoptionid: { operation: 'join', value: { table: 'shareoptionoption', column: 'id' } } } });
        }).then(function () {
            return _this11.MemberSeasonalSelection.get({ query: {
                    memberShareId: share.membershareid,
                    seasonalAddOnId: { operation: 'join', value: { table: 'seasonalAddOn', column: 'id' } },
                    seasonalAddOnOptionId: { operation: 'join', value: { table: 'seasonalAddOnOption', column: 'id' } }
                } });
        }).then(function () {
            return _this11.renderShareOptions();
        }).then(function () {
            return _this11.DeliveryOptions.get();
        }).then(function () {
            return _this11.GroupDropoffs.get();
        }).then(function () {
            _this11.renderDeliveryOptions();
            _this11.renderSeasonalItems();
            _this11.originalWeeklyPrice = _this11.calculateWeeklyPrice();
            _this11.show();
            return _promise2.default.resolve();
        });
    }
});

},{"../models/MemberSeasonalSelection":33,"../models/MemberSelection":34,"../models/OrderOption":36,"../models/ShareOptionOption":41,"../models/__proto__":44,"./__proto__":109,"./templates/FieldEdit":151,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],96:[function(require,module,exports){
'use strict';

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Pikaday: require('pikaday'),

    events: {
        dateTypeSelect: 'change',
        exportBtn: 'click',
        viewBtn: 'click'
    },

    clearTable: function clearTable() {
        this.removeChildren(this.els.columns);
        this.removeChildren(this.els.rows);
    },
    getDateQueries: function getDateQueries() {
        var _this = this;

        if (this.dateType === 'season') {
            var share = this.Shares.data.find(function (datum) {
                return datum.name === _this.els.season.value;
            });
            return { shareId: share.id, shareName: share.name };
        } else if (this.dateType === 'year') {
            return { year: this.els.year.value };
        }

        return { from: this.els.from.value, to: this.els.to.value };
    },
    getReportOptions: function getReportOptions() {
        var _this2 = this;

        this.Reports.data.forEach(function (report) {
            return _this2.slurpTemplate({
                template: '<option value="' + report.id + '">' + report.label + '</option>',
                insertion: { el: _this2.els.report }
            });
        });
    },
    getSeasonOptions: function getSeasonOptions() {
        var _this3 = this;

        this.Shares.data.forEach(function (share) {
            return _this3.slurpTemplate({
                template: '<option value="' + share.name + '">' + share.label + '</option>',
                insertion: { el: _this3.els.season }
            });
        });
    },
    getYearOptions: function getYearOptions() {
        var _this4 = this;

        var currentYear = new Date().getFullYear(),
            range = this.Format.FillRange(currentYear - 10, currentYear).reverse();

        range.forEach(function (year) {
            return _this4.slurpTemplate({
                template: '<option value="' + year + '">' + year + '</option>',
                insertion: { el: _this4.els.year }
            });
        });
    },
    handleColumns: function handleColumns(rows) {
        var _this5 = this;

        var columns = this.els.columns;

        this.columns = (0, _keys2.default)(rows[0]);

        this.columns.forEach(function (column) {
            return _this5.slurpTemplate({ template: '<li>' + column + '</li>', insertion: { el: columns } });
        });
    },
    handleRows: function handleRows(rows) {
        var _this6 = this;

        var rowsEl = this.els.rows;

        var template = rows.map(function (row) {
            var columns = _this6.columns.map(function (column) {
                return '<li>' + (row[column] || '') + '</li>';
            }).join('');
            return '<ol>' + columns + '</ol>';
        }).join('');

        this.slurpTemplate({ template: template, insertion: { el: rowsEl } });
    },
    noResults: function noResults() {
        this.els.empty.classList.remove('fd-hidden');
    },
    onDateTypeSelectChange: function onDateTypeSelectChange(e) {
        this.dateType = e.target.value;
        this.toggleDateTypes(e.target.value);
    },
    onExportBtnClick: function onExportBtnClick() {
        var qs = (0, _extends3.default)(this.getDateQueries(), { id: this.els.report.value, export: true });
        window.open('/report?' + window.encodeURIComponent((0, _stringify2.default)(qs)));
    },
    onViewBtnClick: function onViewBtnClick() {
        var _this7 = this;

        this.Xhr({ method: 'get', resource: 'report', qs: (0, _stringify2.default)((0, _extends3.default)(this.getDateQueries(), { id: this.els.report.value })) }).then(function (result) {
            _this7.clearTable();

            if (result.length == 0) return _this7.noResults();

            _this7.els.empty.classList.add('fd-hidden');

            _this7.handleColumns(result);
            _this7.handleRows(result);
            return _promise2.default.resolve();
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this8 = this;

        this.Reports = (0, _create2.default)(this.Model, { resource: { value: 'report' } });
        this.Shares = (0, _create2.default)(this.Model, { resource: { value: 'share' } });

        _promise2.default.all([this.Reports.get(), this.Shares.get()]).then(function () {
            _this8.getReportOptions();
            _this8.getSeasonOptions();
            _this8.getYearOptions();
        }).catch(this.Error);

        new this.Pikaday({ field: this.els.from, format: 'YYYY-MM-DD' });
        new this.Pikaday({ field: this.els.to, format: 'YYYY-MM-DD' });

        return this;
    },
    toggleDateTypes: function toggleDateTypes(type) {
        this.els.custom.classList.toggle('fd-hidden', type !== 'custom');
        this.els.season.parentNode.classList.toggle('fd-hidden', type !== 'season');
        this.els.year.parentNode.classList.toggle('fd-hidden', type !== 'year');
    }
});

},{"./__proto__":109,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246,"pikaday":"pikaday"}],97:[function(require,module,exports){
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Views: {
        resetPassword: function resetPassword() {
            return {
                model: (0, _create2.default)(this.Model).constructor({}, {
                    attributes: [require('../../../models/Password'), require('../../../models/ResetPassword')],
                    resource: 'person'
                }),
                templateOpts: function templateOpts() {
                    return {
                        heading: 'Reset Your Password',
                        prompt: 'Please enter a new password.'
                    };
                },
                submit: function submit() {
                    var _this = this;

                    if (!this.validate(this.getFormValues()) || !this.model.validateRepeatPassword()) return _promise2.default.resolve(this.onSubmitEnd());

                    return this.Xhr({ method: 'patch', resource: 'reset-password', data: (0, _stringify2.default)(this.model.data) }).then(function (response) {
                        _this.model.data = {};
                        _this.clear();
                        _this.emit('patched');
                        return _this.Toast.showMessage('success', response.message);
                    });
                }
            };
        }
    },

    postRender: function postRender() {
        this.views.resetPassword.model.set('token', window.location.pathname.split('/').pop());
        return this;
    }
});

},{"../../../models/Password":210,"../../../models/ResetPassword":211,"./__proto__":109,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],98:[function(require,module,exports){
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Views: {
        orderDeleteButtonFlow: function orderDeleteButtonFlow() {
            return {
                model: (0, _create2.default)(this.Model).constructor({
                    states: {
                        start: [{ name: 'save', text: 'Delete Order', class: 'delete-btn', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmBtn', class: 'delete-btn', text: 'Are You Sure?', emit: true, nextState: 'start' }, { name: 'cancel', class: 'reset-btn', nextState: 'start', text: 'Cancel' }]
                    }
                })
            };
        }
    },

    MemberSeason: require('../models/MemberSeason'),

    clear: function clear() {
        this.els.list.innerHTML = '';
        this.els.balanceNotice.classList.add('fd-hidden');
        this.views.orderDeleteButtonFlow.hideSync();
        this.els.totals.classList.add('fd-hidden');
    },
    deleteOrder: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return this.Xhr({ method: 'DELETE', resource: 'delete-order', id: this.currentSelection.getAttribute('data-id') });

                        case 2:
                            this.Toast.showMessage('success', 'Order deleted.');
                            this.currentSelection.remove();

                            if (this.els.list.firstChild) {
                                _context.next = 7;
                                break;
                            }

                            this.emit('noSeasons');return _context.abrupt('return', this.showNoSeasons());

                        case 7:
                            this.els.list.firstChild.click();

                        case 8:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function deleteOrder() {
            return _ref.apply(this, arguments);
        }

        return deleteOrder;
    }(),


    events: {
        list: 'click',
        payment: 'click',
        views: {
            buttonFlow: [['confirmBtnClicked', function () {
                this.deleteOrder().catch(this.Error);
            }]]
        }
    },

    insertShareLabels: function insertShareLabels() {
        var _this = this;

        var countPerShare = {};
        if (!this.MemberSeason.data.length) return this.showNoSeasons();

        this.MemberSeason.data.forEach(function (season) {
            countPerShare[season.name] ? ++countPerShare[season.name] : countPerShare[season.name] = 1;
            if (countPerShare[season.name] > 1) season.count = countPerShare[season.name];

            _this.slurpTemplate({ template: _this.templates.ShareBox(season), insertion: { el: _this.els.list } });
        });
    },
    onListClick: function onListClick(e) {
        if (!e.target.closest('div.share-label')) return;

        if (this.currentSelection) this.currentSelection.classList.remove('selected');

        var el = e.target.closest('div.share-label');

        this.currentSelection = el;
        el.classList.add('selected');
        this.emit('selected', { customer: this.customer, share: this.MemberSeason.data.find(function (season) {
                return season.membershareid == el.getAttribute('data-id');
            }) });
    },
    onPaymentClick: function onPaymentClick() {
        this.emit('payBalance');
    },
    select: function select(memberShareId) {
        this.els.list.querySelector('div.share-label[data-id="' + memberShareId + '"]').click();
    },
    showNoData: function showNoData() {
        this.els.totals.classList.add('fd-hidden');
        this.els.noDataMessage.classList.remove('fd-hidden');
        this.views.orderDeleteButtonFlow.showSync();
    },
    showNoSeasons: function showNoSeasons() {
        this.clear();
        this.slurpTemplate({ template: '<li>No orders.</li>', insertion: { el: this.els.list } });
    },
    templateOpts: function templateOpts() {
        return { isAdmin: window.location.pathname.split('/').includes('admin-plus') };
    },


    templates: {
        ShareBox: require('./templates/ShareBox')
    },

    update: function update(customer) {
        var _this2 = this;

        this.customer = customer;

        this.clear();

        return this.MemberSeason.get({ query: { memberid: customer.member.data.id, shareid: { operation: 'join', value: { table: 'share', column: 'id' } } } }).then(function () {
            return _this2.insertShareLabels();
        }).then(function () {
            return _this2.show();
        }).catch(this.Error);
    },
    updateBalanceNotice: function updateBalanceNotice(amount) {
        this.els.balanceNotice.classList.toggle('fd-hidden', amount <= 0);
        this.els.balanceAmount.textContent = this.Currency.format(amount);
    },
    updateWeeklyPriceAndTotal: function updateWeeklyPriceAndTotal(amount, label, weeks) {
        this.els.noDataMessage.classList.add('fd-hidden');
        this.els.seasonLabel.textContent = label;
        this.els.weeklyPrice.textContent = this.Currency.format(amount) + '/week';
        this.els.weekNumber.textContent = 'Number of Weeks: ' + weeks;
        this.els.orderTotal.textContent = 'Order Total: ' + this.Currency.format(amount * weeks);
        this.els.totals.classList.remove('fd-hidden');
    }
});

},{"../models/MemberSeason":32,"./__proto__":109,"./templates/ShareBox":176,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/asyncToGenerator":244,"babel-runtime/helpers/extends":246,"babel-runtime/regenerator":250}],99:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },


    requiresLogin: false
});

},{"./__proto__":109,"babel-runtime/helpers/extends":246}],100:[function(require,module,exports){
'use strict';

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    Views: {
        buttonFlow: function buttonFlow() {
            return {
                model: (0, _create2.default)(this.Model).constructor({
                    states: {
                        start: [{ name: 'save', text: 'Update Share', class: 'save-btn', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmBtn', class: 'save-btn', text: 'Are You Sure?', emit: true, nextState: 'start' }, { name: 'cancel', class: 'reset-btn', nextState: 'start', text: 'Cancel' }]
                    }
                })
            };
        }
    },

    displayTotal: function displayTotal() {
        this.total = 0;

        this.total += this.weeksRemovedPrice;
        this.total += this.weeksAddedPrice;

        if (this.weeklyPriceAdjustment) this.total += this.optionsAdjustment;

        this.newGrandTotal = this.originalGrandTotal + this.total;

        this.els.originalGrandTotal.textContent = this.Currency.format(this.originalGrandTotal);
        this.els.newGrandTotal.textContent = this.Currency.format(this.newGrandTotal);
        this.els.adjustmentType.textContent = this.total < 0 ? 'Price Reduction:' : 'New Charges:';
        this.els.adjustment.textContent = this.Currency.format(Math.abs(this.total));

        return this;
    },
    getWhitespace: function getWhitespace(count) {
        var rv = "";

        while (count > 0) {
            rv += " ";count--;
        }

        return rv;
    },
    getDescription: function getDescription() {
        var lineWidth = 100,
            lines = [['Weeks Removed: ' + this.els.weeksRemoved.textContent, 'Adjustment: ' + this.Currency.format(this.weeksRemovedPrice)], ['Weeks Added: ' + this.els.weeksAdded.textContent, 'Adjustment: ' + this.Currency.format(this.weeksAddedPrice)]];

        return ['' + lines[0][0] + this.getWhitespace(lineWidth - lines[0][0].length - lines[0][1].length) + lines[0][1], '' + lines[1][0] + this.getWhitespace(lineWidth - lines[1][0].length - lines[1][1].length) + lines[1][1], 'Options Update: ' + this.optionsDescription, 'Original Weekly Price: ' + this.Currency.format(this.originalWeeklyPrice), 'Weekly price adjustment: ' + this.Currency.format(this.weeklyPriceAdjustment), 'New Weekly Price: ' + this.Currency.format(this.originalWeeklyPrice + this.weeklyPriceAdjustment), 'Weeks affected: ' + this.weeksAffected].join('\n');
    },
    getPatchData: function getPatchData() {
        return {
            value: this.total,
            description: this.getDescription(),
            sendEmail: this.els.sendEmail.checked
        };
    },
    onOptionsReset: function onOptionsReset() {
        this.weeklyPriceAdjustment = false;
        this.els.options.classList.add('fd-hidden');

        this.els.weeklyAdjustment.textContent = this.Currency.format(0);
        this.els.shareOptionDescription.innerHTML = '';

        this.displayTotal();

        if (this.els.weeksRemoved.textContent == 0 && this.els.weeksAdded.textContent == 0) this.els.container.classList.add('fd-hidden');
    },
    onWeeksReset: function onWeeksReset() {
        this.onWeekUpdate({ added: 0, removed: 0 });
    },
    onOptionsUpdate: function onOptionsUpdate(_ref) {
        var description = _ref.description,
            priceAdjustment = _ref.priceAdjustment;

        this.optionsDescription = description;

        this.els.options.classList.remove('fd-hidden');

        this.weeklyPriceAdjustment = priceAdjustment;
        this.els.weeklyAdjustment.textContent = this.Currency.format(priceAdjustment);
        this.els.shareOptionDescription.innerHTML = '';

        this.slurpTemplate({
            insertion: { el: this.els.shareOptionDescription },
            template: description.split('\n\t').map(function (option) {
                return '<li>' + option + '</li>';
            }).join('')
        });

        this.els.originalWeeklyPrice.textContent = this.Currency.format(this.originalWeeklyPrice);
        this.els.newWeeklyPrice.textContent = this.Currency.format(this.originalWeeklyPrice + priceAdjustment);

        this.updateOptionsAdjustment();

        this.displayTotal().show();
    },
    onWeekUpdate: function onWeekUpdate(_ref2) {
        var added = _ref2.added,
            removed = _ref2.removed;

        this.weeksAffected = this.originalWeeksAffected - removed;
        this.els.weeksAffected.textContent = this.weeksAffected;

        this.els.weeksRemoved.textContent = removed;
        this.els.weeksAdded.textContent = added;

        this.weeksAddedPrice = added * (this.originalWeeklyPrice + (this.weeklyPriceAdjustment || 0));
        this.els.weeksAddedPrice.textContent = this.Currency.format(this.weeksAddedPrice);

        this.weeksRemovedPrice = -1 * removed * this.originalWeeklyPrice;
        this.els.weeksRemovedPrice.textContent = this.Currency.format(this.weeksRemovedPrice);

        if (added == 0 && removed == 0 && !this.weeklyPriceAdjustment) return this.els.container.classList.add('fd-hidden');

        this.updateOptionsAdjustment();

        this.displayTotal().show();
    },
    postRender: function postRender() {
        var _this = this;

        this.optionsDescription = '';
        this.els.weeksAdded.textContent = 0;
        this.els.weeksRemoved.textContent = 0;
        this.weeksRemovedPrice = 0;
        this.weeksAddedPrice = 0;
        this.els.weeksRemovedPrice.textContent = this.Currency.format(this.weeksRemovedPrice);
        this.els.weeksAddedPrice.textContent = this.Currency.format(this.weeksAddedPrice);

        this.views.buttonFlow.on('confirmBtnClicked', function () {
            return _this.emit('patchMemberShare');
        });

        return this;
    },
    reset: function reset() {
        this.els.sendEmail.checked = false;
        this.optionsDescription = '';
        this.els.weeksAdded.textContent = 0;
        this.els.weeksRemoved.textContent = 0;
        this.weeksRemovedPrice = 0;
        this.els.weeksRemovedPrice.textContent = this.Currency.format(this.weeksRemovedPrice);
        this.els.weeklyAdjustment.textContent = this.Currency.format(0);
        this.weeklyPriceAdjustment = false;
        this.els.shareOptionDescription.innerHTML = '';
        this.hide();
    },
    setOriginalWeeklyPrice: function setOriginalWeeklyPrice(price, weeks) {
        this.originalWeeklyPrice = price;
        this.originalGrandTotal = price * weeks;
    },
    setWeeksAffected: function setWeeksAffected(_ref3) {
        var selectable = _ref3.selectable,
            skipped = _ref3.skipped;

        this.originalWeeksAffected = selectable - skipped;
        this.weeksAffected = this.originalWeeksAffected;
        this.els.weeksAffected.textContent = this.weeksAffected;
    },
    templateOpts: function templateOpts() {
        return { isAdmin: window.location.pathname.split('/').includes('admin-plus') };
    },
    updateOptionsAdjustment: function updateOptionsAdjustment() {
        this.optionsAdjustment = this.weeksAffected * this.weeklyPriceAdjustment;
        this.els.optionsAdjustment.textContent = this.Currency.format(this.optionsAdjustment);
    }
});

},{"./__proto__":109,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/extends":246}],101:[function(require,module,exports){
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MyView = require('./MyView'),
    Signup = function Signup() {
    return MyView.apply(this, arguments);
};

(0, _extends3.default)(Signup.prototype, MyView.prototype, {
    done: function done() {
        this.templateData.leftBtn.hide();
        this.templateData.rightBtn.hide();
    },


    events: {
        'leftBtn': { method: 'goBack' },
        'rightBtn': { method: 'validateView' }
    },

    goBack: function goBack() {
        var _this = this;

        this.templateData.leftBtn.off();

        this.instances[this.views[this.currentIndex].name].hide();
        this.instances[this.views[this.currentIndex].name].templateData.container.removeClass('slide-in-left').removeClass('slide-in-right');

        this.currentIndex -= 1;

        this.state.signup.index = this.currentIndex;
        this.saveState();

        this.showProperView(true);

        window.setTimeout(function () {
            return _this.delegateEvents('leftBtn', _this.templateData.leftBtn);
        }, 1000);
    },
    noShares: function noShares() {
        this.templateData.leftBtn.hide();
        this.templateData.rightBtn.hide();

        this.instances.shares.templateData.header.text('There are no shares available at this time');
    },
    onNavigation: function onNavigation(path) {
        var instance = this.instances[this.views[this.currentIndex].name];
        if (instance.onSignupNavigation) instance.onSignupNavigation();
        return this.show();
    },
    postRender: function postRender() {
        this.signupData = {};
        this.instances = {};

        this.state = this.user.get('state');
        if (!this.state) this.user.set('state', {});

        if (this.state.signup && (0, _keys2.default)(this.state.signup).length) return this.updateState(this.state.signup);

        if (!this.currentIndex) this.currentIndex = 0;
        this.state.signup = { index: this.currentIndex, shares: [] };

        this.showProperView();
    },


    requiresLogin: false,

    saveState: function saveState() {
        var _this2 = this;

        var data = this.user.isLoggedIn() ? this.user.attributes : { state: this.state };
        this.$.ajax({
            data: (0, _stringify2.default)(data),
            method: "PATCH",
            url: "/user" }).fail(function (e) {
            return new _this2.Error(e);
        });
    },
    serializeShare: function serializeShare(share) {
        return {
            id: share.id,
            seasonalAddOns: share.get('seasonalAddOns'),
            selectedDelivery: share.get('selectedDelivery'),
            selectedOptions: share.get('selectedOptions'),
            skipDays: share.get('skipDays')
        };
    },
    showNext: function showNext() {
        var _this3 = this;

        this.instances[this.views[this.currentIndex].name].hide();
        this.instances[this.views[this.currentIndex].name].templateData.container.removeClass('slide-in-left').removeClass('slide-in-right');

        this.currentIndex += 1;

        this.state.signup.index = this.currentIndex;
        this.state.signup.shares = this.signupData.shares.map(function (share) {
            return _this3.serializeShare(share);
        });
        this.saveState();

        this.showProperView();
    },
    showProperNav: function showProperNav() {
        var left = this.templateData.leftBtn,
            right = this.templateData.rightBtn;

        if (this.currentIndex > 0) this.templateData.intro.text('Continue your CSA sign-up');
        if (this.currentIndex === 5) this.templateData.intro.text('Review your order and check out');

        if (this.currentIndex === 0) {
            left.hide();
            if (right.is(':hidden')) right.show();
        } else if (this.currentIndex === this.views.length - 1) {
            right.hide();
            if (left.is(':hidden')) left.show();
        } else {
            if (left.is(':hidden')) left.show();
            if (right.is(':hidden')) right.show();
        }
    },
    showProperView: function showProperView(back) {
        var _this4 = this;

        var currentViewName = this.views[this.currentIndex].name,
            klass = this.util.format('slide-in-%s', back ? 'left' : 'right');

        this.showProperNav();

        if (this.instances[currentViewName]) {
            this.instances[currentViewName].show().templateData.container.addClass(klass);
            if (this.instances[currentViewName].goBack) this.goBack();
            return;
        }

        this.instances[currentViewName] = new this.views[this.currentIndex].view({
            container: this.templateData.walkthrough,
            containerClass: klass,
            factory: this.factory,
            signupData: this.signupData
        });

        if (this.instances[currentViewName].templateData) this.instances[currentViewName].templateData.container.addClass(klass);

        if (this.views[this.currentIndex].on) {
            this.views[this.currentIndex].on.forEach(function (eventData) {
                return _this4.instances[currentViewName].on(eventData.event, function () {
                    return _this4[eventData.method]();
                });
            });
        }

        if (this.instances[currentViewName].goBack) this.goBack();

        return this;
    },


    template: require('../templates/signup'),

    updateState: function updateState(data) {
        var _this5 = this;

        this.currentIndex = data.index;

        this.instances.shares = new this.views[0].view({
            container: this.templateData.walkthrough,
            factory: this.factory,
            sessionShares: data.shares,
            signupData: this.signupData
        }).on('initialized', function () {
            return _this5.showProperView();
        });

        this.instances.shares.hide();
    },
    validateView: function validateView() {
        var _this6 = this;

        var view = this.instances[this.views[this.currentIndex].name];

        this.templateData.rightBtn.off();

        this.Q.when(view.validate()).then(function (result) {
            if (result) _this6.showNext();
        }).fail(function (e) {
            return new _this6.Error(e);
        }).done(function () {
            return window.setTimeout(function () {
                return _this6.delegateEvents('rightBtn', _this6.templateData.rightBtn);
            }, 1000);
        });
    },


    views: [{ name: 'shares', view: require('./signup/Shares'), on: [{ event: 'noShares', method: 'noShares' }] }, { name: 'memberInfo', view: require('./signup/MemberInfo') }, { name: 'shareOptions', view: require('./signup/ShareOptions') }, { name: 'delivery', view: require('./signup/Delivery') }, { name: 'dateSelection', view: require('./signup/DateSelection') }, { name: 'summary', view: require('./signup/Summary'), on: [{ event: 'done', method: 'done' }] }]

});

module.exports = Signup;

},{"../templates/signup":50,"./MyView":94,"./signup/DateSelection":113,"./signup/Delivery":114,"./signup/MemberInfo":119,"./signup/ShareOptions":126,"./signup/Shares":127,"./signup/Summary":129,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/extends":246}],102:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {

    events: {
        'cancelBtn': 'click',
        'submitBtn': 'click'
    },

    handleSubmissionError: function handleSubmissionError(e) {
        this.emit('submissionError', e);
        this.Toast.showMessage('error', e || this.toastError || 'Error');
        this.Error(e);
        this.onSubmitEnd();
    },
    onCancelBtnClick: function onCancelBtnClick() {
        this.delete().catch(this.Error);
    },
    onSubmitBtnClick: function onSubmitBtnClick() {
        var _this = this;

        if (this.submitting) return;
        this.onSubmitStart();
        this.submit().then(function () {
            return _promise2.default.resolve(_this.onSubmitEnd());
        }).catch(function (e) {
            return _this.handleSubmissionError(e);
        });
    },
    onSubmitEnd: function onSubmitEnd() {
        this.submitting = false;
        this.els.submitBtn.classList.remove('submitting');
    },
    onSubmitStart: function onSubmitStart() {
        this.submitting = true;
        this.els.submitBtn.classList.add('submitting');
    }
};

},{"babel-runtime/core-js/promise":236}],103:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _create2.default)((0, _extends3.default)({}, require('./__proto__'), {

    Icons: {
        error: require('./templates/lib/error')(),
        success: require('./templates/lib/checkmark')()
    },

    insertion: { el: document.body },

    name: 'Toast',

    requiresLogin: false,

    showMessage: function showMessage(type, message) {
        var _this = this;

        return new _promise2.default(function (resolve, reject) {
            if (/show/.test(_this.status)) return resolve();

            _this.resolution = resolve;

            if (type !== 'error') _this.els.container.classList.add('success');

            _this.els.message.textContent = message;
            _this.els.title.textContent = type === 'error' ? 'Error' : 'Success';
            _this.slurpTemplate({ insertion: { el: _this.els.icon }, template: type === 'error' ? _this.Icons.error : _this.Icons.success });

            _this.status = 'showing';

            _this.show(true).then(function () {
                return _this.hide(true);
            }).then(function () {
                return _this.teardown();
            }).catch(reject);
        });
    },
    teardown: function teardown() {
        if (this.els.container.classList.contains('success')) this.els.container.classList.remove('success');
        this.els.message.textContent = '';
        this.els.message.title = '';
        if (this.els.icon.firstChild) this.els.icon.removeChild(this.els.icon.firstChild);

        this.status = 'hidden';
        this.resolution();
    },


    template: require('./templates/Toast')

}), {}).constructor();

},{"./__proto__":109,"./templates/Toast":180,"./templates/lib/checkmark":188,"./templates/lib/error":190,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],104:[function(require,module,exports){
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends4.default)({}, require('./__proto__'), {

    Pikaday: require('pikaday'),

    Templates: {
        Transaction: require('./templates/CsaTransaction')
    },

    Views: {
        emailButtons: function emailButtons() {
            return {
                model: (0, _create2.default)(this.Model).constructor({
                    hide: true,
                    states: {
                        start: [{ name: 'sendEmail', class: 'save-btn', text: 'Send Email Reminder', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmEmail', class: 'save-btn', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', nextState: 'start', class: 'reset-btn', text: 'Cancel' }]
                    }
                })
            };
        },

        addTransaction: function addTransaction() {
            return { model: this.model };
        }
    },

    clear: function clear() {
        this.els.transactions.innerHTML = '';
    },


    events: {
        list: 'click',
        views: {
            addTransaction: [['transactionAdded', function (response) {
                this.insertTransaction(response.id);
                this.updateBalance();
                this.Toast.showMessage('success', 'Transaction added!');
            }]]
        }
    },

    appendTransaction: function appendTransaction(transaction) {
        this.slurpTemplate({
            template: this.Templates.Transaction(transaction, { currency: this.Currency.format, moment: this.Moment }),
            insertion: { el: this.els.transactions }
        });
    },
    insertTransaction: function insertTransaction(transactionId) {
        var index = this.model.data.findIndex(function (datum) {
            return datum.id == transactionId;
        }),
            children = (0, _from2.default)(this.els.transactions.children),
            insertion = index === 0 ? { el: children[0], method: 'insertBefore' } : { el: children[index - 1], method: 'after' };

        this.slurpTemplate({
            template: this.Templates.Transaction(this.model.data[index], { currency: this.Currency.format, moment: this.Moment }),
            insertion: insertion
        });
    },


    model: require('../models/CsaTransaction'),

    onAddBtnClick: function onAddBtnClick() {
        var _this = this;

        if (this.state === 'confirmDelete') {
            this.model.delete(this.markedForDeletion).then(function () {
                _this.els.transactions.querySelector('li[data-id="' + _this.markedForDeletion + '"]').remove();
                _this.updateBalance();
                _this.Toast.showMessage('success', 'Transaction deleted!');
                _this.resetState();
            });
        } else if (this.state === 'confirming') {
            this.model.post((0, _extends4.default)({ memberShareId: this.share.membershareid }, this.model.attributes.reduce(function (memo, attr) {
                return (0, _extends4.default)(memo, (0, _defineProperty3.default)({}, attr, _this.els[attr].value));
            }, {}))).then(function (response) {
                _this.insertTransaction(response.id);
                _this.updateBalance();
                _this.Toast.showMessage('success', 'Transaction added!');
                _this.resetState();
            }).catch(function (e) {
                _this.Error(e);
                _this.Toast.showMessage('error', 'Error adding transaction');
                _this.resetState();
            });
        } else if (this.state === 'adding') {

            this.els.addBtn.textContent = 'Are you sure?';
            this.state = 'confirming';
        } else if (!this.state) {
            this.els.cancelBtn.classList.remove('hidden');
            this.els.addTransactionRow.classList.remove('hidden');

            this.state = 'adding';
        }
    },
    onListClick: function onListClick(e) {
        if (this.currentSelection) this.currentSelection.classList.remove('selected');

        var el = e.target;
        this.currentSelection = el;
        el.classList.add('selected');
        this.emit('selected', { customer: this.customer, share: this.MemberSeason.data.find(function (season) {
                return season.id == el.getAttribute('data-id');
            }) });
    },
    postRender: function postRender() {
        var _this2 = this;

        this.views.emailButtons.on('confirmEmailClicked', function (e) {
            return _this2.sendMail();
        });
        this.model.on('added', function (datum) {
            return _this2.onModelAdd(datum);
        });
        return this;
    },
    onCancelAddTransaction: function onCancelAddTransaction() {
        var _this3 = this;

        this.els.addTransactionRow.classList.add('hidden');
        this.model.attributes.forEach(function (attr) {
            return _this3.els[attr].value = attr === 'action' ? _this3.model.actions[0] : '';
        });
    },
    onModelAdd: function onModelAdd(datum) {
        this.insertTransaction(datum.id);
        this.updateBalance();
    },
    sendMail: function sendMail() {
        var _this4 = this;

        return this.Xhr({
            method: 'post',
            resource: 'mail',
            data: (0, _stringify2.default)({
                to: this.customer.person.data.email,
                subject: 'Patchwork Gardens ' + this.share.label + ' Balance',
                body: 'According to our records, you have an outstanding balance of ' + this.els.balance.textContent + '.\r\n\r\nPlease send payment at your earliest convenience to Patchwork Gardens, 9057 W Third St, Dayton OH 45417.\r\n\r\nIf you believe this is incorrect, please contact us by email or phone (937) 835-5807.\r\n\r\nThank You.'
            })
        }).then(function () {
            return _this4.Toast.showMessage('success', 'Email sent.');
        }).catch(function (e) {
            _this4.Error(e);_this4.Toast.showMessage('error', 'Error sending email.');
        });
    },
    update: function update(_ref) {
        var _this5 = this;

        var customer = _ref.customer,
            share = _ref.share;

        this.customer = customer;
        this.share = share;

        this.clear();
        this.views.addTransaction.update(share.membershareid);

        return this.model.get({ query: { memberShareId: share.membershareid } }).then(function () {
            return _this5.model.data.forEach(function (csaTransaction) {
                return _this5.appendTransaction(csaTransaction);
            });
        }).then(function () {
            return _this5.updateBalance().show();
        }).catch(this.Error);
    },
    updateBalance: function updateBalance() {
        var balance = this.model.getBalance();
        this.els.balance.textContent = this.Currency.format(balance);

        if (balance > 0) {
            this.views.emailButtons.show();
        } else {
            this.views.emailButtons.hide();
        }

        return this;
    }
});

},{"../models/CsaTransaction":16,"./__proto__":109,"./templates/CsaTransaction":141,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/create":226,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246,"pikaday":"pikaday"}],105:[function(require,module,exports){
'use strict';

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends4.default)({}, require('./__proto__'), {

    AutoComplete: require('./lib/AutoComplete'),

    Resources: {
        Document: {
            Model: (0, _extends4.default)({}, require('../models/Document')),
            renderItem: function renderItem(item, search) {
                return '<div class="autocomplete-suggestion" data-val="' + (item.label || item.name) + '" data-id="' + item.id + '">' + (item.label || item.name) + '</div>';
            },
            search: function search(term, suggest) {
                var _this = this;

                return this.Xhr({ method: 'get', qs: this.getQs(term), resource: this.Resource }).then(function (documents) {
                    if (!Array.isArray(documents)) documents = [documents];
                    if (documents.length === 0) return _promise2.default.resolve(false);

                    _this.resource.Model.constructor(documents, { storeBy: ['id'] });
                    suggest(_this.resource.Model.data);
                    return _promise2.default.resolve(true);
                });
            }
        }
    },

    clear: function clear(suppressEmit) {
        this.els.input.value = '';
        if (!suppressEmit) this.emit('cleared');
    },


    events: {
        input: 'input'
    },

    focus: function focus() {
        this.els.input.focus();
    },
    getSelectedId: function getSelectedId() {
        if (!this.selectedModel) return undefined;

        return this.selectedModel._id || this.selectedModel.id;
    },
    getQs: function getQs(term) {
        var attr = this.Resource === 'deliveryroute' ? 'label' : 'name';
        return (0, _stringify2.default)((0, _extends4.default)({}, (0, _defineProperty3.default)({}, attr, { operation: '~*', value: term })));
    },
    initAutoComplete: function initAutoComplete(initialId) {
        var _this2 = this;

        new this.AutoComplete({
            delay: 500,
            selector: this.els.input,
            minChars: 1,
            cache: false,
            renderItem: this.resource.renderItem,
            source: function source(term, suggest) {
                (0, _apply2.default)(_this2.resource.search, _this2, [term.trim(), suggest]).then(function (found) {
                    return found ? _promise2.default.resolve(true) : suggest([]);
                }).catch(_this2.Error);
            },
            onSelect: function onSelect(e, term, item) {
                var store = _this2.resource.Model.store;
                _this2.selectedModel = (store.id ? store.id : store['_id'])[item.getAttribute('data-id')];
                _this2.emit('itemSelected', _this2.selectedModel);
            }
        });

        if (initialId) {
            this.Xhr({ method: 'get', resource: this.Resource, id: initialId }).then(function (document) {
                document = Array.isArray(document) ? document[0] : document;
                _this2.selectedModel = document;
                _this2.els.input.value = document.label || document.name;
                return _promise2.default.resolve();
            }).catch(this.Error);
        }
    },
    onInputInput: function onInputInput() {
        if (this.els.input.value.trim() === "") this.emit('cleared');
    },
    postRender: function postRender() {
        this.Resource = this.Resource;
        this.Type = this.Type;
        this.resource = this.Resources[this.Type];

        if (this.resource && this.Resource) this.initAutoComplete();

        return this;
    },
    setResource: function setResource(resource) {
        this.Resource = resource;
        this.resource = this.Resources[this.Type];
        return this;
    }
});

},{"../models/Document":24,"./__proto__":109,"./lib/AutoComplete":110,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/promise":236,"babel-runtime/core-js/reflect/apply":237,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246}],106:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {
    postRender: function postRender() {
        var _this = this;

        this.Xhr({
            method: 'get',
            resource: 'verify',
            qs: '{ "token": "' + this.path[1] + '" }'
        }).then(function () {
            return _this.els.message.textContent = 'Your email address has been successfully verified! You are now free to log in.';
        }).catch(function (e) {
            _this.Error(e);
            _this.els.message.textContent = 'We were unable to verify your email address. Please try again or contact us.';
        });

        return this;
    }
});

},{"./__proto__":109,"babel-runtime/helpers/extends":246}],107:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _isInteger = require('babel-runtime/core-js/number/is-integer');

var _isInteger2 = _interopRequireDefault(_isInteger);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Super = require('./__proto__');

module.exports = (0, _extends3.default)({}, Super, {

    DeliveryOption: (0, _create2.default)(Super.Model, { resource: { value: 'deliveryoption' } }),
    GroupDropoffs: (0, _create2.default)(Super.Model, { resource: { value: 'groupdropoff' } }),
    Route: (0, _create2.default)(Super.Model, { resource: { value: 'deliveryroute' } }),
    SkipWeeks: (0, _create2.default)(Super.Model, { resource: { value: 'membershareskipweek' } }),

    Share: require('../models/Share'),

    events: {
        dates: 'click',
        resetBtn: 'click'
    },

    clear: function clear() {
        this.els.dates.innerHTML = '';
        this.els.resetBtn.classList.add('hidden');
    },
    determineDates: function determineDates(dayOfWeek) {
        var _this = this;

        this.els.deliveryDay.textContent = this.Moment().isoWeekday(dayOfWeek).format('dddd');
        this.dates = [];

        if (!(0, _isInteger2.default)(dayOfWeek)) return this;

        var now = this.Moment(),
            nextDeliveryCutoff = now,
            endDate = this.Moment(this.model.share.enddate);

        var deliveryDate = this.Moment(this.model.share.startdate),
            startDay = deliveryDate.day();

        while (startDay != dayOfWeek) {
            deliveryDate.add(1, 'days');
            startDay = this.Moment(deliveryDate).day();
        }

        while (endDate.diff(deliveryDate, 'days') >= 0) {
            var isSkipWeek = this.SkipWeeks.data.find(function (week) {
                return _this.Moment(week.date).week() === _this.Moment(deliveryDate).week();
            }) ? true : false;

            this.dates.push({
                date: this.Moment(deliveryDate),
                unselectable: Boolean(deliveryDate.diff(nextDeliveryCutoff) < 0),
                selected: !isSkipWeek
            });

            deliveryDate.add(7, 'days');
        }

        return this;
    },
    getPatchData: function getPatchData() {
        var _this2 = this;

        var addedDates = [],
            removedDates = [];

        (0, _keys2.default)(this.changedDates).forEach(function (date) {
            var editedStatus = _this2.changedDates[date].editedStatus;

            if (!editedStatus) return;

            var formattedDate = _this2.Moment(date).format("YYYY-MM-DD");
            if (editedStatus === 'selected') addedDates.push(formattedDate);else removedDates.push(formattedDate);
        });

        return {
            addedDates: addedDates,
            removedDates: removedDates,
            allRemoved: (0, _from2.default)(this.els.dates.querySelectorAll('li:not(.selected)')).map(function (el) {
                return _this2.Moment(el.getAttribute('data-date'), 'YYYYMMDD').format('YYYY-MM-DD');
            })
        };
    },
    getWeeksAffected: function getWeeksAffected() {
        var selectableDates = this.dates.filter(function (date) {
            return !date.unselectable;
        });
        return { selectable: selectableDates.length, skipped: selectableDates.filter(function (date) {
                return !date.selected;
            }).length };
    },
    getDayOfWeek: function getDayOfWeek() {
        var delivery = this.model.delivery.data[0];

        return delivery.groupdropoff.id ? this.Xhr({ method: 'get', resource: 'sharegroupdropoff', qs: (0, _stringify2.default)({ shareid: this.model.share.id, groupdropoffid: delivery.groupdropoff.id }) }).then(function (response) {
            return _promise2.default.resolve(response[0].dayofweek);
        }) : delivery.deliveryoption.name === 'farm' ? this.Route.data.find(function (route) {
            return route.label == 'farm';
        }).dayofweek : this.Xhr({
            method: 'get',
            resource: 'zipcoderoute',
            qs: (0, _stringify2.default)({
                zipcode: this.model.customer.member.data.zipcode,
                routeid: { operation: 'join', value: { table: 'deliveryroute', column: 'id' } }
            })
        }).then(function (response) {
            return _promise2.default.resolve(response[0]['deliveryroute.dayofweek']);
        });
    },
    getTotalDates: function getTotalDates() {
        return this.els.dates.querySelectorAll('li.selected').length;
    },
    onDatesClick: function onDatesClick(e) {
        var _this3 = this;

        if (!this.isAdmin) return;
        var el = e.target.closest('li'),
            date = el.getAttribute('data-date');

        if (el.classList.contains('unselectable')) return;

        var editedStatus = void 0;

        if (!this.changedDates[date]) this.changedDates[date] = { initialStatus: el.classList.contains('selected') ? 'selected' : 'removed' };

        el.classList.toggle('selected');
        editedStatus = el.classList.contains('selected') ? 'selected' : 'removed';

        if (editedStatus !== this.changedDates[date].initialStatus) {
            this.changedDates[date].editedStatus = editedStatus;
            el.classList.add('edited');
            this.els.resetBtn.classList.remove('hidden');
        } else {
            this.changedDates[date].editedStatus = undefined;
            el.classList.remove('edited');
        }

        if (!(0, _keys2.default)(this.changedDates).find(function (key) {
            return _this3.changedDates[key].editedStatus !== undefined;
        })) {
            this.els.resetBtn.classList.add('hidden');
            this.emit('reset', this.model);
            return this.slideOut(this.els.editSummary, 'right');
        }

        this.showEditSummary();
    },
    onResetBtnClick: function onResetBtnClick() {
        var _this4 = this;

        this.els.resetBtn.classList.add('hidden');

        (0, _keys2.default)(this.changedDates).forEach(function (key) {
            if (_this4.changedDates[key].editedStatus) {
                var el = _this4.els.dates.querySelector('li[data-date=' + CSS.escape(key));
                el.classList.toggle('selected');
                el.classList.remove('edited');
            }
        });

        this.update(this.model);
        this.emit('reset', this.model);
    },
    renderDates: function renderDates() {
        var _this5 = this;

        this.dates.forEach(function (datum) {
            return _this5.slurpTemplate({ template: _this5.templates.date((0, _extends3.default)({}, datum, { isAdmin: _this5.isAdmin })), insertion: { el: _this5.els.dates } });
        });
        return this;
    },
    showEditSummary: function showEditSummary() {
        var _this6 = this;

        var result = 0,
            added = 0,
            removed = 0;

        this.els.selectedDates.innerHTML = '';
        this.els.removedDates.innerHTML = '';

        (0, _keys2.default)(this.changedDates).forEach(function (date) {
            var editedStatus = _this6.changedDates[date].editedStatus;

            if (editedStatus) {

                editedStatus === 'selected' ? added += 1 : removed += 1;

                _this6.slurpTemplate({
                    insertion: { el: _this6.els[editedStatus + 'Dates'] },
                    template: _this6.templates.summaryColumn({ value: _this6.Moment(date).format("MMM D") })
                });
            }
        });

        result = added - removed;
        this.els.weekChange.textContent = result;
        this.els.weekChange.classList.toggle('is-negative', Boolean(result < 0));

        if (this.isHidden(this.els.editSummary)) this.slideIn(this.els.editSummary, 'right');

        this.emit('adjustment', { added: added, removed: removed });
    },


    templates: {
        date: require('./templates/DeliveryDate'),
        summaryColumn: function summaryColumn(date) {
            return '<li>' + date.value + '</li>';
        }
    },

    update: function update(_ref) {
        var _this7 = this;

        var customer = _ref.customer,
            delivery = _ref.delivery,
            share = _ref.share,
            isAdmin = _ref.isAdmin;

        if (this.updating) return;

        this.isAdmin = isAdmin;
        this.els.editSummary.classList.add('fd-hidden');

        this.updating = true;

        this.model = arguments[0];

        this.changedDates = {};

        return this.Route.get().then(function () {
            return _this7.SkipWeeks.get({ query: { membershareid: share.membershareid } });
        }).then(function () {
            return _this7.getDayOfWeek();
        }).then(function (dayOfWeek) {
            _this7.clear();
            _this7.determineDates(dayOfWeek).renderDates().show();
            return _promise2.default.resolve(_this7.updating = false);
        });
    },
    updateDelivery: function updateDelivery(data) {
        var _this8 = this;

        var modelCopy = JSON.parse((0, _stringify2.default)(this.model));

        return this.DeliveryOption.get({ query: { name: data.deliveryOption } }).then(function () {
            if (_this8.DeliveryOption.data.length) modelCopy.delivery.data[0].deliveryoption = _this8.DeliveryOption.data[0];

            if (!data.groupOption) {
                (0, _keys2.default)(modelCopy.delivery.data[0].groupdropoff).forEach(function (key) {
                    return modelCopy.delivery.data[0].groupdropoff[key] = null;
                });
            }

            return data.groupOption ? _this8.GroupDropoffs.get({ query: { name: data.groupOption } }).then(function () {
                if (_this8.GroupDropoffs.data.length) modelCopy.delivery.data[0].groupdropoff = _this8.GroupDropoffs.data[0];
                _this8.update(modelCopy);
            }) : _this8.update(modelCopy);
        }).catch(this.Error);
    }
});

},{"../models/Share":40,"./__proto__":109,"./templates/DeliveryDate":145,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/number/is-integer":223,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],108:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./__proto__'), {

    events: {
        customizeBtn: 'click',
        listSelect: 'change',
        viewBtn: 'click',
        rows: 'click',
        sendEmailBtn: 'click',
        upload: 'change'
    },

    model: require('../models/WeeklyReminder'),

    Spinner: require('../plugins/spinner.js'),

    clearTable: function clearTable() {
        this.removeChildren(this.els.columns);
        this.removeChildren(this.els.rows);
    },
    handleColumns: function handleColumns(rows) {
        var _this = this;

        this.model.metadata.columns.forEach(function (column) {
            return _this.slurpTemplate({
                template: '<li>' + column.label + '</li>',
                insertion: { el: _this.els.columns }
            });
        });
    },
    handleRows: function handleRows(rows) {
        var _this2 = this;

        var template = rows.map(function (row) {
            var className = row.isSkipping ? 'isSkipping' : '';
            var columns = _this2.model.metadata.columns.map(function (column) {
                return '<li>' + (row[column.name] || '') + '</li>';
            }).join('');
            return '<ol data-id="' + row.memberShareId + '" class="' + className + '">' + _this2.Format.GetIcon('minus') + _this2.Format.GetIcon('plus') + columns + '</ol>';
        }).join('');

        this.slurpTemplate({ template: template, insertion: { el: this.els.rows } });
    },
    noResults: function noResults() {
        this.els.empty.classList.remove('fd-hidden');
    },
    onCustomizeBtnClick: function onCustomizeBtnClick() {
        this.els.customArea.classList.toggle('fd-hidden');
    },
    onListSelectChange: function onListSelectChange(e) {
        this.selectedCategory = e.target.value;
        this.selectedCategoryEl.parentNode.classList.add('fd-hidden');
        this.selectedCategoryEl = this.els[e.target.value + 'Select'];
        this.selectedCategoryEl.parentNode.classList.remove('fd-hidden');
    },
    onRowsClick: function onRowsClick(e) {
        var svgEl = e.target.closest('SVG');
        if (!svgEl) return;

        var row = e.target.closest('OL');
        var datum = this.model.data.find(function (datum) {
            return datum.memberShareId == row.getAttribute('data-id');
        });

        row.classList.toggle('isSkipping');
        datum.isSkipping = row.classList.contains('isSkipping');
    },
    onSendEmailBtnClick: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            var emailList, emails, response;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!this.isSubmitting) {
                                _context.next = 2;
                                break;
                            }

                            return _context.abrupt('return');

                        case 2:
                            this.isSubmitting = true;

                            this.spinner.spin();
                            this.els.sendEmailBtn.appendChild(this.spinner.el);
                            this.els.sendEmailBtn.classList.add('has-spinner');

                            emailList = this.model.data.filter(function (datum) {
                                return !datum.isSkipping;
                            });


                            this.model.emailIsCustom = this.els.customizeBtn.checked;
                            this.model.customTextValue = this.els.customText.value;
                            this.model.replaceDefaultTemplate = this.els.replaceDefaultBtn.checked;
                            this.model.subjectLine = this.els.subjectLine.value;

                            emails = this.model.sortIntoEmails(emailList);
                            _context.next = 14;
                            return this.Xhr({
                                method: 'post',
                                resource: 'weekly-reminder',
                                data: (0, _stringify2.default)({ emails: emails, attachments: this.model.attachments })
                            });

                        case 14:
                            response = _context.sent;


                            this.isSubmitting = false;
                            this.spinner.stop();
                            this.els.sendEmailBtn.classList.remove('has-spinner');
                            return _context.abrupt('return', response.error ? this.Toast.showMessage('error', response.error) : this.Toast.showMessage('success', 'Emails sent!'));

                        case 19:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function onSendEmailBtnClick() {
            return _ref.apply(this, arguments);
        }

        return onSendEmailBtnClick;
    }(),
    onUploadChange: function onUploadChange() {
        var _this3 = this;

        var files = (0, _from2.default)(this.els.upload.files);

        if (!files.length) {
            this.model.attachments = [];
            return;
        }

        files.forEach(function (file) {
            var reader = new FileReader();

            reader.addEventListener('load', function (e) {
                var base64String = reader.result.slice(reader.result.indexOf('base64') + 7);

                _this3.model.attachments.push({
                    content: base64String,
                    filename: file.name,
                    type: file.type,
                    disposition: 'attachment'
                });
            });

            reader.readAsDataURL(file);
        });
    },
    onViewBtnClick: function () {
        var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            var _this4 = this;

            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return this.model.get({ query: { category: this.selectedCategory, selection: this.selectedCategoryEl.value } });

                        case 2:

                            this.clearTable();

                            if (!(this.model.data.length == 0)) {
                                _context2.next = 5;
                                break;
                            }

                            return _context2.abrupt('return', this.noResults());

                        case 5:

                            this.els.empty.classList.add('fd-hidden');

                            _context2.next = 8;
                            return _promise2.default.all(this.model.data.map(function (customer) {
                                return _this4.model.getSkipWeekStatus(customer);
                            }));

                        case 8:

                            this.handleColumns(this.model.data);
                            this.handleRows(this.model.data);

                            this.els.sendEmailBtn.parentNode.classList.remove('fd-hidden');
                            this.slideIn(this.els.sendEmailBtn.parentNode, 'right');
                            this.slideIn(this.els.results, 'right');

                        case 13:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function onViewBtnClick() {
            return _ref2.apply(this, arguments);
        }

        return onViewBtnClick;
    }(),
    postRender: function postRender() {
        var _this5 = this;

        _promise2.default.all([this.model.ContactInfo.get(), this.model.CurrentGroups.get(), this.model.DeliveryRoute.get({ query: { label: 'farm' } })]).then(function () {
            _this5.slurpTemplate({
                insertion: { el: _this5.els.daySelect },
                template: _this5.model.getDayOptions()
            });

            _this5.slurpTemplate({
                insertion: { el: _this5.els.singleGroupSelect },
                template: _this5.model.getGroupNameOptions()
            });

            _this5.selectedCategory = 'day';
            _this5.selectedCategoryEl = _this5.els.daySelect;

            _this5.spinner = new _this5.Spinner({
                color: '#000',
                lines: 7,
                length: 4,
                radius: 16,
                scale: 0.6
            });
        }).catch(this.Error);

        return this;
    }
});

},{"../models/WeeklyReminder":43,"../plugins/spinner.js":46,"./__proto__":109,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/asyncToGenerator":244,"babel-runtime/helpers/extends":246,"babel-runtime/regenerator":250}],109:[function(require,module,exports){
'use strict';

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('../../../lib/MyObject').prototype, require('events').EventEmitter.prototype, {

    Currency: new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2
    }),

    Error: require('../../../lib/MyError'),

    Format: require('../Format'),

    Model: require('../models/__proto__'),

    Moment: require('moment'),

    OptimizedResize: require('./lib/OptimizedResize'),

    UUID: require('uuid-v4'),

    P: function P(fun) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var thisArg = arguments[2];
        return new _promise2.default(function (resolve, reject) {
            return (0, _apply2.default)(fun, thisArg || undefined, args.concat(function (e) {
                for (var _len = arguments.length, callback = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    callback[_key - 1] = arguments[_key];
                }

                return e ? reject(e) : resolve(callback);
            }));
        });
    },

    Xhr: require('../Xhr'),

    bindEvent: function bindEvent(key, event, el) {
        var _this = this;

        var els = el ? [el] : Array.isArray(this.els[key]) ? this.els[key] : [this.els[key]];
        els.forEach(function (el) {
            return el.addEventListener(event || 'click', function (e) {
                return _this['on' + _this.capitalizeFirstLetter(key) + _this.capitalizeFirstLetter(event)](e);
            });
        });
    },


    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    constructor: function constructor() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


        if (opts.events) {
            (0, _extends3.default)(this.events, opts.events);delete opts.events;
        }
        (0, _extends3.default)(this, opts);

        this.subviewElements = [];

        if (this.requiresLogin && !this.user.isLoggedIn()) return this.handleLogin();
        if (this.user && !this.isAllowed(this.user.attributes)) return this.scootAway();

        return this.initialize().render();
    },
    delegateEvents: function delegateEvents(key, el) {
        var _this2 = this;

        var type = (0, _typeof3.default)(this.events[key]);

        if (type === "string") {
            this.bindEvent(key, this.events[key], el);
        } else if (Array.isArray(this.events[key])) {
            this.events[key].forEach(function (eventObj) {
                return _this2.bindEvent(key, eventObj);
            });
        } else {
            this.bindEvent(key, this.events[key].event);
        }
    },
    delete: function _delete() {
        var _this3 = this;

        return this.hide().then(function () {
            _this3.els.container.parentNode.removeChild(_this3.els.container);
            return _promise2.default.resolve(_this3.emit('deleted'));
        });
    },


    events: {},

    fadeInImage: function fadeInImage(el) {
        var _this4 = this;

        el.onload = function () {
            _this4.emit('imgLoaded', el);
            el.removeAttribute('data-src');
        };

        el.setAttribute('src', el.getAttribute('data-src'));
    },
    getContainer: function getContainer() {
        return this.els.container;
    },
    getData: function getData() {
        if (!this.model) this.model = (0, _create2.default)(this.Model, { resource: { value: this.name } });

        return this.model.get();
    },
    getTemplateOptions: function getTemplateOptions() {
        var rv = (0, _extends3.default)(this.user ? { user: this.user.data } : {}, this.Format);

        if (this.model) {
            rv.model = this.model.data;

            if (this.model.meta) rv.meta = this.model.meta;
            if (this.model.attributes) rv.attributes = this.model.attributes;
        }

        if (this.templateOpts) rv.opts = typeof this.templateOpts === 'function' ? this.templateOpts() : this.templateOpts || {};

        return rv;
    },
    handleLogin: function handleLogin() {
        var _this5 = this;

        this.factory.create('login', { insertion: { el: document.querySelector('#content') } }).on("success", function (userData) {
            if (!_this5.isAllowed(userData)) return _this5.scootAway();

            _this5.user.set(userData);
            _this5.user.trigger('loggedIn');

            return _this5.onLogin();
        });

        return this;
    },
    hide: function hide(isSlow) {
        var _this6 = this;

        if (!this.els || this.isHiding) return _promise2.default.resolve();

        this.isHiding = true;
        return this.hideEl(this.els.container, isSlow).then(function () {
            return _promise2.default.resolve(_this6.isHiding = false);
        });
    },
    hideSync: function hideSync() {
        this.els.container.classList.add('fd-hidden');return this;
    },
    _hideEl: function _hideEl(el, resolve, hash, isSlow) {
        el.removeEventListener('animationend', this[hash]);
        el.classList.add('fd-hidden');
        el.classList.remove('animate-out' + (isSlow ? '-slow' : ''));
        delete this[hash];
        resolve();
    },
    hideEl: function hideEl(el, isSlow) {
        var _this7 = this;

        if (this.isHidden(el)) return _promise2.default.resolve();

        var uuid = this.UUID(),
            hash = uuid + 'Hide';

        return new _promise2.default(function (resolve) {
            _this7[hash] = function (e) {
                return _this7._hideEl(el, resolve, hash, isSlow);
            };
            el.addEventListener('animationend', _this7[hash]);
            el.classList.add('animate-out' + (isSlow ? '-slow' : ''));
        });
    },
    htmlToFragment: function htmlToFragment(str) {
        var range = document.createRange();
        // make the parent of the first div in the document becomes the context node
        range.selectNode(document.getElementsByTagName("div").item(0));
        return range.createContextualFragment(str);
    },
    initialize: function initialize() {
        return (0, _extends3.default)(this, { els: {}, slurp: { attr: 'data-js', view: 'data-view', name: 'data-name', img: 'data-src', bgImg: 'data-bg' }, views: {} });
    },
    insertToDom: function insertToDom(fragment, options) {
        var insertion = typeof options.insertion === 'function' ? options.insertion() : options.insertion;

        insertion.method === 'insertBefore' ? insertion.el.parentNode.insertBefore(fragment, insertion.el) : insertion.el[insertion.method || 'appendChild'](fragment);
    },
    isAllowed: function isAllowed(user) {
        if (!this.requiresRole) return true;
        return this.requiresRole && user.roles.includes(this.requiresRole);
    },
    isHidden: function isHidden(el) {
        return el ? el.classList.contains('fd-hidden') : this.els.container.classList.contains('fd-hidden');
    },
    loadBgImage: function loadBgImage(el) {
        var img = new Image();

        img.onload = function () {
            return el.classList.add('bg-loaded');
        };
        img.src = this.Format.ImageSrc(el.getAttribute('data-bg'));
    },
    onLogin: function onLogin() {
        this.initialize().render();
    },
    onNavigation: function onNavigation(path) {
        return this.show().catch(this.Error);
    },
    showNoAccess: function showNoAccess() {
        alert("No privileges, son");
        return this;
    },
    postRender: function postRender() {
        return this;
    },
    removeChildren: function removeChildren(el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    },
    render: function render() {
        if (this.data) this.model = (0, _create2.default)(this.Model, {}).constructor(this.data);

        this.slurpTemplate({
            insertion: this.insertion || { el: document.body },
            isView: true,
            storeFragment: this.storeFragment,
            template: this.template(this.getTemplateOptions(), { Moment: this.Moment })
        });

        this.renderSubviews();

        if (this.size) {
            this.size();this.OptimizedResize.add(this.size.bind(this));
        }

        return this.postRender();
    },
    renderSubviews: function renderSubviews() {
        var _this8 = this;

        this.subviewElements.forEach(function (obj) {
            var name = obj.name || obj.view;

            var opts = {};

            if (_this8.Views && _this8.Views[obj.view]) opts = (0, _typeof3.default)(_this8.Views[obj.view]) === "object" ? _this8.Views[obj.view] : (0, _apply2.default)(_this8.Views[obj.view], _this8, []);
            if (_this8.Views && _this8.Views[name]) opts = (0, _typeof3.default)(_this8.Views[name]) === "object" ? _this8.Views[name] : (0, _apply2.default)(_this8.Views[name], _this8, []);

            _this8.views[name] = _this8.factory.create(obj.view, (0, _extends3.default)({ insertion: { el: obj.el, method: 'insertBefore' } }, opts));

            if (_this8.events.views) {
                if (_this8.events.views[name]) _this8.events.views[name].forEach(function (arr) {
                    return _this8.views[name].on(arr[0], function (eventData) {
                        return (0, _apply2.default)(arr[1], _this8, [eventData]);
                    });
                });else if (_this8.events.views[obj.view]) _this8.events.views[obj.view].forEach(function (arr) {
                    return _this8.views[name].on(arr[0], function (eventData) {
                        return (0, _apply2.default)(arr[1], _this8, [eventData]);
                    });
                });
            }

            if (obj.el.classList.contains('fd-hidden')) _this8.views[name].hideSync();
            obj.el.remove();
        });

        this.subviewElements = [];

        return this;
    },


    requiresLogin: false,

    scootAway: function scootAway() {
        var _this9 = this;

        this.Toast.showMessage('error', 'You are not allowed here.  Sorry.').catch(function (e) {
            _this9.Error(e);_this9.emit('navigate', '/');
        }).then(function () {
            return _this9.emit('navigate', '/');
        });

        return this;
    },
    show: function show(isSlow) {
        return this.showEl(this.els.container, isSlow);
    },
    showSync: function showSync() {
        this.els.container.classList.remove('fd-hidden');return this;
    },
    _showEl: function _showEl(el, resolve, hash, isSlow) {
        el.removeEventListener('animationend', this[hash]);
        el.classList.remove('animate-in' + (isSlow ? '-slow' : ''));
        delete this[hash];
        resolve();
    },
    showEl: function showEl(el, isSlow) {
        var _this10 = this;

        var uuid = this.UUID(),
            hash = uuid + 'Show';

        return new _promise2.default(function (resolve) {
            _this10[hash] = function (e) {
                return _this10._showEl(el, resolve, hash, isSlow);
            };
            el.addEventListener('animationend', _this10[hash]);
            el.classList.remove('fd-hidden');
            el.classList.add('animate-in' + (isSlow ? '-slow' : ''));
        });
    },
    slideIn: function slideIn(el, direction) {
        var onSlideEnd = function onSlideEnd() {
            el.classList.remove('slide-in-' + direction);
            el.removeEventListener('animationend', onSlideEnd);
        };

        el.addEventListener('animationend', onSlideEnd);
        if (el.classList.contains('fd-hidden')) el.classList.remove('fd-hidden');
        el.classList.add('slide-in-' + direction);
    },
    slideOut: function slideOut(el, direction) {
        var onSlideEnd = function onSlideEnd() {
            el.classList.add('fd-hidden');
            el.classList.remove('slide-out-' + direction);
            el.removeEventListener('animationend', onSlideEnd);
        };

        el.addEventListener('animationend', onSlideEnd);
        el.classList.add('slide-out-' + direction);
    },
    slurpEl: function slurpEl(el) {
        var key = el.getAttribute(this.slurp.attr) || 'container';

        if (key === 'container') el.classList.add(this.name);

        this.els[key] = Array.isArray(this.els[key]) ? this.els[key].concat(el) : this.els[key] !== undefined ? [this.els[key], el] : el;

        el.removeAttribute(this.slurp.attr);

        if (this.events[key]) this.delegateEvents(key, el);
    },
    slurpTemplate: function slurpTemplate(options) {
        var _this11 = this;

        var fragment = this.htmlToFragment(options.template),
            selector = '[' + this.slurp.attr + ']',
            viewSelector = '[' + this.slurp.view + ']',
            imgSelector = '[' + this.slurp.img + ']',
            bgImgSelector = '[' + this.slurp.bgImg + ']',
            firstEl = fragment.querySelector('*');

        if (options.isView || firstEl.getAttribute(this.slurp.attr)) this.slurpEl(firstEl);

        (0, _from2.default)(fragment.querySelectorAll(selector + ', ' + viewSelector + ', ' + imgSelector + ', ' + bgImgSelector)).forEach(function (el) {
            if (el.hasAttribute(_this11.slurp.attr)) {
                _this11.slurpEl(el);
            } else if (el.hasAttribute(_this11.slurp.img)) return _this11.fadeInImage(el);else if (el.hasAttribute(_this11.slurp.bgImg)) return _this11.loadBgImage(el);else if (el.hasAttribute(_this11.slurp.view)) {
                _this11.subviewElements.push({ el: el, view: el.getAttribute(_this11.slurp.view), name: el.getAttribute(_this11.slurp.name) });
            }
        });

        if (options.storeFragment) return (0, _extends3.default)(this, { fragment: fragment });

        this.insertToDom(fragment, options);

        if (options.renderSubviews) this.renderSubviews();

        return this;
    }
});

},{"../../../lib/MyError":203,"../../../lib/MyObject":204,"../Format":5,"../Xhr":7,"../models/__proto__":44,"./lib/OptimizedResize":111,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/promise":236,"babel-runtime/core-js/reflect/apply":237,"babel-runtime/helpers/extends":246,"babel-runtime/helpers/typeof":249,"events":429,"moment":"moment","uuid-v4":440}],110:[function(require,module,exports){
'use strict';

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function () {
    // "use strict";
    function autoComplete(options) {
        if (!document.querySelector) return;

        // helpers
        function hasClass(el, className) {
            return el.classList ? el.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(el.className);
        }

        function addEvent(el, type, handler) {
            if (el.attachEvent) el.attachEvent('on' + type, handler);else el.addEventListener(type, handler);
        }
        function removeEvent(el, type, handler) {
            // if (el.removeEventListener) not working in IE11
            if (el.detachEvent) el.detachEvent('on' + type, handler);else el.removeEventListener(type, handler);
        }
        function live(elClass, event, cb, context) {
            addEvent(context || document, event, function (e) {
                var found,
                    el = e.target || e.srcElement;
                while (el && !(found = hasClass(el, elClass))) {
                    el = el.parentElement;
                }if (found) cb.call(el, e);
            });
        }

        var o = {
            selector: 0,
            source: 0,
            minChars: 3,
            delay: 150,
            offsetLeft: 0,
            offsetTop: 1,
            cache: 1,
            menuClass: '',
            renderItem: function renderItem(item, search) {
                // escape special characters
                search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
                return '<div class="autocomplete-suggestion" data-val="' + item + '">' + item.replace(re, "<b>$1</b>") + '</div>';
            },
            onSelect: function onSelect(e, term, item) {}
        };
        for (var k in options) {
            if (options.hasOwnProperty(k)) o[k] = options[k];
        }

        // init
        var elems = (0, _typeof3.default)(o.selector) == 'object' ? [o.selector] : document.querySelectorAll(o.selector);
        for (var i = 0; i < elems.length; i++) {
            var that = elems[i];

            // create suggestions container "sc"
            that.sc = document.createElement('div');
            that.sc.className = 'autocomplete-suggestions ' + o.menuClass;

            that.autocompleteAttr = that.getAttribute('autocomplete');
            that.setAttribute('autocomplete', 'off');
            that.cache = {};
            that.last_val = '';

            that.updateSC = function (resize, next) {
                var rect = that.getBoundingClientRect();
                that.sc.style.left = Math.round(rect.left + (window.pageXOffset || document.documentElement.scrollLeft) + o.offsetLeft) + 'px';
                that.sc.style.top = Math.round(rect.bottom + (window.pageYOffset || document.documentElement.scrollTop) + o.offsetTop) + 'px';
                that.sc.style.width = Math.round(rect.right - rect.left) + 'px'; // outerWidth
                if (!resize) {
                    that.sc.style.display = 'block';
                    if (!that.sc.maxHeight) {
                        that.sc.maxHeight = parseInt((window.getComputedStyle ? getComputedStyle(that.sc, null) : that.sc.currentStyle).maxHeight);
                    }
                    if (!that.sc.suggestionHeight) that.sc.suggestionHeight = that.sc.querySelector('.autocomplete-suggestion').offsetHeight;
                    if (that.sc.suggestionHeight) if (!next) that.sc.scrollTop = 0;else {
                        var scrTop = that.sc.scrollTop,
                            selTop = next.getBoundingClientRect().top - that.sc.getBoundingClientRect().top;
                        if (selTop + that.sc.suggestionHeight - that.sc.maxHeight > 0) that.sc.scrollTop = selTop + that.sc.suggestionHeight + scrTop - that.sc.maxHeight;else if (selTop < 0) that.sc.scrollTop = selTop + scrTop;
                    }
                }
            };
            addEvent(window, 'resize', that.updateSC);
            document.body.appendChild(that.sc);

            live('autocomplete-suggestion', 'mouseleave', function (e) {
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel) setTimeout(function () {
                    sel.className = sel.className.replace('selected', '');
                }, 20);
            }, that.sc);

            live('autocomplete-suggestion', 'mouseover', function (e) {
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel) sel.className = sel.className.replace('selected', '');
                this.className += ' selected';
            }, that.sc);

            live('autocomplete-suggestion', 'mousedown', function (e) {
                if (hasClass(this, 'autocomplete-suggestion')) {
                    // else outside click
                    var v = this.getAttribute('data-val');
                    that.value = v;
                    o.onSelect(e, v, this);
                    that.sc.style.display = 'none';
                }
            }, that.sc);

            that.blurHandler = function () {
                try {
                    var over_sb = document.querySelector('.autocomplete-suggestions:hover');
                } catch (e) {
                    var over_sb = 0;
                }
                if (!over_sb) {
                    that.last_val = that.value;
                    that.sc.style.display = 'none';
                    setTimeout(function () {
                        that.sc.style.display = 'none';
                    }, 350); // hide suggestions on fast input
                } else if (that !== document.activeElement) setTimeout(function () {
                    that.focus();
                }, 20);
            };
            addEvent(that, 'blur', that.blurHandler);

            var suggest = function suggest(data) {
                var val = that.value;
                that.cache[val] = data;
                if (data.length && val.length >= o.minChars) {
                    var s = '';
                    for (var i = 0; i < data.length; i++) {
                        s += o.renderItem(data[i], val);
                    }that.sc.innerHTML = s;
                    that.updateSC(0);
                } else that.sc.style.display = 'none';
            };

            that.keydownHandler = function (e) {
                var key = window.event ? e.keyCode : e.which;
                // down (40), up (38)
                if ((key == 40 || key == 38) && that.sc.innerHTML) {
                    var next,
                        sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                    if (!sel) {
                        next = key == 40 ? that.sc.querySelector('.autocomplete-suggestion') : that.sc.childNodes[that.sc.childNodes.length - 1]; // first : last
                        next.className += ' selected';
                        that.value = next.getAttribute('data-val');
                    } else {
                        next = key == 40 ? sel.nextSibling : sel.previousSibling;
                        if (next) {
                            sel.className = sel.className.replace('selected', '');
                            next.className += ' selected';
                            that.value = next.getAttribute('data-val');
                        } else {
                            sel.className = sel.className.replace('selected', '');that.value = that.last_val;next = 0;
                        }
                    }
                    that.updateSC(0, next);
                    return false;
                }
                // esc
                else if (key == 27) {
                        that.value = that.last_val;that.sc.style.display = 'none';
                    }
                    // enter
                    else if (key == 13 || key == 9) {
                            var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                            if (sel && that.sc.style.display != 'none') {
                                o.onSelect(e, sel.getAttribute('data-val'), sel);setTimeout(function () {
                                    that.sc.style.display = 'none';
                                }, 20);
                            }
                        }
            };
            addEvent(that, 'keydown', that.keydownHandler);

            that.keyupHandler = function (e) {
                var key = window.event ? e.keyCode : e.which;
                if (!key || (key < 35 || key > 40) && key != 13 && key != 27) {
                    var val = that.value;
                    if (val.length >= o.minChars) {
                        if (val != that.last_val) {
                            that.last_val = val;
                            clearTimeout(that.timer);
                            if (o.cache) {
                                if (val in that.cache) {
                                    suggest(that.cache[val]);return;
                                }
                                // no requests if previous suggestions were empty
                                for (var i = 1; i < val.length - o.minChars; i++) {
                                    var part = val.slice(0, val.length - i);
                                    if (part in that.cache && !that.cache[part].length) {
                                        suggest([]);return;
                                    }
                                }
                            }
                            that.timer = setTimeout(function () {
                                o.source(val, suggest);
                            }, o.delay);
                        }
                    } else {
                        that.last_val = val;
                        that.sc.style.display = 'none';
                    }
                }
            };
            addEvent(that, 'keyup', that.keyupHandler);

            that.focusHandler = function (e) {
                that.last_val = '\n';
                that.keyupHandler(e);
            };
            if (!o.minChars) addEvent(that, 'focus', that.focusHandler);
        }

        // public destroy method
        this.destroy = function () {
            for (var i = 0; i < elems.length; i++) {
                var that = elems[i];
                removeEvent(window, 'resize', that.updateSC);
                removeEvent(that, 'blur', that.blurHandler);
                removeEvent(that, 'focus', that.focusHandler);
                removeEvent(that, 'keydown', that.keydownHandler);
                removeEvent(that, 'keyup', that.keyupHandler);
                if (that.autocompleteAttr) that.setAttribute('autocomplete', that.autocompleteAttr);else that.removeAttribute('autocomplete');
                document.body.removeChild(that.sc);
                that = null;
            }
        };
    }
    return autoComplete;
}();

},{"babel-runtime/helpers/typeof":249}],111:[function(require,module,exports){
'use strict';

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _create2.default)({
    add: function add(callback) {
        if (!this.callbacks.length) window.addEventListener('resize', this.onResize.bind(this));
        this.callbacks.push(callback);
    },
    onResize: function onResize() {
        if (this.running) return;

        this.running = true;

        window.requestAnimationFrame ? window.requestAnimationFrame(this.runCallbacks.bind(this)) : setTimeout(this.runCallbacks, 66);
    },
    runCallbacks: function runCallbacks() {
        this.callbacks = this.callbacks.filter(function (callback) {
            return callback();
        });
        this.running = false;
    }
}, { callbacks: { writable: true, value: [] }, running: { writable: true, value: false } });

},{"babel-runtime/core-js/object/create":226}],112:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MyView = require('./MyView'),
    Modal = function Modal() {
    return MyView.apply(this, arguments);
};

MyView.prototype._.extend(Modal.prototype, MyView.prototype, {
    checkForEnter: function checkForEnter(e) {
        if (e.keyCode === 13) this.emitConfirmation();
    },


    emitConfirmation: function emitConfirmation() {
        this.emit('submit', this.getFormData());
    },

    events: {
        'confirmBtn': { event: 'click', selector: '', method: 'emitConfirmation' }
    },

    hide: function hide(options) {

        this.templateData = this._.pick(this.templateData, this.templateDataKeys);

        this.templateData.container.modal('hide');

        this.templateData.title.text('');
        this.templateData.header.show();
        this.templateData.body.removeClass('hide').empty();
        this.templateData.footer.show();
        this.templateData.cancelBtn.show().text('Cancel');
        this.templateData.closeBtn.show();
        this.templateData.confirmBtn.show().text('Save');

        return this;
    },

    postRender: function postRender() {
        var _this = this;

        this.$(document).on('keyup', this.checkForEnter.bind(this));

        this.templateData.container.on('hidden.bs.modal', function () {
            _this.hide({ reset: true });
            _this.emit('hidden');
            _this.removeAllListeners('submit');
        });

        this.templateData.container.on('shown.bs.modal', function () {
            var firstInput = _this.$('.modal-body input:first');
            _this.emit('shown');
            if (firstInput.length && !/date/.test(firstInput.attr('id'))) firstInput.focus();
        });

        return this;
    },

    requiresLogin: false,

    show: function show(options) {

        this.templateDataKeys = (0, _keys2.default)(this.templateData);

        var bsOpts = { show: true };

        if (options.title) {
            this.templateData.title.text(options.title);
            this.templateData.header.show();
        } else {
            this.templateData.header.hide();
        }

        if (options.body) {
            this.templateData.body.removeClass('hide');
            options.body.charAt(0) === '<' ? this.slurpTemplate({ template: options.body, insertion: { $el: this.templateData.body, method: 'append' } }) : this.templateData.body.html(options.body);
        } else if (!options.body && this.templateData.body.children().length === 0) {
            this.templateData.body.addClass('hide');
        }

        if (options.hideFooter) this.templateData.footer.hide();

        if (options.confirmText) this.templateData.confirmBtn.text(options.confirmText);

        if (options.hideCancelBtn) this.templateData.cancelBtn.hide();
        if (options.cancelText) this.templateData.cancelBtn.text(options.cancelText);

        if (options.static) {
            bsOpts.backdrop = 'static';
            bsOpts.keyboard = false;
            this.templateData.closeBtn.hide();
        }

        this.templateData.container.modal(bsOpts);

        return this;
    },


    template: require('./templates/Modal'),

    updateContent: function updateContent(updates) {
        var _this2 = this;

        this._.updates.each(function (value, key) {
            return _this2.templateData[key].html(value);
        });
    }

});

module.exports = new Modal({ container: MyView.prototype.$('body') });

},{"./MyView":94,"./templates/Modal":170,"babel-runtime/core-js/object/keys":233}],113:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _isInteger = require('babel-runtime/core-js/number/is-integer');

var _isInteger2 = _interopRequireDefault(_isInteger);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = require('../util/List'),
    DateSelection = function DateSelection() {
    return List.apply(this, arguments);
};

(0, _extends3.default)(DateSelection.prototype, List.prototype, {

    ItemView: require('./PickupDates'),

    collection: { comparator: 'startEpoch' },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares };
    },
    itemModels: function itemModels() {
        return this.signupData.shares.models;
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.signupData.shares.on('add', function (share) {
            return _this.items.add(share);
        }).on('remove', function (share) {
            return _this.items.remove(share);
        });

        this.preValidate();
    },
    preValidate: function preValidate() {
        var _this2 = this;

        this.goBack = false;

        this.items.forEach(function (share) {
            var selectedDelivery = share.get('selectedDelivery');

            if (!(0, _isInteger2.default)(selectedDelivery.dayofweek) || !selectedDelivery.starttime || !selectedDelivery.starttime) {
                share.set({ selectedDelivery: {} });
                _this2.goBack = true;
            }
        });
    },


    requiresLogin: false,

    selection: true,

    show: function show() {
        List.prototype.show.call(this);

        this.preValidate();

        return this;
    },


    template: require('../../templates/signup/dateSelection'),

    validate: function validate() {
        var _this3 = this;

        var valid = true,
            errorViews = [],
            targetErrorView = null;

        (0, _keys2.default)(this.itemViews).forEach(function (id) {
            if (!_this3.itemViews[id].valid) {
                valid = false;
                errorViews.push(_this3.itemViews[id].templateData.container);
                _this3.itemViews[id].templateData.container.addClass('has-error');
            }
        });

        if (errorViews.length) {
            targetErrorView = errorViews.slice(-1)[0];
            this.$('html, body').animate({
                scrollTop: targetErrorView.offset().top
            }, 500);
        }

        if (valid) {
            //.reject( deliveryDay => deliveryDay.get('unselectable') )

            this.items.forEach(function (item) {
                return item.set('skipDays', _this3._(item.get('deliveryDates').reject(function (deliveryDay) {
                    return _this3.itemViews[item.id].selectedItems[deliveryDay.id] ? true : false;
                })).map(function (deliveryDay) {
                    return deliveryDay.id;
                }));
            });
        }

        return valid;
    }
});

module.exports = DateSelection;

},{"../../templates/signup/dateSelection":51,"../util/List":200,"./PickupDates":123,"babel-runtime/core-js/number/is-integer":223,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/extends":246}],114:[function(require,module,exports){
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = require('../util/List'),
    Delivery = function Delivery() {
    return List.apply(this, arguments);
};

(0, _extends3.default)(Delivery.prototype, List.prototype, {

    ItemView: require('./DeliveryOptions'),

    Models: {
        DeliveryRoute: require('../../models/DeliveryRoute')
    },

    collection: { comparator: 'startEpoch' },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares, signupData: this.signupData };
    },
    itemModels: function itemModels() {
        return this.signupData.shares.models;
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.signupData.shares.on('add', function (share) {
            return _this.items.add(share);
        }).on('remove', function (share) {
            return _this.items.remove(share);
        });
    },


    requiresLogin: false,

    template: require('../../templates/signup/delivery'),

    templates: {
        verifyAddress: require('../../templates/signup/verifyAddress')
    },

    validate: function validate() {
        var _this2 = this;

        var valid = true,
            errorViews = [],
            targetErrorView = null,
            homeDeliverySelected = false,
            addressModel = this.user.get('addressModel'),
            postalCode = addressModel && addressModel.postalCode ? addressModel.postalCode : undefined,
            deferred = this.Q.defer();

        (0, _keys2.default)(this.itemViews).forEach(function (id) {
            if (!_this2.itemViews[id].valid) {
                valid = false;
                errorViews.push(_this2.itemViews[id].templateData.container);
                _this2.itemViews[id].templateData.container.addClass('has-error');
            }
        });

        if (!valid) return false;

        (0, _keys2.default)(this.itemViews).forEach(function (id) {
            _this2.items.get(id).set('selectedDelivery', (0, _extends3.default)({}, _this2.itemViews[id].selectedDelivery));
            if (_this2.itemViews[id].selectedDelivery.isHome) homeDeliverySelected = true;
        });

        if (errorViews.length) {
            targetErrorView = errorViews.slice(-1)[0];
            this.$('html, body').animate({
                scrollTop: targetErrorView.offset().top
            }, 500);
        }

        if (!valid) return false;

        if (homeDeliverySelected && this.user.get('customAddress')) {
            this.modalView.show({
                body: this.templates.verifyAddress({ address: this.user.get('address'), zipCode: postalCode }),
                title: 'Verify Adress' }).on('hidden', function () {

                (0, _keys2.default)(_this2.itemViews).forEach(function (id) {
                    var selectedDelivery = _this2.items.get(id).get('selectedDelivery');
                    if (!selectedDelivery.dayofweek || !selectedDelivery.starttime || !selectedDelivery.endtime) deferred.reject();
                });

                deferred.resolve();
            }).on('submit', function () {
                var zipRoute = new (_this2.Model.extend({ parse: function parse(response) {
                        return response[0];
                    }, urlRoot: "/zipcoderoute" }))(),
                    homeDeliveryRoute = new _this2.Models.DeliveryRoute(),
                    userAttributes;

                _this2.$('#zipCodeFormGroup').removeClass('has-error');
                _this2.$('#zipCodeHelpBlock').addClass('hide');

                if (!_this2.$('#verifiedZipCode').val().length) {
                    _this2.$('#zipCodeFormGroup').addClass('has-error');
                    _this2.$('#zipCodeHelpBlock').removeClass('hide');
                    return;
                }

                _this2.Q(zipRoute.fetch({ data: { zipcode: _this2.$('#verifiedZipCode').val() } })).then(function () {
                    if ((0, _keys2.default)(zipRoute.attributes).length === 0) {
                        _this2.$('#zipCodeFormGroup').addClass('has-error');
                        _this2.$('#zipCodeHelpBlock').removeClass('hide');
                        return;
                    }

                    return _this2.Q(homeDeliveryRoute.set({ id: zipRoute.get('routeid') }).fetch()).then(function () {
                        (0, _keys2.default)(_this2.itemViews).forEach(function (id) {
                            var selectedDelivery = (0, _extends3.default)({}, _this2.itemViews[id].selectedDelivery, homeDeliveryRoute.pick(['dayofweek', 'starttime', 'endtime']));
                            if (_this2.itemViews[id].selectedDelivery.isHome) {
                                _this2.items.get(id).set('selectedDelivery', selectedDelivery);
                                _this2.itemViews[id].selectedDelivery = selectedDelivery;
                                _this2.itemViews[id].showFeedback(_this2.itemViews[id].feedback.home(selectedDelivery));
                            }
                        });

                        userAttributes = (0, _extends3.default)({}, _this2.user.attributes, {
                            address: _this2.$('#verifiedAddress').val(),
                            addressModel: (0, _extends3.default)(_this2.user.get('addressModel') || {}, { postalCode: _this2.$('#verifiedZipCode').val(), types: ["street_address"] }),
                            customAddress: false
                        });

                        return _this2.Q(_this2.$.ajax({ data: (0, _stringify2.default)(userAttributes), method: "PATCH", url: "/user" }));
                    }).then(function () {
                        _this2.user.set(userAttributes, { silent: true });
                        _this2.modalView.templateData.container.modal('hide');
                        deferred.resolve(true);
                    });
                }).fail(function (e) {
                    console.log(e.stack || e);
                    deferred.reject(e);
                }).done();
            });

            return deferred.promise;
        }

        return true;
    }
});

module.exports = Delivery;

},{"../../models/DeliveryRoute":23,"../../templates/signup/delivery":52,"../../templates/signup/verifyAddress":69,"../util/List":200,"./DeliveryOptions":116,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/extends":246}],115:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListItem = require('../util/ListItem'),
    DeliveryOption = function DeliveryOption() {
    return ListItem.apply(this, arguments);
};

(0, _extends3.default)(DeliveryOption.prototype, ListItem.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/deliveryOption')

});

module.exports = DeliveryOption;

},{"../../templates/signup/deliveryOption":53,"../util/ListItem":201,"babel-runtime/helpers/extends":246}],116:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = require('../util/List'),
    DeliveryOptions = function DeliveryOptions() {
    return List.apply(this, arguments);
};

(0, _extends3.default)(DeliveryOptions.prototype, List.prototype, {

    ItemView: require('./DeliveryOption'),

    Models: {
        DeliveryRoute: require('../../models/DeliveryRoute')
    },

    Views: {
        Dropoffs: require('./Dropoffs')
    },

    farmFeedback: function farmFeedback(model) {
        var _this = this;

        this.farmPickup = new (this.Models.DeliveryRoute.extend({ parse: function parse(response) {
                return _this.Models.DeliveryRoute.prototype.parse(response[0]);
            } }))();
        this.farmPickup.fetch({ data: { label: 'farm' } }).done(function () {
            if ((0, _keys2.default)(_this.farmPickup.attributes).length === 0) {
                _this.valid = false;
                return _this.showFeedback(_this.feedback.noFarmRoute());
            }

            _this.showFeedback(_this.feedback.farm(_this.farmPickup.attributes));

            _this.selectedDelivery = (0, _extends3.default)({}, { deliveryoptionid: model.id }, _this.farmPickup.pick(['dayofweek', 'starttime', 'endtime']));

            _this.valid = true;
        });
    },


    feedback: {
        home: require('../../templates/signup/homeDeliveryFeedback'),
        farm: require('../../templates/signup/farmPickupFeedback'),
        group: function group() {
            return "Please select a dropoff location below.";
        },
        invalidZip: function invalidZip(zipcode) {
            return this.util.format('Postal Code of %s is not in our delivery area.  Please contact us to discuss options.', zipcode);
        },
        noFarmRoute: function noFarmRoute() {
            return "There is currently an error with On-Farm Pickup selection.";
        }
    },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.options };
    },
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },
    groupFeedback: function groupFeedback(deliveryOption) {
        var _this2 = this;

        if (this.dropoffView) {
            if (!(0, _keys2.default)(this.dropoffView.selectedItems).length) this.showFeedback(this.feedback.group());
            return this.slideIn(this.dropoffView.templateData.container.get(0), 'right');
        }

        this.groupDropoffPromise.then(function () {

            if (!_this2.selectedDelivery || _this2.selectedDelivery && !_this2.selectedDelivery.groupdropoffid) _this2.showFeedback(_this2.feedback.group());

            _this2.dropoffView = new _this2.Views.Dropoffs({ container: _this2.templateData.dropoffs }).on('itemUnselected', function () {
                _this2.dropoffView.itemViews.forEach(function (view) {
                    return _this2.fadeIn(view.templateData.container.get(0));
                });

                _this2.showFeedback(_this2.feedback.group());

                _this2.valid = false;
            }).on('itemSelected', function (model) {
                var selectedId = model.id;

                _this2.model.get('groupdropoffs').forEach(function (dropoffModel) {
                    if (dropoffModel.id !== selectedId) _this2.fadeOut(_this2.dropoffView.itemViews[dropoffModel.id].templateData.container.get(0));
                });

                _this2.selectedDelivery = (0, _extends3.default)({}, { deliveryoptionid: deliveryOption.id, groupdropoffid: model.id }, model.pick(['dayofweek', 'starttime', 'endtime']));

                _this2.templateData.feedback.empty();

                _this2.valid = true;
            }).on('itemAdded', function (model) {
                var selectedDelivery = _this2.model.get('selectedDelivery');
                if (selectedDelivery && (0, _keys2.default)(_this2.dropoffView.itemViews).length == _this2.dropoffView.items.length && _this2.dropoffView.itemViews[selectedDelivery.groupdropoffid]) {

                    _this2.dropoffView.selectItem(_this2.dropoffView.items.get(selectedDelivery.groupdropoffid));
                }
            });

            _this2.dropoffView.items.reset(_this2.model.get('groupdropoffs').models);

            if (_this2.model.get('groupdropoffs').length === 0) {
                _this2.dropoffView.templateData.container.text("No available group dropoff locations, please select another option");
            }

            _this2.slideIn(_this2.dropoffView.templateData.container.get(0), 'right');
        }).fail(function (e) {
            return console.log(e.stack || e);
        }).done();
    },
    homeFeedback: function homeFeedback(deliveryOption) {
        var _this3 = this;

        var addressModel = this.user.get('addressModel'),
            userPostalCode = addressModel ? addressModel.postalCode : undefined;

        if (!userPostalCode) {

            this.showFeedback('<div>Because we could not lookup your address, we are currently unable to provide a delivery day for the week or time.  We will take care of this in the next step by having you verify your address.</div>');

            this.selectedDelivery = { deliveryoptionid: deliveryOption.id, isHome: true };

            return this.valid = true;
        }

        this.zipRoute = new (this.Model.extend({ parse: function parse(response) {
                return response[0];
            }, urlRoot: "/zipcoderoute" }))();
        this.homeDeliveryRoute = new this.Models.DeliveryRoute();

        this.zipRoute.fetch({ data: { zipcode: userPostalCode } }).fail(function (e) {
            return console.log(e.stack || e);
        }).done(function () {
            if ((0, _keys2.default)(_this3.zipRoute.attributes).length === 0) {
                _this3.valid = false;
                return _this3.showFeedback(_this3.feedback.invalidZip.call(_this3, userPostalCode));
            }
            _this3.homeDeliveryRoute.set({ id: _this3.zipRoute.get('routeid') }).fetch().fail(function (e) {
                return console.log(e.stack || e);
            }).done(function () {
                _this3.showFeedback(_this3.feedback.home(_this3.homeDeliveryRoute.attributes));

                _this3.selectedDelivery = (0, _extends3.default)({ deliveryoptionid: deliveryOption.id, isHome: true }, _this3.homeDeliveryRoute.pick(['dayofweek', 'starttime', 'endtime']));

                _this3.valid = true;
            });
        });
    },
    postRender: function postRender() {
        var _this4 = this;

        var share = this.model;

        this.selection = 'single';

        List.prototype.postRender.call(this);

        this.on('itemAdded', function (model) {
            var price = parseFloat(model.get('price').replace(/\$|,/g, "")),
                selectedDelivery = _this4.model.get('selectedDelivery'),
                priceLabel = model.get('name') === 'group' ? 'Varies by location' : price == 0 ? 'No charge' : price < 0 ? 'Save ' + model.get('price').replace('-', '') + ' per week' : model.get('price') + ' per week';

            _this4.itemViews[model.id].templateData.deliveryPrice.text(priceLabel);

            if (selectedDelivery && selectedDelivery.deliveryoptionid == model.id) _this4.selectItem(model);
        });

        share.getDeliveryOptions().then(function () {
            var deliveryOptions = share.get('deliveryoptions');

            _this4.items.reset(deliveryOptions.models);

            if (deliveryOptions.length === 0) _this4.templateData.options.text('This share does not have delivery options associated with it.  Please contact Patchwork and sign up for this particular share at a later date.');
        }).fail(function (e) {
            return console.log(e.stack || e);
        }).done();

        this.on('itemSelected', function (model) {
            _this4.templateData.container.removeClass('has-error');
            if (_this4.dropoffView && model.get('name') !== 'group') {
                _this4.dropoffView.delete();_this4.dropoffView = undefined;
            }
            _this4[_this4.util.format('%sFeedback', model.get('name'))](model);
        }).on('itemUnselected', function () {
            _this4.valid = false;
            _this4.templateData.feedback.empty();
            _this4.selectedDelivery = null;
            if (_this4.dropoffView) _this4.slideOut(_this4.dropoffView.templateData.container.get(0), 'right');
        });

        this.groupDropoffPromise = share.getGroupDropoffs();

        this.user.on('change:address', function () {
            var selectedIds = (0, _keys2.default)(_this4.selectedItems);

            if (selectedIds.length === 0) return;

            _this4.unselectItem(_this4.items.get(selectedIds[0]));
        });
    },


    requiresLogin: false,

    showFeedback: function showFeedback(html) {
        this.templateData.feedback.html(html).show();
    },


    template: require('../../templates/signup/deliveryOptions')
});

module.exports = DeliveryOptions;

},{"../../models/DeliveryRoute":23,"../../templates/signup/deliveryOptions":54,"../../templates/signup/farmPickupFeedback":57,"../../templates/signup/homeDeliveryFeedback":58,"../util/List":200,"./DeliveryOption":115,"./Dropoffs":118,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/extends":246}],117:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Item = require('../util/ListItem'),
    Dropoff = function Dropoff() {
    return Item.apply(this, arguments);
};

(0, _extends3.default)(Dropoff.prototype, Item.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/dropoff')

});

module.exports = Dropoff;

},{"../../templates/signup/dropoff":55,"../util/ListItem":201,"babel-runtime/helpers/extends":246}],118:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = require('../util/List'),
    Dropoffs = function Dropoffs() {
    return List.apply(this, arguments);
};

(0, _extends3.default)(Dropoffs.prototype, List.prototype, {

    ItemView: require('./Dropoff'),

    requiresLogin: false,

    selection: 'single',

    template: require('../../templates/signup/dropoffs')

});

module.exports = Dropoffs;

},{"../../templates/signup/dropoffs":56,"../util/List":200,"./Dropoff":117,"babel-runtime/helpers/extends":246}],119:[function(require,module,exports){
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var View = require('../MyView'),
    Form = require('../util/Form').prototype,
    MemberInfo = function MemberInfo() {
    return View.apply(this, arguments);
};

(0, _extends3.default)(MemberInfo.prototype, View.prototype, {

    Customer: require('../../models/Customer'),
    MemberFoodOmission: require('../../models/MemberFoodOmission'),

    addressSelected: function addressSelected() {
        var place = this.addressAutoComplete.getPlace();

        this.templateData.address.val(place.formatted_address);
        this.showValid(this.templateData.address);

        this.user.set({
            address: place.formatted_address,
            addressModel: {
                postalCode: this._(place.address_components).find(function (component) {
                    return component.types[0] === "postal_code";
                }).short_name,
                types: place.types
            }
        });
    },
    checkForAccount: function checkForAccount(valid) {
        var _this = this;

        var email = this.templateData.email.val();
        if (!email) return this.Q();

        return this.Q(this.$.ajax({
            data: (0, _stringify2.default)({ email: this.$.trim(email) }),
            headers: { 'Content-Type': 'application/json' },
            method: "POST",
            url: "/check-email"
        })).then(function (response) {
            if (response.hasAccount) {
                _this.templateData.existingAccountNotice.removeClass('fd-hidden');
                _this.templateData.container.get(0).scrollIntoView({ behavior: 'smooth' });
                valid = false;
            } else _this.templateData.existingAccountNotice.addClass('fd-hidden');

            return _this.Q(valid);
        });
    },


    emailRegex: Form.emailRegex,

    events: {
        'infoBtn': { method: 'showInfoModal' }
    },

    fields: [{
        name: 'name',
        label: 'Name',
        type: 'text',
        error: "Name is a required field.",
        validate: function validate(val) {
            return this.$.trim(val) !== '';
        }
    }, {
        name: 'email',
        label: 'Email',
        type: 'text',
        error: "Please enter a valid email address.",
        validate: function validate(val) {
            return this.emailRegex.test(val);
        }
    }, {
        name: 'secondaryEmail',
        label: 'Secondary Email',
        type: 'text',
        error: "Please enter a valid email address.",
        validate: function validate(val) {
            return !val || this.emailRegex.test(val);
        }
    }, {
        name: 'phonenumber',
        label: 'Phone Number',
        type: 'text',
        error: "Please enter a valid phone number.",
        validate: function validate(val) {
            return val.length > 8;
        }
    }, {
        name: 'address',
        label: 'Address 1',
        type: 'text',
        error: "Please enter a valid address.",
        validate: function validate(val) {
            return this.validateAddress(val);
        }
    }, {
        name: 'extraaddress',
        label: 'Address 2',
        type: 'text',
        validate: function validate() {
            return true;
        }
    }, {
        name: 'password',
        label: 'Password',
        type: 'password',
        error: "Password must be at least six characters.",
        validate: function validate(val) {
            return this.user.isLoggedIn() || val.length > 5;
        }
    }, {
        name: 'repeatpassword',
        label: 'Repeat Password',
        type: 'password',
        error: "Passwords must match.",
        validate: function validate(val) {
            return this.user.isLoggedIn() || val === this.templateData.password.val();
        }
    }, {
        name: 'omission',
        label: 'Opt-out Vegetable',
        type: 'select',
        info: true,
        validate: function validate() {
            return true;
        }
    }, {
        name: 'heard',
        label: 'How you heard about us',
        type: 'text',
        validate: function validate() {
            return true;
        }
    }],

    geolocate: function geolocate() {
        var _this2 = this;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                return _this2.addressAutoComplete.setBounds(new google.maps.Circle({
                    center: {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    },
                    radius: position.coords.accuracy }).getBounds());
            });
        }
    },
    getTemplateOptions: function getTemplateOptions() {
        return { fields: this.fields };
    },
    initAutocomplete: function initAutocomplete() {
        this.addressAutoComplete = new google.maps.places.Autocomplete(this.templateData.address.get(0), { types: ['address'] });

        this.addressAutoComplete.addListener('place_changed', this.addressSelected.bind(this));
    },
    onSignupNavigation: function onSignupNavigation() {
        var _this3 = this;

        this.fields.filter(function (field) {
            return field.name !== 'omission';
        }).forEach(function (field) {
            return _this3.removeError(_this3.templateData[field.name]);
        });
        this.templateData.existingAccountNotice.addClass('fd-hidden');
        this.populateFields();
    },
    populateFields: function populateFields() {
        var _this4 = this;

        if (this.user.isLoggedIn()) {
            this.Customer.get({ query: { email: this.user.get('email'), 'id': { operation: 'join', value: { table: 'member', column: 'personid' } } } }).then(function () {
                var customer = _this4.Customer.data[0];

                (0, _keys2.default)(customer.person.data).forEach(function (key) {
                    if (_this4.fields.find(function (field) {
                        return field.name === key;
                    }) && !_this4.user.get(key)) _this4.templateData[key].val(customer.person.data[key]);
                });

                (0, _keys2.default)(customer.member.data).forEach(function (key) {
                    if (_this4.fields.find(function (field) {
                        return field.name === key;
                    }) && !_this4.user.get(key)) _this4.templateData[key].val(customer.member.data[key]);
                });

                _this4.memberAddress = customer.member.data.address;
                _this4.memberZipcode = customer.member.data.zipcode;
                _this4.setFoodOmission(customer).catch(function (e) {
                    console.log('error', 'Error retrieving Food Omission Data');_this4.Error;
                });
            });
        } else this.Customer.data = {};

        this.fields.forEach(function (field) {
            if (_this4.user.has(field.name)) {
                _this4.templateData[field.name].val(_this4.user.get(field.name));
            }
        });

        this.templateData.email.get(0).closest('.form-group').classList.toggle('fd-hidden', this.user.isLoggedIn());
        this.templateData.secondaryEmail.get(0).closest('.form-group').classList.toggle('fd-hidden', this.user.isLoggedIn());
        this.templateData.password.get(0).closest('.form-group').classList.toggle('fd-hidden', this.user.isLoggedIn());
        this.templateData.repeatpassword.get(0).closest('.form-group').classList.toggle('fd-hidden', this.user.isLoggedIn());
    },
    setFoodOmission: function setFoodOmission(customer) {
        var _this5 = this;

        return this.MemberFoodOmission.get({ query: { memberid: customer.member.data.id } }).then(function () {
            if (_this5.MemberFoodOmission.data.length) {
                var datum = _this5.MemberFoodOmission.data[0],
                    index = _this5.FoodOmission.Foods.data.findIndex(function (food) {
                    return food.produceid == datum.produceid && food.produceid !== null || food.producefamilyid == datum.producefamilyid && datum.produceid === null;
                });

                if (index !== -1) {
                    var foodDatum = _this5.FoodOmission.Foods.data[index];
                    datum.name = foodDatum.name;
                    _this5.FoodOmission.ms.setSelection([(0, _extends3.default)({}, foodDatum, { id: index })]);
                }
            } else {
                _this5.FoodOmission.clear();
            }

            return _promise2.default.resolve();
        });
    },
    postRender: function postRender() {
        var _this6 = this;

        var self = this;

        window.google && window.google.maps ? this.initAutocomplete() : window.initGMap = function () {
            return _this6.initAutocomplete();
        };

        this.templateData.address.attr('placeholder', '');

        this.FoodOmission = this.factory.create('foodOmission', { insertion: { el: this.templateData.omission.get(0), method: 'after' } });

        this.templateData.omission.remove();

        this.FoodOmission.initializeFoodOmission().then(function () {
            _this6.templateData.omission = _this6.FoodOmission.getMagicSuggest();
        });

        this.populateFields();

        this.templateData.container.find('form input').on('blur', function () {
            var $el = self.$(this),
                field = self._(self.fields).find(function (field) {
                return field.name === $el.attr('id');
            });

            if (field.name === 'address') {
                if (self.templateData.address.val() === '') self.showError($el, field.error);
                return;
            }

            self.Q.fcall(field.validate.bind(self, $el.val())).then(function (valid) {
                if (valid) {
                    self.showValid($el);
                } else {
                    self.showError($el, field.error);
                }
            });
        }).on('focus', function () {
            self.removeError(self.$(this));
        });

        this.fields.forEach(function (field) {
            return _this6.removeError(_this6.templateData[field.name]);
        });
    },
    removeError: function removeError($el) {
        $el.parent().parent().removeClass('has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-remove');
        $el.siblings('.help-block').remove();
    },


    requiresLogin: false,

    showError: function showError($el, error) {
        var formGroup = $el.parent().parent();

        if (formGroup.hasClass('has-error')) return;

        formGroup.removeClass('has-success').addClass('has-feedback has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-ok').addClass('glyphicon-remove').after(Form.templates.fieldError({ error: error }));
    },
    showInfoModal: function showInfoModal() {
        var _this7 = this;

        this.Xhr({ method: 'get', resource: 'csacustomization' }).then(function (data) {
            return _this7.modalView.show({
                body: _this7.templates.csaCustomization(data[0]),
                hideFooter: true
            });
        }).catch(function (e) {
            return new _this7.Error(e);
        });
    },
    showValid: function showValid($el) {
        $el.parent().parent().removeClass('has-error').addClass('has-feedback has-success');
        $el.next().removeClass('hide').removeClass('glyphicon-remove').addClass('glyphicon-ok');
        $el.siblings('.help-block').remove();
    },


    template: require('../templates/MemberInfo'),

    templates: {
        csaCustomization: require('../../templates/csaCustomization')
    },

    validate: function validate() {
        var _this8 = this;

        var valid = true;

        if (this.templateData.container.find('has-error').length) return false;

        return this.Q.all(this.fields.map(function (field) {
            return _this8.Q.when(field.validate.call(_this8, _this8.templateData[field.name].val())).then(function (result) {
                if (result === false) {
                    valid = false;
                    _this8.showError(_this8.templateData[field.name], field.error);
                } else {
                    _this8.user.set(field.name, _this8.templateData[field.name].val());
                }
            });
        })).then(function () {
            return _promise2.default.resolve(valid ? _this8.$.ajax({
                data: (0, _stringify2.default)(_this8.user.attributes),
                method: "PATCH",
                url: "/user" }) : '');
        }).then(function () {
            return _this8.user.isLoggedIn() ? _this8.Q(true) : _this8.checkForAccount(valid);
        }).then(function (valid) {
            return valid;
        }).fail(function (e) {
            console.log(e.stack || e);return false;
        });
    },
    validateAddress: function validateAddress(address) {
        var addressModel, customAddress;

        if (this.$.trim(address).length === 0) return false;

        addressModel = this.user.get('addressModel');
        customAddress = address !== this.user.get('address') || !addressModel || !this._(addressModel.types).contains("street_address") ? true : false;

        if (address === this.memberAddress) {
            customAddress = false;
            this.user.set('addressModel', (0, _extends3.default)(this.user.get('addressModel') || {}, { postalCode: this.memberZipcode, types: ["street_address"] }));
        }

        this.user.set({ customAddress: customAddress });

        if (customAddress) this.user.set({ addressModel: {} });

        return true;
    }
});

module.exports = MemberInfo;

},{"../../models/Customer":19,"../../models/MemberFoodOmission":31,"../../templates/csaCustomization":49,"../MyView":94,"../templates/MemberInfo":167,"../util/Form":199,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],120:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListItem = require('../util/ListItem'),
    PaymentOption = function PaymentOption() {
    return ListItem.apply(this, arguments);
};

(0, _extends3.default)(PaymentOption.prototype, ListItem.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/paymentOption')

});

module.exports = PaymentOption;

},{"../../templates/signup/paymentOption":59,"../util/ListItem":201,"babel-runtime/helpers/extends":246}],121:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = require('../util/List'),
    PaymentOptions = function PaymentOptions() {
    return List.apply(this, arguments);
};

(0, _extends3.default)(PaymentOptions.prototype, List.prototype, {

    ItemView: require('./PaymentOption'),

    itemModels: [{ id: 1, name: 'cash', label: 'Cash or Check', note: 'Mail payment to Patchwork' }, { id: 2, name: 'card', label: 'Credit Card', note: 'Pay online.' }],

    requiresLogin: false,

    selection: 'single',

    template: require('../../templates/signup/paymentOptions')
});

module.exports = PaymentOptions;

},{"../../templates/signup/paymentOptions":60,"../util/List":200,"./PaymentOption":120,"babel-runtime/helpers/extends":246}],122:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListItem = require('../util/ListItem'),
    PickupDate = function PickupDate() {
    return ListItem.apply(this, arguments);
};

(0, _extends3.default)(PickupDate.prototype, ListItem.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/pickupDate')

});

module.exports = PickupDate;

},{"../../templates/signup/pickupDate":61,"../util/ListItem":201,"babel-runtime/helpers/extends":246}],123:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = require('../util/List'),
    PickupDates = function PickupDates() {
    return List.apply(this, arguments);
};

(0, _extends3.default)(PickupDates.prototype, List.prototype, {

    ItemView: require('./PickupDate'),

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.dates };
    },
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },
    itemModels: function itemModels() {
        return this.model.getDeliveryDates().models;
    },
    postRender: function postRender() {
        var _this = this;

        this.valid = true;

        this.on('itemSelected', function (model) {
            _this.templateData.container.removeClass('has-error');
            _this.updateShare();
        });

        this.on('itemUnselected', function (model) {
            return _this.updateShare();
        });

        this.on('itemAdded', function () {
            if (_this.model.has('skipDays') && _this.model.get('skipDays').length && (0, _keys2.default)(_this.itemViews).length == _this.items.length) {

                _this.model.set({ skipDays: _this.model.get('skipDays').filter(function (skipDayId) {
                        if (_this.items.get(skipDayId)) {
                            _this.unselectItem(_this.items.get(skipDayId));return true;
                        }
                        return false;
                    })
                });
            }
        });

        this.model.on('change:selectedDelivery', function () {
            return _this.items.reset(_this.itemModels());
        });

        List.prototype.postRender.call(this);
    },


    requiresLogin: false,

    selected: true,

    selection: 'multiSimple',

    template: require('../../templates/signup/pickupDates'),

    updateShare: function updateShare() {
        this.valid = (0, _keys2.default)(this.selectedItems).length === 0 ? false : true;
    }
});

module.exports = PickupDates;

},{"../../templates/signup/pickupDates":62,"../util/List":200,"./PickupDate":122,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/extends":246}],124:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListItem = require('../util/ListItem'),
    Share = function Share() {
    return ListItem.apply(this, arguments);
};

(0, _extends3.default)(Share.prototype, ListItem.prototype, {
    postRender: function postRender() {
        ListItem.prototype.postRender.call(this);

        this.factory.create('shareBox', { insertion: { el: this.templateData.shareBox.get(0) }, model: this.model });

        if (!this.user.isAdmin() && (/spring/i.test(this.model.get('name')) || /spring/i.test(this.model.get('label')))) {
            this.templateData.container.addClass('inactive').off('click');
        }

        return this;
    },


    requiresLogin: false,

    template: require('../../templates/signup/share')

});

module.exports = Share;

},{"../../templates/signup/share":63,"../util/ListItem":201,"babel-runtime/helpers/extends":246}],125:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var View = require('../MyView'),
    ShareOption = function ShareOption() {
    return View.apply(this, arguments);
};

(0, _extends3.default)(ShareOption.prototype, View.prototype, {

    events: {
        'optionIcon': { method: 'showOptionInfo' }
    },

    getTemplateOptions: function getTemplateOptions() {
        return (0, _extends3.default)({}, this.model.attributes, { options: this.model.get('options').map(function (model) {
                return model.attributes;
            }) });
    },
    postRender: function postRender() {
        var _this = this;

        this.updateTotal();

        this.templateData.input.on('change', function () {
            _this.updateTotal();
            _this.emit('changed', _this.templateData.input.val());
        });
    },


    requiresLogin: false,

    showOptionInfo: function showOptionInfo() {
        this.modalView.show({
            title: this.model.get('name'),
            body: this.model.get('description'),
            hideFooter: true
        });
    },


    template: require('../../templates/signup/shareOption'),

    updateTotal: function updateTotal() {
        this.templateData.total.text(this.util.format('$%s per week', parseFloat(this.model.get('options').at(this.templateData.input.get(0).selectedIndex).get('price').replace(/\$|,/g, "")).toFixed(2)));
    }
});

module.exports = ShareOption;

},{"../../templates/signup/shareOption":64,"../MyView":94,"babel-runtime/helpers/extends":246}],126:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = require('../util/List'),
    ShareOptions = function ShareOptions() {
    return List.apply(this, arguments);
};

(0, _extends3.default)(ShareOptions.prototype, List.prototype, {

    ItemView: require('./SingleShareOptions'),

    collection: { comparator: 'startEpoch' },

    events: {},

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares, signupData: this.signupData, factory: this.factory };
    },
    itemModels: function itemModels() {
        return this.signupData.shares.models;
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.signupData.shares.on('add', function (share) {
            return _this.items.add(share);
        }).on('remove', function (share) {
            return _this.items.remove(share);
        });
    },


    requiresLogin: false,

    selection: true,

    template: require('../../templates/signup/shareOptions'),

    validate: function validate() {
        var _this2 = this;

        this.signupData.shares.forEach(function (share) {
            share.set('selectedOptions', share.get('shareoptions').map(function (shareOption) {
                return {
                    shareoptionid: shareOption.id,
                    shareoptionoptionid: _this2.itemViews[share.id].itemViews[shareOption.id].templateData.input.val()
                };
            }));

            share.set('seasonalAddOns', _this2.itemViews[share.id].seasonalAddOns.reduce(function (memo, addon) {
                var option = _this2.itemViews[share.id].SeasonalAddOnOption.data.find(function (option) {
                    return option.id == _this2.itemViews[share.id].templateData[addon.name].val() && option.seasonalAddOnId === addon.id;
                });

                if (!option) return memo;

                memo.push({
                    name: addon.name,
                    label: addon.label,
                    seasonalAddOnId: addon.id,
                    seasonalAddOnOptionId: _this2.itemViews[share.id].templateData[addon.name].val(),
                    price: option.price,
                    unit: option.unit,
                    selectedOptionLabel: option.label
                });

                return memo;
            }, []));
        });

        return true;
    }
});

module.exports = ShareOptions;

},{"../../templates/signup/shareOptions":65,"../util/List":200,"./SingleShareOptions":128,"babel-runtime/helpers/extends":246}],127:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = require('../util/List'),
    ShareSelection = function ShareSelection() {
    return List.apply(this, arguments);
};

(0, _extends3.default)(ShareSelection.prototype, List.prototype, {

    ItemView: require('./Share'),

    Models: {
        DeliveryDate: require('../../models/DeliveryDate'),
        Share: require('../../models/Share')
    },

    collection: { comparator: 'startEpoch', model: require('../../models/Share'), url: "/share" },

    events: {
        csaInfoBtn: { method: 'showCSAInfoPageInNewTab' }
    },

    fetch: { data: {
            display: true,
            enddate: (0, _stringify2.default)({ operation: '>', value: require('moment')().add(2, 'weeks').format('YYYY-MM-DD') }),
            signupcutoff: (0, _stringify2.default)({ operation: '>', value: require('moment')().format('YYYY-MM-DD') })
        } },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares, factory: this.factory };
    },
    isSeason: function isSeason(season, model) {
        var re = new RegExp(season, 'i');

        return Boolean(re.test(model.get('name')) || re.test(model.get('label')));
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.on('itemSelected', function (model) {
            _this.templateData.container.removeClass('has-error');
            if (!_this.user.isAdmin() && _this.isSeason('summer', model)) {
                _this.items.forEach(function (share) {
                    if (_this.isSeason('spring', share)) {
                        _this.itemViews[share.id].templateData.container.removeClass('inactive').on('click', function () {
                            return _this.itemViews[share.id].emit('clicked', _this.itemViews[share.id].model);
                        });
                    }
                });
            }
        });

        this.on('itemUnselected', function (model) {
            if (!_this.user.isAdmin() && _this.isSeason('summer', model)) {
                _this.items.forEach(function (share) {
                    if (_this.isSeason('spring', share)) {
                        _this.itemViews[share.id].templateData.container.addClass('inactive').off('click');
                        _this.unselectItem(share);
                    }
                });
            }
        });

        this.signupData.shares = new (this.Collection.extend({ comparator: 'startEpoch' }))();

        this.items.on('reset', function () {
            if (_this.items.length === 0) return _this.emit('noShares');
        });

        this.on('initialized', function () {
            return _this.items.forEach(function (item) {
                var sessionShare = _this.sessionShares.find(function (share) {
                    return share.id === item.id;
                });
                if (sessionShare) {
                    _this.selectItem(item);
                    _this.signupData.shares.add(item);
                    if (sessionShare.seasonalAddOns) item.set('seasonalAddOns', sessionShare.seasonalAddOns);
                    if (sessionShare.selectedOptions) item.set('selectedOptions', sessionShare.selectedOptions);
                    if (sessionShare.selectedDelivery) item.set('selectedDelivery', sessionShare.selectedDelivery);
                    if (sessionShare.skipDays) {
                        item.set('skipDays', sessionShare.skipDays);
                    }
                }
            });
        });

        if (this.sessionShares) {
            this.on('itemAdded', function () {
                if ((0, _keys2.default)(_this.itemViews).length === _this.items.length) _this.emit('initialized');
            });
        }
    },


    requiresLogin: false,

    selection: true,

    showCSAInfoPageInNewTab: function showCSAInfoPageInNewTab() {
        window.open('/csa#how-do-i-know');
    },


    template: require('../../templates/signup/shares'),

    validate: function validate() {
        var _this2 = this;

        var prevShareIds = this.signupData.shares.map(function (share) {
            return share.id;
        }),
            selectedShareIds = (0, _keys2.default)(this.selectedItems).map(function (id) {
            return parseInt(id);
        });

        if (selectedShareIds.length === 0) {
            this.templateData.container.addClass('has-error');return false;
        }

        this._(prevShareIds).difference(selectedShareIds).forEach(function (id) {
            var share = _this2.items.get(id);
            share.unset('selectedOptions');
            share.unset('selectedDelivery');
            share.unset('skipDays');
            _this2.signupData.shares.remove(share);
        });

        this._(selectedShareIds).difference(prevShareIds).forEach(function (id) {
            return _this2.signupData.shares.add(_this2.items.get(id));
        });

        return true;
    }
});

module.exports = ShareSelection;

},{"../../models/DeliveryDate":22,"../../models/Share":40,"../../templates/signup/shares":66,"../util/List":200,"./Share":124,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/extends":246,"moment":"moment"}],128:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = require('../util/List'),
    Format = require('../../Format'),
    SingleShareOptions = function SingleShareOptions() {
    return List.apply(this, arguments);
};

(0, _extends3.default)(SingleShareOptions.prototype, List.prototype, {

    SeasonalAddOn: (0, _create2.default)(require('../../models/__proto__'), { resource: { value: 'seasonalAddOn' } }),
    SeasonalAddOnOption: (0, _create2.default)(require('../../models/__proto__'), { resource: { value: 'seasonalAddOnOption' } }),

    ItemView: require('./ShareOption'),

    getItemViewOptions: function getItemViewOptions() {
        return {
            container: this.templateData.options,
            share: this.model
        };
    },
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },
    insertSeasonalOptions: function insertSeasonalOptions() {
        var _this = this;

        _promise2.default.all([this.SeasonalAddOn.get(), this.SeasonalAddOnOption.get()]).then(function () {
            _this.seasonalAddOns = _this.SeasonalAddOn.data.filter(function (addon) {
                return addon.shareid === _this.model.id;
            });

            if (!_this.seasonalAddOns.length) {
                _this.templateData.seasonalContainer.get(0).classList.add('fd-hidden');
                _this.templateData.seasonalTotal.get(0).parentNode.classList.add('fd-hidden');
                _this.templateData.weeklyHeader.get(0).classList.add('fd-hidden');
                _this.templateData.container.get(0).children[0].classList.add('no-seasonal-items');
            }

            _this.seasonalAddOns.forEach(function (addon) {
                var options = _this.SeasonalAddOnOption.data.filter(function (option) {
                    return option.seasonalAddOnId === addon.id;
                }).sort(function (a, b) {
                    if (a.position === null && b.position === null) return 0;
                    if (b.position === null) return -1;
                    if (a.position === null) return 1;
                    return a.position < b.position ? -1 : 1;
                });

                _this.slurpTemplate({
                    insertion: { $el: _this.templateData.seasonalOptions },
                    template: _this.Templates.SeasonalAddOn((0, _extends3.default)({}, addon, { options: options }))
                });

                _this.templateData[addon.name].on('change', function () {
                    return _this.updateSeasonalTotal();
                });
                _this.templateData[addon.name + 'Icon'].on('click', function () {
                    return _this.showAddOnInfo(addon);
                });
            });

            if (_this.model.get('seasonalAddOns') && _this.model.get('seasonalAddOns').length) {
                _this.model.get('seasonalAddOns').forEach(function (selectedAddon) {
                    _this.templateData[selectedAddon.name].val(selectedAddon.seasonalAddOnOptionId);
                    _this.updateSeasonalTotal();
                });
            }
        }).catch(function (e) {
            return console.log(e.stack || e);
        });
    },
    postRender: function postRender() {
        var _this2 = this;

        var share = this.model;

        List.prototype.postRender.call(this);

        this.insertSeasonalOptions();

        this.on('itemAdded', function (shareOption) {
            _this2.itemViews[shareOption.id].on('changed', function () {
                return _this2.updateTotal();
            });

            if (share.get('selectedOptions')) {
                share.get('selectedOptions').forEach(function (selectedOption) {
                    if (selectedOption.shareoptionid == shareOption.id) {
                        _this2.itemViews[shareOption.id].templateData.input.val(selectedOption.shareoptionoptionid);
                    }
                });
            }

            if ((0, _keys2.default)(_this2.itemViews).length == _this2.items.length) {
                (0, _keys2.default)(_this2.itemViews).forEach(function (key) {
                    return _this2.itemViews[key].updateTotal();
                });
                _this2.updateTotal();
            }
        });

        this.factory.create('shareBox', { insertion: { el: this.templateData.shareBox.get(0) }, model: share });

        this.model.getShareOptions().then(function () {
            return share.get('shareoptions').forEach(function (shareoption) {
                return _this2.items.add(shareoption);
            });
        }).fail(function (e) {
            return console.log(e.stack || e);
        });
    },


    requiresLogin: false,

    showAddOnInfo: function showAddOnInfo(addon) {
        this.modalView.show({
            title: addon.label,
            body: addon.description,
            hideFooter: true
        });

        if (addon.images) {
            var imagesMarkup = addon.images.map(function (filename) {
                return '<div><img src="' + Format.ImageSrc(filename) + '" /></div>';
            });
            this.modalView.templateData.body.append('<div class="img-row">' + imagesMarkup + '</div>');
        }
    },


    template: require('../../templates/signup/singleShareOptions'),

    Templates: {
        SeasonalAddOn: require('../templates/SeasonalAddOn')
    },

    updateSeasonalTotal: function updateSeasonalTotal() {
        var _this3 = this;

        var seasonalTotal = 0;

        this.seasonalAddOns.forEach(function (addon) {
            var selectedOption = _this3.SeasonalAddOnOption.data.find(function (option) {
                return option.id == _this3.templateData[addon.name].val() && option.seasonalAddOnId === addon.id;
            }),
                optionPrice = selectedOption ? parseFloat(selectedOption.price.replace(/\$|,/g, "")) : 0;

            seasonalTotal += optionPrice;
            _this3.templateData[addon.name + 'Total'].text('$' + optionPrice.toFixed(2));
        });

        this.templateData.seasonalTotal.text('$' + seasonalTotal.toFixed(2));
    },
    updateTotal: function updateTotal() {
        var _this4 = this;

        var total = this.items.map(function (shareOption) {
            return parseFloat(shareOption.get('options').get(_this4.itemViews[shareOption.id].templateData.input.val()).get('price').replace(/\$|,/g, ""));
        }).reduce(function (a, b) {
            return a + b;
        }).toFixed(2);

        this.templateData.weeklyTotal.text(this.util.format('$%s per week', total));
    }
});

module.exports = SingleShareOptions;

},{"../../Format":5,"../../models/__proto__":44,"../../templates/signup/singleShareOptions":67,"../templates/SeasonalAddOn":174,"../util/List":200,"./ShareOption":125,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/extends":246}],129:[function(require,module,exports){
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var View = require('../MyView'),
    Form = require('../util/Form').prototype,
    Summary = function Summary() {

    window.spinner = this.spinner = new this.Spinner({
        color: '#fff',
        lines: 7,
        length: 2,
        radius: 14,
        scale: 0.5
    });

    return View.apply(this, arguments);
};

(0, _extends3.default)(Summary.prototype, View.prototype, {

    DayOfWeekMap: require('../../models/DeliveryRoute').prototype.dayOfWeekMap,

    ContactInfo: require('../../models/ContactInfo'),

    Spinner: require('../../plugins/spinner.js'),

    buildRequest: function buildRequest() {
        var addressModel = this.user.get('addressModel');

        return (0, _stringify2.default)({
            member: (0, _extends3.default)(this.user.pick(['name', 'email', 'secondaryEmail', 'phonenumber', 'password', 'repeatpassword', 'address', 'extraaddress', 'heard', 'omission']), { zipcode: addressModel && addressModel.postalCode ? addressModel.postalCode : '' }),
            payment: this.selectedPayment === 'card' ? this.getFormData() : {},
            shares: this.buildShares(),
            total: this.fee ? this.grandTotalPlusFee : this.grandTotal,
            isAdmin: this.user.isAdmin()
        });
    },
    buildShares: function buildShares() {
        var _this = this;

        return this.signupData.shares.map(function (share) {
            var selectedWeeks = share.get('selectedDates').length,
                skipDays = share.get('skipDays'),
                skipDaysTotal = skipDays ? skipDays.length : 0;

            return {
                id: share.id,
                description: _this.util.format('From %s to %s you will be receiving fresh food for %d out of %d weeks.', share.get('humanStartdate'), share.get('humanEnddate'), selectedWeeks, selectedWeeks + skipDaysTotal),
                label: share.get('label'),
                options: share.get('selectedOptions'),
                seasonalAddOns: share.get('seasonalAddOns'),
                delivery: _this._(share.get('selectedDelivery')).pick(['deliveryoptionid', 'groupdropoffid', 'description']),
                skipDays: skipDays ? skipDays.map(function (skipDayId) {
                    return share.get('deliveryDates').get(skipDayId).get('date');
                }) : undefined,
                total: share.get('total')
            };
        });
    },
    cardPaymentSelected: function cardPaymentSelected() {
        this.fee = false;
        this.selectedPayment = 'card';
        this.updateGrandTotal();
        this.templateData.paymentForm.removeClass('hide');
    },
    cashPaymentSelected: function cashPaymentSelected() {
        this.fee = false;
        this.selectedPayment = 'cash';
    },


    events: {
        'paymentForm': [{ event: 'blur', 'selector': 'input', method: 'onInputBlur' }, { event: 'focus', 'selector': 'input', method: 'onInputFocus' }],
        'signupBtn': [{ event: 'click', method: 'signup' }]
    },

    fields: {
        number: {
            error: "Enter a card number",
            validate: function validate(val) {
                return this.$.trim(val).length > 0;
            }
        },
        "exp_month": {
            error: 'Enter the month in "MM" format',
            validate: function validate(val) {
                return val.length === 2;
            }
        },
        "exp_year": {
            error: 'Enter the year in "YYYY" format',
            validate: function validate(val) {
                return val.length === 4;
            }
        },
        cvc: {
            error: "Enter a cvc number",
            validate: function validate(val) {
                return this.$.trim(val).length > 0;
            }
        }
    },

    getTemplateOptions: function getTemplateOptions() {
        var _this2 = this;

        var spaceTwoTab = "\r\n\t\t";
        return {
            containerClass: this.containerClass,
            shares: this.signupData.shares.map(function (share) {
                var selectedDelivery = share.get('deliveryoptions').get(share.get('selectedDelivery').deliveryoptionid),
                    groupDropoff = share.get('selectedDelivery').groupdropoffid ? share.get('groupdropoffs').get(share.get('selectedDelivery').groupdropoffid) : undefined,
                    times = groupDropoff ? groupDropoff.pick(['starttime', 'endtime']) : _this2._(share.get('selectedDelivery')).pick(['starttime', 'endtime']),
                    shareOptionWeeklyTotal = share.get('selectedOptions').map(function (selectedOption) {
                    return parseFloat(share.get('shareoptions').get(selectedOption.shareoptionid).get('options').get(selectedOption.shareoptionoptionid).get('price').replace(/\$|,/g, ""));
                }).reduce(function (a, b) {
                    return a + b;
                }),
                    deliveryCost = groupDropoff ? groupDropoff.get('price') : selectedDelivery.get('price'),
                    weeklyTotal = shareOptionWeeklyTotal + parseFloat(deliveryCost.replace(/\$|,/g, "")),
                    seasonalAddOnTotal = share.get('seasonalAddOns').map(function (addon) {
                    return parseFloat(addon.price.replace(/\$|,/g, ""));
                }).reduce(function (a, b) {
                    return a + b;
                }, 0),
                    address = selectedDelivery.get('name') === 'home' ? _this2.user.get('address') : groupDropoff ? groupDropoff.get('street') + ', ' + groupDropoff.get('cityStateZip') : _this2.ContactInfo.data.farmpickup;

                share.set({
                    selectedDelivery: (0, _extends3.default)(share.get('selectedDelivery'), {
                        description: _this2.util.format('Delivery:%sMethod: %s%sDay/Time: %ss %s-%s%sPlace: %s%sCost: %s per week', spaceTwoTab, selectedDelivery.get('label'), spaceTwoTab, share.dayOfWeekMap[share.get('selectedDelivery').dayofweek], times.starttime, times.endtime, spaceTwoTab, address, spaceTwoTab, deliveryCost) }),
                    total: weeklyTotal * share.get('selectedDates').length + seasonalAddOnTotal
                });

                share.set('selectedOptions', share.get('selectedOptions').map(function (selectedOption) {
                    var shareOption = share.get('shareoptions').get(selectedOption.shareoptionid),
                        shareOptionOption = shareOption.get('options').get(selectedOption.shareoptionoptionid);

                    return (0, _extends3.default)(selectedOption, {
                        description: _this2.util.format('%s: %s %s -- %s per week', shareOption.get('name'), shareOptionOption.get('label'), shareOptionOption.get('unit') || "", shareOptionOption.get('price'))
                    });
                }));

                return {
                    shareBox: _this2.templates.ShareBox(share.attributes),
                    seasonalAddOns: share.get('seasonalAddOns'),
                    selectedOptions: share.get('selectedOptions').map(function (selectedOption) {
                        var shareOption = share.get('shareoptions').get(selectedOption.shareoptionid),
                            shareOptionOption = shareOption.get('options').get(selectedOption.shareoptionoptionid);

                        return {
                            optionName: shareOption.get('name'),
                            price: shareOptionOption.get('price'),
                            selectedOptionLabel: shareOptionOption.get('label'),
                            unit: shareOptionOption.get('unit')
                        };
                    }),
                    selectedDelivery: {
                        deliveryType: selectedDelivery.get('label'),
                        weeklyCost: deliveryCost,
                        groupdropoff: groupDropoff ? groupDropoff.get('label') : undefined,
                        address: groupDropoff ? groupDropoff.get('street') + ', ' + groupDropoff.get('cityStateZip') : selectedDelivery.get('name') === 'farm' ? _this2.ContactInfo.data.farmpickup : _this2.user.get('address'),
                        dayOfWeek: _this2.DayOfWeekMap[share.get('selectedDelivery').dayofweek],
                        starttime: times.starttime,
                        endtime: times.endtime
                    },
                    weeklyPrice: _this2.util.format('$%s', weeklyTotal.toFixed(2)),
                    seasonalOptionsTotal: '$' + seasonalAddOnTotal.toFixed(2),
                    selectedDates: share.get('selectedDates').map(function (date) {
                        return _this2.templates.PickupDate((0, _extends3.default)({ selected: true }, date.attributes));
                    }),
                    weeksSelected: share.get('selectedDates').length,
                    skipDays: share.has('skipDays') ? share.get('skipDays').map(function (skipDayId) {
                        return _this2.templates.PickupDate(share.get('deliveryDates').get(skipDayId).attributes);
                    }) : undefined,
                    total: _this2.util.format('$%s', share.get('total').toFixed(2))
                };
            })
        };
    },
    onInputBlur: function onInputBlur(e) {
        var $el = this.$(e.currentTarget),
            field = this.fields[$el.attr('id')],
            result;

        result = field.validate.call(this, $el.val());

        if (result) {
            $el.parent().parent().removeClass('has-error').addClass('has-feedback has-success');
            $el.next().removeClass('hide').removeClass('glyphicon-remove').addClass('glyphicon-ok');
            $el.siblings('.help-block').remove();
        } else {
            this.showError($el, field.error);
        }
    },
    onInputFocus: function onInputFocus(e) {
        var $el = this.$(e.currentTarget);
        if ($el.next().hasClass('glyphicon-remove')) this.removeError(this.$(e.currentTarget));
    },
    paymentUnselected: function paymentUnselected() {
        this.fee = false;
        this.selectedPayment = undefined;
        this.updateGrandTotal();

        this.templateData.paymentForm.addClass('hide');
        this.templateData.signupBtn.addClass('hide');
    },
    postRender: function postRender() {
        var _this3 = this;

        this.fee = false;
        this.selectedPayment = undefined;

        View.prototype.postRender.call(this);

        this.paymentOptions.on('itemSelected', function (model) {
            _this3.templateData.signupBtn.removeClass('hide');
            _this3[_this3.util.format('%sPaymentSelected', model.get('name'))]();
        }).on('itemUnselected', function (model) {
            return _this3.paymentUnselected();
        });

        this.grandTotal = this.signupData.shares.map(function (share) {
            return share.get('total');
        }).reduce(function (a, b) {
            return a + b;
        });
        this.grandTotalPlusFee = this.grandTotal + this.grandTotal * .03;

        this.updateGrandTotal();
    },


    requiresLogin: false,

    removeError: function removeError($el) {
        if ($el.siblings('.help-block').length === 1) $el.parent().parent().removeClass('has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-remove');
        $el.siblings(this.util.format('.help-block.%s', $el.attr('id'))).remove();
    },
    render: function render() {
        var _this4 = this;

        var dataPromises = [];

        dataPromises.push(this.ContactInfo.get());

        this.signupData.shares.forEach(function (share) {
            if (!share.has('shareoptions')) dataPromises.push(share.getShareOptions());
            if (!share.has('deliveryoptions')) dataPromises.push(share.getDeliveryOptions());
            if (!share.has('groupdropoffs')) dataPromises.push(share.getGroupDropoffs());
            if (!share.has('deliveryDates')) dataPromises.push(share.getDeliveryDates());
        });

        this.Q.all(dataPromises).then(function () {
            _this4.signupData.shares.forEach(function (share) {
                return share.getSelectedDates();
            });
            View.prototype.render.call(_this4);
        }).fail(function (e) {
            return new _this4.Error(e);
        }).done();
    },
    show: function show() {
        this.templateData.container.empty().remove();
        this.render();
        return this;
    },
    showError: function showError($el, error) {
        var formGroup = $el.parent().parent();

        if ($el.next().hasClass('glyphicon-remove')) return;

        formGroup.removeClass('has-success').addClass('has-feedback has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-ok').addClass('glyphicon-remove').parent().append(Form.templates.fieldError({ error: error, name: $el.attr('id') }));
    },
    showErrorModal: function showErrorModal(opts) {
        var _this5 = this;

        this.modalView.show({
            title: 'Hmmm',
            body: opts && opts.error ? opts.error : 'There was a problem.  Please contact us at eat.patchworkgardens@gmail.com.  We apologize for the inconvenience.',
            hideCancelBtn: true,
            confirmText: 'Okay' }).on('submit', function () {
            return _this5.modalView.hide();
        });
    },
    showSuccessModal: function showSuccessModal() {
        this.modalView.show({
            title: 'Great Success',
            body: this.util.format('Thanks for signing up.  We look forward to sharing the season with you. %s', (0, _keys2.default)(this.getFormData()).length ? 'You should find a receipt in your email inbox.' : ''),
            hideCancelBtn: true,
            confirmText: 'Okay' }).on('submit', function () {
            return window.location = '/';
        }).on('hidden', function () {
            return window.location = '/';
        });
    },
    signup: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            var response;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!this.isSubmitting) {
                                _context.next = 2;
                                break;
                            }

                            return _context.abrupt('return');

                        case 2:
                            if (!(this.selectedPayment === 'card')) {
                                _context.next = 5;
                                break;
                            }

                            if (this.validateCardInfo()) {
                                _context.next = 5;
                                break;
                            }

                            return _context.abrupt('return');

                        case 5:

                            this.isSubmitting = true;

                            this.templateData.signupBtn.addClass('has-spinner').append(this.spinner.spin().el);

                            _context.prev = 7;
                            _context.next = 10;
                            return this.Xhr({
                                data: this.buildRequest(),
                                method: "post",
                                resource: "signup"
                            });

                        case 10:
                            response = _context.sent;

                            if (!response.error) {
                                _context.next = 14;
                                break;
                            }

                            this.showErrorModal({ error: response.error });
                            return _context.abrupt('return');

                        case 14:

                            this.emit('done');
                            this.paymentOptions.removeAllListeners('itemSelected').removeAllListeners('itemUnselected');
                            this.templateData.signupBtn.text('Thank you');
                            this.user.set('state', {});

                            if (!this.user.isLoggedIn()) {
                                this.user.set(this.user.defaults());
                                document.cookie = 'patchworkjwt=; domain=' + window.location.hostname + '; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
                            }

                            this.showSuccessModal();
                            _context.next = 25;
                            break;

                        case 22:
                            _context.prev = 22;
                            _context.t0 = _context['catch'](7);

                            this.showErrorModal();

                        case 25:
                            _context.prev = 25;

                            this.spinner.stop();
                            this.templateData.signupBtn.removeClass('has-spinner');
                            this.isSubmitting = false;
                            return _context.finish(25);

                        case 30:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[7, 22, 25, 30]]);
        }));

        function signup() {
            return _ref.apply(this, arguments);
        }

        return signup;
    }(),


    subviews: {
        paymentOptions: [{ name: 'paymentOptions', view: require('./PaymentOptions') }]
    },

    template: require('../../templates/signup/summary'),

    templates: {
        PickupDate: require('../../templates/signup/pickupDate'),
        ShareBox: require('../templates/ShareBox')
    },

    updateGrandTotal: function updateGrandTotal() {
        var total = this.fee ? this.grandTotalPlusFee : this.grandTotal;
        this.templateData.grandTotal.text('Grand Total :  ' + '$' + total.toFixed(2));

        this.$('.payment-option:first-child .method-total').text('Grand Total :  ' + '$' + this.grandTotal.toFixed(2));
        this.$('.payment-option:last-child .method-total').text('Grand Total :  ' + '$' + this.grandTotal.toFixed(2));
    },
    validateCardInfo: function validateCardInfo() {
        var _this6 = this;

        var valid = true;

        (0, _keys2.default)(this.fields).forEach(function (key) {
            var result = _this6.fields[key].validate.call(_this6, _this6.templateData[key].val());

            if (!result) {
                _this6.showError(_this6.templateData[key], _this6.fields[key].error);
                valid = false;
            }
        });

        return valid;
    }
});

module.exports = Summary;

},{"../../models/ContactInfo":14,"../../models/DeliveryRoute":23,"../../plugins/spinner.js":46,"../../templates/signup/pickupDate":61,"../../templates/signup/summary":68,"../MyView":94,"../templates/ShareBox":176,"../util/Form":199,"./PaymentOptions":121,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/asyncToGenerator":244,"babel-runtime/helpers/extends":246,"babel-runtime/regenerator":250}],130:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>Fresh food from farmers you know!</h1>\n    <section data-js=\"sectionOne\" class=\"striped\">\n        <h2></h2>\n    </section>\n    <section data-js=\"sectionTwo\">\n        <h2></h2>\n    </section>\n    <section data-js=\"sectionThree\" class=\"striped\">\n        <h2></h2>\n    </section>\n    <section data-js=\"sectionFour\">\n        <h2></h2>\n        <div class=\"staff\" data-js=\"staff\"></div>\n    </section>\n</div>";
};

},{}],131:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div class=\"fd-hidden back-btn\" data-js=\"backBtn\">\n        <span class=\"glyphicon glyphicon-menu-left\"></span>\n        <span>Account Options</span>\n    </div>\n    <div class=\"account-nav\" data-js=\"accountNav\">\n        <div data-js=\"accountInfoBtn\">\n            <h4>Account Info</h4>\n            <div>View and edit your name, email, phone number, and address.</div>\n        </div>\n        <div data-js=\"ordersBtn\">\n            <h4>Your Orders</h4>\n            <div>View your past and current orders.</div>\n        </div>\n        <div data-js=\"paymentBtn\">\n            <h4>Payment</h4>\n            <div>Make a credit card payment on any remaining balances.</div>\n        </div>\n    </div>\n    <div class=\"fd-hidden account-info\" data-js=\"accountInfo\">\n        <div data-view=\"form\" data-name=\"personalInfo\"></div>\n    </div>\n    <div class=\"fd-hidden\" data-js=\"orderInfo\">\n        <div data-view=\"seasons\"></div>\n        <div data-view=\"orderOptions\"></div>\n        <div data-view=\"weekOptions\"></div>\n        <div data-view=\"sharePatch\"></div>\n    </div>\n    <div class=\"fd-hidden\" data-view=\"accountPayments\"></div>\n</div>";
};

},{}],132:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div class=\"section-heading\">\n        <h3>Make a Payment</h3>\n        <p data-js=\"balanceMessage\">Select a share to view your balance and make a credit card payment</p>\n    </div>\n    <div data-view=\"seasons\"></div>\n    <div class=\"payment\">\n        <div class=\"total\" data-js=\"total\"></div>\n        <div class=\"fd-hidden\" data-js=\"ccWrapper\">\n            <div data-view=\"form\" data-name=\"creditCard\"></div>\n        </div>\n    </div>\n</div>";
};

},{}],133:[function(require,module,exports){
'use strict';

module.exports = function (p, _ref) {
    var Moment = _ref.Moment;

    var actions = p.opts.actions.map(function (action) {
        return '<option value="' + action + '">' + action + '</option>';
    }).join('');
    return '' + ('<div>\n    <form data-js="form">\n        <select data-js="action">' + actions + '</select>\n        <input type="text" data-js="value" placeholder="$0.00"/>\n        <input type="text" data-js="checkNumber"/>\n        <input type="text" data-js="initiator" value="admin" readonly/>\n        <input type="text" data-js="created" value="' + Moment().format('MMM D, YYYY') + '" />\n        <input type="text" data-js="description" placeholder="description"/>\n    </form>\n    <div data-view="buttonFlow"></div>\n</div>');
};

},{}],134:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<nav data-js=\"container\" class=\"admin-header\">\n    <div class=\"clearfix hidden-xs\">\n        <div class=\"logo-container\">\n            <img src=\"" + p.opts.logo + "\"/>\n        </div>\n        <div data-js=\"userPanel\" class=\"pull-right hide\">\n            <button data-js=\"signoutBtn\" class=\"btn btn-link\">Sign Out</button>\n            <span data-js=\"name\"></span>\n            <span data-js=\"profileBtn\" class=\"glyphicon glyphicon-user hide\"></span>\n        </div>\n    </div>\n</nav>";
};

},{}],135:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div data-js=\"nav\"></div>\n    <div class=\"views\" data-js=\"views\"></div>\n</div>";
};

},{}],136:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (p) {
    var disabled = p.disabled ? 'disabled' : '';

    return '' + ('<section class="' + (p.hide ? 'fd-hidden' : '') + '">') + (0, _keys2.default)(p.model.states).map(function (stateName) {
        return '<div data-js="' + stateName + '" class="state ' + stateName + ' ' + (stateName === 'start' ? '' : 'fd-hidden') + '">' + p.model.states[stateName].map(function (button) {
            return button.svg ? button.svg : '<button class="' + disabled + ' ' + (button.class || '') + ' "data-js="' + button.name + '">' + button.text + '</button>';
        }).join('') + '</div>';
    }).join('') + '</section>';
};

},{"babel-runtime/core-js/object/keys":233}],137:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<section>\n    <div class="left-panel" data-js="leftPanel">\n        <section>\n            <button class="link" data-js="backBtn">' + require('./lib/leftArrow')() + '<span>Back to Admin</span></button>\n        </section>\n        <section>\n            <button class="link" data-js="resource"></button>\n        </section>\n        <section>\n            <div data-view="list" data-name="collections"></div>\n        </section>\n    </div>\n    <div data-js="mainPanel" class="main-panel"></div>\n</section>';
};

},{"./lib/leftArrow":194}],138:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>Contact</h1>\n    <section>\n        <h2 data-js=\"intro\"></h2>\n        <div data-js=\"contactInfo\"></div>\n    </section>\n</div>";
};

},{}],139:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>CSA Program</h1>\n    <section data-js=\"aboutCSA\" class=\"about-csa\">\n        <h2></h2>\n    </section>\n    <div class=\"image-row\" data-js=\"dividerImagesOne\"></div>\n    <section data-js=\"csaFit\" class=\"csa-fit\">\n        <h2 data-js=\"howDoIKnow\"></h2>\n        <p></p>\n        <ul data-js=\"csaFitStatements\"></ul>\n    </section>\n    <section data-js=\"csaContents\" class=\"csa-contents\">\n        <h2></h2>\n        <p></p>\n        <div data-js=\"shareExamples\" class=\"share-examples\"></div>\n        <div data-js=\"shareDescriptions\" class=\"share-descriptions\"></div>\n        <p data-js=\"sharePriority\"></p>\n        <div class=\"button-row\">\n            <button class=\"btn-yellow\" data-js=\"signupBtn\" type=\"button\">Sign Up Now!</button>\n        </div>\n    </section>\n    <div class=\"image-row\" data-js=\"dividerImagesTwo\"></div>\n    <section data-js=\"csaDelivery\" class=\"delivery\">\n        <h2></h2>\n        <p></p>\n        <div class=\"delivery-matrix\" data-js=\"deliveryMatrix\"></div>\n    </section>\n    <section data-js=\"csaCustomization\">\n        <h2></h2>\n        <p><p>\n    </section>\n    <section data-js=\"addOns\">\n        <h2></h2>\n        <p></p>\n        <div data-js=\"addOnItems\" class=\"add-ons\"></div>\n    </section>\n    <section data-js=\"recipes\">\n        <h2></h2>\n        <div class=\"text-and-image\">\n            <p></p>\n            <div data-js=\"recipesImage\"></div>\n        </div>\n    </section>\n    <section data-js=\"payment\">\n        <h2></h2>\n        <p></p>\n        <p data-js=\"payableTo\"></p>\n        <div data-js=\"contact\" class=\"contact\"></div>\n        <p data-js=\"emailUs\"></p>\n        <div class=\"button-row\">\n            <button class=\"btn-yellow\" data-js=\"signupBtn\" type=\"button\">Sign Up Now!</button>\n        </div>\n    </section>\n</div>";
};

},{}],140:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
    var price = p.unit ? p.price + ' per ' + p.unit : p.price;

    return '' + ('<div class="item-detail">\n    <div>\n        <span>' + p.heading + '</span>\n        <span>|</span>\n        <span>' + price + '</span>\n    </div>\n    <p>' + Format.ParseTextLinks(p.information || p.description) + '</p>\n</div>');
};

},{"../../Format":5}],141:[function(require,module,exports){
'use strict';

module.exports = function (p, format) {
    var negativeClass = p.isNegative ? 'negative' : '';

    return '' + ('<li data-js="transaction" data-id="' + p.id + '">\n    <span data-attr="action" class="cell">' + p.action + '</span>\n    <span data-attr="value" class="cell ' + negativeClass + '">' + format.currency(Math.abs(p.value)) + '</span>\n    <span data-attr="checkNumber" class="cell">' + (p.checkNumber || '') + '</span>\n    <span data-attr="initiator" class="cell">' + p.initiator + '</span>\n    <span data-attr="created" class="cell">' + format.moment(p.created).format('MMM D, YYYY') + '</span>\n    <span data-attr="description" class="cell">' + p.description + '</span>\n</li>');
};

},{}],142:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div style=\"padding: 1rem; color: #222; background-color: #fff5df\">\n    " + p.paragraphs + "\n</div>";
};

},{}],143:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var heading = p.isAdmin ? 'Customer Info' : 'Your Account Info';
    var rows = p.fields.map(function (field) {
        var rowValue = field.name === 'neverReceive' ? '<div data-js="neverReceive" class="cell"></div>' : field.type === 'select' ? '<select data-name="' + field.name + '" data-js="' + field.name + '" class="cell">\n                        <option value="true">True</option>\n                        <option value="false">False</option>\n                    </select>' : '<div data-name="' + field.name + '" data-js="' + field.name + '" class="cell" contenteditable="true"></div>';

        return '' + ('<div class="table-row ' + field.name + '">\n            <div class="cell">' + field.label + '</div>\n            ' + rowValue + '\n        </div>');
    }).join('');

    return '' + ('<div class="fd-hidden section">\n        <div class="section-heading">\n            <h3>' + heading + '</h3>\n            <button class="reset-btn fd-hidden" data-js="resetBtn">Reset</button>\n        </div>\n        <div class="content">\n            <div class="data">\n                <div data-js="infoTable" class="customer-table">' + rows + '</div>\n            </div>\n            <div data-js="editSummary" class="edit-summary fd-hidden">\n                <div>Summary of Changes</div>\n                <div data-js="changes"></div>\n                <div>\n                    <button class="save-btn" data-js="saveBtn">Update Account</button>\n                </div>\n            </div>\n        </div>\n    </div>');
};

},{}],144:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
   var opts = _ref.opts;
   return "<section>\n    <p>" + opts.message + "</p>\n    <div class=\"button-row\">\n       <button data-js=\"submitBtn\" class=\"btn-submit\">Delete</button>\n       <button data-js=\"cancelBtn\" class=\"btn-cancel\">Cancel</button>\n    </div>\n</section>";
};

},{}],145:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<li data-date="' + p.date.format('YYYYMMDD') + '" class="delivery-date ' + (p.isAdmin ? '' : 'not-admin') + ' ' + (p.selected ? 'selected' : '') + ' ' + (p.unselectable ? 'unselectable' : '') + '">\n    <div>' + p.date.format('ddd') + '</div>\n    <div>' + p.date.format('MMM') + '</div>\n    <div>' + p.date.format('D') + '</div>\n</div>';
};

},{}],146:[function(require,module,exports){
"use strict";

module.exports = function (datum) {
    return "<div>\n    <span>" + (datum.label || datum.name) + "</span>\n</div>";
};

},{}],147:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<section class=\"no-select fd-hidden\">Dragging Item</section>";
};

},{}],148:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var actions = p.actions.map(function (action) {
        var selected = action === p.action ? 'selected="selected"' : '';
        return '<option value="' + action + '" ' + selected + '>' + action + '</option>';
    }).join('');
    return '' + ('<li data-js="editTransaction" class="edit-transaction">\n    <span></span>\n    <select data-attr="action">' + actions + '</select>\n    <input type="text" data-attr="value" value="' + p.value + '"/>\n    <input type="text" data-attr="checkNumber" value="' + (p.checkNumber || '') + '"/>\n    <input type="text" data-attr="created" value="' + (p.created || '') + '" />\n    <input type="text" data-attr="description" value="' + (p.description || '') + '"/>\n</li>');
};

},{}],149:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
  return '<img style="width: 100%;" src="' + Format.ImageSrc('header_sunrays_short.png') + '" />\n<div style="padding: .5rem; color: #fff; background-color: black; text-align: center; font-size: 1.3rem; font-family: \'Raleway\';">PATCHWORK GARDENS</div>';
};

},{"../../Format":5}],150:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    var attachmentMessage = p.hasAttachment ? "<p>Also attached is this week's newsletter. Enjoy!</p>" : "";

    return "" + ("<div style=\"padding: 1rem; color: #222; background-color: #fff5df\">\n    <p>Hello!</p>\n    <p>Please remember to bring back your empty box and pick up your CSA share.</p>\n    <p>Your delivery location is Patchwork Gardens - " + p.pickupAddress + ", " + p.dayofweek + " " + p.starttime + " to " + p.endtime + ".</p>\n    " + attachmentMessage + "\n    " + (p.customText || "") + "\n</div>");
};

},{}],151:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div>" + p.label + ": <span>" + p.oldValue + "</span>to<span>" + p.newValue + "</span></div>";
};

},{}],152:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<span class=\"help-block " + p.name + "\" data-js=\"fieldError\">" + p.error + "</span>";
};

},{}],153:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div></div>";
};

},{}],154:[function(require,module,exports){
"use strict";

module.exports = function () {
    return "<div>\n    <p>A <a href='mailto:topherbaron@gmail.com'>FutureDays</a> Site</p>\n</div>";
};

},{}],155:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var heading = p.opts.heading ? '<div class="heading">' + p.opts.heading + '</div>' : '',
        prompt = p.opts.prompt ? '<div class="prompt">' + p.opts.prompt + '</div>' : '',
        fields = p.GetFormFields(p.attributes, p.model, p.meta),
        buttonRow = p.opts.hideButtonRow ? '' : '<div class="btn-row">\n            <button class="btn-submit" data-js="submitBtn" type="button">\n                <span>' + (p.opts.submitText || 'Submit') + '</span>\n            </button>\n            <button class="btn-cancel" data-js="cancelBtn" type="button">\n                <span>' + (p.opts.cancelText || 'Cancel') + '</span>\n            </button>\n        </div>';

    return '<section>\n    ' + heading + '\n    <div class="form-box">\n        ' + prompt + '\n        <form data-js="form">' + fields + '</form>\n        ' + buttonRow + '  \n    </div>\n</section>';
};

},{}],156:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>Get Involved</h1>\n    <section data-js=\"employment\" class=\"striped\">\n        <h2></h2>\n        <p></p>\n        <ul class=\"positions\" data-js=\"openPositions\"></ul>\n    </section>\n    <section class=\"internships\" data-js=\"internships\">\n        <h2></h2>\n        <p></p>\n        <div>\n            <div data-js=\"internDuties\">\n                <h3></h3>\n                <ul data-js=\"dutyList\"></ul>\n            </div>\n            <div data-js=\"internQualifications\">\n                <h3></h3>\n                <ul data-js=\"qualificationList\"></ul>\n            </div>\n            <div data-js=\"internCompensation\">\n                <h3></h3>\n                <ul data-js=\"compensationList\"></ul>\n            </div>\n        </div>\n        <p data-js=\"application\"></p>\n    </section>\n    <section data-js=\"volunteer\" class=\"striped\">\n        <h2></h2>\n        <p></p>\n    </section>\n</div>";
};

},{}],157:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    var attachmentMessage = p.hasAttachment ? "<p>Also attached is this week's newsletter. Enjoy!</p>" : "";

    return "" + ("<div style=\"padding: 1rem; color: #222; background-color: #fff5df\">\n    <p>Hello!</p>\n    <p>Please remember to bring back your empty box (if you have one) and pick up your CSA share.</p>\n    <p>Your delivery location is " + p.dropoffName + " - " + p.street + ", " + p.dayofweek + " " + p.starttime + " to " + p.endtime + ".</p>\n    " + attachmentMessage + "\n    " + (p.customText || "") + "\n</div>");
};

},{}],158:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var opts = _ref.opts,
        ImageSrc = _ref.ImageSrc;

    var fields = opts.fields.map(function (field) {
        return '<li data-name="' + field.name + '">' + field.label + '</li>';
    }).join('');

    return '' + ('<div>\n    <div>\n        <img data-src="' + ImageSrc('header_sunrays') + '" />\n    </div>\n    <div data-js="nav" class="fd-hidden">\n        <div>\n            ' + require('./lib/justify') + '\n            <div><span data-js="title" data-name="' + opts.home.name + '">' + opts.home.label + '</span></div>\n        </div>\n        <div>\n            <ul data-js="navLinks">' + fields + '</ul>\n            <ul>\n                <li>\n                    <div data-js="signInBtn" class="fd-hidden">Member Sign In</div>\n                    <div class="member-ui" data-js="memberMenu" class="fd-hidden">\n                        <div data-js="userName"></div>\n                        <ul class="account-menu fd-hidden" data-js="accountMenu">        \n                            <li data-js="accountBtn">Your Account</li>\n                            <li data-js="signOutBtn">Sign Out</li>                         \n                        </ul>\n                    </div>\n                </li>\n            </ul>\n        </div>\n        <div><span data-js="csaSignUpBtn">CSA Sign Up</span></div>\n    </div>\n</div>');
};

},{"./lib/justify":193}],159:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div>\n    <img data-src="' + p.ImageSrc('cornucopia-home') + '" />\n    <div class="overlay">\n        <div data-js="slogan"></div>\n        <div>\n            <button class="btn-yellow" data-js="joinBtn" type="button">Join our CSA!</button>\n        </div>\n    </div>\n</div>';
};

},{}],160:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    var attachmentMessage = p.hasAttachment ? "<p>Also attached is this week's newsletter. Enjoy!</p>" : "";

    return "" + ("<div style=\"padding: 1rem; color: #222; background-color: #fff5df\">\n    <p>Hello!</p>\n    <p>Please remember to set out your empty box (if you have one). We will be bringing your weekly box of produce and would appreciate the empty box in return.</p>\n    " + attachmentMessage + "\n    " + (p.customText || "") + "\n</div>");
};

},{}],161:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var website = p.url ? '<a target="_blank" href="' + p.url + '">Website</a>' : '',
        directions = p.street && p.cityStateZip ? '<a target="_blank" href="http://maps.google.com/?q=' + p.street + ', ' + p.cityStateZip + '">Directions</a>' : '';

    return '' + ('<div class="info-window">\n    <div>' + p.name + '</div>\n    <div>\n        <div>' + (p.street || '') + '</div>\n        <div>' + (p.cityStateZip || '') + '</div>\n        <div>' + (p.phonenumber || '') + '</div>\n    </div>\n    <div>\n        <div>' + directions + '</div>\n        <div>' + website + '</div>\n    </div>\n</div>');
};

},{}],162:[function(require,module,exports){
'use strict';

var getHeading = function getHeading() {
    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { opts: {} };

    if (!p.opts || !p.opts.name) return '';
    return p.opts.toggle ? '<div data-js="toggle" class="heading side-by-side toggle">\n            ' + p.GetIcon('caret-down') + '\n            <span>' + p.opts.name + '</span>\n          </div>' : '<h3 class="heading">' + p.opts.name + '</h3>';
};

module.exports = function (p) {
    var buttonClass = p.model.isDocumentList ? 'floating' : 'btn-yellow';

    return '' + ('<section>\n    ' + getHeading(p) + '\n    <ol data-js="list" class="list ' + (p.model.draggable || p.model.droppable ? 'no-select' : '') + '"></ol>\n    <div class="button-row">\n        ' + (p.model.reset ? '<button class="' + buttonClass + '" data-js="resetBtn" type="button">Reset</button>' : '') + '\n        ' + (p.model.save ? '<button class="' + buttonClass + '" data-js="saveBtn" type="button">Save</button>' : '') + '\n        ' + (p.model.add ? '<button class="' + buttonClass + '" data-js="addBtn" type="button">Add</button>' : '') + '\n    </div>\n</section>');
};

},{}],163:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var name = p.url ? '<div><a target="_blank" href="' + p.url + '">' + (p.name || '') + '</a></div>' : '<div>' + (p.name || '') + '</div>';
    var hours = p.hours ? p.hours.split(',').map(function (item) {
        return '<div>' + item + '</div>';
    }).join('') : '';

    return '' + ('<li class="location">\n    ' + name + '\n    <div>' + (p.label || '') + '</div>\n    <div>' + (p.venue || '') + '</div>\n    <div>' + (p.street || '') + '</div>\n    <div>' + (p.cityStateZip || '') + '</div>\n    <div>' + (p.phonenumber || '') + '</div>\n    <div><a href="mailto:' + p.email + '">' + (p.email || '') + '</a></div>\n    ' + hours + '\n</li>');
};

},{}],164:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var categories = p.opts.categories.map(function (attr) {
        return '<li>\n            <label>\n                <input data-name="' + attr.name + '" type="checkbox" checked />\n                <span></span>\n                <span class="' + attr.name + '">' + attr.label + '</span>\n            </label>\n        </li>';
    }).join('');

    return '' + ('<div>\n    <h1>Locations</h1>\n    <section>\n        <p data-js="intro"></p>\n    </section>\n    <div>\n        <div class="map-wrap">\n            <div data-js="map"></div>\n            <ul class="legend" data-js="legend">\n                ' + categories + '\n            </ul>\n        </div>\n    </div>\n    <section data-js="farmersMarkets" class="striped">\n        <h2></h2>\n        <p></p>\n        <ul data-js="farmerMarketsList"></ul>\n    </section>\n    <section data-js="retailOutlets">\n        <h2></h2>\n        <p></p>\n        <ul data-js="retailOutletsList"></ul>\n    </section>\n    <section data-js="restaurants" class="striped">\n        <h2></h2>\n        <p></p>\n        <ul data-js="restaurantsList"></ul>\n    </section>  \n    <section data-js="pickupLocations">\n        <h2></h2>\n        <p></p>\n        <ul data-js="groupLocationsList"></ul>\n        <div class="button-row">\n            <button class="btn-yellow" data-js="signupBtn" type="button">Sign Up Now!</button>\n        </div>\n    </section>\n</div>');
};

},{}],165:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div class=\"notice fd-hidden\" data-js=\"errorMessage\"></div>\n    <div>\n        <div class=\"form-wrap\">\n            <div data-js=\"loginWrapper\">\n                <div data-view=\"form\" data-name=\"loginForm\"></div>\n                <div data-js=\"forgotPassword\">Forgot Your Password?</div>\n            </div>\n            <div class=\"fd-hidden\" data-view=\"form\" data-name=\"forgotPassword\"</div>\n        </div>\n    </div>\n</div>";
};

},{}],166:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div data-js=\"customerLogin\" class=\"customer-login fd-hidden\"><button data-js=\"customerLoginBtn\" type=\"button\">Sign in as this customer</button></div>\n    <div class=\"main-search\">\n        <div data-view=\"memberTypeahead\"></div>\n    </div>\n    <div data-view=\"customerInfo\"></div>\n    <div data-view=\"seasons\"></div>\n    <div data-view=\"orderOptions\"></div>\n    <div data-view=\"weekOptions\"></div>\n    <div data-view=\"sharePatch\"></div>\n    <div data-view=\"transactions\"></div>\n</div>";
};

},{}],167:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var fields = p.fields.map(function (field) {
        return '<div class="form-group">\n            <label for="' + field.name + '">' + field.label + '</label>\n            <div>\n                <input type="' + field.type + '" class="form-control" id="' + field.name + '" data-js="' + field.name + '">\n                <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n            </div>\n        </div>';
    }).join('');

    return '' + ('<div class="MemberInfo" data-js="container">\n    <p>Please provide us with some information about yourself</p>\n    <div class="notice fd-hidden" data-js="existingAccountNotice">Our records show that an account already exists for the email you have entered. Please sign in before continuing.</div>\n    <form>\n        ' + fields + '\n        <div style="display: none;"><input type="text" id="PreventChromeAutocomplete" name="PreventChromeAutocomplete" autocomplete="address-level4" /></div>\n    </form>\n</div>');
};

},{}],168:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <label class=\"form-label\">Search Customers</label>  \n    <input data-js=\"customerInput\" class=\"input-std type=\"text\">\n</div>";
};

},{}],169:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "";
};

},{}],170:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div data-js=\"container\" class=\"modal fade\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div data-js=\"header\" class=\"modal-header\">\n        <button data-js=\"closeBtn\" type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n        <h4 class=\"modal-title\" data-js=\"title\"></h4>\n      </div>\n      <div data-js=\"body\" class=\"modal-body\"></div>\n      <div data-js=\"footer\" class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-js=\"cancelBtn\" data-dismiss=\"modal\">Close</button>\n        <button type=\"button\" class=\"btn btn-primary\" data-js=\"confirmBtn\">Save</button>\n      </div>\n    </div>\n  </div>\n</div>";
};

},{}],171:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hidden section\">\n    <div class=\"section-heading\">\n        <h3>Order Options</h3>\n        <span data-js=\"seasonLabel\"></span>\n        <button class=\"reset-btn fd-hidden\" data-js=\"resetBtn\">Reset</button>\n    </div>\n    <div class=\"content\">\n        <div class=\"data\">\n            <ol data-js=\"options\"></ol>\n        </div>\n        <div data-js=\"editSummary\" class=\"edit-summary fd-hidden\">\n            <div>Summary of Changes</div>\n            <div data-js=\"changes\"></div>\n            <div>\n                <span>Weekly price adjustment: </span>\n                <span class=\"original-price\" data-js=\"originalWeeklyPrice\"></span>\n                <span>to</span>\n                <span class=\"new-price\" data-js=\"newWeeklyPrice\"></span>\n            </div>\n        </div>\n    </div>\n    <div data-js=\"seasonalItems\" class=\"fd-hidden seasonal-items\">\n        <h3>Seasonal Items Purchased</h3>\n        <div data-js=\"seasonalItemsList\"></div>\n    </div>\n</div>";
};

},{}],172:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<section>\n    <h4>Reporting</h4>\n    <form>\n        <div>\n            <div>\n                <label>Name:</label>\n                <select data-js=\"report\"></select>\n            </div>\n            <div>\n                <label>Select Date By:</label>\n                <select data-js=\"dateTypeSelect\">\n                    <option value=\"custom\">Custom Range</option>\n                    <option value=\"year\">Year</option>\n                    <option value=\"season\">Season</option>\n                </select>\n            </div>\n        </div>\n        <div>\n            <div data-js=\"custom\">\n                <div>\n                    <label>From:</label>\n                    <input type=\"text\" data-js=\"from\" />\n                </div>\n                <div>\n                    <label>To:</label>\n                    <input type=\"text\" data-js=\"to\" />\n                </div>\n            </div>\n            <div class=\"fd-hidden\">\n                <label>Choose Year:</label>\n                <select data-js=\"year\"></select>\n            </div>\n            <div class=\"fd-hidden\">\n                <label>Choose Season:</label>\n                <select data-js=\"season\"></select>\n            </div>\n        </div>\n        <div>\n            <button type=\"button\" data-js=\"viewBtn\" class=\"btn-yellow\">View</button>\n            <button type=\"button\" data-js=\"exportBtn\" class=\"btn-yellow\">Export</button>\n        </div>\n    </form>\n    <div class=\"results\" data-js=\"results\">\n        <h4 class=\"fd-hidden\" data-js=\"empty\">No results</h4>\n        <ol class=\"columns\" data-js=\"columns\"></ol>\n        <div class=\"rows\" data-js=\"rows\"></div>\n    </div>\n</section>";
};

},{}],173:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div>\n        <div class=\"form-wrap\">\n            <div class=\"home-link\"><a href=\"/\" target=\"_blank\">Patchwork Gardens</a></div>\n            <div data-view=\"form\" data-name=\"resetPassword\"</div>\n        </div>\n    </div>\n</div>";
};

},{}],174:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var options = p.options.map(function (option) {
        return '<option value="' + option.id + '">' + option.label + '</option>';
    }).join(''),
        description = p.description ? '<span data-js="' + p.name + 'Icon" class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>' : '';

    return '' + ('<div class="share-option">\n    <div class="option-title">\n        <div>\n            <span>' + p.label + '</span>\n            ' + description + '\n       </div>\n        <div>\n            <select data-js="' + p.name + '" class="form-control">\n                <option selected value="">None</option>\n                ' + options + '\n            </select>    \n        </div>\n    </div>\n    <div class="total">\n        <div data-js="' + p.name + 'Total"></div>\n    </div>\n</div>');
};

},{}],175:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var heading = p.opts.isAdmin ? 'All Seasons' : 'Your Orders',
        instructions = p.opts.isAdmin ? '' : '<p>Select a share to view your order details.</p>';

    return '' + ('<div class="fd-hidden section">\n    <div class="section-heading">\n        <h3>' + heading + '</h3>\n        ' + instructions + '\n    </div>\n    <div class="table">\n        <ol class="table-row" data-js="list"></ol>\n    </div>\n    <div data-js="totals" class="totals">\n        <div data-js="seasonLabel"></div>\n        <div data-js="weeklyPrice"></div>\n        <div data-js="weekNumber"></div>\n        <div data-js="orderTotal"></div>\n    </div>\n    <div class="fd-hidden" data-js="noDataMessage">Order has no data.</div>\n    <div class="fd-hidden" data-name="orderDeleteButtonFlow" data-view="buttonFlow"></div>\n    <div data-js="balanceNotice" class="fd-hidden">Our records indicate an outstanding balance of <span data-js="balanceAmount"></span> for this share. <span class="link" data-js="payment">Pay now</span> if you\'d like or continue below if you want to view your order details.</div>\n</div>');
};

},{}],176:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    var dataId = p.membershareid ? "data-id=\"" + p.membershareid + "\"" : "",
        count = p.count ? "<span>(" + p.count + ")</span>" : "";

    return "" + ("<div " + dataId + " class=\"share-label\">\n        <div><span>" + p.label + "</span> " + count + "</div>\n        <div>\n            <span>" + p.humanStartdate + "</span>\n            <span>-</span>\n            <span>" + p.humanEnddate + "</span>\n        </div>\n        <div>" + p.duration + " weeks</div>\n    </div>");
};

},{}],177:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
    return '<div>\n    <h4>' + p.heading + '</h4>\n    <div><img data-src="' + Format.ImageSrc(p.image) + '" /></div>\n    <div>' + p.listHeading + '</div>\n    <ul>' + Format.GetListItems(p.sampleList) + '</ul>\n</div>';
};

},{"../../Format":5}],178:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var heading = p.opts.isAdmin ? 'Adjust Member Share Options' : 'Summary of Share Updates';

    return '' + ('<div class="fd-hidden">\n    <div class="section-heading">\n        <h3>' + heading + '</h3>\n    </div>\n    <div class="content">\n        <div>\n            <ul>\n                <li class="line-item">\n                    <span>Share Change</span>\n                    <span>Price Adjustment</span>\n                </li>\n                <li class="line-item">\n                    <div>\n                        <span>Weeks Removed: </span>\n                        <span data-js="weeksRemoved"></span>\n                    </div>\n                    <div class="adjustment" data-js="weeksRemovedPrice"></div>\n                </li>\n                <li class="line-item">\n                    <div>\n                        <span>Weeks Added: </span>\n                        <span data-js="weeksAdded"></span>\n                    </div>\n                    <div data-js="weeksAddedPrice" class="adjustment"></div>\n                </li>\n                <li data-js="options" class="line-item options fd-hidden">\n                    <div>\n                        <div>Options Update:</div>\n                        <ul data-js="shareOptionDescription"></ul>\n                    </div>\n                    <div>\n                        <span>Original Weekly Price: </span>\n                        <span data-js="originalWeeklyPrice"></span>\n                    </div>\n                    <div>\n                        <span>New Weekly Price: </span>\n                        <span data-js="newWeeklyPrice"></span>\n                    </div>\n                    <div>\n                        <span>Weekly price adjustment: </span>\n                        <span data-js="weeklyAdjustment"></span>\n                    </div>\n                    <div>\n                        <div>\n                            <span>Weeks affected: </span>\n                            <span data-js="weeksAffected"></span>\n                        </div>\n                        <div>\n                            <span class="adjustment">\n                                <span data-js="optionsAdjustment"></span>\n                            </span>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n            <div class="total">\n                <div>\n                    <span>Original Grand Total: </span>\n                    <span data-js="originalGrandTotal"></span>\n                </div>\n                <div>\n                    <span>New Grand Total: </span>\n                    <span data-js="newGrandTotal"></span>\n                </div>\n                <div>\n                    <span data-js="adjustmentType"></span>\n                    <span data-js="adjustment"></span>\n                </div>\n            </div>\n            <div class="email ' + (!p.opts.isAdmin ? 'fd-hidden' : '') + '">\n                <label><input data-js="sendEmail" type="checkbox">Send Email</label>\n            </div>\n            <div data-view="buttonFlow"></div>\n        </div>\n    </div>\n</div>');
};

},{}],179:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
    return '<div class="bio">\n    <div>\n        <img data-src="' + Format.ImageSrc(p.image) + '" />\n        <div class="overlay">\n            <div>' + (p.bio || '') + '</div>\n        </div>\n    </div>\n    <div>' + p.name + '</div>\n</div>';
};

},{"../../Format":5}],180:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "" + "<div class=\"clearfix fd-hidden\">\n    <div data-js=\"icon\"></div>\n    <div>\n        <div data-js=\"title\"></div>\n        <div data-js=\"message\"></div>\n    </div>\n</div>";
};

},{}],181:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hidden section\">\n    <h3>Transactions</h3>\n    <div class=\"heading\">\n        <span>Action</span>\n        <span>Value</span>\n        <span>Check #</span>\n        <span>Initiator</span>\n        <span>Date</span>\n        <span>Description</span>\n    </div>\n    <ol data-js=\"transactions\"></ol>\n    <div data-view=\"addTransaction\"></div>\n    <div class=\"balance\">\n        <h3>Balance</h3>\n        <span data-js=\"balance\"></span>\n        <span></span>\n        <span>\n            <div data-view=\"buttonFlow\" data-name=\"emailButtons\"></div>\n        </span>\n    </div>\n</div>";
};

},{}],182:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div class="' + (p.opts.hideSearch ? 'hiding-search' : '') + '">\n    <input data-js="input" placeholder="' + (p.opts.placeholder || '') + '" "type="text">\n    ' + (p.opts.hideSearch ? '' : require('./lib/search')()) + '\n</div>';
};

},{"./lib/search":197}],183:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div>\n        <div data-js=\"message\"></div>\n        <a href=\"/\" target=\"_blank\">Patchwork Gardens Home</a>\n    </div>\n</div>";
};

},{}],184:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hidden\">\n    <div class=\"section-heading\">\n        <h3>Week Options</h3>\n        <div>\n            <span>Delivery Day: </span>\n            <span data-js=\"deliveryDay\"></span>\n        </div>\n        <button class=\"reset-btn hidden\" data-js=\"resetBtn\">Reset</button>\n    </div>\n    <div class=\"content\">\n        <div class=\"data\">\n            <ol data-js=\"dates\"></ol>\n        </div>\n        <div data-js=\"editSummary\" class=\"edit-summary fd-hidden\">\n            <div>Summary of Changes</div>\n            <div data-js=\"changes\">\n                <div class=\"column\">\n                    <div>Added Dates</div>\n                    <ol data-js=\"selectedDates\" class=\"added-dates\"></ol>\n                </div>\n                <div class=\"column\">\n                    <div>Removed Dates</div>\n                    <ol data-js=\"removedDates\" class=\"removed-dates\"></ol>\n                </div>\n            </div>\n            <div>\n                <span>Week count adjustment: </span>\n                <span class=\"price-change\" data-js=\"weekChange\"></span>\n            </div>\n        </div>\n    </div>\n</div>";
};

},{}],185:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div>\n        <h2>Weekly Reminder</h2>\n        <div class=\"form\">\n            <div>\n                <label>Get List By:</label>\n                <select data-js=\"listSelect\">\n                    <option value=\"day\">Day of Week</option>\n                    <option value=\"deliveryType\">Delivery Type</option>\n                    <option value=\"singleGroup\">Single Dropoff Group</option>\n                </select>\n            </div>\n            <div>\n                <label>Choose Day:</label>\n                <select data-js=\"daySelect\"></select>\n            </div>\n            <div class=\"fd-hidden\">\n                <label>Choose Group:</label>\n                <select data-js=\"singleGroupSelect\"></select>\n            </div>\n            <div class=\"fd-hidden\">\n                <label>Choose Delivery Type:</label>\n                <select data-js=\"deliveryTypeSelect\">\n                    <option value=\"home\">Home Delivery</option>\n                    <option value=\"groupDropoffs\">Group Dropoff</option>\n                    <option value=\"farm\">Farm Pickup</option>\n                </select>\n            </div>\n            <div>\n                <label>Subject Line:</label>\n                <input data-js=\"subjectLine\" type=\"text\" value=\"Weekly Reminder from Patchwork Gardens\" />\n            </div>\n            <div class=\"upload\">\n                <label for=\"upload\">Upload Attachment(s):</label>\n                <input type=\"file\" multiple=\"true\" data-js=\"upload\" />\n            </div>\n            <div>\n                <label>Create Custom Text</label>\n                <input data-js=\"customizeBtn\" type=\"checkbox\" />\n            </div>\n            <div class=\"fd-hidden custom-area\" data-js=\"customArea\">\n                <div>\n                    <label>Custom Text:</label>\n                    <textarea data-js=\"customText\" rows=\"10\"></textarea>\n                </div>\n                <div>\n                    <label>Replace default reminder template</label>\n                    <input data-js=\"replaceDefaultBtn\" type=\"checkbox\" />\n                </div>\n            </div>\n            <div>\n                <button type=\"button\" data-js=\"viewBtn\" class=\"btn-yellow\">View Email List</button>\n            </div>\n        </div>\n    </div>\n    <div class=\"fd-hidden\">\n        <button type=\"button\" data-js=\"sendEmailBtn\" class=\"send-btn\">Send Reminder Email</button>\n    </div>\n    <div class=\"results\" data-js=\"results\">\n        <h4 class=\"fd-hidden\" data-js=\"empty\">No results</h4>\n        <ol class=\"columns\" data-js=\"columns\"></ol>\n        <div class=\"rows\" data-js=\"rows\"></div>\n    </div>\n</div>";
};

},{}],186:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var sizeOptions = p.sizeOptions.map(function (option) {
        return '<div class="cell">' + option.label + ' Share</div>';
    }).join(''),
        rows = p.deliveryOptions.map(function (deliveryOption) {
        return '<div>' + ('<div class="cell">' + deliveryOption.label + '</div>') + p.sizeOptions.map(function (sizeOption) {
            var price = (parseFloat(sizeOption.price.replace('$', '')) + parseFloat(deliveryOption.price.replace('$', ''))).toFixed(2);
            return '<div class="cell">$' + price + ' / box</div>';
        }).join('') + '</div>';
    }).join('');

    return '' + ('<div>\n    <div>\n        <div class="cell">Delivery Option</div>\n        ' + sizeOptions + '\n    </div>\n    ' + rows + '\n</div>');
};

},{}],187:[function(require,module,exports){
"use strict";

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	return "" + ("<svg class=\"caret-down\" version=\"1.1\" class=\"caret-down\" " + this.IconDataJs(p) + " xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 292.362 292.362\" style=\"enable-background:new 0 0 292.362 292.362;\"\n\t xml:space=\"preserve\">\n<g>\n\t<path d=\"M286.935,69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952,0-9.233,1.807-12.85,5.424\n\t\tC1.807,72.998,0,77.279,0,82.228c0,4.948,1.807,9.229,5.424,12.847l127.907,127.907c3.621,3.617,7.902,5.428,12.85,5.428\n\t\ts9.233-1.811,12.847-5.428L286.935,95.074c3.613-3.617,5.427-7.898,5.427-12.847C292.362,77.279,290.548,72.998,286.935,69.377z\"/>\n</g></svg>");
};

},{}],188:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg version="1.1" data-js="' + (p.name || 'checkmark') + '" class="checkmark" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="97.619px" height="97.618px" viewBox="0 0 97.619 97.618" style="enable-background:new 0 0 97.619 97.618;"\n\t xml:space="preserve">\n<g>\n\t<path d="M96.939,17.358L83.968,5.959c-0.398-0.352-0.927-0.531-1.449-0.494C81.99,5.5,81.496,5.743,81.146,6.142L34.1,59.688\n\t\tL17.372,37.547c-0.319-0.422-0.794-0.701-1.319-0.773c-0.524-0.078-1.059,0.064-1.481,0.385L0.794,47.567\n\t\tc-0.881,0.666-1.056,1.92-0.39,2.801l30.974,40.996c0.362,0.479,0.922,0.771,1.522,0.793c0.024,0,0.049,0,0.073,0\n\t\tc0.574,0,1.122-0.246,1.503-0.68l62.644-71.297C97.85,19.351,97.769,18.086,96.939,17.358z"/>\n</g></svg>';
};

},{}],189:[function(require,module,exports){
'use strict';

module.exports = function () {
  var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return '<svg data-js="' + (p.name || 'edit') + '" class="edit" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" version="1.1" x="0px" y="0px" viewBox="0 0 100 100"><g transform="translate(0,-952.36218)"><path style="opacity:1;color:#000000;fill:#000000;stroke:none;stroke-width:4;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;fill-opacity:1;stroke-dasharray:none" d="M 70 13 L 61.4375 21.5625 L 78.4375 38.5625 L 87 30 L 70 13 z M 58.59375 24.40625 L 20.4375 62.5625 L 37.4375 79.5625 L 75.59375 41.40625 L 58.59375 24.40625 z M 17.84375 65.65625 L 13 87 L 34.34375 82.15625 L 17.84375 65.65625 z " transform="translate(0,952.36218)"/></g></svg>';
};

},{}],190:[function(require,module,exports){
'use strict';

module.exports = function () {
    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return '<svg version="1.1" data-js="' + (p.name || 'error') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 18.978 18.978" style="enable-background:new 0 0 18.978 18.978;" xml:space="preserve">\n<g>\n    <path d="M16.088,1.675c-0.133-0.104-0.306-0.144-0.47-0.105c-0.013,0.002-1.261,0.29-2.594,0.29\n        c-1.788,0-2.789-0.476-2.975-1.415C9.999,0.191,9.779,0.007,9.521,0c-0.257-0.007-0.487,0.167-0.55,0.418\n        C8.727,1.386,7.71,1.877,5.95,1.877c-1.332,0-2.571-0.302-2.583-0.305c-0.166-0.04-0.34-0.004-0.474,0.102\n        C2.76,1.777,2.681,1.938,2.681,2.108v4.869c0,0.04,0.004,0.078,0.013,0.115c0.057,1.647,0.65,8.714,6.528,11.822\n        c0.08,0.043,0.169,0.064,0.258,0.064c0.092,0,0.183-0.021,0.266-0.066c5.74-3.137,6.445-10.115,6.532-11.791\n        c0.012-0.046,0.019-0.094,0.019-0.144V2.108C16.297,1.939,16.219,1.78,16.088,1.675z M15.19,6.857\n        c-0.007,0.031-0.012,0.064-0.013,0.097c-0.053,1.298-0.574,7.832-5.701,10.838c-5.215-2.965-5.646-9.526-5.68-10.83\n        c0-0.029-0.004-0.058-0.009-0.085V2.784C4.322,2.877,5.112,2.982,5.95,2.982c1.911,0,2.965-0.54,3.537-1.208\n        c0.553,0.661,1.599,1.191,3.536,1.191c0.839,0,1.631-0.101,2.166-0.188L15.19,6.857L15.19,6.857z"/>\n    <polygon points="10.241,11.237 10.529,5.311 8.449,5.311 8.75,11.237 \t\t"/>\n    <path d="M9.496,11.891c-0.694,0-1.178,0.498-1.178,1.189c0,0.682,0.471,1.191,1.178,1.191\n        c0.706,0,1.164-0.51,1.164-1.191C10.647,12.389,10.189,11.891,9.496,11.891z"/>\n</g></svg>';
};

},{}],191:[function(require,module,exports){
'use strict';

module.exports = function () {
  var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return '<svg class="ex" data-js="' + (p.name || 'ex') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve"><g><g><polygon points="405,136.798 375.202,107 256,226.202 136.798,107 107,136.798 226.202,256 107,375.202 136.798,405 256,285.798     375.202,405 405,375.202 285.798,256   "/></g></g></svg>';
};

},{}],192:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg version="1.1" class="garbage" data-js="' + (p.name || 'garbage') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 59 59" style="enable-background:new 0 0 59 59;" xml:space="preserve">\n<g><path d="M29.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C28.5,50.553,28.948,51,29.5,51z"/>\n\t<path d="M19.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C18.5,50.553,18.948,51,19.5,51z"/>\n\t<path d="M39.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C38.5,50.553,38.948,51,39.5,51z"/>\n\t<path d="M52.5,6H38.456c-0.11-1.25-0.495-3.358-1.813-4.711C35.809,0.434,34.751,0,33.499,0H23.5c-1.252,0-2.31,0.434-3.144,1.289\n\t\tC19.038,2.642,18.653,4.75,18.543,6H6.5c-0.552,0-1,0.447-1,1s0.448,1,1,1h2.041l1.915,46.021C10.493,55.743,11.565,59,15.364,59\n\t\th28.272c3.799,0,4.871-3.257,4.907-4.958L50.459,8H52.5c0.552,0,1-0.447,1-1S53.052,6,52.5,6z M21.792,2.681\n\t\tC22.24,2.223,22.799,2,23.5,2h9.999c0.701,0,1.26,0.223,1.708,0.681c0.805,0.823,1.128,2.271,1.24,3.319H20.553\n\t\tC20.665,4.952,20.988,3.504,21.792,2.681z M46.544,53.979C46.538,54.288,46.4,57,43.636,57H15.364\n\t\tc-2.734,0-2.898-2.717-2.909-3.042L10.542,8h37.915L46.544,53.979z"/>\n</g></svg>';
};

},{}],193:[function(require,module,exports){
"use strict";

module.exports = "<svg version=\"1.1\" data-js=\"justify\" class=\"justify\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"-2 -2 28 28\" style=\"enable-background:new 0 0 22.916 22.916;\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M22.416,22.828H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,22.828,22.416,22.828z\"/>\n\t<path d=\"M22.416,15.582H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,15.582,22.416,15.582z\"/>\n\t<path d=\"M22.416,8.335H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,8.335,22.416,8.335z\"/>\n\t<path d=\"M22.416,1.088H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,1.088,22.416,1.088z\"/></g></svg>";

},{}],194:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg class="left-arrow" data-js="' + (p.name || 'leftArrow') + '" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t viewBox="0 0 31.494 31.494" style="enable-background:new 0 0 31.494 31.494;" xml:space="preserve">\n<path style="fill:#1E201D;" d="M10.273,5.009c0.444-0.444,1.143-0.444,1.587,0c0.429,0.429,0.429,1.143,0,1.571l-8.047,8.047h26.554\n\tc0.619,0,1.127,0.492,1.127,1.111c0,0.619-0.508,1.127-1.127,1.127H3.813l8.047,8.032c0.429,0.444,0.429,1.159,0,1.587\n\tc-0.444,0.444-1.143,0.444-1.587,0l-9.952-9.952c-0.429-0.429-0.429-1.143,0-1.571L10.273,5.009z"/></svg>';
};

},{}],195:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<svg class=\"minus\" data-js=\"minus\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"3 3 16 16\"><circle cx=\"11\" cy=\"-1041.36\" r=\"8\" transform=\"matrix(1 0 0-1 0-1030.36)\" opacity=\".98\" fill=\"#da4453\"/><path d=\"m321.29 365.13c0 0-66.11 0-82.2.043v29.962c16.09-.022 82.2-.022 82.2-.022h29.983 82.18v-29.983h-82.18z\" fill=\"#fff\" transform=\"matrix(.05956 0 0 .05956-9.03-11.652)\"/></svg>";
};

},{}],196:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg class=\"plus\" data-js=\"plus\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n     width=\"459.325px\" height=\"459.325px\" viewBox=\"0 0 459.325 459.325\" style=\"enable-background:new 0 0 459.325 459.325;\"\n     xml:space=\"preserve\">\n<g>\n    <path d=\"M459.319,229.668c0,22.201-17.992,40.193-40.205,40.193H269.85v149.271c0,22.207-17.998,40.199-40.196,40.193\n        c-11.101,0-21.149-4.492-28.416-11.763c-7.276-7.281-11.774-17.324-11.769-28.419l-0.006-149.288H40.181\n        c-11.094,0-21.134-4.492-28.416-11.774c-7.264-7.264-11.759-17.312-11.759-28.413C0,207.471,17.992,189.475,40.202,189.475h149.267\n        V40.202C189.469,17.998,207.471,0,229.671,0c22.192,0.006,40.178,17.986,40.19,40.187v149.288h149.282\n        C441.339,189.487,459.308,207.471,459.319,229.668z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>";
};

},{}],197:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg class="search" data-js="' + (p.name || 'search') + '" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n viewBox="0 0 30.239 30.239" style="enable-background:new 0 0 30.239 30.239;" xml:space="preserve">\n<g>\n\t<path d="M20.194,3.46c-4.613-4.613-12.121-4.613-16.734,0c-4.612,4.614-4.612,12.121,0,16.735\n\t\tc4.108,4.107,10.506,4.547,15.116,1.34c0.097,0.459,0.319,0.897,0.676,1.254l6.718,6.718c0.979,0.977,2.561,0.977,3.535,0\n\t\tc0.978-0.978,0.978-2.56,0-3.535l-6.718-6.72c-0.355-0.354-0.794-0.577-1.253-0.674C24.743,13.967,24.303,7.57,20.194,3.46z\n\t\t M18.073,18.074c-3.444,3.444-9.049,3.444-12.492,0c-3.442-3.444-3.442-9.048,0-12.492c3.443-3.443,9.048-3.443,12.492,0\n\t\tC21.517,9.026,21.517,14.63,18.073,18.074z"/>\n</g></svg>';
};

},{}],198:[function(require,module,exports){
'use strict';

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
    loadTableData: function loadTableData(table) {
        var _this = this;

        this.models[table.name] = (0, _create2.default)(require('../../models/__proto__'), { resource: { value: table.name } });

        var query = table.sort ? { sort: table.sort } : {};

        this.models[table.name].get({ query: query }).then(function () {
            if (table.image) {
                var promise = _promise2.default.resolve();
                _this.models[table.name].data.forEach(function (model) {
                    return promise = promise.then(function () {
                        return _this.loadImageTable(table, model);
                    });
                });
                return promise;
            } else {
                _this.models[table.name].data.forEach(function (model) {
                    return _this.slurpTemplate({
                        insertion: { el: _this.els[table.el] },
                        template: _this.templates[table.template](model)
                    });
                });
            }
        }).catch(this.Error);
    },
    processObject: function processObject(name, data) {
        var _this2 = this;

        (0, _keys2.default)(data).forEach(function (key) {
            var val = data[key];

            if ((typeof val === 'undefined' ? 'undefined' : (0, _typeof3.default)(val)) === 'object') return Array.isArray(val) ? _this2.insertArrayData(name, key, val) : _this2.processObject(key, val);

            if (_this2.els[key]) return (/image/i.test(key) ? _this2.slurpTemplate({
                    insertion: { el: _this2.els[key] },
                    template: '<img data-src="' + _this2.Format.ImageSrc(data[key]) + '" />'
                }) : _this2.els[key].innerHTML = _this2.Format.ParseTextLinks(data[key])
            );

            if (_this2.nameToTagName[key]) {
                _this2.els[name].querySelector(_this2.nameToSelector[key] || _this2.nameToTagName[key]).innerHTML = _this2.Format.ParseTextLinks(data[key]);
            }
        });
    },
    insertArrayData: function insertArrayData(sectionName, key, data) {
        var _this3 = this;

        var el = this.els[key] || this.els[sectionName],
            hasImages = /image/i.test(key);

        data.forEach(function (datum) {
            return _this3.slurpTemplate({
                insertion: { el: el },
                template: hasImages ? '<img data-src="' + _this3.Format.ImageSrc(datum) + '" />' : '<' + (_this3.nameToTagName[key] || 'li') + '>' + _this3.Format.ParseTextLinks(datum) + '</' + (_this3.nameToTagName[key] || 'li') + '>'
            });
        });
    },


    nameToSelector: {
        heading: 'h2, h3, h4'
    },

    nameToTagName: {
        heading: 'h2',
        description: 'p'
    },

    onLinkClick: function onLinkClick(el) {
        if (!el.hasAttribute('data-name')) return;
        this.emit('navigate', el.getAttribute('data-name'));
    },
    postRender: function postRender() {
        var _this4 = this;

        if (this.tables.length) {
            this.models = {};
            this.tables.forEach(function (table) {
                return _this4.loadTableData(table);
            });
        }

        this.Xhr({ method: 'get', resource: 'Pages', qs: (0, _stringify2.default)({ name: this.documentName }) }).then(function (data) {
            _this4.processObject(null, data);
            [].concat((0, _toConsumableArray3.default)(_this4.els.container.querySelectorAll('.link'))).forEach(function (el) {
                return el.addEventListener('click', function () {
                    return _this4.onLinkClick(el);
                });
            });
        }).catch(this.Error);

        return this;
    },


    tables: []

};

},{"../../models/__proto__":44,"babel-runtime/core-js/json/stringify":216,"babel-runtime/core-js/object/create":226,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/helpers/toConsumableArray":248,"babel-runtime/helpers/typeof":249}],199:[function(require,module,exports){
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MyView = require('../MyView'),
    Form = function Form() {
    return MyView.apply(this, arguments);
};

(0, _extends3.default)(Form.prototype, MyView.prototype, {

    emailRegex: /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,

    fields: [],

    onFormFail: function onFormFail(error) {
        console.log(error.stack || error);
        this.slurpTemplate({ template: this.templates.serverError(error), insertion: { $el: this.templateData.buttonRow, method: 'before' } });
    },

    onSubmissionResponse: function onSubmissionResponse() {},

    postForm: function postForm(data) {
        return this.Q(this.$.ajax({
            data: (0, _stringify2.default)(data.values) || (0, _stringify2.default)(this.getFormData()),
            headers: { token: this.user ? this.user.get('token') : '' },
            type: "POST",
            url: this.util.format("/%s", data.resource)
        }));
    },


    removeErrors: function removeErrors(e) {

        var input = this.$(e.target);
        input.parent().removeClass('has-error');
        input.next().remove();
    },

    submitForm: function submitForm(resource) {

        if (this.validateForm() === false) return;
        this.postForm(resource).then(this.onSubmissionResponse.bind(this)).fail(this.onFormFail.bind(this)).done();
    },

    templates: {
        fieldError: require('../templates/FieldError')
    },

    validateForm: function validateForm() {
        var valid = true;

        this.fields.forEach(function (field) {

            this.templateData[field.name].parent().removeClass('has-error');
            this.templateData[field.name].next().remove();

            if (field.validate.call(this, this.templateData[field.name].val()) === false) {
                valid = false;

                this.templateData[field.name].parent().addClass('has-error');
                this.slurpTemplate({ template: this.templates.fieldError(field), insertion: { $el: this.templateData[field.name].parent(), method: 'append' } });
            }
        }, this);

        return valid;
    },

    validatePassword: function validatePassword(val) {
        if (!val) return false;else return val.length >= 6;
    }
});

module.exports = Form;

},{"../MyView":94,"../templates/FieldError":152,"babel-runtime/core-js/json/stringify":216,"babel-runtime/helpers/extends":246}],200:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MyView = require('../MyView'),
    ListView = function ListView() {
    return MyView.apply(this, arguments);
};

(0, _extends3.default)(ListView.prototype, MyView.prototype, {

    addItem: function addItem(model) {
        var _this = this;

        this.itemViews[model.id] = new this.ItemView((0, _extends3.default)({ container: this.templateData.container, model: model, selection: this.selection }, this.getItemViewOptions())).on('removed', function () {
            return delete _this.itemViews[model.id];
        });

        this.emit('itemAdded', model);

        if (model.get('unselectable')) return;

        if (this.selection) this.itemViews[model.id].on('clicked', function (model) {
            return _this.onItemClick(model);
        });
        if (this.selected) this.onItemClick(model);
    },

    collection: {},

    createItems: function createItems() {
        var _this2 = this;

        this.items = new (this.Collection.extend(typeof this.collection === "function" ? this.collection() : this.collection))().on('reset', function () {
            return _this2.onItemsReset();
        }).on('add', function (item) {
            return _this2.addItem(item);
        }).on('remove', function (item) {
            return _this2.removeItem(item);
        }).on('update', function () {
            return _this2.noItemCheck();
        }).on('sort', function () {
            return _this2.reOrderDOM();
        });

        return this;
    },
    fetchItems: function fetchItems() {
        var _this3 = this;

        this.items.fetch((0, _extends3.default)({}, { reset: true }, this.fetch)).fail(function (err) {
            return console.log('Error fetching collection : ' + _this3.url + " -- " + err.stack || err);
        });

        return this;
    },


    getClosestClickedIndex: function getClosestClickedIndex(model) {
        var _this4 = this;

        var clickedIndex = this.items.indexOf(model),
            closest = undefined,
            maxDistance = 0,
            selectedIndexes = (0, _keys2.default)(this.selectedItems).map(function (id) {
            return _this4.items.indexOf(_this4.items.get(id));
        }).sort();

        selectedIndexes.forEach(function (index) {
            var distance = Math.abs(index - clickedIndex);
            if (distance > maxDistance) {
                maxDistance = distance;closest = index;
            }
        });

        return closest;
    },

    getItemViewOptions: function getItemViewOptions() {
        return {};
    },

    handleKeydown: function handleKeydown(e) {

        this.pressedKey = e.which === 16 ? 'shift' : e.which === 17 || e.which === 91 ? 'ctrl' : undefined;
    },

    handleKeyup: function handleKeyup(e) {

        this.pressedKey = e.which === 16 && this.pressedKey === 'shift' ? undefined : (e.which === 17 || e.which === 91) && this.pressedKey === 'ctrl' ? undefined : this.pressedKey;
    },

    noItemCheck: function noItemCheck() {
        var container = this.getItemViewOptions().container || this.templateData.container;
        if (this.items.length === 0) container.addClass('no-items');else container.removeClass('no-items');
    },

    onItemClick: function onItemClick(model) {
        var method = this.util.format('%sselectItem', this.itemViews[model.id].templateData.container.hasClass('selected') && this.selection !== 'multiComplex' ? 'un' : '');

        this[method](model);
    },

    onItemsReset: function onItemsReset() {
        var _this5 = this;

        var listContainer = this.getItemViewOptions().container || this.templateData.container;

        listContainer.empty();
        this.itemViews = [];
        if (this.items.length && this.setFields) {
            this.setFields(this.items.at(0).attributes);
        }
        this.items.forEach(function (item) {
            return _this5.addItem(item);
        });
        this.noItemCheck();
    },
    postRender: function postRender() {
        var _this6 = this;

        if (this.selection === 'multiComplex') {

            this.$(document).on('keydown', this.handleKeydown.bind(this)).on('keyup', this.handleKeyup.bind(this));

            window.addEventListener("blur", function (e) {
                return _this6.pressedKey = undefined;
            });
            window.addEventListener("focus", function (e) {
                return _this6.pressedKey = undefined;
            });
        }

        this.itemViews = [];
        this.selectedItems = {};

        this.createItems();

        if (this.itemModels) this.items.reset(typeof this.itemModels === "function" ? this.itemModels() : this.itemModels);

        if (this.fetch) this.fetchItems();
    },
    removeItem: function removeItem(item) {
        if (this.itemViews[item.id].templateData.container.hasClass('selected')) this.unselectItem(item);
        this.itemViews[item.id].delete();
        delete this.itemViews[item.id];
    },


    reOrderDOM: function reOrderDOM() {
        var _this7 = this;

        var container = this.getItemViewOptions().container || this.templateData.container;
        this.items.forEach(function (item) {
            return container[_this7.reverseSort ? 'prepend' : 'append'](_this7.itemViews[item.id].templateData.container);
        });
    },

    scrollToBottom: function scrollToBottom() {
        var _this8 = this;

        var height;

        var intervalId = setInterval(function () {
            var newHeight = _this8.templateData.container.outerHeight(true);
            if (height === newHeight) {
                clearInterval(intervalId);
                _this8.container.scrollTop(_this8.container.prop('scrollHeight'));
            } else {
                height = _this8.templateData.container.outerHeight(true);
            }
        }, 100);
    },

    selectItem: function selectItem(model) {
        var _this9 = this;

        var selectedIds = (0, _keys2.default)(this.selectedItems);

        if (this.pressedKey === undefined && this.selection === 'multiComplex' || this.selection === 'single') {
            selectedIds.forEach(function (id) {
                return _this9.unselectItem(_this9.selectedItems[id]);
            });
        }

        if (this.pressedKey === 'shift' && selectedIds.length) {
            var end = this.getClosestClickedIndex(model),
                start = this.items.indexOf(model);

            this._.range(start, end, start < end ? 1 : -1).forEach(function (index) {
                var itemToSelect = _this9.items.at(index);
                _this9.itemViews[itemToSelect.id].templateData.container.addClass('selected');
                _this9.selectedItems[itemToSelect.id] = itemToSelect;
                _this9.emit('itemSelected', itemToSelect);
            });
        } else {
            this.itemViews[model.id].templateData.container.addClass('selected');
            this.selectedItems[model.id] = model;
            this.emit('itemSelected', model);
        }
    },


    unselectItem: function unselectItem(model) {

        this.itemViews[model.id].templateData.container.removeClass('selected');

        delete this.selectedItems[model.id];

        this.emit('itemUnselected', model);
    }

});

module.exports = ListView;

},{"../MyView":94,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/extends":246}],201:[function(require,module,exports){
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MyView = require('../MyView'),
    ListItem = function ListItem() {
	return MyView.apply(this, arguments);
};

(0, _extends3.default)(ListItem.prototype, MyView.prototype, {
	getTemplateOptions: function getTemplateOptions() {
		return this.model.attributes;
	},
	postRender: function postRender() {
		var _this = this;

		if (this.selection) this.templateData.container.on('click', function () {
			return _this.emit('clicked', _this.model);
		});
	}
});

module.exports = ListItem;

},{"../MyView":94,"babel-runtime/helpers/extends":246}],202:[function(require,module,exports){
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _extends3.default)({}, require('./MyObject').prototype, {
    CreateDefault: function CreateDefault() {
        return this.reducer(this.attributes, function (attr) {
            return (0, _defineProperty3.default)({}, attr.name, typeof attr.default === 'function' ? attr.default() : attr.default);
        });
    },


    attributes: [],

    data: {},

    constructor: function constructor() {
        var _this = this;

        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        (0, _extends3.default)(this, { store: {}, data: data }, opts);

        if (this.storeBy) {
            this.storeBy.forEach(function (key) {
                return _this.store[key] = {};
            });
            this._store();
        }

        return this;
    },


    meta: {},

    sort: function sort(opts) {
        var attr = (0, _keys2.default)(opts)[0],
            value = opts[attr];

        this.data.sort(function (a, b) {
            return value ? a[attr] < b[attr] ? -1 : 1 : b[attr] < a[attr] ? -1 : 1;
        });

        return this;
    },
    _resetStore: function _resetStore(storeBy) {
        var _this2 = this;

        this.store = {};
        storeBy.forEach(function (attr) {
            return _this2.store[attr] = {};
        });
        this.storeBy = storeBy;
    },
    _store: function _store(data) {
        var _this3 = this;

        data = data || this.data;
        data.forEach(function (datum) {
            return _this3.storeBy.forEach(function (attr) {
                return _this3._storeAttr(datum, attr);
            });
        });
    },
    _storeAttr: function _storeAttr(datum, attr) {
        this.store[attr][datum[attr]] = this.store[attr][datum[attr]] ? Array.isArray(this.store[attr][datum[attr]]) ? this.store[attr][datum[attr]].concat(datum) : [this.store[attr][datum[attr]], datum] : datum;
    },
    _storeOne: function _storeOne(datum) {
        var _this4 = this;

        this.storeBy.forEach(function (attr) {
            return _this4._storeAttr(datum, attr);
        });
    }
});

},{"./MyObject":204,"babel-runtime/core-js/object/keys":233,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246}],203:[function(require,module,exports){
"use strict";

module.exports = function (err) {
  console.log(err.stack || err);
};

},{}],204:[function(require,module,exports){
'use strict';

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _extends4 = require('babel-runtime/helpers/extends');

var _extends5 = _interopRequireDefault(_extends4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MyObject = function MyObject(data) {
    return (0, _extends5.default)(this, data);
};

(0, _extends5.default)(MyObject.prototype, {

    Error: require('./MyError'),

    _: require('underscore'),

    format: require('util').format,

    moment: require('moment'),

    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    getIntRange: function getIntRange(int) {
        return (0, _from2.default)(Array(int).keys());
    },
    getRandomInclusiveInteger: function getRandomInclusiveInteger(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    omit: function omit(obj, keys) {
        return (0, _keys2.default)(obj).filter(function (key) {
            return !keys.includes(key);
        }).reduce(function (memo, key) {
            return (0, _extends5.default)(memo, (0, _defineProperty3.default)({}, key, obj[key]));
        }, {});
    },
    fdPick: function fdPick(obj, keys) {
        return keys.reduce(function (memo, key) {
            return (0, _extends5.default)(memo, (0, _defineProperty3.default)({}, key, obj[key]));
        }, {});
    },
    reducer: function reducer(arr, fn) {
        return arr.reduce(function (memo, item, i) {
            return (0, _extends5.default)(memo, fn(item, i));
        }, {});
    },
    shuffleArray: function shuffleArray(arr) {
        var _this = this;

        var rv = (0, _from2.default)(arr);

        rv.forEach(function (item, i) {
            if (i === rv.length - 1) return;
            var int = _this.getRandomInclusiveInteger(i, rv.length - 1),
                holder = rv[i];

            rv[i] = rv[int];
            rv[int] = holder;
        });

        return rv;
    },


    P: function P(fun) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var thisArg = arguments[2];
        return new _promise2.default(function (resolve, reject) {
            return (0, _apply2.default)(fun, thisArg || undefined, args.concat(function (e) {
                for (var _len = arguments.length, callback = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    callback[_key - 1] = arguments[_key];
                }

                return e ? reject(e) : resolve(callback);
            }));
        });
    },

    Q: require('q')

});

module.exports = MyObject;

},{"./MyError":203,"babel-runtime/core-js/array/from":212,"babel-runtime/core-js/object/keys":233,"babel-runtime/core-js/promise":236,"babel-runtime/core-js/reflect/apply":237,"babel-runtime/helpers/defineProperty":245,"babel-runtime/helpers/extends":246,"moment":"moment","q":433,"underscore":"underscore","util":439}],205:[function(require,module,exports){
'use strict';

module.exports = {
    attributes: [require('./Name'), require('./Email'), {
        name: 'secondaryEmail',
        label: 'Secondary Email',
        range: 'Email',
        error: 'A valid email address is required',
        validate: function validate(val) {
            return !val || /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(val);
        }
    }, {
        name: 'phonenumber',
        label: 'Phone Number',
        range: 'String',
        error: "Please enter a valid phone number.",
        validate: function validate(val) {
            return (/^\(?(\d{3})\)?[-. ]?(\d{3})[-. ]?(\d{4})$/.test(val)
            );
        }
    }, {
        name: 'address',
        label: 'Address 1',
        range: 'String',
        error: "Please enter a valid address.",
        validate: function validate(val) {
            return val !== '';
        }
    }, {
        name: 'extraaddress',
        label: 'Address 2',
        range: 'String',
        validate: function validate() {
            return true;
        }
    }]
};

},{"./Email":207,"./Name":209}],206:[function(require,module,exports){
'use strict';

module.exports = {
    attributes: [{
        name: 'ccNo',
        label: 'Card Number',
        range: 'String',
        error: 'A credit card number is required',
        prompt: 'Visa, MasterCard, American Express, JCB, Discover, and Diners Club are accepted.'
    }, {
        name: 'ccMonth',
        label: 'Exp Month',
        metadata: {
            options: [{ name: '1', label: '01' }, { name: '2', label: '02' }, { name: '3', label: '03' }, { name: '4', label: '04' }, { name: '5', label: '05' }, { name: '6', label: '06' }, { name: '7', label: '07' }, { name: '8', label: '08' }, { name: '9', label: '09' }, { name: '10', label: '10' }, { name: '11', label: '11' }, { name: '12', label: '12' }]
        },
        range: 'String',
        error: 'A credit card month expiration is required'
    }, {
        name: 'ccYear',
        label: 'Exp Year',
        metadata: {
            options: [{ name: '2018', label: '2018' }, { name: '2019', label: '2019' }, { name: '2020', label: '2020' }, { name: '2021', label: '2021' }, { name: '2022', label: '2022' }, { name: '2023', label: '2023' }, { name: '2024', label: '2024' }, { name: '2025', label: '2025' }, { name: '2026', label: '2026' }]
        },
        range: 'String',
        error: 'A credit card year expiration is required'
    }, {
        name: 'cvc',
        label: 'CVC',
        range: 'String',
        error: 'A credit card cvc is required'
    }]
};

},{}],207:[function(require,module,exports){
'use strict';

module.exports = {
    name: 'email',
    label: 'Email',
    range: 'Email',
    error: 'A valid email address is required',
    validate: function validate(val) {
        return (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(val)
        );
    }
};

},{}],208:[function(require,module,exports){
'use strict';

module.exports = {
    attributes: [require('./Email'), require('./Password')]
};

},{"./Email":207,"./Password":210}],209:[function(require,module,exports){
'use strict';

module.exports = {
    name: 'name',
    label: 'Name',
    range: 'String',
    error: "Name is a required field.",
    validate: function validate(val) {
        return val !== '';
    }
};

},{}],210:[function(require,module,exports){
'use strict';

module.exports = {
    name: 'password',
    label: 'Password',
    range: 'Password',
    error: "Password must be at least six characters.",
    validate: function validate(val) {
        return val.length > 5;
    }
};

},{}],211:[function(require,module,exports){
'use strict';

module.exports = {
    name: 'repeatPassword',
    label: 'Repeat Password',
    range: 'Password',
    error: 'Passwords must match',
    validate: function validate(val) {
        return true;
    }
};

},{}],212:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };
},{"core-js/library/fn/array/from":264}],213:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/array/of"), __esModule: true };
},{"core-js/library/fn/array/of":265}],214:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
},{"core-js/library/fn/get-iterator":266}],215:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };
},{"core-js/library/fn/is-iterable":267}],216:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };
},{"core-js/library/fn/json/stringify":268}],217:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/acosh"), __esModule: true };
},{"core-js/library/fn/math/acosh":269}],218:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/expm1"), __esModule: true };
},{"core-js/library/fn/math/expm1":270}],219:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/imul"), __esModule: true };
},{"core-js/library/fn/math/imul":271}],220:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/log1p"), __esModule: true };
},{"core-js/library/fn/math/log1p":272}],221:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/sign"), __esModule: true };
},{"core-js/library/fn/math/sign":273}],222:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/sinh"), __esModule: true };
},{"core-js/library/fn/math/sinh":274}],223:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/number/is-integer"), __esModule: true };
},{"core-js/library/fn/number/is-integer":275}],224:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/number/is-nan"), __esModule: true };
},{"core-js/library/fn/number/is-nan":276}],225:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":277}],226:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":278}],227:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":279}],228:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/entries"), __esModule: true };
},{"core-js/library/fn/object/entries":280}],229:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/freeze"), __esModule: true };
},{"core-js/library/fn/object/freeze":281}],230:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-names"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-names":282}],231:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/is-extensible"), __esModule: true };
},{"core-js/library/fn/object/is-extensible":283}],232:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/is"), __esModule: true };
},{"core-js/library/fn/object/is":284}],233:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":285}],234:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/prevent-extensions"), __esModule: true };
},{"core-js/library/fn/object/prevent-extensions":286}],235:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":287}],236:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":288}],237:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/reflect/apply"), __esModule: true };
},{"core-js/library/fn/reflect/apply":289}],238:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/reflect/construct"), __esModule: true };
},{"core-js/library/fn/reflect/construct":290}],239:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/reflect/define-property"), __esModule: true };
},{"core-js/library/fn/reflect/define-property":291}],240:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/set"), __esModule: true };
},{"core-js/library/fn/set":292}],241:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/string/from-code-point"), __esModule: true };
},{"core-js/library/fn/string/from-code-point":293}],242:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":294}],243:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":295}],244:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _promise = require("../core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};
},{"../core-js/promise":236}],245:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};
},{"../core-js/object/define-property":227}],246:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _assign = require("../core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};
},{"../core-js/object/assign":225}],247:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _isIterable2 = require("../core-js/is-iterable");

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = require("../core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
},{"../core-js/get-iterator":214,"../core-js/is-iterable":215}],248:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _from = require("../core-js/array/from");

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};
},{"../core-js/array/from":212}],249:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":242,"../core-js/symbol/iterator":243}],250:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":434}],251:[function(require,module,exports){
// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
require('../../js/transition.js')
require('../../js/alert.js')
require('../../js/button.js')
require('../../js/carousel.js')
require('../../js/collapse.js')
require('../../js/dropdown.js')
require('../../js/modal.js')
require('../../js/tooltip.js')
require('../../js/popover.js')
require('../../js/scrollspy.js')
require('../../js/tab.js')
require('../../js/affix.js')
},{"../../js/affix.js":252,"../../js/alert.js":253,"../../js/button.js":254,"../../js/carousel.js":255,"../../js/collapse.js":256,"../../js/dropdown.js":257,"../../js/modal.js":258,"../../js/popover.js":259,"../../js/scrollspy.js":260,"../../js/tab.js":261,"../../js/tooltip.js":262,"../../js/transition.js":263}],252:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: affix.js v3.3.5
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.5'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

},{}],253:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: alert.js v3.3.5
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.5'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

},{}],254:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: button.js v3.3.5
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.5'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

},{}],255:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: carousel.js v3.3.5
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.5'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

},{}],256:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: collapse.js v3.3.5
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.5'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

},{}],257:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.5
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.5'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

},{}],258:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: modal.js v3.3.5
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.5'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

},{}],259:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: popover.js v3.3.5
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.5'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

},{}],260:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.5
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.5'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

},{}],261:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tab.js v3.3.5
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.5'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

},{}],262:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.5
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.5'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

},{}],263:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: transition.js v3.3.5
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

},{}],264:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/es6.array.from');
module.exports = require('../../modules/_core').Array.from;

},{"../../modules/_core":311,"../../modules/es6.array.from":390,"../../modules/es6.string.iterator":418}],265:[function(require,module,exports){
require('../../modules/es6.array.of');
module.exports = require('../../modules/_core').Array.of;

},{"../../modules/_core":311,"../../modules/es6.array.of":392}],266:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.get-iterator');

},{"../modules/core.get-iterator":388,"../modules/es6.string.iterator":418,"../modules/web.dom.iterable":428}],267:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.is-iterable');

},{"../modules/core.is-iterable":389,"../modules/es6.string.iterator":418,"../modules/web.dom.iterable":428}],268:[function(require,module,exports){
var core = require('../../modules/_core');
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};

},{"../../modules/_core":311}],269:[function(require,module,exports){
require('../../modules/es6.math.acosh');
module.exports = require('../../modules/_core').Math.acosh;

},{"../../modules/_core":311,"../../modules/es6.math.acosh":393}],270:[function(require,module,exports){
require('../../modules/es6.math.expm1');
module.exports = require('../../modules/_core').Math.expm1;

},{"../../modules/_core":311,"../../modules/es6.math.expm1":394}],271:[function(require,module,exports){
require('../../modules/es6.math.imul');
module.exports = require('../../modules/_core').Math.imul;

},{"../../modules/_core":311,"../../modules/es6.math.imul":395}],272:[function(require,module,exports){
require('../../modules/es6.math.log1p');
module.exports = require('../../modules/_core').Math.log1p;

},{"../../modules/_core":311,"../../modules/es6.math.log1p":396}],273:[function(require,module,exports){
require('../../modules/es6.math.sign');
module.exports = require('../../modules/_core').Math.sign;

},{"../../modules/_core":311,"../../modules/es6.math.sign":397}],274:[function(require,module,exports){
require('../../modules/es6.math.sinh');
module.exports = require('../../modules/_core').Math.sinh;

},{"../../modules/_core":311,"../../modules/es6.math.sinh":398}],275:[function(require,module,exports){
require('../../modules/es6.number.is-integer');
module.exports = require('../../modules/_core').Number.isInteger;

},{"../../modules/_core":311,"../../modules/es6.number.is-integer":399}],276:[function(require,module,exports){
require('../../modules/es6.number.is-nan');
module.exports = require('../../modules/_core').Number.isNaN;

},{"../../modules/_core":311,"../../modules/es6.number.is-nan":400}],277:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;

},{"../../modules/_core":311,"../../modules/es6.object.assign":401}],278:[function(require,module,exports){
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};

},{"../../modules/_core":311,"../../modules/es6.object.create":402}],279:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};

},{"../../modules/_core":311,"../../modules/es6.object.define-property":403}],280:[function(require,module,exports){
require('../../modules/es7.object.entries');
module.exports = require('../../modules/_core').Object.entries;

},{"../../modules/_core":311,"../../modules/es7.object.entries":420}],281:[function(require,module,exports){
require('../../modules/es6.object.freeze');
module.exports = require('../../modules/_core').Object.freeze;

},{"../../modules/_core":311,"../../modules/es6.object.freeze":404}],282:[function(require,module,exports){
require('../../modules/es6.object.get-own-property-names');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyNames(it) {
  return $Object.getOwnPropertyNames(it);
};

},{"../../modules/_core":311,"../../modules/es6.object.get-own-property-names":405}],283:[function(require,module,exports){
require('../../modules/es6.object.is-extensible');
module.exports = require('../../modules/_core').Object.isExtensible;

},{"../../modules/_core":311,"../../modules/es6.object.is-extensible":406}],284:[function(require,module,exports){
require('../../modules/es6.object.is');
module.exports = require('../../modules/_core').Object.is;

},{"../../modules/_core":311,"../../modules/es6.object.is":407}],285:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;

},{"../../modules/_core":311,"../../modules/es6.object.keys":408}],286:[function(require,module,exports){
require('../../modules/es6.object.prevent-extensions');
module.exports = require('../../modules/_core').Object.preventExtensions;

},{"../../modules/_core":311,"../../modules/es6.object.prevent-extensions":409}],287:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;

},{"../../modules/_core":311,"../../modules/es6.object.set-prototype-of":410}],288:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
require('../modules/es7.promise.finally');
require('../modules/es7.promise.try');
module.exports = require('../modules/_core').Promise;

},{"../modules/_core":311,"../modules/es6.object.to-string":411,"../modules/es6.promise":412,"../modules/es6.string.iterator":418,"../modules/es7.promise.finally":421,"../modules/es7.promise.try":422,"../modules/web.dom.iterable":428}],289:[function(require,module,exports){
require('../../modules/es6.reflect.apply');
module.exports = require('../../modules/_core').Reflect.apply;

},{"../../modules/_core":311,"../../modules/es6.reflect.apply":413}],290:[function(require,module,exports){
require('../../modules/es6.reflect.construct');
module.exports = require('../../modules/_core').Reflect.construct;

},{"../../modules/_core":311,"../../modules/es6.reflect.construct":414}],291:[function(require,module,exports){
require('../../modules/es6.reflect.define-property');
module.exports = require('../../modules/_core').Reflect.defineProperty;

},{"../../modules/_core":311,"../../modules/es6.reflect.define-property":415}],292:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.set');
require('../modules/es7.set.to-json');
require('../modules/es7.set.of');
require('../modules/es7.set.from');
module.exports = require('../modules/_core').Set;

},{"../modules/_core":311,"../modules/es6.object.to-string":411,"../modules/es6.set":416,"../modules/es6.string.iterator":418,"../modules/es7.set.from":423,"../modules/es7.set.of":424,"../modules/es7.set.to-json":425,"../modules/web.dom.iterable":428}],293:[function(require,module,exports){
require('../../modules/es6.string.from-code-point');
module.exports = require('../../modules/_core').String.fromCodePoint;

},{"../../modules/_core":311,"../../modules/es6.string.from-code-point":417}],294:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;

},{"../../modules/_core":311,"../../modules/es6.object.to-string":411,"../../modules/es6.symbol":419,"../../modules/es7.symbol.async-iterator":426,"../../modules/es7.symbol.observable":427}],295:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');

},{"../../modules/_wks-ext":385,"../../modules/es6.string.iterator":418,"../../modules/web.dom.iterable":428}],296:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],297:[function(require,module,exports){
module.exports = function () { /* empty */ };

},{}],298:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],299:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":332}],300:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":321}],301:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":376,"./_to-iobject":378,"./_to-length":379}],302:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":304,"./_ctx":313,"./_iobject":328,"./_to-length":379,"./_to-object":380}],303:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":330,"./_is-object":332,"./_wks":386}],304:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":303}],305:[function(require,module,exports){
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":296,"./_invoke":327,"./_is-object":332}],306:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":307,"./_wks":386}],307:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],308:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":298,"./_ctx":313,"./_descriptors":315,"./_for-of":321,"./_iter-define":335,"./_iter-step":337,"./_meta":343,"./_object-create":347,"./_object-dp":348,"./_redefine-all":363,"./_set-species":369,"./_validate-collection":383}],309:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof');
var from = require('./_array-from-iterable');
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

},{"./_array-from-iterable":300,"./_classof":306}],310:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var meta = require('./_meta');
var fails = require('./_fails');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var setToStringTag = require('./_set-to-string-tag');
var dP = require('./_object-dp').f;
var each = require('./_array-methods')(0);
var DESCRIPTORS = require('./_descriptors');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function (target, iterable) {
      anInstance(target, C, NAME, '_c');
      target._c = new Base();
      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
        anInstance(this, C, KEY);
        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    IS_WEAK || dP(C.prototype, 'size', {
      get: function () {
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":298,"./_array-methods":302,"./_descriptors":315,"./_export":319,"./_fails":320,"./_for-of":321,"./_global":322,"./_hide":324,"./_is-object":332,"./_meta":343,"./_object-dp":348,"./_redefine-all":363,"./_set-to-string-tag":370}],311:[function(require,module,exports){
var core = module.exports = { version: '2.5.4' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],312:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":348,"./_property-desc":362}],313:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":296}],314:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],315:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":320}],316:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":322,"./_is-object":332}],317:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],318:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":353,"./_object-keys":356,"./_object-pie":357}],319:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var has = require('./_has');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":311,"./_ctx":313,"./_global":322,"./_has":323,"./_hide":324}],320:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],321:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":299,"./_ctx":313,"./_is-array-iter":329,"./_iter-call":333,"./_to-length":379,"./core.get-iterator-method":387}],322:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],323:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],324:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":315,"./_object-dp":348,"./_property-desc":362}],325:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":322}],326:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":315,"./_dom-create":316,"./_fails":320}],327:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],328:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":307}],329:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":338,"./_wks":386}],330:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":307}],331:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":332}],332:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],333:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":299}],334:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":324,"./_object-create":347,"./_property-desc":362,"./_set-to-string-tag":370,"./_wks":386}],335:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":319,"./_hide":324,"./_iter-create":334,"./_iterators":338,"./_library":339,"./_object-gpo":354,"./_redefine":364,"./_set-to-string-tag":370,"./_wks":386}],336:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":386}],337:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],338:[function(require,module,exports){
module.exports = {};

},{}],339:[function(require,module,exports){
module.exports = true;

},{}],340:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],341:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],342:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],343:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":320,"./_has":323,"./_is-object":332,"./_object-dp":348,"./_uid":382}],344:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":307,"./_global":322,"./_task":375}],345:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":296}],346:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_fails":320,"./_iobject":328,"./_object-gops":353,"./_object-keys":356,"./_object-pie":357,"./_to-object":380}],347:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":299,"./_dom-create":316,"./_enum-bug-keys":317,"./_html":325,"./_object-dps":349,"./_shared-key":371}],348:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":299,"./_descriptors":315,"./_ie8-dom-define":326,"./_to-primitive":381}],349:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":299,"./_descriptors":315,"./_object-dp":348,"./_object-keys":356}],350:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":315,"./_has":323,"./_ie8-dom-define":326,"./_object-pie":357,"./_property-desc":362,"./_to-iobject":378,"./_to-primitive":381}],351:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":352,"./_to-iobject":378}],352:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":317,"./_object-keys-internal":355}],353:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],354:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":323,"./_shared-key":371,"./_to-object":380}],355:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":301,"./_has":323,"./_shared-key":371,"./_to-iobject":378}],356:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":317,"./_object-keys-internal":355}],357:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],358:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":311,"./_export":319,"./_fails":320}],359:[function(require,module,exports){
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

},{"./_object-keys":356,"./_object-pie":357,"./_to-iobject":378}],360:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],361:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":299,"./_is-object":332,"./_new-promise-capability":345}],362:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],363:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

},{"./_hide":324}],364:[function(require,module,exports){
module.exports = require('./_hide');

},{"./_hide":324}],365:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],366:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');
var aFunction = require('./_a-function');
var ctx = require('./_ctx');
var forOf = require('./_for-of');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};

},{"./_a-function":296,"./_ctx":313,"./_export":319,"./_for-of":321}],367:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};

},{"./_export":319}],368:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":299,"./_ctx":313,"./_is-object":332,"./_object-gopd":350}],369:[function(require,module,exports){
'use strict';
var global = require('./_global');
var core = require('./_core');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_core":311,"./_descriptors":315,"./_global":322,"./_object-dp":348,"./_wks":386}],370:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":323,"./_object-dp":348,"./_wks":386}],371:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":372,"./_uid":382}],372:[function(require,module,exports){
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};

},{"./_global":322}],373:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":296,"./_an-object":299,"./_wks":386}],374:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":314,"./_to-integer":377}],375:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":307,"./_ctx":313,"./_dom-create":316,"./_global":322,"./_html":325,"./_invoke":327}],376:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":377}],377:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],378:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":314,"./_iobject":328}],379:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":377}],380:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":314}],381:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":332}],382:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],383:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":332}],384:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":311,"./_global":322,"./_library":339,"./_object-dp":348,"./_wks-ext":385}],385:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":386}],386:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":322,"./_shared":372,"./_uid":382}],387:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":306,"./_core":311,"./_iterators":338,"./_wks":386}],388:[function(require,module,exports){
var anObject = require('./_an-object');
var get = require('./core.get-iterator-method');
module.exports = require('./_core').getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

},{"./_an-object":299,"./_core":311,"./core.get-iterator-method":387}],389:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};

},{"./_classof":306,"./_core":311,"./_iterators":338,"./_wks":386}],390:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":312,"./_ctx":313,"./_export":319,"./_is-array-iter":329,"./_iter-call":333,"./_iter-detect":336,"./_to-length":379,"./_to-object":380,"./core.get-iterator-method":387}],391:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":297,"./_iter-define":335,"./_iter-step":337,"./_iterators":338,"./_to-iobject":378}],392:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":312,"./_export":319,"./_fails":320}],393:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":319,"./_math-log1p":341}],394:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":319,"./_math-expm1":340}],395:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":319,"./_fails":320}],396:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":319,"./_math-log1p":341}],397:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":319,"./_math-sign":342}],398:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":319,"./_fails":320,"./_math-expm1":340}],399:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":319,"./_is-integer":331}],400:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":319}],401:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":319,"./_object-assign":346}],402:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":319,"./_object-create":347}],403:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":315,"./_export":319,"./_object-dp":348}],404:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":332,"./_meta":343,"./_object-sap":358}],405:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":351,"./_object-sap":358}],406:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":332,"./_object-sap":358}],407:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":319,"./_same-value":365}],408:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":356,"./_object-sap":358,"./_to-object":380}],409:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":332,"./_meta":343,"./_object-sap":358}],410:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":319,"./_set-proto":368}],411:[function(require,module,exports){

},{}],412:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":296,"./_an-instance":298,"./_classof":306,"./_core":311,"./_ctx":313,"./_export":319,"./_for-of":321,"./_global":322,"./_is-object":332,"./_iter-detect":336,"./_library":339,"./_microtask":344,"./_new-promise-capability":345,"./_perform":360,"./_promise-resolve":361,"./_redefine-all":363,"./_set-species":369,"./_set-to-string-tag":370,"./_species-constructor":373,"./_task":375,"./_wks":386}],413:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":296,"./_an-object":299,"./_export":319,"./_fails":320,"./_global":322}],414:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":296,"./_an-object":299,"./_bind":305,"./_export":319,"./_fails":320,"./_global":322,"./_is-object":332,"./_object-create":347}],415:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":299,"./_export":319,"./_fails":320,"./_object-dp":348,"./_to-primitive":381}],416:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":310,"./_collection-strong":308,"./_validate-collection":383}],417:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":319,"./_to-absolute-index":376}],418:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":335,"./_string-at":374}],419:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":299,"./_descriptors":315,"./_enum-keys":318,"./_export":319,"./_fails":320,"./_global":322,"./_has":323,"./_hide":324,"./_is-array":330,"./_is-object":332,"./_library":339,"./_meta":343,"./_object-create":347,"./_object-dp":348,"./_object-gopd":350,"./_object-gopn":352,"./_object-gopn-ext":351,"./_object-gops":353,"./_object-keys":356,"./_object-pie":357,"./_property-desc":362,"./_redefine":364,"./_set-to-string-tag":370,"./_shared":372,"./_to-iobject":378,"./_to-primitive":381,"./_uid":382,"./_wks":386,"./_wks-define":384,"./_wks-ext":385}],420:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":319,"./_object-to-array":359}],421:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":311,"./_export":319,"./_global":322,"./_promise-resolve":361,"./_species-constructor":373}],422:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });

},{"./_export":319,"./_new-promise-capability":345,"./_perform":360}],423:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
require('./_set-collection-from')('Set');

},{"./_set-collection-from":366}],424:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
require('./_set-collection-of')('Set');

},{"./_set-collection-of":367}],425:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });

},{"./_collection-to-json":309,"./_export":319}],426:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":384}],427:[function(require,module,exports){
require('./_wks-define')('observable');

},{"./_wks-define":384}],428:[function(require,module,exports){
require('./es6.array.iterator');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var TO_STRING_TAG = require('./_wks')('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

},{"./_global":322,"./_hide":324,"./_iterators":338,"./_wks":386,"./es6.array.iterator":391}],429:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],430:[function(require,module,exports){
/* flatpickr v4.4.3, @license MIT */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.flatpickr = factory());
}(this, (function () { 'use strict';

    var pad = function pad(number) {
      return ("0" + number).slice(-2);
    };
    var int = function int(bool) {
      return bool === true ? 1 : 0;
    };
    function debounce(func, wait, immediate) {
      if (immediate === void 0) {
        immediate = false;
      }

      var timeout;
      return function () {
        var context = this,
            args = arguments;
        timeout !== null && clearTimeout(timeout);
        timeout = window.setTimeout(function () {
          timeout = null;
          if (!immediate) func.apply(context, args);
        }, wait);
        if (immediate && !timeout) func.apply(context, args);
      };
    }
    var arrayify = function arrayify(obj) {
      return obj instanceof Array ? obj : [obj];
    };

    var do_nothing = function do_nothing() {
      return undefined;
    };

    var monthToStr = function monthToStr(monthNumber, shorthand, locale) {
      return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
    };
    var revFormat = {
      D: do_nothing,
      F: function F(dateObj, monthName, locale) {
        dateObj.setMonth(locale.months.longhand.indexOf(monthName));
      },
      G: function G(dateObj, hour) {
        dateObj.setHours(parseFloat(hour));
      },
      H: function H(dateObj, hour) {
        dateObj.setHours(parseFloat(hour));
      },
      J: function J(dateObj, day) {
        dateObj.setDate(parseFloat(day));
      },
      K: function K(dateObj, amPM, locale) {
        dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
      },
      M: function M(dateObj, shortMonth, locale) {
        dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
      },
      S: function S(dateObj, seconds) {
        dateObj.setSeconds(parseFloat(seconds));
      },
      U: function U(_, unixSeconds) {
        return new Date(parseFloat(unixSeconds) * 1000);
      },
      W: function W(dateObj, weekNum) {
        var weekNumber = parseInt(weekNum);
        return new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
      },
      Y: function Y(dateObj, year) {
        dateObj.setFullYear(parseFloat(year));
      },
      Z: function Z(_, ISODate) {
        return new Date(ISODate);
      },
      d: function d(dateObj, day) {
        dateObj.setDate(parseFloat(day));
      },
      h: function h(dateObj, hour) {
        dateObj.setHours(parseFloat(hour));
      },
      i: function i(dateObj, minutes) {
        dateObj.setMinutes(parseFloat(minutes));
      },
      j: function j(dateObj, day) {
        dateObj.setDate(parseFloat(day));
      },
      l: do_nothing,
      m: function m(dateObj, month) {
        dateObj.setMonth(parseFloat(month) - 1);
      },
      n: function n(dateObj, month) {
        dateObj.setMonth(parseFloat(month) - 1);
      },
      s: function s(dateObj, seconds) {
        dateObj.setSeconds(parseFloat(seconds));
      },
      w: do_nothing,
      y: function y(dateObj, year) {
        dateObj.setFullYear(2000 + parseFloat(year));
      }
    };
    var tokenRegex = {
      D: "(\\w+)",
      F: "(\\w+)",
      G: "(\\d\\d|\\d)",
      H: "(\\d\\d|\\d)",
      J: "(\\d\\d|\\d)\\w+",
      K: "",
      M: "(\\w+)",
      S: "(\\d\\d|\\d)",
      U: "(.+)",
      W: "(\\d\\d|\\d)",
      Y: "(\\d{4})",
      Z: "(.+)",
      d: "(\\d\\d|\\d)",
      h: "(\\d\\d|\\d)",
      i: "(\\d\\d|\\d)",
      j: "(\\d\\d|\\d)",
      l: "(\\w+)",
      m: "(\\d\\d|\\d)",
      n: "(\\d\\d|\\d)",
      s: "(\\d\\d|\\d)",
      w: "(\\d\\d|\\d)",
      y: "(\\d{2})"
    };
    var formats = {
      Z: function Z(date) {
        return date.toISOString();
      },
      D: function D(date, locale, options) {
        return locale.weekdays.shorthand[formats.w(date, locale, options)];
      },
      F: function F(date, locale, options) {
        return monthToStr(formats.n(date, locale, options) - 1, false, locale);
      },
      G: function G(date, locale, options) {
        return pad(formats.h(date, locale, options));
      },
      H: function H(date) {
        return pad(date.getHours());
      },
      J: function J(date, locale) {
        return locale.ordinal !== undefined ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
      },
      K: function K(date, locale) {
        return locale.amPM[int(date.getHours() > 11)];
      },
      M: function M(date, locale) {
        return monthToStr(date.getMonth(), true, locale);
      },
      S: function S(date) {
        return pad(date.getSeconds());
      },
      U: function U(date) {
        return date.getTime() / 1000;
      },
      W: function W(date, _, options) {
        return options.getWeek(date);
      },
      Y: function Y(date) {
        return date.getFullYear();
      },
      d: function d(date) {
        return pad(date.getDate());
      },
      h: function h(date) {
        return date.getHours() % 12 ? date.getHours() % 12 : 12;
      },
      i: function i(date) {
        return pad(date.getMinutes());
      },
      j: function j(date) {
        return date.getDate();
      },
      l: function l(date, locale) {
        return locale.weekdays.longhand[date.getDay()];
      },
      m: function m(date) {
        return pad(date.getMonth() + 1);
      },
      n: function n(date) {
        return date.getMonth() + 1;
      },
      s: function s(date) {
        return date.getSeconds();
      },
      w: function w(date) {
        return date.getDay();
      },
      y: function y(date) {
        return String(date.getFullYear()).substring(2);
      }
    };

    var english = {
      weekdays: {
        shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        longhand: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
      },
      months: {
        shorthand: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        longhand: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
      },
      daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
      firstDayOfWeek: 0,
      ordinal: function ordinal(nth) {
        var s = nth % 100;
        if (s > 3 && s < 21) return "th";

        switch (s % 10) {
          case 1:
            return "st";

          case 2:
            return "nd";

          case 3:
            return "rd";

          default:
            return "th";
        }
      },
      rangeSeparator: " to ",
      weekAbbreviation: "Wk",
      scrollTitle: "Scroll to increment",
      toggleTitle: "Click to toggle",
      amPM: ["AM", "PM"],
      yearAriaLabel: "Year"
    };

    var createDateFormatter = function createDateFormatter(_ref) {
      var _ref$config = _ref.config,
          config = _ref$config === void 0 ? defaults : _ref$config,
          _ref$l10n = _ref.l10n,
          l10n = _ref$l10n === void 0 ? english : _ref$l10n;
      return function (dateObj, frmt, overrideLocale) {
        if (config.formatDate !== undefined) return config.formatDate(dateObj, frmt);
        var locale = overrideLocale || l10n;
        return frmt.split("").map(function (c, i, arr) {
          return formats[c] && arr[i - 1] !== "\\" ? formats[c](dateObj, locale, config) : c !== "\\" ? c : "";
        }).join("");
      };
    };
    var createDateParser = function createDateParser(_ref2) {
      var _ref2$config = _ref2.config,
          config = _ref2$config === void 0 ? defaults : _ref2$config,
          _ref2$l10n = _ref2.l10n,
          l10n = _ref2$l10n === void 0 ? english : _ref2$l10n;
      return function (date, givenFormat, timeless) {
        if (date !== 0 && !date) return undefined;
        var parsedDate;
        var date_orig = date;
        if (date instanceof Date) parsedDate = new Date(date.getTime());else if (typeof date !== "string" && date.toFixed !== undefined) parsedDate = new Date(date);else if (typeof date === "string") {
          var format = givenFormat || (config || defaults).dateFormat;
          var datestr = String(date).trim();

          if (datestr === "today") {
            parsedDate = new Date();
            timeless = true;
          } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) parsedDate = new Date(date);else if (config && config.parseDate) parsedDate = config.parseDate(date, format);else {
            parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));
            var matched,
                ops = [];

            for (var i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++) {
              var token = format[i];
              var isBackSlash = token === "\\";
              var escaped = format[i - 1] === "\\" || isBackSlash;

              if (tokenRegex[token] && !escaped) {
                regexStr += tokenRegex[token];
                var match = new RegExp(regexStr).exec(date);

                if (match && (matched = true)) {
                  ops[token !== "Y" ? "push" : "unshift"]({
                    fn: revFormat[token],
                    val: match[++matchIndex]
                  });
                }
              } else if (!isBackSlash) regexStr += ".";

              ops.forEach(function (_ref3) {
                var fn = _ref3.fn,
                    val = _ref3.val;
                return parsedDate = fn(parsedDate, val, l10n) || parsedDate;
              });
            }

            parsedDate = matched ? parsedDate : undefined;
          }
        }

        if (!(parsedDate instanceof Date)) {
          config.errorHandler(new Error("Invalid date provided: " + date_orig));
          return undefined;
        }

        if (timeless === true) parsedDate.setHours(0, 0, 0, 0);
        return parsedDate;
      };
    };
    function compareDates(date1, date2, timeless) {
      if (timeless === void 0) {
        timeless = true;
      }

      if (timeless !== false) {
        return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
      }

      return date1.getTime() - date2.getTime();
    }
    var getWeek = function getWeek(givenDate) {
      var date = new Date(givenDate.getTime());
      date.setHours(0, 0, 0, 0);
      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
      var week1 = new Date(date.getFullYear(), 0, 4);
      return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
    };
    var isBetween = function isBetween(ts, ts1, ts2) {
      return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
    };
    var duration = {
      DAY: 86400000
    };

    var defaults = {
      _disable: [],
      _enable: [],
      allowInput: false,
      altFormat: "F j, Y",
      altInput: false,
      altInputClass: "form-control input",
      animate: typeof window === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
      ariaDateFormat: "F j, Y",
      clickOpens: true,
      closeOnSelect: true,
      conjunction: ", ",
      dateFormat: "Y-m-d",
      defaultHour: 12,
      defaultMinute: 0,
      defaultSeconds: 0,
      disable: [],
      disableMobile: false,
      enable: [],
      enableSeconds: false,
      enableTime: false,
      errorHandler: console.warn,
      getWeek: getWeek,
      hourIncrement: 1,
      ignoredFocusElements: [],
      inline: false,
      locale: "default",
      minuteIncrement: 5,
      mode: "single",
      nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
      noCalendar: false,
      now: new Date(),
      onChange: [],
      onClose: [],
      onDayCreate: [],
      onDestroy: [],
      onKeyDown: [],
      onMonthChange: [],
      onOpen: [],
      onParseConfig: [],
      onReady: [],
      onValueUpdate: [],
      onYearChange: [],
      onPreCalendarPosition: [],
      plugins: [],
      position: "auto",
      positionElement: undefined,
      prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
      shorthandCurrentMonth: false,
      showMonths: 1,
      static: false,
      time_24hr: false,
      weekNumbers: false,
      wrap: false
    };

    function toggleClass(elem, className, bool) {
      if (bool === true) return elem.classList.add(className);
      elem.classList.remove(className);
    }
    function createElement(tag, className, content) {
      var e = window.document.createElement(tag);
      className = className || "";
      content = content || "";
      e.className = className;
      if (content !== undefined) e.textContent = content;
      return e;
    }
    function clearNode(node) {
      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }
    }
    function findParent(node, condition) {
      if (condition(node)) return node;else if (node.parentNode) return findParent(node.parentNode, condition);
      return undefined;
    }
    function createNumberInput(inputClassName, opts) {
      var wrapper = createElement("div", "numInputWrapper"),
          numInput = createElement("input", "numInput " + inputClassName),
          arrowUp = createElement("span", "arrowUp"),
          arrowDown = createElement("span", "arrowDown");
      numInput.type = "text";
      numInput.pattern = "\\d*";
      if (opts !== undefined) for (var key in opts) {
        numInput.setAttribute(key, opts[key]);
      }
      wrapper.appendChild(numInput);
      wrapper.appendChild(arrowUp);
      wrapper.appendChild(arrowDown);
      return wrapper;
    }

    if (typeof Object.assign !== "function") {
      Object.assign = function (target) {
        if (!target) {
          throw TypeError("Cannot convert undefined or null to object");
        }

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var _loop = function _loop(source) {
          if (source) {
            Object.keys(source).forEach(function (key) {
              return target[key] = source[key];
            });
          }
        };

        for (var _i = 0; _i < args.length; _i++) {
          var source = args[_i];

          _loop(source);
        }

        return target;
      };
    }

    var DEBOUNCED_CHANGE_MS = 300;

    function FlatpickrInstance(element, instanceConfig) {
      var self = {
        config: Object.assign({}, flatpickr.defaultConfig),
        l10n: english
      };
      self.parseDate = createDateParser({
        config: self.config,
        l10n: self.l10n
      });
      self._handlers = [];
      self._bind = bind;
      self._setHoursFromDate = setHoursFromDate;
      self.changeMonth = changeMonth;
      self.changeYear = changeYear;
      self.clear = clear;
      self.close = close;
      self._createElement = createElement;
      self.destroy = destroy;
      self.isEnabled = isEnabled;
      self.jumpToDate = jumpToDate;
      self.open = open;
      self.redraw = redraw;
      self.set = set;
      self.setDate = setDate;
      self.toggle = toggle;

      function setupHelperFunctions() {
        self.utils = {
          getDaysInMonth: function getDaysInMonth(month, yr) {
            if (month === void 0) {
              month = self.currentMonth;
            }

            if (yr === void 0) {
              yr = self.currentYear;
            }

            if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0)) return 29;
            return self.l10n.daysInMonth[month];
          }
        };
      }

      function init() {
        self.element = self.input = element;
        self.isOpen = false;
        parseConfig();
        setupLocale();
        setupInputs();
        setupDates();
        setupHelperFunctions();
        if (!self.isMobile) build();
        bindEvents();

        if (self.selectedDates.length || self.config.noCalendar) {
          if (self.config.enableTime) {
            setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj || self.config.minDate : undefined);
          }

          updateValue(false);
        }

        self.showTimeInput = self.selectedDates.length > 0 || self.config.noCalendar;

        if (self.daysContainer !== undefined) {
          self.calendarContainer.style.visibility = "hidden";
          self.calendarContainer.style.display = "block";
          var daysWidth = (self.daysContainer.offsetWidth + 1) * self.config.showMonths;
          self.daysContainer.style.width = daysWidth + "px";
          self.calendarContainer.style.width = daysWidth + "px";

          if (self.weekWrapper !== undefined) {
            self.calendarContainer.style.width = daysWidth + self.weekWrapper.offsetWidth + "px";
          }

          self.calendarContainer.style.visibility = "visible";
          self.calendarContainer.style.display = null;
        }

        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

        if (!self.isMobile && isSafari) {
          positionCalendar();
        }

        triggerEvent("onReady");
      }

      function bindToInstance(fn) {
        return fn.bind(self);
      }

      function updateTime(e) {
        if (self.selectedDates.length === 0) return;
        timeWrapper(e);

        if (e.type !== "input") {
          setHoursFromInputs();
          updateValue();
        } else {
          setTimeout(function () {
            setHoursFromInputs();
            updateValue();
          }, DEBOUNCED_CHANGE_MS);
        }
      }

      function ampm2military(hour, amPM) {
        return hour % 12 + 12 * int(amPM === self.l10n.amPM[1]);
      }

      function military2ampm(hour) {
        switch (hour % 24) {
          case 0:
          case 12:
            return 12;

          default:
            return hour % 12;
        }
      }

      function setHoursFromInputs() {
        if (self.hourElement === undefined || self.minuteElement === undefined) return;
        var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24,
            minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60,
            seconds = self.secondElement !== undefined ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;
        if (self.amPM !== undefined) hours = ampm2military(hours, self.amPM.textContent);
        var limitMinHours = self.config.minTime !== undefined || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;
        var limitMaxHours = self.config.maxTime !== undefined || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;

        if (limitMaxHours) {
          var maxTime = self.config.maxTime !== undefined ? self.config.maxTime : self.config.maxDate;
          hours = Math.min(hours, maxTime.getHours());
          if (hours === maxTime.getHours()) minutes = Math.min(minutes, maxTime.getMinutes());
          if (minutes === maxTime.getMinutes()) seconds = Math.min(seconds, maxTime.getSeconds());
        }

        if (limitMinHours) {
          var minTime = self.config.minTime !== undefined ? self.config.minTime : self.config.minDate;
          hours = Math.max(hours, minTime.getHours());
          if (hours === minTime.getHours()) minutes = Math.max(minutes, minTime.getMinutes());
          if (minutes === minTime.getMinutes()) seconds = Math.max(seconds, minTime.getSeconds());
        }

        setHours(hours, minutes, seconds);
      }

      function setHoursFromDate(dateObj) {
        var date = dateObj || self.latestSelectedDateObj;
        if (date) setHours(date.getHours(), date.getMinutes(), date.getSeconds());
      }

      function setHours(hours, minutes, seconds) {
        if (self.latestSelectedDateObj !== undefined) {
          self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
        }

        if (!self.hourElement || !self.minuteElement || self.isMobile) return;
        self.hourElement.value = pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * int(hours % 12 === 0) : hours);
        self.minuteElement.value = pad(minutes);
        if (self.amPM !== undefined) self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
        if (self.secondElement !== undefined) self.secondElement.value = pad(seconds);
      }

      function onYearInput(event) {
        var year = parseInt(event.target.value) + (event.delta || 0);

        if (year.toString().length === 4 || event.key === "Enter") {
          event.target.blur();
          if (!/[^\d]/.test(year.toString())) changeYear(year);
        }
      }

      function bind(element, event, handler, options) {
        if (event instanceof Array) return event.forEach(function (ev) {
          return bind(element, ev, handler, options);
        });
        if (element instanceof Array) return element.forEach(function (el) {
          return bind(el, event, handler, options);
        });
        element.addEventListener(event, handler, options);

        self._handlers.push({
          element: element,
          event: event,
          handler: handler
        });
      }

      function onClick(handler) {
        return function (evt) {
          evt.which === 1 && handler(evt);
        };
      }

      function triggerChange() {
        triggerEvent("onChange");
      }

      function bindEvents() {
        if (self.config.wrap) {
          ["open", "close", "toggle", "clear"].forEach(function (evt) {
            Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function (el) {
              return bind(el, "click", self[evt]);
            });
          });
        }

        if (self.isMobile) {
          setupMobile();
          return;
        }

        var debouncedResize = debounce(onResize, 50);
        self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);
        if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent)) bind(self.daysContainer, "mouseover", function (e) {
          if (self.config.mode === "range") onMouseOver(e.target);
        });
        bind(window.document.body, "keydown", onKeyDown);
        if (!self.config.static) bind(self._input, "keydown", onKeyDown);
        if (!self.config.inline && !self.config.static) bind(window, "resize", debouncedResize);
        if (window.ontouchstart !== undefined) bind(window.document, "touchstart", documentClick);
        bind(window.document, "mousedown", onClick(documentClick));
        bind(window.document, "focus", documentClick, {
          capture: true
        });

        if (self.config.clickOpens === true) {
          bind(self._input, "focus", self.open);
          bind(self._input, "mousedown", onClick(self.open));
        }

        if (self.daysContainer !== undefined) {
          bind(self.monthNav, "mousedown", onClick(onMonthNavClick));
          bind(self.monthNav, ["keyup", "increment"], onYearInput);
          bind(self.daysContainer, "mousedown", onClick(selectDate));
        }

        if (self.timeContainer !== undefined && self.minuteElement !== undefined && self.hourElement !== undefined) {
          var selText = function selText(e) {
            return e.target.select();
          };

          bind(self.timeContainer, ["input", "increment"], updateTime);
          bind(self.timeContainer, "mousedown", onClick(timeIncrement));
          bind(self.timeContainer, ["input", "increment"], self._debouncedChange, {
            passive: true
          });
          bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
          if (self.secondElement !== undefined) bind(self.secondElement, "focus", function () {
            return self.secondElement && self.secondElement.select();
          });

          if (self.amPM !== undefined) {
            bind(self.amPM, "mousedown", onClick(function (e) {
              updateTime(e);
              triggerChange();
            }));
          }
        }
      }

      function jumpToDate(jumpDate) {
        var jumpTo = jumpDate !== undefined ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);

        try {
          if (jumpTo !== undefined) {
            self.currentYear = jumpTo.getFullYear();
            self.currentMonth = jumpTo.getMonth();
          }
        } catch (e) {
          e.message = "Invalid date supplied: " + jumpTo;
          self.config.errorHandler(e);
        }

        self.redraw();
      }

      function timeIncrement(e) {
        if (~e.target.className.indexOf("arrow")) incrementNumInput(e, e.target.classList.contains("arrowUp") ? 1 : -1);
      }

      function incrementNumInput(e, delta, inputElem) {
        var target = e && e.target;
        var input = inputElem || target && target.parentNode && target.parentNode.firstChild;
        var event = createEvent("increment");
        event.delta = delta;
        input && input.dispatchEvent(event);
      }

      function build() {
        var fragment = window.document.createDocumentFragment();
        self.calendarContainer = createElement("div", "flatpickr-calendar");
        self.calendarContainer.tabIndex = -1;

        if (!self.config.noCalendar) {
          fragment.appendChild(buildMonthNav());
          self.innerContainer = createElement("div", "flatpickr-innerContainer");

          if (self.config.weekNumbers) {
            var _buildWeeks = buildWeeks(),
                weekWrapper = _buildWeeks.weekWrapper,
                weekNumbers = _buildWeeks.weekNumbers;

            self.innerContainer.appendChild(weekWrapper);
            self.weekNumbers = weekNumbers;
            self.weekWrapper = weekWrapper;
          }

          self.rContainer = createElement("div", "flatpickr-rContainer");
          self.rContainer.appendChild(buildWeekdays());

          if (!self.daysContainer) {
            self.daysContainer = createElement("div", "flatpickr-days");
            self.daysContainer.tabIndex = -1;
          }

          buildDays();
          self.rContainer.appendChild(self.daysContainer);
          self.innerContainer.appendChild(self.rContainer);
          fragment.appendChild(self.innerContainer);
        }

        if (self.config.enableTime) {
          fragment.appendChild(buildTime());
        }

        toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
        toggleClass(self.calendarContainer, "animate", self.config.animate === true);
        toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
        self.calendarContainer.appendChild(fragment);
        var customAppend = self.config.appendTo !== undefined && self.config.appendTo.nodeType !== undefined;

        if (self.config.inline || self.config.static) {
          self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");

          if (self.config.inline) {
            if (!customAppend && self.element.parentNode) self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);else if (self.config.appendTo !== undefined) self.config.appendTo.appendChild(self.calendarContainer);
          }

          if (self.config.static) {
            var wrapper = createElement("div", "flatpickr-wrapper");
            if (self.element.parentNode) self.element.parentNode.insertBefore(wrapper, self.element);
            wrapper.appendChild(self.element);
            if (self.altInput) wrapper.appendChild(self.altInput);
            wrapper.appendChild(self.calendarContainer);
          }
        }

        if (!self.config.static && !self.config.inline) (self.config.appendTo !== undefined ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);
      }

      function createDay(className, date, dayNumber, i) {
        var dateIsEnabled = isEnabled(date, true),
            dayElement = createElement("span", "flatpickr-day " + className, date.getDate().toString());
        dayElement.dateObj = date;
        dayElement.$i = i;
        dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));

        if (compareDates(date, self.now) === 0) {
          self.todayDateElem = dayElement;
          dayElement.classList.add("today");
        }

        if (dateIsEnabled) {
          dayElement.tabIndex = -1;

          if (isDateSelected(date)) {
            dayElement.classList.add("selected");
            self.selectedDateElem = dayElement;

            if (self.config.mode === "range") {
              toggleClass(dayElement, "startRange", self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0);
              toggleClass(dayElement, "endRange", self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0);
              if (className === "nextMonthDay") dayElement.classList.add("inRange");
            }
          }
        } else {
          dayElement.classList.add("disabled");
        }

        if (self.config.mode === "range") {
          if (isDateInRange(date) && !isDateSelected(date)) dayElement.classList.add("inRange");
        }

        if (self.weekNumbers && self.config.showMonths === 1 && className !== "prevMonthDay" && dayNumber % 7 === 1) {
          self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
        }

        triggerEvent("onDayCreate", dayElement);
        return dayElement;
      }

      function focusOnDay(currentInd, offset) {
        var currentIndex = currentInd !== undefined ? currentInd : document.activeElement.$i;
        var newIndex = (currentIndex || 0) + offset || 0,
            targetNode = Array.prototype.find.call(self.days.children, function (c, i) {
          return i >= newIndex && c.className.indexOf("MonthDay") === -1 && isEnabled(c.dateObj);
        });

        if (targetNode !== undefined) {
          targetNode.focus();
          if (self.config.mode === "range") onMouseOver(targetNode);
        }
      }

      function buildMonthDays(year, month) {
        var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
        var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12);
        var daysInMonth = self.utils.getDaysInMonth(month),
            days = window.document.createDocumentFragment();
        var dayNumber = prevMonthDays + 1 - firstOfMonth,
            dayIndex = 0;

        for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
          days.appendChild(createDay("prevMonthDay", new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
        }

        for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
          days.appendChild(createDay("", new Date(year, month, dayNumber), dayNumber, dayIndex));
        }

        for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
          days.appendChild(createDay("nextMonthDay", new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
        }

        var dayContainer = createElement("div", "dayContainer");
        dayContainer.appendChild(days);
        return dayContainer;
      }

      function buildDays() {
        if (self.daysContainer === undefined) {
          return;
        }

        clearNode(self.daysContainer);
        if (self.weekNumbers) clearNode(self.weekNumbers);
        var frag = document.createDocumentFragment();

        for (var i = 0; i < self.config.showMonths; i++) {
          var d = new Date(self.currentYear, self.currentMonth, 1);
          d.setMonth(self.currentMonth + i);
          frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
        }

        self.daysContainer.appendChild(frag);
        self.days = self.daysContainer.firstChild;
      }

      function buildMonth() {
        var container = createElement("div", "flatpickr-month");
        var monthNavFragment = window.document.createDocumentFragment();
        var monthElement = createElement("span", "cur-month");
        monthElement.title = self.l10n.scrollTitle;
        var yearInput = createNumberInput("cur-year", {
          tabindex: "-1"
        });
        var yearElement = yearInput.childNodes[0];
        yearElement.title = self.l10n.scrollTitle;
        yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
        if (self.config.minDate) yearElement.setAttribute("data-min", self.config.minDate.getFullYear().toString());

        if (self.config.maxDate) {
          yearElement.setAttribute("data-max", self.config.maxDate.getFullYear().toString());
          yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
        }

        var currentMonth = createElement("div", "flatpickr-current-month");
        currentMonth.appendChild(monthElement);
        currentMonth.appendChild(yearInput);
        monthNavFragment.appendChild(currentMonth);
        container.appendChild(monthNavFragment);
        return {
          container: container,
          yearElement: yearElement,
          monthElement: monthElement
        };
      }

      function buildMonthNav() {
        self.monthNav = createElement("div", "flatpickr-months");
        self.yearElements = [];
        self.monthElements = [];
        self.prevMonthNav = createElement("span", "flatpickr-prev-month");
        self.prevMonthNav.innerHTML = self.config.prevArrow;
        self.nextMonthNav = createElement("span", "flatpickr-next-month");
        self.nextMonthNav.innerHTML = self.config.nextArrow;
        self.monthNav.appendChild(self.prevMonthNav);

        for (var m = self.config.showMonths; m--;) {
          var month = buildMonth();
          self.yearElements.push(month.yearElement);
          self.monthElements.push(month.monthElement);
          self.monthNav.appendChild(month.container);
        }

        self.monthNav.appendChild(self.nextMonthNav);
        Object.defineProperty(self, "_hidePrevMonthArrow", {
          get: function get() {
            return self.__hidePrevMonthArrow;
          },
          set: function set(bool) {
            if (self.__hidePrevMonthArrow !== bool) {
              toggleClass(self.prevMonthNav, "disabled", bool);
              self.__hidePrevMonthArrow = bool;
            }
          }
        });
        Object.defineProperty(self, "_hideNextMonthArrow", {
          get: function get() {
            return self.__hideNextMonthArrow;
          },
          set: function set(bool) {
            if (self.__hideNextMonthArrow !== bool) {
              toggleClass(self.nextMonthNav, "disabled", bool);
              self.__hideNextMonthArrow = bool;
            }
          }
        });
        self.currentYearElement = self.yearElements[0];
        updateNavigationCurrentMonth();
        return self.monthNav;
      }

      function buildTime() {
        self.calendarContainer.classList.add("hasTime");
        if (self.config.noCalendar) self.calendarContainer.classList.add("noCalendar");
        self.timeContainer = createElement("div", "flatpickr-time");
        self.timeContainer.tabIndex = -1;
        var separator = createElement("span", "flatpickr-time-separator", ":");
        var hourInput = createNumberInput("flatpickr-hour");
        self.hourElement = hourInput.childNodes[0];
        var minuteInput = createNumberInput("flatpickr-minute");
        self.minuteElement = minuteInput.childNodes[0];
        self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
        self.hourElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? self.config.defaultHour : military2ampm(self.config.defaultHour));
        self.minuteElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : self.config.defaultMinute);
        self.hourElement.setAttribute("data-step", self.config.hourIncrement.toString());
        self.minuteElement.setAttribute("data-step", self.config.minuteIncrement.toString());
        self.hourElement.setAttribute("data-min", self.config.time_24hr ? "0" : "1");
        self.hourElement.setAttribute("data-max", self.config.time_24hr ? "23" : "12");
        self.minuteElement.setAttribute("data-min", "0");
        self.minuteElement.setAttribute("data-max", "59");
        self.timeContainer.appendChild(hourInput);
        self.timeContainer.appendChild(separator);
        self.timeContainer.appendChild(minuteInput);
        if (self.config.time_24hr) self.timeContainer.classList.add("time24hr");

        if (self.config.enableSeconds) {
          self.timeContainer.classList.add("hasSeconds");
          var secondInput = createNumberInput("flatpickr-second");
          self.secondElement = secondInput.childNodes[0];
          self.secondElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : self.config.defaultSeconds);
          self.secondElement.setAttribute("data-step", self.minuteElement.getAttribute("data-step"));
          self.secondElement.setAttribute("data-min", self.minuteElement.getAttribute("data-min"));
          self.secondElement.setAttribute("data-max", self.minuteElement.getAttribute("data-max"));
          self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
          self.timeContainer.appendChild(secondInput);
        }

        if (!self.config.time_24hr) {
          self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);
          self.amPM.title = self.l10n.toggleTitle;
          self.amPM.tabIndex = -1;
          self.timeContainer.appendChild(self.amPM);
        }

        return self.timeContainer;
      }

      function buildWeekdays() {
        if (!self.weekdayContainer) self.weekdayContainer = createElement("div", "flatpickr-weekdays");

        for (var i = self.config.showMonths; i--;) {
          var container = createElement("div", "flatpickr-weekdaycontainer");
          self.weekdayContainer.appendChild(container);
        }

        updateWeekdays();
        return self.weekdayContainer;
      }

      function updateWeekdays() {
        var firstDayOfWeek = self.l10n.firstDayOfWeek;
        var weekdays = self.l10n.weekdays.shorthand.concat();

        if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
          weekdays = weekdays.splice(firstDayOfWeek, weekdays.length).concat(weekdays.splice(0, firstDayOfWeek));
        }

        for (var i = self.config.showMonths; i--;) {
          self.weekdayContainer.children[i].innerHTML = "\n      <span class=flatpickr-weekday>\n        " + weekdays.join("</span><span class=flatpickr-weekday>") + "\n      </span>\n      ";
        }
      }

      function buildWeeks() {
        self.calendarContainer.classList.add("hasWeeks");
        var weekWrapper = createElement("div", "flatpickr-weekwrapper");
        weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
        var weekNumbers = createElement("div", "flatpickr-weeks");
        weekWrapper.appendChild(weekNumbers);
        return {
          weekWrapper: weekWrapper,
          weekNumbers: weekNumbers
        };
      }

      function changeMonth(value, is_offset, from_keyboard) {
        if (is_offset === void 0) {
          is_offset = true;
        }

        if (from_keyboard === void 0) {
          from_keyboard = false;
        }

        var delta = is_offset ? value : value - self.currentMonth;
        if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true) return;
        self.currentMonth += delta;

        if (self.currentMonth < 0 || self.currentMonth > 11) {
          self.currentYear += self.currentMonth > 11 ? 1 : -1;
          self.currentMonth = (self.currentMonth + 12) % 12;
          triggerEvent("onYearChange");
        }

        buildDays();
        triggerEvent("onMonthChange");
        updateNavigationCurrentMonth();

        if (from_keyboard === true) {
          focusOnDay(undefined, 0);
        }
      }

      function clear(triggerChangeEvent) {
        if (triggerChangeEvent === void 0) {
          triggerChangeEvent = true;
        }

        self.input.value = "";
        if (self.altInput !== undefined) self.altInput.value = "";
        if (self.mobileInput !== undefined) self.mobileInput.value = "";
        self.selectedDates = [];
        self.latestSelectedDateObj = undefined;
        self.showTimeInput = false;

        if (self.config.enableTime === true) {
          if (self.config.minDate !== undefined) setHoursFromDate(self.config.minDate);else setHours(self.config.defaultHour, self.config.defaultMinute, self.config.defaultSeconds);
        }

        self.redraw();
        if (triggerChangeEvent) triggerEvent("onChange");
      }

      function close() {
        self.isOpen = false;

        if (!self.isMobile) {
          self.calendarContainer.classList.remove("open");

          self._input.classList.remove("active");
        }

        triggerEvent("onClose");
      }

      function destroy() {
        if (self.config !== undefined) triggerEvent("onDestroy");

        for (var i = self._handlers.length; i--;) {
          var h = self._handlers[i];
          h.element.removeEventListener(h.event, h.handler);
        }

        self._handlers = [];

        if (self.mobileInput) {
          if (self.mobileInput.parentNode) self.mobileInput.parentNode.removeChild(self.mobileInput);
          self.mobileInput = undefined;
        } else if (self.calendarContainer && self.calendarContainer.parentNode) self.calendarContainer.parentNode.removeChild(self.calendarContainer);

        if (self.altInput) {
          self.input.type = "text";
          if (self.altInput.parentNode) self.altInput.parentNode.removeChild(self.altInput);
          delete self.altInput;
        }

        if (self.input) {
          self.input.type = self.input._type;
          self.input.classList.remove("flatpickr-input");
          self.input.removeAttribute("readonly");
          self.input.value = "";
        }

        ["_showTimeInput", "latestSelectedDateObj", "_hideNextMonthArrow", "_hidePrevMonthArrow", "__hideNextMonthArrow", "__hidePrevMonthArrow", "isMobile", "isOpen", "selectedDateElem", "minDateHasTime", "maxDateHasTime", "days", "daysContainer", "_input", "_positionElement", "innerContainer", "rContainer", "monthNav", "todayDateElem", "calendarContainer", "weekdayContainer", "prevMonthNav", "nextMonthNav", "currentMonthElement", "currentYearElement", "navigationCurrentMonth", "selectedDateElem", "config"].forEach(function (k) {
          try {
            delete self[k];
          } catch (_) {}
        });
      }

      function isCalendarElem(elem) {
        if (self.config.appendTo && self.config.appendTo.contains(elem)) return true;
        return self.calendarContainer.contains(elem);
      }

      function documentClick(e) {
        if (self.isOpen && !self.config.inline) {
          var isCalendarElement = isCalendarElem(e.target);
          var isInput = e.target === self.input || e.target === self.altInput || self.element.contains(e.target) || e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));
          var lostFocus = e.type === "blur" ? isInput && e.relatedTarget && !isCalendarElem(e.relatedTarget) : !isInput && !isCalendarElement;
          var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {
            return elem.contains(e.target);
          });

          if (lostFocus && isIgnored) {
            self.close();

            if (self.config.mode === "range" && self.selectedDates.length === 1) {
              self.clear(false);
              self.redraw();
            }
          }
        }
      }

      function changeYear(newYear) {
        if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear()) return;
        var newYearNum = newYear,
            isNewYear = self.currentYear !== newYearNum;
        self.currentYear = newYearNum || self.currentYear;

        if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {
          self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
        } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {
          self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
        }

        if (isNewYear) {
          self.redraw();
          triggerEvent("onYearChange");
        }
      }

      function isEnabled(date, timeless) {
        if (timeless === void 0) {
          timeless = true;
        }

        var dateToCheck = self.parseDate(date, undefined, timeless);
        if (self.config.minDate && dateToCheck && compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0) return false;
        if (self.config.enable.length === 0 && self.config.disable.length === 0) return true;
        if (dateToCheck === undefined) return false;
        var bool = self.config.enable.length > 0,
            array = bool ? self.config.enable : self.config.disable;

        for (var i = 0, d; i < array.length; i++) {
          d = array[i];
          if (typeof d === "function" && d(dateToCheck)) return bool;else if (d instanceof Date && dateToCheck !== undefined && d.getTime() === dateToCheck.getTime()) return bool;else if (typeof d === "string" && dateToCheck !== undefined) {
            var parsed = self.parseDate(d, undefined, true);
            return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
          } else if (typeof d === "object" && dateToCheck !== undefined && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime()) return bool;
        }

        return !bool;
      }

      function onKeyDown(e) {
        var isInput = e.target === self._input;
        var calendarElem = isCalendarElem(e.target);
        var allowInput = self.config.allowInput;
        var allowKeydown = self.isOpen && (!allowInput || !isInput);
        var allowInlineKeydown = self.config.inline && isInput && !allowInput;

        if (e.keyCode === 13 && isInput) {
          if (allowInput) {
            self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);
            return e.target.blur();
          } else self.open();
        } else if (calendarElem || allowKeydown || allowInlineKeydown) {
          var isTimeObj = !!self.timeContainer && self.timeContainer.contains(e.target);

          switch (e.keyCode) {
            case 13:
              if (isTimeObj) updateValue();else selectDate(e);
              break;

            case 27:
              e.preventDefault();
              focusAndClose();
              break;

            case 8:
            case 46:
              if (isInput && !self.config.allowInput) {
                e.preventDefault();
                self.clear();
              }

              break;

            case 37:
            case 39:
              if (!isTimeObj) {
                e.preventDefault();

                if (self.daysContainer) {
                  var _delta = isInput ? 0 : e.keyCode === 39 ? 1 : -1;

                  if (!e.ctrlKey) focusOnDay(undefined, _delta);else changeMonth(_delta, true, true);
                }
              } else if (self.hourElement) self.hourElement.focus();

              break;

            case 38:
            case 40:
              e.preventDefault();
              var delta = e.keyCode === 40 ? 1 : -1;

              if (self.daysContainer && e.target.$i !== undefined) {
                if (e.ctrlKey) {
                  changeYear(self.currentYear - delta);
                  focusOnDay(e.target.$i, 0);
                } else if (!isTimeObj) focusOnDay(e.target.$i, delta * 7);
              } else if (self.config.enableTime) {
                if (!isTimeObj && self.hourElement) self.hourElement.focus();
                updateTime(e);

                self._debouncedChange();
              }

              break;

            case 9:
              if (e.target === self.hourElement) {
                e.preventDefault();
                self.minuteElement.select();
              } else if (e.target === self.minuteElement && (self.secondElement || self.amPM)) {
                e.preventDefault();
                if (self.secondElement !== undefined) self.secondElement.focus();else if (self.amPM !== undefined) self.amPM.focus();
              } else if (e.target === self.secondElement && self.amPM) {
                e.preventDefault();
                self.amPM.focus();
              }

              break;

            default:
              break;
          }

          switch (e.key) {
            case self.l10n.amPM[0].charAt(0):
            case self.l10n.amPM[0].charAt(0).toLowerCase():
              if (self.amPM !== undefined && e.target === self.amPM) {
                self.amPM.textContent = self.l10n.amPM[0];
                setHoursFromInputs();
                updateValue();
              }

              break;

            case self.l10n.amPM[1].charAt(0):
            case self.l10n.amPM[1].charAt(0).toLowerCase():
              if (self.amPM !== undefined && e.target === self.amPM) {
                self.amPM.textContent = self.l10n.amPM[1];
                setHoursFromInputs();
                updateValue();
              }

              break;

            default:
              break;
          }

          triggerEvent("onKeyDown", e);
        }
      }

      function onMouseOver(elem) {
        if (self.selectedDates.length !== 1 || !elem.classList.contains("flatpickr-day") || elem.classList.contains("disabled")) return;
        var hoverDate = elem.dateObj.getTime(),
            initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(),
            rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()),
            rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
        var months = self.daysContainer.children,
            firstDay = months[0].children[0].dateObj.getTime(),
            lastDay = months[months.length - 1].lastChild.dateObj.getTime();
        var containsDisabled = false;
        var minRange = 0,
            maxRange = 0;

        for (var t = firstDay; t < lastDay; t += duration.DAY) {
          if (!isEnabled(new Date(t), true)) {
            containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;
            if (t < initialDate && (!minRange || t > minRange)) minRange = t;else if (t > initialDate && (!maxRange || t < maxRange)) maxRange = t;
          }
        }

        for (var m = 0; m < self.config.showMonths; m++) {
          var month = self.daysContainer.children[m];
          var prevMonth = self.daysContainer.children[m - 1];

          var _loop = function _loop(i, l) {
            var dayElem = month.children[i],
                date = dayElem.dateObj;
            var timestamp = date.getTime();
            var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;

            if (outOfRange) {
              dayElem.classList.add("notAllowed");
              ["inRange", "startRange", "endRange"].forEach(function (c) {
                dayElem.classList.remove(c);
              });
              return "continue";
            } else if (containsDisabled && !outOfRange) return "continue";

            ["startRange", "inRange", "endRange", "notAllowed"].forEach(function (c) {
              dayElem.classList.remove(c);
            });
            elem.classList.add(hoverDate < self.selectedDates[0].getTime() ? "startRange" : "endRange");

            if (month.contains(elem) || !(m > 0 && prevMonth && prevMonth.lastChild.dateObj.getTime() >= timestamp)) {
              if (initialDate < hoverDate && timestamp === initialDate) dayElem.classList.add("startRange");else if (initialDate > hoverDate && timestamp === initialDate) dayElem.classList.add("endRange");
              if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate)) dayElem.classList.add("inRange");
            }
          };

          for (var i = 0, l = month.children.length; i < l; i++) {
            var _ret = _loop(i, l);

            if (_ret === "continue") continue;
          }
        }
      }

      function onResize() {
        if (self.isOpen && !self.config.static && !self.config.inline) positionCalendar();
      }

      function open(e, positionElement) {
        if (positionElement === void 0) {
          positionElement = self._input;
        }

        if (self.isMobile === true) {
          if (e) {
            e.preventDefault();
            e.target && e.target.blur();
          }

          setTimeout(function () {
            self.mobileInput !== undefined && self.mobileInput.click();
          }, 0);
          triggerEvent("onOpen");
          return;
        }

        if (self._input.disabled || self.config.inline) return;
        var wasOpen = self.isOpen;
        self.isOpen = true;

        if (!wasOpen) {
          self.calendarContainer.classList.add("open");

          self._input.classList.add("active");

          triggerEvent("onOpen");
          positionCalendar(positionElement);
        }

        if (self.config.enableTime === true && self.config.noCalendar === true) {
          if (self.selectedDates.length === 0) {
            self.setDate(self.config.minDate !== undefined ? new Date(self.config.minDate.getTime()) : new Date().setHours(self.config.defaultHour, self.config.defaultMinute, self.config.defaultSeconds, 0), false);
            setHoursFromInputs();
            updateValue();
          }

          setTimeout(function () {
            return self.hourElement.select();
          }, 50);
        }
      }

      function minMaxDateSetter(type) {
        return function (date) {
          var dateObj = self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat);
          var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];

          if (dateObj !== undefined) {
            self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
          }

          if (self.selectedDates) {
            self.selectedDates = self.selectedDates.filter(function (d) {
              return isEnabled(d);
            });
            if (!self.selectedDates.length && type === "min") setHoursFromDate(dateObj);
            updateValue();
          }

          if (self.daysContainer) {
            redraw();
            if (dateObj !== undefined) self.currentYearElement[type] = dateObj.getFullYear().toString();else self.currentYearElement.removeAttribute(type);
            self.currentYearElement.disabled = !!inverseDateObj && dateObj !== undefined && inverseDateObj.getFullYear() === dateObj.getFullYear();
          }
        };
      }

      function parseConfig() {
        var boolOpts = ["wrap", "weekNumbers", "allowInput", "clickOpens", "time_24hr", "enableTime", "noCalendar", "altInput", "shorthandCurrentMonth", "inline", "static", "enableSeconds", "disableMobile"];
        var hooks = ["onChange", "onClose", "onDayCreate", "onDestroy", "onKeyDown", "onMonthChange", "onOpen", "onParseConfig", "onReady", "onValueUpdate", "onYearChange", "onPreCalendarPosition"];
        var userConfig = Object.assign({}, instanceConfig, JSON.parse(JSON.stringify(element.dataset || {})));
        var formats$$1 = {};
        self.config.parseDate = userConfig.parseDate;
        self.config.formatDate = userConfig.formatDate;
        Object.defineProperty(self.config, "enable", {
          get: function get() {
            return self.config._enable;
          },
          set: function set(dates) {
            self.config._enable = parseDateRules(dates);
          }
        });
        Object.defineProperty(self.config, "disable", {
          get: function get() {
            return self.config._disable;
          },
          set: function set(dates) {
            self.config._disable = parseDateRules(dates);
          }
        });

        if (!userConfig.dateFormat && userConfig.enableTime) {
          formats$$1.dateFormat = userConfig.noCalendar ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : flatpickr.defaultConfig.dateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
        }

        if (userConfig.altInput && userConfig.enableTime && !userConfig.altFormat) {
          formats$$1.altFormat = userConfig.noCalendar ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : flatpickr.defaultConfig.altFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
        }

        Object.defineProperty(self.config, "minDate", {
          get: function get() {
            return self.config._minDate;
          },
          set: minMaxDateSetter("min")
        });
        Object.defineProperty(self.config, "maxDate", {
          get: function get() {
            return self.config._maxDate;
          },
          set: minMaxDateSetter("max")
        });

        var minMaxTimeSetter = function minMaxTimeSetter(type) {
          return function (val) {
            self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i");
          };
        };

        Object.defineProperty(self.config, "minTime", {
          get: function get() {
            return self.config._minTime;
          },
          set: minMaxTimeSetter("min")
        });
        Object.defineProperty(self.config, "maxTime", {
          get: function get() {
            return self.config._maxTime;
          },
          set: minMaxTimeSetter("max")
        });
        Object.assign(self.config, formats$$1, userConfig);

        for (var i = 0; i < boolOpts.length; i++) {
          self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === "true";
        }

        for (var _i = hooks.length; _i--;) {
          if (self.config[hooks[_i]] !== undefined) {
            self.config[hooks[_i]] = arrayify(self.config[hooks[_i]] || []).map(bindToInstance);
          }
        }

        if (self.config.mode === "time") {
          self.config.noCalendar = true;
          self.config.enableTime = true;
        }

        for (var _i2 = 0; _i2 < self.config.plugins.length; _i2++) {
          var pluginConf = self.config.plugins[_i2](self) || {};

          for (var key in pluginConf) {
            if (~hooks.indexOf(key)) {
              self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);
            } else if (typeof userConfig[key] === "undefined") self.config[key] = pluginConf[key];
          }
        }

        self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === "single" && !self.config.disable.length && !self.config.enable.length && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        triggerEvent("onParseConfig");
      }

      function setupLocale() {
        if (typeof self.config.locale !== "object" && typeof flatpickr.l10ns[self.config.locale] === "undefined") self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
        self.l10n = Object.assign({}, flatpickr.l10ns.default, typeof self.config.locale === "object" ? self.config.locale : self.config.locale !== "default" ? flatpickr.l10ns[self.config.locale] : undefined);
        tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
        self.formatDate = createDateFormatter(self);
      }

      function positionCalendar(customPositionElement) {
        if (self.calendarContainer === undefined) return;
        triggerEvent("onPreCalendarPosition");
        var positionElement = customPositionElement || self._positionElement;
        var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, function (acc, child) {
          return acc + child.offsetHeight;
        }, 0),
            calendarWidth = self.calendarContainer.offsetWidth,
            configPos = self.config.position,
            inputBounds = positionElement.getBoundingClientRect(),
            distanceFromBottom = window.innerHeight - inputBounds.bottom,
            showOnTop = configPos === "above" || configPos !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
        var top = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
        toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
        toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
        if (self.config.inline) return;
        var left = window.pageXOffset + inputBounds.left;
        var right = window.document.body.offsetWidth - inputBounds.right;
        var rightMost = left + calendarWidth > window.document.body.offsetWidth;
        toggleClass(self.calendarContainer, "rightMost", rightMost);
        if (self.config.static) return;
        self.calendarContainer.style.top = top + "px";

        if (!rightMost) {
          self.calendarContainer.style.left = left + "px";
          self.calendarContainer.style.right = "auto";
        } else {
          self.calendarContainer.style.left = "auto";
          self.calendarContainer.style.right = right + "px";
        }
      }

      function redraw() {
        if (self.config.noCalendar || self.isMobile) return;
        updateWeekdays();
        updateNavigationCurrentMonth();
        buildDays();
      }

      function focusAndClose() {
        self._input.focus();

        if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== undefined) {
          setTimeout(self.close, 0);
        } else {
          self.close();
        }
      }

      function selectDate(e) {
        e.preventDefault();
        e.stopPropagation();

        var isSelectable = function isSelectable(day) {
          return day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("disabled") && !day.classList.contains("notAllowed");
        };

        var t = findParent(e.target, isSelectable);
        if (t === undefined) return;
        var target = t;
        var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());
        var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== "range";
        self.selectedDateElem = target;
        if (self.config.mode === "single") self.selectedDates = [selectedDate];else if (self.config.mode === "multiple") {
          var selectedIndex = isDateSelected(selectedDate);
          if (selectedIndex) self.selectedDates.splice(parseInt(selectedIndex), 1);else self.selectedDates.push(selectedDate);
        } else if (self.config.mode === "range") {
          if (self.selectedDates.length === 2) self.clear(false);
          self.selectedDates.push(selectedDate);
          if (compareDates(selectedDate, self.selectedDates[0], true) !== 0) self.selectedDates.sort(function (a, b) {
            return a.getTime() - b.getTime();
          });
        }
        setHoursFromInputs();

        if (shouldChangeMonth) {
          var isNewYear = self.currentYear !== selectedDate.getFullYear();
          self.currentYear = selectedDate.getFullYear();
          self.currentMonth = selectedDate.getMonth();
          if (isNewYear) triggerEvent("onYearChange");
          triggerEvent("onMonthChange");
        }

        updateNavigationCurrentMonth();
        buildDays();
        if (self.config.minDate && self.minDateHasTime && self.config.enableTime && compareDates(selectedDate, self.config.minDate) === 0) setHoursFromDate(self.config.minDate);
        updateValue();
        if (self.config.enableTime) setTimeout(function () {
          return self.showTimeInput = true;
        }, 50);

        if (self.config.mode === "range") {
          if (self.selectedDates.length === 1) {
            onMouseOver(target);
          } else updateNavigationCurrentMonth();
        }

        if (!shouldChangeMonth && self.config.mode !== "range" && self.config.showMonths === 1) focusOnDay(target.$i, 0);else self.selectedDateElem && self.selectedDateElem.focus();
        if (self.hourElement !== undefined) setTimeout(function () {
          return self.hourElement !== undefined && self.hourElement.select();
        }, 451);

        if (self.config.closeOnSelect) {
          var single = self.config.mode === "single" && !self.config.enableTime;
          var range = self.config.mode === "range" && self.selectedDates.length === 2 && !self.config.enableTime;

          if (single || range) {
            focusAndClose();
          }
        }

        triggerChange();
      }

      var CALLBACKS = {
        locale: [setupLocale]
      };

      function set(option, value) {
        if (option !== null && typeof option === "object") Object.assign(self.config, option);else {
          self.config[option] = value;
          if (CALLBACKS[option] !== undefined) CALLBACKS[option].forEach(function (x) {
            return x();
          });
        }
        self.redraw();
        jumpToDate();
      }

      function setSelectedDate(inputDate, format) {
        var dates = [];
        if (inputDate instanceof Array) dates = inputDate.map(function (d) {
          return self.parseDate(d, format);
        });else if (inputDate instanceof Date || typeof inputDate === "number") dates = [self.parseDate(inputDate, format)];else if (typeof inputDate === "string") {
          switch (self.config.mode) {
            case "single":
              dates = [self.parseDate(inputDate, format)];
              break;

            case "multiple":
              dates = inputDate.split(self.config.conjunction).map(function (date) {
                return self.parseDate(date, format);
              });
              break;

            case "range":
              dates = inputDate.split(self.l10n.rangeSeparator).map(function (date) {
                return self.parseDate(date, format);
              });
              break;

            default:
              break;
          }
        } else self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
        self.selectedDates = dates.filter(function (d) {
          return d instanceof Date && isEnabled(d, false);
        });
        if (self.config.mode === "range") self.selectedDates.sort(function (a, b) {
          return a.getTime() - b.getTime();
        });
      }

      function setDate(date, triggerChange, format) {
        if (triggerChange === void 0) {
          triggerChange = false;
        }

        if (format === void 0) {
          format = self.config.dateFormat;
        }

        if (date !== 0 && !date) return self.clear(triggerChange);
        setSelectedDate(date, format);
        self.showTimeInput = self.selectedDates.length > 0;
        self.latestSelectedDateObj = self.selectedDates[0];
        self.redraw();
        jumpToDate();
        setHoursFromDate();
        updateValue(triggerChange);
        if (triggerChange) triggerEvent("onChange");
      }

      function parseDateRules(arr) {
        return arr.map(function (rule) {
          if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) {
            return self.parseDate(rule, undefined, true);
          } else if (rule && typeof rule === "object" && rule.from && rule.to) return {
            from: self.parseDate(rule.from, undefined),
            to: self.parseDate(rule.to, undefined)
          };

          return rule;
        }).filter(function (x) {
          return x;
        });
      }

      function setupDates() {
        self.selectedDates = [];
        self.now = self.parseDate(self.config.now) || new Date();
        var preloadedDate = self.config.defaultDate || self.input.value;
        if (preloadedDate) setSelectedDate(preloadedDate, self.config.dateFormat);
        var initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;
        self.currentYear = initialDate.getFullYear();
        self.currentMonth = initialDate.getMonth();
        if (self.selectedDates.length > 0) self.latestSelectedDateObj = self.selectedDates[0];
        if (self.config.minTime !== undefined) self.config.minTime = self.parseDate(self.config.minTime, "H:i");
        if (self.config.maxTime !== undefined) self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
        self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);
        self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);
        Object.defineProperty(self, "showTimeInput", {
          get: function get() {
            return self._showTimeInput;
          },
          set: function set(bool) {
            self._showTimeInput = bool;
            if (self.calendarContainer) toggleClass(self.calendarContainer, "showTimeInput", bool);
            self.isOpen && positionCalendar();
          }
        });
      }

      function setupInputs() {
        self.input = self.config.wrap ? element.querySelector("[data-input]") : element;

        if (!self.input) {
          self.config.errorHandler(new Error("Invalid input element specified"));
          return;
        }

        self.input._type = self.input.type;
        self.input.type = "text";
        self.input.classList.add("flatpickr-input");
        self._input = self.input;

        if (self.config.altInput) {
          self.altInput = createElement(self.input.nodeName, self.input.className + " " + self.config.altInputClass);
          self._input = self.altInput;
          self.altInput.placeholder = self.input.placeholder;
          self.altInput.disabled = self.input.disabled;
          self.altInput.required = self.input.required;
          self.altInput.tabIndex = self.input.tabIndex;
          self.altInput.type = "text";
          self.input.type = "hidden";
          if (!self.config.static && self.input.parentNode) self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
        }

        if (!self.config.allowInput) self._input.setAttribute("readonly", "readonly");
        self._positionElement = self.config.positionElement || self._input;
      }

      function setupMobile() {
        var inputType = self.config.enableTime ? self.config.noCalendar ? "time" : "datetime-local" : "date";
        self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
        self.mobileInput.step = self.input.getAttribute("step") || "any";
        self.mobileInput.tabIndex = 1;
        self.mobileInput.type = inputType;
        self.mobileInput.disabled = self.input.disabled;
        self.mobileInput.required = self.input.required;
        self.mobileInput.placeholder = self.input.placeholder;
        self.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";

        if (self.selectedDates.length > 0) {
          self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
        }

        if (self.config.minDate) self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
        if (self.config.maxDate) self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
        self.input.type = "hidden";
        if (self.altInput !== undefined) self.altInput.type = "hidden";

        try {
          if (self.input.parentNode) self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
        } catch (_a) {}

        bind(self.mobileInput, "change", function (e) {
          self.setDate(e.target.value, false, self.mobileFormatStr);
          triggerEvent("onChange");
          triggerEvent("onClose");
        });
      }

      function toggle() {
        if (self.isOpen) return self.close();
        self.open();
      }

      function triggerEvent(event, data) {
        var hooks = self.config[event];

        if (hooks !== undefined && hooks.length > 0) {
          for (var i = 0; hooks[i] && i < hooks.length; i++) {
            hooks[i](self.selectedDates, self.input.value, self, data);
          }
        }

        if (event === "onChange") {
          self.input.dispatchEvent(createEvent("change"));
          self.input.dispatchEvent(createEvent("input"));
        }
      }

      function createEvent(name) {
        var e = document.createEvent("Event");
        e.initEvent(name, true, true);
        return e;
      }

      function isDateSelected(date) {
        for (var i = 0; i < self.selectedDates.length; i++) {
          if (compareDates(self.selectedDates[i], date) === 0) return "" + i;
        }

        return false;
      }

      function isDateInRange(date) {
        if (self.config.mode !== "range" || self.selectedDates.length < 2) return false;
        return compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;
      }

      function updateNavigationCurrentMonth() {
        if (self.config.noCalendar || self.isMobile || !self.monthNav) return;
        self.yearElements.forEach(function (yearElement, i) {
          var d = new Date(self.currentYear, self.currentMonth, 1);
          d.setMonth(self.currentMonth + i);
          self.monthElements[i].textContent = monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
          yearElement.value = d.getFullYear().toString();
        });
        self._hidePrevMonthArrow = self.config.minDate !== undefined && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());
        self._hideNextMonthArrow = self.config.maxDate !== undefined && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());
      }

      function updateValue(triggerChange) {
        if (triggerChange === void 0) {
          triggerChange = true;
        }

        if (self.selectedDates.length === 0) return self.clear(triggerChange);

        if (self.mobileInput !== undefined && self.mobileFormatStr) {
          self.mobileInput.value = self.latestSelectedDateObj !== undefined ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : "";
        }

        var joinChar = self.config.mode !== "range" ? self.config.conjunction : self.l10n.rangeSeparator;
        self.input.value = self.selectedDates.map(function (dObj) {
          return self.formatDate(dObj, self.config.dateFormat);
        }).join(joinChar);

        if (self.altInput !== undefined) {
          self.altInput.value = self.selectedDates.map(function (dObj) {
            return self.formatDate(dObj, self.config.altFormat);
          }).join(joinChar);
        }

        if (triggerChange !== false) triggerEvent("onValueUpdate");
      }

      function onMonthNavClick(e) {
        var isPrevMonth = self.prevMonthNav.contains(e.target);
        var isNextMonth = self.nextMonthNav.contains(e.target);

        if (isPrevMonth || isNextMonth) {
          changeMonth(isPrevMonth ? -1 : 1);
        } else if (self.yearElements.indexOf(e.target) >= 0) {
          e.preventDefault();
          e.target.select();
        } else if (e.target.classList.contains("arrowUp")) {
          self.changeYear(self.currentYear + 1);
        } else if (e.target.classList.contains("arrowDown")) {
          self.changeYear(self.currentYear - 1);
        }
      }

      function timeWrapper(e) {
        e.preventDefault();
        var isKeyDown = e.type === "keydown",
            input = e.target;

        if (self.amPM !== undefined && e.target === self.amPM) {
          self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
        }

        var min = parseFloat(input.getAttribute("data-min")),
            max = parseFloat(input.getAttribute("data-max")),
            step = parseFloat(input.getAttribute("data-step")),
            curValue = parseInt(input.value, 10),
            delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);
        var newValue = curValue + step * delta;

        if (typeof input.value !== "undefined" && input.value.length === 2) {
          var isHourElem = input === self.hourElement,
              isMinuteElem = input === self.minuteElement;

          if (newValue < min) {
            newValue = max + newValue + int(!isHourElem) + (int(isHourElem) && int(!self.amPM));
            if (isMinuteElem) incrementNumInput(undefined, -1, self.hourElement);
          } else if (newValue > max) {
            newValue = input === self.hourElement ? newValue - max - int(!self.amPM) : min;
            if (isMinuteElem) incrementNumInput(undefined, 1, self.hourElement);
          }

          if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {
            self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
          }

          input.value = pad(newValue);
        }
      }

      init();
      return self;
    }

    function _flatpickr(nodeList, config) {
      var nodes = Array.prototype.slice.call(nodeList);
      var instances = [];

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];

        try {
          if (node.getAttribute("data-fp-omit") !== null) continue;

          if (node._flatpickr !== undefined) {
            node._flatpickr.destroy();

            node._flatpickr = undefined;
          }

          node._flatpickr = FlatpickrInstance(node, config || {});
          instances.push(node._flatpickr);
        } catch (e) {
          console.error(e);
        }
      }

      return instances.length === 1 ? instances[0] : instances;
    }

    if (typeof HTMLElement !== "undefined") {
      HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {
        return _flatpickr(this, config);
      };

      HTMLElement.prototype.flatpickr = function (config) {
        return _flatpickr([this], config);
      };
    }

    var flatpickr = function flatpickr(selector, config) {
      if (selector instanceof NodeList) return _flatpickr(selector, config);else if (typeof selector === "string") return _flatpickr(window.document.querySelectorAll(selector), config);
      return _flatpickr([selector], config);
    };

    flatpickr.defaultConfig = defaults;
    flatpickr.l10ns = {
      en: Object.assign({}, english),
      default: Object.assign({}, english)
    };

    flatpickr.localize = function (l10n) {
      flatpickr.l10ns.default = Object.assign({}, flatpickr.l10ns.default, l10n);
    };

    flatpickr.setDefaults = function (config) {
      flatpickr.defaultConfig = Object.assign({}, flatpickr.defaultConfig, config);
    };

    flatpickr.parseDate = createDateParser({});
    flatpickr.formatDate = createDateFormatter({});
    flatpickr.compareDates = compareDates;

    if (typeof jQuery !== "undefined") {
      jQuery.fn.flatpickr = function (config) {
        return _flatpickr(this, config);
      };
    }

    Date.prototype.fp_incr = function (days) {
      return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
    };

    return flatpickr;

})));

},{}],431:[function(require,module,exports){
IntlPolyfill.__addLocaleData({locale:"en",date:{ca:["gregory","buddhist","chinese","coptic","dangi","ethioaa","ethiopic","generic","hebrew","indian","islamic","islamicc","japanese","persian","roc"],hourNo0:true,hour12:true,formats:{short:"{1}, {0}",medium:"{1}, {0}",full:"{1} 'at' {0}",long:"{1} 'at' {0}",availableFormats:{"d":"d","E":"ccc",Ed:"d E",Ehm:"E h:mm a",EHm:"E HH:mm",Ehms:"E h:mm:ss a",EHms:"E HH:mm:ss",Gy:"y G",GyMMM:"MMM y G",GyMMMd:"MMM d, y G",GyMMMEd:"E, MMM d, y G","h":"h a","H":"HH",hm:"h:mm a",Hm:"HH:mm",hms:"h:mm:ss a",Hms:"HH:mm:ss",hmsv:"h:mm:ss a v",Hmsv:"HH:mm:ss v",hmv:"h:mm a v",Hmv:"HH:mm v","M":"L",Md:"M/d",MEd:"E, M/d",MMM:"LLL",MMMd:"MMM d",MMMEd:"E, MMM d",MMMMd:"MMMM d",ms:"mm:ss","y":"y",yM:"M/y",yMd:"M/d/y",yMEd:"E, M/d/y",yMMM:"MMM y",yMMMd:"MMM d, y",yMMMEd:"E, MMM d, y",yMMMM:"MMMM y",yQQQ:"QQQ y",yQQQQ:"QQQQ y"},dateFormats:{yMMMMEEEEd:"EEEE, MMMM d, y",yMMMMd:"MMMM d, y",yMMMd:"MMM d, y",yMd:"M/d/yy"},timeFormats:{hmmsszzzz:"h:mm:ss a zzzz",hmsz:"h:mm:ss a z",hms:"h:mm:ss a",hm:"h:mm a"}},calendars:{buddhist:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["BE"],short:["BE"],long:["BE"]},dayPeriods:{am:"AM",pm:"PM"}},chinese:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mo1","Mo2","Mo3","Mo4","Mo5","Mo6","Mo7","Mo8","Mo9","Mo10","Mo11","Mo12"],long:["Month1","Month2","Month3","Month4","Month5","Month6","Month7","Month8","Month9","Month10","Month11","Month12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},dayPeriods:{am:"AM",pm:"PM"}},coptic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"],long:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},dangi:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mo1","Mo2","Mo3","Mo4","Mo5","Mo6","Mo7","Mo8","Mo9","Mo10","Mo11","Mo12"],long:["Month1","Month2","Month3","Month4","Month5","Month6","Month7","Month8","Month9","Month10","Month11","Month12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},dayPeriods:{am:"AM",pm:"PM"}},ethiopic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},ethioaa:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0"],short:["ERA0"],long:["ERA0"]},dayPeriods:{am:"AM",pm:"PM"}},generic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"],long:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},gregory:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["B","A","BCE","CE"],short:["BC","AD","BCE","CE"],long:["Before Christ","Anno Domini","Before Common Era","Common Era"]},dayPeriods:{am:"AM",pm:"PM"}},hebrew:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13","7"],short:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"],long:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AM"],short:["AM"],long:["AM"]},dayPeriods:{am:"AM",pm:"PM"}},indian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"],long:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Saka"],short:["Saka"],long:["Saka"]},dayPeriods:{am:"AM",pm:"PM"}},islamic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},islamicc:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},japanese:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","M","T","S","H"],short:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"],long:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"]},dayPeriods:{am:"AM",pm:"PM"}},persian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"],long:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AP"],short:["AP"],long:["AP"]},dayPeriods:{am:"AM",pm:"PM"}},roc:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Before R.O.C.","Minguo"],short:["Before R.O.C.","Minguo"],long:["Before R.O.C.","Minguo"]},dayPeriods:{am:"AM",pm:"PM"}}}},number:{nu:["latn"],patterns:{decimal:{positivePattern:"{number}",negativePattern:"{minusSign}{number}"},currency:{positivePattern:"{currency}{number}",negativePattern:"{minusSign}{currency}{number}"},percent:{positivePattern:"{number}{percentSign}",negativePattern:"{minusSign}{number}{percentSign}"}},symbols:{latn:{decimal:".",group:",",nan:"NaN",plusSign:"+",minusSign:"-",percentSign:"%",infinity:"∞"}},currencies:{AUD:"A$",BRL:"R$",CAD:"CA$",CNY:"CN¥",EUR:"€",GBP:"£",HKD:"HK$",ILS:"₪",INR:"₹",JPY:"¥",KRW:"₩",MXN:"MX$",NZD:"NZ$",TWD:"NT$",USD:"$",VND:"₫",XAF:"FCFA",XCD:"EC$",XOF:"CFA",XPF:"CFPF"}}});
},{}],432:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],433:[function(require,module,exports){
(function (process){
// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2017 Kris Kowal under the terms of the MIT
 * license found at https://github.com/kriskowal/q/blob/v1/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    "use strict";

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object" && typeof module === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
        // Prefer window over self for add-on scripts. Use self for
        // non-windowed contexts.
        var global = typeof window !== "undefined" ? window : self;

        // Get the `window` object, save the previous Q global
        // and initialize Q as a global.
        var previousQ = global.Q;
        global.Q = definition();

        // Add a noConflict function so Q can be removed from the
        // global namespace.
        global.Q.noConflict = function () {
            global.Q = previousQ;
            return this;
        };

    } else {
        throw new Error("This environment was not anticipated by Q. Please file a bug.");
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    // queue for late tasks, used by unhandled rejection tracking
    var laterQueue = [];

    function flush() {
        /* jshint loopfunc: true */
        var task, domain;

        while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }
            runSingle(task, domain);

        }
        while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
        }
        flushing = false;
    }
    // runs a single function in the async queue
    function runSingle(task, domain) {
        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process === "object" &&
        process.toString() === "[object process]" && process.nextTick) {
        // Ensure Q is in a real Node environment, with a `process.nextTick`.
        // To see through fake Node environments:
        // * Mocha test runner - exposes a `process` global without a `nextTick`
        // * Browserify - exposes a `process.nexTick` function that uses
        //   `setTimeout`. In this case `setImmediate` is preferred because
        //    it is faster. Browserify's `process.toString()` yields
        //   "[object Object]", while in a real Node environment
        //   `process.toString()` yields "[object process]".
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }
    // runs a task after all other tasks have been run
    // this is useful for unhandled rejection tracking that needs to happen
    // after all `then`d tasks have been run.
    nextTick.runAfter = function (task) {
        laterQueue.push(task);
        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };
    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {
    obj[prop] = descriptor.value;
    return obj;
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
                object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        var stack = filterStackString(concatedStacks);
        object_defineProperty(error, "stack", {value: stack, configurable: true});
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

/**
 * The counter is used to determine the stopping point for building
 * long stack traces. In makeStackTraceLong we walk backwards through
 * the linked list of promises, only stacks which were created before
 * the rejection are concatenated.
 */
var longStackCounter = 1;

// enable long stacks if Q_DEBUG is set
if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
            promise.stackCounter = longStackCounter++;
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;

        if (Q.longStackSupport && hasStacks) {
            // Only hold a reference to the new promise if long stacks
            // are enabled to reduce memory usage
            promise.source = newPromise;
        }

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Q can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
Q.race = race;
function race(answerPs) {
    return promise(function (resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function (answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var reportedUnhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }
    if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
            if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise);
                reportedUnhandledRejections.push(promise);
            }
        });
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise);
                if (atReport !== -1) {
                    process.emit("rejectionHandled", unhandledReasons[at], promise);
                    reportedUnhandledRejections.splice(atReport, 1);
                }
            });
        }
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var pendingCount = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++pendingCount;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--pendingCount === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (pendingCount === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Returns the first resolved promise of an array. Prior rejected promises are
 * ignored.  Rejects only if all promises are rejected.
 * @param {Array*} an array containing values or promises for values
 * @returns a promise fulfilled with the value of the first resolved promise,
 * or a rejected promise if all promises are rejected.
 */
Q.any = any;

function any(promises) {
    if (promises.length === 0) {
        return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
        var promise = promises[index];

        pendingCount++;

        when(promise, onFulfilled, onRejected, onProgress);
        function onFulfilled(result) {
            deferred.resolve(result);
        }
        function onRejected(err) {
            pendingCount--;
            if (pendingCount === 0) {
                var rejection = err || new Error("" + err);

                rejection.message = ("Q can't get fulfillment value from any promise, all " +
                    "promises were rejected. Last error message: " + rejection.message);

                deferred.reject(rejection);
            }
        }
        function onProgress(progress) {
            deferred.notify({
                index: index,
                value: progress
            });
        }
    }, undefined);

    return deferred.promise;
}

Promise.prototype.any = function () {
    return any(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    if (!callback || typeof callback.apply !== "function") {
        throw new Error("Q can't apply finally callback");
    }
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    if (callback === undefined) {
        throw new Error("Q can't wrap an undefined function");
    }
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

Q.noConflict = function() {
    throw new Error("Q.noConflict only works when Q is used as a global");
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

}).call(this,require('_process'))

},{"_process":432}],434:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = require("./runtime");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

},{"./runtime":435}],435:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);

},{}],436:[function(require,module,exports){
/*
 * smoothscroll polyfill - v0.3.5
 * https://iamdustan.github.io/smoothscroll
 * 2016 (c) Dustan Kasten, Jeremias Menichelli - MIT License
 */

(function(w, d, undefined) {
  'use strict';

  /*
   * aliases
   * w: window global object
   * d: document
   * undefined: undefined
   */

  // polyfill
  function polyfill() {
    // return when scrollBehavior interface is supported
    if ('scrollBehavior' in d.documentElement.style) {
      return;
    }

    /*
     * globals
     */
    var Element = w.HTMLElement || w.Element;
    var SCROLL_TIME = 468;

    /*
     * object gathering original scroll methods
     */
    var original = {
      scroll: w.scroll || w.scrollTo,
      scrollBy: w.scrollBy,
      elScroll: Element.prototype.scroll || scrollElement,
      scrollIntoView: Element.prototype.scrollIntoView
    };

    /*
     * define timing method
     */
    var now = w.performance && w.performance.now
      ? w.performance.now.bind(w.performance) : Date.now;

    /**
     * changes scroll position inside an element
     * @method scrollElement
     * @param {Number} x
     * @param {Number} y
     */
    function scrollElement(x, y) {
      this.scrollLeft = x;
      this.scrollTop = y;
    }

    /**
     * returns result of applying ease math function to a number
     * @method ease
     * @param {Number} k
     * @returns {Number}
     */
    function ease(k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    }

    /**
     * indicates if a smooth behavior should be applied
     * @method shouldBailOut
     * @param {Number|Object} x
     * @returns {Boolean}
     */
    function shouldBailOut(x) {
      if (typeof x !== 'object'
            || x === null
            || x.behavior === undefined
            || x.behavior === 'auto'
            || x.behavior === 'instant') {
        // first arg not an object/null
        // or behavior is auto, instant or undefined
        return true;
      }

      if (typeof x === 'object'
            && x.behavior === 'smooth') {
        // first argument is an object and behavior is smooth
        return false;
      }

      // throw error when behavior is not supported
      throw new TypeError('behavior not valid');
    }

    /**
     * finds scrollable parent of an element
     * @method findScrollableParent
     * @param {Node} el
     * @returns {Node} el
     */
    function findScrollableParent(el) {
      var isBody;
      var hasScrollableSpace;
      var hasVisibleOverflow;

      do {
        el = el.parentNode;

        // set condition variables
        isBody = el === d.body;
        hasScrollableSpace =
          el.clientHeight < el.scrollHeight ||
          el.clientWidth < el.scrollWidth;
        hasVisibleOverflow =
          w.getComputedStyle(el, null).overflow === 'visible';
      } while (!isBody && !(hasScrollableSpace && !hasVisibleOverflow));

      isBody = hasScrollableSpace = hasVisibleOverflow = null;

      return el;
    }

    /**
     * self invoked function that, given a context, steps through scrolling
     * @method step
     * @param {Object} context
     */
    function step(context) {
      var time = now();
      var value;
      var currentX;
      var currentY;
      var elapsed = (time - context.startTime) / SCROLL_TIME;

      // avoid elapsed times higher than one
      elapsed = elapsed > 1 ? 1 : elapsed;

      // apply easing to elapsed time
      value = ease(elapsed);

      currentX = context.startX + (context.x - context.startX) * value;
      currentY = context.startY + (context.y - context.startY) * value;

      context.method.call(context.scrollable, currentX, currentY);

      // scroll more if we have not reached our destination
      if (currentX !== context.x || currentY !== context.y) {
        w.requestAnimationFrame(step.bind(w, context));
      }
    }

    /**
     * scrolls window with a smooth behavior
     * @method smoothScroll
     * @param {Object|Node} el
     * @param {Number} x
     * @param {Number} y
     */
    function smoothScroll(el, x, y) {
      var scrollable;
      var startX;
      var startY;
      var method;
      var startTime = now();

      // define scroll context
      if (el === d.body) {
        scrollable = w;
        startX = w.scrollX || w.pageXOffset;
        startY = w.scrollY || w.pageYOffset;
        method = original.scroll;
      } else {
        scrollable = el;
        startX = el.scrollLeft;
        startY = el.scrollTop;
        method = scrollElement;
      }

      // scroll looping over a frame
      step({
        scrollable: scrollable,
        method: method,
        startTime: startTime,
        startX: startX,
        startY: startY,
        x: x,
        y: y
      });
    }

    /*
     * ORIGINAL METHODS OVERRIDES
     */

    // w.scroll and w.scrollTo
    w.scroll = w.scrollTo = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scroll.call(
          w,
          arguments[0].left || arguments[0],
          arguments[0].top || arguments[1]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left,
        ~~arguments[0].top
      );
    };

    // w.scrollBy
    w.scrollBy = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollBy.call(
          w,
          arguments[0].left || arguments[0],
          arguments[0].top || arguments[1]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left + (w.scrollX || w.pageXOffset),
        ~~arguments[0].top + (w.scrollY || w.pageYOffset)
      );
    };

    // Element.prototype.scroll and Element.prototype.scrollTo
    Element.prototype.scroll = Element.prototype.scrollTo = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.elScroll.call(
            this,
            arguments[0].left || arguments[0],
            arguments[0].top || arguments[1]
        );
        return;
      }

      var left = arguments[0].left;
      var top = arguments[0].top;

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
          this,
          this,
          typeof left === 'number' ? left : this.scrollLeft,
          typeof top === 'number' ? top : this.scrollTop
      );
    };

    // Element.prototype.scrollBy
    Element.prototype.scrollBy = function() {
      var arg0 = arguments[0];

      if (typeof arg0 === 'object') {
        this.scroll({
          left: arg0.left + this.scrollLeft,
          top: arg0.top + this.scrollTop,
          behavior: arg0.behavior
        });
      } else {
        this.scroll(
          this.scrollLeft + arg0,
          this.scrollTop + arguments[1]
        );
      }
    };

    // Element.prototype.scrollIntoView
    Element.prototype.scrollIntoView = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollIntoView.call(
          this,
          arguments[0] === undefined ? true : arguments[0]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      var scrollableParent = findScrollableParent(this);
      var parentRects = scrollableParent.getBoundingClientRect();
      var clientRects = this.getBoundingClientRect();

      if (scrollableParent !== d.body) {
        // reveal element inside parent
        smoothScroll.call(
          this,
          scrollableParent,
          scrollableParent.scrollLeft + clientRects.left - parentRects.left,
          scrollableParent.scrollTop + clientRects.top - parentRects.top
        );
        // reveal parent in viewport
        w.scrollBy({
          left: parentRects.left,
          top: parentRects.top,
          behavior: 'smooth'
        });
      } else {
        // reveal element in viewport
        w.scrollBy({
          left: clientRects.left,
          top: clientRects.top,
          behavior: 'smooth'
        });
      }
    };
  }

  if (typeof exports === 'object') {
    // commonjs
    module.exports = { polyfill: polyfill };
  } else {
    // global
    polyfill();
  }
})(window, document);

},{}],437:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],438:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],439:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":438,"_process":432,"inherits":437}],440:[function(require,module,exports){

exports = module.exports = function() {
	var ret = '', value;
	for (var i = 0; i < 32; i++) {
		value = exports.random() * 16 | 0;
		// Insert the hypens
		if (i > 4 && i < 21 && ! (i % 4)) {
			ret += '-';
		}
		// Add the next random character
		ret += (
			(i === 12) ? 4 : (
				(i === 16) ? (value & 3 | 8) : value
			)
		).toString(16);
	}
	return ret;
};

var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;
exports.isUUID = function(uuid) {
	return uuidRegex.test(uuid);
};

exports.random = function() {
	return Math.random();
};


},{}]},{},[11])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
