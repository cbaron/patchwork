(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

module.exports = {
	"caret-down": require('./views/templates/lib/caret-down'),
	"checkmark": require('./views/templates/lib/checkmark'),
	"edit": require('./views/templates/lib/edit'),
	"error": require('./views/templates/lib/error'),
	"ex": require('./views/templates/lib/ex'),
	"garbage": require('./views/templates/lib/garbage'),
	"justify": require('./views/templates/lib/justify'),
	"leftArrow": require('./views/templates/lib/leftArrow')
};

},{"./views/templates/lib/caret-down":185,"./views/templates/lib/checkmark":186,"./views/templates/lib/edit":187,"./views/templates/lib/error":188,"./views/templates/lib/ex":189,"./views/templates/lib/garbage":190,"./views/templates/lib/justify":191,"./views/templates/lib/leftArrow":192}],2:[function(require,module,exports){
'use strict';

module.exports = {
	About: require('./views/templates/About'),
	AddTransaction: require('./views/templates/AddTransaction'),
	AdminHeader: require('./views/templates/AdminHeader'),
	AdminPlus: require('./views/templates/AdminPlus'),
	ButtonFlow: require('./views/templates/ButtonFlow'),
	CollectionManager: require('./views/templates/CollectionManager'),
	Contact: require('./views/templates/Contact'),
	Csa: require('./views/templates/Csa'),
	CsaItem: require('./views/templates/CsaItem'),
	CsaTransaction: require('./views/templates/CsaTransaction'),
	CustomerInfo: require('./views/templates/CustomerInfo'),
	Deleter: require('./views/templates/Deleter'),
	DeliveryDate: require('./views/templates/DeliveryDate'),
	Document: require('./views/templates/Document'),
	Dragger: require('./views/templates/Dragger'),
	EditCsaTransaction: require('./views/templates/EditCsaTransaction'),
	FieldEdit: require('./views/templates/FieldEdit'),
	FoodOmission: require('./views/templates/FoodOmission'),
	Footer: require('./views/templates/Footer'),
	Form: require('./views/templates/Form'),
	GetInvolved: require('./views/templates/GetInvolved'),
	Header: require('./views/templates/Header'),
	Home: require('./views/templates/Home'),
	InfoWindow: require('./views/templates/InfoWindow'),
	List: require('./views/templates/List'),
	Location: require('./views/templates/Location'),
	Locations: require('./views/templates/Locations'),
	ManageCustomer: require('./views/templates/ManageCustomer'),
	MemberInfo: require('./views/templates/MemberInfo'),
	MemberTypeahead: require('./views/templates/MemberTypeahead'),
	Members: require('./views/templates/Members'),
	OrderOptions: require('./views/templates/OrderOptions'),
	Reporting: require('./views/templates/Reporting'),
	Seasons: require('./views/templates/Seasons'),
	ShareBox: require('./views/templates/ShareBox'),
	ShareExample: require('./views/templates/ShareExample'),
	SharePatch: require('./views/templates/SharePatch'),
	StaffProfile: require('./views/templates/StaffProfile'),
	Toast: require('./views/templates/Toast'),
	Transactions: require('./views/templates/Transactions'),
	WeekOptions: require('./views/templates/WeekOptions'),
	deliveryMatrix: require('./views/templates/deliveryMatrix')
};

},{"./views/templates/About":143,"./views/templates/AddTransaction":144,"./views/templates/AdminHeader":145,"./views/templates/AdminPlus":146,"./views/templates/ButtonFlow":147,"./views/templates/CollectionManager":148,"./views/templates/Contact":149,"./views/templates/Csa":150,"./views/templates/CsaItem":151,"./views/templates/CsaTransaction":152,"./views/templates/CustomerInfo":153,"./views/templates/Deleter":154,"./views/templates/DeliveryDate":155,"./views/templates/Document":156,"./views/templates/Dragger":157,"./views/templates/EditCsaTransaction":158,"./views/templates/FieldEdit":159,"./views/templates/FoodOmission":160,"./views/templates/Footer":161,"./views/templates/Form":162,"./views/templates/GetInvolved":163,"./views/templates/Header":164,"./views/templates/Home":165,"./views/templates/InfoWindow":166,"./views/templates/List":167,"./views/templates/Location":168,"./views/templates/Locations":169,"./views/templates/ManageCustomer":170,"./views/templates/MemberInfo":171,"./views/templates/MemberTypeahead":172,"./views/templates/Members":173,"./views/templates/OrderOptions":174,"./views/templates/Reporting":175,"./views/templates/Seasons":176,"./views/templates/ShareBox":177,"./views/templates/ShareExample":178,"./views/templates/SharePatch":179,"./views/templates/StaffProfile":180,"./views/templates/Toast":181,"./views/templates/Transactions":182,"./views/templates/WeekOptions":183,"./views/templates/deliveryMatrix":184}],3:[function(require,module,exports){
'use strict';

module.exports = {
	About: require('./views/About'),
	AddTransaction: require('./views/AddTransaction'),
	Admin: require('./views/Admin'),
	AdminHeader: require('./views/AdminHeader'),
	AdminPlus: require('./views/AdminPlus'),
	ButtonFlow: require('./views/ButtonFlow'),
	CollectionManager: require('./views/CollectionManager'),
	Contact: require('./views/Contact'),
	Csa: require('./views/Csa'),
	CustomerInfo: require('./views/CustomerInfo'),
	Deleter: require('./views/Deleter'),
	Dragger: require('./views/Dragger'),
	FoodOmission: require('./views/FoodOmission'),
	Footer: require('./views/Footer'),
	Form: require('./views/Form'),
	GetInvolved: require('./views/GetInvolved'),
	Header: require('./views/Header'),
	Home: require('./views/Home'),
	InstanceRow: require('./views/InstanceRow'),
	List: require('./views/List'),
	Locations: require('./views/Locations'),
	ManageCustomer: require('./views/ManageCustomer'),
	MemberTypeahead: require('./views/MemberTypeahead'),
	Members: require('./views/Members'),
	MyView: require('./views/MyView'),
	OrderOptions: require('./views/OrderOptions'),
	Reporting: require('./views/Reporting'),
	Resource: require('./views/Resource'),
	ResourceRow: require('./views/ResourceRow'),
	Seasons: require('./views/Seasons'),
	ShareBox: require('./views/ShareBox'),
	SharePatch: require('./views/SharePatch'),
	Signup: require('./views/Signup'),
	Submitter: require('./views/Submitter'),
	Toast: require('./views/Toast'),
	Transactions: require('./views/Transactions'),
	WeekOptions: require('./views/WeekOptions'),
	modal: require('./views/modal')
};

},{"./views/About":85,"./views/AddTransaction":86,"./views/Admin":87,"./views/AdminHeader":88,"./views/AdminPlus":89,"./views/ButtonFlow":90,"./views/CollectionManager":91,"./views/Contact":92,"./views/Csa":93,"./views/CustomerInfo":94,"./views/Deleter":95,"./views/Dragger":96,"./views/FoodOmission":97,"./views/Footer":98,"./views/Form":99,"./views/GetInvolved":100,"./views/Header":101,"./views/Home":102,"./views/InstanceRow":103,"./views/List":104,"./views/Locations":105,"./views/ManageCustomer":107,"./views/MemberTypeahead":108,"./views/Members":109,"./views/MyView":110,"./views/OrderOptions":111,"./views/Reporting":112,"./views/Resource":113,"./views/ResourceRow":114,"./views/Seasons":115,"./views/ShareBox":116,"./views/SharePatch":117,"./views/Signup":118,"./views/Submitter":119,"./views/Toast":120,"./views/Transactions":121,"./views/WeekOptions":122,"./views/modal":125}],4:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// JavaScript autoComplete v1.0.4
// https://github.com/Pixabay/JavaScript-autoComplete
var autoComplete = function () {
  function e(e) {
    function t(e, t) {
      return e.classList ? e.classList.contains(t) : new RegExp("\\b" + t + "\\b").test(e.className);
    }function o(e, t, o) {
      e.attachEvent ? e.attachEvent("on" + t, o) : e.addEventListener(t, o);
    }function s(e, t, o) {
      e.detachEvent ? e.detachEvent("on" + t, o) : e.removeEventListener(t, o);
    }function n(e, s, n, l) {
      o(l || document, s, function (o) {
        for (var s, l = o.target || o.srcElement; l && !(s = t(l, e));) {
          l = l.parentElement;
        }s && n.call(l, o);
      });
    }if (document.querySelector) {
      var l = { selector: 0, source: 0, minChars: 3, delay: 150, offsetLeft: 0, offsetTop: 1, cache: 1, menuClass: "", renderItem: function renderItem(e, t) {
          t = t.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");var o = new RegExp("(" + t.split(" ").join("|") + ")", "gi");return '<div class="autocomplete-suggestion" data-val="' + e + '">' + e.replace(o, "<b>$1</b>") + "</div>";
        }, onSelect: function onSelect() {} };for (var c in e) {
        e.hasOwnProperty(c) && (l[c] = e[c]);
      }for (var a = "object" == _typeof(l.selector) ? [l.selector] : document.querySelectorAll(l.selector), u = 0; u < a.length; u++) {
        var i = a[u];i.sc = document.createElement("div"), i.sc.className = "autocomplete-suggestions " + l.menuClass, i.autocompleteAttr = i.getAttribute("autocomplete"), i.setAttribute("autocomplete", "off"), i.cache = {}, i.last_val = "", i.updateSC = function (e, t) {
          var o = i.getBoundingClientRect();if (i.sc.style.left = Math.round(o.left + (window.pageXOffset || document.documentElement.scrollLeft) + l.offsetLeft) + "px", i.sc.style.top = Math.round(o.bottom + (window.pageYOffset || document.documentElement.scrollTop) + l.offsetTop) + "px", i.sc.style.width = Math.round(o.right - o.left) + "px", !e && (i.sc.style.display = "block", i.sc.maxHeight || (i.sc.maxHeight = parseInt((window.getComputedStyle ? getComputedStyle(i.sc, null) : i.sc.currentStyle).maxHeight)), i.sc.suggestionHeight || (i.sc.suggestionHeight = i.sc.querySelector(".autocomplete-suggestion").offsetHeight), i.sc.suggestionHeight)) if (t) {
            var s = i.sc.scrollTop,
                n = t.getBoundingClientRect().top - i.sc.getBoundingClientRect().top;n + i.sc.suggestionHeight - i.sc.maxHeight > 0 ? i.sc.scrollTop = n + i.sc.suggestionHeight + s - i.sc.maxHeight : 0 > n && (i.sc.scrollTop = n + s);
          } else i.sc.scrollTop = 0;
        }, o(window, "resize", i.updateSC), document.body.appendChild(i.sc), n("autocomplete-suggestion", "mouseleave", function () {
          var e = i.sc.querySelector(".autocomplete-suggestion.selected");e && setTimeout(function () {
            e.className = e.className.replace("selected", "");
          }, 20);
        }, i.sc), n("autocomplete-suggestion", "mouseover", function () {
          var e = i.sc.querySelector(".autocomplete-suggestion.selected");e && (e.className = e.className.replace("selected", "")), this.className += " selected";
        }, i.sc), n("autocomplete-suggestion", "mousedown", function (e) {
          if (t(this, "autocomplete-suggestion")) {
            var o = this.getAttribute("data-val");i.value = o, l.onSelect(e, o, this), i.sc.style.display = "none";
          }
        }, i.sc), i.blurHandler = function () {
          try {
            var e = document.querySelector(".autocomplete-suggestions:hover");
          } catch (t) {
            var e = 0;
          }e ? i !== document.activeElement && setTimeout(function () {
            i.focus();
          }, 20) : (i.last_val = i.value, i.sc.style.display = "none", setTimeout(function () {
            i.sc.style.display = "none";
          }, 350));
        }, o(i, "blur", i.blurHandler);var r = function r(e) {
          var t = i.value;if (i.cache[t] = e, e.length && t.length >= l.minChars) {
            for (var o = "", s = 0; s < e.length; s++) {
              o += l.renderItem(e[s], t);
            }i.sc.innerHTML = o, i.updateSC(0);
          } else i.sc.style.display = "none";
        };i.keydownHandler = function (e) {
          var t = window.event ? e.keyCode : e.which;if ((40 == t || 38 == t) && i.sc.innerHTML) {
            var o,
                s = i.sc.querySelector(".autocomplete-suggestion.selected");return s ? (o = 40 == t ? s.nextSibling : s.previousSibling, o ? (s.className = s.className.replace("selected", ""), o.className += " selected", i.value = o.getAttribute("data-val")) : (s.className = s.className.replace("selected", ""), i.value = i.last_val, o = 0)) : (o = 40 == t ? i.sc.querySelector(".autocomplete-suggestion") : i.sc.childNodes[i.sc.childNodes.length - 1], o.className += " selected", i.value = o.getAttribute("data-val")), i.updateSC(0, o), !1;
          }if (27 == t) i.value = i.last_val, i.sc.style.display = "none";else if (13 == t || 9 == t) {
            var s = i.sc.querySelector(".autocomplete-suggestion.selected");s && "none" != i.sc.style.display && (l.onSelect(e, s.getAttribute("data-val"), s), setTimeout(function () {
              i.sc.style.display = "none";
            }, 20));
          }
        }, o(i, "keydown", i.keydownHandler), i.keyupHandler = function (e) {
          var t = window.event ? e.keyCode : e.which;if (!t || (35 > t || t > 40) && 13 != t && 27 != t) {
            var o = i.value;if (o.length >= l.minChars) {
              if (o != i.last_val) {
                if (i.last_val = o, clearTimeout(i.timer), l.cache) {
                  if (o in i.cache) return void r(i.cache[o]);for (var s = 1; s < o.length - l.minChars; s++) {
                    var n = o.slice(0, o.length - s);if (n in i.cache && !i.cache[n].length) return void r([]);
                  }
                }i.timer = setTimeout(function () {
                  l.source(o, r);
                }, l.delay);
              }
            } else i.last_val = o, i.sc.style.display = "none";
          }
        }, o(i, "keyup", i.keyupHandler), i.focusHandler = function (e) {
          i.last_val = "\n", i.keyupHandler(e);
        }, l.minChars || o(i, "focus", i.focusHandler);
      }this.destroy = function () {
        for (var e = 0; e < a.length; e++) {
          var t = a[e];s(window, "resize", t.updateSC), s(t, "blur", t.blurHandler), s(t, "focus", t.focusHandler), s(t, "keydown", t.keydownHandler), s(t, "keyup", t.keyupHandler), t.autocompleteAttr ? t.setAttribute("autocomplete", t.autocompleteAttr) : t.removeAttribute("autocomplete"), document.body.removeChild(t.sc), t = null;
        }
      };
    }
  }return e;
}();!function () {
  "function" == typeof define && define.amd ? define("autoComplete", function () {
    return autoComplete;
  }) : "undefined" != typeof module && module.exports ? module.exports = autoComplete : window.autoComplete = autoComplete;
}();

},{}],5:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = {

    Currency: new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2
    }),

    GetFormField: function GetFormField(datum, value) {
        var icon = datum.metadata ? datum.metadata.icon ? this.Icons[datum.metadata.icon] : '' : '';

        var options = datum.metadata ? datum.metadata.options : false;

        value = value === undefined ? '' : value;

        if (options) {
            if (typeof options === 'function') {
                options();return this.GetSelect(datum, [], icon);
            } else if (Array.isArray(options)) return this.GetSelect(datum, options, icon);
        }

        var label = datum.fk || datum.label ? '<label>' + (datum.fk || datum.label) + '</label>' : '';

        var image = datum.range === 'ImageUrl' ? '<div><button class="btn-yellow" data-js="previewBtn" type="button">Preview</button><img data-src="' + this.ImageSrc(value) + '" /></div>' : '';

        var input = datum.fk ? '<div data-view="typeAhead" data-name="' + datum.fk + '"></div>' : datum.range === 'Text' ? '<textarea data-js="' + datum.name + '" rows="3">' + value + '</textarea>' : datum.range === 'List' || _typeof(datum.range) === 'object' ? '<div data-js="' + datum.name + '" data-name="' + datum.name + '"></div>' : '<input type="' + this.RangeToInputType[datum.range] + '" data-js="' + datum.name + '" placeholder="' + (datum.label || '') + '" value="' + value + '" />';

        return '' + ('<div class="form-group ' + (image ? 'has-image' : '') + '">\n            ' + label + '\n            ' + input + '\n            ' + image + '\n            ' + icon + '\n        </div>');
    },
    GetFormFields: function GetFormFields(data) {
        var _this = this;

        var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!data) return '';

        return data.map(function (datum) {
            return _this.GetFormField(datum, model && model[datum.name]);
        }).join('');
    },
    GetIcon: function GetIcon(name, opts) {
        return Reflect.apply(this.Icons[name], this, [opts]);
    },
    GetListItems: function GetListItems() {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return items.map(function (item) {
            var attr = opts.dataAttr ? 'data-' + opts.dataAttr + '="' + item[opts.dataAttr] + '"' : '';
            return '<li ' + attr + '>' + (item.label || item) + '</li>';
        }).join('');
    },
    GetSelect: function GetSelect(datum, optionsData, icon) {
        var options = optionsData.length ? this.GetSelectOptions(optionsData, { valueAttr: 'name' }) : '';

        return '' + ('<div class="form-group">\n            <select data-js="' + datum.name + '">\n                <option selected value>' + datum.label + '</option>\n                ' + options + '\n            </select>\n            ' + icon + '\n        </div>');
    },
    GetSelectOptions: function GetSelectOptions() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { valueAttr: 'value' };

        return options.map(function (option) {
            return '<option value="' + option[opts.valueAttr] + '">' + option.label + '</option>';
        }).join('');
    },


    Icons: require('./.IconMap'),

    IconDataJs: function IconDataJs(p) {
        return p.name ? 'data-js="' + p.name + '"' : '';
    },
    ImageSrc: function ImageSrc(name) {
        return 'https://storage.googleapis.com/double-quill-3243/' + name;
    },
    ParseTextLinks: function ParseTextLinks(text) {
        var start = text.indexOf('{{'),
            end = void 0,
            rest = void 0,
            target = void 0,
            key = void 0,
            value = void 0,
            replacement = void 0;

        if (start === -1) return text;

        rest = text.slice(start);
        target = rest.slice(0, rest.indexOf('}') + 2);
        key = target.slice(2, target.indexOf(':'));
        value = target.slice(target.indexOf(':') + 1, target.indexOf('}'));

        replacement = /email/i.test(target) ? '<a href="mailto:' + value + '" class="link">' + key + '</a>' : /http/.test(value) ? '<a target="_blank" href="' + value + '" class="link">' + key + '</a>' : '<span data-js="link" data-name="' + value + '" class="link">' + key + '</span>';

        return this.ParseTextLinks(text.replace(target, replacement));
    },
    Range: function Range(int) {
        return Array.from(Array(int).keys());
    },


    RangeToInputType: {
        Email: 'email',
        ImageUrl: 'text',
        Password: 'password',
        String: 'text'
    }

};

},{"./.IconMap":1}],6:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyError = function MyError(err) {
    return this.handle(err);
};

_extends(MyError.prototype, {

    handle: function handle(err) {
        console.log(err.stack || err);
    }

});

module.exports = MyError;

},{}],7:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('../../lib/MyObject'), {

    Request: {
        constructor: function constructor(data) {
            var _this = this;

            var req = new XMLHttpRequest();

            return new Promise(function (resolve, reject) {

                req.onload = function () {
                    [500, 404, 401].includes(this.status) ? reject(this.response) : resolve(JSON.parse(this.response));
                };
                if (data.method === "get" || data.method === "options") {
                    var qs = data.qs ? "?" + data.qs : '';
                    req.open(data.method, "/" + data.resource + qs);
                    _this.setHeaders(req, data.headers);
                    req.send(null);
                } else {
                    var path = "/" + data.resource + (data.id ? "/" + data.id : '');
                    req.open(data.method.toUpperCase(), path, true);
                    _this.setHeaders(req, data.headers);
                    req.send(data.data || null);
                }
            });
        },
        plainEscape: function plainEscape(sText) {
            /* how should I treat a text/plain form encoding? what characters are not allowed? this is what I suppose...: */
            /* "4\3\7 - Einstein said E=mc2" ----> "4\\3\\7\ -\ Einstein\ said\ E\=mc2" */
            return sText.replace(/[\s\=\\]/g, "\\$&");
        },
        setHeaders: function setHeaders(req) {
            var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            req.setRequestHeader("Accept", headers.accept || 'application/json');
            req.setRequestHeader("Content-Type", headers.contentType || 'text/plain');
            Object.keys(headers).forEach(function (key) {
                return req.setRequestHeader(key, headers[key]);
            });
        }
    },

    _factory: function _factory(data) {
        return Object.create(this.Request, {}).constructor(data);
    },
    constructor: function constructor() {

        if (!XMLHttpRequest.prototype.sendAsBinary) {
            XMLHttpRequest.prototype.sendAsBinary = function (sData) {
                var nBytes = sData.length,
                    ui8Data = new Uint8Array(nBytes);
                for (var nIdx = 0; nIdx < nBytes; nIdx++) {
                    ui8Data[nIdx] = sData.charCodeAt(nIdx) & 0xff;
                }
                this.send(ui8Data);
            };
        }

        return this._factory.bind(this);
    }
}), {}).constructor();

},{"../../lib/MyObject":200}],8:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create({
    create: function create(rawName, opts) {
        var name = this._processName(rawName);

        return Object.create(this.Views[name], _extends({
            Dragger: { value: this.Dragger },
            Header: { value: this.Header },
            Toast: { value: this.Toast },
            documentName: { value: rawName },
            name: { value: name },
            factory: { value: this },
            range: { value: this.range },
            template: { value: this.Templates[name] },
            user: { value: this.User }
        })).constructor(opts);
    },
    _processName: function _processName(name) {
        var hyphen = name.indexOf('-');
        if (hyphen !== -1) return name.charAt(0).toUpperCase() + name.slice(1, hyphen) + name.charAt(hyphen + 1).toUpperCase() + name.slice(hyphen + 2);

        return name.charAt(0).toUpperCase() + name.slice(1);
    }
}, {
    Dragger: { value: require('../views/Dragger') },
    Header: { value: require('../views/Header') },
    Templates: { value: require('../.TemplateMap') },
    Toast: { value: require('../views/Toast') },
    User: { value: require('../models/User') },
    Views: { value: require('../.ViewMap') }
});

},{"../.TemplateMap":2,"../.ViewMap":3,"../models/User":41,"../views/Dragger":96,"../views/Header":101,"../views/Toast":120}],9:[function(require,module,exports){
'use strict';

var $ = require('jquery');

require('./polyfill');

window.$ = window.jQuery = $;
window.initGMap = function () {
    return true;
};

require('bootstrap');
require('./plugins/bootstrap-datetimepicker');

window.onload = function () {
    require('./router').initialize();
    require('./views/modal');
};

},{"./plugins/bootstrap-datetimepicker":43,"./polyfill":45,"./router":46,"./views/modal":125,"bootstrap":202,"jquery":"jquery"}],10:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    attributes: [{
        name: 'name',
        label: 'Name',
        range: 'String',
        error: 'Please enter a name with no spaces.',
        validate: function validate(val) {
            return val.trim() !== '' && !/\s/.test(val);
        },
        metadata: {}
    }],

    meta: {
        key: 'name'
    },

    resource: 'Collection'
});

},{"./__proto__":42}],11:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('./__proto__'), {

    data: {
        currentCollection: 'Pages',
        currentView: ''
    }

}));

},{"./__proto__":42}],12:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('./__proto__'), {

    parse: function parse(response) {
        return response[0];
    }

}), { resource: { value: 'contactinfo' } });

},{"./__proto__":42}],13:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    dayOfWeekMap: require('./DayOfWeek'),

    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            return _extends(row, {
                dayOfWeek: _this.dayOfWeekMap[row.dayofweek],
                starttime: _this.moment([_this.moment().format('YYYY-MM-DD'), row.starttime].join(' ')).format('h:mmA'),
                endtime: _this.moment([_this.moment().format('YYYY-MM-DD'), row.endtime].join(' ')).format('h:mmA')
            });
        });
    },


    resource: "deliveryroute"

});

},{"./DayOfWeek":17,"./__proto__":42}],14:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    actions: ['Adjustment', 'Payment', 'Reimbursement', 'Season Signup'],

    attributes: ['action', 'value', 'checkNumber', 'created', 'description'],

    getBalance: function getBalance() {
        return this.data.reduce(function (memo, datum) {
            if (datum.action === 'Payment') memo -= datum.value;else memo += datum.value;
            return memo;
        }, 0);
    },
    isNegative: function isNegative(row) {
        if (row.action === 'Payment') return true;

        if (row.action === 'Adjustment' && row.value < 0) return true;
    },
    parse: function parse(response) {
        var _this = this;

        response = response.map(function (row) {
            return _this.parseOne(row);
        });

        if (this.sortAttr) response.sort(function (a, b) {
            return a[_this.sortAttr] > b[_this.sortAttr];
        });

        return response;
    },
    parseOne: function parseOne(datum) {
        return _extends(datum, { isNegative: this.isNegative(datum) }, { created: _typeof(datum.created) === 'object' ? datum.created.raw : datum.created });
    },


    resource: 'csaTransaction',

    sortAttr: 'created'

});

},{"./__proto__":42}],15:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    ShareGroupDropoffs: require('./ShareGroupDropoff'),

    getCurrentGroupDropoffs: function getCurrentGroupDropoffs() {
        var _this = this;

        return this.ShareGroupDropoffs.get({ query: {
                shareid: this.data.id,
                groupdropoffid: { operation: 'join', value: { table: 'groupdropoff', column: 'id' } }
            } }).then(function () {
            return Promise.resolve(_this.ShareGroupDropoffs.data.map(function (datum) {
                return _extends({
                    name: datum['groupdropoff.name'],
                    venue: datum['groupdropoff.venue'],
                    street: datum['groupdropoff.street'],
                    cityStateZip: datum['groupdropoff.cityStateZip'],
                    location: datum.location,
                    hours: datum.dayofweek + ' ' + datum.starttime + ' - ' + datum.endtime
                });
            }));
        });
    },
    getSizeOptions: function getSizeOptions() {
        return this.data.produceOptions.filter(function (option) {
            return (/size/i.test(option.prompt)
            );
        });
    },


    resource: 'currentShare'

});

},{"./ShareGroupDropoff":39,"./__proto__":42}],16:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Member: require('./Member'),
    Person: require('./Person'),

    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.');
                memo[key.slice(0, index)].data[key.slice(index + 1)] = row[key];
                return memo;
            }, { member: Object.create(_this.Member, { data: { value: {} } }),
                person: Object.create(_this.Person, { data: { value: {} } })
            });
        });
    },


    resource: 'person'

});

},{"./Member":28,"./Person":34,"./__proto__":42}],17:[function(require,module,exports){
'use strict';

module.exports = {
    0: 'Sunday',
    1: 'Monday',
    2: 'Tuesday',
    3: 'Wednesday',
    4: 'Thursday',
    5: 'Friday',
    6: 'Saturday'
};

},{}],18:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (!memo[table]) memo[table] = {};
                memo[table][key.slice(index + 1)] = row[key];
                return memo;
            }, {});
        });
    },


    resource: 'membersharedelivery'

});

},{"./__proto__":42}],19:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = require('backbone').Model.extend(_extends({}, require('../../../lib/MyObject').prototype, {
    parse: function parse(moment) {
        return {
            id: moment.dayOfYear(),
            date: moment.format('YYYY-MM-DD'),
            dayOfWeek: moment.format('ddd'),
            dayOfMonth: moment.format('D'),
            epoch: moment.unix(),
            month: moment.format('MMM'),
            monthNum: moment.format('M')
        };
    }
}));

},{"../../../lib/MyObject":200,"backbone":"backbone"}],20:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = require('backbone').Model.extend(_extends({}, require('../../../lib/MyObject').prototype, {

    dayOfWeekMap: require('./DayOfWeek'),

    parse: function parse(response) {
        return _extends(response, {

            dayOfWeek: this.dayOfWeekMap[response.dayofweek],
            starttime: this.moment([this.moment().format('YYYY-MM-DD'), response.starttime].join(' ')).format('h:mmA'),
            endtime: this.moment([this.moment().format('YYYY-MM-DD'), response.endtime].join(' ')).format('h:mmA')
        });
    },


    urlRoot: "/deliveryroute"
}));

},{"../../../lib/MyObject":200,"./DayOfWeek":17,"backbone":"backbone"}],21:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {

    attributes: {},

    data: {},

    meta: {
        key: '_id'
    },

    toList: function toList(document) {
        document = document || this.data;
        return Object.keys(document).sort().map(function (key) {
            return { key: key, value: document[key] };
        });
    },
    toObj: function toObj() {
        this.data = this.reducer(this.data, function (datum) {
            return _defineProperty({}, datum.key, datum.value);
        });
        return this;
    }
});

},{"./__proto__":42}],22:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = require('backbone').Model.extend(_extends({}, require('../../../lib/MyObject').prototype, {

    dayOfWeekMap: require('./DeliveryRoute').prototype.dayOfWeekMap,

    initialize: function initialize() {
        var _this = this;

        this.on('change:dayofweek', function () {
            return _this.updateReadableDay();
        });
    },
    updateReadableDay: function updateReadableDay() {
        this.set({ dayOfWeek: this.dayOfWeekMap[this.get('dayofweek')] });
    }
}));

},{"../../../lib/MyObject":200,"./DeliveryRoute":20,"backbone":"backbone"}],23:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    CsaDelivery: require('./CsaDelivery'),

    getHours: function getHours() {
        var _this = this;

        return this.CsaDelivery.get({ query: { label: 'farm' } }).then(function () {
            var farmPickup = _this.CsaDelivery.data[0];
            _this.data[0].hours = farmPickup.dayOfWeek + ' ' + farmPickup.starttime + ' - ' + farmPickup.endtime;
            return Promise.resolve();
        });
    },
    parse: function parse(response) {
        return response.map(function (row) {
            return _extends({
                name: 'Pick-up from our farm!',
                street: row.farmpickup.split(',')[0],
                cityStateZip: row.cityStateZip,
                location: JSON.parse(row.location).coordinates
            });
        });
    },


    resource: 'contactinfo'

});

},{"./CsaDelivery":13,"./__proto__":42}],24:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return row.location ? _extends(row, { location: JSON.parse(row.location).coordinates }) : row;
        });
    },


    resource: 'farmermarket'

});

},{"./__proto__":42}],25:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'food'

});

},{"./__proto__":42}],26:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = require('backbone').Model.extend({

    Moment: require('moment'),

    DayOfWeekHash: {
        0: 'Sunday',
        1: 'Monday',
        2: 'Tuesday',
        3: 'Wednesday',
        4: 'Thursday',
        5: 'Friday',
        6: 'Saturday'
    },

    parse: function parse(response) {
        var _this = this;

        Object.keys(response).forEach(function (key) {
            var isObject = _typeof(response[key]) === 'object' ? true : false;

            if (response[key] === null || isObject && response[key].raw === null) return;

            if (isObject && response[key].type === 'datetime') {
                response[key].value = _this.Moment(response[key].raw).format('dddd, MMMM Do YYYY, h:mm:ss a');
            }

            if (isObject && response[key].type === 'date') {
                response[key].value = _this.Moment(response[key].raw).format('dddd, MMMM Do YYYY');
            }

            if (isObject && response[key].type === 'time') {
                response[key].value = _this.Moment([_this.Moment().format('YYYY-MM-DD'), response[key].raw].join(' ')).format('h:mmA');
            }

            if (key === 'dayofweek') {
                response[key] = { raw: response[key], value: _this.DayOfWeekHash[response[key]] };
            }
        });

        return response;
    }
});

},{"backbone":"backbone","moment":"moment"}],27:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    attributes: [{ name: 'farmerMarket', el: 'farmerMarketsList', label: "Farmer's Market", color: '#ed1c24' }, { name: 'retailOutlet', el: 'retailOutletsList', label: 'Retail Outlet', color: '#ffdd14' }, { name: 'restaurant', el: 'restaurantsList', label: 'Restaurant', color: '#231f20' }, { name: 'groupLocation', el: 'groupLocationsList', label: 'Group Location', color: '#f8941e' }, { name: 'deliveryRange', label: 'Delivery Range', color: '#ed1c24' }, { name: 'farmPickup', el: 'groupLocationsList', label: 'Patchwork Gardens' }],

    data: {
        deliveryRangeCoords: [{ lat: 39.871435, lng: -84.367880 }, { lat: 39.901132, lng: -84.097279 }, { lat: 39.926834, lng: -83.806420 }, { lat: 39.813106, lng: -83.815755 }, { lat: 39.726784, lng: -83.788941 }, { lat: 39.615032, lng: -84.008702 }, { lat: 39.526260, lng: -84.088909 }, { lat: 39.542528, lng: -84.293660 }, { lat: 39.601278, lng: -84.369877 }]
    }

});

},{"./__proto__":42}],28:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'member'

});

},{"./__proto__":42}],29:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'memberfoodomission'

});

},{"./__proto__":42}],30:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            var startDate = _this.moment(row['share.startdate']),
                endDate = _this.moment(row['share.enddate']);

            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);

                if (table !== 'share') return memo;

                return _extends(memo, _defineProperty({}, key.slice(index + 1), row[key]), {
                    duration: Math.ceil(endDate.diff(startDate, 'days') / 7),
                    humanEnddate: endDate.format("MMM D"),
                    humanStartdate: startDate.format("MMM D")
                });
            }, { membershareid: row['membershare.id'] });
        });
    },


    resource: 'membershare'
});

},{"./__proto__":42}],31:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (table !== 'shareoptionoption') return memo;

                return _extends(memo, _defineProperty({}, key.slice(index + 1), row[key]));
            }, { shareoptionid: row['membershareoption.shareoptionid'], membershareoptionid: row['membershareoption.id'] });
        });
    },


    resource: 'membershareoption'
});

},{"./__proto__":42}],32:[function(require,module,exports){
'use strict';

module.exports = {
    data: [{ label: 'About', name: 'about' }, { label: 'CSA Program', name: 'csa' }, { label: 'Locations', name: 'locations' }, { label: 'Sign Up', name: 'sign-up' }, { label: 'Get Involved', name: 'get-involved' }, { label: 'Contact', name: 'contact' }]
};

},{}],33:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return Object.keys(row).reduce(function (memo, key) {
                var index = key.indexOf('.'),
                    table = key.slice(0, index);
                if (table !== 'shareoption') return memo;

                return _extends(memo, _defineProperty({}, key.slice(index + 1), row[key]));
            }, {});
        });
    },


    resource: 'shareoptionshare'
});

},{"./__proto__":42}],34:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'person'

});

},{"./__proto__":42}],35:[function(require,module,exports){
"use strict";

module.exports = require('backbone').Model.extend({ idAttribute: "@id" });

},{"backbone":"backbone"}],36:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return row.location ? _extends(row, { location: JSON.parse(row.location).coordinates }) : row;
        });
    },


    resource: 'restaurant'

});

},{"./__proto__":42}],37:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    parse: function parse(response) {
        return response.map(function (row) {
            return row.location ? _extends(row, { location: JSON.parse(row.location).coordinates }) : row;
        });
    },


    resource: 'retailoutlet'

});

},{"./__proto__":42}],38:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = require('backbone').Model.extend(_extends({}, require('../../../lib/MyObject').prototype, {

    Collection: require('backbone').Collection,

    DeliveryDate: require('./DeliveryDate'),

    Dropoff: require('./Dropoff'),

    dayOfWeekMap: require('./DeliveryRoute').prototype.dayOfWeekMap,

    determineNextDeliveryCutoff: function determineNextDeliveryCutoff(dayOfWeek) {
        var nextDeliveryDay = dayOfWeek > 4 ? 15 : 8;
        return this.moment().day(nextDeliveryDay).hour(0).minute(0).second(0).millisecond(0);
    },
    getDeliveryDates: function getDeliveryDates() {
        var dates = [],
            now = this.moment(),
            deliveryDay = this.get('selectedDelivery').dayofweek,
            deliveryDate = this.moment(this.get('startdate')),
            endDate = this.moment(this.get('enddate')),
            nextDeliveryCutoff = this.determineNextDeliveryCutoff(now.day()),
            startDay = startDay = deliveryDate.day();

        if (!Number.isInteger(deliveryDay)) return new this.Collection([]);

        while (startDay != deliveryDay) {
            deliveryDate.add(1, 'days');
            startDay = this.moment(deliveryDate).day();
        }

        while (endDate.diff(deliveryDate, 'days') >= 0) {
            var model = new this.DeliveryDate(deliveryDate, { parse: true });
            if (deliveryDate.diff(nextDeliveryCutoff) < 0) model.set({ unselectable: true });
            dates.push(model);
            deliveryDate.add(7, 'days');
        }

        this.set({ deliveryDates: new this.Collection(dates) });

        return this.get('deliveryDates');
    },
    getDeliveryOptions: function getDeliveryOptions() {
        var _this = this;

        if (this.has('deliveryoptions')) return this.Q(this.get('deliveryoptions'));

        return this.Q(new (this.Collection.extend({ url: "/sharedeliveryoption" }))().fetch({ data: { shareid: this.id } })).then(function (mappings) {
            var deliveryOptions = new (_this.Collection.extend({ url: "/deliveryoption" }))();

            _this.set({ deliveryoptions: deliveryOptions });

            if (mappings.length === 0) return _this.Q();

            return _this.Q(deliveryOptions.fetch({ data: { id: mappings.map(function (record) {
                        return record.deliveryoptionid;
                    }).join(',') } }));
        }).fail(function (e) {
            return console.log("Getting Delivery Options : " + e.stack || e);
        });
    },
    getGroupDropoffs: function getGroupDropoffs() {
        var _this2 = this;

        var mappings = new (this.Collection.extend({ url: "/sharegroupdropoff" }))();

        if (this.has('groupdropoffs')) return this.Q(this.get('groupdropoffs'));

        return this.Q(mappings.fetch({ data: { shareid: this.id } })).then(function () {
            var groupDropoffs;

            if (mappings.length === 0) return;

            groupDropoffs = new (_this2.Collection.extend({ model: _this2.Dropoff, url: "/groupdropoff" }))();
            _this2.set({ groupdropoffs: groupDropoffs });

            return _this2.Q(groupDropoffs.fetch({ data: { id: mappings.map(function (record) {
                        return record.get('groupdropoffid');
                    }).join(',') } }));
        }).then(function () {

            if (mappings.length === 0) return _this2.set('groupdropoffs', []);

            _this2.get('groupdropoffs').forEach(function (dropoff) {
                var mapping = mappings.find(function (model) {
                    return model.get('groupdropoffid') == dropoff.id;
                });

                dropoff.set({
                    dayofweek: mapping.get('dayofweek'),
                    starttime: _this2.timeToHumanTime(mapping.get('starttime')),
                    endtime: _this2.timeToHumanTime(mapping.get('endtime'))
                });
            });
        }).fail(function (e) {
            return console.log("Getting Group Dropoffs : " + e.stack || e);
        });
    },
    getSelectedDates: function getSelectedDates() {
        var _this3 = this;

        this.set({ selectedDates: this._(this.get('deliveryDates').reject(function (deliveryDay) {
                return deliveryDay.get('unselectable');
            })).reject(function (deliveryDay) {
                return _this3._(_this3.get('skipDays')).contains(deliveryDay.id);
            })
        });
    },
    getShareOptions: function getShareOptions() {
        var _this4 = this;

        if (this.has('shareoptions')) return this.Q(this.get('shareoptions'));

        return this.Q(new (this.Collection.extend({ url: "/shareoptionshare" }))().fetch({ data: { shareid: this.id } })).then(function (mappings) {
            var shareOptions;

            if (mappings.length === 0) return;

            shareOptions = new (_this4.Collection.extend({ url: "/shareoption" }))();
            _this4.set({ shareoptions: shareOptions });

            return _this4.Q(shareOptions.fetch({ data: { id: mappings.map(function (record) {
                        return record.shareoptionid;
                    }).join(',') } }));
        }).then(function () {
            return _this4.Q.all(_this4.get('shareoptions').map(function (shareOption) {
                shareOption.set({ options: new (_this4.Collection.extend({ comparator: _this4.shareOptionOptionComparator, url: "/shareoptionoption" }))() });
                return _this4.Q(shareOption.get('options').fetch({ data: { shareoptionid: shareOption.id } }));
            }));
        }).then(function () {
            _this4.get('shareoptions').comparator = _this4.shareOptionComparator;
            _this4.get('shareoptions').sort();
        }).fail(function (e) {
            return console.log("Getting Share Options : " + e.stack || e);
        });
    },
    moneyToFloat: function moneyToFloat(money) {
        return parseFloat(money.replace(/\$|,/g, ""));
    },
    parse: function parse(response) {
        var startDate = this.moment(response.startdate),
            endDate = this.moment(response.enddate);

        return _extends(response, {
            duration: Math.ceil(endDate.diff(startDate, 'days') / 7),
            humanEnddate: endDate.format("MMM D"),
            humanStartdate: startDate.format("MMM D"),
            startEpoch: startDate.unix()
        });
    },
    shareOptionComparator: function shareOptionComparator(a, b) {
        var moneyToFloat = function moneyToFloat(money) {
            return parseFloat(money.replace(/\$|,/g, ""));
        },
            aVal = moneyToFloat(a.get('options').at(a.get('options').length - 1).get('price')),
            bVal = moneyToFloat(b.get('options').at(b.get('options').length - 1).get('price'));

        return aVal > bVal ? -1 : bVal > aVal ? 1 : 0;
    },
    shareOptionOptionComparator: function shareOptionOptionComparator(a, b) {
        var moneyToFloat = function moneyToFloat(money) {
            return parseFloat(money.replace(/\$|,/g, ""));
        },
            aVal = moneyToFloat(a.get('price')),
            bVal = moneyToFloat(b.get('price'));

        return aVal > bVal ? 1 : bVal > aVal ? -1 : 0;
    },
    timeToHumanTime: function timeToHumanTime(time) {
        return this.moment(['2016-12-12', time].join(' ')).format('h:mmA');
    }
}));

},{"../../../lib/MyObject":200,"./DeliveryDate":19,"./DeliveryRoute":20,"./Dropoff":22,"backbone":"backbone"}],39:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    dayOfWeekMap: require('./DayOfWeek'),

    parse: function parse(response) {
        var _this = this;

        return response.map(function (row) {
            return _extends(row, {
                dayofweek: _this.dayOfWeekMap[row['sharegroupdropoff.dayofweek'] || row.dayofweek],
                starttime: _this.moment([_this.moment().format('YYYY-MM-DD'), row['sharegroupdropoff.starttime'] || row.starttime].join(' ')).format('h:mmA'),
                endtime: _this.moment([_this.moment().format('YYYY-MM-DD'), row['sharegroupdropoff.endtime'] || row.endtime].join(' ')).format('h:mmA'),
                location: row.location ? JSON.parse(row.location).coordinates : undefined
            });
        });
    },


    resource: 'sharegroupdropoff'

});

},{"./DayOfWeek":17,"./__proto__":42}],40:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    resource: 'shareoptionoption'
});

},{"./__proto__":42}],41:[function(require,module,exports){
'use strict';

module.exports = new (require('backbone').Model.extend({

    defaults: { state: {} },

    isAdmin: function isAdmin() {
        var roles = this.get('roles');

        if (!Array.isArray(roles)) return false;

        return roles.includes('admin');
    },
    url: function url() {
        return "/user";
    }
}))();

},{"backbone":"backbone"}],42:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('../../../lib/Model'), require('events').EventEmitter.prototype, {

    Xhr: require('../Xhr'),

    add: function add(datum) {
        this.data.push(datum);

        if (this.storeBy) this._storeOne(datum);

        return this;
    },
    delete: function _delete() {
        var _this = this;

        var keyValue = this.data[this.meta.key];
        return this.Xhr({ method: 'DELETE', resource: this.resource, id: keyValue }).then(function () {
            var key = _this.meta.key;

            if (Array.isArray(_this.data)) {
                var datum = _this.data.find(function (datum) {
                    return datum[key] == keyValue;
                });

                if (_this.store) {
                    Object.keys(_this.store).forEach(function (attr) {
                        _this.store[attr][datum[attr]] = _this.store[attr][datum[attr]].filter(function (datum) {
                            return datum[key] != keyValue;
                        });
                        if (_this.store[attr][datum[attr]].length === 0) {
                            _this.store[attr][datum[attr]] = undefined;
                        }
                    });
                }

                _this.data = _this.data.filter(function (datum) {
                    return datum[key] != keyValue;
                });
            }

            return Promise.resolve(_this.data);
        });
    },
    get: function get() {
        var _this2 = this;

        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { query: {} };

        if (opts.query || this.pagination) _extends(opts.query, this.pagination);

        return this.Xhr({ method: opts.method || 'get', resource: this.resource, headers: this.headers || {}, qs: opts.query ? JSON.stringify(opts.query) : undefined }).then(function (response) {

            if (Array.isArray(_this2.data)) {
                _this2.data = _this2.data.concat(opts.parse ? opts.parse(response, opts.storeBy) : response);
            } else {
                if (opts.storeBy) _this2._resetStore(opts.storeBy);
                _this2.data = _this2.parse ? _this2.parse(response, opts.storeBy) : response;
                if (opts.storeBy) _this2._store();
            }

            _this2.emit('got');

            return Promise.resolve(response);
        });
    },
    getCount: function getCount() {
        var _this3 = this;

        return this.Xhr({ method: 'get', resource: this.resource, headers: this.headers || {}, qs: JSON.stringify({ countOnly: true }) }).then(function (_ref) {
            var result = _ref.result;

            _this3.meta.count = result;
            return Promise.resolve(result);
        });
    },
    git: function git(attr) {
        return this.data[attr];
    },
    moneyToReal: function moneyToReal(price) {
        return parseFloat(price.replace(/\$|,/g, ""));
    },
    patch: function patch(id, data) {
        var _this4 = this;

        return this.Xhr({ method: 'patch', id: id, resource: this.resource, headers: this.headers || {}, data: JSON.stringify(data || this.data) }).then(function (response) {

            if (Array.isArray(_this4.data)) {
                _this4.data = _this4.data ? _this4.data.concat(response) : [response];
                if (_this4.store) Object.keys(_this4.store).forEach(function (attr) {
                    return _this4._store(response, attr);
                });
            } else {
                _this4.data = response;
            }

            return Promise.resolve(response);
        });
    },
    _put: function _put(keyValue, data) {
        var _this5 = this;

        var item = this.data.find(function (datum) {
            return datum[_this5.meta.key] == keyValue;
        });
        if (item) item = data;
        return this;
    },
    put: function put(id, data) {
        var _this6 = this;

        return this.Xhr({ method: 'put', id: id, resource: this.resource, headers: this.headers || {}, data: JSON.stringify(data) }).then(function (response) {

            if (Array.isArray(_this6.data)) {} else {
                _this6.data = response;
            }

            return Promise.resolve(response);
        });
    },
    post: function post(model) {
        var _this7 = this;

        return this.Xhr({ method: 'post', resource: this.resource, headers: _extends({ v2: true }, this.headers || {}), data: JSON.stringify(model || this.data) }).then(function (response) {

            if (Array.isArray(_this7.data)) {
                _this7.data = _this7.data ? _this7.data.concat(response) : [response];
                if (_this7.store) Object.keys(_this7.store).forEach(function (attr) {
                    return _this7._store(response, attr);
                });
            } else {
                _this7.data = response;
            }

            return Promise.resolve(response);
        });
    },
    remove: function remove(item) {
        var index = this.data.findIndex(function (datum) {
            return JSON.stringify(datum) === JSON.stringify(item);
        });

        if (index === -1) return;

        this.data.splice(index, 1);
    },
    set: function set(attr, value) {
        this.data[attr] = value;
        this.emit(attr + 'Changed');
    },
    validate: function validate(data) {
        var _this8 = this;

        var valid = true;

        Object.keys(data).forEach(function (name) {
            var val = data[name],
                attribute = _this8.attributes.find(function (attr) {
                return attr.name === name;
            });

            if (attribute === undefined || !attribute.validate) {
                _this8.data[name] = val ? typeof val === 'string' ? val.trim() : val : undefined;
            } else if (valid && !_this8.validateDatum(attribute, val)) {
                _this8.emit('validationError', attribute);
                valid = false;
            } else if (_this8.validateDatum(attribute, val)) {
                _this8.data[name] = val.trim();
            }
        });

        return valid;
    },
    validateDatum: function validateDatum(attr, val) {
        return attr.validate.call(this, val.trim());
    }
});

},{"../../../lib/Model":198,"../Xhr":7,"events":216}],43:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! version : 4.17.37
 =========================================================
 bootstrap-datetimejs
 https://github.com/Eonasdan/bootstrap-datetimepicker
 Copyright (c) 2015 Jonathan Peterson
 =========================================================
 */
/*
 The MIT License (MIT)

 Copyright (c) 2015 Jonathan Peterson

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
/*global define:false */
/*global exports:false */
/*global require:false */
/*global jQuery:false */
/*global moment:false */
(function (factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        // AMD is used - Register as an anonymous module.
        define(['jquery', 'moment'], factory);
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        factory(require('jquery'), require('moment'));
    } else {
        // Neither AMD nor CommonJS used. Use global variables.
        if (typeof jQuery === 'undefined') {
            throw 'bootstrap-datetimepicker requires jQuery to be loaded first';
        }
        if (typeof moment === 'undefined') {
            throw 'bootstrap-datetimepicker requires Moment.js to be loaded first';
        }
        factory(jQuery, moment);
    }
})(function ($, moment) {
    'use strict';

    if (!moment) {
        throw new Error('bootstrap-datetimepicker requires Moment.js to be loaded first');
    }

    var dateTimePicker = function dateTimePicker(element, options) {
        var picker = {},
            date,
            viewDate,
            unset = true,
            input,
            component = false,
            widget = false,
            use24Hours,
            minViewModeNumber = 0,
            actualFormat,
            parseFormats,
            currentViewMode,
            datePickerModes = [{
            clsName: 'days',
            navFnc: 'M',
            navStep: 1
        }, {
            clsName: 'months',
            navFnc: 'y',
            navStep: 1
        }, {
            clsName: 'years',
            navFnc: 'y',
            navStep: 10
        }, {
            clsName: 'decades',
            navFnc: 'y',
            navStep: 100
        }],
            viewModes = ['days', 'months', 'years', 'decades'],
            verticalModes = ['top', 'bottom', 'auto'],
            horizontalModes = ['left', 'right', 'auto'],
            toolbarPlacements = ['default', 'top', 'bottom'],
            keyMap = {
            'up': 38,
            38: 'up',
            'down': 40,
            40: 'down',
            'left': 37,
            37: 'left',
            'right': 39,
            39: 'right',
            'tab': 9,
            9: 'tab',
            'escape': 27,
            27: 'escape',
            'enter': 13,
            13: 'enter',
            'pageUp': 33,
            33: 'pageUp',
            'pageDown': 34,
            34: 'pageDown',
            'shift': 16,
            16: 'shift',
            'control': 17,
            17: 'control',
            'space': 32,
            32: 'space',
            't': 84,
            84: 't',
            'delete': 46,
            46: 'delete'
        },
            keyState = {},


        /********************************************************************************
         *
         * Private functions
         *
         ********************************************************************************/
        getMoment = function getMoment(d) {
            var tzEnabled = false,
                returnMoment,
                currentZoneOffset,
                incomingZoneOffset,
                timeZoneIndicator,
                dateWithTimeZoneInfo;

            if (moment.tz !== undefined && options.timeZone !== undefined && options.timeZone !== null && options.timeZone !== '') {
                tzEnabled = true;
            }
            if (d === undefined || d === null) {
                if (tzEnabled) {
                    returnMoment = moment().tz(options.timeZone).startOf('d');
                } else {
                    returnMoment = moment().startOf('d');
                }
            } else {
                if (tzEnabled) {
                    currentZoneOffset = moment().tz(options.timeZone).utcOffset();
                    incomingZoneOffset = moment(d, parseFormats, options.useStrict).utcOffset();
                    if (incomingZoneOffset !== currentZoneOffset) {
                        timeZoneIndicator = moment().tz(options.timeZone).format('Z');
                        dateWithTimeZoneInfo = moment(d, parseFormats, options.useStrict).format('YYYY-MM-DD[T]HH:mm:ss') + timeZoneIndicator;
                        returnMoment = moment(dateWithTimeZoneInfo, parseFormats, options.useStrict).tz(options.timeZone);
                    } else {
                        returnMoment = moment(d, parseFormats, options.useStrict).tz(options.timeZone);
                    }
                } else {
                    returnMoment = moment(d, parseFormats, options.useStrict);
                }
            }
            return returnMoment;
        },
            isEnabled = function isEnabled(granularity) {
            if (typeof granularity !== 'string' || granularity.length > 1) {
                throw new TypeError('isEnabled expects a single character string parameter');
            }
            switch (granularity) {
                case 'y':
                    return actualFormat.indexOf('Y') !== -1;
                case 'M':
                    return actualFormat.indexOf('M') !== -1;
                case 'd':
                    return actualFormat.toLowerCase().indexOf('d') !== -1;
                case 'h':
                case 'H':
                    return actualFormat.toLowerCase().indexOf('h') !== -1;
                case 'm':
                    return actualFormat.indexOf('m') !== -1;
                case 's':
                    return actualFormat.indexOf('s') !== -1;
                default:
                    return false;
            }
        },
            hasTime = function hasTime() {
            return isEnabled('h') || isEnabled('m') || isEnabled('s');
        },
            hasDate = function hasDate() {
            return isEnabled('y') || isEnabled('M') || isEnabled('d');
        },
            getDatePickerTemplate = function getDatePickerTemplate() {
            var headTemplate = $('<thead>').append($('<tr>').append($('<th>').addClass('prev').attr('data-action', 'previous').append($('<span>').addClass(options.icons.previous))).append($('<th>').addClass('picker-switch').attr('data-action', 'pickerSwitch').attr('colspan', options.calendarWeeks ? '6' : '5')).append($('<th>').addClass('next').attr('data-action', 'next').append($('<span>').addClass(options.icons.next)))),
                contTemplate = $('<tbody>').append($('<tr>').append($('<td>').attr('colspan', options.calendarWeeks ? '8' : '7')));

            return [$('<div>').addClass('datepicker-days').append($('<table>').addClass('table-condensed').append(headTemplate).append($('<tbody>'))), $('<div>').addClass('datepicker-months').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone())), $('<div>').addClass('datepicker-years').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone())), $('<div>').addClass('datepicker-decades').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone()))];
        },
            getTimePickerMainTemplate = function getTimePickerMainTemplate() {
            var topRow = $('<tr>'),
                middleRow = $('<tr>'),
                bottomRow = $('<tr>');

            if (isEnabled('h')) {
                topRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.incrementHour }).addClass('btn').attr('data-action', 'incrementHours').append($('<span>').addClass(options.icons.up))));
                middleRow.append($('<td>').append($('<span>').addClass('timepicker-hour').attr({ 'data-time-component': 'hours', 'title': options.tooltips.pickHour }).attr('data-action', 'showHours')));
                bottomRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.decrementHour }).addClass('btn').attr('data-action', 'decrementHours').append($('<span>').addClass(options.icons.down))));
            }
            if (isEnabled('m')) {
                if (isEnabled('h')) {
                    topRow.append($('<td>').addClass('separator'));
                    middleRow.append($('<td>').addClass('separator').html(':'));
                    bottomRow.append($('<td>').addClass('separator'));
                }
                topRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.incrementMinute }).addClass('btn').attr('data-action', 'incrementMinutes').append($('<span>').addClass(options.icons.up))));
                middleRow.append($('<td>').append($('<span>').addClass('timepicker-minute').attr({ 'data-time-component': 'minutes', 'title': options.tooltips.pickMinute }).attr('data-action', 'showMinutes')));
                bottomRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.decrementMinute }).addClass('btn').attr('data-action', 'decrementMinutes').append($('<span>').addClass(options.icons.down))));
            }
            if (isEnabled('s')) {
                if (isEnabled('m')) {
                    topRow.append($('<td>').addClass('separator'));
                    middleRow.append($('<td>').addClass('separator').html(':'));
                    bottomRow.append($('<td>').addClass('separator'));
                }
                topRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.incrementSecond }).addClass('btn').attr('data-action', 'incrementSeconds').append($('<span>').addClass(options.icons.up))));
                middleRow.append($('<td>').append($('<span>').addClass('timepicker-second').attr({ 'data-time-component': 'seconds', 'title': options.tooltips.pickSecond }).attr('data-action', 'showSeconds')));
                bottomRow.append($('<td>').append($('<a>').attr({ href: '#', tabindex: '-1', 'title': options.tooltips.decrementSecond }).addClass('btn').attr('data-action', 'decrementSeconds').append($('<span>').addClass(options.icons.down))));
            }

            if (!use24Hours) {
                topRow.append($('<td>').addClass('separator'));
                middleRow.append($('<td>').append($('<button>').addClass('btn btn-primary').attr({ 'data-action': 'togglePeriod', tabindex: '-1', 'title': options.tooltips.togglePeriod })));
                bottomRow.append($('<td>').addClass('separator'));
            }

            return $('<div>').addClass('timepicker-picker').append($('<table>').addClass('table-condensed').append([topRow, middleRow, bottomRow]));
        },
            getTimePickerTemplate = function getTimePickerTemplate() {
            var hoursView = $('<div>').addClass('timepicker-hours').append($('<table>').addClass('table-condensed')),
                minutesView = $('<div>').addClass('timepicker-minutes').append($('<table>').addClass('table-condensed')),
                secondsView = $('<div>').addClass('timepicker-seconds').append($('<table>').addClass('table-condensed')),
                ret = [getTimePickerMainTemplate()];

            if (isEnabled('h')) {
                ret.push(hoursView);
            }
            if (isEnabled('m')) {
                ret.push(minutesView);
            }
            if (isEnabled('s')) {
                ret.push(secondsView);
            }

            return ret;
        },
            getToolbar = function getToolbar() {
            var row = [];
            if (options.showTodayButton) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'today', 'title': options.tooltips.today }).append($('<span>').addClass(options.icons.today))));
            }
            if (!options.sideBySide && hasDate() && hasTime()) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'togglePicker', 'title': options.tooltips.selectTime }).append($('<span>').addClass(options.icons.time))));
            }
            if (options.showClear) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'clear', 'title': options.tooltips.clear }).append($('<span>').addClass(options.icons.clear))));
            }
            if (options.showClose) {
                row.push($('<td>').append($('<a>').attr({ 'data-action': 'close', 'title': options.tooltips.close }).append($('<span>').addClass(options.icons.close))));
            }
            return $('<table>').addClass('table-condensed').append($('<tbody>').append($('<tr>').append(row)));
        },
            getTemplate = function getTemplate() {
            var template = $('<div>').addClass('bootstrap-datetimepicker-widget dropdown-menu'),
                dateView = $('<div>').addClass('datepicker').append(getDatePickerTemplate()),
                timeView = $('<div>').addClass('timepicker').append(getTimePickerTemplate()),
                content = $('<ul>').addClass('list-unstyled'),
                toolbar = $('<li>').addClass('picker-switch' + (options.collapse ? ' accordion-toggle' : '')).append(getToolbar());

            if (options.inline) {
                template.removeClass('dropdown-menu');
            }

            if (use24Hours) {
                template.addClass('usetwentyfour');
            }
            if (isEnabled('s') && !use24Hours) {
                template.addClass('wider');
            }

            if (options.sideBySide && hasDate() && hasTime()) {
                template.addClass('timepicker-sbs');
                if (options.toolbarPlacement === 'top') {
                    template.append(toolbar);
                }
                template.append($('<div>').addClass('row').append(dateView.addClass('col-md-6')).append(timeView.addClass('col-md-6')));
                if (options.toolbarPlacement === 'bottom') {
                    template.append(toolbar);
                }
                return template;
            }

            if (options.toolbarPlacement === 'top') {
                content.append(toolbar);
            }
            if (hasDate()) {
                content.append($('<li>').addClass(options.collapse && hasTime() ? 'collapse in' : '').append(dateView));
            }
            if (options.toolbarPlacement === 'default') {
                content.append(toolbar);
            }
            if (hasTime()) {
                content.append($('<li>').addClass(options.collapse && hasDate() ? 'collapse' : '').append(timeView));
            }
            if (options.toolbarPlacement === 'bottom') {
                content.append(toolbar);
            }
            return template.append(content);
        },
            dataToOptions = function dataToOptions() {
            var eData,
                dataOptions = {};

            if (element.is('input') || options.inline) {
                eData = element.data();
            } else {
                eData = element.find('input').data();
            }

            if (eData.dateOptions && eData.dateOptions instanceof Object) {
                dataOptions = $.extend(true, dataOptions, eData.dateOptions);
            }

            $.each(options, function (key) {
                var attributeName = 'date' + key.charAt(0).toUpperCase() + key.slice(1);
                if (eData[attributeName] !== undefined) {
                    dataOptions[key] = eData[attributeName];
                }
            });
            return dataOptions;
        },
            place = function place() {
            var position = (component || element).position(),
                offset = (component || element).offset(),
                vertical = options.widgetPositioning.vertical,
                horizontal = options.widgetPositioning.horizontal,
                parent;

            if (options.widgetParent) {
                parent = options.widgetParent.append(widget);
            } else if (element.is('input')) {
                parent = element.after(widget).parent();
            } else if (options.inline) {
                parent = element.append(widget);
                return;
            } else {
                parent = element;
                element.children().first().after(widget);
            }

            // Top and bottom logic
            if (vertical === 'auto') {
                if (offset.top + widget.height() * 1.5 >= $(window).height() + $(window).scrollTop() && widget.height() + element.outerHeight() < offset.top) {
                    vertical = 'top';
                } else {
                    vertical = 'bottom';
                }
            }

            // Left and right logic
            if (horizontal === 'auto') {
                if (parent.width() < offset.left + widget.outerWidth() / 2 && offset.left + widget.outerWidth() > $(window).width()) {
                    horizontal = 'right';
                } else {
                    horizontal = 'left';
                }
            }

            if (vertical === 'top') {
                widget.addClass('top').removeClass('bottom');
            } else {
                widget.addClass('bottom').removeClass('top');
            }

            if (horizontal === 'right') {
                widget.addClass('pull-right');
            } else {
                widget.removeClass('pull-right');
            }

            // find the first parent element that has a relative css positioning
            if (parent.css('position') !== 'relative') {
                parent = parent.parents().filter(function () {
                    return $(this).css('position') === 'relative';
                }).first();
            }

            if (parent.length === 0) {
                throw new Error('datetimepicker component should be placed within a relative positioned container');
            }

            widget.css({
                top: vertical === 'top' ? 'auto' : position.top + element.outerHeight(),
                bottom: vertical === 'top' ? position.top + element.outerHeight() : 'auto',
                left: horizontal === 'left' ? parent === element ? 0 : position.left : 'auto',
                right: horizontal === 'left' ? 'auto' : parent.outerWidth() - element.outerWidth() - (parent === element ? 0 : position.left)
            });
        },
            notifyEvent = function notifyEvent(e) {
            if (e.type === 'dp.change' && (e.date && e.date.isSame(e.oldDate) || !e.date && !e.oldDate)) {
                return;
            }
            element.trigger(e);
        },
            viewUpdate = function viewUpdate(e) {
            if (e === 'y') {
                e = 'YYYY';
            }
            notifyEvent({
                type: 'dp.update',
                change: e,
                viewDate: viewDate.clone()
            });
        },
            showMode = function showMode(dir) {
            if (!widget) {
                return;
            }
            if (dir) {
                currentViewMode = Math.max(minViewModeNumber, Math.min(3, currentViewMode + dir));
            }
            widget.find('.datepicker > div').hide().filter('.datepicker-' + datePickerModes[currentViewMode].clsName).show();
        },
            fillDow = function fillDow() {
            var row = $('<tr>'),
                currentDate = viewDate.clone().startOf('w').startOf('d');

            if (options.calendarWeeks === true) {
                row.append($('<th>').addClass('cw').text('#'));
            }

            while (currentDate.isBefore(viewDate.clone().endOf('w'))) {
                row.append($('<th>').addClass('dow').text(currentDate.format('dd')));
                currentDate.add(1, 'd');
            }
            widget.find('.datepicker-days thead').append(row);
        },
            isInDisabledDates = function isInDisabledDates(testDate) {
            return options.disabledDates[testDate.format('YYYY-MM-DD')] === true;
        },
            isInEnabledDates = function isInEnabledDates(testDate) {
            return options.enabledDates[testDate.format('YYYY-MM-DD')] === true;
        },
            isInDisabledHours = function isInDisabledHours(testDate) {
            return options.disabledHours[testDate.format('H')] === true;
        },
            isInEnabledHours = function isInEnabledHours(testDate) {
            return options.enabledHours[testDate.format('H')] === true;
        },
            isValid = function isValid(targetMoment, granularity) {
            if (!targetMoment.isValid()) {
                return false;
            }
            if (options.disabledDates && granularity === 'd' && isInDisabledDates(targetMoment)) {
                return false;
            }
            if (options.enabledDates && granularity === 'd' && !isInEnabledDates(targetMoment)) {
                return false;
            }
            if (options.minDate && targetMoment.isBefore(options.minDate, granularity)) {
                return false;
            }
            if (options.maxDate && targetMoment.isAfter(options.maxDate, granularity)) {
                return false;
            }
            if (options.daysOfWeekDisabled && granularity === 'd' && options.daysOfWeekDisabled.indexOf(targetMoment.day()) !== -1) {
                return false;
            }
            if (options.disabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && isInDisabledHours(targetMoment)) {
                return false;
            }
            if (options.enabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && !isInEnabledHours(targetMoment)) {
                return false;
            }
            if (options.disabledTimeIntervals && (granularity === 'h' || granularity === 'm' || granularity === 's')) {
                var found = false;
                $.each(options.disabledTimeIntervals, function () {
                    if (targetMoment.isBetween(this[0], this[1])) {
                        found = true;
                        return false;
                    }
                });
                if (found) {
                    return false;
                }
            }
            return true;
        },
            fillMonths = function fillMonths() {
            var spans = [],
                monthsShort = viewDate.clone().startOf('y').startOf('d');
            while (monthsShort.isSame(viewDate, 'y')) {
                spans.push($('<span>').attr('data-action', 'selectMonth').addClass('month').text(monthsShort.format('MMM')));
                monthsShort.add(1, 'M');
            }
            widget.find('.datepicker-months td').empty().append(spans);
        },
            updateMonths = function updateMonths() {
            var monthsView = widget.find('.datepicker-months'),
                monthsViewHeader = monthsView.find('th'),
                months = monthsView.find('tbody').find('span');

            monthsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevYear);
            monthsViewHeader.eq(1).attr('title', options.tooltips.selectYear);
            monthsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextYear);

            monthsView.find('.disabled').removeClass('disabled');

            if (!isValid(viewDate.clone().subtract(1, 'y'), 'y')) {
                monthsViewHeader.eq(0).addClass('disabled');
            }

            monthsViewHeader.eq(1).text(viewDate.year());

            if (!isValid(viewDate.clone().add(1, 'y'), 'y')) {
                monthsViewHeader.eq(2).addClass('disabled');
            }

            months.removeClass('active');
            if (date.isSame(viewDate, 'y') && !unset) {
                months.eq(date.month()).addClass('active');
            }

            months.each(function (index) {
                if (!isValid(viewDate.clone().month(index), 'M')) {
                    $(this).addClass('disabled');
                }
            });
        },
            updateYears = function updateYears() {
            var yearsView = widget.find('.datepicker-years'),
                yearsViewHeader = yearsView.find('th'),
                startYear = viewDate.clone().subtract(5, 'y'),
                endYear = viewDate.clone().add(6, 'y'),
                html = '';

            yearsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevDecade);
            yearsViewHeader.eq(1).attr('title', options.tooltips.selectDecade);
            yearsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextDecade);

            yearsView.find('.disabled').removeClass('disabled');

            if (options.minDate && options.minDate.isAfter(startYear, 'y')) {
                yearsViewHeader.eq(0).addClass('disabled');
            }

            yearsViewHeader.eq(1).text(startYear.year() + '-' + endYear.year());

            if (options.maxDate && options.maxDate.isBefore(endYear, 'y')) {
                yearsViewHeader.eq(2).addClass('disabled');
            }

            while (!startYear.isAfter(endYear, 'y')) {
                html += '<span data-action="selectYear" class="year' + (startYear.isSame(date, 'y') && !unset ? ' active' : '') + (!isValid(startYear, 'y') ? ' disabled' : '') + '">' + startYear.year() + '</span>';
                startYear.add(1, 'y');
            }

            yearsView.find('td').html(html);
        },
            updateDecades = function updateDecades() {
            var decadesView = widget.find('.datepicker-decades'),
                decadesViewHeader = decadesView.find('th'),
                startDecade = moment({ y: viewDate.year() - viewDate.year() % 100 - 1 }),
                endDecade = startDecade.clone().add(100, 'y'),
                startedAt = startDecade.clone(),
                html = '';

            decadesViewHeader.eq(0).find('span').attr('title', options.tooltips.prevCentury);
            decadesViewHeader.eq(2).find('span').attr('title', options.tooltips.nextCentury);

            decadesView.find('.disabled').removeClass('disabled');

            if (startDecade.isSame(moment({ y: 1900 })) || options.minDate && options.minDate.isAfter(startDecade, 'y')) {
                decadesViewHeader.eq(0).addClass('disabled');
            }

            decadesViewHeader.eq(1).text(startDecade.year() + '-' + endDecade.year());

            if (startDecade.isSame(moment({ y: 2000 })) || options.maxDate && options.maxDate.isBefore(endDecade, 'y')) {
                decadesViewHeader.eq(2).addClass('disabled');
            }

            while (!startDecade.isAfter(endDecade, 'y')) {
                html += '<span data-action="selectDecade" class="decade' + (startDecade.isSame(date, 'y') ? ' active' : '') + (!isValid(startDecade, 'y') ? ' disabled' : '') + '" data-selection="' + (startDecade.year() + 6) + '">' + (startDecade.year() + 1) + ' - ' + (startDecade.year() + 12) + '</span>';
                startDecade.add(12, 'y');
            }
            html += '<span></span><span></span><span></span>'; //push the dangling block over, at least this way it's even

            decadesView.find('td').html(html);
            decadesViewHeader.eq(1).text(startedAt.year() + 1 + '-' + startDecade.year());
        },
            fillDate = function fillDate() {
            var daysView = widget.find('.datepicker-days'),
                daysViewHeader = daysView.find('th'),
                currentDate,
                html = [],
                row,
                clsName,
                i;

            if (!hasDate()) {
                return;
            }

            daysViewHeader.eq(0).find('span').attr('title', options.tooltips.prevMonth);
            daysViewHeader.eq(1).attr('title', options.tooltips.selectMonth);
            daysViewHeader.eq(2).find('span').attr('title', options.tooltips.nextMonth);

            daysView.find('.disabled').removeClass('disabled');
            daysViewHeader.eq(1).text(viewDate.format(options.dayViewHeaderFormat));

            if (!isValid(viewDate.clone().subtract(1, 'M'), 'M')) {
                daysViewHeader.eq(0).addClass('disabled');
            }
            if (!isValid(viewDate.clone().add(1, 'M'), 'M')) {
                daysViewHeader.eq(2).addClass('disabled');
            }

            currentDate = viewDate.clone().startOf('M').startOf('w').startOf('d');

            for (i = 0; i < 42; i++) {
                //always display 42 days (should show 6 weeks)
                if (currentDate.weekday() === 0) {
                    row = $('<tr>');
                    if (options.calendarWeeks) {
                        row.append('<td class="cw">' + currentDate.week() + '</td>');
                    }
                    html.push(row);
                }
                clsName = '';
                if (currentDate.isBefore(viewDate, 'M')) {
                    clsName += ' old';
                }
                if (currentDate.isAfter(viewDate, 'M')) {
                    clsName += ' new';
                }
                if (currentDate.isSame(date, 'd') && !unset) {
                    clsName += ' active';
                }
                if (!isValid(currentDate, 'd')) {
                    clsName += ' disabled';
                }
                if (currentDate.isSame(getMoment(), 'd')) {
                    clsName += ' today';
                }
                if (currentDate.day() === 0 || currentDate.day() === 6) {
                    clsName += ' weekend';
                }
                row.append('<td data-action="selectDay" data-day="' + currentDate.format('L') + '" class="day' + clsName + '">' + currentDate.date() + '</td>');
                currentDate.add(1, 'd');
            }

            daysView.find('tbody').empty().append(html);

            updateMonths();

            updateYears();

            updateDecades();
        },
            fillHours = function fillHours() {
            var table = widget.find('.timepicker-hours table'),
                currentHour = viewDate.clone().startOf('d'),
                html = [],
                row = $('<tr>');

            if (viewDate.hour() > 11 && !use24Hours) {
                currentHour.hour(12);
            }
            while (currentHour.isSame(viewDate, 'd') && (use24Hours || viewDate.hour() < 12 && currentHour.hour() < 12 || viewDate.hour() > 11)) {
                if (currentHour.hour() % 4 === 0) {
                    row = $('<tr>');
                    html.push(row);
                }
                row.append('<td data-action="selectHour" class="hour' + (!isValid(currentHour, 'h') ? ' disabled' : '') + '">' + currentHour.format(use24Hours ? 'HH' : 'hh') + '</td>');
                currentHour.add(1, 'h');
            }
            table.empty().append(html);
        },
            fillMinutes = function fillMinutes() {
            var table = widget.find('.timepicker-minutes table'),
                currentMinute = viewDate.clone().startOf('h'),
                html = [],
                row = $('<tr>'),
                step = options.stepping === 1 ? 5 : options.stepping;

            while (viewDate.isSame(currentMinute, 'h')) {
                if (currentMinute.minute() % (step * 4) === 0) {
                    row = $('<tr>');
                    html.push(row);
                }
                row.append('<td data-action="selectMinute" class="minute' + (!isValid(currentMinute, 'm') ? ' disabled' : '') + '">' + currentMinute.format('mm') + '</td>');
                currentMinute.add(step, 'm');
            }
            table.empty().append(html);
        },
            fillSeconds = function fillSeconds() {
            var table = widget.find('.timepicker-seconds table'),
                currentSecond = viewDate.clone().startOf('m'),
                html = [],
                row = $('<tr>');

            while (viewDate.isSame(currentSecond, 'm')) {
                if (currentSecond.second() % 20 === 0) {
                    row = $('<tr>');
                    html.push(row);
                }
                row.append('<td data-action="selectSecond" class="second' + (!isValid(currentSecond, 's') ? ' disabled' : '') + '">' + currentSecond.format('ss') + '</td>');
                currentSecond.add(5, 's');
            }

            table.empty().append(html);
        },
            fillTime = function fillTime() {
            var toggle,
                newDate,
                timeComponents = widget.find('.timepicker span[data-time-component]');

            if (!use24Hours) {
                toggle = widget.find('.timepicker [data-action=togglePeriod]');
                newDate = date.clone().add(date.hours() >= 12 ? -12 : 12, 'h');

                toggle.text(date.format('A'));

                if (isValid(newDate, 'h')) {
                    toggle.removeClass('disabled');
                } else {
                    toggle.addClass('disabled');
                }
            }
            timeComponents.filter('[data-time-component=hours]').text(date.format(use24Hours ? 'HH' : 'hh'));
            timeComponents.filter('[data-time-component=minutes]').text(date.format('mm'));
            timeComponents.filter('[data-time-component=seconds]').text(date.format('ss'));

            fillHours();
            fillMinutes();
            fillSeconds();
        },
            update = function update() {
            if (!widget) {
                return;
            }
            fillDate();
            fillTime();
        },
            setValue = function setValue(targetMoment) {
            var oldDate = unset ? null : date;

            // case of calling setValue(null or false)
            if (!targetMoment) {
                unset = true;
                input.val('');
                element.data('date', '');
                notifyEvent({
                    type: 'dp.change',
                    date: false,
                    oldDate: oldDate
                });
                update();
                return;
            }

            targetMoment = targetMoment.clone().locale(options.locale);

            if (options.stepping !== 1) {
                targetMoment.minutes(Math.round(targetMoment.minutes() / options.stepping) * options.stepping % 60).seconds(0);
            }

            if (isValid(targetMoment)) {
                date = targetMoment;
                viewDate = date.clone();
                input.val(date.format(actualFormat));
                element.data('date', date.format(actualFormat));
                unset = false;
                update();
                notifyEvent({
                    type: 'dp.change',
                    date: date.clone(),
                    oldDate: oldDate
                });
            } else {
                if (!options.keepInvalid) {
                    input.val(unset ? '' : date.format(actualFormat));
                }
                notifyEvent({
                    type: 'dp.error',
                    date: targetMoment
                });
            }
        },
            hide = function hide() {
            ///<summary>Hides the widget. Possibly will emit dp.hide</summary>
            var transitioning = false;
            if (!widget) {
                return picker;
            }
            // Ignore event if in the middle of a picker transition
            widget.find('.collapse').each(function () {
                var collapseData = $(this).data('collapse');
                if (collapseData && collapseData.transitioning) {
                    transitioning = true;
                    return false;
                }
                return true;
            });
            if (transitioning) {
                return picker;
            }
            if (component && component.hasClass('btn')) {
                component.toggleClass('active');
            }
            widget.hide();

            $(window).off('resize', place);
            widget.off('click', '[data-action]');
            widget.off('mousedown', false);

            widget.remove();
            widget = false;

            notifyEvent({
                type: 'dp.hide',
                date: date.clone()
            });

            input.blur();

            return picker;
        },
            clear = function clear() {
            setValue(null);
        },


        /********************************************************************************
         *
         * Widget UI interaction functions
         *
         ********************************************************************************/
        actions = {
            next: function next() {
                var navFnc = datePickerModes[currentViewMode].navFnc;
                viewDate.add(datePickerModes[currentViewMode].navStep, navFnc);
                fillDate();
                viewUpdate(navFnc);
            },

            previous: function previous() {
                var navFnc = datePickerModes[currentViewMode].navFnc;
                viewDate.subtract(datePickerModes[currentViewMode].navStep, navFnc);
                fillDate();
                viewUpdate(navFnc);
            },

            pickerSwitch: function pickerSwitch() {
                showMode(1);
            },

            selectMonth: function selectMonth(e) {
                var month = $(e.target).closest('tbody').find('span').index($(e.target));
                viewDate.month(month);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()).month(viewDate.month()));
                    if (!options.inline) {
                        hide();
                    }
                } else {
                    showMode(-1);
                    fillDate();
                }
                viewUpdate('M');
            },

            selectYear: function selectYear(e) {
                var year = parseInt($(e.target).text(), 10) || 0;
                viewDate.year(year);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()));
                    if (!options.inline) {
                        hide();
                    }
                } else {
                    showMode(-1);
                    fillDate();
                }
                viewUpdate('YYYY');
            },

            selectDecade: function selectDecade(e) {
                var year = parseInt($(e.target).data('selection'), 10) || 0;
                viewDate.year(year);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()));
                    if (!options.inline) {
                        hide();
                    }
                } else {
                    showMode(-1);
                    fillDate();
                }
                viewUpdate('YYYY');
            },

            selectDay: function selectDay(e) {
                var day = viewDate.clone();
                if ($(e.target).is('.old')) {
                    day.subtract(1, 'M');
                }
                if ($(e.target).is('.new')) {
                    day.add(1, 'M');
                }
                setValue(day.date(parseInt($(e.target).text(), 10)));
                if (!hasTime() && !options.keepOpen && !options.inline) {
                    hide();
                }
            },

            incrementHours: function incrementHours() {
                var newDate = date.clone().add(1, 'h');
                if (isValid(newDate, 'h')) {
                    setValue(newDate);
                }
            },

            incrementMinutes: function incrementMinutes() {
                var newDate = date.clone().add(options.stepping, 'm');
                if (isValid(newDate, 'm')) {
                    setValue(newDate);
                }
            },

            incrementSeconds: function incrementSeconds() {
                var newDate = date.clone().add(1, 's');
                if (isValid(newDate, 's')) {
                    setValue(newDate);
                }
            },

            decrementHours: function decrementHours() {
                var newDate = date.clone().subtract(1, 'h');
                if (isValid(newDate, 'h')) {
                    setValue(newDate);
                }
            },

            decrementMinutes: function decrementMinutes() {
                var newDate = date.clone().subtract(options.stepping, 'm');
                if (isValid(newDate, 'm')) {
                    setValue(newDate);
                }
            },

            decrementSeconds: function decrementSeconds() {
                var newDate = date.clone().subtract(1, 's');
                if (isValid(newDate, 's')) {
                    setValue(newDate);
                }
            },

            togglePeriod: function togglePeriod() {
                setValue(date.clone().add(date.hours() >= 12 ? -12 : 12, 'h'));
            },

            togglePicker: function togglePicker(e) {
                var $this = $(e.target),
                    $parent = $this.closest('ul'),
                    expanded = $parent.find('.in'),
                    closed = $parent.find('.collapse:not(.in)'),
                    collapseData;

                if (expanded && expanded.length) {
                    collapseData = expanded.data('collapse');
                    if (collapseData && collapseData.transitioning) {
                        return;
                    }
                    if (expanded.collapse) {
                        // if collapse plugin is available through bootstrap.js then use it
                        expanded.collapse('hide');
                        closed.collapse('show');
                    } else {
                        // otherwise just toggle in class on the two views
                        expanded.removeClass('in');
                        closed.addClass('in');
                    }
                    if ($this.is('span')) {
                        $this.toggleClass(options.icons.time + ' ' + options.icons.date);
                    } else {
                        $this.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);
                    }

                    // NOTE: uncomment if toggled state will be restored in show()
                    //if (component) {
                    //    component.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);
                    //}
                }
            },

            showPicker: function showPicker() {
                widget.find('.timepicker > div:not(.timepicker-picker)').hide();
                widget.find('.timepicker .timepicker-picker').show();
            },

            showHours: function showHours() {
                widget.find('.timepicker .timepicker-picker').hide();
                widget.find('.timepicker .timepicker-hours').show();
            },

            showMinutes: function showMinutes() {
                widget.find('.timepicker .timepicker-picker').hide();
                widget.find('.timepicker .timepicker-minutes').show();
            },

            showSeconds: function showSeconds() {
                widget.find('.timepicker .timepicker-picker').hide();
                widget.find('.timepicker .timepicker-seconds').show();
            },

            selectHour: function selectHour(e) {
                var hour = parseInt($(e.target).text(), 10);

                if (!use24Hours) {
                    if (date.hours() >= 12) {
                        if (hour !== 12) {
                            hour += 12;
                        }
                    } else {
                        if (hour === 12) {
                            hour = 0;
                        }
                    }
                }
                setValue(date.clone().hours(hour));
                actions.showPicker.call(picker);
            },

            selectMinute: function selectMinute(e) {
                setValue(date.clone().minutes(parseInt($(e.target).text(), 10)));
                actions.showPicker.call(picker);
            },

            selectSecond: function selectSecond(e) {
                setValue(date.clone().seconds(parseInt($(e.target).text(), 10)));
                actions.showPicker.call(picker);
            },

            clear: clear,

            today: function today() {
                var todaysDate = getMoment();
                if (isValid(todaysDate, 'd')) {
                    setValue(todaysDate);
                }
            },

            close: hide
        },
            doAction = function doAction(e) {
            if ($(e.currentTarget).is('.disabled')) {
                return false;
            }
            actions[$(e.currentTarget).data('action')].apply(picker, arguments);
            return false;
        },
            show = function show() {
            ///<summary>Shows the widget. Possibly will emit dp.show and dp.change</summary>
            var currentMoment,
                useCurrentGranularity = {
                'year': function year(m) {
                    return m.month(0).date(1).hours(0).seconds(0).minutes(0);
                },
                'month': function month(m) {
                    return m.date(1).hours(0).seconds(0).minutes(0);
                },
                'day': function day(m) {
                    return m.hours(0).seconds(0).minutes(0);
                },
                'hour': function hour(m) {
                    return m.seconds(0).minutes(0);
                },
                'minute': function minute(m) {
                    return m.seconds(0);
                }
            };

            if (input.prop('disabled') || !options.ignoreReadonly && input.prop('readonly') || widget) {
                return picker;
            }
            if (input.val() !== undefined && input.val().trim().length !== 0) {
                setValue(parseInputDate(input.val().trim()));
            } else if (options.useCurrent && unset && (input.is('input') && input.val().trim().length === 0 || options.inline)) {
                currentMoment = getMoment();
                if (typeof options.useCurrent === 'string') {
                    currentMoment = useCurrentGranularity[options.useCurrent](currentMoment);
                }
                setValue(currentMoment);
            }

            widget = getTemplate();

            fillDow();
            fillMonths();

            widget.find('.timepicker-hours').hide();
            widget.find('.timepicker-minutes').hide();
            widget.find('.timepicker-seconds').hide();

            update();
            showMode();

            $(window).on('resize', place);
            widget.on('click', '[data-action]', doAction); // this handles clicks on the widget
            widget.on('mousedown', false);

            if (component && component.hasClass('btn')) {
                component.toggleClass('active');
            }
            widget.show();
            place();

            if (options.focusOnShow && !input.is(':focus')) {
                input.focus();
            }

            notifyEvent({
                type: 'dp.show'
            });
            return picker;
        },
            toggle = function toggle() {
            /// <summary>Shows or hides the widget</summary>
            return widget ? hide() : show();
        },
            parseInputDate = function parseInputDate(inputDate) {
            if (options.parseInputDate === undefined) {
                if (moment.isMoment(inputDate) || inputDate instanceof Date) {
                    inputDate = moment(inputDate);
                } else {
                    inputDate = getMoment(inputDate);
                }
            } else {
                inputDate = options.parseInputDate(inputDate);
            }
            inputDate.locale(options.locale);
            return inputDate;
        },
            keydown = function keydown(e) {
            var handler = null,
                index,
                index2,
                pressedKeys = [],
                pressedModifiers = {},
                currentKey = e.which,
                keyBindKeys,
                allModifiersPressed,
                pressed = 'p';

            keyState[currentKey] = pressed;

            for (index in keyState) {
                if (keyState.hasOwnProperty(index) && keyState[index] === pressed) {
                    pressedKeys.push(index);
                    if (parseInt(index, 10) !== currentKey) {
                        pressedModifiers[index] = true;
                    }
                }
            }

            for (index in options.keyBinds) {
                if (options.keyBinds.hasOwnProperty(index) && typeof options.keyBinds[index] === 'function') {
                    keyBindKeys = index.split(' ');
                    if (keyBindKeys.length === pressedKeys.length && keyMap[currentKey] === keyBindKeys[keyBindKeys.length - 1]) {
                        allModifiersPressed = true;
                        for (index2 = keyBindKeys.length - 2; index2 >= 0; index2--) {
                            if (!(keyMap[keyBindKeys[index2]] in pressedModifiers)) {
                                allModifiersPressed = false;
                                break;
                            }
                        }
                        if (allModifiersPressed) {
                            handler = options.keyBinds[index];
                            break;
                        }
                    }
                }
            }

            if (handler) {
                handler.call(picker, widget);
                e.stopPropagation();
                e.preventDefault();
            }
        },
            keyup = function keyup(e) {
            keyState[e.which] = 'r';
            e.stopPropagation();
            e.preventDefault();
        },
            change = function change(e) {
            var val = $(e.target).val().trim(),
                parsedDate = val ? parseInputDate(val) : null;
            setValue(parsedDate);
            e.stopImmediatePropagation();
            return false;
        },
            attachDatePickerElementEvents = function attachDatePickerElementEvents() {
            input.on({
                'change': change,
                'blur': options.debug ? '' : hide,
                'keydown': keydown,
                'keyup': keyup,
                'focus': options.allowInputToggle ? show : ''
            });

            if (element.is('input')) {
                input.on({
                    'focus': show
                });
            } else if (component) {
                component.on('click', toggle);
                component.on('mousedown', false);
            }
        },
            detachDatePickerElementEvents = function detachDatePickerElementEvents() {
            input.off({
                'change': change,
                'blur': blur,
                'keydown': keydown,
                'keyup': keyup,
                'focus': options.allowInputToggle ? hide : ''
            });

            if (element.is('input')) {
                input.off({
                    'focus': show
                });
            } else if (component) {
                component.off('click', toggle);
                component.off('mousedown', false);
            }
        },
            indexGivenDates = function indexGivenDates(givenDatesArray) {
            // Store given enabledDates and disabledDates as keys.
            // This way we can check their existence in O(1) time instead of looping through whole array.
            // (for example: options.enabledDates['2014-02-27'] === true)
            var givenDatesIndexed = {};
            $.each(givenDatesArray, function () {
                var dDate = parseInputDate(this);
                if (dDate.isValid()) {
                    givenDatesIndexed[dDate.format('YYYY-MM-DD')] = true;
                }
            });
            return Object.keys(givenDatesIndexed).length ? givenDatesIndexed : false;
        },
            indexGivenHours = function indexGivenHours(givenHoursArray) {
            // Store given enabledHours and disabledHours as keys.
            // This way we can check their existence in O(1) time instead of looping through whole array.
            // (for example: options.enabledHours['2014-02-27'] === true)
            var givenHoursIndexed = {};
            $.each(givenHoursArray, function () {
                givenHoursIndexed[this] = true;
            });
            return Object.keys(givenHoursIndexed).length ? givenHoursIndexed : false;
        },
            initFormatting = function initFormatting() {
            var format = options.format || 'L LT';

            actualFormat = format.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput) {
                var newinput = date.localeData().longDateFormat(formatInput) || formatInput;
                return newinput.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput2) {
                    //temp fix for #740
                    return date.localeData().longDateFormat(formatInput2) || formatInput2;
                });
            });

            parseFormats = options.extraFormats ? options.extraFormats.slice() : [];
            if (parseFormats.indexOf(format) < 0 && parseFormats.indexOf(actualFormat) < 0) {
                parseFormats.push(actualFormat);
            }

            use24Hours = actualFormat.toLowerCase().indexOf('a') < 1 && actualFormat.replace(/\[.*?\]/g, '').indexOf('h') < 1;

            if (isEnabled('y')) {
                minViewModeNumber = 2;
            }
            if (isEnabled('M')) {
                minViewModeNumber = 1;
            }
            if (isEnabled('d')) {
                minViewModeNumber = 0;
            }

            currentViewMode = Math.max(minViewModeNumber, currentViewMode);

            if (!unset) {
                setValue(date);
            }
        };

        /********************************************************************************
         *
         * Public API functions
         * =====================
         *
         * Important: Do not expose direct references to private objects or the options
         * object to the outer world. Always return a clone when returning values or make
         * a clone when setting a private variable.
         *
         ********************************************************************************/
        picker.destroy = function () {
            ///<summary>Destroys the widget and removes all attached event listeners</summary>
            hide();
            detachDatePickerElementEvents();
            element.removeData('DateTimePicker');
            element.removeData('date');
        };

        picker.toggle = toggle;

        picker.show = show;

        picker.hide = hide;

        picker.disable = function () {
            ///<summary>Disables the input element, the component is attached to, by adding a disabled="true" attribute to it.
            ///If the widget was visible before that call it is hidden. Possibly emits dp.hide</summary>
            hide();
            if (component && component.hasClass('btn')) {
                component.addClass('disabled');
            }
            input.prop('disabled', true);
            return picker;
        };

        picker.enable = function () {
            ///<summary>Enables the input element, the component is attached to, by removing disabled attribute from it.</summary>
            if (component && component.hasClass('btn')) {
                component.removeClass('disabled');
            }
            input.prop('disabled', false);
            return picker;
        };

        picker.ignoreReadonly = function (ignoreReadonly) {
            if (arguments.length === 0) {
                return options.ignoreReadonly;
            }
            if (typeof ignoreReadonly !== 'boolean') {
                throw new TypeError('ignoreReadonly () expects a boolean parameter');
            }
            options.ignoreReadonly = ignoreReadonly;
            return picker;
        };

        picker.options = function (newOptions) {
            if (arguments.length === 0) {
                return $.extend(true, {}, options);
            }

            if (!(newOptions instanceof Object)) {
                throw new TypeError('options() options parameter should be an object');
            }
            $.extend(true, options, newOptions);
            $.each(options, function (key, value) {
                if (picker[key] !== undefined) {
                    picker[key](value);
                } else {
                    throw new TypeError('option ' + key + ' is not recognized!');
                }
            });
            return picker;
        };

        picker.date = function (newDate) {
            ///<signature helpKeyword="$.fn.datetimepicker.date">
            ///<summary>Returns the component's model current date, a moment object or null if not set.</summary>
            ///<returns type="Moment">date.clone()</returns>
            ///</signature>
            ///<signature>
            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>
            ///<param name="newDate" locid="$.fn.datetimepicker.date_p:newDate">Takes string, Date, moment, null parameter.</param>
            ///</signature>
            if (arguments.length === 0) {
                if (unset) {
                    return null;
                }
                return date.clone();
            }

            if (newDate !== null && typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {
                throw new TypeError('date() parameter must be one of [null, string, moment or Date]');
            }

            setValue(newDate === null ? null : parseInputDate(newDate));
            return picker;
        };

        picker.format = function (newFormat) {
            ///<summary>test su</summary>
            ///<param name="newFormat">info about para</param>
            ///<returns type="string|boolean">returns foo</returns>
            if (arguments.length === 0) {
                return options.format;
            }

            if (typeof newFormat !== 'string' && (typeof newFormat !== 'boolean' || newFormat !== false)) {
                throw new TypeError('format() expects a sting or boolean:false parameter ' + newFormat);
            }

            options.format = newFormat;
            if (actualFormat) {
                initFormatting(); // reinit formatting
            }
            return picker;
        };

        picker.timeZone = function (newZone) {
            if (arguments.length === 0) {
                return options.timeZone;
            }

            options.timeZone = newZone;

            return picker;
        };

        picker.dayViewHeaderFormat = function (newFormat) {
            if (arguments.length === 0) {
                return options.dayViewHeaderFormat;
            }

            if (typeof newFormat !== 'string') {
                throw new TypeError('dayViewHeaderFormat() expects a string parameter');
            }

            options.dayViewHeaderFormat = newFormat;
            return picker;
        };

        picker.extraFormats = function (formats) {
            if (arguments.length === 0) {
                return options.extraFormats;
            }

            if (formats !== false && !(formats instanceof Array)) {
                throw new TypeError('extraFormats() expects an array or false parameter');
            }

            options.extraFormats = formats;
            if (parseFormats) {
                initFormatting(); // reinit formatting
            }
            return picker;
        };

        picker.disabledDates = function (dates) {
            ///<signature helpKeyword="$.fn.datetimepicker.disabledDates">
            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>
            ///<returns type="array">options.disabledDates</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of
            ///options.enabledDates if such exist.</summary>
            ///<param name="dates" locid="$.fn.datetimepicker.disabledDates_p:dates">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.disabledDates ? $.extend({}, options.disabledDates) : options.disabledDates;
            }

            if (!dates) {
                options.disabledDates = false;
                update();
                return picker;
            }
            if (!(dates instanceof Array)) {
                throw new TypeError('disabledDates() expects an array parameter');
            }
            options.disabledDates = indexGivenDates(dates);
            options.enabledDates = false;
            update();
            return picker;
        };

        picker.enabledDates = function (dates) {
            ///<signature helpKeyword="$.fn.datetimepicker.enabledDates">
            ///<summary>Returns an array with the currently set enabled dates on the component.</summary>
            ///<returns type="array">options.enabledDates</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledDates if such exist.</summary>
            ///<param name="dates" locid="$.fn.datetimepicker.enabledDates_p:dates">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.enabledDates ? $.extend({}, options.enabledDates) : options.enabledDates;
            }

            if (!dates) {
                options.enabledDates = false;
                update();
                return picker;
            }
            if (!(dates instanceof Array)) {
                throw new TypeError('enabledDates() expects an array parameter');
            }
            options.enabledDates = indexGivenDates(dates);
            options.disabledDates = false;
            update();
            return picker;
        };

        picker.daysOfWeekDisabled = function (daysOfWeekDisabled) {
            if (arguments.length === 0) {
                return options.daysOfWeekDisabled.splice(0);
            }

            if (typeof daysOfWeekDisabled === 'boolean' && !daysOfWeekDisabled) {
                options.daysOfWeekDisabled = false;
                update();
                return picker;
            }

            if (!(daysOfWeekDisabled instanceof Array)) {
                throw new TypeError('daysOfWeekDisabled() expects an array parameter');
            }
            options.daysOfWeekDisabled = daysOfWeekDisabled.reduce(function (previousValue, currentValue) {
                currentValue = parseInt(currentValue, 10);
                if (currentValue > 6 || currentValue < 0 || isNaN(currentValue)) {
                    return previousValue;
                }
                if (previousValue.indexOf(currentValue) === -1) {
                    previousValue.push(currentValue);
                }
                return previousValue;
            }, []).sort();
            if (options.useCurrent && !options.keepInvalid) {
                var tries = 0;
                while (!isValid(date, 'd')) {
                    date.add(1, 'd');
                    if (tries === 7) {
                        throw 'Tried 7 times to find a valid date';
                    }
                    tries++;
                }
                setValue(date);
            }
            update();
            return picker;
        };

        picker.maxDate = function (maxDate) {
            if (arguments.length === 0) {
                return options.maxDate ? options.maxDate.clone() : options.maxDate;
            }

            if (typeof maxDate === 'boolean' && maxDate === false) {
                options.maxDate = false;
                update();
                return picker;
            }

            if (typeof maxDate === 'string') {
                if (maxDate === 'now' || maxDate === 'moment') {
                    maxDate = getMoment();
                }
            }

            var parsedDate = parseInputDate(maxDate);

            if (!parsedDate.isValid()) {
                throw new TypeError('maxDate() Could not parse date parameter: ' + maxDate);
            }
            if (options.minDate && parsedDate.isBefore(options.minDate)) {
                throw new TypeError('maxDate() date parameter is before options.minDate: ' + parsedDate.format(actualFormat));
            }
            options.maxDate = parsedDate;
            if (options.useCurrent && !options.keepInvalid && date.isAfter(maxDate)) {
                setValue(options.maxDate);
            }
            if (viewDate.isAfter(parsedDate)) {
                viewDate = parsedDate.clone().subtract(options.stepping, 'm');
            }
            update();
            return picker;
        };

        picker.minDate = function (minDate) {
            if (arguments.length === 0) {
                return options.minDate ? options.minDate.clone() : options.minDate;
            }

            if (typeof minDate === 'boolean' && minDate === false) {
                options.minDate = false;
                update();
                return picker;
            }

            if (typeof minDate === 'string') {
                if (minDate === 'now' || minDate === 'moment') {
                    minDate = getMoment();
                }
            }

            var parsedDate = parseInputDate(minDate);

            if (!parsedDate.isValid()) {
                throw new TypeError('minDate() Could not parse date parameter: ' + minDate);
            }
            if (options.maxDate && parsedDate.isAfter(options.maxDate)) {
                throw new TypeError('minDate() date parameter is after options.maxDate: ' + parsedDate.format(actualFormat));
            }
            options.minDate = parsedDate;
            if (options.useCurrent && !options.keepInvalid && date.isBefore(minDate)) {
                setValue(options.minDate);
            }
            if (viewDate.isBefore(parsedDate)) {
                viewDate = parsedDate.clone().add(options.stepping, 'm');
            }
            update();
            return picker;
        };

        picker.defaultDate = function (defaultDate) {
            ///<signature helpKeyword="$.fn.datetimepicker.defaultDate">
            ///<summary>Returns a moment with the options.defaultDate option configuration or false if not set</summary>
            ///<returns type="Moment">date.clone()</returns>
            ///</signature>
            ///<signature>
            ///<summary>Will set the picker's inital date. If a boolean:false value is passed the options.defaultDate parameter is cleared.</summary>
            ///<param name="defaultDate" locid="$.fn.datetimepicker.defaultDate_p:defaultDate">Takes a string, Date, moment, boolean:false</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.defaultDate ? options.defaultDate.clone() : options.defaultDate;
            }
            if (!defaultDate) {
                options.defaultDate = false;
                return picker;
            }

            if (typeof defaultDate === 'string') {
                if (defaultDate === 'now' || defaultDate === 'moment') {
                    defaultDate = getMoment();
                }
            }

            var parsedDate = parseInputDate(defaultDate);
            if (!parsedDate.isValid()) {
                throw new TypeError('defaultDate() Could not parse date parameter: ' + defaultDate);
            }
            if (!isValid(parsedDate)) {
                throw new TypeError('defaultDate() date passed is invalid according to component setup validations');
            }

            options.defaultDate = parsedDate;

            if (options.defaultDate && options.inline || input.val().trim() === '') {
                setValue(options.defaultDate);
            }
            return picker;
        };

        picker.locale = function (locale) {
            if (arguments.length === 0) {
                return options.locale;
            }

            if (!moment.localeData(locale)) {
                throw new TypeError('locale() locale ' + locale + ' is not loaded from moment locales!');
            }

            options.locale = locale;
            date.locale(options.locale);
            viewDate.locale(options.locale);

            if (actualFormat) {
                initFormatting(); // reinit formatting
            }
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.stepping = function (stepping) {
            if (arguments.length === 0) {
                return options.stepping;
            }

            stepping = parseInt(stepping, 10);
            if (isNaN(stepping) || stepping < 1) {
                stepping = 1;
            }
            options.stepping = stepping;
            return picker;
        };

        picker.useCurrent = function (useCurrent) {
            var useCurrentOptions = ['year', 'month', 'day', 'hour', 'minute'];
            if (arguments.length === 0) {
                return options.useCurrent;
            }

            if (typeof useCurrent !== 'boolean' && typeof useCurrent !== 'string') {
                throw new TypeError('useCurrent() expects a boolean or string parameter');
            }
            if (typeof useCurrent === 'string' && useCurrentOptions.indexOf(useCurrent.toLowerCase()) === -1) {
                throw new TypeError('useCurrent() expects a string parameter of ' + useCurrentOptions.join(', '));
            }
            options.useCurrent = useCurrent;
            return picker;
        };

        picker.collapse = function (collapse) {
            if (arguments.length === 0) {
                return options.collapse;
            }

            if (typeof collapse !== 'boolean') {
                throw new TypeError('collapse() expects a boolean parameter');
            }
            if (options.collapse === collapse) {
                return picker;
            }
            options.collapse = collapse;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.icons = function (icons) {
            if (arguments.length === 0) {
                return $.extend({}, options.icons);
            }

            if (!(icons instanceof Object)) {
                throw new TypeError('icons() expects parameter to be an Object');
            }
            $.extend(options.icons, icons);
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.tooltips = function (tooltips) {
            if (arguments.length === 0) {
                return $.extend({}, options.tooltips);
            }

            if (!(tooltips instanceof Object)) {
                throw new TypeError('tooltips() expects parameter to be an Object');
            }
            $.extend(options.tooltips, tooltips);
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.useStrict = function (useStrict) {
            if (arguments.length === 0) {
                return options.useStrict;
            }

            if (typeof useStrict !== 'boolean') {
                throw new TypeError('useStrict() expects a boolean parameter');
            }
            options.useStrict = useStrict;
            return picker;
        };

        picker.sideBySide = function (sideBySide) {
            if (arguments.length === 0) {
                return options.sideBySide;
            }

            if (typeof sideBySide !== 'boolean') {
                throw new TypeError('sideBySide() expects a boolean parameter');
            }
            options.sideBySide = sideBySide;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.viewMode = function (viewMode) {
            if (arguments.length === 0) {
                return options.viewMode;
            }

            if (typeof viewMode !== 'string') {
                throw new TypeError('viewMode() expects a string parameter');
            }

            if (viewModes.indexOf(viewMode) === -1) {
                throw new TypeError('viewMode() parameter must be one of (' + viewModes.join(', ') + ') value');
            }

            options.viewMode = viewMode;
            currentViewMode = Math.max(viewModes.indexOf(viewMode), minViewModeNumber);

            showMode();
            return picker;
        };

        picker.toolbarPlacement = function (toolbarPlacement) {
            if (arguments.length === 0) {
                return options.toolbarPlacement;
            }

            if (typeof toolbarPlacement !== 'string') {
                throw new TypeError('toolbarPlacement() expects a string parameter');
            }
            if (toolbarPlacements.indexOf(toolbarPlacement) === -1) {
                throw new TypeError('toolbarPlacement() parameter must be one of (' + toolbarPlacements.join(', ') + ') value');
            }
            options.toolbarPlacement = toolbarPlacement;

            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.widgetPositioning = function (widgetPositioning) {
            if (arguments.length === 0) {
                return $.extend({}, options.widgetPositioning);
            }

            if ({}.toString.call(widgetPositioning) !== '[object Object]') {
                throw new TypeError('widgetPositioning() expects an object variable');
            }
            if (widgetPositioning.horizontal) {
                if (typeof widgetPositioning.horizontal !== 'string') {
                    throw new TypeError('widgetPositioning() horizontal variable must be a string');
                }
                widgetPositioning.horizontal = widgetPositioning.horizontal.toLowerCase();
                if (horizontalModes.indexOf(widgetPositioning.horizontal) === -1) {
                    throw new TypeError('widgetPositioning() expects horizontal parameter to be one of (' + horizontalModes.join(', ') + ')');
                }
                options.widgetPositioning.horizontal = widgetPositioning.horizontal;
            }
            if (widgetPositioning.vertical) {
                if (typeof widgetPositioning.vertical !== 'string') {
                    throw new TypeError('widgetPositioning() vertical variable must be a string');
                }
                widgetPositioning.vertical = widgetPositioning.vertical.toLowerCase();
                if (verticalModes.indexOf(widgetPositioning.vertical) === -1) {
                    throw new TypeError('widgetPositioning() expects vertical parameter to be one of (' + verticalModes.join(', ') + ')');
                }
                options.widgetPositioning.vertical = widgetPositioning.vertical;
            }
            update();
            return picker;
        };

        picker.calendarWeeks = function (calendarWeeks) {
            if (arguments.length === 0) {
                return options.calendarWeeks;
            }

            if (typeof calendarWeeks !== 'boolean') {
                throw new TypeError('calendarWeeks() expects parameter to be a boolean value');
            }

            options.calendarWeeks = calendarWeeks;
            update();
            return picker;
        };

        picker.showTodayButton = function (showTodayButton) {
            if (arguments.length === 0) {
                return options.showTodayButton;
            }

            if (typeof showTodayButton !== 'boolean') {
                throw new TypeError('showTodayButton() expects a boolean parameter');
            }

            options.showTodayButton = showTodayButton;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.showClear = function (showClear) {
            if (arguments.length === 0) {
                return options.showClear;
            }

            if (typeof showClear !== 'boolean') {
                throw new TypeError('showClear() expects a boolean parameter');
            }

            options.showClear = showClear;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.widgetParent = function (widgetParent) {
            if (arguments.length === 0) {
                return options.widgetParent;
            }

            if (typeof widgetParent === 'string') {
                widgetParent = $(widgetParent);
            }

            if (widgetParent !== null && typeof widgetParent !== 'string' && !(widgetParent instanceof $)) {
                throw new TypeError('widgetParent() expects a string or a jQuery object parameter');
            }

            options.widgetParent = widgetParent;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };

        picker.keepOpen = function (keepOpen) {
            if (arguments.length === 0) {
                return options.keepOpen;
            }

            if (typeof keepOpen !== 'boolean') {
                throw new TypeError('keepOpen() expects a boolean parameter');
            }

            options.keepOpen = keepOpen;
            return picker;
        };

        picker.focusOnShow = function (focusOnShow) {
            if (arguments.length === 0) {
                return options.focusOnShow;
            }

            if (typeof focusOnShow !== 'boolean') {
                throw new TypeError('focusOnShow() expects a boolean parameter');
            }

            options.focusOnShow = focusOnShow;
            return picker;
        };

        picker.inline = function (inline) {
            if (arguments.length === 0) {
                return options.inline;
            }

            if (typeof inline !== 'boolean') {
                throw new TypeError('inline() expects a boolean parameter');
            }

            options.inline = inline;
            return picker;
        };

        picker.clear = function () {
            clear();
            return picker;
        };

        picker.keyBinds = function (keyBinds) {
            options.keyBinds = keyBinds;
            return picker;
        };

        picker.getMoment = function (d) {
            return getMoment(d);
        };

        picker.debug = function (debug) {
            if (typeof debug !== 'boolean') {
                throw new TypeError('debug() expects a boolean parameter');
            }

            options.debug = debug;
            return picker;
        };

        picker.allowInputToggle = function (allowInputToggle) {
            if (arguments.length === 0) {
                return options.allowInputToggle;
            }

            if (typeof allowInputToggle !== 'boolean') {
                throw new TypeError('allowInputToggle() expects a boolean parameter');
            }

            options.allowInputToggle = allowInputToggle;
            return picker;
        };

        picker.showClose = function (showClose) {
            if (arguments.length === 0) {
                return options.showClose;
            }

            if (typeof showClose !== 'boolean') {
                throw new TypeError('showClose() expects a boolean parameter');
            }

            options.showClose = showClose;
            return picker;
        };

        picker.keepInvalid = function (keepInvalid) {
            if (arguments.length === 0) {
                return options.keepInvalid;
            }

            if (typeof keepInvalid !== 'boolean') {
                throw new TypeError('keepInvalid() expects a boolean parameter');
            }
            options.keepInvalid = keepInvalid;
            return picker;
        };

        picker.datepickerInput = function (datepickerInput) {
            if (arguments.length === 0) {
                return options.datepickerInput;
            }

            if (typeof datepickerInput !== 'string') {
                throw new TypeError('datepickerInput() expects a string parameter');
            }

            options.datepickerInput = datepickerInput;
            return picker;
        };

        picker.parseInputDate = function (parseInputDate) {
            if (arguments.length === 0) {
                return options.parseInputDate;
            }

            if (typeof parseInputDate !== 'function') {
                throw new TypeError('parseInputDate() sholud be as function');
            }

            options.parseInputDate = parseInputDate;

            return picker;
        };

        picker.disabledTimeIntervals = function (disabledTimeIntervals) {
            ///<signature helpKeyword="$.fn.datetimepicker.disabledTimeIntervals">
            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>
            ///<returns type="array">options.disabledTimeIntervals</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of
            ///options.enabledDates if such exist.</summary>
            ///<param name="dates" locid="$.fn.datetimepicker.disabledTimeIntervals_p:dates">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.disabledTimeIntervals ? $.extend({}, options.disabledTimeIntervals) : options.disabledTimeIntervals;
            }

            if (!disabledTimeIntervals) {
                options.disabledTimeIntervals = false;
                update();
                return picker;
            }
            if (!(disabledTimeIntervals instanceof Array)) {
                throw new TypeError('disabledTimeIntervals() expects an array parameter');
            }
            options.disabledTimeIntervals = disabledTimeIntervals;
            update();
            return picker;
        };

        picker.disabledHours = function (hours) {
            ///<signature helpKeyword="$.fn.datetimepicker.disabledHours">
            ///<summary>Returns an array with the currently set disabled hours on the component.</summary>
            ///<returns type="array">options.disabledHours</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of
            ///options.enabledHours if such exist.</summary>
            ///<param name="hours" locid="$.fn.datetimepicker.disabledHours_p:hours">Takes an [ int ] of values and disallows the user to select only from those hours.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.disabledHours ? $.extend({}, options.disabledHours) : options.disabledHours;
            }

            if (!hours) {
                options.disabledHours = false;
                update();
                return picker;
            }
            if (!(hours instanceof Array)) {
                throw new TypeError('disabledHours() expects an array parameter');
            }
            options.disabledHours = indexGivenHours(hours);
            options.enabledHours = false;
            if (options.useCurrent && !options.keepInvalid) {
                var tries = 0;
                while (!isValid(date, 'h')) {
                    date.add(1, 'h');
                    if (tries === 24) {
                        throw 'Tried 24 times to find a valid date';
                    }
                    tries++;
                }
                setValue(date);
            }
            update();
            return picker;
        };

        picker.enabledHours = function (hours) {
            ///<signature helpKeyword="$.fn.datetimepicker.enabledHours">
            ///<summary>Returns an array with the currently set enabled hours on the component.</summary>
            ///<returns type="array">options.enabledHours</returns>
            ///</signature>
            ///<signature>
            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledHours if such exist.</summary>
            ///<param name="hours" locid="$.fn.datetimepicker.enabledHours_p:hours">Takes an [ int ] of values and allows the user to select only from those hours.</param>
            ///</signature>
            if (arguments.length === 0) {
                return options.enabledHours ? $.extend({}, options.enabledHours) : options.enabledHours;
            }

            if (!hours) {
                options.enabledHours = false;
                update();
                return picker;
            }
            if (!(hours instanceof Array)) {
                throw new TypeError('enabledHours() expects an array parameter');
            }
            options.enabledHours = indexGivenHours(hours);
            options.disabledHours = false;
            if (options.useCurrent && !options.keepInvalid) {
                var tries = 0;
                while (!isValid(date, 'h')) {
                    date.add(1, 'h');
                    if (tries === 24) {
                        throw 'Tried 24 times to find a valid date';
                    }
                    tries++;
                }
                setValue(date);
            }
            update();
            return picker;
        };

        picker.viewDate = function (newDate) {
            ///<signature helpKeyword="$.fn.datetimepicker.viewDate">
            ///<summary>Returns the component's model current viewDate, a moment object or null if not set.</summary>
            ///<returns type="Moment">viewDate.clone()</returns>
            ///</signature>
            ///<signature>
            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>
            ///<param name="newDate" locid="$.fn.datetimepicker.date_p:newDate">Takes string, viewDate, moment, null parameter.</param>
            ///</signature>
            if (arguments.length === 0) {
                return viewDate.clone();
            }

            if (!newDate) {
                viewDate = date.clone();
                return picker;
            }

            if (typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {
                throw new TypeError('viewDate() parameter must be one of [string, moment or Date]');
            }

            viewDate = parseInputDate(newDate);
            viewUpdate();
            return picker;
        };

        // initializing element and component attributes
        if (element.is('input')) {
            input = element;
        } else {
            input = element.find(options.datepickerInput);
            if (input.size() === 0) {
                input = element.find('input');
            } else if (!input.is('input')) {
                throw new Error('CSS class "' + options.datepickerInput + '" cannot be applied to non input element');
            }
        }

        if (element.hasClass('input-group')) {
            // in case there is more then one 'input-group-addon' Issue #48
            if (element.find('.datepickerbutton').size() === 0) {
                component = element.find('.input-group-addon');
            } else {
                component = element.find('.datepickerbutton');
            }
        }

        if (!options.inline && !input.is('input')) {
            throw new Error('Could not initialize DateTimePicker without an input element');
        }

        // Set defaults for date here now instead of in var declaration
        date = getMoment();
        viewDate = date.clone();

        $.extend(true, options, dataToOptions());

        picker.options(options);

        initFormatting();

        attachDatePickerElementEvents();

        if (input.prop('disabled')) {
            picker.disable();
        }
        if (input.is('input') && input.val().trim().length !== 0) {
            setValue(parseInputDate(input.val().trim()));
        } else if (options.defaultDate && input.attr('placeholder') === undefined) {
            setValue(options.defaultDate);
        }
        if (options.inline) {
            show();
        }
        return picker;
    };

    /********************************************************************************
     *
     * jQuery plugin constructor and defaults object
     *
     ********************************************************************************/

    $.fn.datetimepicker = function (options) {
        return this.each(function () {
            var $this = $(this);
            if (!$this.data('DateTimePicker')) {
                // create a private copy of the defaults object
                options = $.extend(true, {}, $.fn.datetimepicker.defaults, options);
                $this.data('DateTimePicker', dateTimePicker($this, options));
            }
        });
    };

    $.fn.datetimepicker.defaults = {
        timeZone: 'Etc/UTC',
        format: false,
        dayViewHeaderFormat: 'MMMM YYYY',
        extraFormats: false,
        stepping: 1,
        minDate: false,
        maxDate: false,
        useCurrent: true,
        collapse: true,
        locale: moment.locale(),
        defaultDate: false,
        disabledDates: false,
        enabledDates: false,
        icons: {
            time: 'glyphicon glyphicon-time',
            date: 'glyphicon glyphicon-calendar',
            up: 'glyphicon glyphicon-chevron-up',
            down: 'glyphicon glyphicon-chevron-down',
            previous: 'glyphicon glyphicon-chevron-left',
            next: 'glyphicon glyphicon-chevron-right',
            today: 'glyphicon glyphicon-screenshot',
            clear: 'glyphicon glyphicon-trash',
            close: 'glyphicon glyphicon-remove'
        },
        tooltips: {
            today: 'Go to today',
            clear: 'Clear selection',
            close: 'Close the picker',
            selectMonth: 'Select Month',
            prevMonth: 'Previous Month',
            nextMonth: 'Next Month',
            selectYear: 'Select Year',
            prevYear: 'Previous Year',
            nextYear: 'Next Year',
            selectDecade: 'Select Decade',
            prevDecade: 'Previous Decade',
            nextDecade: 'Next Decade',
            prevCentury: 'Previous Century',
            nextCentury: 'Next Century',
            pickHour: 'Pick Hour',
            incrementHour: 'Increment Hour',
            decrementHour: 'Decrement Hour',
            pickMinute: 'Pick Minute',
            incrementMinute: 'Increment Minute',
            decrementMinute: 'Decrement Minute',
            pickSecond: 'Pick Second',
            incrementSecond: 'Increment Second',
            decrementSecond: 'Decrement Second',
            togglePeriod: 'Toggle Period',
            selectTime: 'Select Time'
        },
        useStrict: false,
        sideBySide: false,
        daysOfWeekDisabled: false,
        calendarWeeks: false,
        viewMode: 'days',
        toolbarPlacement: 'default',
        showTodayButton: false,
        showClear: false,
        showClose: false,
        widgetPositioning: {
            horizontal: 'auto',
            vertical: 'auto'
        },
        widgetParent: null,
        ignoreReadonly: false,
        keepOpen: false,
        focusOnShow: true,
        inline: false,
        keepInvalid: false,
        datepickerInput: '.datepickerinput',
        keyBinds: {
            up: function up(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(7, 'd'));
                } else {
                    this.date(d.clone().add(this.stepping(), 'm'));
                }
            },
            down: function down(widget) {
                if (!widget) {
                    this.show();
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(7, 'd'));
                } else {
                    this.date(d.clone().subtract(this.stepping(), 'm'));
                }
            },
            'control up': function controlUp(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(1, 'y'));
                } else {
                    this.date(d.clone().add(1, 'h'));
                }
            },
            'control down': function controlDown(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(1, 'y'));
                } else {
                    this.date(d.clone().subtract(1, 'h'));
                }
            },
            left: function left(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(1, 'd'));
                }
            },
            right: function right(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(1, 'd'));
                }
            },
            pageUp: function pageUp(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().subtract(1, 'M'));
                }
            },
            pageDown: function pageDown(widget) {
                if (!widget) {
                    return;
                }
                var d = this.date() || this.getMoment();
                if (widget.find('.datepicker').is(':visible')) {
                    this.date(d.clone().add(1, 'M'));
                }
            },
            enter: function enter() {
                this.hide();
            },
            escape: function escape() {
                this.hide();
            },
            //tab: function (widget) { //this break the flow of the form. disabling for now
            //    var toggle = widget.find('.picker-switch a[data-action="togglePicker"]');
            //    if(toggle.length > 0) toggle.click();
            //},
            'control space': function controlSpace(widget) {
                if (widget.find('.timepicker').is(':visible')) {
                    widget.find('.btn[data-action="togglePeriod"]').click();
                }
            },
            t: function t() {
                this.date(this.getMoment());
            },
            'delete': function _delete() {
                this.clear();
            }
        },
        debug: false,
        allowInputToggle: false,
        disabledTimeIntervals: false,
        disabledHours: false,
        enabledHours: false,
        viewDate: false
    };
});

},{"jquery":"jquery","moment":"moment"}],44:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// http://spin.js.org/#v2.3.2
!function (a, b) {
  "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = b() : "function" == typeof define && define.amd ? define(b) : a.Spinner = b();
}(undefined, function () {
  "use strict";
  function a(a, b) {
    var c,
        d = document.createElement(a || "div");for (c in b) {
      d[c] = b[c];
    }return d;
  }function b(a) {
    for (var b = 1, c = arguments.length; c > b; b++) {
      a.appendChild(arguments[b]);
    }return a;
  }function c(a, b, c, d) {
    var e = ["opacity", b, ~~(100 * a), c, d].join("-"),
        f = .01 + c / d * 100,
        g = Math.max(1 - (1 - a) / b * (100 - f), a),
        h = j.substring(0, j.indexOf("Animation")).toLowerCase(),
        i = h && "-" + h + "-" || "";return m[e] || (k.insertRule("@" + i + "keyframes " + e + "{0%{opacity:" + g + "}" + f + "%{opacity:" + a + "}" + (f + .01) + "%{opacity:1}" + (f + b) % 100 + "%{opacity:" + a + "}100%{opacity:" + g + "}}", k.cssRules.length), m[e] = 1), e;
  }function d(a, b) {
    var c,
        d,
        e = a.style;if (b = b.charAt(0).toUpperCase() + b.slice(1), void 0 !== e[b]) return b;for (d = 0; d < l.length; d++) {
      if (c = l[d] + b, void 0 !== e[c]) return c;
    }
  }function e(a, b) {
    for (var c in b) {
      a.style[d(a, c) || c] = b[c];
    }return a;
  }function f(a) {
    for (var b = 1; b < arguments.length; b++) {
      var c = arguments[b];for (var d in c) {
        void 0 === a[d] && (a[d] = c[d]);
      }
    }return a;
  }function g(a, b) {
    return "string" == typeof a ? a : a[b % a.length];
  }function h(a) {
    this.opts = f(a || {}, h.defaults, n);
  }function i() {
    function c(b, c) {
      return a("<" + b + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', c);
    }k.addRule(".spin-vml", "behavior:url(#default#VML)"), h.prototype.lines = function (a, d) {
      function f() {
        return e(c("group", { coordsize: k + " " + k, coordorigin: -j + " " + -j }), { width: k, height: k });
      }function h(a, h, i) {
        b(m, b(e(f(), { rotation: 360 / d.lines * a + "deg", left: ~~h }), b(e(c("roundrect", { arcsize: d.corners }), { width: j, height: d.scale * d.width, left: d.scale * d.radius, top: -d.scale * d.width >> 1, filter: i }), c("fill", { color: g(d.color, a), opacity: d.opacity }), c("stroke", { opacity: 0 }))));
      }var i,
          j = d.scale * (d.length + d.width),
          k = 2 * d.scale * j,
          l = -(d.width + d.length) * d.scale * 2 + "px",
          m = e(f(), { position: "absolute", top: l, left: l });if (d.shadow) for (i = 1; i <= d.lines; i++) {
        h(i, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
      }for (i = 1; i <= d.lines; i++) {
        h(i);
      }return b(a, m);
    }, h.prototype.opacity = function (a, b, c, d) {
      var e = a.firstChild;d = d.shadow && d.lines || 0, e && b + d < e.childNodes.length && (e = e.childNodes[b + d], e = e && e.firstChild, e = e && e.firstChild, e && (e.opacity = c));
    };
  }var j,
      k,
      l = ["webkit", "Moz", "ms", "O"],
      m = {},
      n = { lines: 12, length: 7, width: 5, radius: 10, scale: 1, corners: 1, color: "#000", opacity: .25, rotate: 0, direction: 1, speed: 1, trail: 100, fps: 20, zIndex: 2e9, className: "spinner", top: "50%", left: "50%", shadow: !1, hwaccel: !1, position: "absolute" };if (h.defaults = {}, f(h.prototype, { spin: function spin(b) {
      this.stop();var c = this,
          d = c.opts,
          f = c.el = a(null, { className: d.className });if (e(f, { position: d.position, width: 0, zIndex: d.zIndex, left: d.left, top: d.top }), b && b.insertBefore(f, b.firstChild || null), f.setAttribute("role", "progressbar"), c.lines(f, c.opts), !j) {
        var g,
            h = 0,
            i = (d.lines - 1) * (1 - d.direction) / 2,
            k = d.fps,
            l = k / d.speed,
            m = (1 - d.opacity) / (l * d.trail / 100),
            n = l / d.lines;!function o() {
          h++;for (var a = 0; a < d.lines; a++) {
            g = Math.max(1 - (h + (d.lines - a) * n) % l * m, d.opacity), c.opacity(f, a * d.direction + i, g, d);
          }c.timeout = c.el && setTimeout(o, ~~(1e3 / k));
        }();
      }return c;
    }, stop: function stop() {
      var a = this.el;return a && (clearTimeout(this.timeout), a.parentNode && a.parentNode.removeChild(a), this.el = void 0), this;
    }, lines: function lines(d, f) {
      function h(b, c) {
        return e(a(), { position: "absolute", width: f.scale * (f.length + f.width) + "px", height: f.scale * f.width + "px", background: b, boxShadow: c, transformOrigin: "left", transform: "rotate(" + ~~(360 / f.lines * k + f.rotate) + "deg) translate(" + f.scale * f.radius + "px,0)", borderRadius: (f.corners * f.scale * f.width >> 1) + "px" });
      }for (var i, k = 0, l = (f.lines - 1) * (1 - f.direction) / 2; k < f.lines; k++) {
        i = e(a(), { position: "absolute", top: 1 + ~(f.scale * f.width / 2) + "px", transform: f.hwaccel ? "translate3d(0,0,0)" : "", opacity: f.opacity, animation: j && c(f.opacity, f.trail, l + k * f.direction, f.lines) + " " + 1 / f.speed + "s linear infinite" }), f.shadow && b(i, e(h("#000", "0 0 4px #000"), { top: "2px" })), b(d, b(i, h(g(f.color, k), "0 0 1px rgba(0,0,0,.1)")));
      }return d;
    }, opacity: function opacity(a, b, c) {
      b < a.childNodes.length && (a.childNodes[b].style.opacity = c);
    } }), "undefined" != typeof document) {
    k = function () {
      var c = a("style", { type: "text/css" });return b(document.getElementsByTagName("head")[0], c), c.sheet || c.styleSheet;
    }();var o = e(a("group"), { behavior: "url(#default#VML)" });!d(o, "transform") && o.adj ? i() : j = d(o, "animation");
  }return h;
});

},{}],45:[function(require,module,exports){
'use strict';

//https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
if (window.Element && !Element.prototype.closest) {
    Element.prototype.closest = function (s) {
        var matches = (this.document || this.ownerDocument).querySelectorAll(s),
            i,
            el = this;
        do {
            i = matches.length;
            while (--i >= 0 && matches.item(i) !== el) {};
        } while (i < 0 && (el = el.parentElement));
        return el;
    };
}

Number.isInteger = Number.isInteger || function (value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

//https://gist.github.com/paulirish/1579671
var requestAnimationFramePolyfill = function () {
    var clock = Date.now();

    return function (callback) {

        var currentTime = Date.now();

        if (currentTime - clock > 16) {
            clock = currentTime;
            callback(currentTime);
        } else {
            setTimeout(function () {
                polyfill(callback);
            }, 0);
        }
    };
}();

window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || requestAnimationFramePolyfill;

if (!window.Intl) {
    require('intl');
    require('intl/locale-data/jsonp/en.js');
}

//http://www.javascriptkit.com/dhtmltutors/sticky-hover-issue-solutions.shtml
var touchsupport = 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
if (!touchsupport) {
    // browser doesn't support touch
    document.documentElement.classList.add("non-touch");
}

require('smoothscroll-polyfill').polyfill();

module.exports = true;

},{"intl":"intl","intl/locale-data/jsonp/en.js":258,"smoothscroll-polyfill":262}],46:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create({

    Error: require('../../lib/MyError'),

    Resource: require('./views/Resource'),

    ViewFactory: require('./factory/View'),

    Views: require('./.ViewMap'),

    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    initialize: function initialize() {
        var _this = this;

        this.content = document.querySelector('#content');

        window.onpopstate = this.handle.bind(this);

        this.user = require('./models/User');

        this.user.on('loggedIn', function () {
            return _this.onLogin();
        });

        this.userPromise = new Promise(function (resolve, reject) {
            return _this.user.fetch().done(resolve).fail(reject);
        });

        this.footer = this.ViewFactory.create('footer', { insertion: { el: this.content, method: 'after' } });

        this.views = {};

        this.handle();
    },
    handle: function handle() {
        this.handler(window.location.pathname.split('/').slice(1));
    },
    handleHeader: function handleHeader(resource) {
        var _this2 = this;

        if (/admin/.test(resource)) {
            if (this.adminHeader) {
                this.adminHeader.onNavigation();
            } else {
                this.adminHeader = this.ViewFactory.create('adminHeader', { insertion: { el: this.content, method: 'insertBefore' } }).on('signout', function () {
                    return _this2.onSignout();
                });
            }
        } else {
            if (this.adminHeader) {
                this.adminHeader.hide();
            }
            if (this.header) {
                return;
            } else {
                this.header = this.ViewFactory.create('header', { insertion: { el: this.content, method: 'insertBefore' } }).on('navigate', this.onViewNavigate.bind(this));
            }
        }
    },
    handleFooter: function handleFooter(resource) {
        this.footer.els.container.classList.toggle('fd-hidden', /admin/.test(resource));
    },
    handler: function handler(path) {
        var _this3 = this;

        if (path[0] === 'admin' && path[1]) return this.resourceHandler(path[1]);

        var name = this.pathToView(path[0]),
            view = this.Views[name] ? path[0] : 'home';

        if (this.resources[path[0]]) view = path[0];

        this.handleHeader(path[0]);
        this.handleFooter(path[0]);

        this.userPromise.then(function () {
            if (_this3.user.id && /admin/.test(path[0])) _this3.adminHeader.onUser(_this3.user);

            if (view === _this3.currentView) return _this3.views[view].onNavigation(path.slice(1));

            Promise.all(Object.keys(_this3.views).map(function (view) {
                return _this3.views[view].hide();
            })).then(function () {

                _this3.currentView = view;

                if (_this3.views[view]) return _this3.views[view].onNavigation(path);

                _this3.views[view] = !_this3.resources[view] ? _this3.ViewFactory.create(view, {
                    insertion: { el: _this3.content },
                    path: path
                }).on('navigate', function (route, options) {
                    return _this3.navigate(route, options);
                }).on('deleted', function () {
                    return delete _this3.views[view];
                }) : new _this3.resources[view].view(_extends({ factory: _this3.ViewFactory }, _this3.resources[view].options)).on('navigate', function (route, options) {
                    return _this3.navigate(route, options);
                });

                if (!/admin/.test(path[0])) document.body.scrollTop = 0;

                return Promise.resolve();
            });
        }).catch(function (err) {
            return new _this3.Error(err);
        });
    },
    navigate: function navigate(location) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (options.replace || options.up) {
            var path = ('' + window.location.pathname).split('/');
            path.pop();
            if (options.replace) path.push(location);
            location = path.join('/');
        } else if (options.append) {
            location = window.location.pathname + '/' + location;
        }

        if (location !== window.location.pathname) history.pushState({}, '', location);
        if (!options.silent) this.handle();
    },
    onLogin: function onLogin() {
        this.onUser(this.user);
    },
    onViewNavigate: function onViewNavigate(route) {
        this.navigate(route, { trigger: true });
    },
    onSignout: function onSignout() {
        var _this4 = this;

        Object.keys(this.views).forEach(function (name) {
            _this4.views[name].delete();
            delete _this4.views[name];
        });

        this.navigate("/");
    },
    onUser: function onUser(user) {
        if (this.adminHeader) this.adminHeader.onUser(this.user);
    },
    pathToView: function pathToView(path) {
        var _this5 = this;

        var hyphenSplit = path.split('-');
        return hyphenSplit.map(function (item) {
            return _this5.capitalizeFirstLetter(item);
        }).join('');
    },
    resourceHandler: function resourceHandler(resource) {
        var _this6 = this;

        this.handleHeader('admin/' + resource);
        this.handleFooter('admin/' + resource);

        this.userPromise.then(function () {

            if (_this6.user.id) _this6.adminHeader.onUser(_this6.user);

            Object.keys(_this6.views).forEach(function (key) {
                return _this6.views[key].hide();
            });

            if (_this6.views.resource) return _this6.views.resource.update(resource);

            _this6.views.resource = new _this6.Resource({ resource: resource });
        }).catch(function (err) {
            return new _this6.Error(err);
        });
    },


    resources: {
        admin: {
            view: require('./views/Admin'),
            options: {
                collection: {
                    comparator: "name",
                    model: require('./models/Resource'),
                    parse: function parse(response) {
                        return response.resource;
                    },
                    url: "/"
                },
                fetch: { headers: { accept: "application/ld+json" } }
            }
        },
        "sign-up": { view: require('./views/Signup'), options: {} }
    }

});

},{"../../lib/MyError":199,"./.ViewMap":3,"./factory/View":8,"./models/Resource":35,"./models/User":41,"./views/Admin":87,"./views/Resource":113,"./views/Signup":118}],47:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// http://spin.js.org/#v2.3.2
!function (a, b) {
  "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = b() : "function" == typeof define && define.amd ? define(b) : a.Spinner = b();
}(undefined, function () {
  "use strict";
  function a(a, b) {
    var c,
        d = document.createElement(a || "div");for (c in b) {
      d[c] = b[c];
    }return d;
  }function b(a) {
    for (var b = 1, c = arguments.length; c > b; b++) {
      a.appendChild(arguments[b]);
    }return a;
  }function c(a, b, c, d) {
    var e = ["opacity", b, ~~(100 * a), c, d].join("-"),
        f = .01 + c / d * 100,
        g = Math.max(1 - (1 - a) / b * (100 - f), a),
        h = j.substring(0, j.indexOf("Animation")).toLowerCase(),
        i = h && "-" + h + "-" || "";return m[e] || (k.insertRule("@" + i + "keyframes " + e + "{0%{opacity:" + g + "}" + f + "%{opacity:" + a + "}" + (f + .01) + "%{opacity:1}" + (f + b) % 100 + "%{opacity:" + a + "}100%{opacity:" + g + "}}", k.cssRules.length), m[e] = 1), e;
  }function d(a, b) {
    var c,
        d,
        e = a.style;if (b = b.charAt(0).toUpperCase() + b.slice(1), void 0 !== e[b]) return b;for (d = 0; d < l.length; d++) {
      if (c = l[d] + b, void 0 !== e[c]) return c;
    }
  }function e(a, b) {
    for (var c in b) {
      a.style[d(a, c) || c] = b[c];
    }return a;
  }function f(a) {
    for (var b = 1; b < arguments.length; b++) {
      var c = arguments[b];for (var d in c) {
        void 0 === a[d] && (a[d] = c[d]);
      }
    }return a;
  }function g(a, b) {
    return "string" == typeof a ? a : a[b % a.length];
  }function h(a) {
    this.opts = f(a || {}, h.defaults, n);
  }function i() {
    function c(b, c) {
      return a("<" + b + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', c);
    }k.addRule(".spin-vml", "behavior:url(#default#VML)"), h.prototype.lines = function (a, d) {
      function f() {
        return e(c("group", { coordsize: k + " " + k, coordorigin: -j + " " + -j }), { width: k, height: k });
      }function h(a, h, i) {
        b(m, b(e(f(), { rotation: 360 / d.lines * a + "deg", left: ~~h }), b(e(c("roundrect", { arcsize: d.corners }), { width: j, height: d.scale * d.width, left: d.scale * d.radius, top: -d.scale * d.width >> 1, filter: i }), c("fill", { color: g(d.color, a), opacity: d.opacity }), c("stroke", { opacity: 0 }))));
      }var i,
          j = d.scale * (d.length + d.width),
          k = 2 * d.scale * j,
          l = -(d.width + d.length) * d.scale * 2 + "px",
          m = e(f(), { position: "absolute", top: l, left: l });if (d.shadow) for (i = 1; i <= d.lines; i++) {
        h(i, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
      }for (i = 1; i <= d.lines; i++) {
        h(i);
      }return b(a, m);
    }, h.prototype.opacity = function (a, b, c, d) {
      var e = a.firstChild;d = d.shadow && d.lines || 0, e && b + d < e.childNodes.length && (e = e.childNodes[b + d], e = e && e.firstChild, e = e && e.firstChild, e && (e.opacity = c));
    };
  }var j,
      k,
      l = ["webkit", "Moz", "ms", "O"],
      m = {},
      n = { lines: 12, length: 7, width: 5, radius: 10, scale: 1, corners: 1, color: "#000", opacity: .25, rotate: 0, direction: 1, speed: 1, trail: 100, fps: 20, zIndex: 2e9, className: "spinner", top: "50%", left: "50%", shadow: !1, hwaccel: !1, position: "absolute" };if (h.defaults = {}, f(h.prototype, { spin: function spin(b) {
      this.stop();var c = this,
          d = c.opts,
          f = c.el = a(null, { className: d.className });if (e(f, { position: d.position, width: 0, zIndex: d.zIndex, left: d.left, top: d.top }), b && b.insertBefore(f, b.firstChild || null), f.setAttribute("role", "progressbar"), c.lines(f, c.opts), !j) {
        var g,
            h = 0,
            i = (d.lines - 1) * (1 - d.direction) / 2,
            k = d.fps,
            l = k / d.speed,
            m = (1 - d.opacity) / (l * d.trail / 100),
            n = l / d.lines;!function o() {
          h++;for (var a = 0; a < d.lines; a++) {
            g = Math.max(1 - (h + (d.lines - a) * n) % l * m, d.opacity), c.opacity(f, a * d.direction + i, g, d);
          }c.timeout = c.el && setTimeout(o, ~~(1e3 / k));
        }();
      }return c;
    }, stop: function stop() {
      var a = this.el;return a && (clearTimeout(this.timeout), a.parentNode && a.parentNode.removeChild(a), this.el = void 0), this;
    }, lines: function lines(d, f) {
      function h(b, c) {
        return e(a(), { position: "absolute", width: f.scale * (f.length + f.width) + "px", height: f.scale * f.width + "px", background: b, boxShadow: c, transformOrigin: "left", transform: "rotate(" + ~~(360 / f.lines * k + f.rotate) + "deg) translate(" + f.scale * f.radius + "px,0)", borderRadius: (f.corners * f.scale * f.width >> 1) + "px" });
      }for (var i, k = 0, l = (f.lines - 1) * (1 - f.direction) / 2; k < f.lines; k++) {
        i = e(a(), { position: "absolute", top: 1 + ~(f.scale * f.width / 2) + "px", transform: f.hwaccel ? "translate3d(0,0,0)" : "", opacity: f.opacity, animation: j && c(f.opacity, f.trail, l + k * f.direction, f.lines) + " " + 1 / f.speed + "s linear infinite" }), f.shadow && b(i, e(h("#000", "0 0 4px #000"), { top: "2px" })), b(d, b(i, h(g(f.color, k), "0 0 1px rgba(0,0,0,.1)")));
      }return d;
    }, opacity: function opacity(a, b, c) {
      b < a.childNodes.length && (a.childNodes[b].style.opacity = c);
    } }), "undefined" != typeof document) {
    k = function () {
      var c = a("style", { type: "text/css" });return b(document.getElementsByTagName("head")[0], c), c.sheet || c.styleSheet;
    }();var o = e(a("group"), { behavior: "url(#default#VML)" });!d(o, "transform") && o.adj ? i() : j = d(o, "animation");
  }return h;
});

},{}],48:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var alias1 = container.lambda,
                alias2 = container.escapeExpression;

            return "                        <th class=\"w" + alias2(alias1(depth0 != null ? depth0.width : depth0, depth0)) + "\" data-sort=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\">" + alias2(alias1(depth0 != null ? depth0.label : depth0, depth0)) + "</th>                    ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<div data-js=\"container\" class=\"col-sm-10 col-sm-offset-1\"><div class=\"sub-heading\">Resources</div><div class=\"row mytable\"><table data-js=\"table\"><thead data-js=\"header\"><tr class=\"clearfix\">                    " + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.fields : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "                </tr></thead><tbody data-js=\"body\"></tbody></table></div></div>";
        }, "useData": true });
};

},{}],49:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var stack1;

            return (stack1 = container.lambda(depth0, depth0)) != null ? stack1 : "";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<form class=\"form-horizontal create-instance\">" + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.fields : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "</form>";
        }, "useData": true });
};

},{}],50:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class='intro'>" + p.intro + "</div><p>" + p.paragraph + "</p>";
};

},{}],51:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<span class=\"help-block " + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" data-js=\"fieldError\">" + alias4((helper = (helper = helpers.error || (depth0 != null ? depth0.error : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "error", "hash": {}, "data": data }) : helper)) + "</span>";
        }, "useData": true });
};

},{}],52:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><select data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\"><option value=\"true\">True</option><option value=\"false\">False</option></select></div></div>";
        }, "useData": true });
};

},{}],53:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><div class=\"input-group date\"><input data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" type=\"text\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\"/><span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span></div></div></div>";
        }, "useData": true });
};

},{}],54:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><select data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\"><option value=\"0\">Sunday</option><option value=\"1\">Monday</option><option value=\"2\">Tuesday</option><option value=\"3\">Wednesday</option><option value=\"4\">Thursday</option><option value=\"5\">Friday</option><option value=\"6\">Saturday</option></select></div></div>";
        }, "useData": true });
};

},{}],55:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group file-upload\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><button type=\"button\" data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "Btn\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "-btn\" class=\"btn btn-primary upload-wrap " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\"><span>Upload File</span><input type=\"file\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" /></button><img class=\"preview\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "-preview\" data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "Preview\" /></div></div>";
        }, "useData": true });
};

},{}],56:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            return "password";
        }, "3": function _(container, depth0, helpers, partials, data) {
            return "text";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1,
                helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><input data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" type=\"" + ((stack1 = helpers["if"].call(alias1, depth0 != null ? depth0.password : depth0, { "name": "if", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.program(3, data, 0), "data": data })) != null ? stack1 : "") + "\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\"/></div></div>";
        }, "useData": true });
};

},{}],57:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "<div class=\"form-group\"><label for=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"col-sm-3 control-label\">" + alias4((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "label", "hash": {}, "data": data }) : helper)) + "</label><div class=\"col-sm-9\"><textarea data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" class=\"form-control " + alias4((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "class", "hash": {}, "data": data }) : helper)) + "\" id=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" rows=\"4\"></textarea></div></div>";
        }, "useData": true });
};

},{}],58:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var stack1,
                helper,
                alias1 = depth0 != null ? depth0 : {},
                alias2 = helpers.helperMissing,
                alias3 = "function",
                alias4 = container.escapeExpression;

            return "        <td class=\"w" + alias4((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "width", "hash": {}, "data": data }) : helper)) + " " + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\" data-js=\"" + alias4((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "name", "hash": {}, "data": data }) : helper)) + "\">" + ((stack1 = (helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "value", "hash": {}, "data": data }) : helper)) != null ? stack1 : "") + "</td>    ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1,
                helper,
                alias1 = depth0 != null ? depth0 : {};

            return "<tr data-id=\"" + container.escapeExpression((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing, typeof helper === "function" ? helper.call(alias1, { "name": "id", "hash": {}, "data": data }) : helper)) + "\"  class=\"clearfix\" data-js=\"container\">    " + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.values : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "</tr>";
        }, "useData": true });
};

},{}],59:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            return "<div data-js=\"invalidLoginError\" class=\"alert alert-danger\" role=\"alert\">Invalid Credentials</div>";
        }, "useData": true });
};

},{}],60:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var alias1 = container.lambda,
                alias2 = container.escapeExpression;

            return "            <div class=\"form-group\"><label for=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\" class=\"col-sm-3 control-label\">" + alias2(alias1(depth0 != null ? depth0.label : depth0, depth0)) + "</label><div class=\"col-sm-9\"><input type=\"" + alias2(alias1(depth0 != null ? depth0.type : depth0, depth0)) + "\" class=\"form-control\" data-js=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\"></div></div>        ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<div data-js=\"container\" class=\"container col-sm-4 col-sm-offset-4\"><div class=\"heading\">Login</div><form class=\"form-horizontal\">        " + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.fields : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </form><div class=\"text-center\"><button data-js=\"loginBtn\" type=\"button\" class=\"btn btn-primary\">Log In</button></div></div>";
        }, "useData": true });
};

},{}],61:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            return "<div data-js=\"container\" class=\"modal fade\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div data-js=\"header\" class=\"modal-header\"><button data-js=\"closeBtn\" type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\" data-js=\"title\"></h4></div><div data-js=\"body\" class=\"modal-body\"></div><div data-js=\"footer\" class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-js=\"cancelBtn\" data-dismiss=\"modal\">Close</button><button type=\"button\" class=\"btn btn-primary\" data-js=\"confirmBtn\">Save</button></div></div></div></div>";
        }, "useData": true });
};

},{}],62:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var alias1 = container.lambda,
                alias2 = container.escapeExpression;

            return "                        <th class=\"w" + alias2(alias1(depth0 != null ? depth0.width : depth0, depth0)) + "\" data-sort=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\">" + alias2(alias1(depth0 != null ? depth0.label : depth0, depth0)) + "</th>                    ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<div data-js=\"container\" class=\"col-sm-10 col-sm-offset-1 resource\"><div class=\"sub-heading\"><span data-js=\"subHeading\"></span><button data-js=\"createBtn\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-plus\"></span></button></div><div class=\"row mytable\"><button data-js=\"editBtn\" class=\"btn btn-primary edit-btn hide\"><span class=\"glyphicon glyphicon-pencil\"></span></button><button data-js=\"deleteBtn\" class=\"btn btn-primary delete-btn hide\"><span class=\"glyphicon glyphicon-remove\"></span></button><table data-js=\"table\"><thead data-js=\"header\"><tr class=\"clearfix\">                    " + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.fields : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "                </tr></thead><tbody data-js=\"body\"></tbody></table></div></div>";
        }, "useData": true });
};

},{}],63:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "1": function _(container, depth0, helpers, partials, data) {
            var alias1 = container.lambda,
                alias2 = container.escapeExpression;

            return "        <td class=\"w" + alias2(alias1(depth0 != null ? depth0.width : depth0, depth0)) + "\" data-js=\"" + alias2(alias1(depth0 != null ? depth0.name : depth0, depth0)) + "\">" + alias2(alias1(depth0 != null ? depth0.value : depth0, depth0)) + "</td>    ";
        }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            var stack1;

            return "<tr class=\"clearfix\" data-js=\"container\">    " + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {}, depth0 != null ? depth0.values : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "</tr>";
        }, "useData": true });
};

},{}],64:[function(require,module,exports){
"use strict";

module.exports = function (Handlebars) {

    return Handlebars.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
            return "<div data-js=\"serverError\" class=\"alert alert-danger\" role=\"alert\">Unknown error, please try again or contact us at admin@wellpledge.com</div>";
        }, "useData": true });
};

},{}],65:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div data-js=\"container\" class=\"Signup\">\n    <h1>Sign Up</h1>\n    <h2 data-js=\"intro\">Welcome to our CSA Sign Up Page</h2>\n    <section>\n        <div data-js=\"walkthrough\"></div>\n        <div class=\"nav-arrows\">\n            <div data-js=\"leftBtn\">\n                <span class=\"glyphicon glyphicon-menu-left\"></span>\n                <span>Back</span>\n            </div>\n            <div data-js=\"rightBtn\">\n                <span>Next</span>\n                <span class=\"glyphicon glyphicon-menu-right\"></span>\n            </div>\n        </div>\n    </section>\n</div>";
};

},{}],66:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"DateSelection\" data-js=\"container\">\n    <div>Not going to be around?</div>\n    <div>Please choose any dates for which you will not be available to receive or pick up your share.</div>\n    <ul data-js=\"shares\"></ul>\n</div>";
};

},{}],67:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"Delivery\" data-js=\"container\">\n    <p>Please select a delivery option for your share(s).</p>\n    <ul data-js=\"shares\"></ul>\n</div>";
};

},{}],68:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li class=\"delivery-option\" data-id=\"" + p.id + "\" data-js=\"container\">\n    <div>" + p.label + "</div>\n    <div data-js=\"deliveryPrice\">" + p.price + " / week</span></div>\n</li>";
};

},{}],69:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"delivery-options\">\n    <div>\n        <div class=\"share-label\">\n            <div>" + p.label + "</div>\n            <div>\n                <span>" + p.humanStartdate + "</span>\n                <span>-</span>\n                <span>" + p.humanEnddate + "</span>\n            </div>\n            <div>" + p.duration + " weeks</div>\n        </div>\n        <div>\n            <div data-js=\"options\" class=\"options\"></div>\n            <div data-js=\"feedback\" class=\"feedback-messages\"></div>\n        </div>\n    </div>\n    <div data-js=\"dropoffs\"></div>\n    <div class=\"error\">Please select a valid option.</div>\n</li>";
};

},{}],70:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div data-js="container" class="dropoff">\n    <div>' + p.label + '</div>\n    <div>' + (p.venue || '') + '</div>\n    <div>' + p.street + '</div>\n    <div>' + p.cityStateZip + '</div>\n    <div>' + p.dayOfWeek + ' : ' + p.starttime + ' - ' + p.endtime + '</div>\n</div>';
};

},{}],71:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div class=\"dropoffs\" data-js=\"container\"></div>";
};

},{}],72:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div>On-farm pickup available " + p.dayOfWeek + " " + p.starttime + " - " + p.endtime + "</div>";
};

},{}],73:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div>Home delivery available " + p.dayOfWeek + " " + p.starttime + " - " + p.endtime + "</div>";
};

},{}],74:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"payment-option\">\n    <div>" + p.label + "</div>\n    <div>" + p.note + "</div>\n    <div class=\"method-total\"></div>    \n</li>";
};

},{}],75:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<ul class=\"payment-options\" data-js=\"container\"></ul>";
};

},{}],76:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div data-js="container" class="pickup-date ' + (p.selected ? 'selected' : '') + ' ' + (p.unselectable ? 'unselectable' : '') + '">\n    <div>' + p.dayOfWeek + '</div>\n    <div>' + p.month + '</div>\n    <div>' + p.dayOfMonth + '</div>\n</div>';
};

},{}],77:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"share-dates\">\n    <div>\n        <div class=\"share-label\">\n            <div>" + p.label + "</div>\n            <div>\n                <span>" + p.humanStartdate + "</span>\n                <span>-</span>\n                <span>" + p.humanEnddate + "</span>\n            </div>\n            <div>" + p.duration + " weeks</div>\n        </div>\n        <div data-js=\"dates\"></div>\n    </div>\n    <div class=\"error\">Please select at least one date to receive a share.</div>\n</li>";
};

},{}],78:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\" class=\"share\" data-id=\"" + p.id + "\">\n    <div>\n        <div data-js=\"shareBox\"></div>\n        <div>" + p.description + "</div>\n    </div>\n</li>";
};

},{}],79:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var options = p.options.map(function (option) {
        return '<option value="' + option.id + '">' + option.label + '</option>';
    }).join(''),
        description = p.description ? '<span data-js="optionIcon" class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>' : '';

    return '' + ('<div data-js="container" class="share-option">\n    <div class="option-title">\n        <div>\n            <span>' + p.label + '</span>\n            ' + description + '\n       </div>\n        <div>\n            <select data-js="input" class="form-control">\n                ' + options + '\n            </select>    \n        </div>\n    </div>\n    <div class="total">\n        <div data-js="total"></div>\n    </div>\n</div>');
};

},{}],80:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"ShareOptions\" data-js=\"container\">\n    <p>Please make selections to customize your box</p>\n    <ul data-js=\"shares\"></ul>\n</div>";
};

},{}],81:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"Shares\" data-js=\"container\">\n    <p>As a member in our CSA program, you will receive a weekly box of fresh-picked, chemical-free produce all grown at Patchwork Gardens, right here in the Miami Valley.</p>\n    <p>If you\u2019re not quite sure you\u2019re ready for a CSA, check out our <span data-js=\"csaInfoBtn\" class=\"link\">CSA Program</span> page for more information</p>\n    <h2>Please select which season(s) you would like to join us</h2>\n    <ul data-js=\"shares\"></ul>\n    <div class=\"error\">Please select at least one share.</div>\n</div>";
};

},{}],82:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<li data-js=\"container\">\n    <div data-js=\"row\" class=\"single-share\">\n        <div data-js=\"shareBox\"></div>\n        <div data-js=\"options\"></div>\n    </div>\n    <div><span>Share Total: </span><span data-js=\"total\"></span></div>\n</li>";
};

},{}],83:[function(require,module,exports){
'use strict';

module.exports = function (p) {

    var shares = p.shares.map(function (share) {

        var selectedOptions = share.selectedOptions.map(function (opt) {
            return '<div class="item-row">\n            <div>' + opt.optionName + '</div>\n            <div>\n                <span>' + opt.selectedOptionLabel + '</span>\n                <span>' + (p.unit || '') + '</span>\n            </div>\n            <div class="price">\n                <span>' + opt.price + '</span>\n                <span>per week</span>\n            </div>\n        </div>';
        }).join('');

        var groupdropoff = share.selectedDelivery.groupdropoff ? '<div class="item-row">\n            <div>Drop-off Location</div>\n            <div>' + share.selectedDelivery.groupdropoff + '</div>\n        </div>' : '';

        var skipDays = share.skipDays ? '<div>\n            <div class="section-title">Dates You Will Not Pickup</div>\n            <div class="pickup-dates">' + share.skipDays.join('') + '</div>\n        </div>' : '';

        return '' + ('<div class="share-summary">\n        <div>' + share.shareBox + '</div>\n        <div>\n            <div class="section-title">Share Options</div>\n            ' + selectedOptions + '\n        </div>\n        <div>\n            <div class="section-title">Delivery</div>\n            <div class="item-row">\n                <div>Method</div>\n                <div>' + share.selectedDelivery.deliveryType + '</div>\n                <div class="price">\n                    <span>' + share.selectedDelivery.weeklyCost + '</span>\n                    <span>per week</span>\n                </div>  \n            </div>\n            ' + groupdropoff + '\n            <div class="item-row">\n                <div>Address</div>\n                <div>' + share.selectedDelivery.address + '</div>\n            </div>\n            <div class="item-row">\n                <div>Pick-up Hours</div>\n                <div>\n                    <span>' + share.selectedDelivery.dayOfWeek + ' </span>\n                    <span>' + share.selectedDelivery.starttime + ' - ' + share.selectedDelivery.endtime + '</span>\n                </div>\n            </div>\n        </div>\n        <div>\n            <div class="section-title">Dates Selected for Delivery</div>\n            <div class="item-row">\n                <div>Number of weeks selected</div>\n                <div>' + share.weeksSelected + '</div>\n            </div>\n            <div class="pickup-dates">\n                ' + share.selectedDates.join('') + '\n            </div>\n        </div>\n        ' + skipDays + '\n        <div class="share-total">\n            <div class="section-title">Share Total</div>\n            <div>\n                <div>Weekly Price :</div>\n                <div>' + share.weeklyPrice + '</div>\n            </div>\n            <div>\n                <div>Number of Weeks :</div>\n                <div>' + share.weeksSelected + '</div>\n            </div>\n            <div>\n                <div>Share Total :</div>\n                <div>' + share.total + '</div>\n            </div>\n        </div>\n    </div>');
    }).join('');

    return '' + ('<div data-js="container" class="Summary ' + p.containerClass + '">\n    <div class="summaries">\n        ' + shares + '\n    </div>\n    <div data-js="grandTotal" class="grand-total"></div>\n    <div class="payment">    \n        <h2>Select a method of payment</h2>\n        <div data-js="paymentOptions"></div>\n        <form data-js="paymentForm" class="hide">\n            <div class="credit-card-info">\n                <label class="control-label number">Card Number</label>\n                <div>\n                    <input type="text" class="form-control" data-js="number" id="number">\n                    <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                </div>\n                <div>Visa, MasterCard, American Express, JCB, Discover, and Diners Club are accepted</div>\n            </div>\n            <div class="expiration">\n                <div>\n                    <label class="control-label">Exp Month</label>\n                    <div>\n                        <input type="number" class="form-control" data-js="exp_month" maxlength="2" size="3" placeholder="mm" id="exp_month">\n                        <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                    </div>\n                </div>\n                <div>\n                    <label class="control-label">Exp Year</label>\n                    <div>\n                        <input type="number" class="form-control" data-js="exp_year" maxlength="4" size="4" placeholder="yyyy" id="exp_year">\n                        <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <label class="control-label">CVC</label>\n                <div class="cvc">\n                    <input type="number" class="form-control" data-js="cvc" maxlength="4" size="4" id="cvc">\n                    <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n                </div>\n            </div>\n        </form>\n        <div class="button-row">\n            <button data-js="signupBtn" class="disabled">Become a Member!</button>\n        </div>\n    </div>\n</div>');
};

},{}],84:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div>Because you have selected home delivery, and your address could not be validated automatically, we would like you to verify your address and zip code</div>\n    <form class=\"form-horizontal\">\n        <div class=\"form-group\">\n            <label class=\"col-sm-3 control-label\">Address</label>\n            <div class=\"col-sm-9\">\n                <input type=\"text\" class=\"form-control\" id=\"verifiedAddress\" value=\"" + p.address + "\">\n            </div>\n        </div>\n        <div id=\"zipCodeFormGroup\" class=\"form-group\">\n            <label class=\"col-sm-3 control-label\">Zip Code</label>\n            <div class=\"col-sm-9\">\n                <input type=\"text\" class=\"form-control\" id=\"verifiedZipCode\" value=\"" + p.zipCode + "\">\n                <span id=\"zipCodeHelpBlock\" class=\"help-block hide\">Invalid Zip Code for Home Delivery</span>\n            </div>\n        </div>\n    </form>\n</div>";
};

},{}],85:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {

    tables: [{ name: 'Staff', el: 'staff', template: 'staffProfile' }],

    templates: {
        staffProfile: require('./templates/StaffProfile')
    }

});

},{"./__proto__":123,"./templates/StaffProfile":180,"./util/CustomContent":193}],86:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {

    Pikaday: require('pikaday'),

    Views: {
        buttonFlow: function buttonFlow() {
            return {
                model: Object.create(this.Model).constructor({
                    disabled: true,
                    states: {
                        start: [{ name: 'addTransaction', class: 'save-btn', text: 'Add Transaction', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmAdd', class: 'save-btn', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', class: 'reset-btn', nextState: 'start', text: 'Cancel', emit: true }]
                    }
                })
            };
        }
    },

    addTransaction: function addTransaction() {
        var _this = this;

        return this.model.post(_extends({ memberShareId: this.memberShareId }, this.model.attributes.reduce(function (memo, attr) {
            return _extends(memo, _defineProperty({}, attr, attr === 'created' ? _this.Moment(_this.els[attr].value, 'MMM D, YYYY').format('YYYY-MM-DD') : _this.els[attr].value));
        }, {}))).then(function () {
            return _this.Toast.showMessage('success', 'Transaction added!');
        }).catch(function (e) {
            _this.Error(e);_this.Toast.showMessage('error', 'Error adding transaction');
        });
    },
    onAddBlur: function onAddBlur(e) {
        isNaN(parseFloat(this.els.value.value)) ? this.els.form.classList.remove('active') : this.views.buttonFlow.enable();
    },
    onAddFocus: function onAddFocus(e) {
        this.els.form.classList.add('active');
    },
    onCancel: function onCancel() {
        this.reset();
        this.views.buttonFlow.disable();
    },
    postRender: function postRender() {
        var _this2 = this;

        this.model.attributes.forEach(function (attr) {
            _this2.els[attr].addEventListener('focus', function (e) {
                return _this2.onAddFocus(e);
            });
            _this2.els[attr].addEventListener('blur', function (e) {
                return _this2.onAddBlur(e);
            });
        });

        this.created = new this.Pikaday({ field: this.els.created, format: 'MMM D, YYYY' });

        this.views.buttonFlow.on('confirmAddClicked', function (e) {
            return _this2.addTransaction();
        });
        this.views.buttonFlow.on('cancelClicked', function (e) {
            return _this2.onCancel();
        });

        return this;
    },
    reset: function reset() {
        var _this3 = this;

        var now = this.Moment().format('MMM D, YYYY');
        this.model.attributes.forEach(function (attr) {
            return _this3.els[attr].value = attr === 'action' ? _this3.model.actions[0] : attr === 'created' ? now : '';
        });

        this.created.setMoment(now);
    },
    templateOpts: function templateOpts() {
        return { actions: this.model.actions };
    },
    update: function update(memberShareId) {
        this.memberShareId = memberShareId;
        this.reset();
    }
});

},{"./__proto__":123,"pikaday":"pikaday"}],87:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Table = require('./util/Table'),
    Admin = function Admin() {
    return Table.apply(this, arguments);
};

_extends(Admin.prototype, Table.prototype, {

    ItemView: require('./ResourceRow'),

    fields: [{ name: 'name', label: 'Name', width: 25 }, { name: 'label', label: 'Label', width: 25 }, { name: 'description', label: 'Description', width: 50 }],

    onItemClick: function onItemClick(model) {
        var _this = this;

        this.hide().then(function () {
            return _this.emit('navigate', '/admin/' + model.get('name'));
        }).catch(function (err) {
            return new _this.Error(err);
        });
    },


    requiresRole: 'admin',

    selection: true,

    template: require('../templates/admin')(require('handlebars'))

});

module.exports = Admin;

},{"../templates/admin":48,"./ResourceRow":114,"./util/Table":197,"handlebars":246}],88:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    events: {
        'signoutBtn': 'click'
    },

    templateOpts: { logo: '/static/img/logo.gif' },

    insertionMethod: 'before',

    onUser: function onUser() {
        this.els.name.textContent = this.user.get('name');
        this.els.userPanel.classList.remove('hide');
    },


    requiresLogin: false,

    onSignoutBtnClick: function onSignoutBtnClick() {
        document.cookie = 'patchworkjwt=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        this.user.clear();

        this.user.set(this.user.defaults);

        this.els.name.textContent = '';
        this.els.userPanel.classList.add('hide');

        this.emit('signout');
    }

});

},{"./__proto__":123}],89:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    events: {
        'collectionManagerBtn': 'click',
        'manageCustomerBtn': 'click',
        'reportingBtn': 'click'
    },

    model: {

        manageCustomer: { label: 'Manage Customers', roles: new Set(['admin']), url: 'manage-customer' },

        collectionManager: {
            label: 'Collection Manager',
            roles: new Set(['admin']),
            url: 'collection-manager'
        },

        reporting: { label: '~_~ Reporting ~_~', roles: new Set(['admin']), url: 'reporting' }
    },

    onCollectionManagerBtnClick: function onCollectionManagerBtnClick() {
        this.emit('navigate', 'admin-plus/collection-manager');
    },
    onManageCustomerBtnClick: function onManageCustomerBtnClick() {
        this.emit('navigate', 'admin-plus/manage-customer');
    },
    onNavigation: function onNavigation(path) {
        var _this = this;

        this.path = path;

        var key = this.keys.find(function (key) {
            return _this.model[key].url === path[0];
        });

        if (key !== undefined) return this.showView(key);

        Promise.all(Object.keys(this.model).map(function (key) {
            var view = _this.model[key].view;
            return view ? view.hide() : Promise.resolve();
        })).then(function () {
            _this.currentEl = _this.els.nav;return _this.showEl(_this.els.nav);
        }).catch(this.Error);
    },
    onReportingBtnClick: function onReportingBtnClick() {
        this.emit('navigate', 'admin-plus/reporting');
    },
    postRender: function postRender() {
        var _this2 = this;

        this.keys = Object.keys(this.model);

        this.keys.forEach(function (name, i) {
            if (_this2.user.get('roles').filter(function (role) {
                return _this2.model[name].roles.has(role);
            }).length) {
                _this2.slurpTemplate({ template: '<button data-js="' + name + 'Btn">' + _this2.model[name].label + '</button>', insertion: { el: _this2.els.nav } });
            }
        });

        this.currentEl = this.els.nav;

        if (this.path.length > 1) this.onNavigation(this.path.slice(1));

        return this;
    },
    showView: function showView(key) {
        var _this3 = this;

        return this.hideEl(this.currentEl).then(function () {
            _this3.model[key].view ? _this3.model[key].view.onNavigation(_this3.path.slice(1)) : _this3.model[key].view = _this3.factory.create(key, { insertion: { el: _this3.els.views }, path: _this3.path.slice(1) }).on('navigate', function (route, opts) {
                return _this3.emit('navigate', route, opts);
            });

            _this3.currentView = _this3.model[key].view;
            _this3.currentEl = _this3.model[key].view.getContainer();
            return Promise.resolve();
        }).catch(this.Error);
    },


    requiresLogin: true,

    requiresRole: 'admin'

});

},{"./__proto__":123}],90:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    disable: function disable() {
        var _this = this;

        Object.keys(this.model.data.states).forEach(function (stateName) {
            return _this.model.data.states[stateName].forEach(function (button) {
                var el = _this.els[button.name];
                el.removeEventListener('click', button.clickListener);
                el.classList.add('disabled');
            });
        });
    },
    enable: function enable() {
        var _this2 = this;

        Object.keys(this.model.data.states).forEach(function (stateName) {
            return _this2.model.data.states[stateName].forEach(function (button) {
                var el = _this2.els[button.name];
                el.addEventListener('click', button.clickListener);
                el.classList.remove('disabled');
            });
        });
    },
    getListener: function getListener(name, button) {
        var _this3 = this;

        return function (e) {
            if (button.nextState) e.fdNextState = _this3.onNextState(button.nextState);
            if (button.emit) _this3.emit(name + 'Clicked', e);
        };
    },
    onNextState: function onNextState(newState) {
        var _this4 = this;

        return this.hideEl(this.els[this.state]).then(function () {
            _this4.showEl(_this4.els[newState]);
            return Promise.resolve(_this4.state = newState);
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this5 = this;

        this.state = 'start';

        Object.keys(this.model.data.states).forEach(function (stateName) {
            return _this5.model.data.states[stateName].forEach(function (button) {
                var el = _this5.els[button.name];
                button.clickListener = _this5.getListener(button.name, button);
                if (!_this5.model.disabled) {
                    el.addEventListener('click', button.clickListener);
                }
            });
        });

        return this;
    }
});

},{"./__proto__":123}],91:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    model: require('../models/CollectionManager'),

    Collection: require('../models/Collection'),
    DocumentModel: require('../models/Document'),

    Templates: {
        Document: require('./templates/Document')
    },

    Views: {
        collections: function collections() {
            return {
                events: {
                    list: 'click'
                },
                model: Object.create(this.Model).constructor({
                    collection: Object.create(this.Collection),
                    delete: false,
                    fetch: true
                }),
                itemTemplate: function itemTemplate(collection) {
                    return '<span>' + collection.name + '</span>';
                },
                templateOpts: { heading: 'Collections', name: 'Collections', toggle: true }
            };
        },


        /*createCollection() {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create( this.Collection ).constructor(),
                templateOpts: { heading: 'Create Collection' }
            }
        },
         deleteCollection( model ) {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create( this.Collection ).constructor( model ),
                templateOpts: { message: `Delete "${model.name}" Collection?` }
            }
        },*/

        deleteDocument: function deleteDocument(document) {
            return {
                insertion: { el: this.els.mainPanel },
                model: Object.create(this.DocumentModel).constructor(document, { resource: this.model.git('currentCollection') }),
                templateOpts: { message: 'Delete "' + (document.label || document.name) + '" from ' + this.model.git('currentCollection') + '?' }
            };
        },
        documentList: function documentList(model) {
            return {
                model: Object.create(this.Model).constructor(_extends(model, {
                    collection: Object.create(this.DocumentModel).constructor([], { resource: this.model.git('currentCollection') }),
                    isDocumentList: true,
                    pageSize: 100,
                    skip: 0,
                    sort: { 'label': 1 },
                    scrollPagination: true
                })),
                events: { list: 'click' },
                insertion: { el: this.els.mainPanel },
                itemTemplate: this.Templates.Document
            };
        },
        documentView: function documentView(model) {
            return {
                disallowEnterKeySubmission: true,
                insertion: { el: this.els.mainPanel },
                model: model,
                templateOpts: { heading: model.git('label') || model.git('name') },
                Views: {}
            };
        }
    },

    events: {
        createCollectionBtn: 'click',
        backBtn: 'click',
        resource: 'click',

        views: {
            collections: [['deleteClicked', function (collection) {
                var _this = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this.createView('deleter', 'deleteCollection', collection));
                }).catch(this.Error);
            }], ['fetched', function () {
                var _this2 = this;

                this.showProperView(true).then(function () {
                    return _this2.views.collections.hideItems([_this2.model.git('currentCollection')]);
                }).catch(this.Error);
            }], ['itemClicked', function (model) {
                var _this3 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this3.model.set('currentCollection', model.name));
                }).catch(this.Error);
            }], ['successfulDrop', function (data) {
                this.swapDocument({ document: data.dropped, to: data.droppedOn.name, from: this.model.git('currentCollection') }).catch(this.toastError.bind(this));
            }]],
            /*createCollection: [
                [ 'deleted', function() { this.model.set( 'currentView', 'documentList' ) } ],
                [ 'posted', function( collection ) { this.views.collections.add( collection ) } ]
            ],
            deleteCollection: [
                [ 'deleted', function() { this.model.set('currentView', 'documentList' ) } ],
                [ 'modelDeleted', function( model ) { this.views.collections.remove( model ) } ]
            ],*/
            deleteDocument: [['deleted', function () {
                this.model.set('currentView', 'documentList');
            }], ['modelDeleted', function (model) {
                var _this4 = this;

                this.views.documentList.remove(model);
                this.views.documentList.getCount().then(function (count) {
                    return _this4.updateCount(count);
                }).catch(this.Error);
            }]],
            documentList: [['addClicked', function () {
                var _this5 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this5.createView('form', 'documentView', _this5.createModel('documentView')));
                }).catch(this.Error);
            }], ['itemClicked', function (document) {
                this.onDocumentSelected(document);
            }],
            //[ 'dragStart', function( type ) { this.views.collections.showDroppable( type ) } ],
            //[ 'dropped', function( data ) { this.views.collections.hideDroppable(); this.views.collections.checkDrop( data ) } ],
            ['deleteClicked', function (document) {
                var _this6 = this;

                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this6.createView('deleter', 'deleteDocument', document));
                }).catch(this.Error);
            }]],
            documentView: [['deleted', function (model) {
                this.model.set('currentView', 'documentList');
            }], ['put', function (model) {
                var _this7 = this;

                if (this.views.documentList.fetched) this.views.documentList.updateItem(this.createModel('documentView', model));
                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this7.model.set('currentView', 'documentList'));
                }).catch(this.Catch);
            }], ['posted', function (model) {
                var _this8 = this;

                if (this.views.documentList.fetched) this.views.documentList.add(model, true);
                this.clearCurrentView().then(function () {
                    return Promise.resolve(_this8.model.set('currentView', 'documentList'));
                }).catch(this.Catch);
            }]]

        }
    },

    clearCurrentView: function clearCurrentView() {
        var currentView = this.model.git('currentView');

        return currentView !== 'documentList' ? this.views[currentView].delete({ silent: true }) : this.views[currentView].hide();
    },
    createDocumentList: function createDocumentList(collectionName) {
        var _this9 = this;

        var fetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var model = this.createModel('documentList');

        this.createView('list', 'documentList', model);
        this.views.documentList.getCount().then(function (count) {
            return _this9.updateCount(count);
        }).catch(this.Error);
        return this.views.collections.unhideItems().hideItems([this.model.git('currentCollection')]);
    },
    createModel: function createModel(type) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var collection = this.views.collections.collection.store.name[this.model.git('currentCollection')];

        if (!collection) return;

        if (type === 'documentList') return collection.clientData;

        var schema = this.model.git('currentCollection') === 'Pages' ? collection.documents.find(function (doc) {
            return doc.name === data.label.replace(' ', '');
        }).schema : collection.schema;

        return Object.create(this.Model).constructor(data, _extends({ resource: this.model.git('currentCollection') }, schema));
    },
    createView: function createView(type, name) {
        var _this10 = this;

        var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        this.views[name] = this.factory.create(type, Reflect.apply(this.Views[name], this, [model]));

        if (this.events.views[name]) this.events.views[name].forEach(function (arr) {
            return _this10.views[name].on(arr[0], function (eventData) {
                return Reflect.apply(arr[1], _this10, [eventData]);
            });
        });
        this.model.set('currentView', name);
    },
    getDocument: function getDocument(collection, documentName) {
        return Object.create(this.Model).constructor({}, { resource: this.path[0] }).get({ query: { name: this.path[1] } });
    },
    onBackBtnClick: function onBackBtnClick() {
        this.emit('navigate', '/admin-plus');
    },
    onCreateCollectionBtnClick: function onCreateCollectionBtnClick() {
        var _this11 = this;

        this.clearCurrentView().then(function () {
            return Promise.resolve(_this11.createView('form', 'createCollection'));
        }).catch(this.Error);
    },
    onDocumentSelected: function onDocumentSelected(document) {
        var _this12 = this;

        return this.clearCurrentView().then(function () {
            return Promise.resolve(_this12.showDocumentView(document));
        }).catch(this.Error);
    },
    onNavigation: function onNavigation(path) {
        var _this13 = this;

        this.path = path;

        (this.isHidden() ? this.show() : Promise.resolve()).then(function () {
            return _this13.clearCurrentView();
        }).then(function () {
            return _this13.showProperView(false);
        }).catch(this.Error);
    },
    onResourceClick: function onResourceClick() {
        var _this14 = this;

        if (this.model.git('currentView') === 'documentList') return;

        this.clearCurrentView().then(function () {
            return Promise.resolve(_this14.model.set('currentView', 'documentList'));
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this15 = this;

        if (this.path.length > 0) this.model.set('currentCollection', this.path[0]);

        this.model.on('currentCollectionChanged', function () {
            return _this15.views.documentList.delete({ silent: true }).then(function () {
                return _this15.createDocumentList(_this15.model.git('currentCollection'));
            }).catch(_this15.Error);
        });

        this.model.on('currentViewChanged', function () {
            var currentView = _this15.model.git('currentView'),
                currentCollection = _this15.model.git('currentCollection'),
                path = currentView === 'documentView' ? '/' + currentCollection + '/' + _this15.views.documentView.model.git('name') : currentView === 'documentList' ? '/' + currentCollection : '';

            _this15.emit('navigate', '/admin-plus/collection-manager' + path, { silent: true });

            (currentView === 'documentList' && _this15.views.documentList.collection.data.length === 0 ? _this15.views.documentList.fetch() : Promise.resolve()).then(function () {
                return _this15.views[currentView].show();
            }).catch(_this15.Error);
        });

        return this;
    },
    showDocumentView: function showDocumentView(document) {
        this.createView('form', 'documentView', this.createModel('documentView', document));
    },
    showProperView: function showProperView() {
        var _this16 = this;

        return (this.views.documentList ? Promise.resolve() : this.createDocumentList(this.model.git('currentCollection'), this.path.length === 2 ? false : true)).then(function () {
            return _this16.path.length === 2 ? _this16.getDocument().then(function (document) {
                return Array.isArray(document) ? Promise.resolve(_this16.model.set('currentView', 'documentList')) : _this16.clearCurrentView().then(function () {
                    return Promise.resolve(_this16.showDocumentView(document, false));
                }).catch(_this16.Catch);
            }) : Promise.resolve(_this16.model.set('currentView', 'documentList'));
        });
    },
    swapDocument: function swapDocument(_ref) {
        var _this17 = this;

        var document = _ref.document,
            to = _ref.to,
            from = _ref.from;

        return this.Xhr({ method: 'PATCH', resource: 'Document', id: document._id, data: JSON.stringify({ to: to, from: from }) }).then(function () {
            return Promise.resolve(_this17.views.documentList.remove(document));
        });
    },
    toastError: function toastError(e) {
        this.Error(e);
        this.Toast.showMessage('error', 'Something went wrong. Please try again or contact Chris.');
    },
    updateCount: function updateCount(count) {
        this.els.resource.textContent = this.model.git('currentCollection') + ' (' + count + ')';
    }
});

},{"../models/Collection":10,"../models/CollectionManager":11,"../models/Document":21,"./__proto__":123,"./templates/Document":156}],92:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {

    tables: [{ name: 'contactinfo', el: 'contactInfo', template: 'contact' }],

    templates: {
        contact: require('./templates/Location')
    }

});

},{"./__proto__":123,"./templates/Location":168,"./util/CustomContent":193}],93:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), require('./util/CustomContent'), {

    CurrentShare: require('../models/CurrentShare'),
    Shares: Object.create(require('../models/__proto__'), { resource: { value: 'Share' } }),
    ShareOptions: Object.create(require('../models/__proto__'), { resource: { value: 'shareoption' } }),

    events: {
        signupBtn: 'click'
    },

    hashToElement: {
        'how-do-i-know': 'howDoIKnow'
    },

    insertAddOnDescriptions: function insertAddOnDescriptions() {
        var _this = this;

        this.ShareOptions.data.filter(function (opt) {
            return opt.name !== 'Share size';
        }).forEach(function (shareOpt) {
            var addOnInfo = _this.CurrentShare.data.produceOptions.find(function (produceOpt) {
                return produceOpt.shareoptionid === shareOpt.id && produceOpt.name === 'one';
            });

            _this.slurpTemplate({
                template: _this.templates.csaItem(_extends(addOnInfo, { heading: shareOpt.name })),
                insertion: { el: _this.els.addOnItems }
            });
        });
    },
    insertDeliveryMatrix: function insertDeliveryMatrix() {
        this.slurpTemplate({
            template: this.templates.deliveryMatrix({
                deliveryOptions: this.CurrentShare.data.deliveryOptions,
                sizeOptions: this.CurrentShare.getSizeOptions()
            }),
            insertion: { el: this.els.deliveryMatrix }
        });
    },
    insertShareDescription: function insertShareDescription(share) {
        var deliveryOpts = this.CurrentShare.data.deliveryOptions,
            sharePrice = parseFloat(this.CurrentShare.data.produceOptions.find(function (opt) {
            return opt.prompt = 'Share size' && share.name === opt.name;
        }).price.replace('$', '')),
            lowPrice = sharePrice + parseFloat(this.CurrentShare.data.deliveryOptions[0].price.replace('$', '')),
            highPrice = sharePrice + parseFloat(this.CurrentShare.data.deliveryOptions[this.CurrentShare.data.deliveryOptions.length - 1].price.replace('$', '')),
            priceRange = '$' + lowPrice.toFixed(2) + ' - $' + highPrice.toFixed(2);

        this.slurpTemplate({
            template: this.templates.csaItem(_extends(share.shareDescription, { price: priceRange })),
            insertion: { el: this.els.shareDescriptions }
        });
    },
    insertShareExample: function insertShareExample(share) {
        this.slurpTemplate({
            template: this.templates.shareExample(share.shareExample),
            insertion: { el: this.els.shareExamples }
        });
    },
    onSignupBtnClick: function onSignupBtnClick() {
        this.emit('navigate', 'sign-up');
    },
    postRender: function postRender() {
        var _this2 = this;

        require('./util/CustomContent').postRender.call(this);

        if (window.location.hash) {
            this.els[this.hashToElement[window.location.hash.slice(1)]].scrollIntoView({ behavior: 'smooth' });
        }

        Promise.all([this.CurrentShare.get(), this.Shares.get(), this.ShareOptions.get()]).then(function () {
            _this2.insertDeliveryMatrix();

            _this2.Shares.data.forEach(function (share) {
                _this2.insertShareExample(share);
                _this2.insertShareDescription(share);
            });

            _this2.insertAddOnDescriptions();
        }).catch(this.Error);

        return this;
    },


    templates: {
        csaItem: require('./templates/CsaItem'),
        deliveryMatrix: require('./templates/deliveryMatrix'),
        shareExample: require('./templates/ShareExample')
    }

});

},{"../models/CurrentShare":15,"../models/__proto__":42,"./__proto__":123,"./templates/CsaItem":151,"./templates/ShareExample":178,"./templates/deliveryMatrix":184,"./util/CustomContent":193}],94:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    MemberFoodOmission: require('../models/MemberFoodOmission'),

    clear: function clear() {
        var _this = this;

        this.fields.forEach(function (field) {
            if (field.type !== 'select') _this.els[field.name].textContent = '';
        });

        this.els.infoTable.querySelectorAll('.edited').forEach(function (el) {
            return el.classList.remove('edited');
        });

        this.FoodOmission.clear();

        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');
    },


    events: {
        onpaymentplan: 'change',
        resetBtn: 'click',
        saveBtn: 'click'
    },

    fields: [{ table: 'person', type: 'text', name: 'name', label: 'Name' }, { table: 'person', type: 'text', name: 'email', label: 'Email' }, { table: 'person', type: 'text', name: 'secondaryEmail', label: 'Secondary Email' }, { table: 'member', type: 'text', name: 'phonenumber', label: 'Phone' }, { table: 'member', type: 'text', name: 'zipcode', label: 'Zip Code' }, { table: 'member', type: 'text', name: 'address', label: 'Address' }, { table: 'memberFoodOmission', type: 'select', name: 'neverReceive', label: 'Vegetable to Never Receive' }, { table: 'member', type: 'select', name: 'onpaymentplan', label: 'On Payment Plan' }],

    getTemplateOptions: function getTemplateOptions() {
        return { fields: this.fields };
    },
    handleBlur: function handleBlur(e) {
        var el = e.target,
            field = this.fields.find(function (field) {
            return field.name === el.getAttribute('data-name');
        }),
            fieldValue = el.textContent.trim(),
            modelValue = this.model[field.table].data[field.name] || '';

        if (fieldValue !== modelValue) {
            el.classList.add('edited');
            this.editedFields[field.name] = fieldValue || null;
            this.showEditSummary();
            this.emit('edited');
        } else if (this.editedFields[field.name] !== undefined) {
            el.classList.remove('edited');
            this.editedFields[field.name] = undefined;
            this.showEditSummary();
        }
    },
    hasEdits: function hasEdits() {
        var _this2 = this;

        return Object.keys(this.editedFields).filter(function (key) {
            return _this2.editedFields[key] !== undefined;
        }).length > 0;
    },
    handleEdit: function handleEdit(e) {
        this.els.resetBtn.classList.remove('fd-hidden');
    },
    handleOmissionChange: function handleOmissionChange(e, m) {
        var values = m.val(),
            name = values.length ? m.val()[0].name : '',
            originalName = this.MemberFoodOmission.data.length ? this.MemberFoodOmission.data[0].name : '';

        if (originalName !== name) {
            this.editedFields.neverReceive = name;
            this.emit('edited');
            this.showEditSummary();
        } else if (this.editedFields.neverReceive !== undefined) {
            this.editedFields.neverReceive = undefined;
            this.showEditSummary();
        }
    },
    onOnpaymentplanChange: function onOnpaymentplanChange(e) {
        var el = e.target,
            fieldValue = Boolean(el.value === "true"),
            modelValue = this.model.member.data.onpaymentplan;

        if (modelValue !== fieldValue) {
            el.classList.add('edited');
            this.editedFields['onpaymentplan'] = Boolean(el.value === "true");
            this.emit('edited');
            this.showEditSummary();
        } else if (this.editedFields.onpaymentplan !== undefined) {
            el.classList.remove('edited');
            this.editedFields.onpaymentplan = undefined;
            this.showEditSummary();
        }
    },
    onResetBtnClick: function onResetBtnClick() {
        this.reset(this.model);
    },
    onSaveBtnClick: function onSaveBtnClick() {
        var _this3 = this;

        var resourcesToUpdate = [];

        this.memberData = {};
        this.personData = {};
        this.memberFoodOmissionData = {};

        this.fields.forEach(function (field) {
            if (_this3.editedFields[field.name] !== undefined) {
                _this3[field.table + 'Data'][field.name] = _this3.editedFields[field.name];
                if (resourcesToUpdate.indexOf(field.table) === -1) resourcesToUpdate.push(field.table);
            }
        });

        return Promise.all(resourcesToUpdate.map(function (resource) {
            return _this3['update' + (resource.charAt(0).toUpperCase() + resource.slice(1))]();
        })).then(function () {
            _this3.els.resetBtn.classList.add('fd-hidden');
            _this3.els.editSummary.classList.add('fd-hidden');

            _this3.Toast.showMessage('success', 'Customer Info Updated!');
            _this3.update(_this3.model);
        }).catch(this.Error);
    },
    populateTable: function populateTable() {
        var _this4 = this;

        this.fields.forEach(function (field) {
            if (field.type !== 'select') _this4.els[field.name].textContent = _this4.model[field.table].data[field.name];
        });

        if (this.MemberFoodOmission.data.length) {
            var datum = this.MemberFoodOmission.data[0],
                index = this.FoodOmission.Foods.data.findIndex(function (food) {
                return food.produceid == datum.produceid && food.produceid !== null || food.producefamilyid == datum.producefamilyid && datum.produceid === null;
            });

            if (index !== -1) {
                var foodDatum = this.FoodOmission.Foods.data[index];
                datum.name = foodDatum.name;
                this.FoodOmission.ms.setSelection([_extends({}, foodDatum, { id: index })]);
            }
        }

        this.els.onpaymentplan.selectedIndex = this.model.member.data.onpaymentplan ? 0 : 1;
    },
    postRender: function postRender() {
        var _this5 = this;

        this.FoodOmission = this.factory.create('foodOmission', { insertion: { el: this.els.neverReceive, method: 'after' } });

        this.els.neverReceive.remove();

        this.FoodOmission.initializeFoodOmission().then(function () {
            _this5.FoodOmission.removeHelperText();
            _this5.FoodOmission.unstyle();

            _this5.FoodOmission.on('selectionChange', function (e, m) {
                return _this5.handleOmissionChange(e, m);
            });
        });

        this.els.infoTable.querySelectorAll('div[contenteditable=true]').forEach(function (el) {
            el.addEventListener('blur', function (e) {
                return _this5.handleBlur(e);
            });
        });

        this.on('edited', function (e) {
            return _this5.handleEdit(e);
        });

        return this;
    },
    reset: function reset(customer) {
        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');
        this.update(customer);
    },
    showEditSummary: function showEditSummary() {
        var _this6 = this;

        var hasEdits = this.hasEdits();

        this.els.changes.innerHTML = '';

        this.fields.forEach(function (field) {
            if (_this6.editedFields[field.name] !== undefined) {
                var oldValue = field.name === 'neverReceive' ? _this6.MemberFoodOmission.data.length ? _this6.MemberFoodOmission.data[0].name : '' : _this6.model[field.table].data[field.name];
                var newValue = _this6.editedFields[field.name];

                if (!oldValue && field.name !== 'onpaymentplan') oldValue = 'EMPTY';
                if (!newValue && field.name !== 'onpaymentplan') newValue = 'EMPTY';

                if (field.name === 'onpaymentplan') {
                    oldValue = oldValue.toString();
                    newValue = newValue.toString();
                }

                if (oldValue === 'EMPTY' && newValue === 'EMPTY') return;

                _this6.slurpTemplate({ insertion: { el: _this6.els.changes }, template: _this6.Templates.fieldEdit({ label: field.label, oldValue: oldValue, newValue: newValue }) });
            }
        });

        this.els.resetBtn.classList.toggle('fd-hidden', !hasEdits);
        this.els.editSummary.classList.toggle('fd-hidden', !hasEdits);
    },


    Templates: {
        fieldEdit: require('./templates/FieldEdit')
    },

    update: function update(customer) {
        var _this7 = this;

        this.clear();

        this.model = customer;
        this.editedFields = {};

        return this.MemberFoodOmission.get({ query: { memberid: customer.member.data.id } }).then(function () {
            return _this7.populateTable();
        }).then(function () {
            return _this7.show();
        }).catch(this.Error);
    },
    updateMember: function updateMember() {
        var _this8 = this;

        return this.Xhr({ method: 'PATCH', id: this.model.member.data.id, resource: 'member', data: JSON.stringify(this.memberData) }).then(function () {
            return Promise.resolve(Object.keys(_this8.memberData).forEach(function (field) {
                return _this8.model.member.data[field] = _this8.memberData[field];
            }));
        });
    },
    updateMemberFoodOmission: function updateMemberFoodOmission() {
        var _this9 = this;

        var foodIdx = this.FoodOmission.Foods.data.findIndex(function (datum) {
            return datum.name == _this9.memberFoodOmissionData.neverReceive;
        });

        if (foodIdx === -1) return this.MemberFoodOmission.delete(this.MemberFoodOmission.data[0].id);

        var msData = this.FoodOmission.Foods.data[foodIdx],
            data = { memberid: this.model.member.data.id, produceid: msData.produceid, producefamilyid: msData.produceid ? null : msData.producefamilyid };

        return this.MemberFoodOmission.data.length ? this.MemberFoodOmission.patch(this.MemberFoodOmission.data[0].id, data) : this.MemberFoodOmission.post(data);
    },
    updatePerson: function updatePerson() {
        var _this10 = this;

        return this.Xhr({ method: 'PATCH', id: this.model.person.data.id, resource: 'person', data: JSON.stringify(this.personData) }).then(function () {
            return Promise.resolve(Object.keys(_this10.personData).forEach(function (field) {
                return _this10.model.person.data[field] = _this10.personData[field];
            }));
        });
    }
});

},{"../models/MemberFoodOmission":29,"./__proto__":123,"./templates/FieldEdit":159}],95:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), require('./Submitter'), {

    events: {
        cancelBtn: 'click',
        submitBtn: 'click'
    },

    onCancelBtnClick: function onCancelBtnClick() {
        this.delete();
    },
    onSubmitBtnClick: function onSubmitBtnClick() {
        var _this = this;

        if (this.submitting) return;
        this.onSubmitStart();
        this.submit().then(function () {
            return Promise.resolve(_this.onSubmitEnd());
        }).then(function () {
            return _this.delete();
        }).catch(function (e) {
            return _this.handleSubmissionError(e);
        });
    },
    submit: function submit() {
        var _this2 = this;

        return this.model.delete().then(function (keyValue) {
            _this2.emit('modelDeleted', _this2.model.data);
            _this2.Toast.showMessage('success', _this2.toastSuccess || 'Success');
            return Promise.resolve();
        });
    }
});

},{"./Submitter":119,"./__proto__":123}],96:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('./__proto__'), {

    Icons: {
        error: require('./templates/lib/error')(),
        success: require('./templates/lib/checkmark')()
    },

    bindEvents: function bindEvents() {
        document.body.addEventListener('mousedown', this.onMouseDown);
        document.body.addEventListener('mouseup', this.onMouseUp);
        document.body.addEventListener('mousemove', this.onMouseMove);
    },
    listen: function listen() {
        this.listeners++;

        if (this.listeners === 1) this.bindEvents();
    },


    name: 'Dragger',

    postRender: function postRender() {
        var _this = this;

        this.listeners = 0;

        this.onMouseDown = function (e) {
            return _this.emit('mousedown', e);
        };
        this.onMouseUp = function (e) {
            return _this.emit('mouseup', e);
        };
        this.onMouseMove = function (e) {
            return _this.emit('mousemove', e);
        };

        return this;
    },
    stopListening: function stopListening() {
        this.listeners--;

        if (this.listeners === 0) this.unbindEvents();
    },


    template: require('./templates/Dragger'),

    unbindEvents: function unbindEvents() {
        document.body.removeEventListener('mousedown', this.onMouseDown);
        document.body.removeEventListener('mouseup', this.onMouseUp);
        document.body.removeEventListener('mousemove', this.onMouseMove);
    }
}), {}).constructor();

},{"./__proto__":123,"./templates/Dragger":157,"./templates/lib/checkmark":186,"./templates/lib/error":188}],97:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    $: require('jquery'),

    Foods: require('../models/Food'),

    clear: function clear() {
        this.ms.clear();
    },
    getMagicSuggest: function getMagicSuggest() {
        return this.ms;
    },
    initializeFoodOmission: function initializeFoodOmission() {
        var _this = this;

        return this.Foods.get().then(function () {
            if (!_this.Foods.data.length) return Promise.resolve();

            var data = _this.Foods.data.map(function (food, i) {
                return _extends({ id: i }, food);
            }),
                renderer = function renderer(data) {
                return data.produceid ? '<span class="' + (data.producefamilyid ? 'produce-in-family' : '') + '">' + data.name + '</span>' : '<span class="produce-family">All ' + data.name + '</span>';
            };

            _this.ms = _this.$(_this.els.container).magicSuggest({
                allowFreeEntries: false,
                data: data,
                highlight: false,
                placeholder: '',
                maxDropHeight: 200,
                maxSelection: 1,
                renderer: renderer,
                selectionRenderer: renderer,
                valueField: 'id'
            });

            _this.ms.val = function (value) {
                return value ? _this.ms.setSelection(value) : _this.ms.getSelection();
            };

            _this.$(_this.ms).on('selectionchange', function (e, m) {
                return _this.emit('selectionChange', e, m);
            });

            return Promise.resolve();
        }).catch(this.Error);
    },
    removeHelperText: function removeHelperText() {
        this.ms.helper[0].remove();
    },
    setPlaceholder: function setPlaceholder(text) {
        this.ms.input.attr('placeholder', text);
    },
    unstyle: function unstyle() {
        this.ms.container.removeClass('form-control');
    }
});

},{"../models/Food":25,"./__proto__":123,"jquery":"jquery"}],98:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {});

},{"./__proto__":123}],99:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Submitter = require('./Submitter');

module.exports = _extends({}, require('./__proto__'), Submitter, {

    events: _extends(Submitter.events, { previewBtn: 'click' }),

    onPreviewBtnClick: function onPreviewBtnClick(e) {
        e.target.nextElementSibling.src = this.Format.ImageSrc(e.target.parentElement.previousElementSibling.value);
    },
    clear: function clear() {
        this.inputEls.forEach(function (el) {
            return el.value = '';
        });
    },
    getElementValue: function getElementValue(el, attribute) {
        if (attribute === undefined || !attribute.fk && attribute.range && typeof attribute.range === 'string') return el.value;
    },
    getFormValues: function getFormValues() {
        var _this = this;

        var attributes = this.model.attributes;

        var data = this.reducer(Object.keys(this.els), function (key) {
            return (/(INPUT|SELECT|TEXTAREA)/.test(_this.els[key].tagName) ? _defineProperty({}, key, _this.getElementValue(_this.els[key], attributes.find(function (attribute) {
                    return attribute.name === key;
                }))) : {}
            );
        });

        attributes.forEach(function (attribute) {
            if (attribute.fk) {
                data[attribute.fk] = _this.views[attribute.fk].getSelectedId();
            } else if (_typeof(attribute.range) === "object") {
                data[attribute.name] = _this.views[attribute.name].getFormValues();
            } else if (attribute.range === "List") {
                data[attribute.name] = Array.from(_this.views[attribute.name].els.list.children).map(function (itemEl) {
                    var selector = attribute.itemRange === 'Text' ? '.item textarea' : '.item input';
                    return _this.getElementValue(itemEl.querySelector(selector), { range: attribute.itemRange });
                });
            }
        });

        return data;
    },
    handleValidationError: function handleValidationError(attr) {
        this.Toast.showMessage('error', attr.error);
        this.els[attr.name].classList.add('error');
        this.onSubmitEnd();
    },
    initTypeAheads: function initTypeAheads() {
        var _this2 = this;

        this.model.attributes.forEach(function (attribute) {
            if (attribute.fk) _this2.views[attribute.fk].setResource(attribute.fk).initAutoComplete(_this2.model.git(attribute.fk));else if (_typeof(attribute.range) === "object") {
                _this2.Views[attribute.name] = {
                    disallowEnterKeySubmission: true,
                    model: Object.create(_this2.Model).constructor(_extends(_this2.model.data[attribute.name], { nested: !_this2.model.git('nested') }), { attributes: attribute.range }),
                    templateOpts: { hideButtonRow: true },
                    Views: {}
                };
                var el = _this2.els[attribute.name];
                delete _this2.els[attribute.name];
                _this2.subviewElements = [{ el: el, view: 'form', name: attribute.name }];
                _this2.renderSubviews();
            } else if (attribute.range === "List") {
                var collectionData = _this2.model.git(attribute.name) ? _this2.model.git(attribute.name).map(function (datum) {
                    return { value: datum };
                }) : [];

                _this2.Views[attribute.name] = {
                    model: Object.create(_this2.model).constructor({
                        add: true,
                        collection: Object.create(_this2.Model).constructor(collectionData, { meta: { key: 'value' } }),
                        delete: true,
                        isDocumentList: false,
                        draggable: 'listItem'
                    }),
                    itemTemplate: function itemTemplate(datum) {
                        return Reflect.apply(_this2.Format.GetFormField, _this2.Format, [{ range: attribute.itemRange }, datum.value]);
                    }
                };
                var _el = _this2.els[attribute.name];
                delete _this2.els[attribute.name];
                _this2.subviewElements = [{ el: _el, view: 'list', name: attribute.name }];
                _this2.renderSubviews();
                _this2.views[attribute.name].on('addClicked', function () {
                    return _this2.views[attribute.name].add({ value: '' });
                });
                _this2.views[attribute.name].on('deleteClicked', function (datum) {
                    return _this2.views[attribute.name].remove(datum);
                });
            }
        });
    },
    submit: function submit() {
        var _this3 = this;

        if (!this.model.validate(this.getFormValues())) return Promise.resolve();

        var isPost = !Boolean(this.model.data[this.key]);

        return (isPost ? this.model.post() : this.model.put(this.model.data[this.key], this.omit(this.model.data, [this.key]))).then(function () {
            _this3.emit(isPost ? 'posted' : 'put', _extends({}, _this3.model.data));
            _this3.model.data = {};
            _this3.clear();
            _this3.Toast.showMessage('success', _this3.toastSuccess || 'Success');
            return Promise.resolve();
        });
    },
    postRender: function postRender() {
        var _this4 = this;

        if (this.model.git('nested')) this.els.container.closest('.form-group').classList.add('vertical');
        this.inputEls = this.els.container.querySelectorAll('input, select');

        if (!this.disallowEnterKeySubmission) this.els.container.addEventListener('keyup', function (e) {
            if (e.keyCode === 13) _this4.onSubmitBtnClick();
        });

        this.inputEls.forEach(function (el) {
            return el.addEventListener('focus', function () {
                return el.classList.remove('error');
            });
        });

        if (this.model) {
            this.model.on('validationError', function (attr) {
                return _this4.handleValidationError(attr);
            });
            this.initTypeAheads();
            this.key = this.model.metadata ? this.model.metadata.key : '_id';
        }

        return this;
    }
});

},{"./Submitter":119,"./__proto__":123}],100:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {});

},{"./__proto__":123,"./util/CustomContent":193}],101:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Nav: require('../models/Nav'),

    events: {
        justify: 'click',
        navLinks: 'click',
        title: 'click'
    },

    onJustifyClick: function onJustifyClick() {
        this.els.navLinks.classList.toggle('is-mobile');
    },
    onNavLinksClick: function onNavLinksClick(e) {
        var el = e.target.closest('li');

        if (!el) return;

        this.emit('navigate', el.getAttribute('data-name'));

        if (this.els.navLinks.classList.contains('is-mobile')) this.els.navLinks.classList.remove('is-mobile');
    },
    onTitleClick: function onTitleClick() {
        this.emit('navigate', '/');
    },
    postRender: function postRender() {
        var _this = this;

        this.on('imgLoaded', function () {
            return _this.els.nav.classList.remove('fd-hidden');
        });

        return this;
    },
    templateOpts: function templateOpts() {
        return { fields: this.Nav.data, home: { label: 'Patchwork Gardens', name: 'home' } };
    }
});

},{"../models/Nav":32,"./__proto__":123}],102:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {

    events: {
        joinBtn: 'click'
    },

    onJoinBtnClick: function onJoinBtnClick() {
        this.emit('navigate', 'sign-up');
    },
    postRender: function postRender() {
        var _this = this;

        this.on('imgLoaded', function () {
            return _this.els.container.classList.add('img-loaded');
        });

        return CustomContent.postRender.call(this);
    }
});

},{"./__proto__":123,"./util/CustomContent":193}],103:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('./util/ListItem'),
    InstanceRow = function InstanceRow() {
    this.files = [];
    return ListItem.apply(this, arguments);
};

_extends(InstanceRow.prototype, ListItem.prototype, {
    getFieldValue: function getFieldValue(field) {

        var modelValue = this.model.get(field),
            isFile = false;

        if (modelValue === null) return '';

        if ((typeof modelValue === 'undefined' ? 'undefined' : _typeof(modelValue)) === "object" && (modelValue.type === "file" || modelValue.type === "Buffer")) {
            if (modelValue.src) {
                return this.$('<img/>').attr({ src: modelValue.src }).css({ height: '50px' });
            } else if (modelValue.imageEl) {
                return modelValue.imageEl;
            } else {
                isFile = true;this.files.push(field);return '<span class="glyphicon glyphicon-picture"></span>';
            }
        }

        return (typeof modelValue === 'undefined' ? 'undefined' : _typeof(modelValue)) === "object" && modelValue !== null ? modelValue.value : modelValue;
    },
    getTemplateOptions: function getTemplateOptions() {
        var _this = this;

        return {
            id: this.model.id,
            values: this.fields.map(function (field) {
                return { name: field.name, value: _this.getFieldValue(field.name), width: field.width };
            })
        };
    },
    loadFileIfVisible: function loadFileIfVisible() {
        var top = this.templateData.container[0].getBoundingClientRect().top,
            visible = top >= 0 && top <= (window.innerHeight || document.documentElement.clientHeight),
            imageLoaderModel = { id: this.model.id, columns: this.files };

        if (visible) this.imageLoader.add(imageLoaderModel);
    },
    postRender: function postRender() {
        var _this2 = this;

        ListItem.prototype.postRender.call(this);
        this.model.on('change', function () {
            return Object.keys(_this2.model.attributes).forEach(function (field) {
                return _this2.templateData[field].html(_this2.getFieldValue(field));
            });
        });

        if (this.files.length) this.$(window).on(this.util.format('scroll.throttledLoad%s', this.model.id), this.throttledLoad.bind(this));
    },
    retrievedImage: function retrievedImage(field) {
        this.files = this._(this.files).reject(function (file) {
            return file === field;
        });
        if (this.files.length === 0) this.$(window).off(this.util.format('scroll.throttledLoad%s', this.model.id));
    },
    size: function size() {
        if (this.files.length) this.loadFileIfVisible();
    },
    throttledLoad: function throttledLoad() {
        this._.throttle(this.loadFileIfVisible(), 500);
    },


    template: require('../templates/instanceRow')(require('handlebars'))

});

module.exports = InstanceRow;

},{"../templates/instanceRow":58,"./util/ListItem":196,"handlebars":246}],104:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Super = require('./__proto__');

module.exports = _extends({}, Super, {
    add: function add(datum) {
        var _this = this;

        var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!this.collection) this.collection = Object.create(this.Model);

        var keyValue = datum[this.key];
        var insertion = { el: this.els.list };

        this.collection.add(datum);
        this.collection.store[this.key][keyValue] = datum;

        if (sort && this.collection.data.length !== 1) {
            this.collection.sort(this.model.git('sort'));
            var index = this.collection.data.findIndex(function (datum) {
                return datum[_this.key] == keyValue;
            });

            if (index !== -1) insertion = this.els.list.children.item(index) ? { method: 'insertBefore', el: this.els.list.children.item(index) } : { el: this.els.list };
        }

        this.updateStyle();

        if (this.itemTemplate) {
            this.slurpTemplate({
                insertion: insertion,
                renderSubviews: true,
                template: this.getItemTemplateResult(keyValue, datum)
            });

            //this.els.list.querySelector(`*[data-key="${keyValue}"]`).scrollIntoView( { behavior: 'smooth' } )

            return;
        }

        this.itemViews[keyValue] = this.factory.create(this.model.git('view'), { insertion: insertion, model: Object.create(this.collection.model).constructor(datum) }).on('deleted', function () {
            return _this.onDeleted(datum);
        });

        this.itemViews[keyValue].els.container.scrollIntoView({ behavior: 'smooth' });
    },
    checkDrag: function checkDrag(e) {
        if (!this.dragging) return;

        e.preventDefault();

        this.Dragger.els.container.classList.remove('fd-hidden');
        this.Dragger.els.container.style.top = e.clientY + 5 + 'px';
        this.Dragger.els.container.style.left = e.clientX + 5 + 'px';

        if (this.model.git('draggable') !== 'listItem') return;

        var listItemRectangles = Array.from(this.els.list.children).map(function (item) {
            return { el: item, rectangle: item.getBoundingClientRect() };
        }),
            matchingItem = listItemRectangles.find(function (item) {
            return item.rectangle.right >= e.clientX && item.rectangle.left <= e.clientX && item.rectangle.bottom >= e.clientY && item.rectangle.top <= e.clientY;
        });

        if (!matchingItem || !matchingItem && this.dragoverEl || matchingItem && this.dragoverEl && matchingItem.el.isSameNode(this.dragging.el)) {
            if (this.dragoverEl) this.dragoverEl.classList.remove('dragover-top', 'dragover-bottom');
            this.dragoverEl = undefined;
            return;
        }

        if (matchingItem && !matchingItem.el.isSameNode(this.dragging.el)) {
            if (this.dragoverEl) this.dragoverEl.classList.remove('dragover-top', 'dragover-bottom');
            this.dragoverEl = matchingItem.el;
            var itemRect = matchingItem.el.querySelector('.item').getBoundingClientRect();

            if (e.clientY < itemRect.bottom - itemRect.height / 2) {
                if (this.dragoverEl.previousSibling && this.dragoverEl.previousSibling.isSameNode(this.dragging.el)) return;
                this.dragoverEl.classList.add('dragover-top');
            } else {
                if (this.dragoverEl.nextSibling && this.dragoverEl.nextSibling.isSameNode(this.dragging.el)) return;
                this.dragoverEl.classList.add('dragover-bottom');
            }
        }
    },
    checkDragEnd: function checkDragEnd(e) {
        if (!this.dragging) return;

        if (this.dragoverEl) {
            this.els.list.insertBefore(this.dragging.el, this.dragoverEl.classList.contains('dragover-top') ? this.dragoverEl : this.dragoverEl.nextSibling);
            this.dragoverEl.classList.remove('dragover-top', 'dragover-bottom');
            this.dragoverEl = undefined;
        }

        this.emit('dropped', { e: e, type: this.model.git('draggable'), model: this.dragging.model });
        this.dragging.el.classList.remove('is-dragging');
        this.els.list.classList.remove('is-dragging');
        this.Dragger.els.container.classList.add('fd-hidden');
        this.dragging = false;
    },
    checkDragStart: function checkDragStart(e) {
        var closestList = e.target.closest('.List');
        if (closestList === null || !closestList.isSameNode(this.els.container)) return;

        var el = e.target.closest('.item');
        if (!el) return null;

        var model = this.collection.store[this.key][el.parentNode.getAttribute('data-key')];

        this.dragging = { el: el.parentNode, model: model };
        this.dragging.el.classList.add('is-dragging');
        this.els.list.classList.add('is-dragging');
        if (model && model.label) this.Dragger.els.container.textContent = 'Move ' + model.label + '.';
        this.emit('dragStart', this.model.git('draggable'));
    },
    checkDrop: function checkDrop(_ref) {
        var e = _ref.e,
            type = _ref.type,
            model = _ref.model;

        if (this.model.git('droppable') !== type) return;

        var el = e.target.closest('.item');

        if (!el) return;

        var localModel = this.collection.store[this.key][el.parentNode.getAttribute('data-key')];

        if (!localModel) return;

        this.emit('successfulDrop', { dropped: model, droppedOn: localModel });
    },
    fetch: function fetch() {
        var _this2 = this;

        var nextPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        this.fetching = true;
        if (nextPage) this.model.set('skip', this.model.git('skip') + this.model.git('pageSize'));

        return this.collection.get({ query: { skip: this.model.git('skip'), limit: this.model.git('pageSize'), sort: this.model.git('sort') } }).then(function (newData) {
            _this2.populateList(newData);
            _this2.fetched = true;
            _this2.fetching = false;
            _this2.emit('fetched');
            if (newData.length == 0 && nextPage) _this2.els.list.removeEventListener('scroll', _this2.onScrollPagination);
            return Promise.resolve();
        });
    },
    getCount: function getCount() {
        var _this3 = this;

        return this.collection.getCount().then(function () {
            return Promise.resolve(_this3.collection.meta.count);
        }).catch(this.Error);
    },
    getItemTemplateResult: function getItemTemplateResult(keyValue, datum) {
        var buttonsOnRight = this.model.git('delete') ? '<div class="buttons">' + this.deleteIcon + '</div>' : '',
            selection = this.toggleSelection ? '<div class="selection"><input data-js="checkbox" type="checkbox" /></div>' : '';

        return '' + ('<li data-key="' + keyValue + '">\n            ' + selection + '\n            <div class="item">' + this.itemTemplate(datum) + '</div>\n            ' + buttonsOnRight + '\n        </li>');
    },
    hide: function hide() {
        if (this.els.resetBtn) this.els.resetBtn.classList.add('fd-hidden');
        if (this.els.saveBtn) this.els.saveBtn.classList.add('fd-hidden');
        return Reflect.apply(Super.hide, this, []);
    },
    hideItems: function hideItems(keys) {
        var _this4 = this;

        return Promise.all(keys.map(function (key) {
            var el = _this4.els.list.querySelector('li[data-key="' + key + '"]');
            return el ? _this4.hideEl(el) : Promise.resolve();
        })).catch(this.Error);
    },
    hideList: function hideList() {
        var _this5 = this;

        return this.hideEl(this.els.list).then(function () {
            return Promise.resolve(_this5.els.toggle.classList.add('is-hidden'));
        }).catch(this.Error);
    },
    initializeDragDrop: function initializeDragDrop() {
        var _this6 = this;

        this.Dragger.on('mousedown', function (e) {
            return _this6.checkDragStart(e);
        });
        this.Dragger.on('mouseup', function (e) {
            return _this6.checkDragEnd(e);
        });
        this.Dragger.on('mousemove', function (e) {
            return _this6.checkDrag(e);
        });
        this.Dragger.listen();
    },
    initializeScrollPagination: function initializeScrollPagination() {
        var _this7 = this;

        var listEl = this.els.list;

        this.onScrollPagination = function (e) {
            if (_this7.fetching) return;
            if (_this7.scrollHeight - (listEl.scrollTop + _this7.offsetHeight) < 100) window.requestAnimationFrame(function () {
                return _this7.fetch(true).catch(_this7.Error);
            });
        };

        listEl.addEventListener('scroll', this.onScrollPagination);
    },
    empty: function empty() {
        this.els.list.innerHTML = '';
    },


    events: {
        addBtn: 'click',
        checkbox: 'change',
        goBackBtn: 'click',
        resetBtn: 'click',
        saveBtn: 'click',
        toggle: 'click'
    },

    getListItemKey: function getListItemKey(e) {
        var el = e.target.closest('.item');

        if (!el) return null;

        return this.collection.store[this.key][el.parentNode.getAttribute('data-key')];
    },
    hideDroppable: function hideDroppable() {
        this.els.list.classList.remove('is-droppable');
        Array.from(this.els.list.children).forEach(function (child) {
            return child.removeChild(child.lastChild);
        });
    },
    onAddBtnClick: function onAddBtnClick(e) {
        this.collection.model ? this.add(this.collection.model.CreateDefault()) : this.emit('addClicked');
    },
    onCheckboxChange: function onCheckboxChange(e) {
        var el = e.target.closest('LI');

        if (!el) return false;

        var model = this.collection.store[this.key][el.getAttribute('data-key')];
        event = 'toggled' + (e.target.checked ? 'On' : 'Off');

        if (!model) return;

        el.classList.toggle('checked', e.target.checked);

        this.emit(event, model);
    },
    onGoBackBtnClick: function onGoBackBtnClick(e) {
        this.emit('goBackClicked');
    },
    onItemMouseenter: function onItemMouseenter(e) {
        e.target.classList.add('mouseover');
    },
    onItemMouseleave: function onItemMouseleave(e) {
        e.target.classList.remove('mouseover');
    },
    onListClick: function onListClick(e) {
        var model = this.getListItemKey(e);

        if (!model) return;

        this.emit('itemClicked', model);
    },
    onListDblclick: function onListDblclick(e) {
        var model = this.getListItemKey(e);

        if (!model) return;

        this.emit('itemDblClicked', model);
    },
    onResetBtnClick: function onResetBtnClick() {
        this.emit('resetClicked');
    },
    onSaveBtnClick: function onSaveBtnClick() {
        var _this8 = this;

        if (this.model.git('view')) {
            this.emit('saveClicked', Object.keys(this.itemViews).map(function (key) {
                return _this8.itemViews[key].getProposedModel();
            }));
        }
    },
    onToggleClick: function onToggleClick() {
        this.els.list.classList.contains('fd-hidden') ? this.showList() : this.hideList();
    },
    populateList: function populateList(data) {
        var _this9 = this;

        data = data || this.collection.data;

        if (!Array.isArray(data)) data = [data];

        this.updateStyle();

        if (data.length === 0) return;

        if (this.model.git('view')) {
            var viewName = this.model.git('view');
            var fragment = data.reduce(function (fragment, datum) {
                var keyValue = datum[_this9.key];

                _this9.collection.store[_this9.key][keyValue] = datum;

                _this9.itemViews[keyValue] = _this9.factory.create(viewName, { model: Object.create(_this9.collection.model).constructor(datum), storeFragment: true }).on('deleted', function () {
                    return _this9.onDeleted(datum);
                });

                while (_this9.itemViews[keyValue].fragment.firstChild) {
                    fragment.appendChild(_this9.itemViews[keyValue].fragment.firstChild);
                }return fragment;
            }, document.createDocumentFragment());

            this.els.list.appendChild(fragment);
        } else {
            this.slurpTemplate({
                insertion: { el: this.els.list },
                renderSubviews: true,
                template: data.reduce(function (memo, datum) {
                    var keyValue = datum[_this9.key];
                    _this9.collection.store[_this9.key][keyValue] = datum;
                    return memo + _this9.getItemTemplateResult(keyValue, datum);
                }, '')
            });

            if (this.model.git('scrollPagination')) {
                this.scrollHeight = this.els.list.scrollHeight;this.offsetHeight = this.els.list.offsetHeight;
            }
        }
    },
    postRender: function postRender() {
        var _this10 = this;

        this.collection = this.model.git('collection') || Object.create(this.Model);
        this.key = this.collection.meta.key;

        if (this.collection) this.collection.store = _defineProperty({}, this.key, {});

        if (this.model.git('delete')) {
            this.deleteIcon = this.Format.GetIcon('garbage');
            this.els.list.addEventListener('click', function (e) {
                var target = e.target;
                if (target.tagName === 'svg' && target.classList.contains('garbage')) {
                    _this10.emit('deleteClicked', _this10.collection.store[_this10.key][target.closest('LI').getAttribute('data-key')]);
                }
            });
        }

        if (this.model.git('fetch')) this.fetch().catch(this.Error);

        if (this.model.git('scrollPagination')) this.initializeScrollPagination();

        this.updateStyle();

        if (this.collection.data.length) this.populateList();

        if (this.model.git('draggable')) this.initializeDragDrop();

        return this;
    },
    remove: function remove(datum) {
        this.collection.remove(datum);

        this.updateStyle();

        if (this.model.git('view')) {
            delete this.itemViews[datum[this.key]];
        } else {
            var child = this.els.list.querySelector('[data-key="' + datum[this.key] + '"]');

            if (child) this.els.list.removeChild(child);
        }

        return this;
    },
    show: function show() {
        if (this.els.resetBtn) this.els.resetBtn.classList.remove('fd-hidden');
        if (this.els.saveBtn) this.els.saveBtn.classList.remove('fd-hidden');
        return Reflect.apply(Super.show, this, []);
    },
    showList: function showList() {
        var _this11 = this;

        return this.showEl(this.els.list).then(function () {
            return Promise.resolve(_this11.els.toggle.classList.remove('is-hidden'));
        }).catch(this.Error);
    },
    showDroppable: function showDroppable(type) {
        var _this12 = this;

        this.els.list.classList.add('is-droppable');
        Array.from(this.els.list.children).forEach(function (child) {
            _this12.bindEvent('item', 'mouseenter', child);
            _this12.bindEvent('item', 'mouseleave', child);
            child.appendChild(_this12.htmlToFragment('<div class="drag">Drag here to move ' + type + '</div>'));
        });
    },
    unhideItems: function unhideItems() {
        var _this13 = this;

        Promise.all(Array.from(this.els.list.querySelectorAll('li.fd-hidden')).map(function (el) {
            return _this13.showEl(el);
        })).catch(this.Error);

        return this;
    },
    update: function update(items) {
        this.collection.constructor(items, { storeBy: [this.key] });

        if (this.itemTemplate) return this.removeChildren(this.els.list).populateList();

        this.empty();

        _extends(this, { itemViews: {} }).populateList();

        //window.scroll( { behavior: 'smooth', top: this.els.container.getBoundingClientRect().top + window.pageYOffset - 50 } )
        this.els.container.scrollIntoView({ behavior: 'smooth' });

        return this;
    },
    updateItem: function updateItem(model) {
        var keyValue = model.git(this.key);

        this.collection._put(keyValue, model.data);

        if (!this.model.git('view')) {
            var oldItem = this.els.list.querySelector('*[data-key="' + keyValue + '"]');
            this.slurpTemplate({
                insertion: { method: 'insertBefore', el: oldItem },
                renderSubviews: true,
                template: this.getItemTemplateResult(keyValue, model.data)
            });
            this.els.list.removeChild(oldItem);
        }
    },
    updateStyle: function updateStyle() {
        this.els.list.classList.toggle('no-items', this.collection.data.length === 0);
    }
});

},{"./__proto__":123}],105:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CustomContent = require('./util/CustomContent');

module.exports = _extends({}, require('./__proto__'), CustomContent, {

    events: {
        legend: 'click',
        signupBtn: 'click'
    },

    model: require('../models/Locations'),

    models: {
        groupLocation: require('../models/CurrentShare'),
        farmerMarket: require('../models/FarmerMarket'),
        retailOutlet: require('../models/RetailOutlet'),
        restaurant: require('../models/Restaurant'),
        farmPickup: require('../models/FarmPickup')
    },

    templates: {
        infoWindow: require('./templates/InfoWindow'),
        location: require('./templates/Location')
    },

    createDeliveryRange: function createDeliveryRange() {
        var overlayColor = this.model.attributes.find(function (attr) {
            return attr.name === 'deliveryRange';
        }).color;

        this.deliveryRange = new google.maps.Polygon({
            paths: this.model.data.deliveryRangeCoords,
            strokeColor: overlayColor,
            strokeOpacity: .3,
            strokeWeight: 1,
            fillColor: overlayColor,
            fillOpacity: .3,
            clickable: false
        });

        this.deliveryRange.setMap(this.map);
    },
    createMarkers: function createMarkers(data, category) {
        var _this = this;

        this.icons[category] = this.getIcon(category);
        this.markers[category] = [];

        data.forEach(function (datum) {
            if (!datum.location) return;

            var infowindow = new google.maps.InfoWindow({
                content: _this.templates.infoWindow(datum)
            });

            var marker = new google.maps.Marker({
                position: { lat: datum.location[0], lng: datum.location[1] },
                map: _this.map,
                draggable: false,
                icon: _this.icons[category],
                title: datum.name
            });

            _this.markers[category].push(marker);

            marker.addListener('click', function () {
                return infowindow.open(_this.map, marker);
            });
        });
    },
    fetchAndRender: function fetchAndRender() {
        var _this2 = this;

        var chain = Promise.resolve();

        Object.keys(this.models).forEach(function (name) {
            chain = chain.then(function () {
                return _this2.models[name].get().then(function () {
                    return name === 'groupLocation' ? _this2.models.groupLocation.getCurrentGroupDropoffs() : name === 'farmPickup' ? _this2.models.farmPickup.getHours() : Promise.resolve();
                }).then(function (dropoffData) {
                    var modelAttr = _this2.model.attributes.find(function (attr) {
                        return attr.name === name;
                    }),
                        data = dropoffData || _this2.models[name].data;

                    _this2.insertListLocations(data, _this2.els[modelAttr.el]);
                    _this2.createMarkers(data, name);

                    return Promise.resolve();
                }).catch(function (e) {
                    return Promise.resolve(console.log('Failed to retrieve ' + name + ' data.'));
                });
            });
        });
    },
    getIcon: function getIcon(category) {
        if (category === 'farmPickup') return '/static/img/favicon.png';

        var color = this.model.attributes.find(function (attr) {
            return category === attr.name;
        }).color;

        return {
            path: google.maps.SymbolPath.CIRCLE,
            strokeColor: color,
            fillColor: color,
            fillOpacity: 1,
            scale: 4
        };
    },
    initMap: function initMap() {
        var mapOpts = {
            center: { lat: 39.758948, lng: -84.191607 },
            zoom: 10,
            mapTypeControl: false
        };

        this.map = new google.maps.Map(this.els.map, mapOpts);

        this.markers = {};
        this.icons = {};

        this.createDeliveryRange();

        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(this.els.legend);

        this.fetchAndRender();
    },
    insertListLocations: function insertListLocations(data, el) {
        var _this3 = this;

        data.forEach(function (datum) {
            return _this3.slurpTemplate({
                template: _this3.templates.location(datum),
                insertion: { el: el }
            });
        });
    },
    onLegendClick: function onLegendClick(e) {
        if (e.target.tagName !== "INPUT") return;

        var category = e.target.getAttribute('data-name'),
            checked = e.target.checked;

        if (category === 'deliveryRange') return this.toggleDeliveryRange(checked);

        this.toggleMarkerCategory(category, checked);
    },
    onSignupBtnClick: function onSignupBtnClick() {
        this.emit('navigate', 'sign-up');
    },
    postRender: function postRender() {
        if (window.google) {
            this.initMap();
        } else {
            window.initGMap = this.initMap;
        }

        return CustomContent.postRender.call(this);
    },
    templateOpts: function templateOpts() {
        return { categories: this.model.attributes };
    },
    toggleDeliveryRange: function toggleDeliveryRange(checked) {
        this.deliveryRange.setMap(checked ? this.map : null);
    },
    toggleMarkerCategory: function toggleMarkerCategory(category, checked) {
        var _this4 = this;

        this.markers[category].forEach(function (marker) {
            return marker.setMap(checked ? _this4.map : null);
        });
    }
});

},{"../models/CurrentShare":15,"../models/FarmPickup":23,"../models/FarmerMarket":24,"../models/Locations":27,"../models/Restaurant":36,"../models/RetailOutlet":37,"./__proto__":123,"./templates/InfoWindow":166,"./templates/Location":168,"./util/CustomContent":193}],106:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('./MyView'),
    Login = function Login() {
    return MyView.apply(this, arguments);
};

_extends(Login.prototype, MyView.prototype, require('./util/Form').prototype, {
    checkForEnter: function checkForEnter(e) {
        if (e.keyCode === 13) this.login();
    },


    events: {
        'loginBtn': { method: 'login' }
    },

    fields: [{
        name: "email",
        label: 'Email',
        type: 'text',
        validate: function validate(val) {
            return true;
        }
    }, {
        name: "password",
        label: 'Password',
        type: 'password',
        error: "Passwords must be at least 6 characters long.",
        validate: function validate(val) {
            return val.length >= 6;
        }
    }],

    getTemplateOptions: function getTemplateOptions() {
        return { fields: this.fields };
    },
    initialize: function initialize() {
        if (window.location.pathname === "/admin" || window.location.pathname === "/admin-plus") {
            _extends(this.fields[0], {
                label: 'Email or Username',
                error: "Username must be at least 6 characters long.",
                validate: function validate(val) {
                    return val.length >= 6;
                } });
        }

        MyView.prototype.initialize.call(this);
    },
    login: function login() {
        this.submitForm({ resource: "auth" });
    },


    name: "Login",

    onSubmissionResponse: function onSubmissionResponse(response) {

        if (Object.keys(response).length === 0) {
            return this.slurpTemplate({ template: this.templates.invalidLoginError(response), insertion: { $el: this.templateData.container } });
        }

        this.$(document).off('keyup', this.checkForEnter.bind(this));

        require('../models/User').set(response);
        this.emit("success", response);
        this.hide().done();
    },
    postRender: function postRender() {
        this.templateData.container.find('input').on('focus', this.removeErrors.bind(this));
        this.$(document).on('keyup', this.checkForEnter.bind(this));
    },


    requiresLogin: false,

    template: require('../templates/login')(require('handlebars'))

});

module.exports = new Login();

},{"../models/User":41,"../templates/login":60,"./MyView":110,"./util/Form":194,"handlebars":246}],107:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Customer: require('../models/Customer'),
    Delivery: require('../models/Delivery'),

    patchMemberShare: function patchMemberShare() {
        var _this = this;

        var weekPatch = this.views.weekOptions.getPatchData();

        var weekDetail = '',
            emailTo = [this.selectedCustomer.person.data.email];

        if (this.selectedCustomer.person.data.secondaryEmail) emailTo.push(this.selectedCustomer.person.data.secondaryEmail);

        if (weekPatch.addedDates.length || weekPatch.removedDates.length) {
            weekDetail += ' ( ';
        }

        if (weekPatch.addedDates.length) {
            var description = weekPatch.addedDates.map(function (date) {
                return date.slice(5);
            }).join(',');
            weekDetail += 'Added Weeks: ' + description;
            if (weekPatch.removedDates.length) {
                weekDetail += ', ';
            }
        }

        if (weekPatch.removedDates.length) {
            var _description = weekPatch.removedDates.map(function (date) {
                return date.slice(5);
            }).join(',');
            weekDetail += 'Removed Weeks: ' + _description;
        }

        if (weekPatch.addedDates.length || weekPatch.removedDates.length) {
            weekDetail += ' ) ';
        }

        this.Xhr({
            id: this.memberShareId,
            method: 'patch',
            resource: 'member-order',
            data: JSON.stringify({
                adjustment: this.views.sharePatch.getPatchData(),
                memberShareId: this.memberShareId,
                name: this.selectedCustomer.person.data.name,
                orderOptions: this.views.orderOptions.getPatchData(),
                shareLabel: this.selectedShare.label,
                weekOptions: weekPatch.allRemoved,
                weekDetail: weekDetail,
                to: emailTo
            })
        }).then(function () {
            _this.Toast.showMessage('success', 'Order Updated');
            _this.views.seasons.select(_this.memberShareId);
        }).catch(function (e) {
            console.log(e.stack || e);
            _this.Toast.showMessage('error', 'Update Failed');
        });
    },
    postRender: function postRender() {
        var _this2 = this;

        this.views.memberTypeahead.focus();

        this.views.memberTypeahead.on('customerSelected', function (customer) {
            _this2.selectedCustomer = customer;
            _this2.views.customerInfo.reset(customer);
            _this2.views.seasons.update(customer);
            _this2.views.orderOptions.hide();
            _this2.views.weekOptions.hide();
            _this2.views.transactions.hide();
            _this2.views.sharePatch.reset();
        });

        this.views.seasons.on('selected', function (data) {
            _this2.views.sharePatch.reset();
            _this2.selectedShare = data.share;
            _this2.memberShareId = _this2.selectedShare.membershareid;

            _this2.Delivery.get({
                query: {
                    membershareid: data.share.membershareid,
                    deliveryoptionid: { operation: 'join', value: { table: 'deliveryoption', column: 'id' } },
                    groupdropoffid: { operation: 'leftJoin', value: { table: 'groupdropoff', column: 'id' } }
                }
            }).then(function () {
                //TODO:If no delivery, Toast, or some UI
                _extends(data, { delivery: _this2.Delivery });
                _this2.views.orderOptions.update(data).then(function () {
                    return _this2.views.sharePatch.setOriginalWeeklyPrice(_this2.views.orderOptions.originalWeeklyPrice);
                }).catch(_this2.Error);
                _this2.views.weekOptions.update(data).then(function () {
                    return _this2.views.sharePatch.setWeeksAffected(_this2.views.weekOptions.getWeeksAffected());
                }).catch(_this2.Error);
                _this2.views.transactions.update(data);
            });
        });

        this.views.orderOptions.on('deliveryChanged', function (data) {
            _this2.views.sharePatch.setWeeksAffected(_this2.views.weekOptions.getWeeksAffected());
            _this2.views.weekOptions.updateDelivery(data);
        });

        this.views.orderOptions.on('reset', function (model) {
            _this2.views.weekOptions.update(model);
            _this2.views.sharePatch.onOptionsReset();
        });

        this.views.weekOptions.on('reset', function (model) {
            return _this2.views.sharePatch.onWeeksReset();
        });

        this.views.orderOptions.on('adjustment', function (data) {
            return _this2.views.sharePatch.onOptionsUpdate(data);
        });
        this.views.weekOptions.on('adjustment', function (data) {
            return _this2.views.sharePatch.onWeekUpdate(data);
        });

        this.views.sharePatch.on('patchMemberShare', function () {
            return _this2.patchMemberShare();
        });

        return this;
    },


    requiresLogin: true,

    requiresRole: 'admin'

});

},{"../models/Customer":16,"../models/Delivery":18,"./__proto__":123}],108:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {

    AutoComplete: require('../AutoComplete'),

    Customer: require('../models/Customer'),

    focus: function focus() {
        this.els.customerInput.focus();
    },
    postRender: function postRender() {
        var _this = this;

        new this.AutoComplete({
            delay: 500,
            selector: this.els.customerInput,
            minChars: 3,
            cache: false,
            source: function source(term, suggest) {
                _this.search('name', term.trim(), suggest).then(function (found) {
                    return found ? Promise.resolve(true) : _this.search('email', term, suggest);
                }).then(function (found) {
                    return found ? Promise.resolve(true) : _this.search('secondaryEmail', term, suggest);
                }).then(function (found) {
                    return found ? Promise.resolve(true) : suggest([]);
                }).catch(_this.Error);
            },
            onSelect: function onSelect(e, term, item) {
                _this.selectedCustomer = _this.Customer.data.find(function (datum) {
                    return datum.person.data[_this.attr] === term;
                });
                _this.emit('customerSelected', _this.selectedCustomer);
            }

        });

        return this;
    },
    search: function search(attr, term, suggest) {
        var _query,
            _this2 = this;

        console.log('search');
        console.log(attr);
        console.log(term);
        return this.Customer.get({ query: (_query = {}, _defineProperty(_query, attr, { operation: '~*', value: term }), _defineProperty(_query, 'id', { operation: 'join', value: { table: 'member', column: 'personid' } }), _query) }).then(function () {
            console.log(_this2.Customer.data);
            if (!_this2.Customer.data.length) return Promise.resolve(false);

            _this2.attr = attr;
            suggest(_this2.Customer.data.map(function (datum) {
                return datum.person.data[attr];
            }));
            return Promise.resolve(true);
        });
    }
});

},{"../AutoComplete":4,"../models/Customer":16,"./__proto__":123}],109:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), require('./util/CustomContent'), {});

},{"./__proto__":123,"./util/CustomContent":193}],110:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = function MyView(data) {
    return _extends(this, data).initialize();
};

_extends(MyView.prototype, require('events').EventEmitter.prototype, {

    Collection: require('backbone').Collection,

    Error: require('../MyError'),

    Model: require('backbone').Model,

    _: require('underscore'),

    $: require('jquery'),

    Xhr: require('../Xhr'),

    delegateEvents: function delegateEvents(key, el) {
        var _this = this;

        var type;

        if (!this.events[key]) return;

        type = Object.prototype.toString.call(this.events[key]);

        if (type === '[object Object]') {
            this.bindEvent(key, this.events[key], el);
        } else if (type === '[object Array]') {
            this.events[key].forEach(function (singleEvent) {
                return _this.bindEvent(key, singleEvent, el);
            });
        }
    },


    delete: function _delete() {
        if (this.templateData && this.templateData.container) {
            this.templateData.container.remove();
            this.emit("removed");
        }
    },

    format: {
        capitalizeFirstLetter: function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
    },

    getFormData: function getFormData() {
        var _this2 = this;

        this.formData = {};

        Object.keys(this.templateData).forEach(function (key) {
            var $el = _this2.templateData[key],
                val = $el.val();
            if (/INPUT|TEXTAREA|SELECT/.test($el.prop('tagName')) && val) _this2.formData[key] = val;
        });

        return this.formData;
    },

    getRouter: function getRouter() {
        return require('../router');
    },

    getTemplateOptions: function getTemplateOptions() {
        return {};
    },

    hide: function hide() {
        var _this3 = this;

        return new Promise(function (resolve, reject) {
            _this3.templateData.container.hide();
            resolve();
        });
    },
    initialize: function initialize() {
        var _this4 = this;

        if (!this.container) this.container = this.$('#content');

        this.router = this.getRouter();

        this.modalView = require('./modal');

        this.$(window).resize(this._.throttle(function () {
            return _this4.size();
        }, 500));

        if (this.requiresLogin && !this.user.id) {
            require('./Login').show().once("success", function (e) {
                _this4.router.onUser(_this4.user);

                if (_this4.requiresRole && !_this4._(_this4.user.get('roles')).contains(_this4.requiresRole)) {
                    return alert('You do not have access');
                }

                _this4.render();
            });
            return this;
        } else if (this.user.id && this.requiresRole) {
            if (!this._(this.user.get('roles')).contains(this.requiresRole)) {
                return alert('You do not have access');
            }
        }

        return this.render();
    },


    isHidden: function isHidden() {
        return this.templateData.container.css('display') === 'none';
    },

    moment: require('moment'),

    onNavigation: function onNavigation(path) {
        return this.show();
    },


    postRender: function postRender() {
        this.renderSubviews();
        return this;
    },

    Q: require('q'),

    render: function render() {
        this.slurpTemplate({
            template: this.template(this.getTemplateOptions()),
            insertion: { $el: this.insertionEl || this.container, method: this.insertionMethod } });

        this.size();

        this.postRender();

        return this;
    },


    renderSubviews: function renderSubviews() {
        var _this5 = this;

        Object.keys(this.subviews || []).forEach(function (key) {
            return _this5.subviews[key].forEach(function (subviewMeta) {
                _this5[subviewMeta.name] = new subviewMeta.view({ container: _this5.templateData[key] });
            });
        });
    },

    show: function show() {
        this.templateData.container.show();
        this.size();
        return this;
    },

    slurpEl: function slurpEl(el) {

        var key = el.attr('data-js');

        this.templateData[key] = this.templateData.hasOwnProperty(key) ? this.templateData[key].add(el) : el;

        el.removeAttr('data-js');

        if (this.events[key]) this.delegateEvents(key, el);

        return this;
    },

    slurpTemplate: function slurpTemplate(options) {
        var _this6 = this;

        var $html = this.$(options.template),
            selector = '[data-js]';

        if (this.templateData === undefined) this.templateData = {};

        $html.each(function (index, el) {
            var $el = _this6.$(el);
            if ($el.is(selector)) _this6.slurpEl($el);
        });

        $html.get().forEach(function (el) {
            _this6.$(el).find(selector).each(function (i, elToBeSlurped) {
                return _this6.slurpEl(_this6.$(elToBeSlurped));
            });
        });

        if (options && options.insertion) options.insertion.$el[options.insertion.method ? options.insertion.method : 'append']($html);

        return this;
    },

    bindEvent: function bindEvent(elementKey, eventData, el) {
        var elements = el ? el : this.templateData[elementKey];

        elements.on(eventData.event || 'click', eventData.selector, eventData.meta, this[eventData.method].bind(this));
    },

    events: {},

    isMouseOnEl: function isMouseOnEl(event, el) {

        var elOffset = el.offset(),
            elHeight = el.outerHeight(true),
            elWidth = el.outerWidth(true);

        if (event.pageX < elOffset.left || event.pageX > elOffset.left + elWidth || event.pageY < elOffset.top || event.pageY > elOffset.top + elHeight) {

            return false;
        }

        return true;
    },

    requiresLogin: true,

    size: function size() {
        undefined;
    },

    user: require('../models/User'),

    util: require('util')

});

module.exports = MyView;

},{"../MyError":6,"../Xhr":7,"../models/User":41,"../router":46,"./Login":106,"./modal":125,"backbone":"backbone","events":216,"jquery":"jquery","moment":"moment","q":261,"underscore":"underscore","util":265}],111:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Model = require('../models/__proto__');

module.exports = _extends({}, require('./__proto__'), {

    DeliveryOptions: Object.create(Model, { resource: { value: 'deliveryoption' } }),
    GroupDropoffs: Object.create(Model, { resource: { value: 'groupdropoff' } }),
    MemberSelection: require('../models/MemberSelection'),
    MemberShareOption: Object.create(Model, { resource: { value: 'membershareoption' } }),
    OrderOption: require('../models/OrderOption'),
    ShareOptionOption: require('../models/ShareOptionOption'),

    calculateWeeklyPrice: function calculateWeeklyPrice() {
        var optionPrice = this.MemberSelection.data.reduce(function (sum, selection) {
            return sum + Model.moneyToReal(selection.price);
        }, 0);
        return optionPrice + Model.moneyToReal(this.model.delivery.data[0].deliveryoption.price);
    },
    calculatePriceAdjustment: function calculatePriceAdjustment() {
        var _this = this;

        return Object.keys(this.editedFields).reduce(function (acc, key) {
            if (!_this.editedFields[key].newValue || key === 'groupOption') return acc;

            var oldPrice = void 0,
                newPrice = void 0,
                diff = void 0;

            if (key === 'deliveryOption') {
                oldPrice = _this.DeliveryOptions.data.find(function (option) {
                    return option.name === _this.editedFields[key].oldValue;
                }).price;
                newPrice = _this.DeliveryOptions.data.find(function (option) {
                    return option.name === _this.editedFields[key].newValue;
                }).price;
            } else {
                var shareOptionId = _this.OrderOption.data.find(function (option) {
                    return option.key === key;
                }).id;

                oldPrice = _this.ShareOptionOption.data.find(function (option) {
                    return option.name === _this.editedFields[key].oldValue && option.shareoptionid === shareOptionId;
                }).price;

                newPrice = _this.ShareOptionOption.data.find(function (option) {
                    return option.name === _this.editedFields[key].newValue && option.shareoptionid === shareOptionId;
                }).price;
            }

            diff = Model.moneyToReal(newPrice) - Model.moneyToReal(oldPrice);

            return acc + diff;
        }, 0);
    },
    clear: function clear() {
        this.els.changes.innerHTML = '';
        this.els.options.innerHTML = '';

        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');

        this.els = {
            editSummary: this.els.editSummary,
            changes: this.els.changes,
            container: this.els.container,
            seasonLabel: this.els.seasonLabel,
            options: this.els.options,
            resetBtn: this.els.resetBtn,
            newWeeklyPrice: this.els.newWeeklyPrice,
            originalWeeklyPrice: this.els.originalWeeklyPrice
        };
    },


    events: {
        options: 'change',
        resetBtn: 'click'
    },

    getAdjustmentDescription: function getAdjustmentDescription() {
        var _this2 = this;

        return Array.from(this.els.options.querySelectorAll('li.edited')).map(function (el) {
            var fieldName = el.getAttribute('data-name'),
                fieldLabel = _this2.capitalizeFirstLetter(fieldName),
                oldValue = _this2.editedFields[fieldName].oldValue ? _this2.editedFields[fieldName].oldValue.toString() : 'none',
                newValue = _this2.editedFields[fieldName].newValue.toString();

            return fieldLabel + ': ' + oldValue + ' to ' + newValue;
        }).join(', ');
    },
    getDeliveryData: function getDeliveryData() {
        var _this3 = this;

        var patchId = this.model.delivery.data[0].membersharedelivery.id,
            newDeliveryId = this.DeliveryOptions.data.find(function (option) {
            return option.name === _this3.editedFields.deliveryOption.newValue;
        }).id,
            dropoffId = this.editedFields.deliveryOption.newValue === 'group' ? this.GroupDropoffs.data.find(function (option) {
            return option.name === _this3.editedFields.groupOption.newValue;
        }).id : null;

        return {
            id: patchId,
            deliveryoptionid: newDeliveryId,
            groupdropoffid: dropoffId
        };
    },
    getShareOptionData: function getShareOptionData(key) {
        var _this4 = this;

        var shareOptionId = this.OrderOption.data.find(function (option) {
            return option.key === key;
        }).id,
            memberShareId = this.model.share.membershareid;

        var shareOptionOptionId = this.ShareOptionOption.data.find(function (option) {
            return option.name === _this4.editedFields[key].newValue && option.shareoptionid === shareOptionId;
        }).id;

        return {
            id: this.MemberSelection.data.find(function (memberSelection) {
                return shareOptionId == memberSelection.shareoptionid;
            }).membershareoptionid,
            shareoptionoptionid: shareOptionOptionId
        };
    },
    getPatchData: function getPatchData() {
        var _this5 = this;

        var rv = { membersharedelivery: this.editedFields.deliveryOption.newValue || this.editedFields.groupOption.newValue ? this.getDeliveryData() : {},
            membershareoption: []
        };

        Object.keys(this.editedFields).forEach(function (key) {
            if (!_this5.editedFields[key].newValue || key === 'deliveryOption' || key === 'groupOption') return;

            rv.membershareoption.push(_this5.getShareOptionData(key));
        });

        return rv;
    },
    onOptionsChange: function onOptionsChange(e) {
        var listItemEl = e.target.closest('li.editable'),
            shareOptionKey = listItemEl.getAttribute('data-name'),
            val = e.target.value;

        if (shareOptionKey === 'deliveryOption' && val !== 'group') this.emit('deliveryChanged', { deliveryOption: val });
        if (shareOptionKey === 'groupOption' && val !== 'none') this.emit('deliveryChanged', { deliveryOption: 'group', groupOption: val });

        if (shareOptionKey === 'deliveryOption') {
            if (val !== 'group') {
                this.els.groupOption.selectedIndex = 0;
                this.els.groupOption.disabled = true;
                this.els.groupOption.closest('li').classList.remove('edited');
                this.editedFields.groupOption.newValue = undefined;
            } else {
                this.els.groupOption.disabled = false;
            }
        }

        if (this.editedFields[shareOptionKey].oldValue === val) {
            this.editedFields[shareOptionKey].newValue = undefined;
            listItemEl.classList.remove('edited');
            return this.showEditSummary();
        }

        this.editedFields[shareOptionKey].newValue = val;
        listItemEl.classList.add('edited');

        this.els.resetBtn.classList.remove('fd-hidden');

        this.showEditSummary();
    },
    onResetBtnClick: function onResetBtnClick() {
        this.els.resetBtn.classList.add('fd-hidden');
        this.els.editSummary.classList.add('fd-hidden');
        this.update(this.model);
        this.emit('reset', this.model);
    },
    renderDeliveryOptions: function renderDeliveryOptions() {
        var _this6 = this;

        var option = _extends({}, this.model.delivery.data[0]);

        this.slurpTemplate({ template: this.templates[this.optionTemplate]({ name: 'Delivery Option', id: 'deliveryOption' }), insertion: { el: this.els.options } });

        this.slurpTemplate({ template: this.templates[this.optionTemplate]({ name: 'Group Option', id: 'groupOption' }), insertion: { el: this.els.options } });

        if (this.optionTemplate === 'editableOption') {

            this.DeliveryOptions.data.forEach(function (option) {
                return _this6.slurpTemplate({ template: _this6.templates.selectOption(option), insertion: { el: _this6.els.deliveryOption } });
            });

            this.els.deliveryOption.querySelector('option[value=' + CSS.escape(option.deliveryoption.name)).selected = true;
            this.editedFields.deliveryOption = {};
            this.editedFields.deliveryOption.oldValue = this.els.deliveryOption.value;

            this.GroupDropoffs.data.unshift({ name: 'none', label: 'None' });
            this.GroupDropoffs.data.forEach(function (option) {
                return _this6.slurpTemplate({ template: _this6.templates.selectOption(option), insertion: { el: _this6.els.groupOption } });
            });

            if (!option.groupdropoff.id) {
                this.els.groupOption.selectedIndex = 0;
                this.els.groupOption.disabled = true;
            } else this.els.groupOption.querySelector('option[value=' + CSS.escape(option.groupdropoff.name)).selected = true;

            this.editedFields.groupOption = {};
            this.editedFields.groupOption.oldValue = this.els.groupOption.disabled ? undefined : this.els.groupOption.value;
        } else {
            this.els.deliveryOption.textContent = option.deliveryoption.label;
            this.els.groupOption.textContent = option.groupdropoff.label || 'N/A';
        }

        return this;
    },
    renderShareOptions: function renderShareOptions() {
        var _this7 = this;

        this.OrderOption.data.forEach(function (shareOption) {
            _this7.slurpTemplate({ template: _this7.templates[_this7.optionTemplate](shareOption), insertion: { el: _this7.els.options } });

            if (_this7.editable) {
                _this7.ShareOptionOption.data.forEach(function (option) {
                    if (option.shareoptionid === shareOption.id) _this7.slurpTemplate({
                        template: _this7.templates.selectOption(option), insertion: { el: _this7.els[shareOption.id] }
                    });
                });
            }
        });

        this.MemberSelection.data.forEach(function (selection) {
            if (_this7.editable) {
                var key = _this7.OrderOption.data.find(function (shareOption) {
                    return shareOption.id === selection.shareoptionid;
                }).key;
                _this7.els[selection.shareoptionid].querySelector('option[value=' + CSS.escape(selection.name)).selected = true;
                _this7.editedFields[key] = {};
                _this7.editedFields[key].oldValue = _this7.els[selection.shareoptionid].value;
            } else {
                _this7.els[selection.shareoptionid].textContent = selection.label;
            }
        });
    },
    showEditSummary: function showEditSummary() {
        var _this8 = this;

        var priceAdjustment = this.calculatePriceAdjustment(),
            edits = this.els.options.querySelectorAll('li.edited');

        this.els.changes.innerHTML = '';

        if (edits.length === 0) {
            this.emit('reset', this.model);
            this.els.resetBtn.classList.add('fd-hidden');
            return this.els.editSummary.classList.add('fd-hidden');
        }

        edits.forEach(function (el) {
            var fieldName = el.getAttribute('data-name'),
                fieldLabel = _this8.capitalizeFirstLetter(fieldName),
                oldValue = _this8.editedFields[fieldName].oldValue ? _this8.editedFields[fieldName].oldValue.toString() : 'none',
                newValue = _this8.editedFields[fieldName].newValue.toString();

            _this8.slurpTemplate({ insertion: { el: _this8.els.changes }, template: _this8.templates.fieldEdit({ label: fieldLabel, oldValue: oldValue, newValue: newValue }) });
        });

        this.els.originalWeeklyPrice.textContent = this.Currency.format(this.originalWeeklyPrice);
        this.els.newWeeklyPrice.textContent = this.Currency.format(this.originalWeeklyPrice + priceAdjustment);

        this.els.editSummary.classList.remove('fd-hidden');

        this.emit('adjustment', { description: this.getAdjustmentDescription(), originalWeeklyPrice: this.originalWeeklyPrice, priceAdjustment: priceAdjustment });
    },


    templates: {
        fieldEdit: require('./templates/FieldEdit'),
        archivedOption: function archivedOption(option) {
            return '<li><div class="cell">' + option.name + '</div><div class="cell" data-js="' + option.id + '"></div></li>';
        },
        editableOption: function editableOption(option) {
            return '<li data-name="' + (option.key || option.id) + '" class="editable"><span>' + option.name + '</span><select data-js="' + option.id + '"></select></li>';
        },
        selectOption: function selectOption(option) {
            return '<option value="' + option.name + '">' + option.label + '</option>';
        }
    },

    update: function update(_ref) {
        var _this9 = this;

        var customer = _ref.customer,
            delivery = _ref.delivery,
            share = _ref.share;

        this.clear();
        this.editedFields = {};

        this.model = arguments[0];

        this.editable = this.Moment() < this.Moment(share.enddate);
        this.optionTemplate = this.editable ? 'editableOption' : 'archivedOption';

        this.els.seasonLabel.textContent = share.label;

        return this.OrderOption.get({ query: { shareid: share.id, shareoptionid: { operation: 'join', value: { table: 'shareoption', column: 'id' } } } }).then(function () {
            return _this9.ShareOptionOption.get();
        }).then(function () {
            return _this9.MemberSelection.get({ query: { membershareid: share.membershareid, shareoptionoptionid: { operation: 'join', value: { table: 'shareoptionoption', column: 'id' } } } });
        }).then(function () {
            return _this9.renderShareOptions();
        }).then(function () {
            return _this9.DeliveryOptions.get();
        }).then(function () {
            return _this9.GroupDropoffs.get();
        }).then(function () {
            _this9.renderDeliveryOptions();
            _this9.originalWeeklyPrice = _this9.calculateWeeklyPrice();
            _this9.show();
            return Promise.resolve();
        });
    }
});

},{"../models/MemberSelection":31,"../models/OrderOption":33,"../models/ShareOptionOption":40,"../models/__proto__":42,"./__proto__":123,"./templates/FieldEdit":159}],112:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Pikaday: require('pikaday'),

    events: {
        exportBtn: 'click',
        viewBtn: 'click'
    },

    handleColumns: function handleColumns(rows) {
        var _this = this;

        var columns = this.els.columns;

        this.removeChildren(columns);

        this.columns = Object.keys(rows[0]);

        this.columns.forEach(function (column) {
            return _this.slurpTemplate({ template: '<li>' + column + '</li>', insertion: { el: columns } });
        });
    },
    handleRows: function handleRows(rows) {
        var _this2 = this;

        var rowsEl = this.els.rows;

        this.removeChildren(rowsEl);

        var template = rows.map(function (row) {
            var columns = _this2.columns.map(function (column) {
                return '<li>' + row[column] + '</li>';
            }).join('');
            return '<ol>' + columns + '</ol>';
        }).join('');

        this.slurpTemplate({ template: template, insertion: { el: rowsEl } });
    },
    noResults: function noResults() {
        this.els.empty.classList.remove('fd-hide');
    },
    onExportBtnClick: function onExportBtnClick() {
        var qs = { id: this.els.report.value, to: this.els.to.value, from: this.els.from.value, export: true };
        window.open('/report?' + window.encodeURIComponent(JSON.stringify(qs)));
    },
    onViewBtnClick: function onViewBtnClick() {
        var _this3 = this;

        this.Xhr({ method: 'get', resource: 'report', qs: JSON.stringify({ id: this.els.report.value, to: this.els.to.value, from: this.els.from.value }) }).then(function (result) {
            if (result.length == 0) return _this3.noResults();

            _this3.els.empty.classList.add('fd-hide');

            _this3.handleColumns(result);
            _this3.handleRows(result);
            return Promise.resolve();
        }).catch(this.Error);
    },
    postRender: function postRender() {
        var _this4 = this;

        this.Reports = Object.create(this.Model, { resource: { value: 'report' } });

        this.Reports.get().then(function () {
            return _this4.Reports.data.forEach(function (report) {
                return _this4.slurpTemplate({ template: '<option value="' + report.id + '">' + report.label + '</option>', insertion: { el: _this4.els.report } });
            });
        }).catch(this.Error);

        new this.Pikaday({ field: this.els.from, format: 'YYYY-MM-DD' });
        new this.Pikaday({ field: this.els.to, format: 'YYYY-MM-DD' });

        return this;
    },
    removeChildren: function removeChildren(el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    }
});

},{"./__proto__":123,"pikaday":"pikaday"}],113:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Table = require('./util/Table'),
    Resource = function Resource() {
    this.spinner = new this.Spinner({
        color: '#fff',
        length: 15,
        scale: 0.25,
        width: 5
    }).spin();
    return Table.apply(this, arguments);
};

_extends(Resource.prototype, Table.prototype, {

    Instance: require('../models/Instance'),

    ItemView: require('./InstanceRow'),

    Spinner: require('../spin'),

    collection: function collection() {
        var _this = this;

        return {
            model: this.Instance,
            parse: function parse(response) {
                _this.label = response.label;
                _this.recordDescriptor = response.recordDescriptor;
                if (response.operation["@type"] === "Create") _this.createProperties = response.operation.expects.supportedProperty;
                return response[_this.resource];
            },
            url: this.util.format("/%s", this.resource)
        };
    },
    create: function create(data) {
        var _this2 = this;

        var files = [];

        this.createProperties.forEach(function (property) {
            var name = property.property;

            if (property.fk && _this2[property.fk.table + "Typeahead"]) {
                data[name] = _this2[property.fk.table + "Typeahead"][property.descriptor.path.length ? [property.descriptor.path[0].table, 'id'].join('.') : 'id'];
            }
            if (property.range === "File") {
                delete data[name];
                files.push({ name: name, data: _this2[name + "File"] });
            }
        });

        this.modalView.templateData.confirmBtn.append(this.spinner.spin().el).addClass('has-spinner');

        this.$.ajax({
            headers: { accept: 'application/json' },
            contentType: 'application/json',
            data: JSON.stringify(data),
            method: 'POST',
            url: this.util.format("/%s", this.resource)
        }).done(function (response, textStatus, jqXHR) {
            if (_this2.items.length === 0 && _this2.fields === undefined) _this2.setFields(response);

            Promise.all(files.map(function (file) {
                return _this2.uploadFile(file.name, file.data, response.id);
            })).then(function () {

                _this2.createProperties.forEach(function (property) {
                    var name = property.property;
                    if (property.fk && _this2[property.fk.table + "Typeahead"] && property.descriptor.path) {
                        response[[property.descriptor.table, property.descriptor.column.name].join('.')] = {
                            descriptor: property.descriptor,
                            table: property.fk.table,
                            id: response[name],
                            value: _this2[property.fk.table + "Typeahead"][property.descriptor.column.name] };
                    }
                });

                _this2.items.add(new _this2.Instance(response, { parse: true }));
                _this2.modalView.templateData.confirmBtn.removeClass('has-spinner');
                _this2.spinner.stop();
                _this2.modalView.hide({ reset: true });
            });
        });
    },
    deleteModel: function deleteModel() {
        var _this3 = this;

        this.$.ajax({
            headers: { accept: 'application/json' },
            contentType: 'application/json',
            method: 'DELETE',
            url: this.util.format("/%s/%s", this.resource, this.modelToDelete.id)
        }).done(function (response, textStatus, jqXHR) {
            _this3.items.remove(_this3.modelToDelete);
            _this3.modelToDelete = undefined;
            _this3.modalView.hide({ reset: true });
        });
    },
    edit: function edit(data) {
        var _this4 = this;

        var filePromises = [],
            modelAttrs = {};

        this.createProperties.forEach(function (property) {
            var name = property.property;

            if (property.fk) {
                var attribute;

                if (!_this4[property.fk.table + "Typeahead"]) {
                    delete data[name];return;
                }

                attribute = _this4.util.format('%s.%s', property.descriptor.table, property.descriptor.column.name);

                data[name] = _this4[property.fk.table + "Typeahead"][property.descriptor.path.length ? [property.descriptor.path[0].table, 'id'].join('.') : 'id'];

                _this4.modelToEdit.get(attribute).id = _this4[property.fk.table + "Typeahead"].id;
                _this4.modelToEdit.get(attribute).value = _this4[property.fk.table + "Typeahead"][property.descriptor.column.name];
            } else if (property.range === "File") {
                delete data[name];
                if (_this4[name + "File"] && _this4[name + "File"].length) {
                    _this4.modelToEdit.get(name).src = _this4[name + "Base64"];
                    filePromises.push(_this4.uploadFile(name, _this4[name + "File"], _this4.modelToEdit.id));
                }
            } else if (property.property === "dayofweek") {
                modelAttrs[property.property] = { raw: data[property.property], value: _this4.modelToEdit.DayOfWeekHash[data[property.property]] };
            } else {
                modelAttrs[property.property] = data[property.property];
            }
        });

        Promise.all(filePromises).then(function () {
            return _this4.$.ajax({
                headers: { accept: 'application/json' },
                contentType: 'application/json',
                data: JSON.stringify(data),
                method: 'PATCH',
                url: _this4.util.format("/%s/%d", _this4.resource, _this4.modelToEdit.id)
            }).done(function (response, textStatus, jqXHR) {
                _this4.modelToEdit.set(modelAttrs, { silent: true });
                _this4.modelToEdit.trigger('change', _this4.modelToEdit);
                _this4.modelToEdit = undefined;
                _this4.modalView.hide({ reset: true });
            });
        }).catch(function (err) {
            return console.log(err.stack || err);
        });
    },


    events: {
        createBtn: { method: 'showCreateDialog' },
        deleteBtn: { method: 'showDeleteDialog' },
        editBtn: { method: 'showEditDialog' },
        body: [{ event: 'mouseover', selector: 'tr', method: 'onRowMouseEnter' }, { event: 'mouseout', selector: 'tr', method: 'onRowMouseLeave' }]
    },

    fetch: { headers: { accept: "application/ld+json" } },

    getImage: function getImage(model) {
        var _this5 = this;

        var imageEl = new Image();

        imageEl.style.height = '50px';
        imageEl.onload = function () {
            if (_this5.itemViews[model.id]) {
                _this5.itemViews[model.id].templateData[model.column].html(imageEl);
                _this5.itemViews[model.id].retrievedImage(model.column);
            }
            if (_this5.items.get(model.id)) _this5.items.get(model.id).get(model.column).imageEl = imageEl;

            window.setTimeout(function () {
                return _this5.imageLoader.remove(model);
            }, 100);
        };

        imageEl.onerror = function () {
            return window.setTimeout(function () {
                return _this5.imageLoader.remove(model);
            }, 100);
        };

        imageEl.src = model.column === "jobdescription" ? '/static/img/pdf.svg' : this.util.format('/file/%s/%s/%d', this.resource, model.column, model.id);
    },
    getImageData: function getImageData(base64) {
        return base64.slice(base64.indexOf(',') + 1);
    },
    getLabel: function getLabel(property) {
        return this.format.capitalizeFirstLetter(property);
    },
    initDatepicker: function initDatepicker(property, modelValue) {
        var time, value;

        if (modelValue) value = modelValue.value;

        if (value && property.range === "Time") {
            time = value.slice(0, -2);
            value = /AM/.test(value) || time.slice(0, 1) === "12" ? time : this.util.format('%d:%s', parseInt(time.split(":")[0]) + 12, time.split(":")[1]);
        }

        this.$('#' + property.property).datetimepicker(property.range === "Time" ? { format: "h:mmA", defaultDate: value ? this.moment([this.moment().format('YYYY-MM-DD'), value].join(" ")) : "" } : { format: "YYYY-MM-DD", defaultDate: value && modelValue.raw ? this.moment(modelValue.raw).format('YYYY-MM-DD') : "" });
    },
    initFileUploader: function initFileUploader(property) {
        var _this6 = this;

        var name = property.property,
            $el = this.modalView.templateData[name],
            btn = this.modalView.templateData[property.property + "Btn"];

        this[property.property + "File"] === undefined;

        $el.on('change', function (e) {
            var reader = new FileReader();

            btn.addClass('has-spinner').append(_this6.spinner.spin().el);

            reader.onload = function (evt) {
                var imageData = _this6.getImageData(evt.target.result),
                    previewImageSrc = evt.target.result.slice(0, 20) === 'data:application/pdf' ? '/static/img/pdf.svg' : evt.target.result;

                _this6[property.property + "File"] = imageData;
                _this6[property.property + "Base64"] = evt.target.result;
                btn.removeClass('has-spinner');
                _this6.spinner.stop();
                _this6.$('#' + property.property + "-preview").attr({ src: previewImageSrc });
            };

            reader.readAsDataURL(e.originalEvent.target.files[0]);
        });
    },
    initTypeahead: function initTypeahead(property) {
        var _this7 = this;

        var bloodhound = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace(property.descriptor.column.name),
            identify: function identify(obj) {
                return obj.id;
            },
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            remote: {
                replace: function replace(url, query) {
                    return url.replace('%QUERY', encodeURIComponent(query));
                },
                url: this.util.format("/%s?%s=%QUERY&like=1&path=%s", property.descriptor.table, property.descriptor.column.name, encodeURIComponent(JSON.stringify(property.descriptor.path)))
            }
        }),
            el = this.$('#' + property.property);

        bloodhound.initialize();

        el.typeahead({ hint: true }, { display: function display(obj) {
                return obj[property.descriptor.column.name];
            }, source: bloodhound.ttAdapter() }).bind('typeahead:selected typeahead:autocompleted', function (obj, selected, name) {
            _this7[property.fk.table + "Typeahead"] = selected;
            el.one('change', function () {
                return _this7[property.fk.table + "Typeahead"] = undefined;
            });
        });
    },
    onRowMouseEnter: function onRowMouseEnter(e) {
        var row = this.$(e.currentTarget),
            top = row.position().top + 13;

        this.hoveredModel = this.items.get(row.attr('data-id'));
        this.templateData.editBtn.removeClass('hide');
        this.templateData.deleteBtn.removeClass('hide');

        this.templateData.editBtn.css({ top: top, left: '115px' });
        this.templateData.deleteBtn.css({ top: top, left: '135px' });
    },
    onRowMouseLeave: function onRowMouseLeave(e) {

        if (this.isMouseOnEl(e, this.templateData.deleteBtn) || this.isMouseOnEl(e, this.templateData.editBtn)) return;

        this.hoveredModel = undefined;

        this.templateData.deleteBtn.addClass('hide');
        this.templateData.editBtn.addClass('hide');
    },
    populateModalField: function populateModalField(property) {
        var el = this.modalView.templateData[property.property],
            img,
            modelValue;

        if (!el) return;
        if (property.range === 'File') {
            this.initFileUploader(property);
            img = this.itemViews[this.modelToEdit.id].templateData[property.property].find('img');
            if (img.length) this.modalView.templateData[property.property + "Preview"].replaceWith(img.clone(false).attr({ id: property.property + "-preview" }));
            return;
        }

        modelValue = this.modelToEdit.get(property.property);

        if (/Date|Time/.test(property.range)) {
            return this.initDatepicker(property, modelValue);
        } else if (property.property === 'dayofweek') {
            return el.val(modelValue.raw);
        } else if (!property.fk || !property.descriptor) {
            return el.val(typeof modelValue === "boolean" ? modelValue.toString() : modelValue);
        }

        this.initTypeahead(property);
        el.typeahead('val', this.modelToEdit.get([property.descriptor.table, property.descriptor.column.name].join('.')).value);
    },
    postRender: function postRender() {
        var _this8 = this;

        this.imageLoader = new (require('backbone').Collection)().on('add', function () {
            if (_this8.imageLoader.length === 1) _this8.processImageLoader();
        }).on('remove', function () {
            if (_this8.imageLoader.length) _this8.processImageLoader();
        });

        Table.prototype.postRender.call(this);
        this.items.on('reset', function () {
            return _this8.templateData.subHeading.text(_this8.label);
        });
    },
    processImageLoader: function processImageLoader() {
        var _this9 = this;

        var id = this.imageLoader.at(0).id,
            columns = this.imageLoader.at(0).get('columns');

        columns.forEach(function (column) {
            return _this9.getImage({ 'id': id, 'column': column });
        });
    },


    requiresRole: 'admin',

    setFields: function setFields(instance) {
        var _this10 = this;

        var keys = Object.keys(instance),
            width = Math.floor(100 / keys.length);
        this.fields = keys.map(function (key) {
            var field = { name: key, label: _this10.format.capitalizeFirstLetter(key), width: width };
            _this10.$(_this10.templateData.header.children('tr')[0]).append(_this10.templates.headerColumn.call(_this10, field));
            return field;
        });
    },
    showCreateDialog: function showCreateDialog() {
        var _this11 = this;

        var onShown = function onShown() {
            return _this11.createProperties.forEach(function (property) {
                if (property.fk && property.descriptor !== undefined) _this11.initTypeahead(property);else if (/Date|Time/.test(property.range)) _this11.initDatepicker(property);else if (property.range === "File") _this11.initFileUploader(property);
            });
        },
            onSubmit = function onSubmit(data) {
            return _this11.create(data);
        };

        this.modalView.show({
            body: this.templates.create({
                fields: this.createProperties.map(function (property) {
                    return _this11.templates[property.range]({
                        class: property.fk ? 'typeahead' : '',
                        label: _this11.getLabel(property.descriptor ? [property.descriptor.table, property.descriptor.column.name].join('.') : property.property),
                        name: property.property,
                        password: property.property === "password" ? true : false
                    });
                })
            }),
            title: this.util.format('Create %s', this.label)
        }).on('shown', onShown).on('submit', onSubmit).on('hidden', function () {
            _this11.modalView.removeListener('submit', onSubmit);
            _this11.modalView.removeListener('shown', onShown);
        });
    },
    showDeleteDialog: function showDeleteDialog() {
        var _this12 = this;

        var onSubmit = function onSubmit() {
            return _this12.deleteModel();
        };

        this.modelToDelete = this.hoveredModel;

        this.modalView.show({
            body: this.util.format('Are you sure you would like to delete %s?', this.modelToDelete.get(this.recordDescriptor) || "this record"),
            confirmText: 'Yes',
            title: this.util.format('Delete %s', this.label)
        }).on('submit', onSubmit).on('hidden', function () {
            _this12.modelToDelete = undefined;
            _this12.modalView.removeListener('submit', onSubmit);
        });
    },
    showEditDialog: function showEditDialog() {
        var _this13 = this;

        var populateModalFields = function populateModalFields() {
            return _this13.createProperties.forEach(function (property) {
                return _this13.populateModalField(property);
            });
        },
            onSubmit = function onSubmit(data) {
            return _this13.edit(data);
        };

        this.modelToEdit = this.hoveredModel;

        this.modalView.show({
            body: this.templates.create({
                fields: this.createProperties.map(function (property) {
                    return _this13.templates[property.property === "dayofweek" ? "DayOfWeek" : property.range]({
                        class: property.fk ? 'typeahead' : '',
                        name: property.property,
                        label: _this13.getLabel(property.descriptor ? [property.descriptor.table, property.descriptor.column.name].join('.') : property.property)
                    });
                })
            }),
            title: this.util.format('Edit %s', this.label)
        }).on('shown', populateModalFields).on('submit', onSubmit).on('hidden', function () {
            _this13.modalView.removeListener('shown', populateModalFields);
            _this13.modalView.removeListener('submit', onSubmit);
            _this13.modelToEdit = undefined;
        });
    },


    template: require('../templates/resource')(require('handlebars')),

    templates: _extends({}, Table.prototype.templates, {
        create: require('../templates/createInstance')(require('handlebars')),
        Boolean: require('../templates/form/Boolean')(require('handlebars')),
        Date: require('../templates/form/Date')(require('handlebars')),
        DayOfWeek: require('../templates/form/DayOfWeek')(require('handlebars')),
        File: require('../templates/form/File')(require('handlebars')),
        Float: require('../templates/form/Text')(require('handlebars')),
        Integer: require('../templates/form/Text')(require('handlebars')),
        Text: require('../templates/form/Text')(require('handlebars')),
        TextArea: require('../templates/form/TextArea')(require('handlebars')),
        Time: require('../templates/form/Date')(require('handlebars'))
    }),

    update: function update(resource) {
        var _this14 = this;

        this.resource = resource;

        this.items.reset(null);
        this.fields = [];
        this.$(this.templateData.header.children('tr')[0]).empty();

        this.createItems();

        this.items.on('reset', function () {
            _this14.templateData.subHeading.text(_this14.label);
        });

        this.fetchItems().show();
    },
    uploadFile: function uploadFile(name, data, id) {
        var _this15 = this;

        return new Promise(function (resolve, reject) {
            _this15.$.ajax({
                data: data,
                method: "POST",
                url: _this15.util.format("/file/%s/%s/%d", _this15.resource, name, id) }).done(function (response, textStatus, jqXHR) {
                return resolve();
            }).fail(function (jqXHR, textStatus, err) {
                return reject(err);
            });
        });
    }
});

module.exports = Resource;

},{"../models/Instance":26,"../spin":47,"../templates/createInstance":49,"../templates/form/Boolean":52,"../templates/form/Date":53,"../templates/form/DayOfWeek":54,"../templates/form/File":55,"../templates/form/Text":56,"../templates/form/TextArea":57,"../templates/resource":62,"./InstanceRow":103,"./util/Table":197,"backbone":"backbone","handlebars":246}],114:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('./util/ListItem'),
    ResourceRow = function ResourceRow() {
    return ListItem.apply(this, arguments);
};

_extends(ResourceRow.prototype, ListItem.prototype, {
    getTemplateOptions: function getTemplateOptions() {
        var _this = this;

        return {
            id: this.model.id,
            values: this.fields.map(function (field) {
                return { name: field.name, value: _this.model.get(field.name), width: field.width };
            })
        };
    },


    template: require('../templates/resourceRow')(require('handlebars'))

});

module.exports = ResourceRow;

},{"../templates/resourceRow":63,"./util/ListItem":196,"handlebars":246}],115:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    MemberSeason: require('../models/MemberSeason'),

    clear: function clear() {
        this.els.list.innerHTML = '';
    },


    events: {
        list: 'click'
    },

    insertShareLabels: function insertShareLabels() {
        var _this = this;

        var countPerShare = {};

        this.MemberSeason.data.forEach(function (season) {
            countPerShare[season.name] ? ++countPerShare[season.name] : countPerShare[season.name] = 1;
            if (countPerShare[season.name] > 1) season.count = countPerShare[season.name];

            _this.slurpTemplate({ template: _this.templates.ShareBox(season), insertion: { el: _this.els.list } });
        });
    },
    onListClick: function onListClick(e) {
        if (!e.target.closest('div.share-label')) return;

        if (this.currentSelection) this.currentSelection.classList.remove('selected');

        var el = e.target.closest('div.share-label');

        this.currentSelection = el;
        el.classList.add('selected');
        this.emit('selected', { customer: this.customer, share: this.MemberSeason.data.find(function (season) {
                return season.membershareid == el.getAttribute('data-id');
            }) });
    },
    select: function select(memberShareId) {
        this.els.list.querySelector('div.share-label[data-id="' + memberShareId + '"]').click();
    },


    templates: {
        ShareBox: require('./templates/ShareBox')
    },

    update: function update(customer) {
        var _this2 = this;

        this.customer = customer;

        this.clear();

        this.MemberSeason.get({ query: { memberid: customer.member.data.id, shareid: { operation: 'join', value: { table: 'share', column: 'id' } } } }).then(function () {
            return _this2.insertShareLabels();
        }).then(function () {
            return _this2.show();
        }).catch(this.Error);
    }
});

},{"../models/MemberSeason":30,"./__proto__":123,"./templates/ShareBox":177}],116:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },


    requiresLogin: false
});

},{"./__proto__":123}],117:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('./__proto__'), {

    Views: {
        buttonFlow: function buttonFlow() {
            return {
                model: Object.create(this.Model).constructor({
                    states: {
                        start: [{ name: 'save', text: 'Save Changes', class: 'save-btn', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmBtn', class: 'save-btn', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', class: 'reset-btn', nextState: 'start', text: 'Cancel' }]
                    }
                })
            };
        }
    },

    displayTotal: function displayTotal() {
        this.total = 0;

        this.total += this.weeksRemovedPrice;
        this.total += this.weeksAddedPrice;

        if (this.weeklyPriceAdjustment) this.total += this.optionsAdjustment;

        this.els.adjustment.textContent = this.Currency.format(this.total);
        if (this.total < 0) this.els.adjustment.classList.add('is-negative');

        return this;
    },
    getWhitespace: function getWhitespace(count) {
        var rv = "";

        while (count > 0) {
            rv += " ";count--;
        }

        return rv;
    },
    getDescription: function getDescription() {
        var lineWidth = 100,
            lines = [['Weeks Removed: ' + this.els.weeksRemoved.textContent, 'Adjustment: ' + this.Currency.format(this.weeksRemovedPrice)], ['Weeks Added: ' + this.els.weeksAdded.textContent, 'Adjustment: ' + this.Currency.format(this.weeksAddedPrice)]];

        return ['' + lines[0][0] + this.getWhitespace(lineWidth - lines[0][0].length - lines[0][1].length) + lines[0][1], '' + lines[1][0] + this.getWhitespace(lineWidth - lines[1][0].length - lines[1][1].length) + lines[1][1], 'Options Update: ' + this.optionsDescription, 'Weekly price adjustment: ' + this.Currency.format(this.weeklyPriceAdjustment), 'Weeks affected: ' + this.weeksAffected].join('\n');
    },
    getPatchData: function getPatchData() {
        return {
            value: this.total,
            description: this.getDescription(),
            sendEmail: this.els.sendEmail.checked
        };
    },
    onOptionsReset: function onOptionsReset() {
        this.weeklyPriceAdjustment = false;
        this.els.options.classList.add('fd-hidden');

        this.els.weeklyAdjustment.textContent = this.Currency.format(0);
        this.els.shareOptionDescription.textContent = '';

        this.displayTotal();

        if (this.els.weeksRemoved.textContent == 0 && this.els.weeksAdded.textContent == 0) this.els.container.classList.add('fd-hidden');
    },
    onWeeksReset: function onWeeksReset() {
        this.onWeekUpdate({ added: 0, removed: 0 });
    },
    onOptionsUpdate: function onOptionsUpdate(_ref) {
        var description = _ref.description,
            priceAdjustment = _ref.priceAdjustment;


        this.optionsDescription = description;

        this.els.options.classList.remove('fd-hidden');

        this.weeklyPriceAdjustment = priceAdjustment;
        this.els.weeklyAdjustment.textContent = this.Currency.format(priceAdjustment);
        this.els.shareOptionDescription.textContent = description;

        this.updateOptionsAdjustment();

        this.displayTotal().show();
    },
    onWeekUpdate: function onWeekUpdate(_ref2) {
        var added = _ref2.added,
            removed = _ref2.removed;

        this.weeksAffected = this.originalWeeksAffected - removed;
        this.els.weeksAffected.textContent = this.weeksAffected;

        this.els.weeksRemoved.textContent = removed;
        this.els.weeksAdded.textContent = added;

        this.weeksAddedPrice = added * (this.originalWeeklyPrice + (this.weeklyPriceAdjustment || 0));
        this.els.weeksAddedPrice.textContent = this.Currency.format(this.weeksAddedPrice);

        this.weeksRemovedPrice = -1 * removed * this.originalWeeklyPrice;
        this.els.weeksRemovedPrice.textContent = this.Currency.format(this.weeksRemovedPrice);

        if (added == 0 && removed == 0 && !this.weeklyPriceAdjustment) return this.els.container.classList.add('fd-hidden');

        this.updateOptionsAdjustment();

        this.displayTotal().show();
    },
    postRender: function postRender() {
        var _this = this;

        this.optionsDescription = '';
        this.els.weeksAdded.textContent = 0;
        this.els.weeksRemoved.textContent = 0;
        this.weeksRemovedPrice = 0;
        this.weeksAddedPrice = 0;
        this.els.weeksRemovedPrice.textContent = this.Currency.format(this.weeksRemovedPrice);
        this.els.weeksAddedPrice.textContent = this.Currency.format(this.weeksAddedPrice);

        this.views.buttonFlow.on('confirmBtnClicked', function () {
            return _this.emit('patchMemberShare');
        });

        return this;
    },
    reset: function reset() {
        this.els.sendEmail.checked = false;
        this.optionsDescription = '';
        this.els.weeksAdded.textContent = 0;
        this.els.weeksRemoved.textContent = 0;
        this.weeksRemovedPrice = 0;
        this.els.weeksRemovedPrice.textContent = this.Currency.format(this.weeksRemovedPrice);
        this.els.weeklyAdjustment.textContent = this.Currency.format(0);
        this.weeklyPriceAdjustment = false;
        this.els.shareOptionDescription.textContent = '';
        this.hide();
    },
    setOriginalWeeklyPrice: function setOriginalWeeklyPrice(price) {
        this.originalWeeklyPrice = price;
    },
    setWeeksAffected: function setWeeksAffected(_ref3) {
        var selectable = _ref3.selectable,
            skipped = _ref3.skipped;

        this.originalWeeksAffected = selectable - skipped;
        this.weeksAffected = this.originalWeeksAffected;
        this.els.weeksAffected.textContent = this.weeksAffected;
    },
    updateOptionsAdjustment: function updateOptionsAdjustment() {
        this.optionsAdjustment = this.weeksAffected * this.weeklyPriceAdjustment;
        this.els.optionsAdjustment.textContent = this.Currency.format(this.optionsAdjustment);
        this.els.optionsAdjustment.classList.add(this.optionsAdjustment < 0 ? 'is-negative' : 'is-positive');
    }
});

},{"./__proto__":123}],118:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('./MyView'),
    Signup = function Signup() {
    return MyView.apply(this, arguments);
};

_extends(Signup.prototype, MyView.prototype, {
    done: function done() {
        this.templateData.leftBtn.hide();
        this.templateData.rightBtn.hide();
    },


    events: {
        'leftBtn': { method: 'goBack' },
        'rightBtn': { method: 'validateView' }
    },

    goBack: function goBack() {
        var _this = this;

        this.templateData.leftBtn.off();

        this.instances[this.views[this.currentIndex].name].hide();
        this.instances[this.views[this.currentIndex].name].templateData.container.removeClass('slide-in-left').removeClass('slide-in-right');

        this.currentIndex -= 1;

        this.state.signup.index = this.currentIndex;
        this.saveState();

        this.showProperView(true);

        window.setTimeout(function () {
            return _this.delegateEvents('leftBtn', _this.templateData.leftBtn);
        }, 1000);
    },


    instances: {},

    noShares: function noShares() {
        this.templateData.leftBtn.hide();
        this.templateData.rightBtn.hide();

        this.instances.shares.templateData.header.text('There are no shares available at this time');
    },
    postRender: function postRender() {

        this.signupData = {};

        this.state = this.user.get('state');

        if (this.state.signup && Object.keys(this.state.signup).length) return this.updateState(this.state.signup);

        if (!this.currentIndex) this.currentIndex = 0;
        this.state.signup = { index: this.currentIndex, shares: [] };
        this.showProperView();
    },


    requiresLogin: false,

    saveState: function saveState() {
        var _this2 = this;

        this.$.ajax({
            data: JSON.stringify({ state: this.state }),
            method: "PATCH",
            url: "/user" }).fail(function (e) {
            return new _this2.Error(e);
        });
    },
    serializeShare: function serializeShare(share) {
        return {
            id: share.id,
            selectedDelivery: share.get('selectedDelivery'),
            selectedOptions: share.get('selectedOptions'),
            skipDays: share.get('skipDays')
        };
    },
    showNext: function showNext() {
        var _this3 = this;

        this.instances[this.views[this.currentIndex].name].hide();
        this.instances[this.views[this.currentIndex].name].templateData.container.removeClass('slide-in-left').removeClass('slide-in-right');

        this.currentIndex += 1;

        this.state.signup.index = this.currentIndex;
        this.state.signup.shares = this.signupData.shares.map(function (share) {
            return _this3.serializeShare(share);
        });
        this.saveState();

        this.showProperView();
    },
    showProperNav: function showProperNav() {
        var left = this.templateData.leftBtn,
            right = this.templateData.rightBtn;

        if (this.currentIndex > 0) this.templateData.intro.text('Continue your CSA sign-up');
        if (this.currentIndex === 5) this.templateData.intro.text('Review your order and check out');

        if (this.currentIndex === 0) {
            left.hide();
            if (right.is(':hidden')) right.show();
        } else if (this.currentIndex === this.views.length - 1) {
            right.hide();
            if (left.is(':hidden')) left.show();
        } else {
            if (left.is(':hidden')) left.show();
            if (right.is(':hidden')) right.show();
        }
    },
    showProperView: function showProperView(back) {
        var _this4 = this;

        var currentViewName = this.views[this.currentIndex].name,
            klass = this.util.format('slide-in-%s', back ? 'left' : 'right');

        this.showProperNav();

        if (this.instances[currentViewName]) {
            this.instances[currentViewName].show().templateData.container.addClass(klass);
            if (this.instances[currentViewName].goBack) this.goBack();
            return;
        }

        this.instances[currentViewName] = new this.views[this.currentIndex].view({
            container: this.templateData.walkthrough,
            containerClass: klass,
            factory: this.factory,
            signupData: this.signupData
        });

        if (this.instances[currentViewName].templateData) this.instances[currentViewName].templateData.container.addClass(klass);

        if (this.views[this.currentIndex].on) {
            this.views[this.currentIndex].on.forEach(function (eventData) {
                return _this4.instances[currentViewName].on(eventData.event, function () {
                    return _this4[eventData.method]();
                });
            });
        }

        if (this.instances[currentViewName].goBack) this.goBack();

        return this;
    },


    template: require('../templates/signup'),

    updateState: function updateState(data) {
        var _this5 = this;

        this.currentIndex = data.index;

        this.instances.shares = new this.views[0].view({
            container: this.templateData.walkthrough,
            factory: this.factory,
            sessionShares: data.shares,
            signupData: this.signupData
        }).on('initialized', function () {
            return _this5.showProperView();
        });

        this.instances.shares.hide();
    },
    validateView: function validateView() {
        var _this6 = this;

        var view = this.instances[this.views[this.currentIndex].name];

        this.templateData.rightBtn.off();

        this.Q.when(view.validate()).then(function (result) {
            if (result) _this6.showNext();
        }).fail(function (e) {
            return new _this6.Error(e);
        }).done(function () {
            return window.setTimeout(function () {
                return _this6.delegateEvents('rightBtn', _this6.templateData.rightBtn);
            }, 1000);
        });
    },


    views: [{ name: 'shares', view: require('./signup/Shares'), on: [{ event: 'noShares', method: 'noShares' }] }, { name: 'memberInfo', view: require('./signup/MemberInfo') }, { name: 'shareOptions', view: require('./signup/ShareOptions') }, { name: 'delivery', view: require('./signup/Delivery') }, { name: 'dateSelection', view: require('./signup/DateSelection') }, { name: 'summary', view: require('./signup/Summary'), on: [{ event: 'done', method: 'done' }] }]

});

module.exports = Signup;

},{"../templates/signup":65,"./MyView":110,"./signup/DateSelection":126,"./signup/Delivery":127,"./signup/MemberInfo":132,"./signup/ShareOptions":139,"./signup/Shares":140,"./signup/Summary":142}],119:[function(require,module,exports){
'use strict';

module.exports = {

    events: {
        'cancelBtn': 'click',
        'submitBtn': 'click'
    },

    handleSubmissionError: function handleSubmissionError(e) {
        this.Toast.showMessage('error', this.toastError || 'Error');
        this.Error(e);
        this.onSubmitEnd();
    },
    onCancelBtnClick: function onCancelBtnClick() {
        this.delete().catch(this.Error);
    },
    onSubmitBtnClick: function onSubmitBtnClick() {
        var _this = this;

        if (this.submitting) return;
        this.onSubmitStart();
        this.submit().then(function () {
            return Promise.resolve(_this.onSubmitEnd());
        }).catch(function (e) {
            return _this.handleSubmissionError(e);
        });
    },
    onSubmitEnd: function onSubmitEnd() {
        this.submitting = false;
        this.els.submitBtn.classList.remove('submitting');
    },
    onSubmitStart: function onSubmitStart() {
        this.submitting = true;
        this.els.submitBtn.classList.add('submitting');
    }
};

},{}],120:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = Object.create(_extends({}, require('./__proto__'), {

    Icons: {
        error: require('./templates/lib/error')(),
        success: require('./templates/lib/checkmark')()
    },

    insertion: { el: document.body },

    name: 'Toast',

    requiresLogin: false,

    showMessage: function showMessage(type, message) {
        var _this = this;

        return new Promise(function (resolve, reject) {
            if (/show/.test(_this.status)) return resolve();

            _this.resolution = resolve;

            if (type !== 'error') _this.els.container.classList.add('success');

            _this.els.message.textContent = message;
            _this.els.title.textContent = type === 'error' ? 'Error' : 'Success';
            _this.slurpTemplate({ insertion: { el: _this.els.icon }, template: type === 'error' ? _this.Icons.error : _this.Icons.success });

            _this.status = 'showing';

            _this.show(true).then(function () {
                return _this.hide(true);
            }).then(function () {
                return _this.teardown();
            }).catch(reject);
        });
    },
    teardown: function teardown() {
        if (this.els.container.classList.contains('success')) this.els.container.classList.remove('success');
        this.els.message.textContent = '';
        this.els.message.title = '';
        if (this.els.icon.firstChild) this.els.icon.removeChild(this.els.icon.firstChild);

        this.status = 'hidden';
        this.resolution();
    },


    template: require('./templates/Toast')

}), {}).constructor();

},{"./__proto__":123,"./templates/Toast":181,"./templates/lib/checkmark":186,"./templates/lib/error":188}],121:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./__proto__'), {

    Pikaday: require('pikaday'),

    Templates: {
        Transaction: require('./templates/CsaTransaction'),
        EditTransaction: require('./templates/EditCsaTransaction')
    },

    Views: {
        editButtons: function editButtons() {
            return {
                model: Object.create(this.Model).constructor({
                    hide: true,
                    states: {
                        start: [{ name: 'edit', svg: require('./templates/lib/edit')(), emit: true, nextState: 'onEdit' }, { name: 'garbage', svg: require('./templates/lib/garbage')(), nextState: 'onDelete', emit: true }],
                        onDelete: [{ name: 'confirmDelete', class: 'link', 'text': 'Delete?', nextState: 'start', emit: 'true' }, { name: 'cancelDelete', svg: require('./templates/lib/ex')({ name: 'cancelDelete' }), nextState: 'start', emit: true }],
                        onEdit: [{ name: 'confirmEdit', class: 'link', 'text': 'Edit', emit: 'true', nextState: 'start' }, { name: 'cancelEdit', svg: require('./templates/lib/ex')({ name: 'cancelEdit' }), nextState: 'start', emit: true }]
                    }
                })
            };
        },
        emailButtons: function emailButtons() {
            return {
                model: Object.create(this.Model).constructor({
                    hide: true,
                    states: {
                        start: [{ name: 'sendEmail', class: 'save-btn', text: 'Send Email Reminder', nextState: 'confirm' }],
                        confirm: [{ name: 'confirmEmail', class: 'save-btn', text: 'Are you Sure?', emit: true, nextState: 'start' }, { name: 'cancel', nextState: 'start', class: 'reset-btn', text: 'Cancel' }]
                    }
                })
            };
        },

        addTransaction: function addTransaction() {
            return { model: this.model };
        }
    },

    addTransaction: function addTransaction() {
        var _this = this;

        this.model.post(_extends({ memberShareId: this.share.membershareid }, this.model.attributes.reduce(function (memo, attr) {
            return _extends(memo, _defineProperty({}, attr, _this.els[attr].value));
        }, {}))).then(function (response) {
            _this.insertTransaction(response.id);
            _this.updateBalance();
            _this.Toast.showMessage('success', 'Transaction added!');
        }).catch(function (e) {
            _this.Error(e);_this.Toast.showMessage('error', 'Error adding transaction');
        });
    },
    clear: function clear() {
        this.els.transactions.innerHTML = '';
    },


    events: {
        list: 'click',
        transaction: ['mouseenter', 'mouseleave']
    },

    appendTransaction: function appendTransaction(transaction) {
        this.slurpTemplate({
            template: this.Templates.Transaction(transaction, { currency: this.Currency.format, moment: this.Moment }),
            insertion: { el: this.els.transactions }
        });
    },
    insertTransaction: function insertTransaction(transactionId) {
        var index = this.model.data.findIndex(function (datum) {
            return datum.id == transactionId;
        }),
            children = Array.from(this.els.transactions.children),
            insertion = index === 0 ? { el: children[0], method: 'insertBefore' } : { el: children[index - 1], method: 'after' };

        this.slurpTemplate({
            template: this.Templates.Transaction(this.model.data[index], { currency: this.Currency.format, moment: this.Moment }),
            insertion: insertion
        });
    },
    editTransaction: function editTransaction(e) {
        var _this2 = this;

        var el = e.target.closest('li'),
            id = el.getAttribute('data-id');

        return Promise.all([this.model.patch(id, this.model.attributes.reduce(function (memo, attr) {
            return _extends(memo, _defineProperty({}, attr, attr === 'created' ? _this2.Moment(_this2.els.editTransaction.querySelector('[data-attr="created"]').value, 'MMM D, YYYY').format('YYYY-MM-DD') : _this2.els.editTransaction.querySelector('[data-attr="' + attr + '"]').value));
        }, {})), e.fdNextState]).then(function (datum) {
            _this2.removeEditRow();
            _this2.moveOutEditButtons();
            el.remove();
            _this2.insertTransaction(id);
            _this2.updateBalance();
            _this2.Toast.showMessage('success', 'Transaction edited!');
        }).catch(function (e) {
            _this2.removeEditRow();
            _this2.Error(e);
            _this2.Toast.showMessage('error', 'Error editing transaction');
        });
    },
    deleteTransaction: function deleteTransaction(e) {
        var _this3 = this;

        var id = e.target.closest('li').getAttribute('data-id');

        Promise.all([this.model.delete(id), e.fdNextState]).then(function () {
            _this3.moveOutEditButtons();
            _this3.els.transactions.querySelector('li[data-id="' + id + '"]').remove();
            _this3.updateBalance();
            _this3.Toast.showMessage('success', 'Transaction deleted!');
        }).catch(function (e) {
            _this3.Error(e);
            _this3.Toast.showMessage('error', 'Error adding transaction');
        });
    },


    model: require('../models/CsaTransaction'),

    onAddBtnClick: function onAddBtnClick() {
        var _this4 = this;

        if (this.state === 'confirmDelete') {
            this.model.delete(this.markedForDeletion).then(function () {
                _this4.els.transactions.querySelector('li[data-id="' + _this4.markedForDeletion + '"]').remove();
                _this4.updateBalance();
                _this4.Toast.showMessage('success', 'Transaction deleted!');
                _this4.resetState();
            });
        } else if (this.state === 'confirming') {
            this.model.post(_extends({ memberShareId: this.share.membershareid }, this.model.attributes.reduce(function (memo, attr) {
                return _extends(memo, _defineProperty({}, attr, _this4.els[attr].value));
            }, {}))).then(function (response) {
                _this4.insertTransaction(response.id);
                _this4.updateBalance();
                _this4.Toast.showMessage('success', 'Transaction added!');
                _this4.resetState();
            }).catch(function (e) {
                _this4.Error(e);
                _this4.Toast.showMessage('error', 'Error adding transaction');
                _this4.resetState();
            });
        } else if (this.state === 'adding') {

            this.els.addBtn.textContent = 'Are you sure?';
            this.state = 'confirming';
        } else if (!this.state) {
            this.els.cancelBtn.classList.remove('hidden');
            this.els.addTransactionRow.classList.remove('hidden');

            this.state = 'adding';
        }
    },
    onExClick: function onExClick(e) {
        if (this.markedForDeletion) return;

        var item = e.target.closest('li');

        this.markedForDeletion = item.getAttribute('data-id');
        item.classList.add('marked');

        this.els.addBtn.textContent = 'Confirm Delete';
        this.els.cancelBtn.classList.remove('hidden');
        this.state = 'confirmDelete';
    },
    onListClick: function onListClick(e) {
        if (this.currentSelection) this.currentSelection.classList.remove('selected');

        var el = e.target;
        this.currentSelection = el;
        el.classList.add('selected');
        this.emit('selected', { customer: this.customer, share: this.MemberSeason.data.find(function (season) {
                return season.id == el.getAttribute('data-id');
            }) });
    },
    onTransactionMouseenter: function onTransactionMouseenter(e) {
        if (e.target.tagName !== "LI") return;
        if (this.views.editButtons.state !== 'start') return;
        e.target.children[0].appendChild(this.views.editButtons.els.container);
        this.views.editButtons.els.container.classList.remove('fd-hidden', 'fd-hide');
    },
    onTransactionMouseleave: function onTransactionMouseleave(e) {
        if (e.target.tagName !== "LI") return;
        if (this.views.editButtons.state !== 'start') return;
        this.moveOutEditButtons();
    },
    moveOutEditButtons: function moveOutEditButtons() {
        this.els.transactions.after(this.views.editButtons.els.container);
        this.views.editButtons.els.container.classList.add('fd-hidden');
    },
    postRender: function postRender() {
        var _this5 = this;

        this.views.emailButtons.on('confirmEmailClicked', function (e) {
            return _this5.sendMail();
        });

        this.views.editButtons.on('editClicked', function (e) {
            return _this5.createEditRow(e);
        });
        this.views.editButtons.on('cancelEditClicked', function (e) {
            return _this5.removeEditRow(e);
        });
        this.views.editButtons.on('confirmEditClicked', function (e) {
            return _this5.editTransaction(e);
        });

        this.views.editButtons.on('garbageClicked', function (e) {
            return _this5.toggleDeleteStyle(e, true);
        });
        this.views.editButtons.on('cancelDeleteClicked', function (e) {
            return _this5.toggleDeleteStyle(e, false);
        });
        this.views.editButtons.on('confirmDeleteClicked', function (e) {
            return _this5.deleteTransaction(e);
        });

        this.model.on('added', function (datum) {
            return _this5.onModelAdd(datum);
        });

        return this;
    },
    createEditRow: function createEditRow(e) {
        var _this6 = this;

        this.editedRow = e.target.closest('li');
        this.editedRow.classList.add('confirming-edit');

        var model = this.model.data.find(function (datum) {
            return datum.id == _this6.editedRow.getAttribute('data-id');
        });

        this.slurpTemplate({
            insertion: { el: this.editedRow, method: 'after' },
            template: this.Templates.EditTransaction(this.model.attributes.reduce(function (memo, attr) {
                return _extends(memo, _defineProperty({}, attr, attr === 'created' ? _this6.Moment(model.created).format('MMM D, YYYY') : model[attr]));
            }, { actions: this.model.actions }))
        });

        this.created = new this.Pikaday({ field: this.els.editTransaction.querySelector('input[data-attr="created"]'), format: 'MMM D, YYYY' });
    },
    removeEditRow: function removeEditRow(e) {
        this.editedRow.classList.remove('confirming-edit');
        this.editedRow = undefined;
        this.els.editTransaction.remove();
        delete this.els.editTransaction;
    },
    toggleDeleteStyle: function toggleDeleteStyle(e, value) {
        e.target.closest('li').classList.toggle('confirming-delete', value);
    },
    onCancelAddTransaction: function onCancelAddTransaction() {
        var _this7 = this;

        this.els.addTransactionRow.classList.add('hidden');
        this.model.attributes.forEach(function (attr) {
            return _this7.els[attr].value = attr === 'action' ? _this7.model.actions[0] : '';
        });
    },
    onModelAdd: function onModelAdd(datum) {
        this.insertTransaction(datum.id);
        this.updateBalance();
    },
    sendMail: function sendMail() {
        var _this8 = this;

        return this.Xhr({
            method: 'post',
            resource: 'mail',
            data: JSON.stringify({
                to: this.customer.person.email,
                subject: 'Patchwork Gardens ' + this.share.label + ' Balance',
                body: 'According to our records, you have an outstanding balance of ' + this.els.balance.textContent + '.\r\n\r\nPlease send payment at your earliest convenience to Patchwork Gardens, 9057 W Third St, Dayton OH 45417.\r\n\r\nIf you believe this is incorrect, please contact us by email or phone (937) 835-5807.\r\n\r\nThank You.'
            })
        }).then(function () {
            return _this8.Toast.showMessage('success', 'Email sent.');
        }).catch(function (e) {
            _this8.Error(e);_this8.Toast.showMessage('error', 'Error sending email.');
        });
    },
    update: function update(_ref) {
        var _this9 = this;

        var customer = _ref.customer,
            share = _ref.share;

        this.customer = customer;
        this.share = share;

        this.clear();

        this.model.get({ query: { memberShareId: share.membershareid } }).then(function () {
            return _this9.model.data.forEach(function (csaTransaction) {
                return _this9.appendTransaction(csaTransaction);
            });
        }).then(function () {
            return _this9.updateBalance().show();
        }).catch(this.Error);

        this.views.addTransaction.update(share.membershareid);
    },
    updateBalance: function updateBalance() {
        var balance = this.model.getBalance();
        this.els.balance.textContent = this.Currency.format(balance);

        if (balance > 0) {
            this.views.emailButtons.show();
        } else {
            this.views.emailButtons.hide();
        }

        return this;
    }
});

},{"../models/CsaTransaction":14,"./__proto__":123,"./templates/CsaTransaction":152,"./templates/EditCsaTransaction":158,"./templates/lib/edit":187,"./templates/lib/ex":189,"./templates/lib/garbage":190,"pikaday":"pikaday"}],122:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Super = require('./__proto__');

module.exports = _extends({}, Super, {

    DeliveryOption: Object.create(Super.Model, { resource: { value: 'deliveryoption' } }),
    GroupDropoffs: Object.create(Super.Model, { resource: { value: 'groupdropoff' } }),
    Route: Object.create(Super.Model, { resource: { value: 'deliveryroute' } }),
    SkipWeeks: Object.create(Super.Model, { resource: { value: 'membershareskipweek' } }),

    Share: require('../models/Share'),

    events: {
        dates: 'click',
        resetBtn: 'click'
    },

    clear: function clear() {
        this.els.dates.innerHTML = '';

        this.els.resetBtn.classList.add('hidden');
        this.els.editSummary.classList.add('hidden');
    },
    determineDates: function determineDates(dayOfWeek) {
        var _this = this;

        this.els.deliveryDay.textContent = this.Moment().isoWeekday(dayOfWeek).format('dddd');
        this.dates = [];

        if (!Number.isInteger(dayOfWeek)) return this;

        var now = this.Moment(),
            nextDeliveryCutoff = now,
            endDate = this.Moment(this.model.share.enddate);

        var deliveryDate = this.Moment(this.model.share.startdate),
            startDay = deliveryDate.day();

        while (startDay != dayOfWeek) {
            deliveryDate.add(1, 'days');
            startDay = this.Moment(deliveryDate).day();
        }

        while (endDate.diff(deliveryDate, 'days') >= 0) {
            var isSkipWeek = this.SkipWeeks.data.find(function (week) {
                return _this.Moment(week.date).week() === _this.Moment(deliveryDate).week();
            }) ? true : false;

            this.dates.push({
                date: this.Moment(deliveryDate),
                unselectable: Boolean(deliveryDate.diff(nextDeliveryCutoff) < 0),
                selected: !isSkipWeek
            });

            deliveryDate.add(7, 'days');
        }

        return this;
    },
    getPatchData: function getPatchData() {
        var _this2 = this;

        var addedDates = [],
            removedDates = [];

        Object.keys(this.changedDates).forEach(function (date) {
            var editedStatus = _this2.changedDates[date].editedStatus;

            if (!editedStatus) return;

            var formattedDate = _this2.Moment(date).format("YYYY-MM-DD");
            if (editedStatus === 'selected') addedDates.push(formattedDate);else removedDates.push(formattedDate);
        });

        return {
            addedDates: addedDates,
            removedDates: removedDates,
            allRemoved: Array.from(this.els.dates.querySelectorAll('li:not(.selected)')).map(function (el) {
                return _this2.Moment(el.getAttribute('data-date'), 'YYYYMMDD').format('YYYY-MM-DD');
            })
        };
    },
    getWeeksAffected: function getWeeksAffected() {
        var selectableDates = this.dates.filter(function (date) {
            return !date.unselectable;
        });
        return { selectable: selectableDates.length, skipped: selectableDates.filter(function (date) {
                return !date.selected;
            }).length };
    },
    getDayOfWeek: function getDayOfWeek() {
        var delivery = this.model.delivery.data[0];

        return delivery.groupdropoff.id ? this.Xhr({ method: 'get', resource: 'sharegroupdropoff', qs: JSON.stringify({ shareid: this.model.share.id, groupdropoffid: delivery.groupdropoff.id }) }).then(function (response) {
            return Promise.resolve(response[0].dayofweek);
        }) : delivery.deliveryoption.name === 'farm' ? this.Route.data.find(function (route) {
            return route.label == 'farm';
        }).dayofweek : this.Xhr({
            method: 'get',
            resource: 'zipcoderoute',
            qs: JSON.stringify({
                zipcode: this.model.customer.member.zipcode,
                routeid: { operation: 'join', value: { table: 'deliveryroute', column: 'id' } }
            })
        }).then(function (response) {
            return Promise.resolve(response[0]['deliveryroute.dayofweek']);
        });
    },
    getTotalDates: function getTotalDates() {
        return this.els.dates.querySelectorAll('li.selected').length;
    },
    onDatesClick: function onDatesClick(e) {
        var _this3 = this;

        var el = e.target.closest('li'),
            date = el.getAttribute('data-date');

        if (el.classList.contains('unselectable')) return;

        var editedStatus = void 0;

        if (!this.changedDates[date]) this.changedDates[date] = { initialStatus: el.classList.contains('selected') ? 'selected' : 'removed' };

        el.classList.toggle('selected');
        editedStatus = el.classList.contains('selected') ? 'selected' : 'removed';

        if (editedStatus !== this.changedDates[date].initialStatus) {
            this.changedDates[date].editedStatus = editedStatus;
            el.classList.add('edited');
            this.els.resetBtn.classList.remove('hidden');
        } else {
            this.changedDates[date].editedStatus = undefined;
            el.classList.remove('edited');
        }

        if (!Object.keys(this.changedDates).find(function (key) {
            return _this3.changedDates[key].editedStatus !== undefined;
        })) {
            this.els.resetBtn.classList.add('hidden');
            this.emit('reset', this.model);
            return this.els.editSummary.classList.add('hidden');
        }

        this.showEditSummary();
    },
    onResetBtnClick: function onResetBtnClick() {
        var _this4 = this;

        this.els.resetBtn.classList.add('hidden');
        this.els.editSummary.classList.add('hidden');

        Object.keys(this.changedDates).forEach(function (key) {
            if (_this4.changedDates[key].editedStatus) {
                var el = _this4.els.dates.querySelector('li[data-date=' + CSS.escape(key));
                el.classList.toggle('selected');
                el.classList.remove('edited');
            }
        });

        this.update(this.model);
        this.emit('reset', this.model);
    },
    renderDates: function renderDates() {
        var _this5 = this;

        this.dates.forEach(function (datum) {
            return _this5.slurpTemplate({ template: _this5.templates.date(datum), insertion: { el: _this5.els.dates } });
        });
        return this;
    },
    showEditSummary: function showEditSummary() {
        var _this6 = this;

        var result = 0,
            added = 0,
            removed = 0;

        this.els.selectedDates.innerHTML = '';
        this.els.removedDates.innerHTML = '';

        Object.keys(this.changedDates).forEach(function (date) {
            var editedStatus = _this6.changedDates[date].editedStatus;

            if (editedStatus) {

                editedStatus === 'selected' ? added += 1 : removed += 1;

                _this6.slurpTemplate({
                    insertion: { el: _this6.els[editedStatus + 'Dates'] },
                    template: _this6.templates.summaryColumn({ value: _this6.Moment(date).format("MMM D") })
                });
            }
        });

        result = added - removed;
        this.els.weekChange.textContent = result;
        this.els.weekChange.classList.toggle('is-negative', Boolean(result < 0));

        this.els.editSummary.classList.remove('hidden');

        this.emit('adjustment', { added: added, removed: removed });
    },


    templates: {
        date: require('./templates/DeliveryDate'),
        summaryColumn: function summaryColumn(date) {
            return '<li>' + date.value + '</li>';
        }
    },

    update: function update(_ref) {
        var _this7 = this;

        var customer = _ref.customer,
            delivery = _ref.delivery,
            share = _ref.share;

        if (this.updating) return;

        this.updating = true;

        this.model = arguments[0];

        this.changedDates = {};

        return this.Route.get().then(function () {
            return _this7.SkipWeeks.get({ query: { membershareid: share.membershareid } });
        }).then(function () {
            return _this7.getDayOfWeek();
        }).then(function (dayOfWeek) {
            _this7.clear();
            _this7.determineDates(dayOfWeek).renderDates().show();
            return Promise.resolve(_this7.updating = false);
        });
    },
    updateDelivery: function updateDelivery(data) {
        var _this8 = this;

        var modelCopy = JSON.parse(JSON.stringify(this.model));

        return this.DeliveryOption.get({ query: { name: data.deliveryOption } }).then(function () {
            if (_this8.DeliveryOption.data.length) modelCopy.delivery.data[0].deliveryoption = _this8.DeliveryOption.data[0];

            if (!data.groupOption) {
                Object.keys(modelCopy.delivery.data[0].groupdropoff).forEach(function (key) {
                    return modelCopy.delivery.data[0].groupdropoff[key] = null;
                });
            }

            return data.groupOption ? _this8.GroupDropoffs.get({ query: { name: data.groupOption } }).then(function () {
                if (_this8.GroupDropoffs.data.length) modelCopy.delivery.data[0].groupdropoff = _this8.GroupDropoffs.data[0];
                _this8.update(modelCopy);
            }) : _this8.update(modelCopy);
        }).catch(this.Error);
    }
});

},{"../models/Share":38,"./__proto__":123,"./templates/DeliveryDate":155}],123:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = _extends({}, require('../../../lib/MyObject').prototype, require('events').EventEmitter.prototype, {

    Currency: new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2
    }),

    Error: require('../../../lib/MyError'),

    Format: require('../Format'),

    Model: require('../models/__proto__'),

    Moment: require('moment'),

    OptimizedResize: require('./lib/OptimizedResize'),

    P: function P(fun) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var thisArg = arguments[2];
        return new Promise(function (resolve, reject) {
            return Reflect.apply(fun, thisArg || undefined, args.concat(function (e) {
                for (var _len = arguments.length, callback = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    callback[_key - 1] = arguments[_key];
                }

                return e ? reject(e) : resolve(callback);
            }));
        });
    },

    Xhr: require('../Xhr'),

    bindEvent: function bindEvent(key, event, el) {
        var _this = this;

        var els = el ? [el] : Array.isArray(this.els[key]) ? this.els[key] : [this.els[key]];
        els.forEach(function (el) {
            return el.addEventListener(event || 'click', function (e) {
                return _this['on' + _this.capitalizeFirstLetter(key) + _this.capitalizeFirstLetter(event)](e);
            });
        });
    },


    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    constructor: function constructor() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


        if (opts.events) {
            _extends(this.events, opts.events);delete opts.events;
        }
        _extends(this, opts);

        this.subviewElements = [];

        if (this.requiresLogin && !this.user.id) return this.handleLogin();
        if (this.user && !this.isAllowed(this.user.attributes)) return this.scootAway();

        return this.initialize().render();
    },
    delegateEvents: function delegateEvents(key, el) {
        var _this2 = this;

        var type = _typeof(this.events[key]);

        if (type === "string") {
            this.bindEvent(key, this.events[key], el);
        } else if (Array.isArray(this.events[key])) {
            this.events[key].forEach(function (eventObj) {
                return _this2.bindEvent(key, eventObj);
            });
        } else {
            this.bindEvent(key, this.events[key].event);
        }
    },
    delete: function _delete() {
        var _this3 = this;

        return this.hide().then(function () {
            _this3.els.container.parentNode.removeChild(_this3.els.container);
            return Promise.resolve(_this3.emit('deleted'));
        });
    },


    events: {},

    fadeInImage: function fadeInImage(el) {
        var _this4 = this;

        el.onload = function () {
            _this4.emit('imgLoaded', el);
            el.removeAttribute('data-src');
        };

        el.setAttribute('src', el.getAttribute('data-src'));
    },
    getContainer: function getContainer() {
        return this.els.container;
    },
    getData: function getData() {
        if (!this.model) this.model = Object.create(this.Model, { resource: { value: this.name } });

        return this.model.get();
    },
    getTemplateOptions: function getTemplateOptions() {
        var rv = _extends(this.user ? { user: this.user.data } : {}, this.Format);

        if (this.model) {
            rv.model = this.model.data;

            if (this.model.meta) rv.meta = this.model.meta;
            if (this.model.attributes) rv.attributes = this.model.attributes;
        }

        if (this.templateOpts) rv.opts = typeof this.templateOpts === 'function' ? this.templateOpts() : this.templateOpts || {};

        return rv;
    },
    handleLogin: function handleLogin() {
        var _this5 = this;

        require('./Login').show().once("success", function (userData) {
            if (!_this5.isAllowed(userData)) return _this5.scootAway();

            _this5.user.set(userData);
            _this5.user.trigger('loggedIn');

            return _this5.onLogin();
        });

        return this;
    },
    hide: function hide(isSlow) {
        return this.hideEl(this.els.container, isSlow);
    },
    hideSync: function hideSync() {
        this.els.container.classList.add('fd-hidden');return this;
    },
    _hideEl: function _hideEl(el, resolve, hash, isSlow) {
        el.removeEventListener('animationend', this[hash]);
        el.classList.add('fd-hidden');
        el.classList.remove('animate-out' + (isSlow ? '-slow' : ''));
        delete this[hash];
        this.isHiding = false;
        resolve();
    },
    hideEl: function hideEl(el, isSlow) {
        var _this6 = this;

        if (this.isHidden(el)) return Promise.resolve();

        var time = new Date().getTime(),
            hash = time + 'Hide';

        return new Promise(function (resolve) {
            _this6[hash] = function (e) {
                return _this6._hideEl(el, resolve, hash, isSlow);
            };
            el.addEventListener('animationend', _this6[hash]);
            el.classList.add('animate-out' + (isSlow ? '-slow' : ''));
        });
    },
    htmlToFragment: function htmlToFragment(str) {
        var range = document.createRange();
        // make the parent of the first div in the document becomes the context node
        range.selectNode(document.getElementsByTagName("div").item(0));
        return range.createContextualFragment(str);
    },
    initialize: function initialize() {
        return _extends(this, { els: {}, slurp: { attr: 'data-js', view: 'data-view', name: 'data-name', img: 'data-src', bgImg: 'data-bg' }, views: {} });
    },
    insertToDom: function insertToDom(fragment, options) {
        var insertion = typeof options.insertion === 'function' ? options.insertion() : options.insertion;

        insertion.method === 'insertBefore' ? insertion.el.parentNode.insertBefore(fragment, insertion.el) : insertion.el[insertion.method || 'appendChild'](fragment);
    },
    isAllowed: function isAllowed(user) {
        if (!this.requiresRole) return true;
        return this.requiresRole && user.roles.includes(this.requiresRole);
    },
    isHidden: function isHidden(el) {
        return el ? el.classList.contains('fd-hidden') : this.els.container.classList.contains('fd-hidden');
    },
    loadBgImage: function loadBgImage(el) {
        var img = new Image();

        img.onload = function () {
            return el.classList.add('bg-loaded');
        };
        img.src = this.Format.ImageSrc(el.getAttribute('data-bg'));
    },
    onLogin: function onLogin() {
        this.initialize().render();
    },
    onNavigation: function onNavigation(path) {
        return this.show();
    },
    showNoAccess: function showNoAccess() {
        alert("No privileges, son");
        return this;
    },
    postRender: function postRender() {
        return this;
    },
    render: function render() {
        if (this.data) this.model = Object.create(this.Model, {}).constructor(this.data);

        this.slurpTemplate({
            insertion: this.insertion || { el: document.body },
            isView: true,
            storeFragment: this.storeFragment,
            template: this.template(this.getTemplateOptions(), { Moment: this.Moment })
        });

        this.renderSubviews();

        if (this.size) {
            this.size();this.OptimizedResize.add(this.size.bind(this));
        }

        return this.postRender();
    },
    renderSubviews: function renderSubviews() {
        var _this7 = this;

        this.subviewElements.forEach(function (obj) {
            var name = obj.name || obj.view;

            var opts = {};

            if (_this7.Views && _this7.Views[obj.view]) opts = _typeof(_this7.Views[obj.view]) === "object" ? _this7.Views[obj.view] : Reflect.apply(_this7.Views[obj.view], _this7, []);
            if (_this7.Views && _this7.Views[name]) opts = _typeof(_this7.Views[name]) === "object" ? _this7.Views[name] : Reflect.apply(_this7.Views[name], _this7, []);

            _this7.views[name] = _this7.factory.create(obj.view, _extends({ insertion: { el: obj.el, method: 'insertBefore' } }, opts));

            if (_this7.events.views) {
                if (_this7.events.views[name]) _this7.events.views[name].forEach(function (arr) {
                    return _this7.views[name].on(arr[0], function (eventData) {
                        return Reflect.apply(arr[1], _this7, [eventData]);
                    });
                });else if (_this7.events.views[obj.view]) _this7.events.views[obj.view].forEach(function (arr) {
                    return _this7.views[name].on(arr[0], function (eventData) {
                        return Reflect.apply(arr[1], _this7, [eventData]);
                    });
                });
            }

            if (obj.el.classList.contains('fd-hidden')) _this7.views[name].hideSync();
            obj.el.remove();
        });

        this.subviewElements = [];

        return this;
    },


    requiresLogin: false,

    scootAway: function scootAway() {
        var _this8 = this;

        this.Toast.show('error', 'You are not allowed here.  Sorry.').catch(function (e) {
            _this8.Error(e);_this8.emit('navigate', '/');
        }).then(function () {
            return _this8.emit('navigate', '/');
        });

        return this;
    },
    show: function show(isSlow) {
        return this.showEl(this.els.container, isSlow);
    },
    showSync: function showSync() {
        this.els.container.classList.remove('fd-hidden');return this;
    },
    _showEl: function _showEl(el, resolve, hash, isSlow) {
        el.removeEventListener('animationend', this[hash]);
        el.classList.remove('animate-in' + (isSlow ? '-slow' : ''));
        delete this[hash];
        resolve();
    },
    showEl: function showEl(el, isSlow) {
        var _this9 = this;

        var time = new Date().getTime(),
            hash = time + 'Show';

        return new Promise(function (resolve) {
            _this9[hash] = function (e) {
                return _this9._showEl(el, resolve, hash, isSlow);
            };
            el.addEventListener('animationend', _this9[hash]);
            el.classList.remove('fd-hidden');
            el.classList.add('animate-in' + (isSlow ? '-slow' : ''));
        });
    },
    slurpEl: function slurpEl(el) {
        var key = el.getAttribute(this.slurp.attr) || 'container';

        if (key === 'container') el.classList.add(this.name);

        this.els[key] = Array.isArray(this.els[key]) ? this.els[key].concat(el) : this.els[key] !== undefined ? [this.els[key], el] : el;

        el.removeAttribute(this.slurp.attr);

        if (this.events[key]) this.delegateEvents(key, el);
    },
    slurpTemplate: function slurpTemplate(options) {
        var _this10 = this;

        var fragment = this.htmlToFragment(options.template),
            selector = '[' + this.slurp.attr + ']',
            viewSelector = '[' + this.slurp.view + ']',
            imgSelector = '[' + this.slurp.img + ']',
            bgImgSelector = '[' + this.slurp.bgImg + ']',
            firstEl = fragment.querySelector('*');

        if (options.isView || firstEl.getAttribute(this.slurp.attr)) this.slurpEl(firstEl);

        Array.from(fragment.querySelectorAll(selector + ', ' + viewSelector + ', ' + imgSelector + ', ' + bgImgSelector)).forEach(function (el) {
            if (el.hasAttribute(_this10.slurp.attr)) {
                _this10.slurpEl(el);
            } else if (el.hasAttribute(_this10.slurp.img)) return _this10.fadeInImage(el);else if (el.hasAttribute(_this10.slurp.bgImg)) return _this10.loadBgImage(el);else if (el.hasAttribute(_this10.slurp.view)) {
                _this10.subviewElements.push({ el: el, view: el.getAttribute(_this10.slurp.view), name: el.getAttribute(_this10.slurp.name) });
            }
        });

        if (options.storeFragment) return _extends(this, { fragment: fragment });

        this.insertToDom(fragment, options);

        if (options.renderSubviews) this.renderSubviews();

        return this;
    }
});

},{"../../../lib/MyError":199,"../../../lib/MyObject":200,"../Format":5,"../Xhr":7,"../models/__proto__":42,"./Login":106,"./lib/OptimizedResize":124,"events":216,"moment":"moment"}],124:[function(require,module,exports){
'use strict';

module.exports = Object.create({
    add: function add(callback) {
        if (!this.callbacks.length) window.addEventListener('resize', this.onResize.bind(this));
        this.callbacks.push(callback);
    },
    onResize: function onResize() {
        if (this.running) return;

        this.running = true;

        window.requestAnimationFrame ? window.requestAnimationFrame(this.runCallbacks.bind(this)) : setTimeout(this.runCallbacks, 66);
    },
    runCallbacks: function runCallbacks() {
        this.callbacks = this.callbacks.filter(function (callback) {
            return callback();
        });
        this.running = false;
    }
}, { callbacks: { writable: true, value: [] }, running: { writable: true, value: false } });

},{}],125:[function(require,module,exports){
'use strict';

var MyView = require('./MyView'),
    Modal = function Modal() {
    return MyView.apply(this, arguments);
};

MyView.prototype._.extend(Modal.prototype, MyView.prototype, {
    checkForEnter: function checkForEnter(e) {
        if (e.keyCode === 13) this.emitConfirmation();
    },


    emitConfirmation: function emitConfirmation() {
        this.emit('submit', this.getFormData());
    },

    events: {
        'confirmBtn': { event: 'click', selector: '', method: 'emitConfirmation' }
    },

    hide: function hide(options) {

        this.templateData = this._.pick(this.templateData, this.templateDataKeys);

        this.templateData.container.modal('hide');

        this.templateData.title.text('');
        this.templateData.header.show();
        this.templateData.body.removeClass('hide').empty();
        this.templateData.footer.show();
        this.templateData.cancelBtn.show().text('Cancel');
        this.templateData.closeBtn.show();
        this.templateData.confirmBtn.show().text('Save');

        return this;
    },

    postRender: function postRender() {
        var _this = this;

        this.$(document).on('keyup', this.checkForEnter.bind(this));

        this.templateData.container.on('hidden.bs.modal', function () {
            _this.hide({ reset: true });
            _this.emit('hidden');
            _this.removeAllListeners('submit');
        });

        this.templateData.container.on('shown.bs.modal', function () {
            var firstInput = _this.$('.modal-body input:first');
            _this.emit('shown');
            if (firstInput.length && !/date/.test(firstInput.attr('id'))) firstInput.focus();
        });

        return this;
    },

    requiresLogin: false,

    show: function show(options) {

        this.templateDataKeys = Object.keys(this.templateData);

        var bsOpts = { show: true };

        if (options.title) {
            this.templateData.title.text(options.title);
            this.templateData.header.show();
        } else {
            this.templateData.header.hide();
        }

        if (options.body) {
            this.templateData.body.removeClass('hide');
            options.body.charAt(0) === '<' ? this.slurpTemplate({ template: options.body, insertion: { $el: this.templateData.body, method: 'append' } }) : this.templateData.body.html(options.body);
        } else if (!options.body && this.templateData.body.children().length === 0) {
            this.templateData.body.addClass('hide');
        }

        if (options.hideFooter) this.templateData.footer.hide();

        if (options.confirmText) this.templateData.confirmBtn.text(options.confirmText);

        if (options.hideCancelBtn) this.templateData.cancelBtn.hide();
        if (options.cancelText) this.templateData.cancelBtn.text(options.cancelText);

        if (options.static) {
            bsOpts.backdrop = 'static';
            bsOpts.keyboard = false;
            this.templateData.closeBtn.hide();
        }

        this.templateData.container.modal(bsOpts);

        return this;
    },


    template: require('../templates/modal')(require('handlebars')),

    updateContent: function updateContent(updates) {
        var _this2 = this;

        this._.updates.each(function (value, key) {
            return _this2.templateData[key].html(value);
        });
    }

});

module.exports = new Modal({ container: MyView.prototype.$('body') });

},{"../templates/modal":61,"./MyView":110,"handlebars":246}],126:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    DateSelection = function DateSelection() {
    return List.apply(this, arguments);
};

_extends(DateSelection.prototype, List.prototype, {

    ItemView: require('./PickupDates'),

    collection: { comparator: 'startEpoch' },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares };
    },
    itemModels: function itemModels() {
        return this.signupData.shares.models;
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.signupData.shares.on('add', function (share) {
            return _this.items.add(share);
        }).on('remove', function (share) {
            return _this.items.remove(share);
        });

        this.preValidate();
    },
    preValidate: function preValidate() {
        var _this2 = this;

        this.goBack = false;

        this.items.forEach(function (share) {
            var selectedDelivery = share.get('selectedDelivery');

            if (!Number.isInteger(selectedDelivery.dayofweek) || !selectedDelivery.starttime || !selectedDelivery.starttime) {
                share.set({ selectedDelivery: {} });
                _this2.goBack = true;
            }
        });
    },


    requiresLogin: false,

    selection: true,

    show: function show() {
        List.prototype.show.call(this);

        this.preValidate();

        return this;
    },


    template: require('../../templates/signup/dateSelection'),

    validate: function validate() {
        var _this3 = this;

        var valid = true,
            errorViews = [],
            targetErrorView = null;

        Object.keys(this.itemViews).forEach(function (id) {
            if (!_this3.itemViews[id].valid) {
                valid = false;
                errorViews.push(_this3.itemViews[id].templateData.container);
                _this3.itemViews[id].templateData.container.addClass('has-error');
            }
        });

        if (errorViews.length) {
            targetErrorView = errorViews.slice(-1)[0];
            this.$('html, body').animate({
                scrollTop: targetErrorView.offset().top
            }, 500);
        }

        if (valid) {
            //.reject( deliveryDay => deliveryDay.get('unselectable') )

            this.items.forEach(function (item) {
                return item.set('skipDays', _this3._(item.get('deliveryDates').reject(function (deliveryDay) {
                    return _this3.itemViews[item.id].selectedItems[deliveryDay.id] ? true : false;
                })).map(function (deliveryDay) {
                    return deliveryDay.id;
                }));
            });
        }

        return valid;
    }
});

module.exports = DateSelection;

},{"../../templates/signup/dateSelection":66,"../util/List":195,"./PickupDates":136}],127:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    Delivery = function Delivery() {
    return List.apply(this, arguments);
};

_extends(Delivery.prototype, List.prototype, {

    ItemView: require('./DeliveryOptions'),

    Models: {
        DeliveryRoute: require('../../models/DeliveryRoute')
    },

    collection: { comparator: 'startEpoch' },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares, signupData: this.signupData };
    },
    itemModels: function itemModels() {
        return this.signupData.shares.models;
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.signupData.shares.on('add', function (share) {
            return _this.items.add(share);
        }).on('remove', function (share) {
            return _this.items.remove(share);
        });
    },


    requiresLogin: false,

    template: require('../../templates/signup/delivery'),

    templates: {
        verifyAddress: require('../../templates/signup/verifyAddress')
    },

    validate: function validate() {
        var _this2 = this;

        var valid = true,
            errorViews = [],
            targetErrorView = null,
            homeDeliverySelected = false,
            addressModel = this.user.get('addressModel'),
            postalCode = addressModel && addressModel.postalCode ? addressModel.postalCode : undefined,
            deferred = this.Q.defer();

        Object.keys(this.itemViews).forEach(function (id) {
            if (!_this2.itemViews[id].valid) {
                valid = false;
                errorViews.push(_this2.itemViews[id].templateData.container);
                _this2.itemViews[id].templateData.container.addClass('has-error');
            }
        });

        if (!valid) return false;

        Object.keys(this.itemViews).forEach(function (id) {
            _this2.items.get(id).set('selectedDelivery', _extends({}, _this2.itemViews[id].selectedDelivery));
            if (_this2.itemViews[id].selectedDelivery.isHome) homeDeliverySelected = true;
        });

        if (errorViews.length) {
            targetErrorView = errorViews.slice(-1)[0];
            this.$('html, body').animate({
                scrollTop: targetErrorView.offset().top
            }, 500);
        }

        if (!valid) return false;

        if (homeDeliverySelected && this.user.get('customAddress')) {
            this.modalView.show({
                body: this.templates.verifyAddress({ address: this.user.get('address'), zipCode: postalCode }),
                title: 'Verify Adress' }).on('hidden', function () {

                Object.keys(_this2.itemViews).forEach(function (id) {
                    var selectedDelivery = _this2.items.get(id).get('selectedDelivery');
                    if (!selectedDelivery.dayofweek || !selectedDelivery.starttime || !selectedDelivery.endtime) deferred.reject();
                });

                deferred.resolve();
            }).on('submit', function () {
                var zipRoute = new (_this2.Model.extend({ parse: function parse(response) {
                        return response[0];
                    }, urlRoot: "/zipcoderoute" }))(),
                    homeDeliveryRoute = new _this2.Models.DeliveryRoute(),
                    userAttributes;

                _this2.$('#zipCodeFormGroup').removeClass('has-error');
                _this2.$('#zipCodeHelpBlock').addClass('hide');

                if (!_this2.$('#verifiedZipCode').val().length) {
                    _this2.$('#zipCodeFormGroup').addClass('has-error');
                    _this2.$('#zipCodeHelpBlock').removeClass('hide');
                    return;
                }

                _this2.Q(zipRoute.fetch({ data: { zipcode: _this2.$('#verifiedZipCode').val() } })).then(function () {
                    if (Object.keys(zipRoute.attributes).length === 0) {
                        _this2.$('#zipCodeFormGroup').addClass('has-error');
                        _this2.$('#zipCodeHelpBlock').removeClass('hide');
                        return;
                    }

                    return _this2.Q(homeDeliveryRoute.set({ id: zipRoute.get('routeid') }).fetch()).then(function () {
                        Object.keys(_this2.itemViews).forEach(function (id) {
                            var selectedDelivery = _extends({}, _this2.itemViews[id].selectedDelivery, homeDeliveryRoute.pick(['dayofweek', 'starttime', 'endtime']));
                            if (_this2.itemViews[id].selectedDelivery.isHome) {
                                _this2.items.get(id).set('selectedDelivery', selectedDelivery);
                                _this2.itemViews[id].selectedDelivery = selectedDelivery;
                                _this2.itemViews[id].showFeedback(_this2.itemViews[id].feedback.home(selectedDelivery));
                            }
                        });

                        userAttributes = _extends({}, _this2.user.attributes, {
                            address: _this2.$('#verifiedAddress').val(),
                            addressModel: _extends(_this2.user.get('addressModel') || {}, { postalCode: _this2.$('#verifiedZipCode').val(), types: ["street_address"] }),
                            customAddress: false
                        });

                        return _this2.Q(_this2.$.ajax({ data: JSON.stringify(userAttributes), method: "PATCH", url: "/user" }));
                    }).then(function () {
                        _this2.user.set(userAttributes, { silent: true });
                        _this2.modalView.templateData.container.modal('hide');
                        deferred.resolve(true);
                    });
                }).fail(function (e) {
                    console.log(e.stack || e);
                    deferred.reject(e);
                }).done();
            });

            return deferred.promise;
        }

        return true;
    }
});

module.exports = Delivery;

},{"../../models/DeliveryRoute":20,"../../templates/signup/delivery":67,"../../templates/signup/verifyAddress":84,"../util/List":195,"./DeliveryOptions":129}],128:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('../util/ListItem'),
    DeliveryOption = function DeliveryOption() {
    return ListItem.apply(this, arguments);
};

_extends(DeliveryOption.prototype, ListItem.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/deliveryOption')

});

module.exports = DeliveryOption;

},{"../../templates/signup/deliveryOption":68,"../util/ListItem":196}],129:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    DeliveryOptions = function DeliveryOptions() {
    return List.apply(this, arguments);
};

_extends(DeliveryOptions.prototype, List.prototype, {

    ItemView: require('./DeliveryOption'),

    Models: {
        DeliveryRoute: require('../../models/DeliveryRoute')
    },

    Views: {
        Dropoffs: require('./Dropoffs')
    },

    farmFeedback: function farmFeedback(model) {
        var _this = this;

        this.farmPickup = new (this.Models.DeliveryRoute.extend({ parse: function parse(response) {
                return _this.Models.DeliveryRoute.prototype.parse(response[0]);
            } }))();
        this.farmPickup.fetch({ data: { label: 'farm' } }).done(function () {
            if (Object.keys(_this.farmPickup.attributes).length === 0) {
                _this.valid = false;
                return _this.showFeedback(_this.feedback.noFarmRoute());
            }

            _this.showFeedback(_this.feedback.farm(_this.farmPickup.attributes));

            _this.selectedDelivery = _extends({}, { deliveryoptionid: model.id }, _this.farmPickup.pick(['dayofweek', 'starttime', 'endtime']));

            _this.valid = true;
        });
    },


    feedback: {
        home: require('../../templates/signup/homeDeliveryFeedback'),
        farm: require('../../templates/signup/farmPickupFeedback'),
        group: function group() {
            return "Please select a dropoff location below.";
        },
        invalidZip: function invalidZip(zipcode) {
            return this.util.format('Postal Code of %s is not in our delivery area.  Please contact us to discuss options.', zipcode);
        },
        noFarmRoute: function noFarmRoute() {
            return "There is currently an error with On-Farm Pickup selection.";
        }
    },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.options };
    },
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },
    groupFeedback: function groupFeedback(deliveryOption) {
        var _this2 = this;

        if (this.dropoffView) {
            if (!Object.keys(this.dropoffView.selectedItems).length) this.showFeedback(this.feedback.group());
            return this.dropoffView.templateData.container.show();
        }

        this.groupDropoffPromise.then(function () {

            if (!_this2.selectedDelivery || _this2.selectedDelivery && !_this2.selectedDelivery.groupdropoffid) _this2.showFeedback(_this2.feedback.group());

            _this2.dropoffView = new _this2.Views.Dropoffs({ container: _this2.templateData.dropoffs }).on('itemUnselected', function () {
                _this2.dropoffView.itemViews.forEach(function (view) {
                    if (view.templateData.container.is(':hidden')) view.templateData.container.show();
                });

                _this2.showFeedback(_this2.feedback.group());

                _this2.valid = false;
            }).on('itemSelected', function (model) {
                var selectedId = model.id;

                _this2.model.get('groupdropoffs').forEach(function (model) {
                    if (model.id !== selectedId) _this2.dropoffView.itemViews[model.id].templateData.container.hide();
                });

                _this2.selectedDelivery = _extends({}, { deliveryoptionid: deliveryOption.id, groupdropoffid: model.id }, model.pick(['dayofweek', 'starttime', 'endtime']));

                _this2.templateData.feedback.empty();

                _this2.valid = true;
            }).on('itemAdded', function (model) {
                var selectedDelivery = _this2.model.get('selectedDelivery');
                if (selectedDelivery && Object.keys(_this2.dropoffView.itemViews).length == _this2.dropoffView.items.length && _this2.dropoffView.itemViews[selectedDelivery.groupdropoffid]) {

                    _this2.dropoffView.selectItem(_this2.dropoffView.items.get(selectedDelivery.groupdropoffid));
                }
            });

            _this2.dropoffView.items.reset(_this2.model.get('groupdropoffs').models);

            if (_this2.model.get('groupdropoffs').length === 0) {
                _this2.dropoffView.templateData.container.text("No available group dropoff locations, please select another option");
            }
        }).fail(function (e) {
            return console.log(e.stack || e);
        }).done();
    },
    homeFeedback: function homeFeedback(deliveryOption) {
        var _this3 = this;

        var addressModel = this.user.get('addressModel'),
            userPostalCode = addressModel ? addressModel.postalCode : undefined;

        if (!userPostalCode) {

            this.showFeedback('<div>Because we could not lookup your address, we are currently unable to provide a delivery day for the week or time.  We will take care of this in the next step by having you verify your address.</div>');

            this.selectedDelivery = { deliveryoptionid: deliveryOption.id, isHome: true };

            return this.valid = true;
        }

        this.zipRoute = new (this.Model.extend({ parse: function parse(response) {
                return response[0];
            }, urlRoot: "/zipcoderoute" }))();
        this.homeDeliveryRoute = new this.Models.DeliveryRoute();

        this.zipRoute.fetch({ data: { zipcode: userPostalCode } }).fail(function (e) {
            return console.log(e.stack || e);
        }).done(function () {
            if (Object.keys(_this3.zipRoute.attributes).length === 0) {
                _this3.valid = false;
                return _this3.showFeedback(_this3.feedback.invalidZip.call(_this3, userPostalCode));
            }
            _this3.homeDeliveryRoute.set({ id: _this3.zipRoute.get('routeid') }).fetch().fail(function (e) {
                return console.log(e.stack || e);
            }).done(function () {
                _this3.showFeedback(_this3.feedback.home(_this3.homeDeliveryRoute.attributes));

                _this3.selectedDelivery = _extends({ deliveryoptionid: deliveryOption.id, isHome: true }, _this3.homeDeliveryRoute.pick(['dayofweek', 'starttime', 'endtime']));

                _this3.valid = true;
            });
        });
    },
    postRender: function postRender() {
        var _this4 = this;

        var share = this.model;

        this.selection = 'single';

        List.prototype.postRender.call(this);

        this.on('itemAdded', function (model) {
            var price = parseFloat(model.get('price').replace(/\$|,/g, "")),
                selectedDelivery = _this4.model.get('selectedDelivery');

            if (price == 0) _this4.itemViews[model.id].templateData.deliveryPrice.text("No charge");else if (price < 0) _this4.itemViews[model.id].templateData.deliveryPrice.text(_this4.util.format('Save %s per week', model.get('price').replace('-', '')));

            if (selectedDelivery && selectedDelivery.deliveryoptionid == model.id) _this4.selectItem(model);
        });

        share.getDeliveryOptions().then(function () {
            var deliveryOptions = share.get('deliveryoptions');

            _this4.items.reset(deliveryOptions.models);

            if (deliveryOptions.length === 0) _this4.templateData.options.text('This share does not have delivery options associated with it.  Please contact Patchwork and sign up for this particular share at a later date.');
        }).fail(function (e) {
            return console.log(e.stack || e);
        }).done();

        this.on('itemSelected', function (model) {
            _this4.templateData.container.removeClass('has-error');
            if (_this4.dropoffView && model.get('name') !== 'group') _this4.dropoffView.templateData.container.hide();
            _this4[_this4.util.format('%sFeedback', model.get('name'))](model);
        }).on('itemUnselected', function () {
            _this4.valid = false;
            _this4.templateData.feedback.empty();
            _this4.selectedDelivery = null;
            if (_this4.dropoffView) _this4.dropoffView.templateData.container.hide();
        });

        this.groupDropoffPromise = share.getGroupDropoffs();

        this.user.on('change:address', function () {
            var selectedIds = Object.keys(_this4.selectedItems);

            if (selectedIds.length === 0) return;

            _this4.unselectItem(_this4.items.get(selectedIds[0]));
        });
    },


    requiresLogin: false,

    showFeedback: function showFeedback(html) {
        this.templateData.feedback.html(html).show();
    },


    template: require('../../templates/signup/deliveryOptions')
});

module.exports = DeliveryOptions;

},{"../../models/DeliveryRoute":20,"../../templates/signup/deliveryOptions":69,"../../templates/signup/farmPickupFeedback":72,"../../templates/signup/homeDeliveryFeedback":73,"../util/List":195,"./DeliveryOption":128,"./Dropoffs":131}],130:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Item = require('../util/ListItem'),
    Dropoff = function Dropoff() {
    return Item.apply(this, arguments);
};

_extends(Dropoff.prototype, Item.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/dropoff')

});

module.exports = Dropoff;

},{"../../templates/signup/dropoff":70,"../util/ListItem":196}],131:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    Dropoffs = function Dropoffs() {
    return List.apply(this, arguments);
};

_extends(Dropoffs.prototype, List.prototype, {

    ItemView: require('./Dropoff'),

    requiresLogin: false,

    selection: 'single',

    template: require('../../templates/signup/dropoffs')

});

module.exports = Dropoffs;

},{"../../templates/signup/dropoffs":71,"../util/List":195,"./Dropoff":130}],132:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var View = require('../MyView'),
    Form = require('../util/Form').prototype,
    MemberInfo = function MemberInfo() {
    return View.apply(this, arguments);
};

_extends(MemberInfo.prototype, View.prototype, {

    MemberFoodOmission: require('../../models/MemberFoodOmission'),

    addressSelected: function addressSelected() {
        var place = this.addressAutoComplete.getPlace();

        this.templateData.address.val(place.formatted_address);
        this.showValid(this.templateData.address);

        this.user.set({
            address: place.formatted_address,
            addressModel: {
                postalCode: this._(place.address_components).find(function (component) {
                    return component.types[0] === "postal_code";
                }).short_name,
                types: place.types
            }
        });
    },


    emailRegex: Form.emailRegex,

    events: {
        'infoBtn': { method: 'showInfoModal' }
    },

    fields: [{
        name: 'name',
        label: 'Name',
        type: 'text',
        error: "Name is a required field.",
        validate: function validate(val) {
            return this.$.trim(val) !== '';
        }
    }, {
        name: 'email',
        label: 'Email',
        type: 'text',
        error: "Please enter a valid email address.",
        validate: function validate(val) {
            return this.emailRegex.test(val);
        }
    }, {
        name: 'phonenumber',
        label: 'Phone Number',
        type: 'text',
        error: "Please enter a valid phone number.",
        validate: function validate(val) {
            return val.length > 8;
        }
    }, {
        name: 'address',
        label: 'Address 1',
        type: 'text',
        error: "Please enter a valid address.",
        validate: function validate(val) {
            return this.validateAddress(val);
        }
    }, {
        name: 'extraaddress',
        label: 'Address 2',
        type: 'text',
        validate: function validate() {
            return true;
        }
    }, {
        name: 'password',
        label: 'Password',
        type: 'password',
        error: "Password must be at least six characters.",
        validate: function validate(val) {
            return this.user.isAdmin() || val.length > 5;
        }
    }, {
        name: 'repeatpassword',
        label: 'Repeat Password',
        type: 'password',
        error: "Passwords must match.",
        validate: function validate(val) {
            return this.user.isAdmin() || val === this.templateData.password.val();
        }
    }, {
        name: 'omission',
        label: 'Opt-out Vegetable',
        type: 'select',
        info: true,
        validate: function validate() {
            return true;
        }
    }, {
        name: 'heard',
        label: 'How you heard about us',
        type: 'text',
        validate: function validate() {
            return true;
        }
    }],

    geolocate: function geolocate() {
        var _this = this;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                return _this.addressAutoComplete.setBounds(new google.maps.Circle({
                    center: {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    },
                    radius: position.coords.accuracy }).getBounds());
            });
        }
    },
    getTemplateOptions: function getTemplateOptions() {
        return { fields: this.fields };
    },
    initAutocomplete: function initAutocomplete() {
        this.addressAutoComplete = new google.maps.places.Autocomplete(this.templateData.address.get(0), { types: ['address'] });

        this.addressAutoComplete.addListener('place_changed', this.addressSelected.bind(this));
    },
    postRender: function postRender() {
        var _this2 = this;

        var self = this;

        if (this.user.isAdmin()) {
            this.views = { memberTypeahead: this.factory.create('memberTypeahead', _extends({ insertion: { el: this.templateData.container.get(0).firstChild, method: 'insertBefore' } })) };
            this.views.memberTypeahead.focus();

            this.views.memberTypeahead.on('customerSelected', function (customer) {
                _this2.selectedCustomer = customer;
                _this2.templateData.name.val(customer.person.data.name);
                _this2.templateData.email.val(customer.person.data.secondaryEmail ? [customer.person.data.email, customer.person.data.secondaryEmail].join(', ') : customer.person.data.email);
                _this2.templateData.phonenumber.val(customer.member.data.phonenumber);
                _this2.templateData.address.val(customer.member.data.address);
                _this2.templateData.extraaddress.val(customer.member.data.extraaddress);
                _this2.templateData.heard.val(customer.member.data.heard);

                _this2.MemberFoodOmission.get({ query: { memberid: customer.member.data.id } }).then(function () {
                    if (_this2.MemberFoodOmission.data.length) {
                        var datum = _this2.MemberFoodOmission.data[0],
                            index = _this2.FoodOmission.Foods.data.findIndex(function (food) {
                            return food.produceid == datum.produceid && food.produceid !== null || food.producefamilyid == datum.producefamilyid && datum.produceid === null;
                        });

                        if (index !== -1) {
                            var foodDatum = _this2.FoodOmission.Foods.data[index];
                            datum.name = foodDatum.name;
                            _this2.FoodOmission.ms.setSelection([_extends({}, foodDatum, { id: index })]);
                        }
                    } else {
                        _this2.FoodOmission.clear();
                    }
                }).catch(function (e) {
                    _this2.Toast.showMessage('error', 'Error retrieving Food Omission Data');_this2.Error;
                });
            });
        }

        window.google && window.google.maps ? this.initAutocomplete() : window.initGMap = function () {
            return _this2.initAutocomplete();
        };

        this.templateData.address.attr('placeholder', '');

        this.FoodOmission = this.factory.create('foodOmission', { insertion: { el: this.templateData.omission.get(0), method: 'after' } });

        this.templateData.omission.remove();

        this.FoodOmission.initializeFoodOmission().then(function () {
            _this2.templateData.omission = _this2.FoodOmission.getMagicSuggest();

            _this2.fields.forEach(function (field) {
                if (_this2.user.has(field.name)) {
                    _this2.templateData[field.name].val(_this2.user.get(field.name));
                }
            });
        });

        this.templateData.container.find('form input').on('blur', function () {
            var $el = self.$(this),
                field = self._(self.fields).find(function (field) {
                return field.name === $el.attr('id');
            });

            if (field.name === 'address') {
                if (self.templateData.address.val() === '') self.showError($el, field.error);
                return;
            }

            self.Q.fcall(field.validate.bind(self, $el.val())).then(function (valid) {
                if (valid) {
                    self.showValid($el);
                } else {
                    self.showError($el, field.error);
                }
            });
        }).on('focus', function () {
            self.removeError(self.$(this));
        });
    },
    removeError: function removeError($el) {
        $el.parent().parent().removeClass('has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-remove');
        $el.siblings('.help-block').remove();
    },


    requiresLogin: false,

    showError: function showError($el, error) {
        var formGroup = $el.parent().parent();

        if (formGroup.hasClass('has-error')) return;

        formGroup.removeClass('has-success').addClass('has-feedback has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-ok').addClass('glyphicon-remove').after(Form.templates.fieldError({ error: error }));
    },
    showInfoModal: function showInfoModal() {
        var _this3 = this;

        this.Xhr({ method: 'get', resource: 'csacustomization' }).then(function (data) {
            return _this3.modalView.show({
                body: _this3.templates.csaCustomization(data[0]),
                hideFooter: true
            });
        }).catch(function (e) {
            return new _this3.Error(e);
        });
    },
    showValid: function showValid($el) {
        $el.parent().parent().removeClass('has-error').addClass('has-feedback has-success');
        $el.next().removeClass('hide').removeClass('glyphicon-remove').addClass('glyphicon-ok');
        $el.siblings('.help-block').remove();
    },


    template: require('../templates/MemberInfo'),

    templates: {
        csaCustomization: require('../../templates/csaCustomization')
    },

    validate: function validate() {
        var _this4 = this;

        var valid = true;

        if (this.templateData.container.find('has-error').length) return false;

        return this.Q.all(this.fields.map(function (field) {
            return _this4.Q.when(field.validate.call(_this4, _this4.templateData[field.name].val())).then(function (result) {
                if (result === false) {
                    valid = false;
                    _this4.showError(_this4.templateData[field.name], field.error);
                } else {
                    _this4.user.set(field.name, _this4.templateData[field.name].val());
                }
            });
        })).then(function () {
            if (valid && !_this4.user.isAdmin()) {
                return _this4.Q(_this4.$.ajax({
                    data: JSON.stringify(_this4.user.attributes),
                    method: "PATCH",
                    url: "/user" }));
            }
        }).then(function () {
            return valid;
        }).fail(function (e) {
            console.log(e.stack || e);return false;
        });
    },
    validateAddress: function validateAddress(address) {
        var addressModel, customAddress;

        if (this.$.trim(address).length === 0) return false;

        addressModel = this.user.get('addressModel');
        customAddress = address !== this.user.get('address') || !addressModel || !this._(addressModel.types).contains("street_address") ? true : false;

        this.user.set({ customAddress: customAddress });

        if (customAddress) this.user.set({ addressModel: {} });

        return true;
    }
});

module.exports = MemberInfo;

},{"../../models/MemberFoodOmission":29,"../../templates/csaCustomization":50,"../MyView":110,"../templates/MemberInfo":171,"../util/Form":194}],133:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('../util/ListItem'),
    PaymentOption = function PaymentOption() {
    return ListItem.apply(this, arguments);
};

_extends(PaymentOption.prototype, ListItem.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/paymentOption')

});

module.exports = PaymentOption;

},{"../../templates/signup/paymentOption":74,"../util/ListItem":196}],134:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    PaymentOptions = function PaymentOptions() {
    return List.apply(this, arguments);
};

_extends(PaymentOptions.prototype, List.prototype, {

    ItemView: require('./PaymentOption'),

    itemModels: [{ id: 1, name: 'cash', label: 'Cash or Check', note: 'Mail payment to Patchwork' }, { id: 2, name: 'card', label: 'Credit Card', note: 'Pay online.' }],

    requiresLogin: false,

    selection: 'single',

    template: require('../../templates/signup/paymentOptions')
});

module.exports = PaymentOptions;

},{"../../templates/signup/paymentOptions":75,"../util/List":195,"./PaymentOption":133}],135:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('../util/ListItem'),
    PickupDate = function PickupDate() {
    return ListItem.apply(this, arguments);
};

_extends(PickupDate.prototype, ListItem.prototype, {

    requiresLogin: false,

    template: require('../../templates/signup/pickupDate')

});

module.exports = PickupDate;

},{"../../templates/signup/pickupDate":76,"../util/ListItem":196}],136:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    PickupDates = function PickupDates() {
    return List.apply(this, arguments);
};

_extends(PickupDates.prototype, List.prototype, {

    ItemView: require('./PickupDate'),

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.dates };
    },
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },
    itemModels: function itemModels() {
        return this.model.getDeliveryDates().models;
    },
    postRender: function postRender() {
        var _this = this;

        this.valid = true;

        this.on('itemSelected', function (model) {
            _this.templateData.container.removeClass('has-error');
            _this.updateShare();
        });

        this.on('itemUnselected', function (model) {
            return _this.updateShare();
        });

        this.on('itemAdded', function () {
            if (_this.model.has('skipDays') && _this.model.get('skipDays').length && Object.keys(_this.itemViews).length == _this.items.length) {

                _this.model.set({ skipDays: _this.model.get('skipDays').filter(function (skipDayId) {
                        if (_this.items.get(skipDayId)) {
                            _this.unselectItem(_this.items.get(skipDayId));return true;
                        }
                        return false;
                    })
                });
            }
        });

        this.model.on('change:selectedDelivery', function () {
            return _this.items.reset(_this.itemModels());
        });

        List.prototype.postRender.call(this);
    },


    requiresLogin: false,

    selected: true,

    selection: 'multiSimple',

    template: require('../../templates/signup/pickupDates'),

    updateShare: function updateShare() {
        this.valid = Object.keys(this.selectedItems).length === 0 ? false : true;
    }
});

module.exports = PickupDates;

},{"../../templates/signup/pickupDates":77,"../util/List":195,"./PickupDate":135}],137:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ListItem = require('../util/ListItem'),
    Share = function Share() {
    return ListItem.apply(this, arguments);
};

_extends(Share.prototype, ListItem.prototype, {
    postRender: function postRender() {
        ListItem.prototype.postRender.call(this);

        this.factory.create('shareBox', { insertion: { el: this.templateData.shareBox.get(0) }, model: this.model });

        if (!this.user.isAdmin() && (/spring/i.test(this.model.get('name')) || /spring/i.test(this.model.get('label')))) {
            this.templateData.container.addClass('inactive').off('click');
        }

        return this;
    },


    requiresLogin: false,

    template: require('../../templates/signup/share')

});

module.exports = Share;

},{"../../templates/signup/share":78,"../util/ListItem":196}],138:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var View = require('../MyView'),
    ShareOption = function ShareOption() {
    return View.apply(this, arguments);
};

_extends(ShareOption.prototype, View.prototype, {

    events: {
        'optionIcon': { method: 'showOptionInfo' }
    },

    getTemplateOptions: function getTemplateOptions() {
        return _extends({}, this.model.attributes, { options: this.model.get('options').map(function (model) {
                return model.attributes;
            }) });
    },
    postRender: function postRender() {
        var _this = this;

        this.updateTotal();

        this.templateData.input.on('change', function () {
            _this.updateTotal();
            _this.emit('changed', _this.templateData.input.val());
        });
    },


    requiresLogin: false,

    showOptionInfo: function showOptionInfo() {
        this.modalView.show({
            title: this.model.get('name'),
            body: this.model.get('description'),
            hideFooter: true
        });
    },


    template: require('../../templates/signup/shareOption'),

    updateTotal: function updateTotal() {
        this.templateData.total.text(this.util.format('$%s per week', parseFloat(this.model.get('options').at(this.templateData.input.get(0).selectedIndex).get('price').replace(/\$|,/g, "")).toFixed(2)));
    }
});

module.exports = ShareOption;

},{"../../templates/signup/shareOption":79,"../MyView":110}],139:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    ShareOptions = function ShareOptions() {
    return List.apply(this, arguments);
};

_extends(ShareOptions.prototype, List.prototype, {

    ItemView: require('./SingleShareOptions'),

    collection: { comparator: 'startEpoch' },

    events: {},

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares, signupData: this.signupData, factory: this.factory };
    },
    itemModels: function itemModels() {
        return this.signupData.shares.models;
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.signupData.shares.on('add', function (share) {
            return _this.items.add(share);
        }).on('remove', function (share) {
            return _this.items.remove(share);
        });
    },


    requiresLogin: false,

    selection: true,

    template: require('../../templates/signup/shareOptions'),

    validate: function validate() {
        var _this2 = this;

        this.signupData.shares.forEach(function (share) {
            share.set('selectedOptions', share.get('shareoptions').map(function (shareOption) {
                return {
                    shareoptionid: shareOption.id,
                    shareoptionoptionid: _this2.itemViews[share.id].itemViews[shareOption.id].templateData.input.val()
                };
            }));
        });

        return true;
    }
});

module.exports = ShareOptions;

},{"../../templates/signup/shareOptions":80,"../util/List":195,"./SingleShareOptions":141}],140:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    ShareSelection = function ShareSelection() {
    return List.apply(this, arguments);
};

_extends(ShareSelection.prototype, List.prototype, {

    ItemView: require('./Share'),

    Models: {
        DeliveryDate: require('../../models/DeliveryDate'),
        Share: require('../../models/Share')
    },

    collection: { comparator: 'startEpoch', model: require('../../models/Share'), url: "/share" },

    events: {
        csaInfoBtn: { method: 'showCSAInfoPageInNewTab' }
    },

    fetch: { data: {
            display: true,
            enddate: JSON.stringify({ operation: '>', value: require('moment')().add(2, 'weeks').format('YYYY-MM-DD') }),
            signupcutoff: JSON.stringify({ operation: '>', value: require('moment')().format('YYYY-MM-DD') })
        } },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.shares, factory: this.factory };
    },
    isSeason: function isSeason(season, model) {
        var re = new RegExp(season, 'i');

        return Boolean(re.test(model.get('name')) || re.test(model.get('label')));
    },
    postRender: function postRender() {
        var _this = this;

        List.prototype.postRender.call(this);

        this.on('itemSelected', function (model) {
            _this.templateData.container.removeClass('has-error');
            if (!_this.user.isAdmin() && _this.isSeason('summer', model)) {
                _this.items.forEach(function (share) {
                    if (_this.isSeason('spring', share)) {
                        _this.itemViews[share.id].templateData.container.removeClass('inactive').on('click', function () {
                            return _this.itemViews[share.id].emit('clicked', _this.itemViews[share.id].model);
                        });
                    }
                });
            }
        });

        this.on('itemUnselected', function (model) {
            if (!_this.user.isAdmin() && _this.isSeason('summer', model)) {
                _this.items.forEach(function (share) {
                    if (_this.isSeason('spring', share)) {
                        _this.itemViews[share.id].templateData.container.addClass('inactive').off('click');
                        _this.unselectItem(share);
                    }
                });
            }
        });

        this.signupData.shares = new (this.Collection.extend({ comparator: 'startEpoch' }))();

        this.items.on('reset', function () {
            if (_this.items.length === 0) return _this.emit('noShares');
        });

        this.on('initialized', function () {
            return _this.items.forEach(function (item) {
                var sessionShare = _this.sessionShares.find(function (share) {
                    return share.id === item.id;
                });
                if (sessionShare) {
                    _this.selectItem(item);
                    _this.signupData.shares.add(item);
                    if (sessionShare.selectedOptions) item.set('selectedOptions', sessionShare.selectedOptions);
                    if (sessionShare.selectedDelivery) item.set('selectedDelivery', sessionShare.selectedDelivery);
                    if (sessionShare.skipDays) {
                        item.set('skipDays', sessionShare.skipDays);
                    }
                }
            });
        });

        if (this.sessionShares) {
            this.on('itemAdded', function () {
                if (Object.keys(_this.itemViews).length === _this.items.length) _this.emit('initialized');
            });
        }
    },


    requiresLogin: false,

    selection: true,

    showCSAInfoPageInNewTab: function showCSAInfoPageInNewTab() {
        window.open('/csa#how-do-i-know');
    },


    template: require('../../templates/signup/shares'),

    validate: function validate() {
        var _this2 = this;

        var prevShareIds = this.signupData.shares.map(function (share) {
            return share.id;
        }),
            selectedShareIds = Object.keys(this.selectedItems).map(function (id) {
            return parseInt(id);
        });

        if (selectedShareIds.length === 0) {
            this.templateData.container.addClass('has-error');return false;
        }

        this._(prevShareIds).difference(selectedShareIds).forEach(function (id) {
            var share = _this2.items.get(id);
            share.unset('selectedOptions');
            share.unset('selectedDelivery');
            share.unset('skipDays');
            _this2.signupData.shares.remove(share);
        });

        this._(selectedShareIds).difference(prevShareIds).forEach(function (id) {
            return _this2.signupData.shares.add(_this2.items.get(id));
        });

        return true;
    }
});

module.exports = ShareSelection;

},{"../../models/DeliveryDate":19,"../../models/Share":38,"../../templates/signup/shares":81,"../util/List":195,"./Share":137,"moment":"moment"}],141:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('../util/List'),
    SingleShareOptions = function SingleShareOptions() {
    return List.apply(this, arguments);
};

_extends(SingleShareOptions.prototype, List.prototype, {

    ItemView: require('./ShareOption'),

    getItemViewOptions: function getItemViewOptions() {
        return {
            container: this.templateData.options,
            share: this.model
        };
    },
    getTemplateOptions: function getTemplateOptions() {
        return this.model.attributes;
    },
    postRender: function postRender() {
        var _this = this;

        var share = this.model;

        List.prototype.postRender.call(this);

        this.on('itemAdded', function (shareOption) {
            _this.itemViews[shareOption.id].on('changed', function () {
                return _this.updateTotal();
            });
            if (share.get('selectedOptions')) {
                share.get('selectedOptions').forEach(function (selectedOption) {
                    if (selectedOption.shareoptionid == shareOption.id) {
                        _this.itemViews[shareOption.id].templateData.input.val(selectedOption.shareoptionoptionid);
                    }
                });
            }
            if (Object.keys(_this.itemViews).length == _this.items.length) _this.updateTotal();
        });

        this.factory.create('shareBox', { insertion: { el: this.templateData.shareBox.get(0) }, model: share });

        //TODO: Write UI when no options exist.
        this.model.getShareOptions().then(function () {
            return share.get('shareoptions').forEach(function (shareoption) {
                return _this.items.add(shareoption);
            });
        }).fail(function (e) {
            return console.log(e.stack || e);
        });
    },


    requiresLogin: false,

    template: require('../../templates/signup/singleShareOptions'),

    updateTotal: function updateTotal() {
        var _this2 = this;

        var total = this.items.map(function (shareOption) {
            return parseFloat(shareOption.get('options').get(_this2.itemViews[shareOption.id].templateData.input.val()).get('price').replace(/\$|,/g, ""));
        }).reduce(function (a, b) {
            return a + b;
        }).toFixed(2);

        this.templateData.total.text(this.util.format('$%s per week', total));
    }
});

module.exports = SingleShareOptions;

},{"../../templates/signup/singleShareOptions":82,"../util/List":195,"./ShareOption":138}],142:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var View = require('../MyView'),
    Form = require('../util/Form').prototype,
    Summary = function Summary() {

    window.spinner = this.spinner = new this.Spinner({
        color: '#fff',
        lines: 7,
        length: 2,
        radius: 14,
        scale: 0.5
    });

    return View.apply(this, arguments);
};

_extends(Summary.prototype, View.prototype, {

    DayOfWeekMap: require('../../models/DeliveryRoute').prototype.dayOfWeekMap,

    ContactInfo: require('../../models/ContactInfo'),

    Spinner: require('../../plugins/spinner.js'),

    buildRequest: function buildRequest() {
        var addressModel = this.user.get('addressModel');

        return JSON.stringify({
            member: _extends(this.user.pick(['name', 'email', 'phonenumber', 'password', 'repeatpassword', 'address', 'extraaddress', 'heard', 'omission']), { zipcode: addressModel && addressModel.postalCode ? addressModel.postalCode : '' }),
            payment: this.paymentSelected === 'card' ? this.getFormData() : {},
            shares: this.buildShares(),
            total: this.fee ? this.grandTotalPlusFee : this.grandTotal,
            isAdmin: this.user.isAdmin()
        });
    },
    buildShares: function buildShares() {
        var _this = this;

        return this.signupData.shares.map(function (share) {
            var selectedWeeks = share.get('selectedDates').length,
                skipDays = share.get('skipDays'),
                skipDaysTotal = skipDays ? skipDays.length : 0;

            return {
                id: share.id,
                description: _this.util.format('From %s to %s you will be receiving fresh food for %d out of %d weeks.', share.get('humanStartdate'), share.get('humanEnddate'), selectedWeeks, selectedWeeks + skipDaysTotal),
                label: share.get('label'),
                options: share.get('selectedOptions'),
                delivery: _this._(share.get('selectedDelivery')).pick(['deliveryoptionid', 'groupdropoffid', 'description']),
                skipDays: skipDays ? skipDays.map(function (skipDayId) {
                    return share.get('deliveryDates').get(skipDayId).get('date');
                }) : undefined,
                total: share.get('total')
            };
        });
    },
    cardPaymentSelected: function cardPaymentSelected() {
        var _this2 = this;

        this.signupHandler = function () {
            if (_this2.validateCardInfo()) _this2.signup();
        };

        this.fee = false;
        this.paymentSelected = 'card';
        this.updateGrandTotal();

        this.templateData.paymentForm.removeClass('hide');

        this.enableSignupBtn();
    },
    cashPaymentSelected: function cashPaymentSelected() {
        var _this3 = this;

        this.signupHandler = function () {
            return _this3.signup();
        };

        this.fee = false;
        this.paymentSelected = 'cash';

        this.enableSignupBtn();
    },
    disableSignupBtn: function disableSignupBtn() {
        this.templateData.signupBtn.addClass('disabled').removeClass('btn-success').off('click');
    },
    enableSignupBtn: function enableSignupBtn() {
        this.templateData.signupBtn.removeClass('disabled').addClass('btn-success').off('click').one('click', this.signupHandler);
    },


    events: {
        'paymentForm': [{ event: 'blur', 'selector': 'input', method: 'onInputBlur' }, { event: 'focus', 'selector': 'input', method: 'onInputFocus' }]
    },

    fields: {
        number: {
            error: "Enter a card number",
            validate: function validate(val) {
                return this.$.trim(val).length > 0;
            }
        },
        "exp_month": {
            error: 'Enter the month in "MM" format',
            validate: function validate(val) {
                return val.length === 2;
            }
        },
        "exp_year": {
            error: 'Enter the year in "YYYY" format',
            validate: function validate(val) {
                return val.length === 4;
            }
        },
        cvc: {
            error: "Enter a cvc number",
            validate: function validate(val) {
                return this.$.trim(val).length > 0;
            }
        }
    },

    getTemplateOptions: function getTemplateOptions() {
        var _this4 = this;

        var spaceTwoTab = "\r\n\t\t";
        return {
            containerClass: this.containerClass,
            shares: this.signupData.shares.map(function (share) {

                var selectedDelivery = share.get('deliveryoptions').get(share.get('selectedDelivery').deliveryoptionid),
                    groupDropoff = share.get('selectedDelivery').groupdropoffid ? share.get('groupdropoffs').get(share.get('selectedDelivery').groupdropoffid) : undefined,
                    times = groupDropoff ? groupDropoff.pick(['starttime', 'endtime']) : _this4._(share.get('selectedDelivery')).pick(['starttime', 'endtime']),
                    shareOptionWeeklyTotal = share.get('selectedOptions').map(function (selectedOption) {
                    return parseFloat(share.get('shareoptions').get(selectedOption.shareoptionid).get('options').get(selectedOption.shareoptionoptionid).get('price').replace(/\$|,/g, ""));
                }).reduce(function (a, b) {
                    return a + b;
                }),
                    weeklyTotal = shareOptionWeeklyTotal + parseFloat(selectedDelivery.get('price').replace(/\$|,/g, "")),
                    address = selectedDelivery.get('name') === 'home' ? _this4.user.get('address') : groupDropoff ? groupDropoff.get('address') : _this4.ContactInfo.data.farmpickup;

                share.set({
                    selectedDelivery: _extends(share.get('selectedDelivery'), {
                        description: _this4.util.format('Delivery:%sMethod: %s%sDay/Time: %ss %s-%s%sPlace: %s%sCost: %s per week', spaceTwoTab, selectedDelivery.get('label'), spaceTwoTab, share.dayOfWeekMap[share.get('selectedDelivery').dayofweek], times.starttime, times.endtime, spaceTwoTab, address, spaceTwoTab, selectedDelivery.get('price')) }),
                    total: weeklyTotal * share.get('selectedDates').length
                });

                share.set('selectedOptions', share.get('selectedOptions').map(function (selectedOption) {
                    var shareOption = share.get('shareoptions').get(selectedOption.shareoptionid),
                        shareOptionOption = shareOption.get('options').get(selectedOption.shareoptionoptionid);

                    return _extends(selectedOption, {
                        description: _this4.util.format('%s: %s %s -- %s per week', shareOption.get('name'), shareOptionOption.get('label'), shareOptionOption.get('unit') || "", shareOptionOption.get('price'))
                    });
                }));

                return {
                    shareBox: _this4.templates.ShareBox(share.attributes),
                    selectedOptions: share.get('selectedOptions').map(function (selectedOption) {
                        var shareOption = share.get('shareoptions').get(selectedOption.shareoptionid),
                            shareOptionOption = shareOption.get('options').get(selectedOption.shareoptionoptionid);

                        return {
                            optionName: shareOption.get('name'),
                            price: shareOptionOption.get('price'),
                            selectedOptionLabel: shareOptionOption.get('label'),
                            unit: shareOptionOption.get('unit')
                        };
                    }),
                    selectedDelivery: {
                        deliveryType: selectedDelivery.get('label'),
                        weeklyCost: selectedDelivery.get('price'),
                        groupdropoff: groupDropoff ? groupDropoff.get('label') : undefined,
                        address: groupDropoff ? groupDropoff.get('street') + ', ' + groupDropoff.get('cityStateZip') : selectedDelivery.get('name') === 'farm' ? _this4.ContactInfo.data.farmpickup : _this4.user.get('address'),
                        dayOfWeek: _this4.DayOfWeekMap[share.get('selectedDelivery').dayofweek],
                        starttime: times.starttime,
                        endtime: times.endtime
                    },
                    weeklyPrice: _this4.util.format('$%s', weeklyTotal.toFixed(2)),
                    selectedDates: share.get('selectedDates').map(function (date) {
                        return _this4.templates.PickupDate(_extends({ selected: true }, date.attributes));
                    }),
                    weeksSelected: share.get('selectedDates').length,
                    skipDays: share.has('skipDays') ? share.get('skipDays').map(function (skipDayId) {
                        return _this4.templates.PickupDate(share.get('deliveryDates').get(skipDayId).attributes);
                    }) : undefined,
                    total: _this4.util.format('$%s', share.get('total').toFixed(2))
                };
            })
        };
    },
    onInputBlur: function onInputBlur(e) {
        var $el = this.$(e.currentTarget),
            field = this.fields[$el.attr('id')],
            result;

        result = field.validate.call(this, $el.val());

        if (result) {
            $el.parent().parent().removeClass('has-error').addClass('has-feedback has-success');
            $el.next().removeClass('hide').removeClass('glyphicon-remove').addClass('glyphicon-ok');
            $el.siblings('.help-block').remove();
        } else {
            this.showError($el, field.error);
            this.disableSignupBtn();
        }
    },
    onInputFocus: function onInputFocus(e) {
        var $el = this.$(e.currentTarget);
        if ($el.next().hasClass('glyphicon-remove')) this.removeError(this.$(e.currentTarget));
        if (this.templateData.paymentForm.find('.has-error').length === 0) this.enableSignupBtn();
    },
    paymentUnselected: function paymentUnselected() {

        this.fee = false;
        this.selectedPayment = undefined;
        this.updateGrandTotal();

        this.templateData.signupBtn.addClass('disabled').removeClass('btn-success').off('click');
        this.templateData.paymentForm.addClass('hide');
    },
    postRender: function postRender() {
        var _this5 = this;

        this.fee = false;
        this.selectedPayment = undefined;

        View.prototype.postRender.call(this);

        this.paymentOptions.on('itemSelected', function (model) {
            return _this5[_this5.util.format('%sPaymentSelected', model.get('name'))]();
        }).on('itemUnselected', function (model) {
            return _this5.paymentUnselected();
        });

        this.grandTotal = this.signupData.shares.map(function (share) {
            return share.get('total');
        }).reduce(function (a, b) {
            return a + b;
        });
        this.grandTotalPlusFee = this.grandTotal + this.grandTotal * .03;

        this.updateGrandTotal();
    },


    requiresLogin: false,

    removeError: function removeError($el) {
        if ($el.siblings('.help-block').length === 1) $el.parent().parent().removeClass('has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-remove');
        $el.siblings(this.util.format('.help-block.%s', $el.attr('id'))).remove();
    },
    render: function render() {
        var _this6 = this;

        var dataPromises = [];

        dataPromises.push(this.ContactInfo.get());

        this.signupData.shares.forEach(function (share) {
            if (!share.has('shareoptions')) dataPromises.push(share.getShareOptions());
            if (!share.has('deliveryoptions')) dataPromises.push(share.getDeliveryOptions());
            if (!share.has('groupdropoffs')) dataPromises.push(share.getGroupDropoffs());
            if (!share.has('deliveryDates')) dataPromises.push(share.getDeliveryDates());
        });

        this.Q.all(dataPromises).then(function () {
            _this6.signupData.shares.forEach(function (share) {
                return share.getSelectedDates();
            });
            View.prototype.render.call(_this6);
        }).fail(function (e) {
            return new _this6.Error(e);
        }).done();
    },
    show: function show() {
        this.templateData.container.empty().remove();
        this.render();
        return this;
    },
    showError: function showError($el, error) {
        var formGroup = $el.parent().parent();

        if ($el.next().hasClass('glyphicon-remove')) return;

        formGroup.removeClass('has-success').addClass('has-feedback has-error');
        $el.next().removeClass('hide').removeClass('glyphicon-ok').addClass('glyphicon-remove').parent().append(Form.templates.fieldError({ error: error, name: $el.attr('id') }));
    },
    showErrorModal: function showErrorModal(opts) {
        var _this7 = this;

        this.modalView.show({
            title: 'Hmmm',
            body: opts && opts.error ? opts.error : 'There was a problem.  Please contact us at eat.patchworkgardens@gmail.com.  We apologize for the inconvenience',
            hideCancelBtn: true,
            confirmText: 'Okay' }).on('submit', function () {
            return _this7.modalView.hide();
        });
    },
    showSuccessModal: function showSuccessModal() {
        this.modalView.show({
            title: 'Great Success',
            body: this.util.format('Thanks for signing up.  We look forward to sharing the season with you. %s', Object.keys(this.getFormData()).length ? 'You should find a receipt in your email inbox' : ''),
            hideCancelBtn: true,
            confirmText: 'Okay' }).on('submit', function () {
            return window.location = '/';
        }).on('hidden', function () {
            return window.location = '/';
        });
    },
    signup: function signup() {
        var _this8 = this;

        this.templateData.signupBtn.off('click').addClass('has-spinner').append(this.spinner.spin().el);

        this.$.ajax({
            data: this.buildRequest(),
            headers: { 'Content-Type': 'application/json' },
            method: "POST",
            url: "/signup" }).done(function (response) {
            if (response.error) {
                _this8.showErrorModal({ error: response.error });
                _this8.templateData.signupBtn.off('click').one('click', _this8.signupHandler).text('Become a Member!');
                return;
            }
            _this8.emit('done');
            _this8.paymentOptions.removeAllListeners('itemSelected').removeAllListeners('itemUnselected');
            _this8.templateData.signupBtn.text('Thank you');
            _this8.showSuccessModal();
        }).fail(function () {
            _this8.showErrorModal();
            _this8.templateData.signupBtn.off('click').one('click', _this8.signupHandler).text('Become a Member!');
        }).always(function () {
            _this8.spinner.stop();
            _this8.templateData.signupBtn.removeClass('has-spinner');
        });
    },


    subviews: {
        paymentOptions: [{ name: 'paymentOptions', view: require('./PaymentOptions') }]
    },

    template: require('../../templates/signup/summary'),

    templates: {
        PickupDate: require('../../templates/signup/pickupDate'),
        ShareBox: require('../templates/ShareBox')
    },

    updateGrandTotal: function updateGrandTotal() {
        var total = this.fee ? this.grandTotalPlusFee : this.grandTotal;
        this.templateData.grandTotal.text('Grand Total :  ' + '$' + total.toFixed(2));

        this.$('.payment-option:first-child .method-total').text('Grand Total :  ' + '$' + this.grandTotal.toFixed(2));
        this.$('.payment-option:last-child .method-total').text('Grand Total :  ' + '$' + this.grandTotal.toFixed(2));
    },
    validateCardInfo: function validateCardInfo() {
        var _this9 = this;

        var valid = true;

        Object.keys(this.fields).forEach(function (key) {
            var result = _this9.fields[key].validate.call(_this9, _this9.templateData[key].val());

            if (!result) {
                _this9.showError(_this9.templateData[key], _this9.fields[key].error);
                valid = false;
            }
        });

        if (!valid) this.disableSignupBtn();

        return valid;
    }
});

module.exports = Summary;

},{"../../models/ContactInfo":12,"../../models/DeliveryRoute":20,"../../plugins/spinner.js":44,"../../templates/signup/pickupDate":76,"../../templates/signup/summary":83,"../MyView":110,"../templates/ShareBox":177,"../util/Form":194,"./PaymentOptions":134}],143:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>About</h1>\n    <section data-js=\"sectionOne\" class=\"striped\">\n        <h2></h2>\n    </section>\n    <section data-js=\"sectionTwo\">\n        <h2></h2>\n    </section>\n    <section data-js=\"sectionThree\" class=\"striped\">\n        <h2></h2>\n    </section>\n    <section data-js=\"sectionFour\">\n        <h2></h2>\n        <div class=\"staff\" data-js=\"staff\"></div>\n    </section>\n</div>";
};

},{}],144:[function(require,module,exports){
'use strict';

module.exports = function (p, _ref) {
    var Moment = _ref.Moment;

    var actions = p.opts.actions.map(function (action) {
        return '<option value="' + action + '">' + action + '</option>';
    }).join('');
    return '' + ('<div>\n    <form data-js="form">\n        <span></span>\n        <select data-js="action">' + actions + '</select>\n        <input type="text" data-js="value" placeholder="$0.00"/>\n        <input type="text" data-js="checkNumber"/>\n        <input type="text" data-js="created" value="' + Moment().format('MMM D, YYYY') + '" />\n        <input type="text" data-js="description" placeholder="description"/>\n    </form>\n    <div data-view="buttonFlow"></div>\n</div>');
};

},{}],145:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<nav data-js=\"container\" class=\"admin-header\">\n    <div class=\"clearfix hidden-xs\">\n        <div class=\"logo-container\">\n            <img src=\"" + p.opts.logo + "\"/>\n        </div>\n        <div data-js=\"userPanel\" class=\"pull-right hide\">\n            <button data-js=\"signoutBtn\" class=\"btn btn-link\">Sign Out</button>\n            <span data-js=\"name\"></span>\n            <span data-js=\"profileBtn\" class=\"glyphicon glyphicon-user hide\"></span>\n        </div>\n    </div>\n</nav>";
};

},{}],146:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div data-js=\"nav\"></div>\n    <div class=\"views\" data-js=\"views\"></div>\n</div>";
};

},{}],147:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var disabled = p.disabled ? 'disabled' : '';

    return '' + ('<section class="' + (p.hide ? 'fd-hidden fd-hide' : '') + '">') + Object.keys(p.model.states).map(function (stateName) {
        return '<div data-js="' + stateName + '" class="state ' + stateName + ' ' + (stateName === 'start' ? '' : 'fd-hidden fd-hide') + '">' + p.model.states[stateName].map(function (button) {
            return button.svg ? button.svg : '<button class="' + disabled + ' ' + (button.class || '') + ' "data-js="' + button.name + '">' + button.text + '</button>';
        }).join('') + '</div>';
    }).join('') + '</section>';
};

},{}],148:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<section>\n    <div class="left-panel" data-js="leftPanel">\n        <section>\n            <button class="link" data-js="backBtn">' + require('./lib/leftArrow')() + '<span>Back to Admin</span></button>\n        </section>\n        <section>\n            <button class="link" data-js="resource"></button>\n        </section>\n        <section>\n            <div data-view="list" data-name="collections"></div>\n        </section>\n    </div>\n    <div data-js="mainPanel" class="main-panel"></div>\n</section>';
};

},{"./lib/leftArrow":192}],149:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>Contact</h1>\n    <section>\n        <h2 data-js=\"intro\"></h2>\n        <div data-js=\"contactInfo\"></div>\n    </section>\n</div>";
};

},{}],150:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>CSA Program</h1>\n    <section data-js=\"aboutCSA\" class=\"about-csa\">\n        <h2></h2>\n    </section>\n    <div data-js=\"dividerImageOne\"></div>\n    <section data-js=\"csaFit\" class=\"csa-fit\">\n        <h2 data-js=\"howDoIKnow\"></h2>\n        <p></p>\n        <ul data-js=\"csaFitStatements\"></ul>\n    </section>\n    <section data-js=\"csaContents\" class=\"csa-contents\">\n        <h2></h2>\n        <p></p>\n        <div data-js=\"shareExamples\" class=\"share-examples\"></div>\n        <div data-js=\"shareDescriptions\" class=\"share-descriptions\"></div>\n        <p data-js=\"sharePriority\"></p>\n        <div class=\"button-row\">\n            <button class=\"btn-yellow\" data-js=\"signupBtn\" type=\"button\">Sign Up Now!</button>\n        </div>\n    </section>\n    <div data-js=\"dividerImageTwo\"></div>\n    <section data-js=\"csaDelivery\" class=\"delivery\">\n        <h2></h2>\n        <p></p>\n        <div class=\"delivery-matrix\" data-js=\"deliveryMatrix\"></div>\n    </section>\n    <section data-js=\"csaCustomization\">\n        <h2></h2>\n        <p><p>\n    </section>\n    <section data-js=\"addOns\">\n        <h2></h2>\n        <p></p>\n        <div data-js=\"addOnItems\" class=\"add-ons\"></div>\n    </section>\n    <section data-js=\"payment\">\n        <h2></h2>\n        <p></p>\n        <p data-js=\"payableTo\"></p>\n        <div data-js=\"contact\" class=\"contact\"></div>\n        <p data-js=\"emailUs\"></p>\n        <div class=\"button-row\">\n            <button class=\"btn-yellow\" data-js=\"signupBtn\" type=\"button\">Sign Up Now!</button>\n        </div>\n    </section>\n</div>";
};

},{}],151:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
    var price = p.unit ? p.price + ' per ' + p.unit : p.price;

    return '' + ('<div class="item-detail">\n    <div>\n        <span>' + p.heading + '</span>\n        <span>|</span>\n        <span>' + price + '</span>\n    </div>\n    <p>' + Format.ParseTextLinks(p.information || p.description) + '</p>\n</div>');
};

},{"../../Format":5}],152:[function(require,module,exports){
'use strict';

module.exports = function (p, format) {
    var negativeClass = p.isNegative ? 'negative' : '';

    return '' + ('<li data-js="transaction" data-id="' + p.id + '">\n    <span class="cell"></span>\n    <span data-attr="action" class="cell">' + p.action + '</span>\n    <span data-attr="value" class="cell ' + negativeClass + '">' + format.currency(Math.abs(p.value)) + '</span>\n    <span data-attr="checkNumber" class="cell">' + (p.checkNumber || '') + '</span>\n    <span data-attr="created" class="cell">' + format.moment(p.created).format('MMM D, YYYY') + '</span>\n    <span data-attr="description" class="cell">' + p.description + '</span>\n</li>');
};

},{}],153:[function(require,module,exports){
'use strict';

module.exports = function (p) {

    var rows = p.fields.map(function (field) {
        var rowValue = field.name === 'neverReceive' ? '<div data-js="neverReceive" class="cell"></div>' : field.name === 'onpaymentplan' ? '<select data-js="onpaymentplan" class="cell">\n                        <option value="true">True</option>\n                        <option value="false">False</option>\n                    </select>' : '<div data-name="' + field.name + '" data-js="' + field.name + '" class="cell" contenteditable="true"></div>';

        return '' + ('<div class="table-row ' + field.name + '">\n            <div class="cell">' + field.label + '</div>\n            ' + rowValue + '\n        </div>');
    }).join('');

    return '' + ('<div class="fd-hide fd-hidden section">\n        <div class="section-heading">\n            <h3>Customer Info</h3>\n            <button class="reset-btn fd-hidden" data-js="resetBtn">Reset</button>\n        </div>\n        <div class="content">\n            <div class="data">\n                <div data-js="infoTable" class="customer-table">' + rows + '</div>\n            </div>\n            <div data-js="editSummary" class="edit-summary fd-hidden">\n                <div>Summary of Changes</div>\n                <div data-js="changes"></div>\n                <div>\n                    <button class="save-btn" data-js="saveBtn">Save Changes</button>\n                </div>\n            </div>\n        </div>\n    </div>');
};

},{}],154:[function(require,module,exports){
"use strict";

module.exports = function (_ref) {
   var opts = _ref.opts;
   return "<section>\n    <p>" + opts.message + "</p>\n    <div class=\"button-row\">\n       <button data-js=\"submitBtn\" class=\"btn-submit\">Delete</button>\n       <button data-js=\"cancelBtn\" class=\"btn-cancel\">Cancel</button>\n    </div>\n</section>";
};

},{}],155:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<li data-date="' + p.date.format('YYYYMMDD') + '" class="delivery-date ' + (p.selected ? 'selected' : '') + ' ' + (p.unselectable ? 'unselectable' : '') + '">\n    <div>' + p.date.format('ddd') + '</div>\n    <div>' + p.date.format('MMM') + '</div>\n    <div>' + p.date.format('D') + '</div>\n</div>';
};

},{}],156:[function(require,module,exports){
"use strict";

module.exports = function (datum) {
    return "<div>\n    <span>" + (datum.label || datum.name) + "</span>\n</div>";
};

},{}],157:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<section class=\"no-select fd-hidden\">Dragging Item</section>";
};

},{}],158:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var actions = p.actions.map(function (action) {
        var selected = action === p.action ? 'selected="selected"' : '';
        return '<option value="' + action + '" ' + selected + '>' + action + '</option>';
    }).join('');
    return '' + ('<li data-js="editTransaction" class="edit-transaction">\n    <span></span>\n    <select data-attr="action">' + actions + '</select>\n    <input type="text" data-attr="value" value="' + p.value + '"/>\n    <input type="text" data-attr="checkNumber" value="' + (p.checkNumber || '') + '"/>\n    <input type="text" data-attr="created" value="' + (p.created || '') + '" />\n    <input type="text" data-attr="description" value="' + (p.description || '') + '"/>\n</li>');
};

},{}],159:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div>" + p.label + ": <span>" + p.oldValue + "</span>to<span>" + p.newValue + "</span></div>";
};

},{}],160:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "<div></div>";
};

},{}],161:[function(require,module,exports){
"use strict";

module.exports = function () {
    return "<div>\n    <p>A <a href='mailto:topherbaron@gmail.com'>FutureDays</a> Site</p>\n</div>";
};

},{}],162:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var heading = p.opts.heading ? '<div class="heading">' + p.opts.heading + '</div>' : '',
        prompt = p.opts.prompt ? '<div class="prompt">' + p.opts.prompt + '</div>' : '',
        fields = p.GetFormFields(p.attributes, p.model),
        buttonRow = p.opts.hideButtonRow ? '' : '<div class="btn-row">\n            <button class="btn-submit" data-js="submitBtn" type="button">\n                <span>' + (p.opts.submitText || 'Submit') + '</span>\n            </button>\n            <button class="btn-cancel" data-js="cancelBtn" type="button">\n                <span>' + (p.opts.cancelText || 'Cancel') + '</span>\n            </button>\n        </div>';

    return '<section>\n    ' + heading + '\n    <div class="form-box">\n        ' + prompt + '\n        <form>' + fields + '</form>\n        ' + buttonRow + '  \n    </div>\n</section>';
};

},{}],163:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <h1>Get Involved</h1>\n    <section data-js=\"employment\" class=\"striped\">\n        <h2></h2>\n        <p></p>\n        <ul class=\"positions\" data-js=\"openPositions\"></ul>\n    </section>\n    <section class=\"internships\" data-js=\"internships\">\n        <h2></h2>\n        <p></p>\n        <div>\n            <div data-js=\"internDuties\">\n                <h3></h3>\n                <ul data-js=\"dutyList\"></ul>\n            </div>\n            <div data-js=\"internQualifications\">\n                <h3></h3>\n                <ul data-js=\"qualificationList\"></ul>\n            </div>\n            <div data-js=\"internCompensation\">\n                <h3></h3>\n                <ul data-js=\"compensationList\"></ul>\n            </div>\n        </div>\n        <p data-js=\"application\"></p>\n    </section>\n    <section data-js=\"volunteer\" class=\"striped\">\n        <h2></h2>\n        <p></p>\n    </section>\n</div>";
};

},{}],164:[function(require,module,exports){
'use strict';

module.exports = function (_ref) {
    var opts = _ref.opts,
        ImageSrc = _ref.ImageSrc;

    var fields = opts.fields.map(function (field) {
        return '<li data-name="' + field.name + '">' + field.label + '</li>';
    }).join('');

    return '' + ('<div>\n    <div>\n        <img data-src="' + ImageSrc('header_sun') + '" />\n    </div>\n    <div data-js="nav" class="fd-hidden">\n        <div>\n            ' + require('./lib/justify') + '\n            <div><span data-js="title" data-name="' + opts.home.name + '">' + opts.home.label + '</span></div>\n        </div>\n        <ul data-js="navLinks">' + fields + '</ul>\n    </div>\n    <div>\n</div>');
};

},{"./lib/justify":191}],165:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    return '<div>\n    <img data-src="' + p.ImageSrc('cornucopia') + '" />\n    <div class="overlay">\n        <div data-js="slogan"></div>\n        <div>\n            <button class="btn-yellow" data-js="joinBtn" type="button">Join our CSA!</button>\n        </div>\n    </div>\n</div>';
};

},{}],166:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var website = p.url ? '<a target="_blank" href="' + p.url + '">Website</a>' : '',
        directions = p.street && p.cityStateZip ? '<a target="_blank" href="http://maps.google.com/?q=' + p.street + ', ' + p.cityStateZip + '">Directions</a>' : '';

    return '' + ('<div class="info-window">\n    <div>' + p.name + '</div>\n    <div>\n        <div>' + (p.street || '') + '</div>\n        <div>' + (p.cityStateZip || '') + '</div>\n        <div>' + (p.phonenumber || '') + '</div>\n    </div>\n    <div>\n        <div>' + directions + '</div>\n        <div>' + website + '</div>\n    </div>\n</div>');
};

},{}],167:[function(require,module,exports){
'use strict';

var getHeading = function getHeading() {
    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { opts: {} };

    if (!p.opts || !p.opts.name) return '';
    return p.opts.toggle ? '<div data-js="toggle" class="heading side-by-side toggle">\n            ' + p.GetIcon('caret-down') + '\n            <span>' + p.opts.name + '</span>\n          </div>' : '<h3 class="heading">' + p.opts.name + '</h3>';
};

module.exports = function (p) {
    var buttonClass = p.model.isDocumentList ? 'floating' : 'btn-yellow';

    return '' + ('<section>\n    ' + getHeading(p) + '\n    <ol data-js="list" class="list ' + (p.model.draggable || p.model.droppable ? 'no-select' : '') + '"></ol>\n    <div class="button-row">\n        ' + (p.model.reset ? '<button class="' + buttonClass + '" data-js="resetBtn" type="button">Reset</button>' : '') + '\n        ' + (p.model.save ? '<button class="' + buttonClass + '" data-js="saveBtn" type="button">Save</button>' : '') + '\n        ' + (p.model.add ? '<button class="' + buttonClass + '" data-js="addBtn" type="button">Add</button>' : '') + '\n    </div>\n</section>');
};

},{}],168:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var name = p.url ? '<div><a target="_blank" href="' + p.url + '">' + (p.name || '') + '</a></div>' : '<div>' + (p.name || '') + '</div>';
    var hours = p.hours ? p.hours.split(',').map(function (item) {
        return '<div>' + item + '</div>';
    }).join('') : '';

    return '' + ('<li class="location">\n    ' + name + '\n    <div>' + (p.label || '') + '</div>\n    <div>' + (p.venue || '') + '</div>\n    <div>' + (p.street || '') + '</div>\n    <div>' + (p.cityStateZip || '') + '</div>\n    <div>' + (p.phonenumber || '') + '</div>\n    <div><a href="mailto:' + p.email + '">' + (p.email || '') + '</a></div>\n    ' + hours + '\n</li>');
};

},{}],169:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var categories = p.opts.categories.map(function (attr) {
        return '<li>\n            <label>\n                <input data-name="' + attr.name + '" type="checkbox" checked />\n                <span></span>\n                <span class="' + attr.name + '">' + attr.label + '</span>\n            </label>\n        </li>';
    }).join('');

    return '' + ('<div>\n    <h1>Locations</h1>\n    <div>\n        <div class="map-wrap">\n            <div data-js="map"></div>\n            <ul class="legend" data-js="legend">\n                ' + categories + '\n            </ul>\n        </div>\n    </div>\n    <section>\n        <p data-js="intro"></p>\n    </section>\n    <section data-js="farmersMarkets" class="striped">\n        <h2></h2>\n        <p></p>\n        <ul data-js="farmerMarketsList"></ul>\n    </section>\n    <section data-js="retailOutlets">\n        <h2></h2>\n        <p></p>\n        <ul data-js="retailOutletsList"></ul>\n    </section>\n    <section data-js="restaurants" class="striped">\n        <h2></h2>\n        <p></p>\n        <ul data-js="restaurantsList"></ul>\n    </section>  \n    <section data-js="pickupLocations">\n        <h2></h2>\n        <p></p>\n        <ul data-js="groupLocationsList"></ul>\n        <div class="button-row">\n            <button class="btn-yellow" data-js="signupBtn" type="button">Sign Up Now!</button>\n        </div>\n    </section>\n</div>');
};

},{}],170:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <div class=\"main-search\">\n        <div data-view=\"memberTypeahead\"></div>\n    </div>\n    <div data-view=\"customerInfo\"></div>\n    <div data-view=\"seasons\"></div>\n    <div data-view=\"orderOptions\"></div>\n    <div data-view=\"weekOptions\"></div>\n    <div data-view=\"sharePatch\"></div>\n    <div data-view=\"transactions\"></div>\n</div>";
};

},{}],171:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var fields = p.fields.map(function (field) {
        return '<div class="form-group">\n            <label for="' + field.name + '">' + field.label + '</label>\n            <div>\n                <input type="' + field.type + '" class="form-control" id="' + field.name + '" data-js="' + field.name + '">\n                <span class="glyphicon form-control-feedback hide" aria-hidden="true"></span>\n            </div>\n        </div>';
    }).join('');

    return '' + ('<div class="MemberInfo" data-js="container">\n    <p>Please provide us with some information about yourself</p>\n    <form>\n        ' + fields + '\n        <div style="display: none;"><input type="text" id="PreventChromeAutocomplete" name="PreventChromeAutocomplete" autocomplete="address-level4" /></div>\n    </form>\n</div>');
};

},{}],172:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div>\n    <label class=\"form-label\">Search Customers</label>  \n    <input data-js=\"customerInput\" class=\"input-std type=\"text\">\n</div>";
};

},{}],173:[function(require,module,exports){
"use strict";

module.exports = function (p) {
  return "";
};

},{}],174:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden section\">\n    <div class=\"section-heading\">\n        <h3>Order Options</h3>\n        <span data-js=\"seasonLabel\"></span>\n        <button class=\"reset-btn fd-hidden\" data-js=\"resetBtn\">Reset</button>\n    </div>\n    <div class=\"content\">\n        <div class=\"data\">\n            <ol data-js=\"options\"></ol>\n        </div>\n        <div data-js=\"editSummary\" class=\"edit-summary fd-hidden\">\n            <div>Summary of Changes</div>\n            <div data-js=\"changes\"></div>\n            <div>\n                <span>Weekly price adjustment: </span>\n                <span class=\"original-price\" data-js=\"originalWeeklyPrice\"></span>\n                <span>to</span>\n                <span class=\"new-price\" data-js=\"newWeeklyPrice\"></span>\n            </div>\n        </div>\n    </div>\n</div>";
};

},{}],175:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<section>\n    <h4>Reporting</h4>\n    <form>\n        <div>\n            <label>Name:</label>\n            <select data-js=\"report\"></select>\n        </div>\n        <div>\n            <label>From:</label>\n            <input type=\"text\" data-js=\"from\" />\n        </div>\n        <div>\n            <label>To:</label>\n            <input type=\"text\" data-js=\"to\" />\n        </div>\n        <div>\n            <button type=\"button\" data-js=\"viewBtn\" class=\"link\">View</button>\n            <button type=\"button\" data-js=\"exportBtn\" class=\"link\">Export</button>\n        </div>\n    </form>\n    <div class=\"results\" data-js=\"results\">\n        <h4 class=\"fd-hide\" data-js=\"empty\">No results</h4>\n        <ol class=\"columns\" data-js=\"columns\"></ol>\n        <div class=\"rows\" data-js=\"rows\"></div>\n    </div>\n</section>";
};

},{}],176:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden section\">\n    <div class=\"section-heading\">\n        <h3>All Seasons</h3>\n    </div>\n    <div class=\"table\">\n        <ol class=\"table-row\" data-js=\"list\"></ol>\n    </div>\n</div>";
};

},{}],177:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    var dataId = p.membershareid ? "data-id=\"" + p.membershareid + "\"" : "",
        count = p.count ? "<span>(" + p.count + ")</span>" : "";

    return "" + ("<div " + dataId + "\" class=\"share-label\">\n        <div><span>" + p.label + "</span> " + count + "</div>\n        <div>\n            <span>" + p.humanStartdate + "</span>\n            <span>-</span>\n            <span>" + p.humanEnddate + "</span>\n        </div>\n        <div>" + p.duration + " weeks</div>\n    </div>");
};

},{}],178:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
    return '<div>\n    <h4>' + p.heading + '</h4>\n    <div><img data-src="' + Format.ImageSrc(p.image) + '" /></div>\n    <div>' + p.listHeading + '</div>\n    <ul>' + Format.GetListItems(p.sampleList) + '</ul>\n</div>';
};

},{"../../Format":5}],179:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden\">\n    <div class=\"section-heading\">\n        <h3>Adjust Member Share Options</h3>\n    </div>\n    <div class=\"content\">\n        <div>\n            <ul>\n                <li class=\"clearfix line-item\">\n                    <span>Weeks Removed: </span>\n                    <span data-js=\"weeksRemoved\"></span>\n                    <span class=\"adjustment\">\n                        <span>Adjustment: </span>\n                        <span class=\"is-negative\" data-js=\"weeksRemovedPrice\"></span>\n                    </span>\n                </li>\n                <li class=\"line-item\">\n                    <span>Weeks Added: </span>\n                    <span data-js=\"weeksAdded\"></span>\n                    <span data-js=\"addedAdjustment\" class=\"adjustment\">\n                        <span>Adjustment: </span>\n                        <span class=\"is-positive\" data-js=\"weeksAddedPrice\"></span>\n                    </span>\n                </li>\n                <li data-js=\"options\" class=\"line-item fd-hidden\">\n                    <div>\n                        <span>Options Update: </span>\n                        <span data-js=\"shareOptionDescription\"></span>\n                    </div>\n                    <div>\n                        <span>Weekly price adjustment: </span>\n                        <span data-js=\"weeklyAdjustment\"></span>\n                    </div>\n                    <div>\n                        <span>Weeks affected: </span>\n                        <span data-js=\"weeksAffected\"></span>\n                        <span class=\"adjustment\">\n                            <span> Adjustment: </span>\n                            <span data-js=\"optionsAdjustment\"></span>\n                        </span>\n                    </div>\n                <li>\n                    <span>Total Adjustment: </span>\n                    <span data-js=\"adjustment\"></span>\n                </li>\n            </ul>\n            <div class=\"email\">\n                <label><input data-js=\"sendEmail\" type=\"checkbox\">Send Email</label>\n            </div>\n            <div data-view=\"buttonFlow\"></div>\n        </div>\n    </div>\n</div>";
};

},{}],180:[function(require,module,exports){
'use strict';

var Format = require('../../Format');

module.exports = function (p) {
    return '<div class="bio">\n    <div>\n        <img data-src="' + Format.ImageSrc(p.image) + '" />\n        <div class="overlay">\n            <div>' + (p.bio || '') + '</div>\n        </div>\n    </div>\n    <div>' + p.name + '</div>\n</div>';
};

},{"../../Format":5}],181:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "" + "<div class=\"clearfix fd-hide fd-hidden\">\n    <div data-js=\"icon\"></div>\n    <div>\n        <div data-js=\"title\"></div>\n        <div data-js=\"message\"></div>\n    </div>\n</div>";
};

},{}],182:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden section\">\n    <div class=\"heading\">\n        <span></span>\n        <h3>Transactions</h3>\n        <span>Value</span>\n        <span>Check #</span>\n        <span>Date</span>\n        <span>Description</span>\n    </div>\n    <ol data-js=\"transactions\"></ol>\n    <div data-view=\"buttonFlow\" data-name=\"editButtons\"></div>\n    <div data-view=\"addTransaction\"></div>\n    <div class=\"balance\">\n        <h3>Balance</h3>\n        <span data-js=\"balance\"></span>\n        <span></span>\n        <span>\n            <div data-view=\"buttonFlow\" data-name=\"emailButtons\"></div>\n        </span>\n    </div>\n</div>";
};

},{}],183:[function(require,module,exports){
"use strict";

module.exports = function (p) {
    return "<div class=\"fd-hide fd-hidden\">\n    <div class=\"section-heading\">\n        <h3>Week Options</h3>\n        <div>\n            <span>Delivery Day: </span>\n            <span data-js=\"deliveryDay\"></span>\n        </div>\n        <button class=\"reset-btn hidden\" data-js=\"resetBtn\">Reset</button>\n    </div>\n    <div class=\"content\">\n        <div class=\"data\">\n            <ol data-js=\"dates\"></ol>\n        </div>\n        <div data-js=\"editSummary\" class=\"edit-summary hidden\">\n            <div>Summary of Changes</div>\n            <div data-js=\"changes\">\n                <div class=\"column\">\n                    <div>Added Dates</div>\n                    <ol data-js=\"selectedDates\" class=\"added-dates\"></ol>\n                </div>\n                <div class=\"column\">\n                    <div>Removed Dates</div>\n                    <ol data-js=\"removedDates\" class=\"removed-dates\"></ol>\n                </div>\n            </div>\n            <div>\n                <span>Week count adjustment: </span>\n                <span class=\"price-change\" data-js=\"weekChange\"></span>\n            </div>\n        </div>\n    </div>\n</div>";
};

},{}],184:[function(require,module,exports){
'use strict';

module.exports = function (p) {
    var sizeOptions = p.sizeOptions.map(function (option) {
        return '<div class="cell">' + option.label + ' Share</div>';
    }).join(''),
        rows = p.deliveryOptions.map(function (deliveryOption) {
        return '<div>' + ('<div class="cell">' + deliveryOption.label + '</div>') + p.sizeOptions.map(function (sizeOption) {
            var price = (parseFloat(sizeOption.price.replace('$', '')) + parseFloat(deliveryOption.price.replace('$', ''))).toFixed(2);
            return '<div class="cell">$' + price + ' / box</div>';
        }).join('') + '</div>';
    }).join('');

    return '' + ('<div>\n    <div>\n        <div class="cell">Delivery Option</div>\n        ' + sizeOptions + '\n    </div>\n    ' + rows + '\n</div>');
};

},{}],185:[function(require,module,exports){
"use strict";

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	return "" + ("<svg class=\"caret-down\" version=\"1.1\" class=\"caret-down\" " + this.IconDataJs(p) + " xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 292.362 292.362\" style=\"enable-background:new 0 0 292.362 292.362;\"\n\t xml:space=\"preserve\">\n<g>\n\t<path d=\"M286.935,69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952,0-9.233,1.807-12.85,5.424\n\t\tC1.807,72.998,0,77.279,0,82.228c0,4.948,1.807,9.229,5.424,12.847l127.907,127.907c3.621,3.617,7.902,5.428,12.85,5.428\n\t\ts9.233-1.811,12.847-5.428L286.935,95.074c3.613-3.617,5.427-7.898,5.427-12.847C292.362,77.279,290.548,72.998,286.935,69.377z\"/>\n</g></svg>");
};

},{}],186:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg version="1.1" data-js="' + (p.name || 'checkmark') + '" class="checkmark" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="97.619px" height="97.618px" viewBox="0 0 97.619 97.618" style="enable-background:new 0 0 97.619 97.618;"\n\t xml:space="preserve">\n<g>\n\t<path d="M96.939,17.358L83.968,5.959c-0.398-0.352-0.927-0.531-1.449-0.494C81.99,5.5,81.496,5.743,81.146,6.142L34.1,59.688\n\t\tL17.372,37.547c-0.319-0.422-0.794-0.701-1.319-0.773c-0.524-0.078-1.059,0.064-1.481,0.385L0.794,47.567\n\t\tc-0.881,0.666-1.056,1.92-0.39,2.801l30.974,40.996c0.362,0.479,0.922,0.771,1.522,0.793c0.024,0,0.049,0,0.073,0\n\t\tc0.574,0,1.122-0.246,1.503-0.68l62.644-71.297C97.85,19.351,97.769,18.086,96.939,17.358z"/>\n</g></svg>';
};

},{}],187:[function(require,module,exports){
'use strict';

module.exports = function () {
  var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return '<svg data-js="' + (p.name || 'edit') + '" class="edit" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" version="1.1" x="0px" y="0px" viewBox="0 0 100 100"><g transform="translate(0,-952.36218)"><path style="opacity:1;color:#000000;fill:#000000;stroke:none;stroke-width:4;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;fill-opacity:1;stroke-dasharray:none" d="M 70 13 L 61.4375 21.5625 L 78.4375 38.5625 L 87 30 L 70 13 z M 58.59375 24.40625 L 20.4375 62.5625 L 37.4375 79.5625 L 75.59375 41.40625 L 58.59375 24.40625 z M 17.84375 65.65625 L 13 87 L 34.34375 82.15625 L 17.84375 65.65625 z " transform="translate(0,952.36218)"/></g></svg>';
};

},{}],188:[function(require,module,exports){
'use strict';

module.exports = function () {
    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return '<svg version="1.1" data-js="' + (p.name || 'error') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 18.978 18.978" style="enable-background:new 0 0 18.978 18.978;" xml:space="preserve">\n<g>\n    <path d="M16.088,1.675c-0.133-0.104-0.306-0.144-0.47-0.105c-0.013,0.002-1.261,0.29-2.594,0.29\n        c-1.788,0-2.789-0.476-2.975-1.415C9.999,0.191,9.779,0.007,9.521,0c-0.257-0.007-0.487,0.167-0.55,0.418\n        C8.727,1.386,7.71,1.877,5.95,1.877c-1.332,0-2.571-0.302-2.583-0.305c-0.166-0.04-0.34-0.004-0.474,0.102\n        C2.76,1.777,2.681,1.938,2.681,2.108v4.869c0,0.04,0.004,0.078,0.013,0.115c0.057,1.647,0.65,8.714,6.528,11.822\n        c0.08,0.043,0.169,0.064,0.258,0.064c0.092,0,0.183-0.021,0.266-0.066c5.74-3.137,6.445-10.115,6.532-11.791\n        c0.012-0.046,0.019-0.094,0.019-0.144V2.108C16.297,1.939,16.219,1.78,16.088,1.675z M15.19,6.857\n        c-0.007,0.031-0.012,0.064-0.013,0.097c-0.053,1.298-0.574,7.832-5.701,10.838c-5.215-2.965-5.646-9.526-5.68-10.83\n        c0-0.029-0.004-0.058-0.009-0.085V2.784C4.322,2.877,5.112,2.982,5.95,2.982c1.911,0,2.965-0.54,3.537-1.208\n        c0.553,0.661,1.599,1.191,3.536,1.191c0.839,0,1.631-0.101,2.166-0.188L15.19,6.857L15.19,6.857z"/>\n    <polygon points="10.241,11.237 10.529,5.311 8.449,5.311 8.75,11.237 \t\t"/>\n    <path d="M9.496,11.891c-0.694,0-1.178,0.498-1.178,1.189c0,0.682,0.471,1.191,1.178,1.191\n        c0.706,0,1.164-0.51,1.164-1.191C10.647,12.389,10.189,11.891,9.496,11.891z"/>\n</g></svg>';
};

},{}],189:[function(require,module,exports){
'use strict';

module.exports = function () {
  var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return '<svg class="ex" data-js="' + (p.name || 'ex') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve"><g><g><polygon points="405,136.798 375.202,107 256,226.202 136.798,107 107,136.798 226.202,256 107,375.202 136.798,405 256,285.798     375.202,405 405,375.202 285.798,256   "/></g></g></svg>';
};

},{}],190:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg version="1.1" class="garbage" data-js="' + (p.name || 'garbage') + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 59 59" style="enable-background:new 0 0 59 59;" xml:space="preserve">\n<g><path d="M29.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C28.5,50.553,28.948,51,29.5,51z"/>\n\t<path d="M19.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C18.5,50.553,18.948,51,19.5,51z"/>\n\t<path d="M39.5,51c0.552,0,1-0.447,1-1V17c0-0.553-0.448-1-1-1s-1,0.447-1,1v33C38.5,50.553,38.948,51,39.5,51z"/>\n\t<path d="M52.5,6H38.456c-0.11-1.25-0.495-3.358-1.813-4.711C35.809,0.434,34.751,0,33.499,0H23.5c-1.252,0-2.31,0.434-3.144,1.289\n\t\tC19.038,2.642,18.653,4.75,18.543,6H6.5c-0.552,0-1,0.447-1,1s0.448,1,1,1h2.041l1.915,46.021C10.493,55.743,11.565,59,15.364,59\n\t\th28.272c3.799,0,4.871-3.257,4.907-4.958L50.459,8H52.5c0.552,0,1-0.447,1-1S53.052,6,52.5,6z M21.792,2.681\n\t\tC22.24,2.223,22.799,2,23.5,2h9.999c0.701,0,1.26,0.223,1.708,0.681c0.805,0.823,1.128,2.271,1.24,3.319H20.553\n\t\tC20.665,4.952,20.988,3.504,21.792,2.681z M46.544,53.979C46.538,54.288,46.4,57,43.636,57H15.364\n\t\tc-2.734,0-2.898-2.717-2.909-3.042L10.542,8h37.915L46.544,53.979z"/>\n</g></svg>';
};

},{}],191:[function(require,module,exports){
"use strict";

module.exports = "<svg version=\"1.1\" data-js=\"justify\" class=\"justify\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"-2 -2 28 28\" style=\"enable-background:new 0 0 22.916 22.916;\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M22.416,22.828H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,22.828,22.416,22.828z\"/>\n\t<path d=\"M22.416,15.582H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,15.582,22.416,15.582z\"/>\n\t<path d=\"M22.416,8.335H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,8.335,22.416,8.335z\"/>\n\t<path d=\"M22.416,1.088H0.5c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h21.916c0.276,0,0.5,0.224,0.5,0.5\n\t\tS22.692,1.088,22.416,1.088z\"/></g></svg>";

},{}],192:[function(require,module,exports){
'use strict';

module.exports = function () {
	var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return '<svg class="left-arrow" data-js="' + (p.name || 'leftArrow') + '" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t viewBox="0 0 31.494 31.494" style="enable-background:new 0 0 31.494 31.494;" xml:space="preserve">\n<path style="fill:#1E201D;" d="M10.273,5.009c0.444-0.444,1.143-0.444,1.587,0c0.429,0.429,0.429,1.143,0,1.571l-8.047,8.047h26.554\n\tc0.619,0,1.127,0.492,1.127,1.111c0,0.619-0.508,1.127-1.127,1.127H3.813l8.047,8.032c0.429,0.444,0.429,1.159,0,1.587\n\tc-0.444,0.444-1.143,0.444-1.587,0l-9.952-9.952c-0.429-0.429-0.429-1.143,0-1.571L10.273,5.009z"/></svg>';
};

},{}],193:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = {

    Pages: Object.create(require('../../models/__proto__'), { resource: { value: 'Pages' } }),

    loadTableData: function loadTableData(table) {
        var _this = this;

        this.models[table.name] = Object.create(require('../../models/__proto__'), { resource: { value: table.name } });

        this.models[table.name].get().then(function () {
            if (table.image) {
                var promise = Promise.resolve();
                _this.models[table.name].data.forEach(function (model) {
                    return promise = promise.then(function () {
                        return _this.loadImageTable(table, model);
                    });
                });
                return promise;
            } else {
                _this.models[table.name].data.forEach(function (model) {
                    return _this.slurpTemplate({
                        insertion: { el: _this.els[table.el] },
                        template: _this.templates[table.template](model)
                    });
                });
            }
        }).catch(this.Error);
    },
    processObject: function processObject(name, data) {
        var _this2 = this;

        Object.keys(data).forEach(function (key) {
            var val = data[key];

            if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') return Array.isArray(val) ? _this2.insertArrayData(name, key, val) : _this2.processObject(key, val);

            if (_this2.els[key]) return (/image/i.test(key) ? _this2.slurpTemplate({
                    insertion: { el: _this2.els[key] },
                    template: '<img data-src="' + _this2.Format.ImageSrc(data[key]) + '" />'
                }) : _this2.els[key].innerHTML = _this2.Format.ParseTextLinks(data[key])
            );

            if (_this2.nameToTagName[key]) {
                _this2.els[name].querySelector(_this2.nameToSelector[key] || _this2.nameToTagName[key]).innerHTML = _this2.Format.ParseTextLinks(data[key]);
            }
        });
    },
    insertArrayData: function insertArrayData(sectionName, key, data) {
        var _this3 = this;

        var el = this.els[key] || this.els[sectionName];

        data.forEach(function (datum) {
            return _this3.slurpTemplate({
                insertion: { el: el },
                template: '<' + (_this3.nameToTagName[key] || 'li') + '>' + _this3.Format.ParseTextLinks(datum) + '</' + (_this3.nameToTagName[key] || 'li') + '>'
            });
        });
    },


    nameToSelector: {
        heading: 'h2, h3, h4'
    },

    nameToTagName: {
        heading: 'h2',
        description: 'p'
    },

    onLinkClick: function onLinkClick(el) {
        if (!el.hasAttribute('data-name')) return;
        this.emit('navigate', el.getAttribute('data-name'));
    },
    postRender: function postRender() {
        var _this4 = this;

        if (this.tables.length) {
            this.models = {};
            this.tables.forEach(function (table) {
                return _this4.loadTableData(table);
            });
        }

        this.Pages.get({ query: { name: this.documentName } }).then(function () {
            _this4.processObject(null, _this4.Pages.data);
            _this4.els.container.querySelectorAll('.link').forEach(function (el) {
                return el.addEventListener('click', function () {
                    return _this4.onLinkClick(el);
                });
            });
        }).catch(this.Error);

        return this;
    },


    tables: []

};

},{"../../models/__proto__":42}],194:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('../MyView'),
    Form = function Form() {
    return MyView.apply(this, arguments);
};

_extends(Form.prototype, MyView.prototype, {

    emailRegex: /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,

    fields: [],

    onFormFail: function onFormFail(error) {
        console.log(error.stack || error);
        this.slurpTemplate({ template: this.templates.serverError(error), insertion: { $el: this.templateData.buttonRow, method: 'before' } });
    },

    onSubmissionResponse: function onSubmissionResponse() {},

    postForm: function postForm(data) {
        return this.Q(this.$.ajax({
            data: JSON.stringify(data.values) || JSON.stringify(this.getFormData()),
            headers: { token: this.user ? this.user.get('token') : '' },
            type: "POST",
            url: this.util.format("/%s", data.resource)
        }));
    },


    removeErrors: function removeErrors(e) {

        var input = this.$(e.target);
        input.parent().removeClass('has-error');
        input.next().remove();
    },

    submitForm: function submitForm(resource) {

        if (this.validateForm() === false) return;
        this.postForm(resource).then(this.onSubmissionResponse.bind(this)).fail(this.onFormFail.bind(this)).done();
    },

    templates: {
        fieldError: require('../../templates/fieldError')(require('handlebars')),
        invalidLoginError: require('../../templates/invalidLoginError')(require('handlebars')),
        serverError: require('../../templates/serverError')(require('handlebars'))
    },

    validateForm: function validateForm() {
        var valid = true;

        if (this.templateData.invalidLoginError) this.templateData.invalidLoginError.remove();
        if (this.templateData.serverError) this.templateData.serverError.remove();

        this.fields.forEach(function (field) {

            this.templateData[field.name].parent().removeClass('has-error');
            this.templateData[field.name].next().remove();

            if (field.validate.call(this, this.templateData[field.name].val()) === false) {
                valid = false;

                this.templateData[field.name].parent().addClass('has-error');
                this.slurpTemplate({ template: this.templates.fieldError(field), insertion: { $el: this.templateData[field.name].parent(), method: 'append' } });
            }
        }, this);

        return valid;
    },

    validatePassword: function validatePassword(val) {
        if (!val) return false;else return val.length >= 6;
    }
});

module.exports = Form;

},{"../../templates/fieldError":51,"../../templates/invalidLoginError":59,"../../templates/serverError":64,"../MyView":110,"handlebars":246}],195:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('../MyView'),
    ListView = function ListView() {
    return MyView.apply(this, arguments);
};

_extends(ListView.prototype, MyView.prototype, {

    addItem: function addItem(model) {
        var _this = this;

        this.itemViews[model.id] = new this.ItemView(_extends({ container: this.templateData.container, model: model, selection: this.selection }, this.getItemViewOptions())).on('removed', function () {
            return delete _this.itemViews[model.id];
        });

        this.emit('itemAdded', model);

        if (model.get('unselectable')) return;

        if (this.selection) this.itemViews[model.id].on('clicked', function (model) {
            return _this.onItemClick(model);
        });
        if (this.selected) this.onItemClick(model);
    },

    collection: {},

    createItems: function createItems() {
        var _this2 = this;

        this.items = new (this.Collection.extend(typeof this.collection === "function" ? this.collection() : this.collection))().on('reset', function () {
            return _this2.onItemsReset();
        }).on('add', function (item) {
            return _this2.addItem(item);
        }).on('remove', function (item) {
            return _this2.removeItem(item);
        }).on('update', function () {
            return _this2.noItemCheck();
        }).on('sort', function () {
            return _this2.reOrderDOM();
        });

        return this;
    },
    fetchItems: function fetchItems() {
        var _this3 = this;

        this.items.fetch(_extends({}, { reset: true }, this.fetch)).fail(function (err) {
            return console.log('Error fetching collection : ' + _this3.url + " -- " + err.stack || err);
        });

        return this;
    },


    getClosestClickedIndex: function getClosestClickedIndex(model) {
        var _this4 = this;

        var clickedIndex = this.items.indexOf(model),
            closest = undefined,
            maxDistance = 0,
            selectedIndexes = Object.keys(this.selectedItems).map(function (id) {
            return _this4.items.indexOf(_this4.items.get(id));
        }).sort();

        selectedIndexes.forEach(function (index) {
            var distance = Math.abs(index - clickedIndex);
            if (distance > maxDistance) {
                maxDistance = distance;closest = index;
            }
        });

        return closest;
    },

    getItemViewOptions: function getItemViewOptions() {
        return {};
    },

    handleKeydown: function handleKeydown(e) {

        this.pressedKey = e.which === 16 ? 'shift' : e.which === 17 || e.which === 91 ? 'ctrl' : undefined;
    },

    handleKeyup: function handleKeyup(e) {

        this.pressedKey = e.which === 16 && this.pressedKey === 'shift' ? undefined : (e.which === 17 || e.which === 91) && this.pressedKey === 'ctrl' ? undefined : this.pressedKey;
    },

    noItemCheck: function noItemCheck() {
        var container = this.getItemViewOptions().container || this.templateData.container;
        if (this.items.length === 0) container.addClass('no-items');else container.removeClass('no-items');
    },

    onItemClick: function onItemClick(model) {
        var method = this.util.format('%sselectItem', this.itemViews[model.id].templateData.container.hasClass('selected') && this.selection !== 'multiComplex' ? 'un' : '');

        this[method](model);
    },

    onItemsReset: function onItemsReset() {
        var _this5 = this;

        var listContainer = this.getItemViewOptions().container || this.templateData.container;

        listContainer.empty();
        this.itemViews = [];
        if (this.items.length && this.setFields) {
            this.setFields(this.items.at(0).attributes);
        }
        this.items.forEach(function (item) {
            return _this5.addItem(item);
        });
        this.noItemCheck();
    },
    postRender: function postRender() {
        var _this6 = this;

        if (this.selection === 'multiComplex') {

            this.$(document).on('keydown', this.handleKeydown.bind(this)).on('keyup', this.handleKeyup.bind(this));

            window.addEventListener("blur", function (e) {
                return _this6.pressedKey = undefined;
            });
            window.addEventListener("focus", function (e) {
                return _this6.pressedKey = undefined;
            });
        }

        this.itemViews = [];
        this.selectedItems = {};

        this.createItems();

        if (this.itemModels) this.items.reset(typeof this.itemModels === "function" ? this.itemModels() : this.itemModels);

        if (this.fetch) this.fetchItems();
    },
    removeItem: function removeItem(item) {
        if (this.itemViews[item.id].templateData.container.hasClass('selected')) this.unselectItem(item);
        this.itemViews[item.id].delete();
        delete this.itemViews[item.id];
    },


    reOrderDOM: function reOrderDOM() {
        var _this7 = this;

        var container = this.getItemViewOptions().container || this.templateData.container;
        this.items.forEach(function (item) {
            return container[_this7.reverseSort ? 'prepend' : 'append'](_this7.itemViews[item.id].templateData.container);
        });
    },

    scrollToBottom: function scrollToBottom() {
        var _this8 = this;

        var height;

        var intervalId = setInterval(function () {
            var newHeight = _this8.templateData.container.outerHeight(true);
            if (height === newHeight) {
                clearInterval(intervalId);
                _this8.container.scrollTop(_this8.container.prop('scrollHeight'));
            } else {
                height = _this8.templateData.container.outerHeight(true);
            }
        }, 100);
    },

    selectItem: function selectItem(model) {
        var _this9 = this;

        var selectedIds = Object.keys(this.selectedItems);

        if (this.pressedKey === undefined && this.selection === 'multiComplex' || this.selection === 'single') {
            selectedIds.forEach(function (id) {
                return _this9.unselectItem(_this9.selectedItems[id]);
            });
        }

        if (this.pressedKey === 'shift' && selectedIds.length) {
            var end = this.getClosestClickedIndex(model),
                start = this.items.indexOf(model);

            this._.range(start, end, start < end ? 1 : -1).forEach(function (index) {
                var itemToSelect = _this9.items.at(index);
                _this9.itemViews[itemToSelect.id].templateData.container.addClass('selected');
                _this9.selectedItems[itemToSelect.id] = itemToSelect;
                _this9.emit('itemSelected', itemToSelect);
            });
        } else {
            this.itemViews[model.id].templateData.container.addClass('selected');
            this.selectedItems[model.id] = model;
            this.emit('itemSelected', model);
        }
    },


    unselectItem: function unselectItem(model) {

        this.itemViews[model.id].templateData.container.removeClass('selected');

        delete this.selectedItems[model.id];

        this.emit('itemUnselected', model);
    }

});

module.exports = ListView;

},{"../MyView":110}],196:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MyView = require('../MyView'),
    ListItem = function ListItem() {
	return MyView.apply(this, arguments);
};

_extends(ListItem.prototype, MyView.prototype, {
	getTemplateOptions: function getTemplateOptions() {
		return this.model.attributes;
	},
	postRender: function postRender() {
		var _this = this;

		if (this.selection) this.templateData.container.on('click', function () {
			return _this.emit('clicked', _this.model);
		});
	}
});

module.exports = ListItem;

},{"../MyView":110}],197:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var List = require('./List'),
    Table = function Table() {
    return List.apply(this, arguments);
};

_extends(Table.prototype, List.prototype, {

    events: {
        'header': { event: 'click', selector: 'th', method: 'sortByHeader' }
    },

    getItemViewOptions: function getItemViewOptions() {
        return { container: this.templateData.body, fields: this.fields, imageLoader: this.imageLoader, spinner: this.spinner };
    },
    getTemplateOptions: function getTemplateOptions() {
        return { fields: this.fields };
    },


    sortByHeader: function sortByHeader(e) {

        var comparator = this.$(e.currentTarget).attr('data-sort');

        this.reverseSort = comparator === this.items.comparator && this.reverseSort === false ? true : false;

        this.items.comparator = comparator;

        this.items.sort();
    },

    templates: {
        headerColumn: function headerColumn(data) {
            return this.util.format('<th class="w%s %s" data-sort="%s">%s</th>', data.width, data.name, data.name, data.label);
        }
    }

});

module.exports = Table;

},{"./List":195}],198:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = _extends({}, require('./MyObject').prototype, {
    CreateDefault: function CreateDefault() {
        return this.reducer(this.attributes, function (attr) {
            return _defineProperty({}, attr.name, typeof attr.default === 'function' ? attr.default() : attr.default);
        });
    },


    attributes: [],

    data: {},

    constructor: function constructor() {
        var _this = this;

        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _extends(this, { store: {}, data: data }, opts);

        if (this.storeBy) {
            this.storeBy.forEach(function (key) {
                return _this.store[key] = {};
            });
            this._store();
        }

        return this;
    },


    meta: {},

    sort: function sort(opts) {
        var attr = Object.keys(opts)[0],
            value = opts[attr];

        this.data.sort(function (a, b) {
            return value ? a[attr] < b[attr] ? -1 : 1 : b[attr] < a[attr] ? -1 : 1;
        });

        return this;
    },
    _resetStore: function _resetStore(storeBy) {
        var _this2 = this;

        this.store = {};
        storeBy.forEach(function (attr) {
            return _this2.store[attr] = {};
        });
        this.storeBy = storeBy;
    },
    _store: function _store(data) {
        var _this3 = this;

        data = data || this.data;
        data.forEach(function (datum) {
            return _this3.storeBy.forEach(function (attr) {
                return _this3._storeAttr(datum, attr);
            });
        });
    },
    _storeAttr: function _storeAttr(datum, attr) {
        this.store[attr][datum[attr]] = this.store[attr][datum[attr]] ? Array.isArray(this.store[attr][datum[attr]]) ? this.store[attr][datum[attr]].concat(datum) : [this.store[attr][datum[attr]], datum] : datum;
    },
    _storeOne: function _storeOne(datum) {
        var _this4 = this;

        this.storeBy.forEach(function (attr) {
            return _this4._storeAttr(datum, attr);
        });
    }
});

},{"./MyObject":200}],199:[function(require,module,exports){
"use strict";

module.exports = function (err) {
  console.log(err.stack || err);
};

},{}],200:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MyObject = function MyObject(data) {
    return _extends(this, data);
};

_extends(MyObject.prototype, {

    Error: require('./MyError'),

    _: require('underscore'),

    format: require('util').format,

    moment: require('moment'),

    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    getIntRange: function getIntRange(int) {
        return Array.from(Array(int).keys());
    },
    getRandomInclusiveInteger: function getRandomInclusiveInteger(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    omit: function omit(obj, keys) {
        return Object.keys(obj).filter(function (key) {
            return !keys.includes(key);
        }).reduce(function (memo, key) {
            return _extends(memo, _defineProperty({}, key, obj[key]));
        }, {});
    },
    fdPick: function fdPick(obj, keys) {
        return keys.reduce(function (memo, key) {
            return _extends(memo, _defineProperty({}, key, obj[key]));
        }, {});
    },
    reducer: function reducer(arr, fn) {
        return arr.reduce(function (memo, item, i) {
            return _extends(memo, fn(item, i));
        }, {});
    },
    shuffleArray: function shuffleArray(arr) {
        var _this = this;

        var rv = Array.from(arr);

        rv.forEach(function (item, i) {
            if (i === rv.length - 1) return;
            var int = _this.getRandomInclusiveInteger(i, rv.length - 1),
                holder = rv[i];

            rv[i] = rv[int];
            rv[int] = holder;
        });

        return rv;
    },


    P: function P(fun) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var thisArg = arguments[2];
        return new Promise(function (resolve, reject) {
            return Reflect.apply(fun, thisArg || undefined, args.concat(function (e) {
                for (var _len = arguments.length, callback = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    callback[_key - 1] = arguments[_key];
                }

                return e ? reject(e) : resolve(callback);
            }));
        });
    },

    Q: require('q')

});

module.exports = MyObject;

},{"./MyError":199,"moment":"moment","q":261,"underscore":"underscore","util":265}],201:[function(require,module,exports){
(function (process,__filename){
/** vim: et:ts=4:sw=4:sts=4
 * @license amdefine 1.0.1 Copyright (c) 2011-2016, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/amdefine for details
 */

/*jslint node: true */
/*global module, process */
'use strict';

/**
 * Creates a define for node.
 * @param {Object} module the "module" object that is defined by Node for the
 * current module.
 * @param {Function} [requireFn]. Node's require function for the current module.
 * It only needs to be passed in Node versions before 0.5, when module.require
 * did not exist.
 * @returns {Function} a define function that is usable for the current node
 * module.
 */
function amdefine(module, requireFn) {
    'use strict';
    var defineCache = {},
        loaderCache = {},
        alreadyCalled = false,
        path = require('path'),
        makeRequire, stringRequire;

    /**
     * Trims the . and .. from an array of path segments.
     * It will keep a leading path segment if a .. will become
     * the first path segment, to help with module name lookups,
     * which act like paths, but can be remapped. But the end result,
     * all paths that use this function should look normalized.
     * NOTE: this method MODIFIES the input array.
     * @param {Array} ary the array of path segments.
     */
    function trimDots(ary) {
        var i, part;
        for (i = 0; ary[i]; i+= 1) {
            part = ary[i];
            if (part === '.') {
                ary.splice(i, 1);
                i -= 1;
            } else if (part === '..') {
                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                    //End of the line. Keep at least one non-dot
                    //path segment at the front so it can be mapped
                    //correctly to disk. Otherwise, there is likely
                    //no path mapping for a path starting with '..'.
                    //This can still fail, but catches the most reasonable
                    //uses of ..
                    break;
                } else if (i > 0) {
                    ary.splice(i - 1, 2);
                    i -= 2;
                }
            }
        }
    }

    function normalize(name, baseName) {
        var baseParts;

        //Adjust any relative paths.
        if (name && name.charAt(0) === '.') {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                baseParts = baseName.split('/');
                baseParts = baseParts.slice(0, baseParts.length - 1);
                baseParts = baseParts.concat(name.split('/'));
                trimDots(baseParts);
                name = baseParts.join('/');
            }
        }

        return name;
    }

    /**
     * Create the normalize() function passed to a loader plugin's
     * normalize method.
     */
    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(id) {
        function load(value) {
            loaderCache[id] = value;
        }

        load.fromText = function (id, text) {
            //This one is difficult because the text can/probably uses
            //define, and any relative paths and requires should be relative
            //to that id was it would be found on disk. But this would require
            //bootstrapping a module/require fairly deeply from node core.
            //Not sure how best to go about that yet.
            throw new Error('amdefine does not implement load.fromText');
        };

        return load;
    }

    makeRequire = function (systemRequire, exports, module, relId) {
        function amdRequire(deps, callback) {
            if (typeof deps === 'string') {
                //Synchronous, single module require('')
                return stringRequire(systemRequire, exports, module, deps, relId);
            } else {
                //Array of dependencies with a callback.

                //Convert the dependencies to modules.
                deps = deps.map(function (depName) {
                    return stringRequire(systemRequire, exports, module, depName, relId);
                });

                //Wait for next tick to call back the require call.
                if (callback) {
                    process.nextTick(function () {
                        callback.apply(null, deps);
                    });
                }
            }
        }

        amdRequire.toUrl = function (filePath) {
            if (filePath.indexOf('.') === 0) {
                return normalize(filePath, path.dirname(module.filename));
            } else {
                return filePath;
            }
        };

        return amdRequire;
    };

    //Favor explicit value, passed in if the module wants to support Node 0.4.
    requireFn = requireFn || function req() {
        return module.require.apply(module, arguments);
    };

    function runFactory(id, deps, factory) {
        var r, e, m, result;

        if (id) {
            e = loaderCache[id] = {};
            m = {
                id: id,
                uri: __filename,
                exports: e
            };
            r = makeRequire(requireFn, e, m, id);
        } else {
            //Only support one define call per file
            if (alreadyCalled) {
                throw new Error('amdefine with no module ID cannot be called more than once per file.');
            }
            alreadyCalled = true;

            //Use the real variables from node
            //Use module.exports for exports, since
            //the exports in here is amdefine exports.
            e = module.exports;
            m = module;
            r = makeRequire(requireFn, e, m, module.id);
        }

        //If there are dependencies, they are strings, so need
        //to convert them to dependency values.
        if (deps) {
            deps = deps.map(function (depName) {
                return r(depName);
            });
        }

        //Call the factory with the right dependencies.
        if (typeof factory === 'function') {
            result = factory.apply(m.exports, deps);
        } else {
            result = factory;
        }

        if (result !== undefined) {
            m.exports = result;
            if (id) {
                loaderCache[id] = m.exports;
            }
        }
    }

    stringRequire = function (systemRequire, exports, module, id, relId) {
        //Split the ID by a ! so that
        var index = id.indexOf('!'),
            originalId = id,
            prefix, plugin;

        if (index === -1) {
            id = normalize(id, relId);

            //Straight module lookup. If it is one of the special dependencies,
            //deal with it, otherwise, delegate to node.
            if (id === 'require') {
                return makeRequire(systemRequire, exports, module, relId);
            } else if (id === 'exports') {
                return exports;
            } else if (id === 'module') {
                return module;
            } else if (loaderCache.hasOwnProperty(id)) {
                return loaderCache[id];
            } else if (defineCache[id]) {
                runFactory.apply(null, defineCache[id]);
                return loaderCache[id];
            } else {
                if(systemRequire) {
                    return systemRequire(originalId);
                } else {
                    throw new Error('No module with ID: ' + id);
                }
            }
        } else {
            //There is a plugin in play.
            prefix = id.substring(0, index);
            id = id.substring(index + 1, id.length);

            plugin = stringRequire(systemRequire, exports, module, prefix, relId);

            if (plugin.normalize) {
                id = plugin.normalize(id, makeNormalize(relId));
            } else {
                //Normalize the ID normally.
                id = normalize(id, relId);
            }

            if (loaderCache[id]) {
                return loaderCache[id];
            } else {
                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});

                return loaderCache[id];
            }
        }
    };

    //Create a define function specific to the module asking for amdefine.
    function define(id, deps, factory) {
        if (Array.isArray(id)) {
            factory = deps;
            deps = id;
            id = undefined;
        } else if (typeof id !== 'string') {
            factory = id;
            id = deps = undefined;
        }

        if (deps && !Array.isArray(deps)) {
            factory = deps;
            deps = undefined;
        }

        if (!deps) {
            deps = ['require', 'exports', 'module'];
        }

        //Set up properties for this module. If an ID, then use
        //internal cache. If no ID, then use the external variables
        //for this node module.
        if (id) {
            //Put the module in deep freeze until there is a
            //require call for it.
            defineCache[id] = [id, deps, factory];
        } else {
            runFactory(id, deps, factory);
        }
    }

    //define.require, which has access to all the values in the
    //cache. Useful for AMD modules that all have IDs in the file,
    //but need to finally export a value to node based on one of those
    //IDs.
    define.require = function (id) {
        if (loaderCache[id]) {
            return loaderCache[id];
        }

        if (defineCache[id]) {
            runFactory.apply(null, defineCache[id]);
            return loaderCache[id];
        }
    };

    define.amd = {};

    return define;
}

module.exports = amdefine;

}).call(this,require('_process'),"/node_modules/amdefine/amdefine.js")

},{"_process":260,"path":259}],202:[function(require,module,exports){
// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
require('../../js/transition.js')
require('../../js/alert.js')
require('../../js/button.js')
require('../../js/carousel.js')
require('../../js/collapse.js')
require('../../js/dropdown.js')
require('../../js/modal.js')
require('../../js/tooltip.js')
require('../../js/popover.js')
require('../../js/scrollspy.js')
require('../../js/tab.js')
require('../../js/affix.js')
},{"../../js/affix.js":203,"../../js/alert.js":204,"../../js/button.js":205,"../../js/carousel.js":206,"../../js/collapse.js":207,"../../js/dropdown.js":208,"../../js/modal.js":209,"../../js/popover.js":210,"../../js/scrollspy.js":211,"../../js/tab.js":212,"../../js/tooltip.js":213,"../../js/transition.js":214}],203:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: affix.js v3.3.5
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.5'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

},{}],204:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: alert.js v3.3.5
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.5'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

},{}],205:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: button.js v3.3.5
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.5'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

},{}],206:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: carousel.js v3.3.5
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.5'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

},{}],207:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: collapse.js v3.3.5
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.5'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

},{}],208:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.5
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.5'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

},{}],209:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: modal.js v3.3.5
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.5'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

},{}],210:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: popover.js v3.3.5
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.5'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

},{}],211:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.5
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.5'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

},{}],212:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tab.js v3.3.5
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.5'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

},{}],213:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.5
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.5'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

},{}],214:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: transition.js v3.3.5
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

},{}],215:[function(require,module,exports){

},{}],216:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],217:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _handlebarsRuntime = require('./handlebars.runtime');

var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

// Compiler imports

var _handlebarsCompilerAst = require('./handlebars/compiler/ast');

var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

var _handlebarsCompilerBase = require('./handlebars/compiler/base');

var _handlebarsCompilerCompiler = require('./handlebars/compiler/compiler');

var _handlebarsCompilerJavascriptCompiler = require('./handlebars/compiler/javascript-compiler');

var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

var _handlebarsCompilerVisitor = require('./handlebars/compiler/visitor');

var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

var _handlebarsNoConflict = require('./handlebars/no-conflict');

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

var _create = _handlebarsRuntime2['default'].create;
function create() {
  var hb = _create();

  hb.compile = function (input, options) {
    return _handlebarsCompilerCompiler.compile(input, options, hb);
  };
  hb.precompile = function (input, options) {
    return _handlebarsCompilerCompiler.precompile(input, options, hb);
  };

  hb.AST = _handlebarsCompilerAst2['default'];
  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
  hb.Parser = _handlebarsCompilerBase.parser;
  hb.parse = _handlebarsCompilerBase.parse;

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst.Visitor = _handlebarsCompilerVisitor2['default'];

inst['default'] = inst;

exports['default'] = inst;
module.exports = exports['default'];


},{"./handlebars.runtime":218,"./handlebars/compiler/ast":220,"./handlebars/compiler/base":221,"./handlebars/compiler/compiler":223,"./handlebars/compiler/javascript-compiler":225,"./handlebars/compiler/visitor":228,"./handlebars/no-conflict":242}],218:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _handlebarsBase = require('./handlebars/base');

var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

var _handlebarsSafeString = require('./handlebars/safe-string');

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = require('./handlebars/exception');

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = require('./handlebars/utils');

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = require('./handlebars/runtime');

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = require('./handlebars/no-conflict');

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;

exports['default'] = inst;
module.exports = exports['default'];


},{"./handlebars/base":219,"./handlebars/exception":232,"./handlebars/no-conflict":242,"./handlebars/runtime":243,"./handlebars/safe-string":244,"./handlebars/utils":245}],219:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = require('./utils');

var _exception = require('./exception');

var _exception2 = _interopRequireDefault(_exception);

var _helpers = require('./helpers');

var _decorators = require('./decorators');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var VERSION = '4.0.10';
exports.VERSION = VERSION;
var COMPILER_REVISION = 7;

exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0'
};

exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: _logger2['default'],
  log: _logger2['default'].log,

  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }
      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },

  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },

  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }
      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  }
};

var log = _logger2['default'].log;

exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];


},{"./decorators":230,"./exception":232,"./helpers":233,"./logger":241,"./utils":245}],220:[function(require,module,exports){
'use strict';

exports.__esModule = true;
var AST = {
  // Public API used to evaluate derived attributes regarding AST nodes
  helpers: {
    // a mustache is definitely a helper if:
    // * it is an eligible helper, and
    // * it has at least one parameter or hash segment
    helperExpression: function helperExpression(node) {
      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
    },

    scopedId: function scopedId(path) {
      return (/^\.|this\b/.test(path.original)
      );
    },

    // an ID is simple if it only has one part, and that part is not
    // `..` or `this`.
    simpleId: function simpleId(path) {
      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
    }
  }
};

// Must be exported as an object rather than the root of the module as the jison lexer
// must modify the object to operate properly.
exports['default'] = AST;
module.exports = exports['default'];


},{}],221:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.parse = parse;
// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

var _whitespaceControl = require('./whitespace-control');

var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

var _utils = require('../utils');

exports.parser = _parser2['default'];

var yy = {};
_utils.extend(yy, Helpers);

function parse(input, options) {
  // Just return if an already-compiled AST was passed in.
  if (input.type === 'Program') {
    return input;
  }

  _parser2['default'].yy = yy;

  // Altering the shared object here, but this is ok as parser is a sync operation
  yy.locInfo = function (locInfo) {
    return new yy.SourceLocation(options && options.srcName, locInfo);
  };

  var strip = new _whitespaceControl2['default'](options);
  return strip.accept(_parser2['default'].parse(input));
}


},{"../utils":245,"./helpers":224,"./parser":226,"./whitespace-control":229}],222:[function(require,module,exports){
/* global define */
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

var SourceNode = undefined;

try {
  /* istanbul ignore next */
  if (typeof define !== 'function' || !define.amd) {
    // We don't support this in AMD environments. For these environments, we asusme that
    // they are running on the browser and thus have no need for the source-map library.
    var SourceMap = require('source-map');
    SourceNode = SourceMap.SourceNode;
  }
} catch (err) {}
/* NOP */

/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
if (!SourceNode) {
  SourceNode = function (line, column, srcFile, chunks) {
    this.src = '';
    if (chunks) {
      this.add(chunks);
    }
  };
  /* istanbul ignore next */
  SourceNode.prototype = {
    add: function add(chunks) {
      if (_utils.isArray(chunks)) {
        chunks = chunks.join('');
      }
      this.src += chunks;
    },
    prepend: function prepend(chunks) {
      if (_utils.isArray(chunks)) {
        chunks = chunks.join('');
      }
      this.src = chunks + this.src;
    },
    toStringWithSourceMap: function toStringWithSourceMap() {
      return { code: this.toString() };
    },
    toString: function toString() {
      return this.src;
    }
  };
}

function castChunk(chunk, codeGen, loc) {
  if (_utils.isArray(chunk)) {
    var ret = [];

    for (var i = 0, len = chunk.length; i < len; i++) {
      ret.push(codeGen.wrap(chunk[i], loc));
    }
    return ret;
  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
    // Handle primitives that the SourceNode will throw up on
    return chunk + '';
  }
  return chunk;
}

function CodeGen(srcFile) {
  this.srcFile = srcFile;
  this.source = [];
}

CodeGen.prototype = {
  isEmpty: function isEmpty() {
    return !this.source.length;
  },
  prepend: function prepend(source, loc) {
    this.source.unshift(this.wrap(source, loc));
  },
  push: function push(source, loc) {
    this.source.push(this.wrap(source, loc));
  },

  merge: function merge() {
    var source = this.empty();
    this.each(function (line) {
      source.add(['  ', line, '\n']);
    });
    return source;
  },

  each: function each(iter) {
    for (var i = 0, len = this.source.length; i < len; i++) {
      iter(this.source[i]);
    }
  },

  empty: function empty() {
    var loc = this.currentLocation || { start: {} };
    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
  },
  wrap: function wrap(chunk) {
    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

    if (chunk instanceof SourceNode) {
      return chunk;
    }

    chunk = castChunk(chunk, this, loc);

    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
  },

  functionCall: function functionCall(fn, type, params) {
    params = this.generateList(params);
    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
  },

  quotedString: function quotedString(str) {
    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
    .replace(/\u2029/g, '\\u2029') + '"';
  },

  objectLiteral: function objectLiteral(obj) {
    var pairs = [];

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        var value = castChunk(obj[key], this);
        if (value !== 'undefined') {
          pairs.push([this.quotedString(key), ':', value]);
        }
      }
    }

    var ret = this.generateList(pairs);
    ret.prepend('{');
    ret.add('}');
    return ret;
  },

  generateList: function generateList(entries) {
    var ret = this.empty();

    for (var i = 0, len = entries.length; i < len; i++) {
      if (i) {
        ret.add(',');
      }

      ret.add(castChunk(entries[i], this));
    }

    return ret;
  },

  generateArray: function generateArray(entries) {
    var ret = this.generateList(entries);
    ret.prepend('[');
    ret.add(']');

    return ret;
  }
};

exports['default'] = CodeGen;
module.exports = exports['default'];


},{"../utils":245,"source-map":247}],223:[function(require,module,exports){
/* eslint-disable new-cap */

'use strict';

exports.__esModule = true;
exports.Compiler = Compiler;
exports.precompile = precompile;
exports.compile = compile;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

var _utils = require('../utils');

var _ast = require('./ast');

var _ast2 = _interopRequireDefault(_ast);

var slice = [].slice;

function Compiler() {}

// the foundHelper register will disambiguate helper lookup from finding a
// function in a context. This is necessary for mustache compatibility, which
// requires that context functions in blocks are evaluated by blockHelperMissing,
// and then proceed as if the resulting value was provided to blockHelperMissing.

Compiler.prototype = {
  compiler: Compiler,

  equals: function equals(other) {
    var len = this.opcodes.length;
    if (other.opcodes.length !== len) {
      return false;
    }

    for (var i = 0; i < len; i++) {
      var opcode = this.opcodes[i],
          otherOpcode = other.opcodes[i];
      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
        return false;
      }
    }

    // We know that length is the same between the two arrays because they are directly tied
    // to the opcode behavior above.
    len = this.children.length;
    for (var i = 0; i < len; i++) {
      if (!this.children[i].equals(other.children[i])) {
        return false;
      }
    }

    return true;
  },

  guid: 0,

  compile: function compile(program, options) {
    this.sourceNode = [];
    this.opcodes = [];
    this.children = [];
    this.options = options;
    this.stringParams = options.stringParams;
    this.trackIds = options.trackIds;

    options.blockParams = options.blockParams || [];

    // These changes will propagate to the other compiler components
    var knownHelpers = options.knownHelpers;
    options.knownHelpers = {
      'helperMissing': true,
      'blockHelperMissing': true,
      'each': true,
      'if': true,
      'unless': true,
      'with': true,
      'log': true,
      'lookup': true
    };
    if (knownHelpers) {
      for (var _name in knownHelpers) {
        /* istanbul ignore else */
        if (_name in knownHelpers) {
          this.options.knownHelpers[_name] = knownHelpers[_name];
        }
      }
    }

    return this.accept(program);
  },

  compileProgram: function compileProgram(program) {
    var childCompiler = new this.compiler(),
        // eslint-disable-line new-cap
    result = childCompiler.compile(program, this.options),
        guid = this.guid++;

    this.usePartial = this.usePartial || result.usePartial;

    this.children[guid] = result;
    this.useDepths = this.useDepths || result.useDepths;

    return guid;
  },

  accept: function accept(node) {
    /* istanbul ignore next: Sanity code */
    if (!this[node.type]) {
      throw new _exception2['default']('Unknown type: ' + node.type, node);
    }

    this.sourceNode.unshift(node);
    var ret = this[node.type](node);
    this.sourceNode.shift();
    return ret;
  },

  Program: function Program(program) {
    this.options.blockParams.unshift(program.blockParams);

    var body = program.body,
        bodyLength = body.length;
    for (var i = 0; i < bodyLength; i++) {
      this.accept(body[i]);
    }

    this.options.blockParams.shift();

    this.isSimple = bodyLength === 1;
    this.blockParams = program.blockParams ? program.blockParams.length : 0;

    return this;
  },

  BlockStatement: function BlockStatement(block) {
    transformLiteralToPath(block);

    var program = block.program,
        inverse = block.inverse;

    program = program && this.compileProgram(program);
    inverse = inverse && this.compileProgram(inverse);

    var type = this.classifySexpr(block);

    if (type === 'helper') {
      this.helperSexpr(block, program, inverse);
    } else if (type === 'simple') {
      this.simpleSexpr(block);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('blockValue', block.path.original);
    } else {
      this.ambiguousSexpr(block, program, inverse);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('ambiguousBlockValue');
    }

    this.opcode('append');
  },

  DecoratorBlock: function DecoratorBlock(decorator) {
    var program = decorator.program && this.compileProgram(decorator.program);
    var params = this.setupFullMustacheParams(decorator, program, undefined),
        path = decorator.path;

    this.useDecorators = true;
    this.opcode('registerDecorator', params.length, path.original);
  },

  PartialStatement: function PartialStatement(partial) {
    this.usePartial = true;

    var program = partial.program;
    if (program) {
      program = this.compileProgram(partial.program);
    }

    var params = partial.params;
    if (params.length > 1) {
      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
    } else if (!params.length) {
      if (this.options.explicitPartialContext) {
        this.opcode('pushLiteral', 'undefined');
      } else {
        params.push({ type: 'PathExpression', parts: [], depth: 0 });
      }
    }

    var partialName = partial.name.original,
        isDynamic = partial.name.type === 'SubExpression';
    if (isDynamic) {
      this.accept(partial.name);
    }

    this.setupFullMustacheParams(partial, program, undefined, true);

    var indent = partial.indent || '';
    if (this.options.preventIndent && indent) {
      this.opcode('appendContent', indent);
      indent = '';
    }

    this.opcode('invokePartial', isDynamic, partialName, indent);
    this.opcode('append');
  },
  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
    this.PartialStatement(partialBlock);
  },

  MustacheStatement: function MustacheStatement(mustache) {
    this.SubExpression(mustache);

    if (mustache.escaped && !this.options.noEscape) {
      this.opcode('appendEscaped');
    } else {
      this.opcode('append');
    }
  },
  Decorator: function Decorator(decorator) {
    this.DecoratorBlock(decorator);
  },

  ContentStatement: function ContentStatement(content) {
    if (content.value) {
      this.opcode('appendContent', content.value);
    }
  },

  CommentStatement: function CommentStatement() {},

  SubExpression: function SubExpression(sexpr) {
    transformLiteralToPath(sexpr);
    var type = this.classifySexpr(sexpr);

    if (type === 'simple') {
      this.simpleSexpr(sexpr);
    } else if (type === 'helper') {
      this.helperSexpr(sexpr);
    } else {
      this.ambiguousSexpr(sexpr);
    }
  },
  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
    var path = sexpr.path,
        name = path.parts[0],
        isBlock = program != null || inverse != null;

    this.opcode('getContext', path.depth);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    path.strict = true;
    this.accept(path);

    this.opcode('invokeAmbiguous', name, isBlock);
  },

  simpleSexpr: function simpleSexpr(sexpr) {
    var path = sexpr.path;
    path.strict = true;
    this.accept(path);
    this.opcode('resolvePossibleLambda');
  },

  helperSexpr: function helperSexpr(sexpr, program, inverse) {
    var params = this.setupFullMustacheParams(sexpr, program, inverse),
        path = sexpr.path,
        name = path.parts[0];

    if (this.options.knownHelpers[name]) {
      this.opcode('invokeKnownHelper', params.length, name);
    } else if (this.options.knownHelpersOnly) {
      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
    } else {
      path.strict = true;
      path.falsy = true;

      this.accept(path);
      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
    }
  },

  PathExpression: function PathExpression(path) {
    this.addDepth(path.depth);
    this.opcode('getContext', path.depth);

    var name = path.parts[0],
        scoped = _ast2['default'].helpers.scopedId(path),
        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

    if (blockParamId) {
      this.opcode('lookupBlockParam', blockParamId, path.parts);
    } else if (!name) {
      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
      this.opcode('pushContext');
    } else if (path.data) {
      this.options.data = true;
      this.opcode('lookupData', path.depth, path.parts, path.strict);
    } else {
      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
    }
  },

  StringLiteral: function StringLiteral(string) {
    this.opcode('pushString', string.value);
  },

  NumberLiteral: function NumberLiteral(number) {
    this.opcode('pushLiteral', number.value);
  },

  BooleanLiteral: function BooleanLiteral(bool) {
    this.opcode('pushLiteral', bool.value);
  },

  UndefinedLiteral: function UndefinedLiteral() {
    this.opcode('pushLiteral', 'undefined');
  },

  NullLiteral: function NullLiteral() {
    this.opcode('pushLiteral', 'null');
  },

  Hash: function Hash(hash) {
    var pairs = hash.pairs,
        i = 0,
        l = pairs.length;

    this.opcode('pushHash');

    for (; i < l; i++) {
      this.pushParam(pairs[i].value);
    }
    while (i--) {
      this.opcode('assignToHash', pairs[i].key);
    }
    this.opcode('popHash');
  },

  // HELPERS
  opcode: function opcode(name) {
    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
  },

  addDepth: function addDepth(depth) {
    if (!depth) {
      return;
    }

    this.useDepths = true;
  },

  classifySexpr: function classifySexpr(sexpr) {
    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

    // a mustache is an eligible helper if:
    // * its id is simple (a single part, not `this` or `..`)
    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

    // if a mustache is an eligible helper but not a definite
    // helper, it is ambiguous, and will be resolved in a later
    // pass or at runtime.
    var isEligible = !isBlockParam && (isHelper || isSimple);

    // if ambiguous, we can possibly resolve the ambiguity now
    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
    if (isEligible && !isHelper) {
      var _name2 = sexpr.path.parts[0],
          options = this.options;

      if (options.knownHelpers[_name2]) {
        isHelper = true;
      } else if (options.knownHelpersOnly) {
        isEligible = false;
      }
    }

    if (isHelper) {
      return 'helper';
    } else if (isEligible) {
      return 'ambiguous';
    } else {
      return 'simple';
    }
  },

  pushParams: function pushParams(params) {
    for (var i = 0, l = params.length; i < l; i++) {
      this.pushParam(params[i]);
    }
  },

  pushParam: function pushParam(val) {
    var value = val.value != null ? val.value : val.original || '';

    if (this.stringParams) {
      if (value.replace) {
        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
      }

      if (val.depth) {
        this.addDepth(val.depth);
      }
      this.opcode('getContext', val.depth || 0);
      this.opcode('pushStringParam', value, val.type);

      if (val.type === 'SubExpression') {
        // SubExpressions get evaluated and passed in
        // in string params mode.
        this.accept(val);
      }
    } else {
      if (this.trackIds) {
        var blockParamIndex = undefined;
        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
          blockParamIndex = this.blockParamIndex(val.parts[0]);
        }
        if (blockParamIndex) {
          var blockParamChild = val.parts.slice(1).join('.');
          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
        } else {
          value = val.original || value;
          if (value.replace) {
            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
          }

          this.opcode('pushId', val.type, value);
        }
      }
      this.accept(val);
    }
  },

  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
    var params = sexpr.params;
    this.pushParams(params);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    if (sexpr.hash) {
      this.accept(sexpr.hash);
    } else {
      this.opcode('emptyHash', omitEmpty);
    }

    return params;
  },

  blockParamIndex: function blockParamIndex(name) {
    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
      var blockParams = this.options.blockParams[depth],
          param = blockParams && _utils.indexOf(blockParams, name);
      if (blockParams && param >= 0) {
        return [depth, param];
      }
    }
  }
};

function precompile(input, options, env) {
  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }

  var ast = env.parse(input, options),
      environment = new env.Compiler().compile(ast, options);
  return new env.JavaScriptCompiler().compile(environment, options);
}

function compile(input, options, env) {
  if (options === undefined) options = {};

  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
  }

  options = _utils.extend({}, options);
  if (!('data' in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }

  var compiled = undefined;

  function compileInput() {
    var ast = env.parse(input, options),
        environment = new env.Compiler().compile(ast, options),
        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
    return env.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  function ret(context, execOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled.call(this, context, execOptions);
  }
  ret._setup = function (setupOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._setup(setupOptions);
  };
  ret._child = function (i, data, blockParams, depths) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._child(i, data, blockParams, depths);
  };
  return ret;
}

function argEquals(a, b) {
  if (a === b) {
    return true;
  }

  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
    for (var i = 0; i < a.length; i++) {
      if (!argEquals(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
}

function transformLiteralToPath(sexpr) {
  if (!sexpr.path.parts) {
    var literal = sexpr.path;
    // Casting to string here to make false and 0 literal values play nicely with the rest
    // of the system.
    sexpr.path = {
      type: 'PathExpression',
      data: false,
      depth: 0,
      parts: [literal.original + ''],
      original: literal.original + '',
      loc: literal.loc
    };
  }
}


},{"../exception":232,"../utils":245,"./ast":220}],224:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.SourceLocation = SourceLocation;
exports.id = id;
exports.stripFlags = stripFlags;
exports.stripComment = stripComment;
exports.preparePath = preparePath;
exports.prepareMustache = prepareMustache;
exports.prepareRawBlock = prepareRawBlock;
exports.prepareBlock = prepareBlock;
exports.prepareProgram = prepareProgram;
exports.preparePartialBlock = preparePartialBlock;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

function validateClose(open, close) {
  close = close.path ? close.path.original : close;

  if (open.path.original !== close) {
    var errorNode = { loc: open.path.loc };

    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
  }
}

function SourceLocation(source, locInfo) {
  this.source = source;
  this.start = {
    line: locInfo.first_line,
    column: locInfo.first_column
  };
  this.end = {
    line: locInfo.last_line,
    column: locInfo.last_column
  };
}

function id(token) {
  if (/^\[.*\]$/.test(token)) {
    return token.substr(1, token.length - 2);
  } else {
    return token;
  }
}

function stripFlags(open, close) {
  return {
    open: open.charAt(2) === '~',
    close: close.charAt(close.length - 3) === '~'
  };
}

function stripComment(comment) {
  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
}

function preparePath(data, parts, loc) {
  loc = this.locInfo(loc);

  var original = data ? '@' : '',
      dig = [],
      depth = 0,
      depthString = '';

  for (var i = 0, l = parts.length; i < l; i++) {
    var part = parts[i].part,

    // If we have [] syntax then we do not treat path references as operators,
    // i.e. foo.[this] resolves to approximately context.foo['this']
    isLiteral = parts[i].original !== part;
    original += (parts[i].separator || '') + part;

    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
      if (dig.length > 0) {
        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
      } else if (part === '..') {
        depth++;
        depthString += '../';
      }
    } else {
      dig.push(part);
    }
  }

  return {
    type: 'PathExpression',
    data: data,
    depth: depth,
    parts: dig,
    original: original,
    loc: loc
  };
}

function prepareMustache(path, params, hash, open, strip, locInfo) {
  // Must use charAt to support IE pre-10
  var escapeFlag = open.charAt(3) || open.charAt(2),
      escaped = escapeFlag !== '{' && escapeFlag !== '&';

  var decorator = /\*/.test(open);
  return {
    type: decorator ? 'Decorator' : 'MustacheStatement',
    path: path,
    params: params,
    hash: hash,
    escaped: escaped,
    strip: strip,
    loc: this.locInfo(locInfo)
  };
}

function prepareRawBlock(openRawBlock, contents, close, locInfo) {
  validateClose(openRawBlock, close);

  locInfo = this.locInfo(locInfo);
  var program = {
    type: 'Program',
    body: contents,
    strip: {},
    loc: locInfo
  };

  return {
    type: 'BlockStatement',
    path: openRawBlock.path,
    params: openRawBlock.params,
    hash: openRawBlock.hash,
    program: program,
    openStrip: {},
    inverseStrip: {},
    closeStrip: {},
    loc: locInfo
  };
}

function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
  if (close && close.path) {
    validateClose(openBlock, close);
  }

  var decorator = /\*/.test(openBlock.open);

  program.blockParams = openBlock.blockParams;

  var inverse = undefined,
      inverseStrip = undefined;

  if (inverseAndProgram) {
    if (decorator) {
      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
    }

    if (inverseAndProgram.chain) {
      inverseAndProgram.program.body[0].closeStrip = close.strip;
    }

    inverseStrip = inverseAndProgram.strip;
    inverse = inverseAndProgram.program;
  }

  if (inverted) {
    inverted = inverse;
    inverse = program;
    program = inverted;
  }

  return {
    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
    path: openBlock.path,
    params: openBlock.params,
    hash: openBlock.hash,
    program: program,
    inverse: inverse,
    openStrip: openBlock.strip,
    inverseStrip: inverseStrip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}

function prepareProgram(statements, loc) {
  if (!loc && statements.length) {
    var firstLoc = statements[0].loc,
        lastLoc = statements[statements.length - 1].loc;

    /* istanbul ignore else */
    if (firstLoc && lastLoc) {
      loc = {
        source: firstLoc.source,
        start: {
          line: firstLoc.start.line,
          column: firstLoc.start.column
        },
        end: {
          line: lastLoc.end.line,
          column: lastLoc.end.column
        }
      };
    }
  }

  return {
    type: 'Program',
    body: statements,
    strip: {},
    loc: loc
  };
}

function preparePartialBlock(open, program, close, locInfo) {
  validateClose(open, close);

  return {
    type: 'PartialBlockStatement',
    name: open.path,
    params: open.params,
    hash: open.hash,
    program: program,
    openStrip: open.strip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}


},{"../exception":232}],225:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _base = require('../base');

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

var _utils = require('../utils');

var _codeGen = require('./code-gen');

var _codeGen2 = _interopRequireDefault(_codeGen);

function Literal(value) {
  this.value = value;
}

function JavaScriptCompiler() {}

JavaScriptCompiler.prototype = {
  // PUBLIC API: You can override these methods in a subclass to provide
  // alternative compiled forms for name lookup and buffering semantics
  nameLookup: function nameLookup(parent, name /* , type*/) {
    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
      return [parent, '.', name];
    } else {
      return [parent, '[', JSON.stringify(name), ']'];
    }
  },
  depthedLookup: function depthedLookup(name) {
    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
  },

  compilerInfo: function compilerInfo() {
    var revision = _base.COMPILER_REVISION,
        versions = _base.REVISION_CHANGES[revision];
    return [revision, versions];
  },

  appendToBuffer: function appendToBuffer(source, location, explicit) {
    // Force a source as this simplifies the merge logic.
    if (!_utils.isArray(source)) {
      source = [source];
    }
    source = this.source.wrap(source, location);

    if (this.environment.isSimple) {
      return ['return ', source, ';'];
    } else if (explicit) {
      // This is a case where the buffer operation occurs as a child of another
      // construct, generally braces. We have to explicitly output these buffer
      // operations to ensure that the emitted code goes in the correct location.
      return ['buffer += ', source, ';'];
    } else {
      source.appendToBuffer = true;
      return source;
    }
  },

  initializeBuffer: function initializeBuffer() {
    return this.quotedString('');
  },
  // END PUBLIC API

  compile: function compile(environment, options, context, asObject) {
    this.environment = environment;
    this.options = options;
    this.stringParams = this.options.stringParams;
    this.trackIds = this.options.trackIds;
    this.precompile = !asObject;

    this.name = this.environment.name;
    this.isChild = !!context;
    this.context = context || {
      decorators: [],
      programs: [],
      environments: []
    };

    this.preamble();

    this.stackSlot = 0;
    this.stackVars = [];
    this.aliases = {};
    this.registers = { list: [] };
    this.hashes = [];
    this.compileStack = [];
    this.inlineStack = [];
    this.blockParams = [];

    this.compileChildren(environment, options);

    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

    var opcodes = environment.opcodes,
        opcode = undefined,
        firstLoc = undefined,
        i = undefined,
        l = undefined;

    for (i = 0, l = opcodes.length; i < l; i++) {
      opcode = opcodes[i];

      this.source.currentLocation = opcode.loc;
      firstLoc = firstLoc || opcode.loc;
      this[opcode.opcode].apply(this, opcode.args);
    }

    // Flush any trailing content that might be pending.
    this.source.currentLocation = firstLoc;
    this.pushSource('');

    /* istanbul ignore next */
    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
      throw new _exception2['default']('Compile completed with content left on stack');
    }

    if (!this.decorators.isEmpty()) {
      this.useDecorators = true;

      this.decorators.prepend('var decorators = container.decorators;\n');
      this.decorators.push('return fn;');

      if (asObject) {
        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
      } else {
        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
        this.decorators.push('}\n');
        this.decorators = this.decorators.merge();
      }
    } else {
      this.decorators = undefined;
    }

    var fn = this.createFunctionContext(asObject);
    if (!this.isChild) {
      var ret = {
        compiler: this.compilerInfo(),
        main: fn
      };

      if (this.decorators) {
        ret.main_d = this.decorators; // eslint-disable-line camelcase
        ret.useDecorators = true;
      }

      var _context = this.context;
      var programs = _context.programs;
      var decorators = _context.decorators;

      for (i = 0, l = programs.length; i < l; i++) {
        if (programs[i]) {
          ret[i] = programs[i];
          if (decorators[i]) {
            ret[i + '_d'] = decorators[i];
            ret.useDecorators = true;
          }
        }
      }

      if (this.environment.usePartial) {
        ret.usePartial = true;
      }
      if (this.options.data) {
        ret.useData = true;
      }
      if (this.useDepths) {
        ret.useDepths = true;
      }
      if (this.useBlockParams) {
        ret.useBlockParams = true;
      }
      if (this.options.compat) {
        ret.compat = true;
      }

      if (!asObject) {
        ret.compiler = JSON.stringify(ret.compiler);

        this.source.currentLocation = { start: { line: 1, column: 0 } };
        ret = this.objectLiteral(ret);

        if (options.srcName) {
          ret = ret.toStringWithSourceMap({ file: options.destName });
          ret.map = ret.map && ret.map.toString();
        } else {
          ret = ret.toString();
        }
      } else {
        ret.compilerOptions = this.options;
      }

      return ret;
    } else {
      return fn;
    }
  },

  preamble: function preamble() {
    // track the last context pushed into place to allow skipping the
    // getContext opcode when it would be a noop
    this.lastContext = 0;
    this.source = new _codeGen2['default'](this.options.srcName);
    this.decorators = new _codeGen2['default'](this.options.srcName);
  },

  createFunctionContext: function createFunctionContext(asObject) {
    var varDeclarations = '';

    var locals = this.stackVars.concat(this.registers.list);
    if (locals.length > 0) {
      varDeclarations += ', ' + locals.join(', ');
    }

    // Generate minimizer alias mappings
    //
    // When using true SourceNodes, this will update all references to the given alias
    // as the source nodes are reused in situ. For the non-source node compilation mode,
    // aliases will not be used, but this case is already being run on the client and
    // we aren't concern about minimizing the template size.
    var aliasCount = 0;
    for (var alias in this.aliases) {
      // eslint-disable-line guard-for-in
      var node = this.aliases[alias];

      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
        node.children[0] = 'alias' + aliasCount;
      }
    }

    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

    if (this.useBlockParams || this.useDepths) {
      params.push('blockParams');
    }
    if (this.useDepths) {
      params.push('depths');
    }

    // Perform a second pass over the output to merge content when possible
    var source = this.mergeSource(varDeclarations);

    if (asObject) {
      params.push(source);

      return Function.apply(this, params);
    } else {
      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
    }
  },
  mergeSource: function mergeSource(varDeclarations) {
    var isSimple = this.environment.isSimple,
        appendOnly = !this.forceBuffer,
        appendFirst = undefined,
        sourceSeen = undefined,
        bufferStart = undefined,
        bufferEnd = undefined;
    this.source.each(function (line) {
      if (line.appendToBuffer) {
        if (bufferStart) {
          line.prepend('  + ');
        } else {
          bufferStart = line;
        }
        bufferEnd = line;
      } else {
        if (bufferStart) {
          if (!sourceSeen) {
            appendFirst = true;
          } else {
            bufferStart.prepend('buffer += ');
          }
          bufferEnd.add(';');
          bufferStart = bufferEnd = undefined;
        }

        sourceSeen = true;
        if (!isSimple) {
          appendOnly = false;
        }
      }
    });

    if (appendOnly) {
      if (bufferStart) {
        bufferStart.prepend('return ');
        bufferEnd.add(';');
      } else if (!sourceSeen) {
        this.source.push('return "";');
      }
    } else {
      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

      if (bufferStart) {
        bufferStart.prepend('return buffer + ');
        bufferEnd.add(';');
      } else {
        this.source.push('return buffer;');
      }
    }

    if (varDeclarations) {
      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
    }

    return this.source.merge();
  },

  // [blockValue]
  //
  // On stack, before: hash, inverse, program, value
  // On stack, after: return value of blockHelperMissing
  //
  // The purpose of this opcode is to take a block of the form
  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
  // replace it on the stack with the result of properly
  // invoking blockHelperMissing.
  blockValue: function blockValue(name) {
    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
        params = [this.contextName(0)];
    this.setupHelperArgs(name, 0, params);

    var blockName = this.popStack();
    params.splice(1, 0, blockName);

    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
  },

  // [ambiguousBlockValue]
  //
  // On stack, before: hash, inverse, program, value
  // Compiler value, before: lastHelper=value of last found helper, if any
  // On stack, after, if no lastHelper: same as [blockValue]
  // On stack, after, if lastHelper: value
  ambiguousBlockValue: function ambiguousBlockValue() {
    // We're being a bit cheeky and reusing the options value from the prior exec
    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
        params = [this.contextName(0)];
    this.setupHelperArgs('', 0, params, true);

    this.flushInline();

    var current = this.topStack();
    params.splice(1, 0, current);

    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
  },

  // [appendContent]
  //
  // On stack, before: ...
  // On stack, after: ...
  //
  // Appends the string value of `content` to the current buffer
  appendContent: function appendContent(content) {
    if (this.pendingContent) {
      content = this.pendingContent + content;
    } else {
      this.pendingLocation = this.source.currentLocation;
    }

    this.pendingContent = content;
  },

  // [append]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Coerces `value` to a String and appends it to the current buffer.
  //
  // If `value` is truthy, or 0, it is coerced into a string and appended
  // Otherwise, the empty string is appended
  append: function append() {
    if (this.isInline()) {
      this.replaceStack(function (current) {
        return [' != null ? ', current, ' : ""'];
      });

      this.pushSource(this.appendToBuffer(this.popStack()));
    } else {
      var local = this.popStack();
      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
      if (this.environment.isSimple) {
        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
      }
    }
  },

  // [appendEscaped]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Escape `value` and append it to the buffer
  appendEscaped: function appendEscaped() {
    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
  },

  // [getContext]
  //
  // On stack, before: ...
  // On stack, after: ...
  // Compiler value, after: lastContext=depth
  //
  // Set the value of the `lastContext` compiler value to the depth
  getContext: function getContext(depth) {
    this.lastContext = depth;
  },

  // [pushContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext, ...
  //
  // Pushes the value of the current context onto the stack.
  pushContext: function pushContext() {
    this.pushStackLiteral(this.contextName(this.lastContext));
  },

  // [lookupOnContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext[name], ...
  //
  // Looks up the value of `name` on the current context and pushes
  // it onto the stack.
  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
    var i = 0;

    if (!scoped && this.options.compat && !this.lastContext) {
      // The depthed query is expected to handle the undefined logic for the root level that
      // is implemented below, so we evaluate that directly in compat mode
      this.push(this.depthedLookup(parts[i++]));
    } else {
      this.pushContext();
    }

    this.resolvePath('context', parts, i, falsy, strict);
  },

  // [lookupBlockParam]
  //
  // On stack, before: ...
  // On stack, after: blockParam[name], ...
  //
  // Looks up the value of `parts` on the given block param and pushes
  // it onto the stack.
  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
    this.useBlockParams = true;

    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
    this.resolvePath('context', parts, 1);
  },

  // [lookupData]
  //
  // On stack, before: ...
  // On stack, after: data, ...
  //
  // Push the data lookup operator
  lookupData: function lookupData(depth, parts, strict) {
    if (!depth) {
      this.pushStackLiteral('data');
    } else {
      this.pushStackLiteral('container.data(data, ' + depth + ')');
    }

    this.resolvePath('data', parts, 0, true, strict);
  },

  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
    // istanbul ignore next

    var _this = this;

    if (this.options.strict || this.options.assumeObjects) {
      this.push(strictLookup(this.options.strict && strict, this, parts, type));
      return;
    }

    var len = parts.length;
    for (; i < len; i++) {
      /* eslint-disable no-loop-func */
      this.replaceStack(function (current) {
        var lookup = _this.nameLookup(current, parts[i], type);
        // We want to ensure that zero and false are handled properly if the context (falsy flag)
        // needs to have the special handling for these values.
        if (!falsy) {
          return [' != null ? ', lookup, ' : ', current];
        } else {
          // Otherwise we can use generic falsy handling
          return [' && ', lookup];
        }
      });
      /* eslint-enable no-loop-func */
    }
  },

  // [resolvePossibleLambda]
  //
  // On stack, before: value, ...
  // On stack, after: resolved value, ...
  //
  // If the `value` is a lambda, replace it on the stack by
  // the return value of the lambda
  resolvePossibleLambda: function resolvePossibleLambda() {
    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
  },

  // [pushStringParam]
  //
  // On stack, before: ...
  // On stack, after: string, currentContext, ...
  //
  // This opcode is designed for use in string mode, which
  // provides the string value of a parameter along with its
  // depth rather than resolving it immediately.
  pushStringParam: function pushStringParam(string, type) {
    this.pushContext();
    this.pushString(type);

    // If it's a subexpression, the string result
    // will be pushed after this opcode.
    if (type !== 'SubExpression') {
      if (typeof string === 'string') {
        this.pushString(string);
      } else {
        this.pushStackLiteral(string);
      }
    }
  },

  emptyHash: function emptyHash(omitEmpty) {
    if (this.trackIds) {
      this.push('{}'); // hashIds
    }
    if (this.stringParams) {
      this.push('{}'); // hashContexts
      this.push('{}'); // hashTypes
    }
    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
  },
  pushHash: function pushHash() {
    if (this.hash) {
      this.hashes.push(this.hash);
    }
    this.hash = { values: [], types: [], contexts: [], ids: [] };
  },
  popHash: function popHash() {
    var hash = this.hash;
    this.hash = this.hashes.pop();

    if (this.trackIds) {
      this.push(this.objectLiteral(hash.ids));
    }
    if (this.stringParams) {
      this.push(this.objectLiteral(hash.contexts));
      this.push(this.objectLiteral(hash.types));
    }

    this.push(this.objectLiteral(hash.values));
  },

  // [pushString]
  //
  // On stack, before: ...
  // On stack, after: quotedString(string), ...
  //
  // Push a quoted version of `string` onto the stack
  pushString: function pushString(string) {
    this.pushStackLiteral(this.quotedString(string));
  },

  // [pushLiteral]
  //
  // On stack, before: ...
  // On stack, after: value, ...
  //
  // Pushes a value onto the stack. This operation prevents
  // the compiler from creating a temporary variable to hold
  // it.
  pushLiteral: function pushLiteral(value) {
    this.pushStackLiteral(value);
  },

  // [pushProgram]
  //
  // On stack, before: ...
  // On stack, after: program(guid), ...
  //
  // Push a program expression onto the stack. This takes
  // a compile-time guid and converts it into a runtime-accessible
  // expression.
  pushProgram: function pushProgram(guid) {
    if (guid != null) {
      this.pushStackLiteral(this.programExpression(guid));
    } else {
      this.pushStackLiteral(null);
    }
  },

  // [registerDecorator]
  //
  // On stack, before: hash, program, params..., ...
  // On stack, after: ...
  //
  // Pops off the decorator's parameters, invokes the decorator,
  // and inserts the decorator into the decorators list.
  registerDecorator: function registerDecorator(paramSize, name) {
    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
        options = this.setupHelperArgs(name, paramSize);

    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
  },

  // [invokeHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // Pops off the helper's parameters, invokes the helper,
  // and pushes the helper's return value onto the stack.
  //
  // If the helper is not found, `helperMissing` is called.
  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
    var nonHelper = this.popStack(),
        helper = this.setupHelper(paramSize, name),
        simple = isSimple ? [helper.name, ' || '] : '';

    var lookup = ['('].concat(simple, nonHelper);
    if (!this.options.strict) {
      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
    }
    lookup.push(')');

    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
  },

  // [invokeKnownHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // This operation is used when the helper is known to exist,
  // so a `helperMissing` fallback is not required.
  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
    var helper = this.setupHelper(paramSize, name);
    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
  },

  // [invokeAmbiguous]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of disambiguation
  //
  // This operation is used when an expression like `{{foo}}`
  // is provided, but we don't know at compile-time whether it
  // is a helper or a path.
  //
  // This operation emits more code than the other options,
  // and can be avoided by passing the `knownHelpers` and
  // `knownHelpersOnly` flags at compile-time.
  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
    this.useRegister('helper');

    var nonHelper = this.popStack();

    this.emptyHash();
    var helper = this.setupHelper(0, name, helperCall);

    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
    if (!this.options.strict) {
      lookup[0] = '(helper = ';
      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
    }

    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
  },

  // [invokePartial]
  //
  // On stack, before: context, ...
  // On stack after: result of partial invocation
  //
  // This operation pops off a context, invokes a partial with that context,
  // and pushes the result of the invocation back.
  invokePartial: function invokePartial(isDynamic, name, indent) {
    var params = [],
        options = this.setupParams(name, 1, params);

    if (isDynamic) {
      name = this.popStack();
      delete options.name;
    }

    if (indent) {
      options.indent = JSON.stringify(indent);
    }
    options.helpers = 'helpers';
    options.partials = 'partials';
    options.decorators = 'container.decorators';

    if (!isDynamic) {
      params.unshift(this.nameLookup('partials', name, 'partial'));
    } else {
      params.unshift(name);
    }

    if (this.options.compat) {
      options.depths = 'depths';
    }
    options = this.objectLiteral(options);
    params.push(options);

    this.push(this.source.functionCall('container.invokePartial', '', params));
  },

  // [assignToHash]
  //
  // On stack, before: value, ..., hash, ...
  // On stack, after: ..., hash, ...
  //
  // Pops a value off the stack and assigns it to the current hash
  assignToHash: function assignToHash(key) {
    var value = this.popStack(),
        context = undefined,
        type = undefined,
        id = undefined;

    if (this.trackIds) {
      id = this.popStack();
    }
    if (this.stringParams) {
      type = this.popStack();
      context = this.popStack();
    }

    var hash = this.hash;
    if (context) {
      hash.contexts[key] = context;
    }
    if (type) {
      hash.types[key] = type;
    }
    if (id) {
      hash.ids[key] = id;
    }
    hash.values[key] = value;
  },

  pushId: function pushId(type, name, child) {
    if (type === 'BlockParam') {
      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
    } else if (type === 'PathExpression') {
      this.pushString(name);
    } else if (type === 'SubExpression') {
      this.pushStackLiteral('true');
    } else {
      this.pushStackLiteral('null');
    }
  },

  // HELPERS

  compiler: JavaScriptCompiler,

  compileChildren: function compileChildren(environment, options) {
    var children = environment.children,
        child = undefined,
        compiler = undefined;

    for (var i = 0, l = children.length; i < l; i++) {
      child = children[i];
      compiler = new this.compiler(); // eslint-disable-line new-cap

      var existing = this.matchExistingProgram(child);

      if (existing == null) {
        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
        var index = this.context.programs.length;
        child.index = index;
        child.name = 'program' + index;
        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
        this.context.decorators[index] = compiler.decorators;
        this.context.environments[index] = child;

        this.useDepths = this.useDepths || compiler.useDepths;
        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
        child.useDepths = this.useDepths;
        child.useBlockParams = this.useBlockParams;
      } else {
        child.index = existing.index;
        child.name = 'program' + existing.index;

        this.useDepths = this.useDepths || existing.useDepths;
        this.useBlockParams = this.useBlockParams || existing.useBlockParams;
      }
    }
  },
  matchExistingProgram: function matchExistingProgram(child) {
    for (var i = 0, len = this.context.environments.length; i < len; i++) {
      var environment = this.context.environments[i];
      if (environment && environment.equals(child)) {
        return environment;
      }
    }
  },

  programExpression: function programExpression(guid) {
    var child = this.environment.children[guid],
        programParams = [child.index, 'data', child.blockParams];

    if (this.useBlockParams || this.useDepths) {
      programParams.push('blockParams');
    }
    if (this.useDepths) {
      programParams.push('depths');
    }

    return 'container.program(' + programParams.join(', ') + ')';
  },

  useRegister: function useRegister(name) {
    if (!this.registers[name]) {
      this.registers[name] = true;
      this.registers.list.push(name);
    }
  },

  push: function push(expr) {
    if (!(expr instanceof Literal)) {
      expr = this.source.wrap(expr);
    }

    this.inlineStack.push(expr);
    return expr;
  },

  pushStackLiteral: function pushStackLiteral(item) {
    this.push(new Literal(item));
  },

  pushSource: function pushSource(source) {
    if (this.pendingContent) {
      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
      this.pendingContent = undefined;
    }

    if (source) {
      this.source.push(source);
    }
  },

  replaceStack: function replaceStack(callback) {
    var prefix = ['('],
        stack = undefined,
        createdStack = undefined,
        usedLiteral = undefined;

    /* istanbul ignore next */
    if (!this.isInline()) {
      throw new _exception2['default']('replaceStack on non-inline');
    }

    // We want to merge the inline statement into the replacement statement via ','
    var top = this.popStack(true);

    if (top instanceof Literal) {
      // Literals do not need to be inlined
      stack = [top.value];
      prefix = ['(', stack];
      usedLiteral = true;
    } else {
      // Get or create the current stack name for use by the inline
      createdStack = true;
      var _name = this.incrStack();

      prefix = ['((', this.push(_name), ' = ', top, ')'];
      stack = this.topStack();
    }

    var item = callback.call(this, stack);

    if (!usedLiteral) {
      this.popStack();
    }
    if (createdStack) {
      this.stackSlot--;
    }
    this.push(prefix.concat(item, ')'));
  },

  incrStack: function incrStack() {
    this.stackSlot++;
    if (this.stackSlot > this.stackVars.length) {
      this.stackVars.push('stack' + this.stackSlot);
    }
    return this.topStackName();
  },
  topStackName: function topStackName() {
    return 'stack' + this.stackSlot;
  },
  flushInline: function flushInline() {
    var inlineStack = this.inlineStack;
    this.inlineStack = [];
    for (var i = 0, len = inlineStack.length; i < len; i++) {
      var entry = inlineStack[i];
      /* istanbul ignore if */
      if (entry instanceof Literal) {
        this.compileStack.push(entry);
      } else {
        var stack = this.incrStack();
        this.pushSource([stack, ' = ', entry, ';']);
        this.compileStack.push(stack);
      }
    }
  },
  isInline: function isInline() {
    return this.inlineStack.length;
  },

  popStack: function popStack(wrapped) {
    var inline = this.isInline(),
        item = (inline ? this.inlineStack : this.compileStack).pop();

    if (!wrapped && item instanceof Literal) {
      return item.value;
    } else {
      if (!inline) {
        /* istanbul ignore next */
        if (!this.stackSlot) {
          throw new _exception2['default']('Invalid stack pop');
        }
        this.stackSlot--;
      }
      return item;
    }
  },

  topStack: function topStack() {
    var stack = this.isInline() ? this.inlineStack : this.compileStack,
        item = stack[stack.length - 1];

    /* istanbul ignore if */
    if (item instanceof Literal) {
      return item.value;
    } else {
      return item;
    }
  },

  contextName: function contextName(context) {
    if (this.useDepths && context) {
      return 'depths[' + context + ']';
    } else {
      return 'depth' + context;
    }
  },

  quotedString: function quotedString(str) {
    return this.source.quotedString(str);
  },

  objectLiteral: function objectLiteral(obj) {
    return this.source.objectLiteral(obj);
  },

  aliasable: function aliasable(name) {
    var ret = this.aliases[name];
    if (ret) {
      ret.referenceCount++;
      return ret;
    }

    ret = this.aliases[name] = this.source.wrap(name);
    ret.aliasable = true;
    ret.referenceCount = 1;

    return ret;
  },

  setupHelper: function setupHelper(paramSize, name, blockHelper) {
    var params = [],
        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
    var foundHelper = this.nameLookup('helpers', name, 'helper'),
        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : (container.nullContext || {})');

    return {
      params: params,
      paramsInit: paramsInit,
      name: foundHelper,
      callParams: [callContext].concat(params)
    };
  },

  setupParams: function setupParams(helper, paramSize, params) {
    var options = {},
        contexts = [],
        types = [],
        ids = [],
        objectArgs = !params,
        param = undefined;

    if (objectArgs) {
      params = [];
    }

    options.name = this.quotedString(helper);
    options.hash = this.popStack();

    if (this.trackIds) {
      options.hashIds = this.popStack();
    }
    if (this.stringParams) {
      options.hashTypes = this.popStack();
      options.hashContexts = this.popStack();
    }

    var inverse = this.popStack(),
        program = this.popStack();

    // Avoid setting fn and inverse if neither are set. This allows
    // helpers to do a check for `if (options.fn)`
    if (program || inverse) {
      options.fn = program || 'container.noop';
      options.inverse = inverse || 'container.noop';
    }

    // The parameters go on to the stack in order (making sure that they are evaluated in order)
    // so we need to pop them off the stack in reverse order
    var i = paramSize;
    while (i--) {
      param = this.popStack();
      params[i] = param;

      if (this.trackIds) {
        ids[i] = this.popStack();
      }
      if (this.stringParams) {
        types[i] = this.popStack();
        contexts[i] = this.popStack();
      }
    }

    if (objectArgs) {
      options.args = this.source.generateArray(params);
    }

    if (this.trackIds) {
      options.ids = this.source.generateArray(ids);
    }
    if (this.stringParams) {
      options.types = this.source.generateArray(types);
      options.contexts = this.source.generateArray(contexts);
    }

    if (this.options.data) {
      options.data = 'data';
    }
    if (this.useBlockParams) {
      options.blockParams = 'blockParams';
    }
    return options;
  },

  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
    var options = this.setupParams(helper, paramSize, params);
    options = this.objectLiteral(options);
    if (useRegister) {
      this.useRegister('options');
      params.push('options');
      return ['options=', options];
    } else if (params) {
      params.push(options);
      return '';
    } else {
      return options;
    }
  }
};

(function () {
  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for (var i = 0, l = reservedWords.length; i < l; i++) {
    compilerWords[reservedWords[i]] = true;
  }
})();

JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
};

function strictLookup(requireTerminal, compiler, parts, type) {
  var stack = compiler.popStack(),
      i = 0,
      len = parts.length;
  if (requireTerminal) {
    len--;
  }

  for (; i < len; i++) {
    stack = compiler.nameLookup(stack, parts[i], type);
  }

  if (requireTerminal) {
    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
  } else {
    return stack;
  }
}

exports['default'] = JavaScriptCompiler;
module.exports = exports['default'];


},{"../base":219,"../exception":232,"../utils":245,"./code-gen":222}],226:[function(require,module,exports){
// File ignored in coverage tests via setting in .istanbul.yml
/* Jison generated parser */
"use strict";

exports.__esModule = true;
var handlebars = (function () {
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
        /**/) {

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0 - 1];
                    break;
                case 2:
                    this.$ = yy.prepareProgram($$[$0]);
                    break;
                case 3:
                    this.$ = $$[$0];
                    break;
                case 4:
                    this.$ = $$[$0];
                    break;
                case 5:
                    this.$ = $$[$0];
                    break;
                case 6:
                    this.$ = $$[$0];
                    break;
                case 7:
                    this.$ = $$[$0];
                    break;
                case 8:
                    this.$ = $$[$0];
                    break;
                case 9:
                    this.$ = {
                        type: 'CommentStatement',
                        value: yy.stripComment($$[$0]),
                        strip: yy.stripFlags($$[$0], $$[$0]),
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 10:
                    this.$ = {
                        type: 'ContentStatement',
                        original: $$[$0],
                        value: $$[$0],
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 11:
                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 12:
                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
                    break;
                case 13:
                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
                    break;
                case 14:
                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
                    break;
                case 15:
                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 16:
                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 17:
                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 18:
                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
                    break;
                case 19:
                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
                    program.chained = true;

                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

                    break;
                case 20:
                    this.$ = $$[$0];
                    break;
                case 21:
                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
                    break;
                case 22:
                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                    break;
                case 23:
                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                    break;
                case 24:
                    this.$ = {
                        type: 'PartialStatement',
                        name: $$[$0 - 3],
                        params: $$[$0 - 2],
                        hash: $$[$0 - 1],
                        indent: '',
                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 25:
                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 26:
                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
                    break;
                case 27:
                    this.$ = $$[$0];
                    break;
                case 28:
                    this.$ = $$[$0];
                    break;
                case 29:
                    this.$ = {
                        type: 'SubExpression',
                        path: $$[$0 - 3],
                        params: $$[$0 - 2],
                        hash: $$[$0 - 1],
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 30:
                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 31:
                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 32:
                    this.$ = yy.id($$[$0 - 1]);
                    break;
                case 33:
                    this.$ = $$[$0];
                    break;
                case 34:
                    this.$ = $$[$0];
                    break;
                case 35:
                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 36:
                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
                    break;
                case 37:
                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
                    break;
                case 38:
                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
                    break;
                case 39:
                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
                    break;
                case 40:
                    this.$ = $$[$0];
                    break;
                case 41:
                    this.$ = $$[$0];
                    break;
                case 42:
                    this.$ = yy.preparePath(true, $$[$0], this._$);
                    break;
                case 43:
                    this.$ = yy.preparePath(false, $$[$0], this._$);
                    break;
                case 44:
                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
                    break;
                case 45:
                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
                    break;
                case 46:
                    this.$ = [];
                    break;
                case 47:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 48:
                    this.$ = [$$[$0]];
                    break;
                case 49:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 50:
                    this.$ = [];
                    break;
                case 51:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 58:
                    this.$ = [];
                    break;
                case 59:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 64:
                    this.$ = [];
                    break;
                case 65:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 70:
                    this.$ = [];
                    break;
                case 71:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 78:
                    this.$ = [];
                    break;
                case 79:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 82:
                    this.$ = [];
                    break;
                case 83:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 86:
                    this.$ = [];
                    break;
                case 87:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 90:
                    this.$ = [];
                    break;
                case 91:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 94:
                    this.$ = [];
                    break;
                case 95:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 98:
                    this.$ = [$$[$0]];
                    break;
                case 99:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 100:
                    this.$ = [$$[$0]];
                    break;
                case 101:
                    $$[$0 - 1].push($$[$0]);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
        parseError: function parseError(str, hash) {
            throw new Error(str);
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = "",
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || 1;
                if (typeof token !== "number") {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == "undefined") {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === "undefined" || !action.length || !action[0]) {
                    var errStr = "";
                    if (!recovering) {
                        expected = [];
                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
                            expected.push("'" + this.terminals_[p] + "'");
                        }
                        if (this.lexer.showPosition) {
                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        } else {
                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                        }
                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
                    }
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) recovering--;
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                        if (typeof r !== "undefined") {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };
    /* Jison generated lexer */
    var lexer = (function () {
        var lexer = { EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },
            setInput: function setInput(input) {
                this._input = input;
                this._more = this._less = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
                if (this.options.ranges) this.yylloc.range = [0, 0];
                this.offset = 0;
                return this;
            },
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) this.yylloc.range[1]++;

                this._input = this._input.slice(1);
                return ch;
            },
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) this.yylineno -= lines.length - 1;
                var r = this.yylloc.range;

                this.yylloc = { first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                return this;
            },
            more: function more() {
                this._more = true;
                return this;
            },
            less: function less(n) {
                this.unput(this.match.slice(n));
            },
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) this.done = true;

                var token, match, tempMatch, index, col, lines;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (!this.options.flex) break;
                    }
                }
                if (match) {
                    lines = match[0].match(/(?:\r\n?|\n).*/g);
                    if (lines) this.yylineno += lines.length;
                    this.yylloc = { first_line: this.yylloc.last_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.last_column,
                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
                    this.yytext += match[0];
                    this.match += match[0];
                    this.matches = match;
                    this.yyleng = this.yytext.length;
                    if (this.options.ranges) {
                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
                    }
                    this._more = false;
                    this._input = this._input.slice(match[0].length);
                    this.matched += match[0];
                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
                    if (this.done && this._input) this.done = false;
                    if (token) return token;else return;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
                }
            },
            lex: function lex() {
                var r = this.next();
                if (typeof r !== 'undefined') {
                    return r;
                } else {
                    return this.lex();
                }
            },
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            popState: function popState() {
                return this.conditionStack.pop();
            },
            _currentRules: function _currentRules() {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            },
            topState: function topState() {
                return this.conditionStack[this.conditionStack.length - 2];
            },
            pushState: function begin(condition) {
                this.begin(condition);
            } };
        lexer.options = {};
        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
        /**/) {

            function strip(start, end) {
                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
            }

            var YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
                case 0:
                    if (yy_.yytext.slice(-2) === "\\\\") {
                        strip(0, 1);
                        this.begin("mu");
                    } else if (yy_.yytext.slice(-1) === "\\") {
                        strip(0, 1);
                        this.begin("emu");
                    } else {
                        this.begin("mu");
                    }
                    if (yy_.yytext) return 15;

                    break;
                case 1:
                    return 15;
                    break;
                case 2:
                    this.popState();
                    return 15;

                    break;
                case 3:
                    this.begin('raw');return 15;
                    break;
                case 4:
                    this.popState();
                    // Should be using `this.topState()` below, but it currently
                    // returns the second top instead of the first top. Opened an
                    // issue about it at https://github.com/zaach/jison/issues/291
                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
                        return 15;
                    } else {
                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
                        return 'END_RAW_BLOCK';
                    }

                    break;
                case 5:
                    return 15;
                    break;
                case 6:
                    this.popState();
                    return 14;

                    break;
                case 7:
                    return 65;
                    break;
                case 8:
                    return 68;
                    break;
                case 9:
                    return 19;
                    break;
                case 10:
                    this.popState();
                    this.begin('raw');
                    return 23;

                    break;
                case 11:
                    return 55;
                    break;
                case 12:
                    return 60;
                    break;
                case 13:
                    return 29;
                    break;
                case 14:
                    return 47;
                    break;
                case 15:
                    this.popState();return 44;
                    break;
                case 16:
                    this.popState();return 44;
                    break;
                case 17:
                    return 34;
                    break;
                case 18:
                    return 39;
                    break;
                case 19:
                    return 51;
                    break;
                case 20:
                    return 48;
                    break;
                case 21:
                    this.unput(yy_.yytext);
                    this.popState();
                    this.begin('com');

                    break;
                case 22:
                    this.popState();
                    return 14;

                    break;
                case 23:
                    return 48;
                    break;
                case 24:
                    return 73;
                    break;
                case 25:
                    return 72;
                    break;
                case 26:
                    return 72;
                    break;
                case 27:
                    return 87;
                    break;
                case 28:
                    // ignore whitespace
                    break;
                case 29:
                    this.popState();return 54;
                    break;
                case 30:
                    this.popState();return 33;
                    break;
                case 31:
                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
                    break;
                case 32:
                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
                    break;
                case 33:
                    return 85;
                    break;
                case 34:
                    return 82;
                    break;
                case 35:
                    return 82;
                    break;
                case 36:
                    return 83;
                    break;
                case 37:
                    return 84;
                    break;
                case 38:
                    return 81;
                    break;
                case 39:
                    return 75;
                    break;
                case 40:
                    return 77;
                    break;
                case 41:
                    return 72;
                    break;
                case 42:
                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
                    break;
                case 43:
                    return 'INVALID';
                    break;
                case 44:
                    return 5;
                    break;
            }
        };
        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
})();exports["default"] = handlebars;
module.exports = exports["default"];


},{}],227:[function(require,module,exports){
/* eslint-disable new-cap */
'use strict';

exports.__esModule = true;
exports.print = print;
exports.PrintVisitor = PrintVisitor;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _visitor = require('./visitor');

var _visitor2 = _interopRequireDefault(_visitor);

function print(ast) {
  return new PrintVisitor().accept(ast);
}

function PrintVisitor() {
  this.padding = 0;
}

PrintVisitor.prototype = new _visitor2['default']();

PrintVisitor.prototype.pad = function (string) {
  var out = '';

  for (var i = 0, l = this.padding; i < l; i++) {
    out += '  ';
  }

  out += string + '\n';
  return out;
};

PrintVisitor.prototype.Program = function (program) {
  var out = '',
      body = program.body,
      i = undefined,
      l = undefined;

  if (program.blockParams) {
    var blockParams = 'BLOCK PARAMS: [';
    for (i = 0, l = program.blockParams.length; i < l; i++) {
      blockParams += ' ' + program.blockParams[i];
    }
    blockParams += ' ]';
    out += this.pad(blockParams);
  }

  for (i = 0, l = body.length; i < l; i++) {
    out += this.accept(body[i]);
  }

  this.padding--;

  return out;
};

PrintVisitor.prototype.MustacheStatement = function (mustache) {
  return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');
};
PrintVisitor.prototype.Decorator = function (mustache) {
  return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');
};

PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function (block) {
  var out = '';

  out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');
  this.padding++;
  out += this.pad(this.SubExpression(block));
  if (block.program) {
    out += this.pad('PROGRAM:');
    this.padding++;
    out += this.accept(block.program);
    this.padding--;
  }
  if (block.inverse) {
    if (block.program) {
      this.padding++;
    }
    out += this.pad('{{^}}');
    this.padding++;
    out += this.accept(block.inverse);
    this.padding--;
    if (block.program) {
      this.padding--;
    }
  }
  this.padding--;

  return out;
};

PrintVisitor.prototype.PartialStatement = function (partial) {
  var content = 'PARTIAL:' + partial.name.original;
  if (partial.params[0]) {
    content += ' ' + this.accept(partial.params[0]);
  }
  if (partial.hash) {
    content += ' ' + this.accept(partial.hash);
  }
  return this.pad('{{> ' + content + ' }}');
};
PrintVisitor.prototype.PartialBlockStatement = function (partial) {
  var content = 'PARTIAL BLOCK:' + partial.name.original;
  if (partial.params[0]) {
    content += ' ' + this.accept(partial.params[0]);
  }
  if (partial.hash) {
    content += ' ' + this.accept(partial.hash);
  }

  content += ' ' + this.pad('PROGRAM:');
  this.padding++;
  content += this.accept(partial.program);
  this.padding--;

  return this.pad('{{> ' + content + ' }}');
};

PrintVisitor.prototype.ContentStatement = function (content) {
  return this.pad("CONTENT[ '" + content.value + "' ]");
};

PrintVisitor.prototype.CommentStatement = function (comment) {
  return this.pad("{{! '" + comment.value + "' }}");
};

PrintVisitor.prototype.SubExpression = function (sexpr) {
  var params = sexpr.params,
      paramStrings = [],
      hash = undefined;

  for (var i = 0, l = params.length; i < l; i++) {
    paramStrings.push(this.accept(params[i]));
  }

  params = '[' + paramStrings.join(', ') + ']';

  hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';

  return this.accept(sexpr.path) + ' ' + params + hash;
};

PrintVisitor.prototype.PathExpression = function (id) {
  var path = id.parts.join('/');
  return (id.data ? '@' : '') + 'PATH:' + path;
};

PrintVisitor.prototype.StringLiteral = function (string) {
  return '"' + string.value + '"';
};

PrintVisitor.prototype.NumberLiteral = function (number) {
  return 'NUMBER{' + number.value + '}';
};

PrintVisitor.prototype.BooleanLiteral = function (bool) {
  return 'BOOLEAN{' + bool.value + '}';
};

PrintVisitor.prototype.UndefinedLiteral = function () {
  return 'UNDEFINED';
};

PrintVisitor.prototype.NullLiteral = function () {
  return 'NULL';
};

PrintVisitor.prototype.Hash = function (hash) {
  var pairs = hash.pairs,
      joinedPairs = [];

  for (var i = 0, l = pairs.length; i < l; i++) {
    joinedPairs.push(this.accept(pairs[i]));
  }

  return 'HASH{' + joinedPairs.join(', ') + '}';
};
PrintVisitor.prototype.HashPair = function (pair) {
  return pair.key + '=' + this.accept(pair.value);
};
/* eslint-enable new-cap */


},{"./visitor":228}],228:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

function Visitor() {
  this.parents = [];
}

Visitor.prototype = {
  constructor: Visitor,
  mutating: false,

  // Visits a given value. If mutating, will replace the value if necessary.
  acceptKey: function acceptKey(node, name) {
    var value = this.accept(node[name]);
    if (this.mutating) {
      // Hacky sanity check: This may have a few false positives for type for the helper
      // methods but will generally do the right thing without a lot of overhead.
      if (value && !Visitor.prototype[value.type]) {
        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
      }
      node[name] = value;
    }
  },

  // Performs an accept operation with added sanity check to ensure
  // required keys are not removed.
  acceptRequired: function acceptRequired(node, name) {
    this.acceptKey(node, name);

    if (!node[name]) {
      throw new _exception2['default'](node.type + ' requires ' + name);
    }
  },

  // Traverses a given array. If mutating, empty respnses will be removed
  // for child elements.
  acceptArray: function acceptArray(array) {
    for (var i = 0, l = array.length; i < l; i++) {
      this.acceptKey(array, i);

      if (!array[i]) {
        array.splice(i, 1);
        i--;
        l--;
      }
    }
  },

  accept: function accept(object) {
    if (!object) {
      return;
    }

    /* istanbul ignore next: Sanity code */
    if (!this[object.type]) {
      throw new _exception2['default']('Unknown type: ' + object.type, object);
    }

    if (this.current) {
      this.parents.unshift(this.current);
    }
    this.current = object;

    var ret = this[object.type](object);

    this.current = this.parents.shift();

    if (!this.mutating || ret) {
      return ret;
    } else if (ret !== false) {
      return object;
    }
  },

  Program: function Program(program) {
    this.acceptArray(program.body);
  },

  MustacheStatement: visitSubExpression,
  Decorator: visitSubExpression,

  BlockStatement: visitBlock,
  DecoratorBlock: visitBlock,

  PartialStatement: visitPartial,
  PartialBlockStatement: function PartialBlockStatement(partial) {
    visitPartial.call(this, partial);

    this.acceptKey(partial, 'program');
  },

  ContentStatement: function ContentStatement() /* content */{},
  CommentStatement: function CommentStatement() /* comment */{},

  SubExpression: visitSubExpression,

  PathExpression: function PathExpression() /* path */{},

  StringLiteral: function StringLiteral() /* string */{},
  NumberLiteral: function NumberLiteral() /* number */{},
  BooleanLiteral: function BooleanLiteral() /* bool */{},
  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
  NullLiteral: function NullLiteral() /* literal */{},

  Hash: function Hash(hash) {
    this.acceptArray(hash.pairs);
  },
  HashPair: function HashPair(pair) {
    this.acceptRequired(pair, 'value');
  }
};

function visitSubExpression(mustache) {
  this.acceptRequired(mustache, 'path');
  this.acceptArray(mustache.params);
  this.acceptKey(mustache, 'hash');
}
function visitBlock(block) {
  visitSubExpression.call(this, block);

  this.acceptKey(block, 'program');
  this.acceptKey(block, 'inverse');
}
function visitPartial(partial) {
  this.acceptRequired(partial, 'name');
  this.acceptArray(partial.params);
  this.acceptKey(partial, 'hash');
}

exports['default'] = Visitor;
module.exports = exports['default'];


},{"../exception":232}],229:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _visitor = require('./visitor');

var _visitor2 = _interopRequireDefault(_visitor);

function WhitespaceControl() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  this.options = options;
}
WhitespaceControl.prototype = new _visitor2['default']();

WhitespaceControl.prototype.Program = function (program) {
  var doStandalone = !this.options.ignoreStandalone;

  var isRoot = !this.isRootSeen;
  this.isRootSeen = true;

  var body = program.body;
  for (var i = 0, l = body.length; i < l; i++) {
    var current = body[i],
        strip = this.accept(current);

    if (!strip) {
      continue;
    }

    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
        openStandalone = strip.openStandalone && _isPrevWhitespace,
        closeStandalone = strip.closeStandalone && _isNextWhitespace,
        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

    if (strip.close) {
      omitRight(body, i, true);
    }
    if (strip.open) {
      omitLeft(body, i, true);
    }

    if (doStandalone && inlineStandalone) {
      omitRight(body, i);

      if (omitLeft(body, i)) {
        // If we are on a standalone node, save the indent info for partials
        if (current.type === 'PartialStatement') {
          // Pull out the whitespace from the final line
          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
        }
      }
    }
    if (doStandalone && openStandalone) {
      omitRight((current.program || current.inverse).body);

      // Strip out the previous content node if it's whitespace only
      omitLeft(body, i);
    }
    if (doStandalone && closeStandalone) {
      // Always strip the next node
      omitRight(body, i);

      omitLeft((current.inverse || current.program).body);
    }
  }

  return program;
};

WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
  this.accept(block.program);
  this.accept(block.inverse);

  // Find the inverse program that is involed with whitespace stripping.
  var program = block.program || block.inverse,
      inverse = block.program && block.inverse,
      firstInverse = inverse,
      lastInverse = inverse;

  if (inverse && inverse.chained) {
    firstInverse = inverse.body[0].program;

    // Walk the inverse chain to find the last inverse that is actually in the chain.
    while (lastInverse.chained) {
      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
    }
  }

  var strip = {
    open: block.openStrip.open,
    close: block.closeStrip.close,

    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
    // so our parent can determine if we actually are standalone
    openStandalone: isNextWhitespace(program.body),
    closeStandalone: isPrevWhitespace((firstInverse || program).body)
  };

  if (block.openStrip.close) {
    omitRight(program.body, null, true);
  }

  if (inverse) {
    var inverseStrip = block.inverseStrip;

    if (inverseStrip.open) {
      omitLeft(program.body, null, true);
    }

    if (inverseStrip.close) {
      omitRight(firstInverse.body, null, true);
    }
    if (block.closeStrip.open) {
      omitLeft(lastInverse.body, null, true);
    }

    // Find standalone else statments
    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
      omitLeft(program.body);
      omitRight(firstInverse.body);
    }
  } else if (block.closeStrip.open) {
    omitLeft(program.body, null, true);
  }

  return strip;
};

WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
  return mustache.strip;
};

WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
  /* istanbul ignore next */
  var strip = node.strip || {};
  return {
    inlineStandalone: true,
    open: strip.open,
    close: strip.close
  };
};

function isPrevWhitespace(body, i, isRoot) {
  if (i === undefined) {
    i = body.length;
  }

  // Nodes that end with newlines are considered whitespace (but are special
  // cased for strip operations)
  var prev = body[i - 1],
      sibling = body[i - 2];
  if (!prev) {
    return isRoot;
  }

  if (prev.type === 'ContentStatement') {
    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
  }
}
function isNextWhitespace(body, i, isRoot) {
  if (i === undefined) {
    i = -1;
  }

  var next = body[i + 1],
      sibling = body[i + 2];
  if (!next) {
    return isRoot;
  }

  if (next.type === 'ContentStatement') {
    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
  }
}

// Marks the node to the right of the position as omitted.
// I.e. {{foo}}' ' will mark the ' ' node as omitted.
//
// If i is undefined, then the first child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
function omitRight(body, i, multiple) {
  var current = body[i == null ? 0 : i + 1];
  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
    return;
  }

  var original = current.value;
  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
  current.rightStripped = current.value !== original;
}

// Marks the node to the left of the position as omitted.
// I.e. ' '{{foo}} will mark the ' ' node as omitted.
//
// If i is undefined then the last child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
function omitLeft(body, i, multiple) {
  var current = body[i == null ? body.length - 1 : i - 1];
  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
    return;
  }

  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
  var original = current.value;
  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
  current.leftStripped = current.value !== original;
  return current.leftStripped;
}

exports['default'] = WhitespaceControl;
module.exports = exports['default'];


},{"./visitor":228}],230:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _decoratorsInline = require('./decorators/inline');

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}


},{"./decorators/inline":231}],231:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

exports['default'] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;
    if (!props.partials) {
      props.partials = {};
      ret = function (context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;

    return ret;
  });
};

module.exports = exports['default'];


},{"../utils":245}],232:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      column = undefined;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  /* istanbul ignore else */
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line;

      // Work around issue under safari where we can't directly set the column value
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
      } else {
        this.column = column;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();

exports['default'] = Exception;
module.exports = exports['default'];


},{}],233:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _helpersBlockHelperMissing = require('./helpers/block-helper-missing');

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = require('./helpers/each');

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = require('./helpers/helper-missing');

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = require('./helpers/if');

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = require('./helpers/log');

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = require('./helpers/lookup');

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = require('./helpers/with');

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);
  _helpersEach2['default'](instance);
  _helpersHelperMissing2['default'](instance);
  _helpersIf2['default'](instance);
  _helpersLog2['default'](instance);
  _helpersLookup2['default'](instance);
  _helpersWith2['default'](instance);
}


},{"./helpers/block-helper-missing":234,"./helpers/each":235,"./helpers/helper-missing":236,"./helpers/if":237,"./helpers/log":238,"./helpers/lookup":239,"./helpers/with":240}],234:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

exports['default'] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = { data: data };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];


},{"../utils":245}],235:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = require('../utils');

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && typeof context === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else {
        var priorKey = undefined;

        for (var key in context) {
          if (context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey !== undefined) {
          execIteration(priorKey, i - 1, true);
        }
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];


},{"../exception":232,"../utils":245}],236:[function(require,module,exports){
'use strict';

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = require('../exception');

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('helperMissing', function () /* [args, ]options */{
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];


},{"../exception":232}],237:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

exports['default'] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function (conditional, options) {
    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
  });
};

module.exports = exports['default'];


},{"../utils":245}],238:[function(require,module,exports){
'use strict';

exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('log', function () /* message, options */{
    var args = [undefined],
        options = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;
    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }
    args[0] = level;

    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];


},{}],239:[function(require,module,exports){
'use strict';

exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('lookup', function (obj, field) {
    return obj && obj[field];
  });
};

module.exports = exports['default'];


},{}],240:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

exports['default'] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;
      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];


},{"../utils":245}],241:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('./utils');

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',

  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },

  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];
      if (!console[method]) {
        // eslint-disable-line no-console
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};

exports['default'] = logger;
module.exports = exports['default'];


},{"./utils":245}],242:[function(require,module,exports){
(function (global){
/* global window */
'use strict';

exports.__esModule = true;

exports['default'] = function (Handlebars) {
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */
  Handlebars.noConflict = function () {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }
    return Handlebars;
  };
};

module.exports = exports['default'];


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],243:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _utils = require('./utils');

var Utils = _interopRequireWildcard(_utils);

var _exception = require('./exception');

var _exception2 = _interopRequireDefault(_exception);

var _base = require('./base');

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
    }
  }
}

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
  }

  templateSpec.main.decorator = templateSpec.main_d;

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  }

  // Just add water
  var container = {
    strict: function strict(obj, name) {
      if (!(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },

    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }
      return programWrapper;
    },

    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    merge: function merge(param, common) {
      var obj = param || common;

      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }

      return obj;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context /*, options*/) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }
    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }
  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = container.merge(options.decorators, env.decorators);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;
  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data);
      // Wrapper function to get access to currentPartialBlock from the closure
      var fn = options.fn;
      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.
        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };
      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }
  return prog;
}


},{"./base":219,"./exception":232,"./utils":245}],244:[function(require,module,exports){
// Build out our basic SafeString type
'use strict';

exports.__esModule = true;
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports['default'] = SafeString;
module.exports = exports['default'];


},{}],245:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;
var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;

exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
/* eslint-disable func-style */
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  exports.isFunction = isFunction = function (value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
exports.isFunction = isFunction;

/* eslint-enable func-style */

/* istanbul ignore next */
var isArray = Array.isArray || function (value) {
  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}


},{}],246:[function(require,module,exports){
// USAGE:
// var handlebars = require('handlebars');
/* eslint-disable no-var */

// var local = handlebars.create();

var handlebars = require('../dist/cjs/handlebars')['default'];

var printer = require('../dist/cjs/handlebars/compiler/printer');
handlebars.PrintVisitor = printer.PrintVisitor;
handlebars.print = printer.print;

module.exports = handlebars;

// Publish a Node.js require() handler for .handlebars and .hbs files
function extension(module, filename) {
  var fs = require('fs');
  var templateString = fs.readFileSync(filename, 'utf8');
  module.exports = handlebars.compile(templateString);
}
/* istanbul ignore else */
if (typeof require !== 'undefined' && require.extensions) {
  require.extensions['.handlebars'] = extension;
  require.extensions['.hbs'] = extension;
}

},{"../dist/cjs/handlebars":217,"../dist/cjs/handlebars/compiler/printer":227,"fs":215}],247:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./source-map/source-node').SourceNode;

},{"./source-map/source-map-consumer":254,"./source-map/source-map-generator":255,"./source-map/source-node":256}],248:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet() {
    this._array = [];
    this._set = {};
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Return how many unique items are in this ArraySet. If duplicates have been
   * added, than those do not count towards the size.
   *
   * @returns Number
   */
  ArraySet.prototype.size = function ArraySet_size() {
    return Object.getOwnPropertyNames(this._set).length;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var isDuplicate = this.has(aStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      this._set[util.toSetString(aStr)] = idx;
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    return Object.prototype.hasOwnProperty.call(this._set,
                                                util.toSetString(aStr));
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (this.has(aStr)) {
      return this._set[util.toSetString(aStr)];
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };

  exports.ArraySet = ArraySet;

});

},{"./util":257,"amdefine":201}],249:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64 = require('./base64');

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (aIndex >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }

      digit = base64.decode(aStr.charCodeAt(aIndex++));
      if (digit === -1) {
        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
      }

      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
  };

});

},{"./base64":250,"amdefine":201}],250:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  exports.encode = function (number) {
    if (0 <= number && number < intToCharMap.length) {
      return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + aNumber);
  };

  /**
   * Decode a single base 64 character code digit to an integer. Returns -1 on
   * failure.
   */
  exports.decode = function (charCode) {
    var bigA = 65;     // 'A'
    var bigZ = 90;     // 'Z'

    var littleA = 97;  // 'a'
    var littleZ = 122; // 'z'

    var zero = 48;     // '0'
    var nine = 57;     // '9'

    var plus = 43;     // '+'
    var slash = 47;    // '/'

    var littleOffset = 26;
    var numberOffset = 52;

    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    if (bigA <= charCode && charCode <= bigZ) {
      return (charCode - bigA);
    }

    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    if (littleA <= charCode && charCode <= littleZ) {
      return (charCode - littleA + littleOffset);
    }

    // 52 - 61: 0123456789
    if (zero <= charCode && charCode <= nine) {
      return (charCode - zero + numberOffset);
    }

    // 62: +
    if (charCode == plus) {
      return 62;
    }

    // 63: /
    if (charCode == slash) {
      return 63;
    }

    // Invalid base64 digit.
    return -1;
  };

});

},{"amdefine":201}],251:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  exports.GREATEST_LOWER_BOUND = 1;
  exports.LEAST_UPPER_BOUND = 2;

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next-closest element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element than the one we are searching for, so we return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return mid;
    }
    else if (cmp > 0) {
      // Our needle is greater than aHaystack[mid].
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
      }

      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return mid;
      }
    }
    else {
      // Our needle is less than aHaystack[mid].
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
      }

      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the index of the closest element if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1;
    }

    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) {
      return -1;
    }

    // We have found either the exact element, or the next-closest element than
    // the one we are searching for. However, there may be more than one such
    // element. Make sure we always return the smallest of these.
    while (index - 1 >= 0) {
      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
        break;
      }
      --index;
    }

    return index;
  };

});

},{"amdefine":201}],252:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');

  /**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
  function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA ||
           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
  }

  /**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
  function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {generatedLine: -1, generatedColumn: 0};
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  MappingList.prototype.unsortedForEach =
    function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  MappingList.prototype.add = function MappingList_add(aMapping) {
    var mapping;
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositionsInflated);
      this._sorted = true;
    }
    return this._array;
  };

  exports.MappingList = MappingList;

});

},{"./util":257,"amdefine":201}],253:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  // It turns out that some (most?) JavaScript engines don't self-host
  // `Array.prototype.sort`. This makes sense because C++ will likely remain
  // faster than JS when doing raw CPU-intensive sorting. However, when using a
  // custom comparator function, calling back and forth between the VM's C++ and
  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
  // worse generated code for the comparator function than would be optimal. In
  // fact, when sorting with a comparator, these costs outweigh the benefits of
  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
  // a ~3500ms mean speed-up in `bench/bench.html`.

  /**
   * Swap the elements indexed by `x` and `y` in the array `ary`.
   *
   * @param {Array} ary
   *        The array.
   * @param {Number} x
   *        The index of the first item.
   * @param {Number} y
   *        The index of the second item.
   */
  function swap(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
  }

  /**
   * Returns a random integer within the range `low .. high` inclusive.
   *
   * @param {Number} low
   *        The lower bound on the range.
   * @param {Number} high
   *        The upper bound on the range.
   */
  function randomIntInRange(low, high) {
    return Math.round(low + (Math.random() * (high - low)));
  }

  /**
   * The Quick Sort algorithm.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   * @param {Number} p
   *        Start index of the array
   * @param {Number} r
   *        End index of the array
   */
  function doQuickSort(ary, comparator, p, r) {
    // If our lower bound is less than our upper bound, we (1) partition the
    // array into two pieces and (2) recurse on each half. If it is not, this is
    // the empty array and our base case.

    if (p < r) {
      // (1) Partitioning.
      //
      // The partitioning chooses a pivot between `p` and `r` and moves all
      // elements that are less than or equal to the pivot to the before it, and
      // all the elements that are greater than it after it. The effect is that
      // once partition is done, the pivot is in the exact place it will be when
      // the array is put in sorted order, and it will not need to be moved
      // again. This runs in O(n) time.

      // Always choose a random pivot so that an input array which is reverse
      // sorted does not cause O(n^2) running time.
      var pivotIndex = randomIntInRange(p, r);
      var i = p - 1;

      swap(ary, pivotIndex, r);
      var pivot = ary[r];

      // Immediately after `j` is incremented in this loop, the following hold
      // true:
      //
      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
      //
      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
      for (var j = p; j < r; j++) {
        if (comparator(ary[j], pivot) <= 0) {
          i += 1;
          swap(ary, i, j);
        }
      }

      swap(ary, i + 1, j);
      var q = i + 1;

      // (2) Recurse on each half.

      doQuickSort(ary, comparator, p, q - 1);
      doQuickSort(ary, comparator, q + 1, r);
    }
  }

  /**
   * Sort the given array in-place with the given comparator function.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   */
  exports.quickSort = function (ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
  };

});

},{"amdefine":201}],254:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');
  var binarySearch = require('./binary-search');
  var ArraySet = require('./array-set').ArraySet;
  var base64VLQ = require('./base64-vlq');
  var quickSort = require('./quick-sort').quickSort;

  function SourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    return sourceMap.sections != null
      ? new IndexedSourceMapConsumer(sourceMap)
      : new BasicSourceMapConsumer(sourceMap);
  }

  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
  }

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    get: function () {
      if (!this.__generatedMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    get: function () {
      if (!this.__originalMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  SourceMapConsumer.prototype._charIsMappingSeparator =
    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };

  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;

  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
  SourceMapConsumer.LEAST_UPPER_BOUND = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        if (source != null && sourceRoot != null) {
          source = util.join(sourceRoot, source);
        }
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };

  /**
   * Returns all generated line and column information for the original source,
   * line, and column provided. If no column is provided, returns all mappings
   * corresponding to a either the line we are searching for or the next
   * closest line that has any mappings. Otherwise, returns all mappings
   * corresponding to the given line and either the column we are searching for
   * or the next closest column that has any offsets.
   *
   * The only argument is an object with the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: Optional. the column number in the original source.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.allGeneratedPositionsFor =
    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, 'line');

      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
      // returns the index of the closest mapping less than the needle. By
      // setting needle.originalColumn to 0, we thus find the last mapping for
      // the given line, provided such a mapping exists.
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: line,
        originalColumn: util.getArg(aArgs, 'column', 0)
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }
      if (!this._sources.has(needle.source)) {
        return [];
      }
      needle.source = this._sources.indexOf(needle.source);

      var mappings = [];

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions,
                                    binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (aArgs.column === undefined) {
          var originalLine = mapping.originalLine;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we found. Since
          // mappings are sorted, this is guaranteed to find all mappings for
          // the line we found.
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we were searching for.
          // Since mappings are sorted, this is guaranteed to find all mappings for
          // the line we are searching for.
          while (mapping &&
                 mapping.originalLine === line &&
                 mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        }
      }

      return mappings;
    };

  exports.SourceMapConsumer = SourceMapConsumer;

  /**
   * A BasicSourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The only parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function BasicSourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    sources = sources.map(util.normalize);

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names, true);
    this._sources = ArraySet.fromArray(sources, true);

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this.file = file;
  }

  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

  /**
   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @returns BasicSourceMapConsumer
   */
  BasicSourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);

      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;

      // Because we are modifying the entries (by converting string sources and
      // names to indices into the sources and names ArraySets), we have to make
      // a copy of the entry or else bad things happen. Shared mutable state
      // strikes again! See github issue #191.

      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];

      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping;
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;

        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;

          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }

          destOriginalMappings.push(destMapping);
        }

        destGeneratedMappings.push(destMapping);
      }

      quickSort(smc.__originalMappings, util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  BasicSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._sources.toArray().map(function (s) {
        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
      }, this);
    }
  });

  /**
   * Provide the JIT with a nice shape / hidden class.
   */
  function Mapping() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
  }

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  BasicSourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;

      while (index < length) {
        if (aStr.charAt(index) === ';') {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        }
        else if (aStr.charAt(index) === ',') {
          index++;
        }
        else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;

          // Because each offset is encoded relative to the previous one,
          // many segments often have the same encoding. We can exploit this
          // fact by caching the parsed variable length fields of each segment,
          // allowing us to avoid a second parse if we encounter the same
          // segment again.
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);

          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }

            if (segment.length === 2) {
              throw new Error('Found a source, but no line and column');
            }

            if (segment.length === 3) {
              throw new Error('Found a source and line, but no column');
            }

            cachedSegments[str] = segment;
          }

          // Generated column.
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;

          if (segment.length > 1) {
            // Original source.
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];

            // Original line.
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;

            // Original column.
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;

            if (segment.length > 4) {
              // Original name.
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }

          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            originalMappings.push(mapping);
          }
        }
      }

      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;

      quickSort(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  BasicSourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator, aBias) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  BasicSourceMapConsumer.prototype.computeColumnSpans =
    function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];

        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];

          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }

        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
      }
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  BasicSourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._generatedMappings,
        "generatedLine",
        "generatedColumn",
        util.compareByGeneratedPositionsDeflated,
        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._generatedMappings[index];

        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, 'source', null);
          if (source !== null) {
            source = this._sources.at(source);
            if (this.sourceRoot != null) {
              source = util.join(this.sourceRoot, source);
            }
          }
          var name = util.getArg(mapping, 'name', null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source: source,
            line: util.getArg(mapping, 'originalLine', null),
            column: util.getArg(mapping, 'originalColumn', null),
            name: name
          };
        }
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
    function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() &&
        !this.sourcesContent.some(function (sc) { return sc == null; });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * availible.
   */
  BasicSourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }

      if (this.sourceRoot != null) {
        aSource = util.relative(this.sourceRoot, aSource);
      }

      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }

      var url;
      if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + aSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
        }
      }

      // This function is used recursively from
      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
      // don't want to throw if we can't find the source - we just want to
      // return null, so we provide a flag to exit gracefully.
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  BasicSourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, 'source');
      if (this.sourceRoot != null) {
        source = util.relative(this.sourceRoot, source);
      }
      if (!this._sources.has(source)) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      source = this._sources.indexOf(source);

      var needle = {
        source: source,
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          };
        }
      }

      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };

  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

  /**
   * An IndexedSourceMapConsumer instance represents a parsed source map which
   * we can query for information. It differs from BasicSourceMapConsumer in
   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
   * input.
   *
   * The only parameter is a raw source map (either as a JSON string, or already
   * parsed to an object). According to the spec for indexed source maps, they
   * have the following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - file: Optional. The generated file this source map is associated with.
   *   - sections: A list of section definitions.
   *
   * Each value under the "sections" field has two fields:
   *   - offset: The offset into the original specified at which this section
   *       begins to apply, defined as an object with a "line" and "column"
   *       field.
   *   - map: A source map definition. This source map could also be indexed,
   *       but doesn't have to be.
   *
   * Instead of the "map" field, it's also possible to have a "url" field
   * specifying a URL to retrieve a source map from, but that's currently
   * unsupported.
   *
   * Here's an example source map, taken from the source map spec[0], but
   * modified to omit a section which uses the "url" field.
   *
   *  {
   *    version : 3,
   *    file: "app.js",
   *    sections: [{
   *      offset: {line:100, column:10},
   *      map: {
   *        version : 3,
   *        file: "section.js",
   *        sources: ["foo.js", "bar.js"],
   *        names: ["src", "maps", "are", "fun"],
   *        mappings: "AAAA,E;;ABCDE;"
   *      }
   *    }],
   *  }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
   */
  function IndexedSourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sections = util.getArg(sourceMap, 'sections');

    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    this._sources = new ArraySet();
    this._names = new ArraySet();

    var lastOffset = {
      line: -1,
      column: 0
    };
    this._sections = sections.map(function (s) {
      if (s.url) {
        // The url field will require support for asynchronicity.
        // See https://github.com/mozilla/source-map/issues/16
        throw new Error('Support for url field in sections not implemented.');
      }
      var offset = util.getArg(s, 'offset');
      var offsetLine = util.getArg(offset, 'line');
      var offsetColumn = util.getArg(offset, 'column');

      if (offsetLine < lastOffset.line ||
          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
        throw new Error('Section offsets must be ordered and non-overlapping.');
      }
      lastOffset = offset;

      return {
        generatedOffset: {
          // The offset fields are 0-based, but we use 1-based indices when
          // encoding/decoding from VLQ.
          generatedLine: offsetLine + 1,
          generatedColumn: offsetColumn + 1
        },
        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
      }
    });
  }

  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

  /**
   * The version of the source mapping spec that we are consuming.
   */
  IndexedSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
    get: function () {
      var sources = [];
      for (var i = 0; i < this._sections.length; i++) {
        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
          sources.push(this._sections[i].consumer.sources[j]);
        }
      };
      return sources;
    }
  });

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  IndexedSourceMapConsumer.prototype.originalPositionFor =
    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      // Find the section containing the generated position we're trying to map
      // to an original position.
      var sectionIndex = binarySearch.search(needle, this._sections,
        function(needle, section) {
          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
          if (cmp) {
            return cmp;
          }

          return (needle.generatedColumn -
                  section.generatedOffset.generatedColumn);
        });
      var section = this._sections[sectionIndex];

      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }

      return section.consumer.originalPositionFor({
        line: needle.generatedLine -
          (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn -
          (section.generatedOffset.generatedLine === needle.generatedLine
           ? section.generatedOffset.generatedColumn - 1
           : 0),
        bias: aArgs.bias
      });
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function (s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  IndexedSourceMapConsumer.prototype.sourceContentFor =
    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  IndexedSourceMapConsumer.prototype.generatedPositionFor =
    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        // Only consider this section if the requested source is in the list of
        // sources of the consumer.
        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line +
              (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column +
              (section.generatedOffset.generatedLine === generatedPosition.line
               ? section.generatedOffset.generatedColumn - 1
               : 0)
          };
          return ret;
        }
      }

      return {
        line: null,
        column: null
      };
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  IndexedSourceMapConsumer.prototype._parseMappings =
    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[i];

          var source = section.consumer._sources.at(mapping.source);
          if (section.consumer.sourceRoot !== null) {
            source = util.join(section.consumer.sourceRoot, source);
          }
          this._sources.add(source);
          source = this._sources.indexOf(source);

          var name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);

          // The mappings coming from the consumer for the section have
          // generated positions relative to the start of the section, so we
          // need to offset them to be relative to the start of the concatenated
          // generated file.
          var adjustedMapping = {
            source: source,
            generatedLine: mapping.generatedLine +
              (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.column +
              (section.generatedOffset.generatedLine === mapping.generatedLine)
              ? section.generatedOffset.generatedColumn - 1
              : 0,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: name
          };

          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === 'number') {
            this.__originalMappings.push(adjustedMapping);
          }
        };
      };

      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };

  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

});

},{"./array-set":248,"./base64-vlq":249,"./binary-search":251,"./quick-sort":253,"./util":257,"amdefine":201}],255:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64VLQ = require('./base64-vlq');
  var util = require('./util');
  var ArraySet = require('./array-set').ArraySet;
  var MappingList = require('./mapping-list').MappingList;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }

  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }

      if (source != null && !this._sources.has(source)) {
        this._sources.add(source);
      }

      if (name != null && !this._names.has(name)) {
        this._names.add(name);
      }

      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = {};
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "sourceFile" relative if an absolute Url is passed.
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet();
      var newNames = new ArraySet();

      // Find mappings for the "sourceFile"
      this._mappings.unsortedForEach(function (mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source)
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var mapping;

      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            result += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            result += ',';
          }
        }

        result += base64VLQ.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source != null) {
          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
                                     - previousSource);
          previousSource = this._sources.indexOf(mapping.source);

          // lines are stored 0-based in SourceMap spec version 3
          result += base64VLQ.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          result += base64VLQ.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name != null) {
            result += base64VLQ.encode(this._names.indexOf(mapping.name)
                                       - previousName);
            previousName = this._names.indexOf(mapping.name);
          }
        }
      }

      return result;
    };

  SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
                                                    key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };

  exports.SourceMapGenerator = SourceMapGenerator;

});

},{"./array-set":248,"./base64-vlq":249,"./mapping-list":252,"./util":257,"amdefine":201}],256:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
  var util = require('./util');

  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Newline character code for charCodeAt() comparisons
  var NEWLINE_CODE = 10;

  // Private symbol for identifying `SourceNode`s when multiple versions of
  // the source-map library are loaded. This MUST NOT CHANGE across
  // versions!
  var isSourceNode = "$$$isSourceNode$$$";

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are removed from this array, by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var shiftNextLine = function() {
        var lineContents = remainingLines.shift();
        // The last line of a file might not have a newline.
        var newLine = remainingLines.shift() || "";
        return lineContents + newLine;
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            var code = "";
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[0];
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[0];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLines.length > 0) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath
            ? util.join(aRelativePath, mapping.source)
            : mapping.source;
          node.add(new SourceNode(mapping.originalLine,
                                  mapping.originalColumn,
                                  source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  exports.SourceNode = SourceNode;

});

},{"./source-map-generator":255,"./util":257,"amdefine":201}],257:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consequtive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = (path.charAt(0) === '/');

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }

    aRoot = aRoot.replace(/\/$/, '');

    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    var level = 0;
    while (aPath.indexOf(aRoot + '/') !== 0) {
      var index = aRoot.lastIndexOf("/");
      if (index < 0) {
        return aPath;
      }

      // If the only part of the root that is left is the scheme (i.e. http://,
      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
      // have exhausted all components, so the path is not relative to the root.
      aRoot = aRoot.slice(0, index);
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath;
      }

      ++level;
    }

    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
  }
  exports.relative = relative;

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    return '$' + aStr;
  }
  exports.toSetString = toSetString;

  function fromSetString(aStr) {
    return aStr.substr(1);
  }
  exports.fromSetString = fromSetString;

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = mappingA.source - mappingB.source;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    return mappingA.name - mappingB.name;
  };
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings with deflated source and name indices where
   * the generated positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp;
    }

    cmp = mappingA.source - mappingB.source;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return mappingA.name - mappingB.name;
  };
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

  function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0;
    }

    if (aStr1 > aStr2) {
      return 1;
    }

    return -1;
  }

  /**
   * Comparator between two mappings with inflated source and name strings where
   * the generated positions are compared.
   */
  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  };
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

});

},{"amdefine":201}],258:[function(require,module,exports){
IntlPolyfill.__addLocaleData({locale:"en",date:{ca:["gregory","buddhist","chinese","coptic","dangi","ethioaa","ethiopic","generic","hebrew","indian","islamic","islamicc","japanese","persian","roc"],hourNo0:true,hour12:true,formats:{short:"{1}, {0}",medium:"{1}, {0}",full:"{1} 'at' {0}",long:"{1} 'at' {0}",availableFormats:{"d":"d","E":"ccc",Ed:"d E",Ehm:"E h:mm a",EHm:"E HH:mm",Ehms:"E h:mm:ss a",EHms:"E HH:mm:ss",Gy:"y G",GyMMM:"MMM y G",GyMMMd:"MMM d, y G",GyMMMEd:"E, MMM d, y G","h":"h a","H":"HH",hm:"h:mm a",Hm:"HH:mm",hms:"h:mm:ss a",Hms:"HH:mm:ss",hmsv:"h:mm:ss a v",Hmsv:"HH:mm:ss v",hmv:"h:mm a v",Hmv:"HH:mm v","M":"L",Md:"M/d",MEd:"E, M/d",MMM:"LLL",MMMd:"MMM d",MMMEd:"E, MMM d",MMMMd:"MMMM d",ms:"mm:ss","y":"y",yM:"M/y",yMd:"M/d/y",yMEd:"E, M/d/y",yMMM:"MMM y",yMMMd:"MMM d, y",yMMMEd:"E, MMM d, y",yMMMM:"MMMM y",yQQQ:"QQQ y",yQQQQ:"QQQQ y"},dateFormats:{yMMMMEEEEd:"EEEE, MMMM d, y",yMMMMd:"MMMM d, y",yMMMd:"MMM d, y",yMd:"M/d/yy"},timeFormats:{hmmsszzzz:"h:mm:ss a zzzz",hmsz:"h:mm:ss a z",hms:"h:mm:ss a",hm:"h:mm a"}},calendars:{buddhist:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["BE"],short:["BE"],long:["BE"]},dayPeriods:{am:"AM",pm:"PM"}},chinese:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mo1","Mo2","Mo3","Mo4","Mo5","Mo6","Mo7","Mo8","Mo9","Mo10","Mo11","Mo12"],long:["Month1","Month2","Month3","Month4","Month5","Month6","Month7","Month8","Month9","Month10","Month11","Month12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},dayPeriods:{am:"AM",pm:"PM"}},coptic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"],long:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},dangi:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mo1","Mo2","Mo3","Mo4","Mo5","Mo6","Mo7","Mo8","Mo9","Mo10","Mo11","Mo12"],long:["Month1","Month2","Month3","Month4","Month5","Month6","Month7","Month8","Month9","Month10","Month11","Month12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},dayPeriods:{am:"AM",pm:"PM"}},ethiopic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},ethioaa:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0"],short:["ERA0"],long:["ERA0"]},dayPeriods:{am:"AM",pm:"PM"}},generic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"],long:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},gregory:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["B","A","BCE","CE"],short:["BC","AD","BCE","CE"],long:["Before Christ","Anno Domini","Before Common Era","Common Era"]},dayPeriods:{am:"AM",pm:"PM"}},hebrew:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13","7"],short:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"],long:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AM"],short:["AM"],long:["AM"]},dayPeriods:{am:"AM",pm:"PM"}},indian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"],long:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Saka"],short:["Saka"],long:["Saka"]},dayPeriods:{am:"AM",pm:"PM"}},islamic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},islamicc:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},japanese:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","M","T","S","H"],short:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"],long:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"]},dayPeriods:{am:"AM",pm:"PM"}},persian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"],long:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AP"],short:["AP"],long:["AP"]},dayPeriods:{am:"AM",pm:"PM"}},roc:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Before R.O.C.","Minguo"],short:["Before R.O.C.","Minguo"],long:["Before R.O.C.","Minguo"]},dayPeriods:{am:"AM",pm:"PM"}}}},number:{nu:["latn"],patterns:{decimal:{positivePattern:"{number}",negativePattern:"{minusSign}{number}"},currency:{positivePattern:"{currency}{number}",negativePattern:"{minusSign}{currency}{number}"},percent:{positivePattern:"{number}{percentSign}",negativePattern:"{minusSign}{number}{percentSign}"}},symbols:{latn:{decimal:".",group:",",nan:"NaN",plusSign:"+",minusSign:"-",percentSign:"%",infinity:"∞"}},currencies:{AUD:"A$",BRL:"R$",CAD:"CA$",CNY:"CN¥",EUR:"€",GBP:"£",HKD:"HK$",ILS:"₪",INR:"₹",JPY:"¥",KRW:"₩",MXN:"MX$",NZD:"NZ$",TWD:"NT$",USD:"$",VND:"₫",XAF:"FCFA",XCD:"EC$",XOF:"CFA",XPF:"CFPF"}}});
},{}],259:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":260}],260:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],261:[function(require,module,exports){
(function (process){
// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2017 Kris Kowal under the terms of the MIT
 * license found at https://github.com/kriskowal/q/blob/v1/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    "use strict";

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object" && typeof module === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
        // Prefer window over self for add-on scripts. Use self for
        // non-windowed contexts.
        var global = typeof window !== "undefined" ? window : self;

        // Get the `window` object, save the previous Q global
        // and initialize Q as a global.
        var previousQ = global.Q;
        global.Q = definition();

        // Add a noConflict function so Q can be removed from the
        // global namespace.
        global.Q.noConflict = function () {
            global.Q = previousQ;
            return this;
        };

    } else {
        throw new Error("This environment was not anticipated by Q. Please file a bug.");
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    // queue for late tasks, used by unhandled rejection tracking
    var laterQueue = [];

    function flush() {
        /* jshint loopfunc: true */
        var task, domain;

        while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }
            runSingle(task, domain);

        }
        while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
        }
        flushing = false;
    }
    // runs a single function in the async queue
    function runSingle(task, domain) {
        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process === "object" &&
        process.toString() === "[object process]" && process.nextTick) {
        // Ensure Q is in a real Node environment, with a `process.nextTick`.
        // To see through fake Node environments:
        // * Mocha test runner - exposes a `process` global without a `nextTick`
        // * Browserify - exposes a `process.nexTick` function that uses
        //   `setTimeout`. In this case `setImmediate` is preferred because
        //    it is faster. Browserify's `process.toString()` yields
        //   "[object Object]", while in a real Node environment
        //   `process.toString()` yields "[object process]".
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }
    // runs a task after all other tasks have been run
    // this is useful for unhandled rejection tracking that needs to happen
    // after all `then`d tasks have been run.
    nextTick.runAfter = function (task) {
        laterQueue.push(task);
        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };
    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {
    obj[prop] = descriptor.value;
    return obj;
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
                object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        var stack = filterStackString(concatedStacks);
        object_defineProperty(error, "stack", {value: stack, configurable: true});
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

/**
 * The counter is used to determine the stopping point for building
 * long stack traces. In makeStackTraceLong we walk backwards through
 * the linked list of promises, only stacks which were created before
 * the rejection are concatenated.
 */
var longStackCounter = 1;

// enable long stacks if Q_DEBUG is set
if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
            promise.stackCounter = longStackCounter++;
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;

        if (Q.longStackSupport && hasStacks) {
            // Only hold a reference to the new promise if long stacks
            // are enabled to reduce memory usage
            promise.source = newPromise;
        }

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Q can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
Q.race = race;
function race(answerPs) {
    return promise(function (resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function (answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var reportedUnhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }
    if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
            if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise);
                reportedUnhandledRejections.push(promise);
            }
        });
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise);
                if (atReport !== -1) {
                    process.emit("rejectionHandled", unhandledReasons[at], promise);
                    reportedUnhandledRejections.splice(atReport, 1);
                }
            });
        }
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var pendingCount = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++pendingCount;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--pendingCount === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (pendingCount === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Returns the first resolved promise of an array. Prior rejected promises are
 * ignored.  Rejects only if all promises are rejected.
 * @param {Array*} an array containing values or promises for values
 * @returns a promise fulfilled with the value of the first resolved promise,
 * or a rejected promise if all promises are rejected.
 */
Q.any = any;

function any(promises) {
    if (promises.length === 0) {
        return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
        var promise = promises[index];

        pendingCount++;

        when(promise, onFulfilled, onRejected, onProgress);
        function onFulfilled(result) {
            deferred.resolve(result);
        }
        function onRejected(err) {
            pendingCount--;
            if (pendingCount === 0) {
                err.message = ("Q can't get fulfillment value from any promise, all " +
                    "promises were rejected. Last error message: " + err.message);
                deferred.reject(err);
            }
        }
        function onProgress(progress) {
            deferred.notify({
                index: index,
                value: progress
            });
        }
    }, undefined);

    return deferred.promise;
}

Promise.prototype.any = function () {
    return any(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    if (!callback || typeof callback.apply !== "function") {
        throw new Error("Q can't apply finally callback");
    }
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    if (callback === undefined) {
        throw new Error("Q can't wrap an undefined function");
    }
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

Q.noConflict = function() {
    throw new Error("Q.noConflict only works when Q is used as a global");
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

}).call(this,require('_process'))

},{"_process":260}],262:[function(require,module,exports){
/*
 * smoothscroll polyfill - v0.3.5
 * https://iamdustan.github.io/smoothscroll
 * 2016 (c) Dustan Kasten, Jeremias Menichelli - MIT License
 */

(function(w, d, undefined) {
  'use strict';

  /*
   * aliases
   * w: window global object
   * d: document
   * undefined: undefined
   */

  // polyfill
  function polyfill() {
    // return when scrollBehavior interface is supported
    if ('scrollBehavior' in d.documentElement.style) {
      return;
    }

    /*
     * globals
     */
    var Element = w.HTMLElement || w.Element;
    var SCROLL_TIME = 468;

    /*
     * object gathering original scroll methods
     */
    var original = {
      scroll: w.scroll || w.scrollTo,
      scrollBy: w.scrollBy,
      elScroll: Element.prototype.scroll || scrollElement,
      scrollIntoView: Element.prototype.scrollIntoView
    };

    /*
     * define timing method
     */
    var now = w.performance && w.performance.now
      ? w.performance.now.bind(w.performance) : Date.now;

    /**
     * changes scroll position inside an element
     * @method scrollElement
     * @param {Number} x
     * @param {Number} y
     */
    function scrollElement(x, y) {
      this.scrollLeft = x;
      this.scrollTop = y;
    }

    /**
     * returns result of applying ease math function to a number
     * @method ease
     * @param {Number} k
     * @returns {Number}
     */
    function ease(k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    }

    /**
     * indicates if a smooth behavior should be applied
     * @method shouldBailOut
     * @param {Number|Object} x
     * @returns {Boolean}
     */
    function shouldBailOut(x) {
      if (typeof x !== 'object'
            || x === null
            || x.behavior === undefined
            || x.behavior === 'auto'
            || x.behavior === 'instant') {
        // first arg not an object/null
        // or behavior is auto, instant or undefined
        return true;
      }

      if (typeof x === 'object'
            && x.behavior === 'smooth') {
        // first argument is an object and behavior is smooth
        return false;
      }

      // throw error when behavior is not supported
      throw new TypeError('behavior not valid');
    }

    /**
     * finds scrollable parent of an element
     * @method findScrollableParent
     * @param {Node} el
     * @returns {Node} el
     */
    function findScrollableParent(el) {
      var isBody;
      var hasScrollableSpace;
      var hasVisibleOverflow;

      do {
        el = el.parentNode;

        // set condition variables
        isBody = el === d.body;
        hasScrollableSpace =
          el.clientHeight < el.scrollHeight ||
          el.clientWidth < el.scrollWidth;
        hasVisibleOverflow =
          w.getComputedStyle(el, null).overflow === 'visible';
      } while (!isBody && !(hasScrollableSpace && !hasVisibleOverflow));

      isBody = hasScrollableSpace = hasVisibleOverflow = null;

      return el;
    }

    /**
     * self invoked function that, given a context, steps through scrolling
     * @method step
     * @param {Object} context
     */
    function step(context) {
      var time = now();
      var value;
      var currentX;
      var currentY;
      var elapsed = (time - context.startTime) / SCROLL_TIME;

      // avoid elapsed times higher than one
      elapsed = elapsed > 1 ? 1 : elapsed;

      // apply easing to elapsed time
      value = ease(elapsed);

      currentX = context.startX + (context.x - context.startX) * value;
      currentY = context.startY + (context.y - context.startY) * value;

      context.method.call(context.scrollable, currentX, currentY);

      // scroll more if we have not reached our destination
      if (currentX !== context.x || currentY !== context.y) {
        w.requestAnimationFrame(step.bind(w, context));
      }
    }

    /**
     * scrolls window with a smooth behavior
     * @method smoothScroll
     * @param {Object|Node} el
     * @param {Number} x
     * @param {Number} y
     */
    function smoothScroll(el, x, y) {
      var scrollable;
      var startX;
      var startY;
      var method;
      var startTime = now();

      // define scroll context
      if (el === d.body) {
        scrollable = w;
        startX = w.scrollX || w.pageXOffset;
        startY = w.scrollY || w.pageYOffset;
        method = original.scroll;
      } else {
        scrollable = el;
        startX = el.scrollLeft;
        startY = el.scrollTop;
        method = scrollElement;
      }

      // scroll looping over a frame
      step({
        scrollable: scrollable,
        method: method,
        startTime: startTime,
        startX: startX,
        startY: startY,
        x: x,
        y: y
      });
    }

    /*
     * ORIGINAL METHODS OVERRIDES
     */

    // w.scroll and w.scrollTo
    w.scroll = w.scrollTo = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scroll.call(
          w,
          arguments[0].left || arguments[0],
          arguments[0].top || arguments[1]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left,
        ~~arguments[0].top
      );
    };

    // w.scrollBy
    w.scrollBy = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollBy.call(
          w,
          arguments[0].left || arguments[0],
          arguments[0].top || arguments[1]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left + (w.scrollX || w.pageXOffset),
        ~~arguments[0].top + (w.scrollY || w.pageYOffset)
      );
    };

    // Element.prototype.scroll and Element.prototype.scrollTo
    Element.prototype.scroll = Element.prototype.scrollTo = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.elScroll.call(
            this,
            arguments[0].left || arguments[0],
            arguments[0].top || arguments[1]
        );
        return;
      }

      var left = arguments[0].left;
      var top = arguments[0].top;

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
          this,
          this,
          typeof left === 'number' ? left : this.scrollLeft,
          typeof top === 'number' ? top : this.scrollTop
      );
    };

    // Element.prototype.scrollBy
    Element.prototype.scrollBy = function() {
      var arg0 = arguments[0];

      if (typeof arg0 === 'object') {
        this.scroll({
          left: arg0.left + this.scrollLeft,
          top: arg0.top + this.scrollTop,
          behavior: arg0.behavior
        });
      } else {
        this.scroll(
          this.scrollLeft + arg0,
          this.scrollTop + arguments[1]
        );
      }
    };

    // Element.prototype.scrollIntoView
    Element.prototype.scrollIntoView = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollIntoView.call(
          this,
          arguments[0] === undefined ? true : arguments[0]
        );
        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      var scrollableParent = findScrollableParent(this);
      var parentRects = scrollableParent.getBoundingClientRect();
      var clientRects = this.getBoundingClientRect();

      if (scrollableParent !== d.body) {
        // reveal element inside parent
        smoothScroll.call(
          this,
          scrollableParent,
          scrollableParent.scrollLeft + clientRects.left - parentRects.left,
          scrollableParent.scrollTop + clientRects.top - parentRects.top
        );
        // reveal parent in viewport
        w.scrollBy({
          left: parentRects.left,
          top: parentRects.top,
          behavior: 'smooth'
        });
      } else {
        // reveal element in viewport
        w.scrollBy({
          left: clientRects.left,
          top: clientRects.top,
          behavior: 'smooth'
        });
      }
    };
  }

  if (typeof exports === 'object') {
    // commonjs
    module.exports = { polyfill: polyfill };
  } else {
    // global
    polyfill();
  }
})(window, document);

},{}],263:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],264:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],265:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":264,"_process":260,"inherits":263}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjbGllbnQvanMvLkljb25NYXAuanMiLCJjbGllbnQvanMvLlRlbXBsYXRlTWFwLmpzIiwiY2xpZW50L2pzLy5WaWV3TWFwLmpzIiwiY2xpZW50L2pzL0F1dG9Db21wbGV0ZS5qcyIsImNsaWVudC9qcy9Gb3JtYXQuanMiLCJjbGllbnQvanMvTXlFcnJvci5qcyIsImNsaWVudC9qcy9YaHIuanMiLCJjbGllbnQvanMvZmFjdG9yeS9WaWV3LmpzIiwiY2xpZW50L2pzL21haW4uanMiLCJjbGllbnQvanMvbW9kZWxzL0NvbGxlY3Rpb24uanMiLCJjbGllbnQvanMvbW9kZWxzL0NvbGxlY3Rpb25NYW5hZ2VyLmpzIiwiY2xpZW50L2pzL21vZGVscy9Db250YWN0SW5mby5qcyIsImNsaWVudC9qcy9tb2RlbHMvQ3NhRGVsaXZlcnkuanMiLCJjbGllbnQvanMvbW9kZWxzL0NzYVRyYW5zYWN0aW9uLmpzIiwiY2xpZW50L2pzL21vZGVscy9DdXJyZW50U2hhcmUuanMiLCJjbGllbnQvanMvbW9kZWxzL0N1c3RvbWVyLmpzIiwiY2xpZW50L2pzL21vZGVscy9EYXlPZldlZWsuanMiLCJjbGllbnQvanMvbW9kZWxzL0RlbGl2ZXJ5LmpzIiwiY2xpZW50L2pzL21vZGVscy9EZWxpdmVyeURhdGUuanMiLCJjbGllbnQvanMvbW9kZWxzL0RlbGl2ZXJ5Um91dGUuanMiLCJjbGllbnQvanMvbW9kZWxzL0RvY3VtZW50LmpzIiwiY2xpZW50L2pzL21vZGVscy9Ecm9wb2ZmLmpzIiwiY2xpZW50L2pzL21vZGVscy9GYXJtUGlja3VwLmpzIiwiY2xpZW50L2pzL21vZGVscy9GYXJtZXJNYXJrZXQuanMiLCJjbGllbnQvanMvbW9kZWxzL0Zvb2QuanMiLCJjbGllbnQvanMvbW9kZWxzL0luc3RhbmNlLmpzIiwiY2xpZW50L2pzL21vZGVscy9Mb2NhdGlvbnMuanMiLCJjbGllbnQvanMvbW9kZWxzL01lbWJlci5qcyIsImNsaWVudC9qcy9tb2RlbHMvTWVtYmVyRm9vZE9taXNzaW9uLmpzIiwiY2xpZW50L2pzL21vZGVscy9NZW1iZXJTZWFzb24uanMiLCJjbGllbnQvanMvbW9kZWxzL01lbWJlclNlbGVjdGlvbi5qcyIsImNsaWVudC9qcy9tb2RlbHMvTmF2LmpzIiwiY2xpZW50L2pzL21vZGVscy9PcmRlck9wdGlvbi5qcyIsImNsaWVudC9qcy9tb2RlbHMvUGVyc29uLmpzIiwiY2xpZW50L2pzL21vZGVscy9SZXNvdXJjZS5qcyIsImNsaWVudC9qcy9tb2RlbHMvUmVzdGF1cmFudC5qcyIsImNsaWVudC9qcy9tb2RlbHMvUmV0YWlsT3V0bGV0LmpzIiwiY2xpZW50L2pzL21vZGVscy9TaGFyZS5qcyIsImNsaWVudC9qcy9tb2RlbHMvU2hhcmVHcm91cERyb3BvZmYuanMiLCJjbGllbnQvanMvbW9kZWxzL1NoYXJlT3B0aW9uT3B0aW9uLmpzIiwiY2xpZW50L2pzL21vZGVscy9Vc2VyLmpzIiwiY2xpZW50L2pzL21vZGVscy9fX3Byb3RvX18uanMiLCJjbGllbnQvanMvcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIuanMiLCJjbGllbnQvanMvcGx1Z2lucy9zcGlubmVyLmpzIiwiY2xpZW50L2pzL3BvbHlmaWxsLmpzIiwiY2xpZW50L2pzL3JvdXRlci5qcyIsImNsaWVudC9qcy9zcGluLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9hZG1pbi5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvY3JlYXRlSW5zdGFuY2UuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL2NzYUN1c3RvbWl6YXRpb24uanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL2ZpZWxkRXJyb3IuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL2Zvcm0vQm9vbGVhbi5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvZm9ybS9EYXRlLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9mb3JtL0RheU9mV2Vlay5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvZm9ybS9GaWxlLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9mb3JtL1RleHQuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL2Zvcm0vVGV4dEFyZWEuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL2luc3RhbmNlUm93LmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9pbnZhbGlkTG9naW5FcnJvci5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvbG9naW4uanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL21vZGFsLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9yZXNvdXJjZS5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvcmVzb3VyY2VSb3cuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NlcnZlckVycm9yLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC9kYXRlU2VsZWN0aW9uLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvZGVsaXZlcnkuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC9kZWxpdmVyeU9wdGlvbi5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL2RlbGl2ZXJ5T3B0aW9ucy5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL2Ryb3BvZmYuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC9kcm9wb2Zmcy5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL2Zhcm1QaWNrdXBGZWVkYmFjay5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL2hvbWVEZWxpdmVyeUZlZWRiYWNrLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvcGF5bWVudE9wdGlvbi5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL3BheW1lbnRPcHRpb25zLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvcGlja3VwRGF0ZS5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL3BpY2t1cERhdGVzLmpzIiwiY2xpZW50L2pzL3RlbXBsYXRlcy9zaWdudXAvc2hhcmUuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC9zaGFyZU9wdGlvbi5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL3NoYXJlT3B0aW9ucy5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL3NoYXJlcy5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL3NpbmdsZVNoYXJlT3B0aW9ucy5qcyIsImNsaWVudC9qcy90ZW1wbGF0ZXMvc2lnbnVwL3N1bW1hcnkuanMiLCJjbGllbnQvanMvdGVtcGxhdGVzL3NpZ251cC92ZXJpZnlBZGRyZXNzLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0Fib3V0LmpzIiwiY2xpZW50L2pzL3ZpZXdzL0FkZFRyYW5zYWN0aW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0FkbWluLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0FkbWluSGVhZGVyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0FkbWluUGx1cy5qcyIsImNsaWVudC9qcy92aWV3cy9CdXR0b25GbG93LmpzIiwiY2xpZW50L2pzL3ZpZXdzL0NvbGxlY3Rpb25NYW5hZ2VyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0NvbnRhY3QuanMiLCJjbGllbnQvanMvdmlld3MvQ3NhLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0N1c3RvbWVySW5mby5qcyIsImNsaWVudC9qcy92aWV3cy9EZWxldGVyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0RyYWdnZXIuanMiLCJjbGllbnQvanMvdmlld3MvRm9vZE9taXNzaW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0Zvb3Rlci5qcyIsImNsaWVudC9qcy92aWV3cy9Gb3JtLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0dldEludm9sdmVkLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0hlYWRlci5qcyIsImNsaWVudC9qcy92aWV3cy9Ib21lLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0luc3RhbmNlUm93LmpzIiwiY2xpZW50L2pzL3ZpZXdzL0xpc3QuanMiLCJjbGllbnQvanMvdmlld3MvTG9jYXRpb25zLmpzIiwiY2xpZW50L2pzL3ZpZXdzL0xvZ2luLmpzIiwiY2xpZW50L2pzL3ZpZXdzL01hbmFnZUN1c3RvbWVyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL01lbWJlclR5cGVhaGVhZC5qcyIsImNsaWVudC9qcy92aWV3cy9NZW1iZXJzLmpzIiwiY2xpZW50L2pzL3ZpZXdzL015Vmlldy5qcyIsImNsaWVudC9qcy92aWV3cy9PcmRlck9wdGlvbnMuanMiLCJjbGllbnQvanMvdmlld3MvUmVwb3J0aW5nLmpzIiwiY2xpZW50L2pzL3ZpZXdzL1Jlc291cmNlLmpzIiwiY2xpZW50L2pzL3ZpZXdzL1Jlc291cmNlUm93LmpzIiwiY2xpZW50L2pzL3ZpZXdzL1NlYXNvbnMuanMiLCJjbGllbnQvanMvdmlld3MvU2hhcmVCb3guanMiLCJjbGllbnQvanMvdmlld3MvU2hhcmVQYXRjaC5qcyIsImNsaWVudC9qcy92aWV3cy9TaWdudXAuanMiLCJjbGllbnQvanMvdmlld3MvU3VibWl0dGVyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL1RvYXN0LmpzIiwiY2xpZW50L2pzL3ZpZXdzL1RyYW5zYWN0aW9ucy5qcyIsImNsaWVudC9qcy92aWV3cy9XZWVrT3B0aW9ucy5qcyIsImNsaWVudC9qcy92aWV3cy9fX3Byb3RvX18uanMiLCJjbGllbnQvanMvdmlld3MvbGliL09wdGltaXplZFJlc2l6ZS5qcyIsImNsaWVudC9qcy92aWV3cy9tb2RhbC5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvRGF0ZVNlbGVjdGlvbi5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvRGVsaXZlcnkuanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL0RlbGl2ZXJ5T3B0aW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9EZWxpdmVyeU9wdGlvbnMuanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL0Ryb3BvZmYuanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL0Ryb3BvZmZzLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9NZW1iZXJJbmZvLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9QYXltZW50T3B0aW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9QYXltZW50T3B0aW9ucy5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvUGlja3VwRGF0ZS5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvUGlja3VwRGF0ZXMuanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL1NoYXJlLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9TaGFyZU9wdGlvbi5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvU2hhcmVPcHRpb25zLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3NpZ251cC9TaGFyZXMuanMiLCJjbGllbnQvanMvdmlld3Mvc2lnbnVwL1NpbmdsZVNoYXJlT3B0aW9ucy5qcyIsImNsaWVudC9qcy92aWV3cy9zaWdudXAvU3VtbWFyeS5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvQWJvdXQuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0FkZFRyYW5zYWN0aW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9BZG1pbkhlYWRlci5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvQWRtaW5QbHVzLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9CdXR0b25GbG93LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9Db2xsZWN0aW9uTWFuYWdlci5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvQ29udGFjdC5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvQ3NhLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9Dc2FJdGVtLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9Dc2FUcmFuc2FjdGlvbi5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvQ3VzdG9tZXJJbmZvLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9EZWxldGVyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9EZWxpdmVyeURhdGUuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0RvY3VtZW50LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9EcmFnZ2VyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9FZGl0Q3NhVHJhbnNhY3Rpb24uanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0ZpZWxkRWRpdC5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvRm9vZE9taXNzaW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9Gb290ZXIuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0Zvcm0uanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0dldEludm9sdmVkLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9IZWFkZXIuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0hvbWUuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0luZm9XaW5kb3cuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0xpc3QuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL0xvY2F0aW9uLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9Mb2NhdGlvbnMuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL01hbmFnZUN1c3RvbWVyLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9NZW1iZXJJbmZvLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9NZW1iZXJUeXBlYWhlYWQuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL01lbWJlcnMuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL09yZGVyT3B0aW9ucy5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvUmVwb3J0aW5nLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9TZWFzb25zLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9TaGFyZUJveC5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvU2hhcmVFeGFtcGxlLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9TaGFyZVBhdGNoLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9TdGFmZlByb2ZpbGUuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL1RvYXN0LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9UcmFuc2FjdGlvbnMuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL1dlZWtPcHRpb25zLmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9kZWxpdmVyeU1hdHJpeC5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvbGliL2NhcmV0LWRvd24uanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL2xpYi9jaGVja21hcmsuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL2xpYi9lZGl0LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9saWIvZXJyb3IuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL2xpYi9leC5qcyIsImNsaWVudC9qcy92aWV3cy90ZW1wbGF0ZXMvbGliL2dhcmJhZ2UuanMiLCJjbGllbnQvanMvdmlld3MvdGVtcGxhdGVzL2xpYi9qdXN0aWZ5LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3RlbXBsYXRlcy9saWIvbGVmdEFycm93LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3V0aWwvQ3VzdG9tQ29udGVudC5qcyIsImNsaWVudC9qcy92aWV3cy91dGlsL0Zvcm0uanMiLCJjbGllbnQvanMvdmlld3MvdXRpbC9MaXN0LmpzIiwiY2xpZW50L2pzL3ZpZXdzL3V0aWwvTGlzdEl0ZW0uanMiLCJjbGllbnQvanMvdmlld3MvdXRpbC9UYWJsZS5qcyIsImxpYi9Nb2RlbC5qcyIsImxpYi9NeUVycm9yLmpzIiwibGliL015T2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2FtZGVmaW5lL2FtZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2pzL25wbS5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvYWZmaXguanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2FsZXJ0LmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9idXR0b24uanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2Nhcm91c2VsLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9jb2xsYXBzZS5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvZHJvcGRvd24uanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL21vZGFsLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9wb3BvdmVyLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zY3JvbGxzcHkuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3RhYi5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvdG9vbHRpcC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvdHJhbnNpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L2xpYi9fZW1wdHkuanMiLCJub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMucnVudGltZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9hc3QuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9iYXNlLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvY29kZS1nZW4uanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9jb21waWxlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2hlbHBlcnMuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9qYXZhc2NyaXB0LWNvbXBpbGVyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvcHJpbnRlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL3Zpc2l0b3IuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci93aGl0ZXNwYWNlLWNvbnRyb2wuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9kZWNvcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy9pbmxpbmUuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9leGNlcHRpb24uanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2lmLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb2cuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2xvb2t1cC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9ydW50aW1lLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvYXJyYXktc2V0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvYmFzZTY0LXZscS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwL2Jhc2U2NC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwL2JpbmFyeS1zZWFyY2guanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC9tYXBwaW5nLWxpc3QuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC9xdWljay1zb3J0LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvc291cmNlLW1hcC1jb25zdW1lci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwL3NvdXJjZS1tYXAtZ2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvc291cmNlLW5vZGUuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2ludGwvbG9jYWxlLWRhdGEvanNvbnAvZW4uanMiLCJub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9xL3EuanMiLCJub2RlX21vZHVsZXMvc21vb3Roc2Nyb2xsLXBvbHlmaWxsL2Rpc3Qvc21vb3Roc2Nyb2xsLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLE9BQU8sT0FBUCxHQUFlO0FBQ2QsZUFBYyxRQUFRLGtDQUFSLENBREE7QUFFZCxjQUFhLFFBQVEsaUNBQVIsQ0FGQztBQUdkLFNBQVEsUUFBUSw0QkFBUixDQUhNO0FBSWQsVUFBUyxRQUFRLDZCQUFSLENBSks7QUFLZCxPQUFNLFFBQVEsMEJBQVIsQ0FMUTtBQU1kLFlBQVcsUUFBUSwrQkFBUixDQU5HO0FBT2QsWUFBVyxRQUFRLCtCQUFSLENBUEc7QUFRZCxjQUFhLFFBQVEsaUNBQVI7QUFSQyxDQUFmOzs7OztBQ0FBLE9BQU8sT0FBUCxHQUFlO0FBQ2QsUUFBTyxRQUFRLHlCQUFSLENBRE87QUFFZCxpQkFBZ0IsUUFBUSxrQ0FBUixDQUZGO0FBR2QsY0FBYSxRQUFRLCtCQUFSLENBSEM7QUFJZCxZQUFXLFFBQVEsNkJBQVIsQ0FKRztBQUtkLGFBQVksUUFBUSw4QkFBUixDQUxFO0FBTWQsb0JBQW1CLFFBQVEscUNBQVIsQ0FOTDtBQU9kLFVBQVMsUUFBUSwyQkFBUixDQVBLO0FBUWQsTUFBSyxRQUFRLHVCQUFSLENBUlM7QUFTZCxVQUFTLFFBQVEsMkJBQVIsQ0FUSztBQVVkLGlCQUFnQixRQUFRLGtDQUFSLENBVkY7QUFXZCxlQUFjLFFBQVEsZ0NBQVIsQ0FYQTtBQVlkLFVBQVMsUUFBUSwyQkFBUixDQVpLO0FBYWQsZUFBYyxRQUFRLGdDQUFSLENBYkE7QUFjZCxXQUFVLFFBQVEsNEJBQVIsQ0FkSTtBQWVkLFVBQVMsUUFBUSwyQkFBUixDQWZLO0FBZ0JkLHFCQUFvQixRQUFRLHNDQUFSLENBaEJOO0FBaUJkLFlBQVcsUUFBUSw2QkFBUixDQWpCRztBQWtCZCxlQUFjLFFBQVEsZ0NBQVIsQ0FsQkE7QUFtQmQsU0FBUSxRQUFRLDBCQUFSLENBbkJNO0FBb0JkLE9BQU0sUUFBUSx3QkFBUixDQXBCUTtBQXFCZCxjQUFhLFFBQVEsK0JB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TyxPQUFQLEdBQWlCLFFBQWpCOzs7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM3U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbGdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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RUFBQyxFQUFFLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBQyxlQUFlLEVBQUMsRUFBRSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsZ0JBQWdCLEVBQUMsRUFBRSxFQUFDLGlCQUFpQixFQUFDLEVBQUUsRUFBQyxjQUFjLEVBQUMsRUFBRSxFQUFDLG9CQUFvQixFQUFDLEVBQUUsRUFBQyxZQUFZLEVBQUMsRUFBRSxFQUFDLGFBQWEsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLEVBQUUsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLG1CQUFtQixFQUFDLEVBQUUsRUFBQyxvQkFBb0IsRUFBQyxFQUFFLEVBQUMsUUFBUSxFQUFDLEVBQUUsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxFQUFFLEVBQUMsV0FBVyxFQUFDLEVBQUUsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsS0FBSyxFQUFDO0FBQzVlLG9CQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcnNCLHFCQUFhLEVBQUUsU0FBUyxTQUFTLENBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUMsRUFBRTtjQUNuRTs7QUFFTixnQkFBSSxFQUFFLEdB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LEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkYsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RGLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDckosMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNySSwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3JJLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDL0UsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFDSCx3QkFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQzt3QkFDN0UsT0FBTyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pELDJCQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQzs7QUFFdkIsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7O0FBRXRFLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUM7QUFDMUUsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0SCwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RILDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQ0gsd0JBQUksQ0FBQyxDQUFDLEdBQUc7QUFDUCw0QkFBSSxFQUFFLGtCQUFrQjtBQUN4Qiw0QkFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDO0FBQ2QsOEJBQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQztBQUNoQiw0QkFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDO0FBQ2QsOEJBQU0sRUFBRSxFQUFFO0FBQ1YsNkJBQUssRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDLDJCQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO3FCQUN6QixDQUFDOztBQUVOLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDOUcsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFDSCx3QkFBSSxDQUFDLENBQUMsR0FBRztBQUNQLDRCQUFJLEVBQUUsZUFBZTtBQUNyQiw0QkFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDO0FBQ2QsOEJBQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQztBQUNoQiw0QkFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDO0FBQ2QsMkJBQUcsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7cUJBQ3pCLENBQUM7O0FBRU4sMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztBQUN6RSwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztBQUNuRywwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztBQUNwRywwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUM7QUFDcEgsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztBQUMzSCwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztBQUM3RywwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUM7QUFDOUYsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4RCwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFFLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEFBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hHLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQzNELDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsc0JBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMxQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHNCQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUIsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyxzQkFBRSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUIsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEdBQUc7QUFBQyx3QkFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxHQUFHO0FBQUMsc0JBQUUsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9CLDBCQUFNO0FBQUEsYUFDTDtTQUNBO0FBQ0QsYUFBSyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDO0FBQ3hnVyxzQkFBYyxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUs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RTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQUFBQyxPQUFPLEVBQUUsQ0FBQztBQUNuQywwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHdCQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQUFBQyxPQUFPLEVBQUUsQ0FBQztBQUNuQywwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUNMLHdCQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2Qix3QkFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2hCLHdCQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVwQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUNMLHdCQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDaEIsMkJBQU8sRUFBRSxDQUFDOztBQUVaLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sRUFBRSxDQUFDO0FBQ2xCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFOztBQUNQLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxBQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ25DLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsd0JBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxBQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ25DLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsdUJBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQUMsT0FBTyxFQUFFLENBQUM7QUFDL0QsMEJBQU07QUFBQSxBQUNOLHFCQUFLLEVBQUU7QUFBQyx1QkFBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQUFBQyxPQUFPLEVBQUUsQ0FBQztBQUMvRCwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLDJCQUFPLEVBQUUsQ0FBQztBQUNsQiwwQkFBTTtBQUFBLEFBQ04scUJBQUssRUFBRTtBQUFDLHVCQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBQyxJQUFJLENBQUMsQ0FBQyxBQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3ZFLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sU0FBUyxDQUFDO0FBQ3pCLDBCQUFNO0FBQUEsQUFDTixxQkFBSyxFQUFFO0FBQUMsMkJBQU8sQ0FBQyxDQUFDO0FBQ2pCLDBCQUFNO0FBQUEsYUFDTDtTQUNBLENBQUM7QUFDRixhQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsMEJBQTBCLEVBQUMsZUFBZSxFQUFDLCtDQUErQyxFQUFDLHdCQUF3QixFQUFDLG9FQUFvRSxFQUFDLDhCQUE4QixFQUFDLHlCQUF5QixFQUFDLFNBQVMsRUFBQyxTQUFTLEVBQUMsZUFBZSxFQUFDLGVBQWUsRUFBQyxnQkFBZ0IsRUFBQyxpQkFBaUIsRUFBQyxtQkFBbUIsRUFBQyxpQkFBaUIsRUFBQyw0QkFBNEIsRUFBQyxpQ0FBaUMsRUFBQyxpQkFBaUIsRUFBQyx3QkFBd0IsRUFBQyxpQkFBaUIsRUFBQyxnQkFBZ0IsRUFBQyxrQkFBa0IsRUFBQyw0QkFBNEIsRUFBQyxrQkFBa0IsRUFBQyxRQUFRLEVBQUMsV0FBVyxFQUFDLDJCQUEyQixFQUFDLFlBQVksRUFBQyxVQUFVLEVBQUMsaUJBQWlCLEVBQUMsZUFBZSxFQUFDLHNCQUFzQixFQUFDLHNCQUFzQixFQUFDLFFBQVEsRUFBQyx3QkFBd0IsRUFBQyx5QkFBeUIsRUFBQyw2QkFBNkIsRUFBQyx3QkFBd0IsRUFBQyx5Q0FBeUMsRUFBQyxjQUFjLEVBQUMsU0FBUyxFQUFDLHlEQUF5RCxFQUFDLHdCQUF3QixFQUFDLFFBQVEsRUFBQyxRQUFRLENBQUMsQ0FBQztBQUNuZ0MsYUFBSyxDQUFDLFVBQVUsR0FBRyxFQUFDLElBQUksRUFBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsRUFBQyxXQUFXLEVBQUMsS0FBSyxFQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsV0FBVyxFQUFDLEtBQUssRUFBQyxFQUFDLEtBQUssRUFBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFdBQVcsRUFBQyxLQUFLLEVBQUMsRUFBQyxLQUFLLEVBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLFdBQVcsRUFBQyxLQUFLLEVBQUMsRUFBQyxTQUFTLEVBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLFdBQVcsRUFBQyxJQUFJLEVBQUMsRUFBQyxDQUFDO0FBQzNVLGVBQU8sS0FBSyxDQUFDO0tBQUMsQ0FBQSxFQUFHLENBQUE7QUFDakIsVUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7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QUFHLEVBQUUsQ0FBQSxHQUFJLEVBQUUsQ0FBQztDQUNwRDs7OztBQzNHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9ZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsWEE7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2hPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN6aEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0VUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwibW9kdWxlLmV4cG9ydHM9e1xuXHRcImNhcmV0LWRvd25cIjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvbGliL2NhcmV0LWRvd24nKSxcblx0XCJjaGVja21hcmtcIjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvbGliL2NoZWNrbWFyaycpLFxuXHRcImVkaXRcIjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvbGliL2VkaXQnKSxcblx0XCJlcnJvclwiOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9saWIvZXJyb3InKSxcblx0XCJleFwiOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9saWIvZXgnKSxcblx0XCJnYXJiYWdlXCI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL2xpYi9nYXJiYWdlJyksXG5cdFwianVzdGlmeVwiOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9saWIvanVzdGlmeScpLFxuXHRcImxlZnRBcnJvd1wiOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9saWIvbGVmdEFycm93Jylcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG5cdEFib3V0OiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9BYm91dCcpLFxuXHRBZGRUcmFuc2FjdGlvbjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvQWRkVHJhbnNhY3Rpb24nKSxcblx0QWRtaW5IZWFkZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0FkbWluSGVhZGVyJyksXG5cdEFkbWluUGx1czogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvQWRtaW5QbHVzJyksXG5cdEJ1dHRvbkZsb3c6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0J1dHRvbkZsb3cnKSxcblx0Q29sbGVjdGlvbk1hbmFnZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0NvbGxlY3Rpb25NYW5hZ2VyJyksXG5cdENvbnRhY3Q6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0NvbnRhY3QnKSxcblx0Q3NhOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Dc2EnKSxcblx0Q3NhSXRlbTogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvQ3NhSXRlbScpLFxuXHRDc2FUcmFuc2FjdGlvbjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvQ3NhVHJhbnNhY3Rpb24nKSxcblx0Q3VzdG9tZXJJbmZvOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9DdXN0b21lckluZm8nKSxcblx0RGVsZXRlcjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvRGVsZXRlcicpLFxuXHREZWxpdmVyeURhdGU6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0RlbGl2ZXJ5RGF0ZScpLFxuXHREb2N1bWVudDogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvRG9jdW1lbnQnKSxcblx0RHJhZ2dlcjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvRHJhZ2dlcicpLFxuXHRFZGl0Q3NhVHJhbnNhY3Rpb246IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0VkaXRDc2FUcmFuc2FjdGlvbicpLFxuXHRGaWVsZEVkaXQ6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0ZpZWxkRWRpdCcpLFxuXHRGb29kT21pc3Npb246IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0Zvb2RPbWlzc2lvbicpLFxuXHRGb290ZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0Zvb3RlcicpLFxuXHRGb3JtOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Gb3JtJyksXG5cdEdldEludm9sdmVkOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9HZXRJbnZvbHZlZCcpLFxuXHRIZWFkZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0hlYWRlcicpLFxuXHRIb21lOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Ib21lJyksXG5cdEluZm9XaW5kb3c6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL0luZm9XaW5kb3cnKSxcblx0TGlzdDogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvTGlzdCcpLFxuXHRMb2NhdGlvbjogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvTG9jYXRpb24nKSxcblx0TG9jYXRpb25zOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Mb2NhdGlvbnMnKSxcblx0TWFuYWdlQ3VzdG9tZXI6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL01hbmFnZUN1c3RvbWVyJyksXG5cdE1lbWJlckluZm86IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL01lbWJlckluZm8nKSxcblx0TWVtYmVyVHlwZWFoZWFkOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9NZW1iZXJUeXBlYWhlYWQnKSxcblx0TWVtYmVyczogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvTWVtYmVycycpLFxuXHRPcmRlck9wdGlvbnM6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL09yZGVyT3B0aW9ucycpLFxuXHRSZXBvcnRpbmc6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL1JlcG9ydGluZycpLFxuXHRTZWFzb25zOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9TZWFzb25zJyksXG5cdFNoYXJlQm94OiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9TaGFyZUJveCcpLFxuXHRTaGFyZUV4YW1wbGU6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL1NoYXJlRXhhbXBsZScpLFxuXHRTaGFyZVBhdGNoOiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9TaGFyZVBhdGNoJyksXG5cdFN0YWZmUHJvZmlsZTogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvU3RhZmZQcm9maWxlJyksXG5cdFRvYXN0OiByZXF1aXJlKCcuL3ZpZXdzL3RlbXBsYXRlcy9Ub2FzdCcpLFxuXHRUcmFuc2FjdGlvbnM6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL1RyYW5zYWN0aW9ucycpLFxuXHRXZWVrT3B0aW9uczogcmVxdWlyZSgnLi92aWV3cy90ZW1wbGF0ZXMvV2Vla09wdGlvbnMnKSxcblx0ZGVsaXZlcnlNYXRyaXg6IHJlcXVpcmUoJy4vdmlld3MvdGVtcGxhdGVzL2RlbGl2ZXJ5TWF0cml4Jylcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG5cdEFib3V0OiByZXF1aXJlKCcuL3ZpZXdzL0Fib3V0JyksXG5cdEFkZFRyYW5zYWN0aW9uOiByZXF1aXJlKCcuL3ZpZXdzL0FkZFRyYW5zYWN0aW9uJyksXG5cdEFkbWluOiByZXF1aXJlKCcuL3ZpZXdzL0FkbWluJyksXG5cdEFkbWluSGVhZGVyOiByZXF1aXJlKCcuL3ZpZXdzL0FkbWluSGVhZGVyJyksXG5cdEFkbWluUGx1czogcmVxdWlyZSgnLi92aWV3cy9BZG1pblBsdXMnKSxcblx0QnV0dG9uRmxvdzogcmVxdWlyZSgnLi92aWV3cy9CdXR0b25GbG93JyksXG5cdENvbGxlY3Rpb25NYW5hZ2VyOiByZXF1aXJlKCcuL3ZpZXdzL0NvbGxlY3Rpb25NYW5hZ2VyJyksXG5cdENvbnRhY3Q6IHJlcXVpcmUoJy4vdmlld3MvQ29udGFjdCcpLFxuXHRDc2E6IHJlcXVpcmUoJy4vdmlld3MvQ3NhJyksXG5cdEN1c3RvbWVySW5mbzogcmVxdWlyZSgnLi92aWV3cy9DdXN0b21lckluZm8nKSxcblx0RGVsZXRlcjogcmVxdWlyZSgnLi92aWV3cy9EZWxldGVyJyksXG5cdERyYWdnZXI6IHJlcXVpcmUoJy4vdmlld3MvRHJhZ2dlcicpLFxuXHRGb29kT21pc3Npb246IHJlcXVpcmUoJy4vdmlld3MvRm9vZE9taXNzaW9uJyksXG5cdEZvb3RlcjogcmVxdWlyZSgnLi92aWV3cy9Gb290ZXInKSxcblx0Rm9ybTogcmVxdWlyZSgnLi92aWV3cy9Gb3JtJyksXG5cdEdldEludm9sdmVkOiByZXF1aXJlKCcuL3ZpZXdzL0dldEludm9sdmVkJyksXG5cdEhlYWRlcjogcmVxdWlyZSgnLi92aWV3cy9IZWFkZXInKSxcblx0SG9tZTogcmVxdWlyZSgnLi92aWV3cy9Ib21lJyksXG5cdEluc3RhbmNlUm93OiByZXF1aXJlKCcuL3ZpZXdzL0luc3RhbmNlUm93JyksXG5cdExpc3Q6IHJlcXVpcmUoJy4vdmlld3MvTGlzdCcpLFxuXHRMb2NhdGlvbnM6IHJlcXVpcmUoJy4vdmlld3MvTG9jYXRpb25zJyksXG5cdE1hbmFnZUN1c3RvbWVyOiByZXF1aXJlKCcuL3ZpZXdzL01hbmFnZUN1c3RvbWVyJyksXG5cdE1lbWJlclR5cGVhaGVhZDogcmVxdWlyZSgnLi92aWV3cy9NZW1iZXJUeXBlYWhlYWQnKSxcblx0TWVtYmVyczogcmVxdWlyZSgnLi92aWV3cy9NZW1iZXJzJyksXG5cdE15VmlldzogcmVxdWlyZSgnLi92aWV3cy9NeVZpZXcnKSxcblx0T3JkZXJPcHRpb25zOiByZXF1aXJlKCcuL3ZpZXdzL09yZGVyT3B0aW9ucycpLFxuXHRSZXBvcnRpbmc6IHJlcXVpcmUoJy4vdmlld3MvUmVwb3J0aW5nJyksXG5cdFJlc291cmNlOiByZXF1aXJlKCcuL3ZpZXdzL1Jlc291cmNlJyksXG5cdFJlc291cmNlUm93OiByZXF1aXJlKCcuL3ZpZXdzL1Jlc291cmNlUm93JyksXG5cdFNlYXNvbnM6IHJlcXVpcmUoJy4vdmlld3MvU2Vhc29ucycpLFxuXHRTaGFyZUJveDogcmVxdWlyZSgnLi92aWV3cy9TaGFyZUJveCcpLFxuXHRTaGFyZVBhdGNoOiByZXF1aXJlKCcuL3ZpZXdzL1NoYXJlUGF0Y2gnKSxcblx0U2lnbnVwOiByZXF1aXJlKCcuL3ZpZXdzL1NpZ251cCcpLFxuXHRTdWJtaXR0ZXI6IHJlcXVpcmUoJy4vdmlld3MvU3VibWl0dGVyJyksXG5cdFRvYXN0OiByZXF1aXJlKCcuL3ZpZXdzL1RvYXN0JyksXG5cdFRyYW5zYWN0aW9uczogcmVxdWlyZSgnLi92aWV3cy9UcmFuc2FjdGlvbnMnKSxcblx0V2Vla09wdGlvbnM6IHJlcXVpcmUoJy4vdmlld3MvV2Vla09wdGlvbnMnKSxcblx0bW9kYWw6IHJlcXVpcmUoJy4vdmlld3MvbW9kYWwnKVxufSIsIi8vIEphdmFTY3JpcHQgYXV0b0NvbXBsZXRlIHYxLjAuNFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1BpeGFiYXkvSmF2YVNjcmlwdC1hdXRvQ29tcGxldGVcbnZhciBhdXRvQ29tcGxldGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe2Z1bmN0aW9uIHQoZSx0KXtyZXR1cm4gZS5jbGFzc0xpc3Q/ZS5jbGFzc0xpc3QuY29udGFpbnModCk6bmV3IFJlZ0V4cChcIlxcXFxiXCIrdCtcIlxcXFxiXCIpLnRlc3QoZS5jbGFzc05hbWUpfWZ1bmN0aW9uIG8oZSx0LG8pe2UuYXR0YWNoRXZlbnQ/ZS5hdHRhY2hFdmVudChcIm9uXCIrdCxvKTplLmFkZEV2ZW50TGlzdGVuZXIodCxvKX1mdW5jdGlvbiBzKGUsdCxvKXtlLmRldGFjaEV2ZW50P2UuZGV0YWNoRXZlbnQoXCJvblwiK3Qsbyk6ZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsbyl9ZnVuY3Rpb24gbihlLHMsbixsKXtvKGx8fGRvY3VtZW50LHMsZnVuY3Rpb24obyl7Zm9yKHZhciBzLGw9by50YXJnZXR8fG8uc3JjRWxlbWVudDtsJiYhKHM9dChsLGUpKTspbD1sLnBhcmVudEVsZW1lbnQ7cyYmbi5jYWxsKGwsbyl9KX1pZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKXt2YXIgbD17c2VsZWN0b3I6MCxzb3VyY2U6MCxtaW5DaGFyczozLGRlbGF5OjE1MCxvZmZzZXRMZWZ0OjAsb2Zmc2V0VG9wOjEsY2FjaGU6MSxtZW51Q2xhc3M6XCJcIixyZW5kZXJJdGVtOmZ1bmN0aW9uKGUsdCl7dD10LnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZyxcIlxcXFwkJlwiKTt2YXIgbz1uZXcgUmVnRXhwKFwiKFwiK3Quc3BsaXQoXCIgXCIpLmpvaW4oXCJ8XCIpK1wiKVwiLFwiZ2lcIik7cmV0dXJuJzxkaXYgY2xhc3M9XCJhdXRvY29tcGxldGUtc3VnZ2VzdGlvblwiIGRhdGEtdmFsPVwiJytlKydcIj4nK2UucmVwbGFjZShvLFwiPGI+JDE8L2I+XCIpK1wiPC9kaXY+XCJ9LG9uU2VsZWN0OmZ1bmN0aW9uKCl7fX07Zm9yKHZhciBjIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShjKSYmKGxbY109ZVtjXSk7Zm9yKHZhciBhPVwib2JqZWN0XCI9PXR5cGVvZiBsLnNlbGVjdG9yP1tsLnNlbGVjdG9yXTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGwuc2VsZWN0b3IpLHU9MDt1PGEubGVuZ3RoO3UrKyl7dmFyIGk9YVt1XTtpLnNjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksaS5zYy5jbGFzc05hbWU9XCJhdXRvY29tcGxldGUtc3VnZ2VzdGlvbnMgXCIrbC5tZW51Q2xhc3MsaS5hdXRvY29tcGxldGVBdHRyPWkuZ2V0QXR0cmlidXRlKFwiYXV0b2NvbXBsZXRlXCIpLGkuc2V0QXR0cmlidXRlKFwiYXV0b2NvbXBsZXRlXCIsXCJvZmZcIiksaS5jYWNoZT17fSxpLmxhc3RfdmFsPVwiXCIsaS51cGRhdGVTQz1mdW5jdGlvbihlLHQpe3ZhciBvPWkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7aWYoaS5zYy5zdHlsZS5sZWZ0PU1hdGgucm91bmQoby5sZWZ0Kyh3aW5kb3cucGFnZVhPZmZzZXR8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KStsLm9mZnNldExlZnQpK1wicHhcIixpLnNjLnN0eWxlLnRvcD1NYXRoLnJvdW5kKG8uYm90dG9tKyh3aW5kb3cucGFnZVlPZmZzZXR8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApK2wub2Zmc2V0VG9wKStcInB4XCIsaS5zYy5zdHlsZS53aWR0aD1NYXRoLnJvdW5kKG8ucmlnaHQtby5sZWZ0KStcInB4XCIsIWUmJihpLnNjLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLGkuc2MubWF4SGVpZ2h0fHwoaS5zYy5tYXhIZWlnaHQ9cGFyc2VJbnQoKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlP2dldENvbXB1dGVkU3R5bGUoaS5zYyxudWxsKTppLnNjLmN1cnJlbnRTdHlsZSkubWF4SGVpZ2h0KSksaS5zYy5zdWdnZXN0aW9uSGVpZ2h0fHwoaS5zYy5zdWdnZXN0aW9uSGVpZ2h0PWkuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvblwiKS5vZmZzZXRIZWlnaHQpLGkuc2Muc3VnZ2VzdGlvbkhlaWdodCkpaWYodCl7dmFyIHM9aS5zYy5zY3JvbGxUb3Asbj10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcC1pLnNjLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtuK2kuc2Muc3VnZ2VzdGlvbkhlaWdodC1pLnNjLm1heEhlaWdodD4wP2kuc2Muc2Nyb2xsVG9wPW4raS5zYy5zdWdnZXN0aW9uSGVpZ2h0K3MtaS5zYy5tYXhIZWlnaHQ6MD5uJiYoaS5zYy5zY3JvbGxUb3A9bitzKX1lbHNlIGkuc2Muc2Nyb2xsVG9wPTB9LG8od2luZG93LFwicmVzaXplXCIsaS51cGRhdGVTQyksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpLnNjKSxuKFwiYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25cIixcIm1vdXNlbGVhdmVcIixmdW5jdGlvbigpe3ZhciBlPWkuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvbi5zZWxlY3RlZFwiKTtlJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5jbGFzc05hbWU9ZS5jbGFzc05hbWUucmVwbGFjZShcInNlbGVjdGVkXCIsXCJcIil9LDIwKX0saS5zYyksbihcImF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uXCIsXCJtb3VzZW92ZXJcIixmdW5jdGlvbigpe3ZhciBlPWkuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvbi5zZWxlY3RlZFwiKTtlJiYoZS5jbGFzc05hbWU9ZS5jbGFzc05hbWUucmVwbGFjZShcInNlbGVjdGVkXCIsXCJcIikpLHRoaXMuY2xhc3NOYW1lKz1cIiBzZWxlY3RlZFwifSxpLnNjKSxuKFwiYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25cIixcIm1vdXNlZG93blwiLGZ1bmN0aW9uKGUpe2lmKHQodGhpcyxcImF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uXCIpKXt2YXIgbz10aGlzLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsXCIpO2kudmFsdWU9byxsLm9uU2VsZWN0KGUsbyx0aGlzKSxpLnNjLnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9fSxpLnNjKSxpLmJsdXJIYW5kbGVyPWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25zOmhvdmVyXCIpfWNhdGNoKHQpe3ZhciBlPTB9ZT9pIT09ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCYmc2V0VGltZW91dChmdW5jdGlvbigpe2kuZm9jdXMoKX0sMjApOihpLmxhc3RfdmFsPWkudmFsdWUsaS5zYy5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnNjLnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9LDM1MCkpfSxvKGksXCJibHVyXCIsaS5ibHVySGFuZGxlcik7dmFyIHI9ZnVuY3Rpb24oZSl7dmFyIHQ9aS52YWx1ZTtpZihpLmNhY2hlW3RdPWUsZS5sZW5ndGgmJnQubGVuZ3RoPj1sLm1pbkNoYXJzKXtmb3IodmFyIG89XCJcIixzPTA7czxlLmxlbmd0aDtzKyspbys9bC5yZW5kZXJJdGVtKGVbc10sdCk7aS5zYy5pbm5lckhUTUw9byxpLnVwZGF0ZVNDKDApfWVsc2UgaS5zYy5zdHlsZS5kaXNwbGF5PVwibm9uZVwifTtpLmtleWRvd25IYW5kbGVyPWZ1bmN0aW9uKGUpe3ZhciB0PXdpbmRvdy5ldmVudD9lLmtleUNvZGU6ZS53aGljaDtpZigoNDA9PXR8fDM4PT10KSYmaS5zYy5pbm5lckhUTUwpe3ZhciBvLHM9aS5zYy5xdWVyeVNlbGVjdG9yKFwiLmF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uLnNlbGVjdGVkXCIpO3JldHVybiBzPyhvPTQwPT10P3MubmV4dFNpYmxpbmc6cy5wcmV2aW91c1NpYmxpbmcsbz8ocy5jbGFzc05hbWU9cy5jbGFzc05hbWUucmVwbGFjZShcInNlbGVjdGVkXCIsXCJcIiksby5jbGFzc05hbWUrPVwiIHNlbGVjdGVkXCIsaS52YWx1ZT1vLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsXCIpKToocy5jbGFzc05hbWU9cy5jbGFzc05hbWUucmVwbGFjZShcInNlbGVjdGVkXCIsXCJcIiksaS52YWx1ZT1pLmxhc3RfdmFsLG89MCkpOihvPTQwPT10P2kuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvblwiKTppLnNjLmNoaWxkTm9kZXNbaS5zYy5jaGlsZE5vZGVzLmxlbmd0aC0xXSxvLmNsYXNzTmFtZSs9XCIgc2VsZWN0ZWRcIixpLnZhbHVlPW8uZ2V0QXR0cmlidXRlKFwiZGF0YS12YWxcIikpLGkudXBkYXRlU0MoMCxvKSwhMX1pZigyNz09dClpLnZhbHVlPWkubGFzdF92YWwsaS5zYy5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Vsc2UgaWYoMTM9PXR8fDk9PXQpe3ZhciBzPWkuc2MucXVlcnlTZWxlY3RvcihcIi5hdXRvY29tcGxldGUtc3VnZ2VzdGlvbi5zZWxlY3RlZFwiKTtzJiZcIm5vbmVcIiE9aS5zYy5zdHlsZS5kaXNwbGF5JiYobC5vblNlbGVjdChlLHMuZ2V0QXR0cmlidXRlKFwiZGF0YS12YWxcIikscyksc2V0VGltZW91dChmdW5jdGlvbigpe2kuc2Muc3R5bGUuZGlzcGxheT1cIm5vbmVcIn0sMjApKX19LG8oaSxcImtleWRvd25cIixpLmtleWRvd25IYW5kbGVyKSxpLmtleXVwSGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD13aW5kb3cuZXZlbnQ/ZS5rZXlDb2RlOmUud2hpY2g7aWYoIXR8fCgzNT50fHx0PjQwKSYmMTMhPXQmJjI3IT10KXt2YXIgbz1pLnZhbHVlO2lmKG8ubGVuZ3RoPj1sLm1pbkNoYXJzKXtpZihvIT1pLmxhc3RfdmFsKXtpZihpLmxhc3RfdmFsPW8sY2xlYXJUaW1lb3V0KGkudGltZXIpLGwuY2FjaGUpe2lmKG8gaW4gaS5jYWNoZSlyZXR1cm4gdm9pZCByKGkuY2FjaGVbb10pO2Zvcih2YXIgcz0xO3M8by5sZW5ndGgtbC5taW5DaGFycztzKyspe3ZhciBuPW8uc2xpY2UoMCxvLmxlbmd0aC1zKTtpZihuIGluIGkuY2FjaGUmJiFpLmNhY2hlW25dLmxlbmd0aClyZXR1cm4gdm9pZCByKFtdKX19aS50aW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bC5zb3VyY2UobyxyKX0sbC5kZWxheSl9fWVsc2UgaS5sYXN0X3ZhbD1vLGkuc2Muc3R5bGUuZGlzcGxheT1cIm5vbmVcIn19LG8oaSxcImtleXVwXCIsaS5rZXl1cEhhbmRsZXIpLGkuZm9jdXNIYW5kbGVyPWZ1bmN0aW9uKGUpe2kubGFzdF92YWw9XCJcXG5cIixpLmtleXVwSGFuZGxlcihlKX0sbC5taW5DaGFyc3x8byhpLFwiZm9jdXNcIixpLmZvY3VzSGFuZGxlcil9dGhpcy5kZXN0cm95PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPTA7ZTxhLmxlbmd0aDtlKyspe3ZhciB0PWFbZV07cyh3aW5kb3csXCJyZXNpemVcIix0LnVwZGF0ZVNDKSxzKHQsXCJibHVyXCIsdC5ibHVySGFuZGxlcikscyh0LFwiZm9jdXNcIix0LmZvY3VzSGFuZGxlcikscyh0LFwia2V5ZG93blwiLHQua2V5ZG93bkhhbmRsZXIpLHModCxcImtleXVwXCIsdC5rZXl1cEhhbmRsZXIpLHQuYXV0b2NvbXBsZXRlQXR0cj90LnNldEF0dHJpYnV0ZShcImF1dG9jb21wbGV0ZVwiLHQuYXV0b2NvbXBsZXRlQXR0cik6dC5yZW1vdmVBdHRyaWJ1dGUoXCJhdXRvY29tcGxldGVcIiksZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0LnNjKSx0PW51bGx9fX19cmV0dXJuIGV9KCk7IWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImF1dG9Db21wbGV0ZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGF1dG9Db21wbGV0ZX0pOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWF1dG9Db21wbGV0ZTp3aW5kb3cuYXV0b0NvbXBsZXRlPWF1dG9Db21wbGV0ZX0oKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIEN1cnJlbmN5OiBuZXcgSW50bC5OdW1iZXJGb3JtYXQoICdlbi1VUycsIHtcbiAgICAgIHN0eWxlOiAnY3VycmVuY3knLFxuICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyXG4gICAgfSApLFxuXG4gICAgR2V0Rm9ybUZpZWxkKCBkYXR1bSwgdmFsdWUgKSB7XG4gICAgICAgIGNvbnN0IGljb24gPSBkYXR1bS5tZXRhZGF0YVxuICAgICAgICAgICAgPyBkYXR1bS5tZXRhZGF0YS5pY29uXG4gICAgICAgICAgICAgICAgPyB0aGlzLkljb25zWyBkYXR1bS5tZXRhZGF0YS5pY29uIF1cbiAgICAgICAgICAgICAgICA6IGBgXG4gICAgICAgICAgICA6IGBgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGRhdHVtLm1ldGFkYXRhID8gZGF0dW0ubWV0YWRhdGEub3B0aW9ucyA6IGZhbHNlXG5cbiAgICAgICAgdmFsdWUgPSAoIHZhbHVlID09PSB1bmRlZmluZWQgKSA/ICcnIDogdmFsdWVcblxuICAgICAgICBpZiggb3B0aW9ucyApIHtcbiAgICAgICAgICAgIGlmKCB0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyApIHsgb3B0aW9ucygpOyByZXR1cm4gdGhpcy5HZXRTZWxlY3QoIGRhdHVtLCBbIF0sIGljb24gKSB9XG4gICAgICAgICAgICBlbHNlIGlmKCBBcnJheS5pc0FycmF5KCBvcHRpb25zICkgKSByZXR1cm4gdGhpcy5HZXRTZWxlY3QoIGRhdHVtLCBvcHRpb25zLCBpY29uIClcbiAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIGNvbnN0IGxhYmVsID0gXG4gICAgICAgICAgICBkYXR1bS5mayB8fCBkYXR1bS5sYWJlbFxuICAgICAgICAgICAgICAgID8gYDxsYWJlbD4ke2RhdHVtLmZrIHx8IGRhdHVtLmxhYmVsfTwvbGFiZWw+YFxuICAgICAgICAgICAgICAgIDogYGBcblxuICAgICAgICBjb25zdCBpbWFnZSA9IGRhdHVtLnJhbmdlID09PSAnSW1hZ2VVcmwnXG4gICAgICAgICAgICA/IGA8ZGl2PjxidXR0b24gY2xhc3M9XCJidG4teWVsbG93XCIgZGF0YS1qcz1cInByZXZpZXdCdG5cIiB0eXBlPVwiYnV0dG9uXCI+UHJldmlldzwvYnV0dG9uPjxpbWcgZGF0YS1zcmM9XCIke3RoaXMuSW1hZ2VTcmMoIHZhbHVlICl9XCIgLz48L2Rpdj5gXG4gICAgICAgICAgICA6IGBgXG5cbiAgICAgICAgY29uc3QgaW5wdXQgPSBkYXR1bS5ma1xuICAgICAgICAgICAgPyBgPGRpdiBkYXRhLXZpZXc9XCJ0eXBlQWhlYWRcIiBkYXRhLW5hbWU9XCIke2RhdHVtLmZrfVwiPjwvZGl2PmBcbiAgICAgICAgICAgIDogZGF0dW0ucmFuZ2UgPT09ICdUZXh0J1xuICAgICAgICAgICAgICAgID8gYDx0ZXh0YXJlYSBkYXRhLWpzPVwiJHtkYXR1bS5uYW1lfVwiIHJvd3M9XCIzXCI+JHt2YWx1ZX08L3RleHRhcmVhPmBcbiAgICAgICAgICAgICAgICA6IGRhdHVtLnJhbmdlID09PSAnTGlzdCcgfHwgdHlwZW9mIGRhdHVtLnJhbmdlID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICAgICA/IGA8ZGl2IGRhdGEtanM9XCIke2RhdHVtLm5hbWV9XCIgZGF0YS1uYW1lPVwiJHtkYXR1bS5uYW1lfVwiPjwvZGl2PmBcbiAgICAgICAgICAgICAgICAgICAgOiBgPGlucHV0IHR5cGU9XCIke3RoaXMuUmFuZ2VUb0lucHV0VHlwZVsgZGF0dW0ucmFuZ2UgXX1cIiBkYXRhLWpzPVwiJHtkYXR1bS5uYW1lfVwiIHBsYWNlaG9sZGVyPVwiJHtkYXR1bS5sYWJlbCB8fCAnJ31cIiB2YWx1ZT1cIiR7dmFsdWV9XCIgLz5gXG5cbiAgICAgICAgcmV0dXJuIGBgICtcbiAgICAgICAgYDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwICR7aW1hZ2UgPyBgaGFzLWltYWdlYCA6IGBgfVwiPlxuICAgICAgICAgICAgJHtsYWJlbH1cbiAgICAgICAgICAgICR7aW5wdXR9XG4gICAgICAgICAgICAke2ltYWdlfVxuICAgICAgICAgICAgJHtpY29ufVxuICAgICAgICA8L2Rpdj5gXG4gICAgfSxcblxuICAgIEdldEZvcm1GaWVsZHMoIGRhdGEsIG1vZGVsPXt9ICkge1xuICAgICAgICBpZiggIWRhdGEgKSByZXR1cm4gYGBcblxuICAgICAgICByZXR1cm4gZGF0YS5tYXAoIGRhdHVtID0+IHRoaXMuR2V0Rm9ybUZpZWxkKCBkYXR1bSwgbW9kZWwgJiYgbW9kZWxbIGRhdHVtLm5hbWUgXSApICkuam9pbignJylcbiAgICB9LFxuXG4gICAgR2V0SWNvbiggbmFtZSwgb3B0cyApIHsgcmV0dXJuIFJlZmxlY3QuYXBwbHkoIHRoaXMuSWNvbnNbIG5hbWUgXSwgdGhpcywgWyBvcHRzIF0gKSB9LFxuXG4gICAgR2V0TGlzdEl0ZW1zKCBpdGVtcz1bXSwgb3B0cz17fSApIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcCggaXRlbSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gb3B0cy5kYXRhQXR0ciA/IGBkYXRhLSR7b3B0cy5kYXRhQXR0cn09XCIke2l0ZW1bIG9wdHMuZGF0YUF0dHIgXX1cImAgOiBgYFxuICAgICAgICAgICAgcmV0dXJuIGA8bGkgJHthdHRyfT4ke2l0ZW0ubGFiZWwgfHwgaXRlbX08L2xpPmAgXG4gICAgICAgIH0gKS5qb2luKCcnKVxuICAgIH0sXG5cbiAgICBHZXRTZWxlY3QoIGRhdHVtLCBvcHRpb25zRGF0YSwgaWNvbiApIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbnNEYXRhLmxlbmd0aCA/IHRoaXMuR2V0U2VsZWN0T3B0aW9ucyggb3B0aW9uc0RhdGEsIHsgdmFsdWVBdHRyOiAnbmFtZScgfSApIDogYGBcblxuICAgICAgICByZXR1cm4gYGAgK1xuICAgICAgICBgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgZGF0YS1qcz1cIiR7ZGF0dW0ubmFtZX1cIj5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHNlbGVjdGVkIHZhbHVlPiR7ZGF0dW0ubGFiZWx9PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgJHtvcHRpb25zfVxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAke2ljb259XG4gICAgICAgIDwvZGl2PmBcbiAgICB9LFxuXG4gICAgR2V0U2VsZWN0T3B0aW9ucyggb3B0aW9ucz1bXSwgb3B0cz17IHZhbHVlQXR0cjogJ3ZhbHVlJyB9ICkge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5tYXAoIG9wdGlvbiA9PiBgPG9wdGlvbiB2YWx1ZT1cIiR7b3B0aW9uWyBvcHRzLnZhbHVlQXR0ciBdfVwiPiR7b3B0aW9uLmxhYmVsfTwvb3B0aW9uPmAgKS5qb2luKCcnKVxuICAgIH0sXG5cbiAgICBJY29uczogcmVxdWlyZSgnLi8uSWNvbk1hcCcpLFxuICAgIFxuICAgIEljb25EYXRhSnMoIHAgKSB7IHJldHVybiBwLm5hbWUgPyBgZGF0YS1qcz1cIiR7cC5uYW1lfVwiYCA6IGBgIH0sXG5cbiAgICBJbWFnZVNyYyggbmFtZSApIHsgcmV0dXJuIGBodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vZG91YmxlLXF1aWxsLTMyNDMvJHtuYW1lfWAgfSxcblxuICAgIFBhcnNlVGV4dExpbmtzKCB0ZXh0ICkge1xuICAgICAgICBsZXQgc3RhcnQgPSB0ZXh0LmluZGV4T2YoJ3t7JyksXG4gICAgICAgICAgICBlbmQsIHJlc3QsIHRhcmdldCwga2V5LCB2YWx1ZSwgcmVwbGFjZW1lbnRcblxuICAgICAgICBpZiggc3RhcnQgPT09IC0xICkgcmV0dXJuIHRleHRcblxuICAgICAgICByZXN0ID0gdGV4dC5zbGljZSggc3RhcnQgKVxuICAgICAgICB0YXJnZXQgPSByZXN0LnNsaWNlKCAwLCByZXN0LmluZGV4T2YoJ30nKSArIDIgKVxuICAgICAgICBrZXkgPSB0YXJnZXQuc2xpY2UoIDIsIHRhcmdldC5pbmRleE9mKCc6JykgKVxuICAgICAgICB2YWx1ZSA9IHRhcmdldC5zbGljZSggdGFyZ2V0LmluZGV4T2YoJzonKSArIDEsIHRhcmdldC5pbmRleE9mKCd9JykgKVxuXG4gICAgICAgIHJlcGxhY2VtZW50ID0gL2VtYWlsL2kudGVzdCggdGFyZ2V0IClcbiAgICAgICAgICAgID8gYDxhIGhyZWY9XCJtYWlsdG86JHt2YWx1ZX1cIiBjbGFzcz1cImxpbmtcIj4ke2tleX08L2E+YFxuICAgICAgICAgICAgOiAvaHR0cC8udGVzdCggdmFsdWUgKVxuICAgICAgICAgICAgICAgID8gYDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIke3ZhbHVlfVwiIGNsYXNzPVwibGlua1wiPiR7a2V5fTwvYT5gXG4gICAgICAgICAgICAgICAgOiBgPHNwYW4gZGF0YS1qcz1cImxpbmtcIiBkYXRhLW5hbWU9XCIke3ZhbHVlfVwiIGNsYXNzPVwibGlua1wiPiR7a2V5fTwvc3Bhbj5gXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuUGFyc2VUZXh0TGlua3MoIHRleHQucmVwbGFjZSggdGFyZ2V0LCByZXBsYWNlbWVudCApIClcbiAgICB9LFxuXG4gICAgUmFuZ2UoIGludCApIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oIEFycmF5KCBpbnQgKS5rZXlzKCkgKVxuICAgIH0sXG5cbiAgICBSYW5nZVRvSW5wdXRUeXBlOiB7XG4gICAgICAgIEVtYWlsOiAnZW1haWwnLFxuICAgICAgICBJbWFnZVVybDogJ3RleHQnLFxuICAgICAgICBQYXNzd29yZDogJ3Bhc3N3b3JkJyxcbiAgICAgICAgU3RyaW5nOiAndGV4dCdcbiAgICB9XG5cbn1cbiIsInZhciBNeUVycm9yID0gZnVuY3Rpb24oIGVyciApIHsgcmV0dXJuIHRoaXMuaGFuZGxlKCBlcnIgKSB9XG5cbk9iamVjdC5hc3NpZ24oIE15RXJyb3IucHJvdG90eXBlLCB7XG4gICAgXG4gICAgaGFuZGxlOiBmdW5jdGlvbiggZXJyICkgeyBjb25zb2xlLmxvZyggZXJyLnN0YWNrIHx8IGVyciApIH1cblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gTXlFcnJvclxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi4vLi4vbGliL015T2JqZWN0JyksIHtcblxuICAgIFJlcXVlc3Q6IHtcblxuICAgICAgICBjb25zdHJ1Y3RvciggZGF0YSApIHtcbiAgICAgICAgICAgIGxldCByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuXG4gICAgICAgICAgICAgICAgcmVxLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBbIDUwMCwgNDA0LCA0MDEgXS5pbmNsdWRlcyggdGhpcy5zdGF0dXMgKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWplY3QoIHRoaXMucmVzcG9uc2UgKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZXNvbHZlKCBKU09OLnBhcnNlKHRoaXMucmVzcG9uc2UpIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIGRhdGEubWV0aG9kID09PSBcImdldFwiIHx8IGRhdGEubWV0aG9kID09PSBcIm9wdGlvbnNcIiApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHFzID0gZGF0YS5xcyA/IGA/JHtkYXRhLnFzfWAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICByZXEub3BlbiggZGF0YS5tZXRob2QsIGAvJHtkYXRhLnJlc291cmNlfSR7cXN9YCApXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SGVhZGVycyggcmVxLCBkYXRhLmhlYWRlcnMgKVxuICAgICAgICAgICAgICAgICAgICByZXEuc2VuZChudWxsKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBgLyR7ZGF0YS5yZXNvdXJjZX1gICsgKCBkYXRhLmlkID8gYC8ke2RhdGEuaWR9YCA6ICcnICk7XG4gICAgICAgICAgICAgICAgICAgIHJlcS5vcGVuKCBkYXRhLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBwYXRoLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEhlYWRlcnMoIHJlcSwgZGF0YS5oZWFkZXJzIClcbiAgICAgICAgICAgICAgICAgICAgcmVxLnNlbmQoIGRhdGEuZGF0YSB8fCBudWxsIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSxcblxuICAgICAgICBwbGFpbkVzY2FwZSggc1RleHQgKSB7XG4gICAgICAgICAgICAvKiBob3cgc2hvdWxkIEkgdHJlYXQgYSB0ZXh0L3BsYWluIGZvcm0gZW5jb2Rpbmc/IHdoYXQgY2hhcmFjdGVycyBhcmUgbm90IGFsbG93ZWQ/IHRoaXMgaXMgd2hhdCBJIHN1cHBvc2UuLi46ICovXG4gICAgICAgICAgICAvKiBcIjRcXDNcXDcgLSBFaW5zdGVpbiBzYWlkIEU9bWMyXCIgLS0tLT4gXCI0XFxcXDNcXFxcN1xcIC1cXCBFaW5zdGVpblxcIHNhaWRcXCBFXFw9bWMyXCIgKi9cbiAgICAgICAgICAgIHJldHVybiBzVGV4dC5yZXBsYWNlKC9bXFxzXFw9XFxcXF0vZywgXCJcXFxcJCZcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0SGVhZGVycyggcmVxLCBoZWFkZXJzPXt9ICkge1xuICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoIFwiQWNjZXB0XCIsIGhlYWRlcnMuYWNjZXB0IHx8ICdhcHBsaWNhdGlvbi9qc29uJyApXG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgaGVhZGVycy5jb250ZW50VHlwZSB8fCAndGV4dC9wbGFpbicgKVxuICAgICAgICAgICAgT2JqZWN0LmtleXMoIGhlYWRlcnMgKS5mb3JFYWNoKCBrZXkgPT4gcmVxLnNldFJlcXVlc3RIZWFkZXIoIGtleSwgaGVhZGVyc1sga2V5IF0gKSApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2ZhY3RvcnkoIGRhdGEgKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKCB0aGlzLlJlcXVlc3QsIHsgfSApLmNvbnN0cnVjdG9yKCBkYXRhIClcbiAgICB9LFxuXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAgICAgaWYoICFYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZEFzQmluYXJ5ICkge1xuICAgICAgICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kQXNCaW5hcnkgPSBmdW5jdGlvbihzRGF0YSkge1xuICAgICAgICAgICAgdmFyIG5CeXRlcyA9IHNEYXRhLmxlbmd0aCwgdWk4RGF0YSA9IG5ldyBVaW50OEFycmF5KG5CeXRlcyk7XG4gICAgICAgICAgICBmb3IgKHZhciBuSWR4ID0gMDsgbklkeCA8IG5CeXRlczsgbklkeCsrKSB7XG4gICAgICAgICAgICAgIHVpOERhdGFbbklkeF0gPSBzRGF0YS5jaGFyQ29kZUF0KG5JZHgpICYgMHhmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VuZCh1aThEYXRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZhY3RvcnkuYmluZCh0aGlzKVxuICAgIH1cblxufSApLCB7IH0gKS5jb25zdHJ1Y3RvcigpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUoIHtcblxuICAgIGNyZWF0ZSggcmF3TmFtZSwgb3B0cyApIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuX3Byb2Nlc3NOYW1lKCByYXdOYW1lIClcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShcbiAgICAgICAgICAgIHRoaXMuVmlld3NbIG5hbWUgXSxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oIHtcbiAgICAgICAgICAgICAgICBEcmFnZ2VyOiB7IHZhbHVlOiB0aGlzLkRyYWdnZXIgfSxcbiAgICAgICAgICAgICAgICBIZWFkZXI6IHsgdmFsdWU6IHRoaXMuSGVhZGVyIH0sXG4gICAgICAgICAgICAgICAgVG9hc3Q6IHsgdmFsdWU6IHRoaXMuVG9hc3QgfSxcbiAgICAgICAgICAgICAgICBkb2N1bWVudE5hbWU6IHsgdmFsdWU6IHJhd05hbWUgfSxcbiAgICAgICAgICAgICAgICBuYW1lOiB7IHZhbHVlOiBuYW1lIH0sXG4gICAgICAgICAgICAgICAgZmFjdG9yeTogeyB2YWx1ZTogdGhpcyB9LFxuICAgICAgICAgICAgICAgIHJhbmdlOiB7IHZhbHVlOiB0aGlzLnJhbmdlIH0sXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHsgdmFsdWU6IHRoaXMuVGVtcGxhdGVzWyBuYW1lIF0gfSxcbiAgICAgICAgICAgICAgICB1c2VyOiB7IHZhbHVlOiB0aGlzLlVzZXIgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgICkuY29uc3RydWN0b3IoIG9wdHMgKVxuICAgIH0sXG5cbiAgICBfcHJvY2Vzc05hbWUoIG5hbWUgKSB7XG4gICAgICAgIGxldCBoeXBoZW4gPSBuYW1lLmluZGV4T2YoJy0nKVxuICAgICAgICBpZiggaHlwaGVuICE9PSAtMSApIHJldHVybiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSwgaHlwaGVuICkgKyBuYW1lLmNoYXJBdChoeXBoZW4gKyAxKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggaHlwaGVuICsgMiApXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSlcbiAgICB9LFxuXG59LCB7XG4gICAgRHJhZ2dlcjogeyB2YWx1ZTogcmVxdWlyZSgnLi4vdmlld3MvRHJhZ2dlcicpIH0sXG4gICAgSGVhZGVyOiB7IHZhbHVlOiByZXF1aXJlKCcuLi92aWV3cy9IZWFkZXInKSB9LFxuICAgIFRlbXBsYXRlczogeyB2YWx1ZTogcmVxdWlyZSgnLi4vLlRlbXBsYXRlTWFwJykgfSxcbiAgICBUb2FzdDogeyB2YWx1ZTogcmVxdWlyZSgnLi4vdmlld3MvVG9hc3QnKSB9LFxuICAgIFVzZXI6IHsgdmFsdWU6IHJlcXVpcmUoJy4uL21vZGVscy9Vc2VyJykgfSxcbiAgICBWaWV3czogeyB2YWx1ZTogcmVxdWlyZSgnLi4vLlZpZXdNYXAnKSB9XG59IClcbiIsInZhciAkID0gcmVxdWlyZSgnanF1ZXJ5JylcblxucmVxdWlyZSgnLi9wb2x5ZmlsbCcpXG5cbndpbmRvdy4kID0gd2luZG93LmpRdWVyeSA9ICRcbndpbmRvdy5pbml0R01hcCA9ICgpID0+IHRydWVcblxucmVxdWlyZSgnYm9vdHN0cmFwJylcbnJlcXVpcmUoJy4vcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXInKVxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICAgIHJlcXVpcmUoJy4vcm91dGVyJykuaW5pdGlhbGl6ZSgpXG4gICAgcmVxdWlyZSgnLi92aWV3cy9tb2RhbCcpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTmFtZScsXG4gICAgICAgICAgICByYW5nZTogJ1N0cmluZycsXG4gICAgICAgICAgICBlcnJvcjogJ1BsZWFzZSBlbnRlciBhIG5hbWUgd2l0aCBubyBzcGFjZXMuJyxcbiAgICAgICAgICAgIHZhbGlkYXRlOiB2YWwgPT4gdmFsLnRyaW0oKSAhPT0gJycgJiYgIS9cXHMvLnRlc3QodmFsKSxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB7IH1cbiAgICAgICAgfVxuICAgIF0sXG5cbiAgICBtZXRhOiB7XG4gICAgICAgIGtleTogJ25hbWUnXG4gICAgfSxcblxuICAgIHJlc291cmNlOiAnQ29sbGVjdGlvbidcbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QuYXNzaWduKCB7IH0sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIGRhdGE6IHtcbiAgICAgICAgY3VycmVudENvbGxlY3Rpb246ICdQYWdlcycsXG4gICAgICAgIGN1cnJlbnRWaWV3OiAnJ1xuICAgIH1cblxufSApIClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0LmFzc2lnbiggeyB9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBwYXJzZTogcmVzcG9uc2UgPT4gcmVzcG9uc2VbMF1cblxufSApLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnY29udGFjdGluZm8nIH0gfSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBkYXlPZldlZWtNYXA6IHJlcXVpcmUoJy4vRGF5T2ZXZWVrJyksXG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5tYXAoIHJvdyA9PiBPYmplY3QuYXNzaWduKCByb3csIHtcbiAgICAgICAgICAgIGRheU9mV2VlazogdGhpcy5kYXlPZldlZWtNYXBbIHJvdy5kYXlvZndlZWsgXSxcbiAgICAgICAgICAgIHN0YXJ0dGltZTogdGhpcy5tb21lbnQoIFsgdGhpcy5tb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgcm93LnN0YXJ0dGltZSBdLmpvaW4oJyAnKSApLmZvcm1hdCgnaDptbUEnKSxcbiAgICAgICAgICAgIGVuZHRpbWU6IHRoaXMubW9tZW50KCBbIHRoaXMubW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJyksIHJvdy5lbmR0aW1lIF0uam9pbignICcpICkuZm9ybWF0KCdoOm1tQScpXG4gICAgICAgIH0gKSApXG4gICAgfSxcblxuICAgIHJlc291cmNlOiBcImRlbGl2ZXJ5cm91dGVcIlxuXG59ICkiLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBhY3Rpb25zOiBbXG4gICAgICAgICdBZGp1c3RtZW50JyxcbiAgICAgICAgJ1BheW1lbnQnLFxuICAgICAgICAnUmVpbWJ1cnNlbWVudCcsXG4gICAgICAgICdTZWFzb24gU2lnbnVwJ1xuICAgIF0sXG5cbiAgICBhdHRyaWJ1dGVzOiBbICdhY3Rpb24nLCAndmFsdWUnLCAnY2hlY2tOdW1iZXInLCAnY3JlYXRlZCcsICdkZXNjcmlwdGlvbicgXSxcblxuICAgIGdldEJhbGFuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEucmVkdWNlKCAoIG1lbW8sIGRhdHVtICkgPT4ge1xuICAgICAgICAgICAgaWYoIGRhdHVtLmFjdGlvbiA9PT0gJ1BheW1lbnQnICkgbWVtbyAtPSBkYXR1bS52YWx1ZVxuICAgICAgICAgICAgZWxzZSBtZW1vICs9IGRhdHVtLnZhbHVlXG4gICAgICAgICAgICByZXR1cm4gbWVtb1xuICAgICAgICB9LCAwIClcbiAgICB9LFxuXG4gICAgaXNOZWdhdGl2ZSggcm93ICkge1xuICAgICAgICBpZiggcm93LmFjdGlvbiA9PT0gJ1BheW1lbnQnICkgcmV0dXJuIHRydWVcblxuICAgICAgICBpZiggcm93LmFjdGlvbiA9PT0gJ0FkanVzdG1lbnQnICYmIHJvdy52YWx1ZSA8IDAgKSByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJlc3BvbnNlID0gcmVzcG9uc2UubWFwKCByb3cgPT4gdGhpcy5wYXJzZU9uZSggcm93ICkgKVxuXG4gICAgICAgIGlmKCB0aGlzLnNvcnRBdHRyICkgcmVzcG9uc2Uuc29ydCggKCBhLCBiICkgPT4gYVsgdGhpcy5zb3J0QXR0ciBdID4gYlsgdGhpcy5zb3J0QXR0ciBdIClcblxuICAgICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICB9LFxuXG4gICAgcGFyc2VPbmUoIGRhdHVtICkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIGRhdHVtLFxuICAgICAgICAgICAgeyBpc05lZ2F0aXZlOiB0aGlzLmlzTmVnYXRpdmUoIGRhdHVtICkgfSxcbiAgICAgICAgICAgIHsgY3JlYXRlZDogdHlwZW9mIGRhdHVtLmNyZWF0ZWQgPT09ICdvYmplY3QnID8gZGF0dW0uY3JlYXRlZC5yYXcgOiBkYXR1bS5jcmVhdGVkIH1cbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICByZXNvdXJjZTogJ2NzYVRyYW5zYWN0aW9uJyxcblxuICAgIHNvcnRBdHRyOiAnY3JlYXRlZCdcblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBTaGFyZUdyb3VwRHJvcG9mZnM6IHJlcXVpcmUoJy4vU2hhcmVHcm91cERyb3BvZmYnKSxcblxuICAgIGdldEN1cnJlbnRHcm91cERyb3BvZmZzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5TaGFyZUdyb3VwRHJvcG9mZnMuZ2V0KCB7IHF1ZXJ5OiB7XG4gICAgICAgICAgICBzaGFyZWlkOiB0aGlzLmRhdGEuaWQsXG4gICAgICAgICAgICBncm91cGRyb3BvZmZpZDogeyBvcGVyYXRpb246ICdqb2luJywgdmFsdWU6IHsgdGFibGU6ICdncm91cGRyb3BvZmYnLCBjb2x1bW46ICdpZCcgfSB9XG4gICAgICAgIH0gfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICB0aGlzLlNoYXJlR3JvdXBEcm9wb2Zmcy5kYXRhLm1hcCggZGF0dW0gPT4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbigge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBkYXR1bVsgJ2dyb3VwZHJvcG9mZi5uYW1lJyBdLFxuICAgICAgICAgICAgICAgICAgICB2ZW51ZTogZGF0dW1bICdncm91cGRyb3BvZmYudmVudWUnIF0sXG4gICAgICAgICAgICAgICAgICAgIHN0cmVldDogZGF0dW1bICdncm91cGRyb3BvZmYuc3RyZWV0JyBdLFxuICAgICAgICAgICAgICAgICAgICBjaXR5U3RhdGVaaXA6IGRhdHVtWyAnZ3JvdXBkcm9wb2ZmLmNpdHlTdGF0ZVppcCcgXSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGRhdHVtLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICBob3VyczogYCR7ZGF0dW0uZGF5b2Z3ZWVrfSAke2RhdHVtLnN0YXJ0dGltZX0gLSAke2RhdHVtLmVuZHRpbWV9YFxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgKVxuICAgICAgICApIClcbiAgICB9LFxuXG4gICAgZ2V0U2l6ZU9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEucHJvZHVjZU9wdGlvbnMuZmlsdGVyKCBvcHRpb24gPT4gL3NpemUvaS50ZXN0KCBvcHRpb24ucHJvbXB0ICkgKVxuICAgIH0sXG5cbiAgICByZXNvdXJjZTogJ2N1cnJlbnRTaGFyZSdcblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgTWVtYmVyOiByZXF1aXJlKCcuL01lbWJlcicpLFxuICAgIFBlcnNvbjogcmVxdWlyZSgnLi9QZXJzb24nKSxcblxuICAgIHBhcnNlKCByZXNwb25zZSApIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm1hcCggcm93ID0+XG4gICAgICAgICAgICBPYmplY3Qua2V5cyggcm93ICkucmVkdWNlKFxuICAgICAgICAgICAgICAgICggbWVtbywga2V5ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGtleS5pbmRleE9mKCcuJylcbiAgICAgICAgICAgICAgICAgICAgbWVtb1sga2V5LnNsaWNlKDAsIGluZGV4KSBdLmRhdGFbIGtleS5zbGljZSggaW5kZXggKyAxICkgXSA9IHJvd1trZXldXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZW1vXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IG1lbWJlcjogT2JqZWN0LmNyZWF0ZSggdGhpcy5NZW1iZXIsIHsgZGF0YTogeyB2YWx1ZToge30gfSB9ICksXG4gICAgICAgICAgICAgICAgICBwZXJzb246IE9iamVjdC5jcmVhdGUoIHRoaXMuUGVyc29uLCB7IGRhdGE6IHsgdmFsdWU6IHt9IH0gfSApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIHJlc291cmNlOiAncGVyc29uJ1xuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIDA6ICdTdW5kYXknLFxuICAgIDE6ICdNb25kYXknLFxuICAgIDI6ICdUdWVzZGF5JyxcbiAgICAzOiAnV2VkbmVzZGF5JyxcbiAgICA0OiAnVGh1cnNkYXknLFxuICAgIDU6ICdGcmlkYXknLFxuICAgIDY6ICdTYXR1cmRheSdcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIHBhcnNlKCByZXNwb25zZSApIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm1hcCggcm93ID0+XG4gICAgICAgICAgICBPYmplY3Qua2V5cyggcm93ICkucmVkdWNlKFxuICAgICAgICAgICAgICAgICggbWVtbywga2V5ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGtleS5pbmRleE9mKCcuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZSA9IGtleS5zbGljZSgwLCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgaWYoICFtZW1vWyB0YWJsZSBdICkgbWVtb1sgdGFibGUgXSA9IHsgfVxuICAgICAgICAgICAgICAgICAgICBtZW1vWyB0YWJsZSBdWyBrZXkuc2xpY2UoIGluZGV4ICsgMSApIF0gPSByb3dba2V5XVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtb1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeyB9XG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdtZW1iZXJzaGFyZWRlbGl2ZXJ5J1xuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi4vLi4vLi4vbGliL015T2JqZWN0JykucHJvdG90eXBlLCB7XG5cbiAgICBwYXJzZSggbW9tZW50ICkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IG1vbWVudC5kYXlPZlllYXIoKSxcbiAgICAgICAgICAgIGRhdGU6IG1vbWVudC5mb3JtYXQoJ1lZWVktTU0tREQnKSxcbiAgICAgICAgICAgIGRheU9mV2VlazogbW9tZW50LmZvcm1hdCgnZGRkJyksXG4gICAgICAgICAgICBkYXlPZk1vbnRoOiBtb21lbnQuZm9ybWF0KCdEJyksXG4gICAgICAgICAgICBlcG9jaDogbW9tZW50LnVuaXgoKSxcbiAgICAgICAgICAgIG1vbnRoOiBtb21lbnQuZm9ybWF0KCdNTU0nKSxcbiAgICAgICAgICAgIG1vbnRoTnVtOiBtb21lbnQuZm9ybWF0KCdNJylcbiAgICAgICAgfVxuICAgIH1cblxufSApIClcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi4vLi4vLi4vbGliL015T2JqZWN0JykucHJvdG90eXBlLCB7XG5cbiAgICBkYXlPZldlZWtNYXA6IHJlcXVpcmUoJy4vRGF5T2ZXZWVrJyksXG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKCByZXNwb25zZSwge1xuXG4gICAgICAgICAgICBkYXlPZldlZWs6IHRoaXMuZGF5T2ZXZWVrTWFwWyByZXNwb25zZS5kYXlvZndlZWsgXSxcbiAgICAgICAgICAgIHN0YXJ0dGltZTogdGhpcy5tb21lbnQoIFsgdGhpcy5tb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgcmVzcG9uc2Uuc3RhcnR0aW1lIF0uam9pbignICcpICkuZm9ybWF0KCdoOm1tQScpLFxuICAgICAgICAgICAgZW5kdGltZTogdGhpcy5tb21lbnQoIFsgdGhpcy5tb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgcmVzcG9uc2UuZW5kdGltZSBdLmpvaW4oJyAnKSApLmZvcm1hdCgnaDptbUEnKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgdXJsUm9vdDogXCIvZGVsaXZlcnlyb3V0ZVwiXG59ICkgKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgYXR0cmlidXRlczoge1xuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgfSxcblxuICAgIG1ldGE6IHtcbiAgICAgICAga2V5OiAnX2lkJyxcbiAgICB9LFxuXG4gICAgdG9MaXN0KCBkb2N1bWVudCApIHtcbiAgICAgICAgZG9jdW1lbnQgPSBkb2N1bWVudCB8fCB0aGlzLmRhdGFcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKCBkb2N1bWVudCApLnNvcnQoKS5tYXAoIGtleSA9PiAoIHsga2V5LCB2YWx1ZTogZG9jdW1lbnRbIGtleSBdIH0gKSApXG4gICAgfSxcblxuICAgIHRvT2JqKCkge1xuICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLnJlZHVjZXIoIHRoaXMuZGF0YSwgZGF0dW0gPT4gKCB7IFsgZGF0dW0ua2V5IF06IGRhdHVtLnZhbHVlIH0gKSApXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi4vLi4vLi4vbGliL015T2JqZWN0JykucHJvdG90eXBlLCB7XG4gXG4gICAgZGF5T2ZXZWVrTWFwOiByZXF1aXJlKCcuL0RlbGl2ZXJ5Um91dGUnKS5wcm90b3R5cGUuZGF5T2ZXZWVrTWFwLFxuXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5vbiggJ2NoYW5nZTpkYXlvZndlZWsnLCAoKSA9PiB0aGlzLnVwZGF0ZVJlYWRhYmxlRGF5KCkgKVxuICAgIH0sXG5cbiAgICB1cGRhdGVSZWFkYWJsZURheSgpIHtcbiAgICAgICAgdGhpcy5zZXQoIHsgZGF5T2ZXZWVrOiB0aGlzLmRheU9mV2Vla01hcFsgdGhpcy5nZXQoJ2RheW9md2VlaycpIF0gfSApXG4gICAgfVxuXG59ICkgKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgQ3NhRGVsaXZlcnk6IHJlcXVpcmUoJy4vQ3NhRGVsaXZlcnknKSxcblxuICAgIGdldEhvdXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Dc2FEZWxpdmVyeS5nZXQoIHsgcXVlcnk6IHsgbGFiZWw6ICdmYXJtJyB9IH0gKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmFybVBpY2t1cCA9IHRoaXMuQ3NhRGVsaXZlcnkuZGF0YVswXVxuICAgICAgICAgICAgdGhpcy5kYXRhWzBdLmhvdXJzID0gYCR7ZmFybVBpY2t1cC5kYXlPZldlZWt9ICR7ZmFybVBpY2t1cC5zdGFydHRpbWV9IC0gJHtmYXJtUGlja3VwLmVuZHRpbWV9YFxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIH0gKSAgICAgICAgIFxuICAgIH0sXG5cbiAgICBwYXJzZSggcmVzcG9uc2UgKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5tYXAoIHJvdyA9PiBPYmplY3QuYXNzaWduKCB7XG4gICAgICAgICAgICBuYW1lOiAnUGljay11cCBmcm9tIG91ciBmYXJtIScsXG4gICAgICAgICAgICBzdHJlZXQ6IHJvdy5mYXJtcGlja3VwLnNwbGl0KCcsJylbMF0sXG4gICAgICAgICAgICBjaXR5U3RhdGVaaXA6IHJvdy5jaXR5U3RhdGVaaXAsXG4gICAgICAgICAgICBsb2NhdGlvbjogSlNPTi5wYXJzZSggcm93LmxvY2F0aW9uICkuY29vcmRpbmF0ZXNcbiAgICAgICAgfSApIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdjb250YWN0aW5mbydcblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UubWFwKCByb3cgPT4gcm93LmxvY2F0aW9uXG4gICAgICAgICAgICA/IE9iamVjdC5hc3NpZ24oIHJvdywgeyBsb2NhdGlvbjogSlNPTi5wYXJzZSggcm93LmxvY2F0aW9uICkuY29vcmRpbmF0ZXMgfSApXG4gICAgICAgICAgICA6IHJvd1xuICAgICAgICApXG4gICAgfSxcblxuICAgIHJlc291cmNlOiAnZmFybWVybWFya2V0J1xuXG59ICkiLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICByZXNvdXJjZTogJ2Zvb2QnXG5cbn0gKSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbC5leHRlbmQoIHtcblxuICAgIE1vbWVudDogcmVxdWlyZSgnbW9tZW50JyksXG5cbiAgICBEYXlPZldlZWtIYXNoOiB7XG4gICAgICAgIDA6ICdTdW5kYXknLFxuICAgICAgICAxOiAnTW9uZGF5JyxcbiAgICAgICAgMjogJ1R1ZXNkYXknLFxuICAgICAgICAzOiAnV2VkbmVzZGF5JyxcbiAgICAgICAgNDogJ1RodXJzZGF5JyxcbiAgICAgICAgNTogJ0ZyaWRheScsXG4gICAgICAgIDY6ICdTYXR1cmRheSdcbiAgICB9LFxuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuXG4gICAgICAgIE9iamVjdC5rZXlzKCByZXNwb25zZSApLmZvckVhY2goIGtleSA9PiB7XG4gICAgICAgICAgICB2YXIgaXNPYmplY3QgPSAoIHR5cGVvZiByZXNwb25zZVtrZXldID09PSAnb2JqZWN0JyApID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCByZXNwb25zZVsga2V5IF0gPT09IG51bGwgfHwgKCBpc09iamVjdCAmJiByZXNwb25zZVtrZXldLnJhdyA9PT0gbnVsbCApICkgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBpc09iamVjdCAmJiByZXNwb25zZVtrZXldLnR5cGUgPT09ICdkYXRldGltZScgKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2Vba2V5XS52YWx1ZSA9IHRoaXMuTW9tZW50KCByZXNwb25zZVtrZXldLnJhdyApLmZvcm1hdCgnZGRkZCwgTU1NTSBEbyBZWVlZLCBoOm1tOnNzIGEnKSB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBpc09iamVjdCAmJiByZXNwb25zZVtrZXldLnR5cGUgPT09ICdkYXRlJyApIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVtrZXldLnZhbHVlID0gdGhpcy5Nb21lbnQoIHJlc3BvbnNlW2tleV0ucmF3ICkuZm9ybWF0KCdkZGRkLCBNTU1NIERvIFlZWVknKSB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBpc09iamVjdCAmJiByZXNwb25zZVtrZXldLnR5cGUgPT09ICd0aW1lJyApIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVtrZXldLnZhbHVlID0gdGhpcy5Nb21lbnQoIFsgdGhpcy5Nb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgcmVzcG9uc2VbIGtleSBdLnJhdyBdLmpvaW4oJyAnKSApLmZvcm1hdCgnaDptbUEnKSB9XG5cbiAgICAgICAgICAgIGlmKCBrZXkgPT09ICdkYXlvZndlZWsnICkgeyByZXNwb25zZVsga2V5IF0gPSB7IHJhdzogcmVzcG9uc2Vba2V5XSwgdmFsdWU6IHRoaXMuRGF5T2ZXZWVrSGFzaFsgcmVzcG9uc2VbIGtleSBdIF0gfSB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZVxuICAgIH1cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgYXR0cmlidXRlczogW1xuICAgICAgICB7IG5hbWU6ICdmYXJtZXJNYXJrZXQnLCBlbDogJ2Zhcm1lck1hcmtldHNMaXN0JywgbGFiZWw6IFwiRmFybWVyJ3MgTWFya2V0XCIsIGNvbG9yOiAnI2VkMWMyNCcgfSxcbiAgICAgICAgeyBuYW1lOiAncmV0YWlsT3V0bGV0JywgZWw6ICdyZXRhaWxPdXRsZXRzTGlzdCcsIGxhYmVsOiAnUmV0YWlsIE91dGxldCcsIGNvbG9yOiAnI2ZmZGQxNCcgfSxcbiAgICAgICAgeyBuYW1lOiAncmVzdGF1cmFudCcsIGVsOiAncmVzdGF1cmFudHNMaXN0JywgbGFiZWw6ICdSZXN0YXVyYW50JywgY29sb3I6ICcjMjMxZjIwJyB9LFxuICAgICAgICB7IG5hbWU6ICdncm91cExvY2F0aW9uJywgZWw6ICdncm91cExvY2F0aW9uc0xpc3QnLCBsYWJlbDogJ0dyb3VwIExvY2F0aW9uJywgY29sb3I6ICcjZjg5NDFlJyB9LFxuICAgICAgICB7IG5hbWU6ICdkZWxpdmVyeVJhbmdlJywgbGFiZWw6ICdEZWxpdmVyeSBSYW5nZScsIGNvbG9yOiAnI2VkMWMyNCcgfSxcbiAgICAgICAgeyBuYW1lOiAnZmFybVBpY2t1cCcsIGVsOiAnZ3JvdXBMb2NhdGlvbnNMaXN0JywgbGFiZWw6ICdQYXRjaHdvcmsgR2FyZGVucyd9XG4gICAgXSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgZGVsaXZlcnlSYW5nZUNvb3JkczogW1xuICAgICAgICAgICAgeyBsYXQ6IDM5Ljg3MTQzNSwgbG5nOiAtODQuMzY3ODgwIH0sXG4gICAgICAgICAgICB7IGxhdDogMzkuOTAxMTMyLCBsbmc6IC04NC4wOTcyNzkgfSxcbiAgICAgICAgICAgIHsgbGF0OiAzOS45MjY4MzQsIGxuZzogLTgzLjgwNjQyMCB9LFxuICAgICAgICAgICAgeyBsYXQ6IDM5LjgxMzEwNiwgbG5nOiAtODMuODE1NzU1IH0sXG4gICAgICAgICAgICB7IGxhdDogMzkuNzI2Nzg0LCBsbmc6IC04My43ODg5NDEgfSxcbiAgICAgICAgICAgIHsgbGF0OiAzOS42MTUwMzIsIGxuZzogLTg0LjAwODcwMiB9LCAgICAgICAgICAgXG4gICAgICAgICAgICB7IGxhdDogMzkuNTI2MjYwLCBsbmc6IC04NC4wODg5MDkgfSxcbiAgICAgICAgICAgIHsgbGF0OiAzOS41NDI1MjgsIGxuZzogLTg0LjI5MzY2MCB9LFxuICAgICAgICAgICAgeyBsYXQ6IDM5LjYwMTI3OCwgbG5nOiAtODQuMzY5ODc3IH1cbiAgICAgICAgXVxuICAgIH1cblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcmVzb3VyY2U6ICdtZW1iZXInXG5cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcmVzb3VyY2U6ICdtZW1iZXJmb29kb21pc3Npb24nXG5cbn0gKSIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIHBhcnNlKCByZXNwb25zZSApIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm1hcCggcm93ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IHRoaXMubW9tZW50KCByb3dbICdzaGFyZS5zdGFydGRhdGUnIF0gKSxcbiAgICAgICAgICAgICAgICAgIGVuZERhdGUgPSB0aGlzLm1vbWVudCggcm93WyAnc2hhcmUuZW5kZGF0ZScgXSApXG5cbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyggcm93ICkucmVkdWNlKFxuICAgICAgICAgICAgICAgICggbWVtbywga2V5ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGtleS5pbmRleE9mKCcuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlID0ga2V5LnNsaWNlKDAsIGluZGV4KVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKCB0YWJsZSAhPT0gJ3NoYXJlJyApIHJldHVybiBtZW1vXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oIG1lbW8sIHsgWyBrZXkuc2xpY2UoIGluZGV4ICsgMSApIF06IHJvd1trZXldIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBNYXRoLmNlaWwoIGVuZERhdGUuZGlmZiggc3RhcnREYXRlLCAnZGF5cycgKSAvIDcgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGh1bWFuRW5kZGF0ZTogZW5kRGF0ZS5mb3JtYXQoXCJNTU0gRFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGh1bWFuU3RhcnRkYXRlOiBzdGFydERhdGUuZm9ybWF0KFwiTU1NIERcIilcbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IG1lbWJlcnNoYXJlaWQ6IHJvd1sgJ21lbWJlcnNoYXJlLmlkJyBdIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHJlc291cmNlOiAnbWVtYmVyc2hhcmUnXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIHBhcnNlKCByZXNwb25zZSApIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5tYXAoIHJvdyA9PlxuICAgICAgICAgICAgT2JqZWN0LmtleXMoIHJvdyApLnJlZHVjZShcbiAgICAgICAgICAgICAgICAoIG1lbW8sIGtleSApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBrZXkuaW5kZXhPZignLicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUgPSBrZXkuc2xpY2UoMCwgaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgIGlmKCB0YWJsZSAhPT0gJ3NoYXJlb3B0aW9ub3B0aW9uJyApIHJldHVybiBtZW1vXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oIG1lbW8sIHsgWyBrZXkuc2xpY2UoIGluZGV4ICsgMSApIF06IHJvd1trZXldIH0gKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeyBzaGFyZW9wdGlvbmlkOiByb3dbICdtZW1iZXJzaGFyZW9wdGlvbi5zaGFyZW9wdGlvbmlkJyBdLCBtZW1iZXJzaGFyZW9wdGlvbmlkOiByb3dbICdtZW1iZXJzaGFyZW9wdGlvbi5pZCcgXSB9XG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdtZW1iZXJzaGFyZW9wdGlvbidcbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZGF0YTogW1xuICAgICAgICB7IGxhYmVsOiAnQWJvdXQnLCBuYW1lOiAnYWJvdXQnIH0sXG4gICAgICAgIHsgbGFiZWw6ICdDU0EgUHJvZ3JhbScsIG5hbWU6ICdjc2EnIH0sXG4gICAgICAgIHsgbGFiZWw6ICdMb2NhdGlvbnMnLCBuYW1lOiAnbG9jYXRpb25zJyB9LFxuICAgICAgICB7IGxhYmVsOiAnU2lnbiBVcCcsIG5hbWU6ICdzaWduLXVwJyB9LFxuICAgICAgICB7IGxhYmVsOiAnR2V0IEludm9sdmVkJywgbmFtZTogJ2dldC1pbnZvbHZlZCcgfSxcbiAgICAgICAgeyBsYWJlbDogJ0NvbnRhY3QnLCBuYW1lOiAnY29udGFjdCcgfVxuICAgIF1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIHBhcnNlKCByZXNwb25zZSApIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm1hcCggcm93ID0+XG4gICAgICAgICAgICBPYmplY3Qua2V5cyggcm93ICkucmVkdWNlKFxuICAgICAgICAgICAgICAgICggbWVtbywga2V5ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGtleS5pbmRleE9mKCcuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZSA9IGtleS5zbGljZSgwLCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgaWYoIHRhYmxlICE9PSAnc2hhcmVvcHRpb24nICkgcmV0dXJuIG1lbW9cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbiggbWVtbywgeyBbIGtleS5zbGljZSggaW5kZXggKyAxICkgXTogcm93W2tleV0gfSApXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IH0sXG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdzaGFyZW9wdGlvbnNoYXJlJ1xufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICByZXNvdXJjZTogJ3BlcnNvbidcblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2JhY2tib25lJykuTW9kZWwuZXh0ZW5kKCB7IGlkQXR0cmlidXRlOiBcIkBpZFwiIH0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UubWFwKCByb3cgPT4gcm93LmxvY2F0aW9uXG4gICAgICAgICAgICA/IE9iamVjdC5hc3NpZ24oIHJvdywgeyBsb2NhdGlvbjogSlNPTi5wYXJzZSggcm93LmxvY2F0aW9uICkuY29vcmRpbmF0ZXMgfSApXG4gICAgICAgICAgICA6IHJvd1xuICAgICAgICApXG4gICAgfSxcblxuICAgIHJlc291cmNlOiAncmVzdGF1cmFudCdcblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UubWFwKCByb3cgPT4gcm93LmxvY2F0aW9uXG4gICAgICAgICAgICA/IE9iamVjdC5hc3NpZ24oIHJvdywgeyBsb2NhdGlvbjogSlNPTi5wYXJzZSggcm93LmxvY2F0aW9uICkuY29vcmRpbmF0ZXMgfSApXG4gICAgICAgICAgICA6IHJvd1xuICAgICAgICApXG4gICAgfSxcblxuICAgIHJlc291cmNlOiAncmV0YWlsb3V0bGV0J1xuXG59ICkiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2JhY2tib25lJykuTW9kZWwuZXh0ZW5kKCBPYmplY3QuYXNzaWduKCB7IH0sIHJlcXVpcmUoJy4uLy4uLy4uL2xpYi9NeU9iamVjdCcpLnByb3RvdHlwZSwge1xuXG4gICAgQ29sbGVjdGlvbjogcmVxdWlyZSgnYmFja2JvbmUnKS5Db2xsZWN0aW9uLFxuXG4gICAgRGVsaXZlcnlEYXRlOiByZXF1aXJlKCcuL0RlbGl2ZXJ5RGF0ZScpLFxuXG4gICAgRHJvcG9mZjogcmVxdWlyZSgnLi9Ecm9wb2ZmJyksXG5cbiAgICBkYXlPZldlZWtNYXA6IHJlcXVpcmUoJy4vRGVsaXZlcnlSb3V0ZScpLnByb3RvdHlwZS5kYXlPZldlZWtNYXAsXG5cbiAgICBkZXRlcm1pbmVOZXh0RGVsaXZlcnlDdXRvZmYoIGRheU9mV2VlayApIHtcbiAgICAgICAgY29uc3QgbmV4dERlbGl2ZXJ5RGF5ID0gZGF5T2ZXZWVrID4gNCA/IDE1IDogOFxuICAgICAgICByZXR1cm4gdGhpcy5tb21lbnQoKS5kYXkoIG5leHREZWxpdmVyeURheSApLmhvdXIoMCkubWludXRlKDApLnNlY29uZCgwKS5taWxsaXNlY29uZCgwKVxuICAgIH0sXG5cbiAgICBnZXREZWxpdmVyeURhdGVzKCkge1xuICAgICAgICB2YXIgZGF0ZXMgPSBbIF0sXG4gICAgICAgICAgICBub3cgPSB0aGlzLm1vbWVudCgpLFxuICAgICAgICAgICAgZGVsaXZlcnlEYXkgPSB0aGlzLmdldCgnc2VsZWN0ZWREZWxpdmVyeScpLmRheW9md2VlayxcbiAgICAgICAgICAgIGRlbGl2ZXJ5RGF0ZSA9IHRoaXMubW9tZW50KCB0aGlzLmdldCgnc3RhcnRkYXRlJykgKSxcbiAgICAgICAgICAgIGVuZERhdGUgPSB0aGlzLm1vbWVudCggdGhpcy5nZXQoJ2VuZGRhdGUnKSApLFxuICAgICAgICAgICAgbmV4dERlbGl2ZXJ5Q3V0b2ZmID0gdGhpcy5kZXRlcm1pbmVOZXh0RGVsaXZlcnlDdXRvZmYoIG5vdy5kYXkoKSApLFxuICAgICAgICAgICAgc3RhcnREYXkgPSBzdGFydERheSA9IGRlbGl2ZXJ5RGF0ZS5kYXkoKVxuXG4gICAgICAgIGlmKCAhIE51bWJlci5pc0ludGVnZXIoIGRlbGl2ZXJ5RGF5ICkgKSByZXR1cm4gbmV3IHRoaXMuQ29sbGVjdGlvbihbXSlcblxuICAgICAgICB3aGlsZSggc3RhcnREYXkgIT0gZGVsaXZlcnlEYXkgKSB7XG4gICAgICAgICAgICBkZWxpdmVyeURhdGUuYWRkKCAxLCAnZGF5cycgKVxuICAgICAgICAgICAgc3RhcnREYXkgPSB0aGlzLm1vbWVudCggZGVsaXZlcnlEYXRlICkuZGF5KClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgd2hpbGUoIGVuZERhdGUuZGlmZiggZGVsaXZlcnlEYXRlLCAnZGF5cycgKSA+PSAwICkge1xuICAgICAgICAgICAgdmFyIG1vZGVsID0gbmV3IHRoaXMuRGVsaXZlcnlEYXRlKCBkZWxpdmVyeURhdGUsIHsgcGFyc2U6IHRydWUgfSApXG4gICAgICAgICAgICBpZiggZGVsaXZlcnlEYXRlLmRpZmYoIG5leHREZWxpdmVyeUN1dG9mZiApIDwgMCApIG1vZGVsLnNldCggeyB1bnNlbGVjdGFibGU6IHRydWUgfSApXG4gICAgICAgICAgICBkYXRlcy5wdXNoKCBtb2RlbCApXG4gICAgICAgICAgICBkZWxpdmVyeURhdGUuYWRkKCA3LCAnZGF5cycgKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldCggeyBkZWxpdmVyeURhdGVzOiBuZXcgdGhpcy5Db2xsZWN0aW9uKCBkYXRlcyApIH0gKVxuXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnZGVsaXZlcnlEYXRlcycpXG4gICAgfSxcblxuICAgIGdldERlbGl2ZXJ5T3B0aW9ucygpIHtcblxuICAgICAgICBpZiggdGhpcy5oYXMoJ2RlbGl2ZXJ5b3B0aW9ucycpICkgcmV0dXJuIHRoaXMuUSggdGhpcy5nZXQoJ2RlbGl2ZXJ5b3B0aW9ucycpIClcblxuICAgICAgICByZXR1cm4gdGhpcy5RKCBuZXcgKCB0aGlzLkNvbGxlY3Rpb24uZXh0ZW5kKCB7IHVybDogXCIvc2hhcmVkZWxpdmVyeW9wdGlvblwiIH0gKSApKCkuZmV0Y2goIHsgZGF0YTogeyBzaGFyZWlkOiB0aGlzLmlkIH0gfSApIClcbiAgICAgICAgLnRoZW4oIG1hcHBpbmdzID0+IHtcbiAgICAgICAgICAgIHZhciBkZWxpdmVyeU9wdGlvbnMgPSBuZXcgKCB0aGlzLkNvbGxlY3Rpb24uZXh0ZW5kKCB7IHVybDogXCIvZGVsaXZlcnlvcHRpb25cIiB9ICkgKSgpXG5cbiAgICAgICAgICAgIHRoaXMuc2V0KCB7IGRlbGl2ZXJ5b3B0aW9uczogZGVsaXZlcnlPcHRpb25zIH0gKVxuXG4gICAgICAgICAgICBpZiggbWFwcGluZ3MubGVuZ3RoID09PSAwICkgcmV0dXJuIHRoaXMuUSgpXG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLlEoIGRlbGl2ZXJ5T3B0aW9ucy5mZXRjaCggeyBkYXRhOiB7IGlkOiBtYXBwaW5ncy5tYXAoIHJlY29yZCA9PiByZWNvcmQuZGVsaXZlcnlvcHRpb25pZCApLmpvaW4oJywnKSB9IH0gKSApXG4gICAgICAgIH0gKVxuICAgICAgICAuZmFpbCggZSA9PiBjb25zb2xlLmxvZyggXCJHZXR0aW5nIERlbGl2ZXJ5IE9wdGlvbnMgOiBcIiArIGUuc3RhY2sgfHwgZSApIClcbiAgICB9LFxuXG4gICAgZ2V0R3JvdXBEcm9wb2ZmcygpIHtcbiAgICAgICAgdmFyIG1hcHBpbmdzID0gbmV3ICggdGhpcy5Db2xsZWN0aW9uLmV4dGVuZCggeyB1cmw6IFwiL3NoYXJlZ3JvdXBkcm9wb2ZmXCIgfSApICkoKVxuXG4gICAgICAgIGlmKCB0aGlzLmhhcygnZ3JvdXBkcm9wb2ZmcycpICkgcmV0dXJuIHRoaXMuUSggdGhpcy5nZXQoJ2dyb3VwZHJvcG9mZnMnKSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuUSggbWFwcGluZ3MuZmV0Y2goIHsgZGF0YTogeyBzaGFyZWlkOiB0aGlzLmlkIH0gfSApIClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHZhciBncm91cERyb3BvZmZzXG5cbiAgICAgICAgICAgIGlmKCBtYXBwaW5ncy5sZW5ndGggPT09IDAgKSByZXR1cm5cblxuICAgICAgICAgICAgZ3JvdXBEcm9wb2ZmcyA9IG5ldyAoIHRoaXMuQ29sbGVjdGlvbi5leHRlbmQoIHsgbW9kZWw6IHRoaXMuRHJvcG9mZiwgdXJsOiBcIi9ncm91cGRyb3BvZmZcIiB9ICkgKSgpXG4gICAgICAgICAgICB0aGlzLnNldCggeyBncm91cGRyb3BvZmZzOiBncm91cERyb3BvZmZzIH0gKVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5RKCBncm91cERyb3BvZmZzLmZldGNoKCB7IGRhdGE6IHsgaWQ6IG1hcHBpbmdzLm1hcCggcmVjb3JkID0+IHJlY29yZC5nZXQoJ2dyb3VwZHJvcG9mZmlkJykgKS5qb2luKCcsJykgfSB9ICkgKVxuICAgICAgICB9IClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoIG1hcHBpbmdzLmxlbmd0aCA9PT0gMCApIHJldHVybiB0aGlzLnNldCggJ2dyb3VwZHJvcG9mZnMnLCBbXSApXG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5nZXQoJ2dyb3VwZHJvcG9mZnMnKS5mb3JFYWNoKCBkcm9wb2ZmID0+IHsgXG4gICAgICAgICAgICAgICAgdmFyIG1hcHBpbmcgPSBtYXBwaW5ncy5maW5kKCBtb2RlbCA9PiBtb2RlbC5nZXQoJ2dyb3VwZHJvcG9mZmlkJykgPT0gZHJvcG9mZi5pZCApXG5cbiAgICAgICAgICAgICAgICBkcm9wb2ZmLnNldCgge1xuICAgICAgICAgICAgICAgICAgICBkYXlvZndlZWs6IG1hcHBpbmcuZ2V0KCdkYXlvZndlZWsnKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnR0aW1lOiB0aGlzLnRpbWVUb0h1bWFuVGltZSggbWFwcGluZy5nZXQoJ3N0YXJ0dGltZScpICksXG4gICAgICAgICAgICAgICAgICAgIGVuZHRpbWU6IHRoaXMudGltZVRvSHVtYW5UaW1lKCBtYXBwaW5nLmdldCgnZW5kdGltZScpIClcbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH0gKSBcbiAgICAgICAgfSApXG4gICAgICAgIC5mYWlsKCBlID0+IGNvbnNvbGUubG9nKCBcIkdldHRpbmcgR3JvdXAgRHJvcG9mZnMgOiBcIiArIGUuc3RhY2sgfHwgZSApIClcbiAgICB9LFxuXG4gICAgZ2V0U2VsZWN0ZWREYXRlcygpIHtcbiAgICAgICAgdGhpcy5zZXQoIHsgc2VsZWN0ZWREYXRlczpcbiAgICAgICAgICAgIHRoaXMuXyggdGhpcy5nZXQoJ2RlbGl2ZXJ5RGF0ZXMnKVxuICAgICAgICAgICAgICAgIC5yZWplY3QoIGRlbGl2ZXJ5RGF5ID0+IGRlbGl2ZXJ5RGF5LmdldCgndW5zZWxlY3RhYmxlJykgKSApXG4gICAgICAgICAgICAgICAgLnJlamVjdCggZGVsaXZlcnlEYXkgPT4gdGhpcy5fKHRoaXMuZ2V0KCdza2lwRGF5cycpKS5jb250YWlucyggZGVsaXZlcnlEYXkuaWQgKSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBnZXRTaGFyZU9wdGlvbnMoKSB7XG4gICAgICAgIFxuICAgICAgICBpZiggdGhpcy5oYXMoJ3NoYXJlb3B0aW9ucycpICkgcmV0dXJuIHRoaXMuUSggdGhpcy5nZXQoJ3NoYXJlb3B0aW9ucycpIClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuUSggbmV3ICggdGhpcy5Db2xsZWN0aW9uLmV4dGVuZCggeyB1cmw6IFwiL3NoYXJlb3B0aW9uc2hhcmVcIiB9ICkgKSgpLmZldGNoKCB7IGRhdGE6IHsgc2hhcmVpZDogdGhpcy5pZCB9IH0gKSApXG4gICAgICAgIC50aGVuKCBtYXBwaW5ncyA9PiB7XG4gICAgICAgICAgICB2YXIgc2hhcmVPcHRpb25zXG5cbiAgICAgICAgICAgIGlmKCBtYXBwaW5ncy5sZW5ndGggPT09IDAgKSByZXR1cm5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2hhcmVPcHRpb25zID0gbmV3ICggdGhpcy5Db2xsZWN0aW9uLmV4dGVuZCggeyB1cmw6IFwiL3NoYXJlb3B0aW9uXCIgfSApICkoKVxuICAgICAgICAgICAgdGhpcy5zZXQoIHsgc2hhcmVvcHRpb25zOiBzaGFyZU9wdGlvbnMgfSApXG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLlEoIHNoYXJlT3B0aW9ucy5mZXRjaCggeyBkYXRhOiB7IGlkOiBtYXBwaW5ncy5tYXAoIHJlY29yZCA9PiByZWNvcmQuc2hhcmVvcHRpb25pZCApLmpvaW4oJywnKSB9IH0gKSApXG4gICAgICAgIH0gKVxuICAgICAgICAudGhlbiggKCkgPT5cbiAgICAgICAgICAgIHRoaXMuUS5hbGwoIHRoaXMuZ2V0KCdzaGFyZW9wdGlvbnMnKS5tYXAoIHNoYXJlT3B0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBzaGFyZU9wdGlvbi5zZXQoIHsgb3B0aW9uczogbmV3ICggdGhpcy5Db2xsZWN0aW9uLmV4dGVuZCggeyBjb21wYXJhdG9yOiB0aGlzLnNoYXJlT3B0aW9uT3B0aW9uQ29tcGFyYXRvciwgdXJsOiBcIi9zaGFyZW9wdGlvbm9wdGlvblwiIH0gKSApKCkgfSApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUSggc2hhcmVPcHRpb24uZ2V0KCdvcHRpb25zJykuZmV0Y2goIHsgZGF0YTogeyBzaGFyZW9wdGlvbmlkOiBzaGFyZU9wdGlvbi5pZCB9IH0gKSApXG4gICAgICAgICAgICB9ICkgKVxuICAgICAgICApXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdldCgnc2hhcmVvcHRpb25zJykuY29tcGFyYXRvciA9IHRoaXMuc2hhcmVPcHRpb25Db21wYXJhdG9yXG4gICAgICAgICAgICB0aGlzLmdldCgnc2hhcmVvcHRpb25zJykuc29ydCgpXG4gICAgICAgIH0gKVxuICAgICAgICAuZmFpbCggZSA9PiBjb25zb2xlLmxvZyggXCJHZXR0aW5nIFNoYXJlIE9wdGlvbnMgOiBcIiArIGUuc3RhY2sgfHwgZSApIClcbiAgICB9LFxuXG4gICAgbW9uZXlUb0Zsb2F0KCBtb25leSApIHsgcmV0dXJuIHBhcnNlRmxvYXQoIG1vbmV5LnJlcGxhY2UoL1xcJHwsL2csIFwiXCIpICkgfSxcblxuICAgIHBhcnNlKCByZXNwb25zZSApIHtcbiAgICAgICAgdmFyIHN0YXJ0RGF0ZSA9IHRoaXMubW9tZW50KCByZXNwb25zZS5zdGFydGRhdGUgKSxcbiAgICAgICAgICAgIGVuZERhdGUgPSB0aGlzLm1vbWVudCggcmVzcG9uc2UuZW5kZGF0ZSApXG5cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oIHJlc3BvbnNlLCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogTWF0aC5jZWlsKCBlbmREYXRlLmRpZmYoIHN0YXJ0RGF0ZSwgJ2RheXMnICkgLyA3ICksXG4gICAgICAgICAgICBodW1hbkVuZGRhdGU6IGVuZERhdGUuZm9ybWF0KFwiTU1NIERcIiksXG4gICAgICAgICAgICBodW1hblN0YXJ0ZGF0ZTogc3RhcnREYXRlLmZvcm1hdChcIk1NTSBEXCIpLFxuICAgICAgICAgICAgc3RhcnRFcG9jaDogc3RhcnREYXRlLnVuaXgoKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgc2hhcmVPcHRpb25Db21wYXJhdG9yKCBhLCBiICkge1xuICAgICAgICB2YXIgbW9uZXlUb0Zsb2F0ID0gKCBtb25leSApID0+IHBhcnNlRmxvYXQoIG1vbmV5LnJlcGxhY2UoL1xcJHwsL2csIFwiXCIpICksXG4gICAgICAgICAgICBhVmFsID0gbW9uZXlUb0Zsb2F0KCBhLmdldCgnb3B0aW9ucycpLmF0KCBhLmdldCgnb3B0aW9ucycpLmxlbmd0aCAtIDEgKS5nZXQoJ3ByaWNlJykgKSxcbiAgICAgICAgICAgIGJWYWwgPSBtb25leVRvRmxvYXQoIGIuZ2V0KCdvcHRpb25zJykuYXQoIGIuZ2V0KCdvcHRpb25zJykubGVuZ3RoIC0gMSApLmdldCgncHJpY2UnKSApXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gKCBhVmFsID4gYlZhbCApXG4gICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICA6ICggYlZhbCA+IGFWYWwgKVxuICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgIDogMFxuICAgIH0sXG5cbiAgICBzaGFyZU9wdGlvbk9wdGlvbkNvbXBhcmF0b3IoIGEsIGIgKSB7XG4gICAgICAgIHZhciBtb25leVRvRmxvYXQgPSAoIG1vbmV5ICkgPT4gcGFyc2VGbG9hdCggbW9uZXkucmVwbGFjZSgvXFwkfCwvZywgXCJcIikgKSxcbiAgICAgICAgICAgIGFWYWwgPSBtb25leVRvRmxvYXQoIGEuZ2V0KCdwcmljZScpICksXG4gICAgICAgICAgICBiVmFsID0gbW9uZXlUb0Zsb2F0KCBiLmdldCgncHJpY2UnKSApXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gKCBhVmFsID4gYlZhbCApXG4gICAgICAgICAgICA/IDFcbiAgICAgICAgICAgIDogKCBiVmFsID4gYVZhbCApXG4gICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgIDogMFxuICAgIH0sXG5cbiAgICB0aW1lVG9IdW1hblRpbWUoIHRpbWUgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbWVudCggWyAnMjAxNi0xMi0xMicsIHRpbWUgXS5qb2luKCcgJykgKS5mb3JtYXQoJ2g6bW1BJykgXG4gICAgfVxuXG59ICkgKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgZGF5T2ZXZWVrTWFwOiByZXF1aXJlKCcuL0RheU9mV2VlaycpLFxuXG4gICAgcGFyc2UoIHJlc3BvbnNlICkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UubWFwKCByb3cgPT5cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oIHJvdywge1xuICAgICAgICAgICAgICAgIGRheW9md2VlazogdGhpcy5kYXlPZldlZWtNYXBbIHJvd1sgJ3NoYXJlZ3JvdXBkcm9wb2ZmLmRheW9md2VlaycgXSB8fCByb3cuZGF5b2Z3ZWVrIF0sXG4gICAgICAgICAgICAgICAgc3RhcnR0aW1lOiB0aGlzLm1vbWVudCggWyB0aGlzLm1vbWVudCgpLmZvcm1hdCgnWVlZWS1NTS1ERCcpLCByb3dbICdzaGFyZWdyb3VwZHJvcG9mZi5zdGFydHRpbWUnIF0gfHwgcm93LnN0YXJ0dGltZSBdLmpvaW4oJyAnKSApLmZvcm1hdCgnaDptbUEnKSxcbiAgICAgICAgICAgICAgICBlbmR0aW1lOiB0aGlzLm1vbWVudCggWyB0aGlzLm1vbWVudCgpLmZvcm1hdCgnWVlZWS1NTS1ERCcpLCByb3dbICdzaGFyZWdyb3VwZHJvcG9mZi5lbmR0aW1lJyBdIHx8IHJvdy5lbmR0aW1lIF0uam9pbignICcpICkuZm9ybWF0KCdoOm1tQScpLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiByb3cubG9jYXRpb24gPyBKU09OLnBhcnNlKCByb3cubG9jYXRpb24gKS5jb29yZGluYXRlcyA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2U6ICdzaGFyZWdyb3VwZHJvcG9mZidcblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgcmVzb3VyY2U6ICdzaGFyZW9wdGlvbm9wdGlvbidcbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBuZXcgKCByZXF1aXJlKCdiYWNrYm9uZScpLk1vZGVsLmV4dGVuZCgge1xuXG4gICAgZGVmYXVsdHM6IHsgc3RhdGU6IHt9IH0sXG5cbiAgICBpc0FkbWluKCkge1xuICAgICAgICBjb25zdCByb2xlcyA9IHRoaXMuZ2V0KCdyb2xlcycpXG5cbiAgICAgICAgaWYoICEgQXJyYXkuaXNBcnJheSggcm9sZXMgKSApIHJldHVybiBmYWxzZVxuXG4gICAgICAgIHJldHVybiByb2xlcy5pbmNsdWRlcyggJ2FkbWluJyApXG4gICAgfSxcblxuICAgIHVybCgpIHsgcmV0dXJuIFwiL3VzZXJcIiB9XG5cbn0gKSApKClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiggeyB9LCByZXF1aXJlKCcuLi8uLi8uLi9saWIvTW9kZWwnKSwgcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyLnByb3RvdHlwZSwge1xuXG4gICAgWGhyOiByZXF1aXJlKCcuLi9YaHInKSxcblxuICAgIGFkZCggZGF0dW0gKSB7XG4gICAgICAgIHRoaXMuZGF0YS5wdXNoKCBkYXR1bSApXG5cbiAgICAgICAgaWYoIHRoaXMuc3RvcmVCeSApIHRoaXMuX3N0b3JlT25lKCBkYXR1bSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgZGVsZXRlKCkge1xuICAgICAgICBjb25zdCBrZXlWYWx1ZSA9IHRoaXMuZGF0YVsgdGhpcy5tZXRhLmtleSBdXG4gICAgICAgIHJldHVybiB0aGlzLlhociggeyBtZXRob2Q6ICdERUxFVEUnLCByZXNvdXJjZTogdGhpcy5yZXNvdXJjZSwgaWQ6IGtleVZhbHVlIH0gKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5tZXRhLmtleVxuXG4gICAgICAgICAgICBpZiggQXJyYXkuaXNBcnJheSggdGhpcy5kYXRhICkgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0dW0gPSB0aGlzLmRhdGEuZmluZCggZGF0dW0gPT4gZGF0dW1bIGtleSBdID09IGtleVZhbHVlIClcblxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLnN0b3JlICkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5zdG9yZSApLmZvckVhY2goIGF0dHIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZVsgYXR0ciBdWyBkYXR1bVsgYXR0ciBdIF0gPSB0aGlzLnN0b3JlWyBhdHRyIF1bIGRhdHVtWyBhdHRyIF0gXS5maWx0ZXIoIGRhdHVtID0+IGRhdHVtWyBrZXkgXSAhPSBrZXlWYWx1ZSApXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5zdG9yZVsgYXR0ciBdWyBkYXR1bVsgYXR0ciBdIF0ubGVuZ3RoID09PSAwICkgeyB0aGlzLnN0b3JlWyBhdHRyIF1bIGRhdHVtWyBhdHRyIF0gXSA9IHVuZGVmaW5lZCB9XG4gICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YS5maWx0ZXIoIGRhdHVtID0+IGRhdHVtWyBrZXkgXSAhPSBrZXlWYWx1ZSApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHRoaXMuZGF0YSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBnZXQoIG9wdHM9eyBxdWVyeTp7fSB9ICkge1xuICAgICAgICBpZiggb3B0cy5xdWVyeSB8fCB0aGlzLnBhZ2luYXRpb24gKSBPYmplY3QuYXNzaWduKCBvcHRzLnF1ZXJ5LCB0aGlzLnBhZ2luYXRpb24gKVxuXG4gICAgICAgIHJldHVybiB0aGlzLlhociggeyBtZXRob2Q6IG9wdHMubWV0aG9kIHx8ICdnZXQnLCByZXNvdXJjZTogdGhpcy5yZXNvdXJjZSwgaGVhZGVyczogdGhpcy5oZWFkZXJzIHx8IHt9LCBxczogb3B0cy5xdWVyeSA/IEpTT04uc3RyaW5naWZ5KCBvcHRzLnF1ZXJ5ICkgOiB1bmRlZmluZWQgfSApXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7XG5cbiAgICAgICAgICAgIGlmKCBBcnJheS5pc0FycmF5KCB0aGlzLmRhdGEgKSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmRhdGEuY29uY2F0KCBvcHRzLnBhcnNlID8gb3B0cy5wYXJzZSggcmVzcG9uc2UsIG9wdHMuc3RvcmVCeSApIDogcmVzcG9uc2UgKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiggb3B0cy5zdG9yZUJ5ICkgdGhpcy5fcmVzZXRTdG9yZSggb3B0cy5zdG9yZUJ5IClcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLnBhcnNlID8gdGhpcy5wYXJzZSggcmVzcG9uc2UsIG9wdHMuc3RvcmVCeSApIDogcmVzcG9uc2VcbiAgICAgICAgICAgICAgICBpZiggb3B0cy5zdG9yZUJ5ICkgdGhpcy5fc3RvcmUoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2dvdCcpXG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHJlc3BvbnNlIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGdldENvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5YaHIoIHsgbWV0aG9kOiAnZ2V0JywgcmVzb3VyY2U6IHRoaXMucmVzb3VyY2UsIGhlYWRlcnM6IHRoaXMuaGVhZGVycyB8fCB7fSwgcXM6IEpTT04uc3RyaW5naWZ5KCB7IGNvdW50T25seTogdHJ1ZSB9ICkgfSApXG4gICAgICAgIC50aGVuKCAoIHsgcmVzdWx0IH0gKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1ldGEuY291bnQgPSByZXN1bHRcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHJlc3VsdCApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBnaXQoIGF0dHIgKSB7IHJldHVybiB0aGlzLmRhdGFbIGF0dHIgXSB9LFxuXG4gICAgbW9uZXlUb1JlYWwoIHByaWNlICkgeyByZXR1cm4gcGFyc2VGbG9hdCggcHJpY2UucmVwbGFjZSggL1xcJHwsL2csIFwiXCIgKSApIH0sXG5cbiAgICBwYXRjaCggaWQsIGRhdGEgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhociggeyBtZXRob2Q6ICdwYXRjaCcsIGlkLCByZXNvdXJjZTogdGhpcy5yZXNvdXJjZSwgaGVhZGVyczogdGhpcy5oZWFkZXJzIHx8IHt9LCBkYXRhOiBKU09OLnN0cmluZ2lmeSggZGF0YSB8fCB0aGlzLmRhdGEgKSB9IClcbiAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgXG4gICAgICAgICAgICBpZiggQXJyYXkuaXNBcnJheSggdGhpcy5kYXRhICkgKSB7IFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YSA/IHRoaXMuZGF0YS5jb25jYXQoIHJlc3BvbnNlICkgOiBbIHJlc3BvbnNlIF1cbiAgICAgICAgICAgICAgICBpZiggdGhpcy5zdG9yZSApIE9iamVjdC5rZXlzKCB0aGlzLnN0b3JlICkuZm9yRWFjaCggYXR0ciA9PiB0aGlzLl9zdG9yZSggcmVzcG9uc2UsIGF0dHIgKSApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHJlc3BvbnNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHJlc3BvbnNlIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIF9wdXQoIGtleVZhbHVlLCBkYXRhICkge1xuICAgICAgICBsZXQgaXRlbSA9IHRoaXMuZGF0YS5maW5kKCBkYXR1bSA9PiBkYXR1bVsgdGhpcy5tZXRhLmtleSBdID09IGtleVZhbHVlICk7XG4gICAgICAgIGlmKCBpdGVtICkgaXRlbSA9IGRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHB1dCggaWQsIGRhdGEgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhociggeyBtZXRob2Q6ICdwdXQnLCBpZCwgcmVzb3VyY2U6IHRoaXMucmVzb3VyY2UsIGhlYWRlcnM6IHRoaXMuaGVhZGVycyB8fCB7fSwgZGF0YTogSlNPTi5zdHJpbmdpZnkoIGRhdGEgKSB9IClcbiAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgXG4gICAgICAgICAgICBpZiggQXJyYXkuaXNBcnJheSggdGhpcy5kYXRhICkgKSB7IFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSByZXNwb25zZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCByZXNwb25zZSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBwb3N0KCBtb2RlbCApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWGhyKCB7IG1ldGhvZDogJ3Bvc3QnLCByZXNvdXJjZTogdGhpcy5yZXNvdXJjZSwgaGVhZGVyczogT2JqZWN0LmFzc2lnbiggeyB2MjogdHJ1ZSB9LCB0aGlzLmhlYWRlcnMgfHwge30gKSwgZGF0YTogSlNPTi5zdHJpbmdpZnkoIG1vZGVsIHx8IHRoaXMuZGF0YSApIH0gKVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiggQXJyYXkuaXNBcnJheSggdGhpcy5kYXRhICkgKSB7IFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YSA/IHRoaXMuZGF0YS5jb25jYXQoIHJlc3BvbnNlICkgOiBbIHJlc3BvbnNlIF1cbiAgICAgICAgICAgICAgICBpZiggdGhpcy5zdG9yZSApIE9iamVjdC5rZXlzKCB0aGlzLnN0b3JlICkuZm9yRWFjaCggYXR0ciA9PiB0aGlzLl9zdG9yZSggcmVzcG9uc2UsIGF0dHIgKSApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHJlc3BvbnNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHJlc3BvbnNlIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHJlbW92ZSggaXRlbSApIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmRhdGEuZmluZEluZGV4KCBkYXR1bSA9PiBKU09OLnN0cmluZ2lmeSggZGF0dW0gKSA9PT0gSlNPTi5zdHJpbmdpZnkoIGl0ZW0gKSApXG5cbiAgICAgICAgaWYoIGluZGV4ID09PSAtMSApIHJldHVyblxuXG4gICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoIGluZGV4LCAxIClcbiAgICB9LFxuXG4gICAgc2V0KCBhdHRyLCB2YWx1ZSApIHtcbiAgICAgICAgdGhpcy5kYXRhWyBhdHRyIF0gPSB2YWx1ZVxuICAgICAgICB0aGlzLmVtaXQoIGAke2F0dHJ9Q2hhbmdlZGAgKVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZSggZGF0YSApIHtcbiAgICAgICAgbGV0IHZhbGlkID0gdHJ1ZVxuICAgICAgIFxuICAgICAgICBPYmplY3Qua2V5cyggZGF0YSApLmZvckVhY2goIG5hbWUgPT4geyBcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGRhdGFbIG5hbWUgXSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXMuZmluZCggYXR0ciA9PiBhdHRyLm5hbWUgPT09IG5hbWUgKSAgICAgICBcbiAgICBcbiAgICAgICAgICAgIGlmKCBhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCB8fCAhYXR0cmlidXRlLnZhbGlkYXRlICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVsgbmFtZSBdID0gdmFsXG4gICAgICAgICAgICAgICAgICAgID8gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICA/IHZhbC50cmltKCkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWxcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0gZWxzZSBpZiggdmFsaWQgJiYgIXRoaXMudmFsaWRhdGVEYXR1bSggYXR0cmlidXRlLCB2YWwgKSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoICd2YWxpZGF0aW9uRXJyb3InLCBhdHRyaWJ1dGUgKVxuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgIH0gZWxzZSBpZiggdGhpcy52YWxpZGF0ZURhdHVtKCBhdHRyaWJ1dGUsIHZhbCApICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVsgbmFtZSBdID0gdmFsLnRyaW0oKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gdmFsaWRcbiAgICB9LFxuXG4gICAgdmFsaWRhdGVEYXR1bSggYXR0ciwgdmFsICkge1xuICAgICAgICByZXR1cm4gYXR0ci52YWxpZGF0ZS5jYWxsKCB0aGlzLCB2YWwudHJpbSgpIClcbiAgICB9XG5cbn0gKVxuIiwiLyohIHZlcnNpb24gOiA0LjE3LjM3XG4gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gYm9vdHN0cmFwLWRhdGV0aW1lanNcbiBodHRwczovL2dpdGh1Yi5jb20vRW9uYXNkYW4vYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyXG4gQ29weXJpZ2h0IChjKSAyMDE1IEpvbmF0aGFuIFBldGVyc29uXG4gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbi8qXG4gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbiBDb3B5cmlnaHQgKGMpIDIwMTUgSm9uYXRoYW4gUGV0ZXJzb25cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICovXG4vKmdsb2JhbCBkZWZpbmU6ZmFsc2UgKi9cbi8qZ2xvYmFsIGV4cG9ydHM6ZmFsc2UgKi9cbi8qZ2xvYmFsIHJlcXVpcmU6ZmFsc2UgKi9cbi8qZ2xvYmFsIGpRdWVyeTpmYWxzZSAqL1xuLypnbG9iYWwgbW9tZW50OmZhbHNlICovXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQgaXMgdXNlZCAtIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbJ2pxdWVyeScsICdtb21lbnQnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgnbW9tZW50JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5laXRoZXIgQU1EIG5vciBDb21tb25KUyB1c2VkLiBVc2UgZ2xvYmFsIHZhcmlhYmxlcy5cbiAgICAgICAgaWYgKHR5cGVvZiBqUXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyAnYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyIHJlcXVpcmVzIGpRdWVyeSB0byBiZSBsb2FkZWQgZmlyc3QnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbW9tZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgJ2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlciByZXF1aXJlcyBNb21lbnQuanMgdG8gYmUgbG9hZGVkIGZpcnN0JztcbiAgICAgICAgfVxuICAgICAgICBmYWN0b3J5KGpRdWVyeSwgbW9tZW50KTtcbiAgICB9XG59KGZ1bmN0aW9uICgkLCBtb21lbnQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKCFtb21lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIgcmVxdWlyZXMgTW9tZW50LmpzIHRvIGJlIGxvYWRlZCBmaXJzdCcpO1xuICAgIH1cblxuICAgIHZhciBkYXRlVGltZVBpY2tlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBwaWNrZXIgPSB7fSxcbiAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICB2aWV3RGF0ZSxcbiAgICAgICAgICAgIHVuc2V0ID0gdHJ1ZSxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgY29tcG9uZW50ID0gZmFsc2UsXG4gICAgICAgICAgICB3aWRnZXQgPSBmYWxzZSxcbiAgICAgICAgICAgIHVzZTI0SG91cnMsXG4gICAgICAgICAgICBtaW5WaWV3TW9kZU51bWJlciA9IDAsXG4gICAgICAgICAgICBhY3R1YWxGb3JtYXQsXG4gICAgICAgICAgICBwYXJzZUZvcm1hdHMsXG4gICAgICAgICAgICBjdXJyZW50Vmlld01vZGUsXG4gICAgICAgICAgICBkYXRlUGlja2VyTW9kZXMgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjbHNOYW1lOiAnZGF5cycsXG4gICAgICAgICAgICAgICAgICAgIG5hdkZuYzogJ00nLFxuICAgICAgICAgICAgICAgICAgICBuYXZTdGVwOiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNsc05hbWU6ICdtb250aHMnLFxuICAgICAgICAgICAgICAgICAgICBuYXZGbmM6ICd5JyxcbiAgICAgICAgICAgICAgICAgICAgbmF2U3RlcDogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjbHNOYW1lOiAneWVhcnMnLFxuICAgICAgICAgICAgICAgICAgICBuYXZGbmM6ICd5JyxcbiAgICAgICAgICAgICAgICAgICAgbmF2U3RlcDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZTogJ2RlY2FkZXMnLFxuICAgICAgICAgICAgICAgICAgICBuYXZGbmM6ICd5JyxcbiAgICAgICAgICAgICAgICAgICAgbmF2U3RlcDogMTAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHZpZXdNb2RlcyA9IFsnZGF5cycsICdtb250aHMnLCAneWVhcnMnLCAnZGVjYWRlcyddLFxuICAgICAgICAgICAgdmVydGljYWxNb2RlcyA9IFsndG9wJywgJ2JvdHRvbScsICdhdXRvJ10sXG4gICAgICAgICAgICBob3Jpem9udGFsTW9kZXMgPSBbJ2xlZnQnLCAncmlnaHQnLCAnYXV0byddLFxuICAgICAgICAgICAgdG9vbGJhclBsYWNlbWVudHMgPSBbJ2RlZmF1bHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgICAgICAgICAga2V5TWFwID0ge1xuICAgICAgICAgICAgICAgICd1cCc6IDM4LFxuICAgICAgICAgICAgICAgIDM4OiAndXAnLFxuICAgICAgICAgICAgICAgICdkb3duJzogNDAsXG4gICAgICAgICAgICAgICAgNDA6ICdkb3duJyxcbiAgICAgICAgICAgICAgICAnbGVmdCc6IDM3LFxuICAgICAgICAgICAgICAgIDM3OiAnbGVmdCcsXG4gICAgICAgICAgICAgICAgJ3JpZ2h0JzogMzksXG4gICAgICAgICAgICAgICAgMzk6ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgJ3RhYic6IDksXG4gICAgICAgICAgICAgICAgOTogJ3RhYicsXG4gICAgICAgICAgICAgICAgJ2VzY2FwZSc6IDI3LFxuICAgICAgICAgICAgICAgIDI3OiAnZXNjYXBlJyxcbiAgICAgICAgICAgICAgICAnZW50ZXInOiAxMyxcbiAgICAgICAgICAgICAgICAxMzogJ2VudGVyJyxcbiAgICAgICAgICAgICAgICAncGFnZVVwJzogMzMsXG4gICAgICAgICAgICAgICAgMzM6ICdwYWdlVXAnLFxuICAgICAgICAgICAgICAgICdwYWdlRG93bic6IDM0LFxuICAgICAgICAgICAgICAgIDM0OiAncGFnZURvd24nLFxuICAgICAgICAgICAgICAgICdzaGlmdCc6IDE2LFxuICAgICAgICAgICAgICAgIDE2OiAnc2hpZnQnLFxuICAgICAgICAgICAgICAgICdjb250cm9sJzogMTcsXG4gICAgICAgICAgICAgICAgMTc6ICdjb250cm9sJyxcbiAgICAgICAgICAgICAgICAnc3BhY2UnOiAzMixcbiAgICAgICAgICAgICAgICAzMjogJ3NwYWNlJyxcbiAgICAgICAgICAgICAgICAndCc6IDg0LFxuICAgICAgICAgICAgICAgIDg0OiAndCcsXG4gICAgICAgICAgICAgICAgJ2RlbGV0ZSc6IDQ2LFxuICAgICAgICAgICAgICAgIDQ2OiAnZGVsZXRlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGtleVN0YXRlID0ge30sXG5cbiAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFByaXZhdGUgZnVuY3Rpb25zXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICAgICAgZ2V0TW9tZW50ID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHpFbmFibGVkID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJldHVybk1vbWVudCxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFpvbmVPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluY29taW5nWm9uZU9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgdGltZVpvbmVJbmRpY2F0b3IsXG4gICAgICAgICAgICAgICAgICAgIGRhdGVXaXRoVGltZVpvbmVJbmZvO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vbWVudC50eiAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMudGltZVpvbmUgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnRpbWVab25lICE9PSBudWxsICYmIG9wdGlvbnMudGltZVpvbmUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHR6RW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkID09PSB1bmRlZmluZWQgfHwgZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHpFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Nb21lbnQgPSBtb21lbnQoKS50eihvcHRpb25zLnRpbWVab25lKS5zdGFydE9mKCdkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Nb21lbnQgPSBtb21lbnQoKS5zdGFydE9mKCdkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHpFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Wm9uZU9mZnNldCA9IG1vbWVudCgpLnR6KG9wdGlvbnMudGltZVpvbmUpLnV0Y09mZnNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5jb21pbmdab25lT2Zmc2V0ID0gbW9tZW50KGQsIHBhcnNlRm9ybWF0cywgb3B0aW9ucy51c2VTdHJpY3QpLnV0Y09mZnNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluY29taW5nWm9uZU9mZnNldCAhPT0gY3VycmVudFpvbmVPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lWm9uZUluZGljYXRvciA9IG1vbWVudCgpLnR6KG9wdGlvbnMudGltZVpvbmUpLmZvcm1hdCgnWicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVXaXRoVGltZVpvbmVJbmZvID0gbW9tZW50KGQsIHBhcnNlRm9ybWF0cywgb3B0aW9ucy51c2VTdHJpY3QpLmZvcm1hdCgnWVlZWS1NTS1ERFtUXUhIOm1tOnNzJykgKyB0aW1lWm9uZUluZGljYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Nb21lbnQgPSBtb21lbnQoZGF0ZVdpdGhUaW1lWm9uZUluZm8sIHBhcnNlRm9ybWF0cywgb3B0aW9ucy51c2VTdHJpY3QpLnR6KG9wdGlvbnMudGltZVpvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Nb21lbnQgPSBtb21lbnQoZCwgcGFyc2VGb3JtYXRzLCBvcHRpb25zLnVzZVN0cmljdCkudHoob3B0aW9ucy50aW1lWm9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Nb21lbnQgPSBtb21lbnQoZCwgcGFyc2VGb3JtYXRzLCBvcHRpb25zLnVzZVN0cmljdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybk1vbWVudDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0VuYWJsZWQgPSBmdW5jdGlvbiAoZ3JhbnVsYXJpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGdyYW51bGFyaXR5ICE9PSAnc3RyaW5nJyB8fCBncmFudWxhcml0eS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lzRW5hYmxlZCBleHBlY3RzIGEgc2luZ2xlIGNoYXJhY3RlciBzdHJpbmcgcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZ3JhbnVsYXJpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0dWFsRm9ybWF0LmluZGV4T2YoJ1knKSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbEZvcm1hdC5pbmRleE9mKCdNJykgIT09IC0xO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3R1YWxGb3JtYXQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdkJykgIT09IC0xO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSCc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0dWFsRm9ybWF0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignaCcpICE9PSAtMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0dWFsRm9ybWF0LmluZGV4T2YoJ20nKSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbEZvcm1hdC5pbmRleE9mKCdzJykgIT09IC0xO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoaXNFbmFibGVkKCdoJykgfHwgaXNFbmFibGVkKCdtJykgfHwgaXNFbmFibGVkKCdzJykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFzRGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGlzRW5hYmxlZCgneScpIHx8IGlzRW5hYmxlZCgnTScpIHx8IGlzRW5hYmxlZCgnZCcpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldERhdGVQaWNrZXJUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVhZFRlbXBsYXRlID0gJCgnPHRoZWFkPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRoPicpLmFkZENsYXNzKCdwcmV2JykuYXR0cignZGF0YS1hY3Rpb24nLCAncHJldmlvdXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicpLmFkZENsYXNzKG9wdGlvbnMuaWNvbnMucHJldmlvdXMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGg+JykuYWRkQ2xhc3MoJ3BpY2tlci1zd2l0Y2gnKS5hdHRyKCdkYXRhLWFjdGlvbicsICdwaWNrZXJTd2l0Y2gnKS5hdHRyKCdjb2xzcGFuJywgKG9wdGlvbnMuY2FsZW5kYXJXZWVrcyA/ICc2JyA6ICc1JykpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRoPicpLmFkZENsYXNzKCduZXh0JykuYXR0cignZGF0YS1hY3Rpb24nLCAnbmV4dCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JykuYWRkQ2xhc3Mob3B0aW9ucy5pY29ucy5uZXh0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRUZW1wbGF0ZSA9ICQoJzx0Ym9keT4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dHI+JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nKS5hdHRyKCdjb2xzcGFuJywgKG9wdGlvbnMuY2FsZW5kYXJXZWVrcyA/ICc4JyA6ICc3JykpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAkKCc8ZGl2PicpLmFkZENsYXNzKCdkYXRlcGlja2VyLWRheXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGFibGU+JykuYWRkQ2xhc3MoJ3RhYmxlLWNvbmRlbnNlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChoZWFkVGVtcGxhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGJvZHk+JykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgJCgnPGRpdj4nKS5hZGRDbGFzcygnZGF0ZXBpY2tlci1tb250aHMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGFibGU+JykuYWRkQ2xhc3MoJ3RhYmxlLWNvbmRlbnNlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChoZWFkVGVtcGxhdGUuY2xvbmUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGNvbnRUZW1wbGF0ZS5jbG9uZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICQoJzxkaXY+JykuYWRkQ2xhc3MoJ2RhdGVwaWNrZXIteWVhcnMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGFibGU+JykuYWRkQ2xhc3MoJ3RhYmxlLWNvbmRlbnNlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChoZWFkVGVtcGxhdGUuY2xvbmUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGNvbnRUZW1wbGF0ZS5jbG9uZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICQoJzxkaXY+JykuYWRkQ2xhc3MoJ2RhdGVwaWNrZXItZGVjYWRlcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0YWJsZT4nKS5hZGRDbGFzcygndGFibGUtY29uZGVuc2VkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGhlYWRUZW1wbGF0ZS5jbG9uZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoY29udFRlbXBsYXRlLmNsb25lKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRUaW1lUGlja2VyTWFpblRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0b3BSb3cgPSAkKCc8dHI+JyksXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZVJvdyA9ICQoJzx0cj4nKSxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tUm93ID0gJCgnPHRyPicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRW5hYmxlZCgnaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcFJvdy5hcHBlbmQoJCgnPHRkPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxhPicpLmF0dHIoe2hyZWY6ICcjJywgdGFiaW5kZXg6ICctMScsICd0aXRsZSc6IG9wdGlvbnMudG9vbHRpcHMuaW5jcmVtZW50SG91cn0pLmFkZENsYXNzKCdidG4nKS5hdHRyKCdkYXRhLWFjdGlvbicsICdpbmNyZW1lbnRIb3VycycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLnVwKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JykuYWRkQ2xhc3MoJ3RpbWVwaWNrZXItaG91cicpLmF0dHIoeydkYXRhLXRpbWUtY29tcG9uZW50JzonaG91cnMnLCAndGl0bGUnOiBvcHRpb25zLnRvb2x0aXBzLnBpY2tIb3VyfSkuYXR0cignZGF0YS1hY3Rpb24nLCAnc2hvd0hvdXJzJykpKTtcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JykuYXR0cih7aHJlZjogJyMnLCB0YWJpbmRleDogJy0xJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5kZWNyZW1lbnRIb3VyfSkuYWRkQ2xhc3MoJ2J0bicpLmF0dHIoJ2RhdGEtYWN0aW9uJywgJ2RlY3JlbWVudEhvdXJzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicpLmFkZENsYXNzKG9wdGlvbnMuaWNvbnMuZG93bikpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0VuYWJsZWQoJ20nKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCdoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcFJvdy5hcHBlbmQoJCgnPHRkPicpLmFkZENsYXNzKCdzZXBhcmF0b3InKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRkbGVSb3cuYXBwZW5kKCQoJzx0ZD4nKS5hZGRDbGFzcygnc2VwYXJhdG9yJykuaHRtbCgnOicpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbVJvdy5hcHBlbmQoJCgnPHRkPicpLmFkZENsYXNzKCdzZXBhcmF0b3InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG9wUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JykuYXR0cih7aHJlZjogJyMnLCB0YWJpbmRleDogJy0xJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5pbmNyZW1lbnRNaW51dGV9KS5hZGRDbGFzcygnYnRuJykuYXR0cignZGF0YS1hY3Rpb24nLCAnaW5jcmVtZW50TWludXRlcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLnVwKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JykuYWRkQ2xhc3MoJ3RpbWVwaWNrZXItbWludXRlJykuYXR0cih7J2RhdGEtdGltZS1jb21wb25lbnQnOiAnbWludXRlcycsICd0aXRsZSc6IG9wdGlvbnMudG9vbHRpcHMucGlja01pbnV0ZX0pLmF0dHIoJ2RhdGEtYWN0aW9uJywgJ3Nob3dNaW51dGVzJykpKTtcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JykuYXR0cih7aHJlZjogJyMnLCB0YWJpbmRleDogJy0xJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5kZWNyZW1lbnRNaW51dGV9KS5hZGRDbGFzcygnYnRuJykuYXR0cignZGF0YS1hY3Rpb24nLCAnZGVjcmVtZW50TWludXRlcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLmRvd24pKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCdzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRW5hYmxlZCgnbScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BSb3cuYXBwZW5kKCQoJzx0ZD4nKS5hZGRDbGFzcygnc2VwYXJhdG9yJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWlkZGxlUm93LmFwcGVuZCgkKCc8dGQ+JykuYWRkQ2xhc3MoJ3NlcGFyYXRvcicpLmh0bWwoJzonKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b21Sb3cuYXBwZW5kKCQoJzx0ZD4nKS5hZGRDbGFzcygnc2VwYXJhdG9yJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRvcFJvdy5hcHBlbmQoJCgnPHRkPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxhPicpLmF0dHIoe2hyZWY6ICcjJywgdGFiaW5kZXg6ICctMScsICd0aXRsZSc6IG9wdGlvbnMudG9vbHRpcHMuaW5jcmVtZW50U2Vjb25kfSkuYWRkQ2xhc3MoJ2J0bicpLmF0dHIoJ2RhdGEtYWN0aW9uJywgJ2luY3JlbWVudFNlY29uZHMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JykuYWRkQ2xhc3Mob3B0aW9ucy5pY29ucy51cCkpKSk7XG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZVJvdy5hcHBlbmQoJCgnPHRkPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicpLmFkZENsYXNzKCd0aW1lcGlja2VyLXNlY29uZCcpLmF0dHIoeydkYXRhLXRpbWUtY29tcG9uZW50JzogJ3NlY29uZHMnLCAndGl0bGUnOiBvcHRpb25zLnRvb2x0aXBzLnBpY2tTZWNvbmR9KS5hdHRyKCdkYXRhLWFjdGlvbicsICdzaG93U2Vjb25kcycpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbVJvdy5hcHBlbmQoJCgnPHRkPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxhPicpLmF0dHIoe2hyZWY6ICcjJywgdGFiaW5kZXg6ICctMScsICd0aXRsZSc6IG9wdGlvbnMudG9vbHRpcHMuZGVjcmVtZW50U2Vjb25kfSkuYWRkQ2xhc3MoJ2J0bicpLmF0dHIoJ2RhdGEtYWN0aW9uJywgJ2RlY3JlbWVudFNlY29uZHMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JykuYWRkQ2xhc3Mob3B0aW9ucy5pY29ucy5kb3duKSkpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXVzZTI0SG91cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wUm93LmFwcGVuZCgkKCc8dGQ+JykuYWRkQ2xhc3MoJ3NlcGFyYXRvcicpKTtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlUm93LmFwcGVuZCgkKCc8dGQ+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGJ1dHRvbj4nKS5hZGRDbGFzcygnYnRuIGJ0bi1wcmltYXJ5JykuYXR0cih7J2RhdGEtYWN0aW9uJzogJ3RvZ2dsZVBlcmlvZCcsIHRhYmluZGV4OiAnLTEnLCAndGl0bGUnOiBvcHRpb25zLnRvb2x0aXBzLnRvZ2dsZVBlcmlvZH0pKSk7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbVJvdy5hcHBlbmQoJCgnPHRkPicpLmFkZENsYXNzKCdzZXBhcmF0b3InKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJzxkaXY+JykuYWRkQ2xhc3MoJ3RpbWVwaWNrZXItcGlja2VyJylcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGFibGU+JykuYWRkQ2xhc3MoJ3RhYmxlLWNvbmRlbnNlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFt0b3BSb3csIG1pZGRsZVJvdywgYm90dG9tUm93XSkpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0VGltZVBpY2tlclRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBob3Vyc1ZpZXcgPSAkKCc8ZGl2PicpLmFkZENsYXNzKCd0aW1lcGlja2VyLWhvdXJzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRhYmxlPicpLmFkZENsYXNzKCd0YWJsZS1jb25kZW5zZWQnKSksXG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNWaWV3ID0gJCgnPGRpdj4nKS5hZGRDbGFzcygndGltZXBpY2tlci1taW51dGVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRhYmxlPicpLmFkZENsYXNzKCd0YWJsZS1jb25kZW5zZWQnKSksXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZHNWaWV3ID0gJCgnPGRpdj4nKS5hZGRDbGFzcygndGltZXBpY2tlci1zZWNvbmRzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRhYmxlPicpLmFkZENsYXNzKCd0YWJsZS1jb25kZW5zZWQnKSksXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IFtnZXRUaW1lUGlja2VyTWFpblRlbXBsYXRlKCldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRW5hYmxlZCgnaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKGhvdXJzVmlldyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0VuYWJsZWQoJ20nKSkge1xuICAgICAgICAgICAgICAgICAgICByZXQucHVzaChtaW51dGVzVmlldyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0VuYWJsZWQoJ3MnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXQucHVzaChzZWNvbmRzVmlldyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFRvb2xiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dUb2RheUJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICByb3cucHVzaCgkKCc8dGQ+JykuYXBwZW5kKCQoJzxhPicpLmF0dHIoeydkYXRhLWFjdGlvbic6J3RvZGF5JywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy50b2RheX0pLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLnRvZGF5KSkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnNpZGVCeVNpZGUgJiYgaGFzRGF0ZSgpICYmIGhhc1RpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICByb3cucHVzaCgkKCc8dGQ+JykuYXBwZW5kKCQoJzxhPicpLmF0dHIoeydkYXRhLWFjdGlvbic6J3RvZ2dsZVBpY2tlcicsICd0aXRsZSc6IG9wdGlvbnMudG9vbHRpcHMuc2VsZWN0VGltZX0pLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLnRpbWUpKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93Q2xlYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93LnB1c2goJCgnPHRkPicpLmFwcGVuZCgkKCc8YT4nKS5hdHRyKHsnZGF0YS1hY3Rpb24nOidjbGVhcicsICd0aXRsZSc6IG9wdGlvbnMudG9vbHRpcHMuY2xlYXJ9KS5hcHBlbmQoJCgnPHNwYW4+JykuYWRkQ2xhc3Mob3B0aW9ucy5pY29ucy5jbGVhcikpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dDbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICByb3cucHVzaCgkKCc8dGQ+JykuYXBwZW5kKCQoJzxhPicpLmF0dHIoeydkYXRhLWFjdGlvbic6J2Nsb3NlJywgJ3RpdGxlJzogb3B0aW9ucy50b29sdGlwcy5jbG9zZX0pLmFwcGVuZCgkKCc8c3Bhbj4nKS5hZGRDbGFzcyhvcHRpb25zLmljb25zLmNsb3NlKSkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJzx0YWJsZT4nKS5hZGRDbGFzcygndGFibGUtY29uZGVuc2VkJykuYXBwZW5kKCQoJzx0Ym9keT4nKS5hcHBlbmQoJCgnPHRyPicpLmFwcGVuZChyb3cpKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAkKCc8ZGl2PicpLmFkZENsYXNzKCdib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IGRyb3Bkb3duLW1lbnUnKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVZpZXcgPSAkKCc8ZGl2PicpLmFkZENsYXNzKCdkYXRlcGlja2VyJykuYXBwZW5kKGdldERhdGVQaWNrZXJUZW1wbGF0ZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgdGltZVZpZXcgPSAkKCc8ZGl2PicpLmFkZENsYXNzKCd0aW1lcGlja2VyJykuYXBwZW5kKGdldFRpbWVQaWNrZXJUZW1wbGF0ZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9ICQoJzx1bD4nKS5hZGRDbGFzcygnbGlzdC11bnN0eWxlZCcpLFxuICAgICAgICAgICAgICAgICAgICB0b29sYmFyID0gJCgnPGxpPicpLmFkZENsYXNzKCdwaWNrZXItc3dpdGNoJyArIChvcHRpb25zLmNvbGxhcHNlID8gJyBhY2NvcmRpb24tdG9nZ2xlJyA6ICcnKSkuYXBwZW5kKGdldFRvb2xiYXIoKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ2Ryb3Bkb3duLW1lbnUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodXNlMjRIb3Vycykge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5hZGRDbGFzcygndXNldHdlbnR5Zm91cicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCdzJykgJiYgIXVzZTI0SG91cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYWRkQ2xhc3MoJ3dpZGVyJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2lkZUJ5U2lkZSAmJiBoYXNEYXRlKCkgJiYgaGFzVGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLmFkZENsYXNzKCd0aW1lcGlja2VyLXNicycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50b29sYmFyUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYXBwZW5kKHRvb2xiYXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJzxkaXY+JykuYWRkQ2xhc3MoJ3JvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChkYXRlVmlldy5hZGRDbGFzcygnY29sLW1kLTYnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKHRpbWVWaWV3LmFkZENsYXNzKCdjb2wtbWQtNicpKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50b29sYmFyUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYXBwZW5kKHRvb2xiYXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50b29sYmFyUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZCh0b29sYmFyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhhc0RhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZCgkKCc8bGk+JykuYWRkQ2xhc3MoKG9wdGlvbnMuY29sbGFwc2UgJiYgaGFzVGltZSgpID8gJ2NvbGxhcHNlIGluJyA6ICcnKSkuYXBwZW5kKGRhdGVWaWV3KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2xiYXJQbGFjZW1lbnQgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZCh0b29sYmFyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhhc1RpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZCgkKCc8bGk+JykuYWRkQ2xhc3MoKG9wdGlvbnMuY29sbGFwc2UgJiYgaGFzRGF0ZSgpID8gJ2NvbGxhcHNlJyA6ICcnKSkuYXBwZW5kKHRpbWVWaWV3KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2xiYXJQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kKHRvb2xiYXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGUuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZGF0YVRvT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZURhdGEsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFPcHRpb25zID0ge307XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pcygnaW5wdXQnKSB8fCBvcHRpb25zLmlubGluZSkge1xuICAgICAgICAgICAgICAgICAgICBlRGF0YSA9IGVsZW1lbnQuZGF0YSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVEYXRhID0gZWxlbWVudC5maW5kKCdpbnB1dCcpLmRhdGEoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZURhdGEuZGF0ZU9wdGlvbnMgJiYgZURhdGEuZGF0ZU9wdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YU9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCBkYXRhT3B0aW9ucywgZURhdGEuZGF0ZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gJ2RhdGUnICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZURhdGFbYXR0cmlidXRlTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU9wdGlvbnNba2V5XSA9IGVEYXRhW2F0dHJpYnV0ZU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFPcHRpb25zO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGxhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gKGNvbXBvbmVudCB8fCBlbGVtZW50KS5wb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAoY29tcG9uZW50IHx8IGVsZW1lbnQpLm9mZnNldCgpLFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbCA9IG9wdGlvbnMud2lkZ2V0UG9zaXRpb25pbmcudmVydGljYWwsXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWwgPSBvcHRpb25zLndpZGdldFBvc2l0aW9uaW5nLmhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLndpZGdldFBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBvcHRpb25zLndpZGdldFBhcmVudC5hcHBlbmQod2lkZ2V0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuaXMoJ2lucHV0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gZWxlbWVudC5hZnRlcih3aWRnZXQpLnBhcmVudCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gZWxlbWVudC5hcHBlbmQod2lkZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW4oKS5maXJzdCgpLmFmdGVyKHdpZGdldCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVG9wIGFuZCBib3R0b20gbG9naWNcbiAgICAgICAgICAgICAgICBpZiAodmVydGljYWwgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0LnRvcCArIHdpZGdldC5oZWlnaHQoKSAqIDEuNSA+PSAkKHdpbmRvdykuaGVpZ2h0KCkgKyAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZGdldC5oZWlnaHQoKSArIGVsZW1lbnQub3V0ZXJIZWlnaHQoKSA8IG9mZnNldC50b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsID0gJ3RvcCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbCA9ICdib3R0b20nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTGVmdCBhbmQgcmlnaHQgbG9naWNcbiAgICAgICAgICAgICAgICBpZiAoaG9yaXpvbnRhbCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQud2lkdGgoKSA8IG9mZnNldC5sZWZ0ICsgd2lkZ2V0Lm91dGVyV2lkdGgoKSAvIDIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldC5sZWZ0ICsgd2lkZ2V0Lm91dGVyV2lkdGgoKSA+ICQod2luZG93KS53aWR0aCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b250YWwgPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmVydGljYWwgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5hZGRDbGFzcygndG9wJykucmVtb3ZlQ2xhc3MoJ2JvdHRvbScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5hZGRDbGFzcygnYm90dG9tJykucmVtb3ZlQ2xhc3MoJ3RvcCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChob3Jpem9udGFsID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5hZGRDbGFzcygncHVsbC1yaWdodCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5yZW1vdmVDbGFzcygncHVsbC1yaWdodCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGZpbmQgdGhlIGZpcnN0IHBhcmVudCBlbGVtZW50IHRoYXQgaGFzIGEgcmVsYXRpdmUgY3NzIHBvc2l0aW9uaW5nXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5jc3MoJ3Bvc2l0aW9uJykgIT09ICdyZWxhdGl2ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQodGhpcykuY3NzKCdwb3NpdGlvbicpID09PSAncmVsYXRpdmUnO1xuICAgICAgICAgICAgICAgICAgICB9KS5maXJzdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZGF0ZXRpbWVwaWNrZXIgY29tcG9uZW50IHNob3VsZCBiZSBwbGFjZWQgd2l0aGluIGEgcmVsYXRpdmUgcG9zaXRpb25lZCBjb250YWluZXInKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aWRnZXQuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB2ZXJ0aWNhbCA9PT0gJ3RvcCcgPyAnYXV0bycgOiBwb3NpdGlvbi50b3AgKyBlbGVtZW50Lm91dGVySGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogdmVydGljYWwgPT09ICd0b3AnID8gcG9zaXRpb24udG9wICsgZWxlbWVudC5vdXRlckhlaWdodCgpIDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBob3Jpem9udGFsID09PSAnbGVmdCcgPyAocGFyZW50ID09PSBlbGVtZW50ID8gMCA6IHBvc2l0aW9uLmxlZnQpIDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogaG9yaXpvbnRhbCA9PT0gJ2xlZnQnID8gJ2F1dG8nIDogcGFyZW50Lm91dGVyV2lkdGgoKSAtIGVsZW1lbnQub3V0ZXJXaWR0aCgpIC0gKHBhcmVudCA9PT0gZWxlbWVudCA/IDAgOiBwb3NpdGlvbi5sZWZ0KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbm90aWZ5RXZlbnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09ICdkcC5jaGFuZ2UnICYmICgoZS5kYXRlICYmIGUuZGF0ZS5pc1NhbWUoZS5vbGREYXRlKSkgfHwgKCFlLmRhdGUgJiYgIWUub2xkRGF0ZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxlbWVudC50cmlnZ2VyKGUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdmlld1VwZGF0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgICBlID0gJ1lZWVknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub3RpZnlFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkcC51cGRhdGUnLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IGUsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdEYXRlOiB2aWV3RGF0ZS5jbG9uZSgpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzaG93TW9kZSA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZpZXdNb2RlID0gTWF0aC5tYXgobWluVmlld01vZGVOdW1iZXIsIE1hdGgubWluKDMsIGN1cnJlbnRWaWV3TW9kZSArIGRpcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aWRnZXQuZmluZCgnLmRhdGVwaWNrZXIgPiBkaXYnKS5oaWRlKCkuZmlsdGVyKCcuZGF0ZXBpY2tlci0nICsgZGF0ZVBpY2tlck1vZGVzW2N1cnJlbnRWaWV3TW9kZV0uY2xzTmFtZSkuc2hvdygpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmlsbERvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcm93ID0gJCgnPHRyPicpLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZSA9IHZpZXdEYXRlLmNsb25lKCkuc3RhcnRPZigndycpLnN0YXJ0T2YoJ2QnKTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNhbGVuZGFyV2Vla3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZCgkKCc8dGg+JykuYWRkQ2xhc3MoJ2N3JykudGV4dCgnIycpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudERhdGUuaXNCZWZvcmUodmlld0RhdGUuY2xvbmUoKS5lbmRPZigndycpKSkge1xuICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kKCQoJzx0aD4nKS5hZGRDbGFzcygnZG93JykudGV4dChjdXJyZW50RGF0ZS5mb3JtYXQoJ2RkJykpKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudERhdGUuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlci1kYXlzIHRoZWFkJykuYXBwZW5kKHJvdyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0luRGlzYWJsZWREYXRlcyA9IGZ1bmN0aW9uICh0ZXN0RGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRpc2FibGVkRGF0ZXNbdGVzdERhdGUuZm9ybWF0KCdZWVlZLU1NLUREJyldID09PSB0cnVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXNJbkVuYWJsZWREYXRlcyA9IGZ1bmN0aW9uICh0ZXN0RGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmVuYWJsZWREYXRlc1t0ZXN0RGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKV0gPT09IHRydWU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0luRGlzYWJsZWRIb3VycyA9IGZ1bmN0aW9uICh0ZXN0RGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRpc2FibGVkSG91cnNbdGVzdERhdGUuZm9ybWF0KCdIJyldID09PSB0cnVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXNJbkVuYWJsZWRIb3VycyA9IGZ1bmN0aW9uICh0ZXN0RGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmVuYWJsZWRIb3Vyc1t0ZXN0RGF0ZS5mb3JtYXQoJ0gnKV0gPT09IHRydWU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc1ZhbGlkID0gZnVuY3Rpb24gKHRhcmdldE1vbWVudCwgZ3JhbnVsYXJpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldE1vbWVudC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kaXNhYmxlZERhdGVzICYmIGdyYW51bGFyaXR5ID09PSAnZCcgJiYgaXNJbkRpc2FibGVkRGF0ZXModGFyZ2V0TW9tZW50KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmVuYWJsZWREYXRlcyAmJiBncmFudWxhcml0eSA9PT0gJ2QnICYmICFpc0luRW5hYmxlZERhdGVzKHRhcmdldE1vbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5taW5EYXRlICYmIHRhcmdldE1vbWVudC5pc0JlZm9yZShvcHRpb25zLm1pbkRhdGUsIGdyYW51bGFyaXR5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1heERhdGUgJiYgdGFyZ2V0TW9tZW50LmlzQWZ0ZXIob3B0aW9ucy5tYXhEYXRlLCBncmFudWxhcml0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kYXlzT2ZXZWVrRGlzYWJsZWQgJiYgZ3JhbnVsYXJpdHkgPT09ICdkJyAmJiBvcHRpb25zLmRheXNPZldlZWtEaXNhYmxlZC5pbmRleE9mKHRhcmdldE1vbWVudC5kYXkoKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlzYWJsZWRIb3VycyAmJiAoZ3JhbnVsYXJpdHkgPT09ICdoJyB8fCBncmFudWxhcml0eSA9PT0gJ20nIHx8IGdyYW51bGFyaXR5ID09PSAncycpICYmIGlzSW5EaXNhYmxlZEhvdXJzKHRhcmdldE1vbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5lbmFibGVkSG91cnMgJiYgKGdyYW51bGFyaXR5ID09PSAnaCcgfHwgZ3JhbnVsYXJpdHkgPT09ICdtJyB8fCBncmFudWxhcml0eSA9PT0gJ3MnKSAmJiAhaXNJbkVuYWJsZWRIb3Vycyh0YXJnZXRNb21lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzICYmIChncmFudWxhcml0eSA9PT0gJ2gnIHx8IGdyYW51bGFyaXR5ID09PSAnbScgfHwgZ3JhbnVsYXJpdHkgPT09ICdzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmRpc2FibGVkVGltZUludGVydmFscywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldE1vbWVudC5pc0JldHdlZW4odGhpc1swXSwgdGhpc1sxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWxsTW9udGhzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzcGFucyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBtb250aHNTaG9ydCA9IHZpZXdEYXRlLmNsb25lKCkuc3RhcnRPZigneScpLnN0YXJ0T2YoJ2QnKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobW9udGhzU2hvcnQuaXNTYW1lKHZpZXdEYXRlLCAneScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW5zLnB1c2goJCgnPHNwYW4+JykuYXR0cignZGF0YS1hY3Rpb24nLCAnc2VsZWN0TW9udGgnKS5hZGRDbGFzcygnbW9udGgnKS50ZXh0KG1vbnRoc1Nob3J0LmZvcm1hdCgnTU1NJykpKTtcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzU2hvcnQuYWRkKDEsICdNJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlci1tb250aHMgdGQnKS5lbXB0eSgpLmFwcGVuZChzcGFucyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGVNb250aHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoc1ZpZXcgPSB3aWRnZXQuZmluZCgnLmRhdGVwaWNrZXItbW9udGhzJyksXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoc1ZpZXdIZWFkZXIgPSBtb250aHNWaWV3LmZpbmQoJ3RoJyksXG4gICAgICAgICAgICAgICAgICAgIG1vbnRocyA9IG1vbnRoc1ZpZXcuZmluZCgndGJvZHknKS5maW5kKCdzcGFuJyk7XG5cbiAgICAgICAgICAgICAgICBtb250aHNWaWV3SGVhZGVyLmVxKDApLmZpbmQoJ3NwYW4nKS5hdHRyKCd0aXRsZScsIG9wdGlvbnMudG9vbHRpcHMucHJldlllYXIpO1xuICAgICAgICAgICAgICAgIG1vbnRoc1ZpZXdIZWFkZXIuZXEoMSkuYXR0cigndGl0bGUnLCBvcHRpb25zLnRvb2x0aXBzLnNlbGVjdFllYXIpO1xuICAgICAgICAgICAgICAgIG1vbnRoc1ZpZXdIZWFkZXIuZXEoMikuZmluZCgnc3BhbicpLmF0dHIoJ3RpdGxlJywgb3B0aW9ucy50b29sdGlwcy5uZXh0WWVhcik7XG5cbiAgICAgICAgICAgICAgICBtb250aHNWaWV3LmZpbmQoJy5kaXNhYmxlZCcpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKHZpZXdEYXRlLmNsb25lKCkuc3VidHJhY3QoMSwgJ3knKSwgJ3knKSkge1xuICAgICAgICAgICAgICAgICAgICBtb250aHNWaWV3SGVhZGVyLmVxKDApLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1vbnRoc1ZpZXdIZWFkZXIuZXEoMSkudGV4dCh2aWV3RGF0ZS55ZWFyKCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKHZpZXdEYXRlLmNsb25lKCkuYWRkKDEsICd5JyksICd5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzVmlld0hlYWRlci5lcSgyKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtb250aHMucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRlLmlzU2FtZSh2aWV3RGF0ZSwgJ3knKSAmJiAhdW5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzLmVxKGRhdGUubW9udGgoKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1vbnRocy5lYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQodmlld0RhdGUuY2xvbmUoKS5tb250aChpbmRleCksICdNJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHVwZGF0ZVllYXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB5ZWFyc1ZpZXcgPSB3aWRnZXQuZmluZCgnLmRhdGVwaWNrZXIteWVhcnMnKSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcnNWaWV3SGVhZGVyID0geWVhcnNWaWV3LmZpbmQoJ3RoJyksXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0WWVhciA9IHZpZXdEYXRlLmNsb25lKCkuc3VidHJhY3QoNSwgJ3knKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kWWVhciA9IHZpZXdEYXRlLmNsb25lKCkuYWRkKDYsICd5JyksXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcblxuICAgICAgICAgICAgICAgIHllYXJzVmlld0hlYWRlci5lcSgwKS5maW5kKCdzcGFuJykuYXR0cigndGl0bGUnLCBvcHRpb25zLnRvb2x0aXBzLnByZXZEZWNhZGUpO1xuICAgICAgICAgICAgICAgIHllYXJzVmlld0hlYWRlci5lcSgxKS5hdHRyKCd0aXRsZScsIG9wdGlvbnMudG9vbHRpcHMuc2VsZWN0RGVjYWRlKTtcbiAgICAgICAgICAgICAgICB5ZWFyc1ZpZXdIZWFkZXIuZXEoMikuZmluZCgnc3BhbicpLmF0dHIoJ3RpdGxlJywgb3B0aW9ucy50b29sdGlwcy5uZXh0RGVjYWRlKTtcblxuICAgICAgICAgICAgICAgIHllYXJzVmlldy5maW5kKCcuZGlzYWJsZWQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1pbkRhdGUgJiYgb3B0aW9ucy5taW5EYXRlLmlzQWZ0ZXIoc3RhcnRZZWFyLCAneScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHllYXJzVmlld0hlYWRlci5lcSgwKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB5ZWFyc1ZpZXdIZWFkZXIuZXEoMSkudGV4dChzdGFydFllYXIueWVhcigpICsgJy0nICsgZW5kWWVhci55ZWFyKCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubWF4RGF0ZSAmJiBvcHRpb25zLm1heERhdGUuaXNCZWZvcmUoZW5kWWVhciwgJ3knKSkge1xuICAgICAgICAgICAgICAgICAgICB5ZWFyc1ZpZXdIZWFkZXIuZXEoMikuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2hpbGUgKCFzdGFydFllYXIuaXNBZnRlcihlbmRZZWFyLCAneScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxzcGFuIGRhdGEtYWN0aW9uPVwic2VsZWN0WWVhclwiIGNsYXNzPVwieWVhcicgKyAoc3RhcnRZZWFyLmlzU2FtZShkYXRlLCAneScpICYmICF1bnNldCA/ICcgYWN0aXZlJyA6ICcnKSArICghaXNWYWxpZChzdGFydFllYXIsICd5JykgPyAnIGRpc2FibGVkJyA6ICcnKSArICdcIj4nICsgc3RhcnRZZWFyLnllYXIoKSArICc8L3NwYW4+JztcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRZZWFyLmFkZCgxLCAneScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHllYXJzVmlldy5maW5kKCd0ZCcpLmh0bWwoaHRtbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGVEZWNhZGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBkZWNhZGVzVmlldyA9IHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlci1kZWNhZGVzJyksXG4gICAgICAgICAgICAgICAgICAgIGRlY2FkZXNWaWV3SGVhZGVyID0gZGVjYWRlc1ZpZXcuZmluZCgndGgnKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREZWNhZGUgPSBtb21lbnQoe3k6IHZpZXdEYXRlLnllYXIoKSAtICh2aWV3RGF0ZS55ZWFyKCkgJSAxMDApIC0gMX0pLFxuICAgICAgICAgICAgICAgICAgICBlbmREZWNhZGUgPSBzdGFydERlY2FkZS5jbG9uZSgpLmFkZCgxMDAsICd5JyksXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWRBdCA9IHN0YXJ0RGVjYWRlLmNsb25lKCksXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcblxuICAgICAgICAgICAgICAgIGRlY2FkZXNWaWV3SGVhZGVyLmVxKDApLmZpbmQoJ3NwYW4nKS5hdHRyKCd0aXRsZScsIG9wdGlvbnMudG9vbHRpcHMucHJldkNlbnR1cnkpO1xuICAgICAgICAgICAgICAgIGRlY2FkZXNWaWV3SGVhZGVyLmVxKDIpLmZpbmQoJ3NwYW4nKS5hdHRyKCd0aXRsZScsIG9wdGlvbnMudG9vbHRpcHMubmV4dENlbnR1cnkpO1xuXG4gICAgICAgICAgICAgICAgZGVjYWRlc1ZpZXcuZmluZCgnLmRpc2FibGVkJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhcnREZWNhZGUuaXNTYW1lKG1vbWVudCh7eTogMTkwMH0pKSB8fCAob3B0aW9ucy5taW5EYXRlICYmIG9wdGlvbnMubWluRGF0ZS5pc0FmdGVyKHN0YXJ0RGVjYWRlLCAneScpKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWNhZGVzVmlld0hlYWRlci5lcSgwKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWNhZGVzVmlld0hlYWRlci5lcSgxKS50ZXh0KHN0YXJ0RGVjYWRlLnllYXIoKSArICctJyArIGVuZERlY2FkZS55ZWFyKCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0RGVjYWRlLmlzU2FtZShtb21lbnQoe3k6IDIwMDB9KSkgfHwgKG9wdGlvbnMubWF4RGF0ZSAmJiBvcHRpb25zLm1heERhdGUuaXNCZWZvcmUoZW5kRGVjYWRlLCAneScpKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWNhZGVzVmlld0hlYWRlci5lcSgyKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoIXN0YXJ0RGVjYWRlLmlzQWZ0ZXIoZW5kRGVjYWRlLCAneScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxzcGFuIGRhdGEtYWN0aW9uPVwic2VsZWN0RGVjYWRlXCIgY2xhc3M9XCJkZWNhZGUnICsgKHN0YXJ0RGVjYWRlLmlzU2FtZShkYXRlLCAneScpID8gJyBhY3RpdmUnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICghaXNWYWxpZChzdGFydERlY2FkZSwgJ3knKSA/ICcgZGlzYWJsZWQnIDogJycpICsgJ1wiIGRhdGEtc2VsZWN0aW9uPVwiJyArIChzdGFydERlY2FkZS55ZWFyKCkgKyA2KSArICdcIj4nICsgKHN0YXJ0RGVjYWRlLnllYXIoKSArIDEpICsgJyAtICcgKyAoc3RhcnREZWNhZGUueWVhcigpICsgMTIpICsgJzwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgICAgICBzdGFydERlY2FkZS5hZGQoMTIsICd5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+PHNwYW4+PC9zcGFuPic7IC8vcHVzaCB0aGUgZGFuZ2xpbmcgYmxvY2sgb3ZlciwgYXQgbGVhc3QgdGhpcyB3YXkgaXQncyBldmVuXG5cbiAgICAgICAgICAgICAgICBkZWNhZGVzVmlldy5maW5kKCd0ZCcpLmh0bWwoaHRtbCk7XG4gICAgICAgICAgICAgICAgZGVjYWRlc1ZpZXdIZWFkZXIuZXEoMSkudGV4dCgoc3RhcnRlZEF0LnllYXIoKSArIDEpICsgJy0nICsgKHN0YXJ0RGVjYWRlLnllYXIoKSkpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmlsbERhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRheXNWaWV3ID0gd2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLWRheXMnKSxcbiAgICAgICAgICAgICAgICAgICAgZGF5c1ZpZXdIZWFkZXIgPSBkYXlzVmlldy5maW5kKCd0aCcpLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IFtdLFxuICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgIGNsc05hbWUsXG4gICAgICAgICAgICAgICAgICAgIGk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWhhc0RhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGF5c1ZpZXdIZWFkZXIuZXEoMCkuZmluZCgnc3BhbicpLmF0dHIoJ3RpdGxlJywgb3B0aW9ucy50b29sdGlwcy5wcmV2TW9udGgpO1xuICAgICAgICAgICAgICAgIGRheXNWaWV3SGVhZGVyLmVxKDEpLmF0dHIoJ3RpdGxlJywgb3B0aW9ucy50b29sdGlwcy5zZWxlY3RNb250aCk7XG4gICAgICAgICAgICAgICAgZGF5c1ZpZXdIZWFkZXIuZXEoMikuZmluZCgnc3BhbicpLmF0dHIoJ3RpdGxlJywgb3B0aW9ucy50b29sdGlwcy5uZXh0TW9udGgpO1xuXG4gICAgICAgICAgICAgICAgZGF5c1ZpZXcuZmluZCgnLmRpc2FibGVkJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgZGF5c1ZpZXdIZWFkZXIuZXEoMSkudGV4dCh2aWV3RGF0ZS5mb3JtYXQob3B0aW9ucy5kYXlWaWV3SGVhZGVyRm9ybWF0KSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQodmlld0RhdGUuY2xvbmUoKS5zdWJ0cmFjdCgxLCAnTScpLCAnTScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRheXNWaWV3SGVhZGVyLmVxKDApLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQodmlld0RhdGUuY2xvbmUoKS5hZGQoMSwgJ00nKSwgJ00nKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXlzVmlld0hlYWRlci5lcSgyKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZSA9IHZpZXdEYXRlLmNsb25lKCkuc3RhcnRPZignTScpLnN0YXJ0T2YoJ3cnKS5zdGFydE9mKCdkJyk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNDI7IGkrKykgeyAvL2Fsd2F5cyBkaXNwbGF5IDQyIGRheXMgKHNob3VsZCBzaG93IDYgd2Vla3MpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RGF0ZS53ZWVrZGF5KCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9ICQoJzx0cj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNhbGVuZGFyV2Vla3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kKCc8dGQgY2xhc3M9XCJjd1wiPicgKyBjdXJyZW50RGF0ZS53ZWVrKCkgKyAnPC90ZD4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaChyb3cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNsc05hbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnREYXRlLmlzQmVmb3JlKHZpZXdEYXRlLCAnTScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbHNOYW1lICs9ICcgb2xkJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudERhdGUuaXNBZnRlcih2aWV3RGF0ZSwgJ00nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSArPSAnIG5ldyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnREYXRlLmlzU2FtZShkYXRlLCAnZCcpICYmICF1bnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSArPSAnIGFjdGl2ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKGN1cnJlbnREYXRlLCAnZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbHNOYW1lICs9ICcgZGlzYWJsZWQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RGF0ZS5pc1NhbWUoZ2V0TW9tZW50KCksICdkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsc05hbWUgKz0gJyB0b2RheSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnREYXRlLmRheSgpID09PSAwIHx8IGN1cnJlbnREYXRlLmRheSgpID09PSA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbHNOYW1lICs9ICcgd2Vla2VuZCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZCgnPHRkIGRhdGEtYWN0aW9uPVwic2VsZWN0RGF5XCIgZGF0YS1kYXk9XCInICsgY3VycmVudERhdGUuZm9ybWF0KCdMJykgKyAnXCIgY2xhc3M9XCJkYXknICsgY2xzTmFtZSArICdcIj4nICsgY3VycmVudERhdGUuZGF0ZSgpICsgJzwvdGQ+Jyk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRheXNWaWV3LmZpbmQoJ3Rib2R5JykuZW1wdHkoKS5hcHBlbmQoaHRtbCk7XG5cbiAgICAgICAgICAgICAgICB1cGRhdGVNb250aHMoKTtcblxuICAgICAgICAgICAgICAgIHVwZGF0ZVllYXJzKCk7XG5cbiAgICAgICAgICAgICAgICB1cGRhdGVEZWNhZGVzKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWxsSG91cnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gd2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyLWhvdXJzIHRhYmxlJyksXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIb3VyID0gdmlld0RhdGUuY2xvbmUoKS5zdGFydE9mKCdkJyksXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gJCgnPHRyPicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZpZXdEYXRlLmhvdXIoKSA+IDExICYmICF1c2UyNEhvdXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIb3VyLmhvdXIoMTIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudEhvdXIuaXNTYW1lKHZpZXdEYXRlLCAnZCcpICYmICh1c2UyNEhvdXJzIHx8ICh2aWV3RGF0ZS5ob3VyKCkgPCAxMiAmJiBjdXJyZW50SG91ci5ob3VyKCkgPCAxMikgfHwgdmlld0RhdGUuaG91cigpID4gMTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SG91ci5ob3VyKCkgJSA0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3cgPSAkKCc8dHI+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2gocm93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kKCc8dGQgZGF0YS1hY3Rpb249XCJzZWxlY3RIb3VyXCIgY2xhc3M9XCJob3VyJyArICghaXNWYWxpZChjdXJyZW50SG91ciwgJ2gnKSA/ICcgZGlzYWJsZWQnIDogJycpICsgJ1wiPicgKyBjdXJyZW50SG91ci5mb3JtYXQodXNlMjRIb3VycyA/ICdISCcgOiAnaGgnKSArICc8L3RkPicpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50SG91ci5hZGQoMSwgJ2gnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFibGUuZW1wdHkoKS5hcHBlbmQoaHRtbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWxsTWludXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXItbWludXRlcyB0YWJsZScpLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWludXRlID0gdmlld0RhdGUuY2xvbmUoKS5zdGFydE9mKCdoJyksXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gJCgnPHRyPicpLFxuICAgICAgICAgICAgICAgICAgICBzdGVwID0gb3B0aW9ucy5zdGVwcGluZyA9PT0gMSA/IDUgOiBvcHRpb25zLnN0ZXBwaW5nO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKHZpZXdEYXRlLmlzU2FtZShjdXJyZW50TWludXRlLCAnaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWludXRlLm1pbnV0ZSgpICUgKHN0ZXAgKiA0KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gJCgnPHRyPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZCgnPHRkIGRhdGEtYWN0aW9uPVwic2VsZWN0TWludXRlXCIgY2xhc3M9XCJtaW51dGUnICsgKCFpc1ZhbGlkKGN1cnJlbnRNaW51dGUsICdtJykgPyAnIGRpc2FibGVkJyA6ICcnKSArICdcIj4nICsgY3VycmVudE1pbnV0ZS5mb3JtYXQoJ21tJykgKyAnPC90ZD4nKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1pbnV0ZS5hZGQoc3RlcCwgJ20nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFibGUuZW1wdHkoKS5hcHBlbmQoaHRtbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWxsU2Vjb25kcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXItc2Vjb25kcyB0YWJsZScpLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2Vjb25kID0gdmlld0RhdGUuY2xvbmUoKS5zdGFydE9mKCdtJyksXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gJCgnPHRyPicpO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKHZpZXdEYXRlLmlzU2FtZShjdXJyZW50U2Vjb25kLCAnbScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2Vjb25kLnNlY29uZCgpICUgMjAgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9ICQoJzx0cj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaChyb3cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmQoJzx0ZCBkYXRhLWFjdGlvbj1cInNlbGVjdFNlY29uZFwiIGNsYXNzPVwic2Vjb25kJyArICghaXNWYWxpZChjdXJyZW50U2Vjb25kLCAncycpID8gJyBkaXNhYmxlZCcgOiAnJykgKyAnXCI+JyArIGN1cnJlbnRTZWNvbmQuZm9ybWF0KCdzcycpICsgJzwvdGQ+Jyk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZWNvbmQuYWRkKDUsICdzJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFibGUuZW1wdHkoKS5hcHBlbmQoaHRtbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWxsVGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlLCBuZXdEYXRlLCB0aW1lQ29tcG9uZW50cyA9IHdpZGdldC5maW5kKCcudGltZXBpY2tlciBzcGFuW2RhdGEtdGltZS1jb21wb25lbnRdJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXVzZTI0SG91cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlID0gd2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyIFtkYXRhLWFjdGlvbj10b2dnbGVQZXJpb2RdJyk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0RhdGUgPSBkYXRlLmNsb25lKCkuYWRkKChkYXRlLmhvdXJzKCkgPj0gMTIpID8gLTEyIDogMTIsICdoJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlLnRleHQoZGF0ZS5mb3JtYXQoJ0EnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQobmV3RGF0ZSwgJ2gnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRpbWVDb21wb25lbnRzLmZpbHRlcignW2RhdGEtdGltZS1jb21wb25lbnQ9aG91cnNdJykudGV4dChkYXRlLmZvcm1hdCh1c2UyNEhvdXJzID8gJ0hIJyA6ICdoaCcpKTtcbiAgICAgICAgICAgICAgICB0aW1lQ29tcG9uZW50cy5maWx0ZXIoJ1tkYXRhLXRpbWUtY29tcG9uZW50PW1pbnV0ZXNdJykudGV4dChkYXRlLmZvcm1hdCgnbW0nKSk7XG4gICAgICAgICAgICAgICAgdGltZUNvbXBvbmVudHMuZmlsdGVyKCdbZGF0YS10aW1lLWNvbXBvbmVudD1zZWNvbmRzXScpLnRleHQoZGF0ZS5mb3JtYXQoJ3NzJykpO1xuXG4gICAgICAgICAgICAgICAgZmlsbEhvdXJzKCk7XG4gICAgICAgICAgICAgICAgZmlsbE1pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgICBmaWxsU2Vjb25kcygpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmlsbERhdGUoKTtcbiAgICAgICAgICAgICAgICBmaWxsVGltZSgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0VmFsdWUgPSBmdW5jdGlvbiAodGFyZ2V0TW9tZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZERhdGUgPSB1bnNldCA/IG51bGwgOiBkYXRlO1xuXG4gICAgICAgICAgICAgICAgLy8gY2FzZSBvZiBjYWxsaW5nIHNldFZhbHVlKG51bGwgb3IgZmFsc2UpXG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRNb21lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWwoJycpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRhdGEoJ2RhdGUnLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkcC5jaGFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGREYXRlOiBvbGREYXRlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldE1vbWVudCA9IHRhcmdldE1vbWVudC5jbG9uZSgpLmxvY2FsZShvcHRpb25zLmxvY2FsZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zdGVwcGluZyAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRNb21lbnQubWludXRlcygoTWF0aC5yb3VuZCh0YXJnZXRNb21lbnQubWludXRlcygpIC8gb3B0aW9ucy5zdGVwcGluZykgKiBvcHRpb25zLnN0ZXBwaW5nKSAlIDYwKS5zZWNvbmRzKDApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKHRhcmdldE1vbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IHRhcmdldE1vbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdmlld0RhdGUgPSBkYXRlLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbChkYXRlLmZvcm1hdChhY3R1YWxGb3JtYXQpKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5kYXRhKCdkYXRlJywgZGF0ZS5mb3JtYXQoYWN0dWFsRm9ybWF0KSk7XG4gICAgICAgICAgICAgICAgICAgIHVuc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBub3RpZnlFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZHAuY2hhbmdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGUuY2xvbmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZERhdGU6IG9sZERhdGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBJbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWwodW5zZXQgPyAnJyA6IGRhdGUuZm9ybWF0KGFjdHVhbEZvcm1hdCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkcC5lcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiB0YXJnZXRNb21lbnRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLy88c3VtbWFyeT5IaWRlcyB0aGUgd2lkZ2V0LiBQb3NzaWJseSB3aWxsIGVtaXQgZHAuaGlkZTwvc3VtbWFyeT5cbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBldmVudCBpZiBpbiB0aGUgbWlkZGxlIG9mIGEgcGlja2VyIHRyYW5zaXRpb25cbiAgICAgICAgICAgICAgICB3aWRnZXQuZmluZCgnLmNvbGxhcHNlJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xsYXBzZURhdGEgPSAkKHRoaXMpLmRhdGEoJ2NvbGxhcHNlJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsYXBzZURhdGEgJiYgY29sbGFwc2VEYXRhLnRyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50Lmhhc0NsYXNzKCdidG4nKSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aWRnZXQuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplJywgcGxhY2UpO1xuICAgICAgICAgICAgICAgIHdpZGdldC5vZmYoJ2NsaWNrJywgJ1tkYXRhLWFjdGlvbl0nKTtcbiAgICAgICAgICAgICAgICB3aWRnZXQub2ZmKCdtb3VzZWRvd24nLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICB3aWRnZXQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgd2lkZ2V0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBub3RpZnlFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkcC5oaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF0ZS5jbG9uZSgpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpbnB1dC5ibHVyKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUobnVsbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBXaWRnZXQgVUkgaW50ZXJhY3Rpb24gZnVuY3Rpb25zXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICAgICAgYWN0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYXZGbmMgPSBkYXRlUGlja2VyTW9kZXNbY3VycmVudFZpZXdNb2RlXS5uYXZGbmM7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdEYXRlLmFkZChkYXRlUGlja2VyTW9kZXNbY3VycmVudFZpZXdNb2RlXS5uYXZTdGVwLCBuYXZGbmMpO1xuICAgICAgICAgICAgICAgICAgICBmaWxsRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB2aWV3VXBkYXRlKG5hdkZuYyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYXZGbmMgPSBkYXRlUGlja2VyTW9kZXNbY3VycmVudFZpZXdNb2RlXS5uYXZGbmM7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdEYXRlLnN1YnRyYWN0KGRhdGVQaWNrZXJNb2Rlc1tjdXJyZW50Vmlld01vZGVdLm5hdlN0ZXAsIG5hdkZuYyk7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdVcGRhdGUobmF2Rm5jKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgcGlja2VyU3dpdGNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dNb2RlKDEpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZWxlY3RNb250aDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gJChlLnRhcmdldCkuY2xvc2VzdCgndGJvZHknKS5maW5kKCdzcGFuJykuaW5kZXgoJChlLnRhcmdldCkpO1xuICAgICAgICAgICAgICAgICAgICB2aWV3RGF0ZS5tb250aChtb250aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Vmlld01vZGUgPT09IG1pblZpZXdNb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlLmNsb25lKCkueWVhcih2aWV3RGF0ZS55ZWFyKCkpLm1vbnRoKHZpZXdEYXRlLm1vbnRoKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TW9kZSgtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZpZXdVcGRhdGUoJ00nKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2VsZWN0WWVhcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCgkKGUudGFyZ2V0KS50ZXh0KCksIDEwKSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICB2aWV3RGF0ZS55ZWFyKHllYXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZpZXdNb2RlID09PSBtaW5WaWV3TW9kZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZS5jbG9uZSgpLnllYXIodmlld0RhdGUueWVhcigpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd01vZGUoLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2aWV3VXBkYXRlKCdZWVlZJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNlbGVjdERlY2FkZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCgkKGUudGFyZ2V0KS5kYXRhKCdzZWxlY3Rpb24nKSwgMTApIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdEYXRlLnllYXIoeWVhcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Vmlld01vZGUgPT09IG1pblZpZXdNb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlLmNsb25lKCkueWVhcih2aWV3RGF0ZS55ZWFyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TW9kZSgtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZpZXdVcGRhdGUoJ1lZWVknKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2VsZWN0RGF5OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF5ID0gdmlld0RhdGUuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKCcub2xkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheS5zdWJ0cmFjdCgxLCAnTScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcygnLm5ldycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXkuYWRkKDEsICdNJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF5LmRhdGUocGFyc2VJbnQoJChlLnRhcmdldCkudGV4dCgpLCAxMCkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNUaW1lKCkgJiYgIW9wdGlvbnMua2VlcE9wZW4gJiYgIW9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50SG91cnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RhdGUgPSBkYXRlLmNsb25lKCkuYWRkKDEsICdoJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKG5ld0RhdGUsICdoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKG5ld0RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGluY3JlbWVudE1pbnV0ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RhdGUgPSBkYXRlLmNsb25lKCkuYWRkKG9wdGlvbnMuc3RlcHBpbmcsICdtJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKG5ld0RhdGUsICdtJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKG5ld0RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGluY3JlbWVudFNlY29uZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RhdGUgPSBkYXRlLmNsb25lKCkuYWRkKDEsICdzJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKG5ld0RhdGUsICdzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKG5ld0RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGRlY3JlbWVudEhvdXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdEYXRlID0gZGF0ZS5jbG9uZSgpLnN1YnRyYWN0KDEsICdoJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKG5ld0RhdGUsICdoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKG5ld0RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGRlY3JlbWVudE1pbnV0ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RhdGUgPSBkYXRlLmNsb25lKCkuc3VidHJhY3Qob3B0aW9ucy5zdGVwcGluZywgJ20nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQobmV3RGF0ZSwgJ20nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUobmV3RGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZGVjcmVtZW50U2Vjb25kczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGF0ZSA9IGRhdGUuY2xvbmUoKS5zdWJ0cmFjdCgxLCAncycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZChuZXdEYXRlLCAncycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShuZXdEYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB0b2dnbGVQZXJpb2Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZS5jbG9uZSgpLmFkZCgoZGF0ZS5ob3VycygpID49IDEyKSA/IC0xMiA6IDEyLCAnaCcpKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgdG9nZ2xlUGlja2VyOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKGUudGFyZ2V0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCd1bCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQgPSAkcGFyZW50LmZpbmQoJy5pbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VkID0gJHBhcmVudC5maW5kKCcuY29sbGFwc2U6bm90KC5pbiknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlRGF0YTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwYW5kZWQgJiYgZXhwYW5kZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZURhdGEgPSBleHBhbmRlZC5kYXRhKCdjb2xsYXBzZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxhcHNlRGF0YSAmJiBjb2xsYXBzZURhdGEudHJhbnNpdGlvbmluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHBhbmRlZC5jb2xsYXBzZSkgeyAvLyBpZiBjb2xsYXBzZSBwbHVnaW4gaXMgYXZhaWxhYmxlIHRocm91Z2ggYm9vdHN0cmFwLmpzIHRoZW4gdXNlIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQuY29sbGFwc2UoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZWQuY29sbGFwc2UoJ3Nob3cnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIG90aGVyd2lzZSBqdXN0IHRvZ2dsZSBpbiBjbGFzcyBvbiB0aGUgdHdvIHZpZXdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQucmVtb3ZlQ2xhc3MoJ2luJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VkLmFkZENsYXNzKCdpbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLmlzKCdzcGFuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy50b2dnbGVDbGFzcyhvcHRpb25zLmljb25zLnRpbWUgKyAnICcgKyBvcHRpb25zLmljb25zLmRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5maW5kKCdzcGFuJykudG9nZ2xlQ2xhc3Mob3B0aW9ucy5pY29ucy50aW1lICsgJyAnICsgb3B0aW9ucy5pY29ucy5kYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogdW5jb21tZW50IGlmIHRvZ2dsZWQgc3RhdGUgd2lsbCBiZSByZXN0b3JlZCBpbiBzaG93KClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgY29tcG9uZW50LmZpbmQoJ3NwYW4nKS50b2dnbGVDbGFzcyhvcHRpb25zLmljb25zLnRpbWUgKyAnICcgKyBvcHRpb25zLmljb25zLmRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2hvd1BpY2tlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXIgPiBkaXY6bm90KC50aW1lcGlja2VyLXBpY2tlciknKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1waWNrZXInKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNob3dIb3VyczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXIgLnRpbWVwaWNrZXItcGlja2VyJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXIgLnRpbWVwaWNrZXItaG91cnMnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNob3dNaW51dGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1waWNrZXInKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1taW51dGVzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzaG93U2Vjb25kczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXIgLnRpbWVwaWNrZXItcGlja2VyJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXIgLnRpbWVwaWNrZXItc2Vjb25kcycpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2VsZWN0SG91cjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhvdXIgPSBwYXJzZUludCgkKGUudGFyZ2V0KS50ZXh0KCksIDEwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXVzZTI0SG91cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRlLmhvdXJzKCkgPj0gMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG91ciAhPT0gMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZS5jbG9uZSgpLmhvdXJzKGhvdXIpKTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucy5zaG93UGlja2VyLmNhbGwocGlja2VyKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2VsZWN0TWludXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlLmNsb25lKCkubWludXRlcyhwYXJzZUludCgkKGUudGFyZ2V0KS50ZXh0KCksIDEwKSkpO1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zLnNob3dQaWNrZXIuY2FsbChwaWNrZXIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZWxlY3RTZWNvbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKGRhdGUuY2xvbmUoKS5zZWNvbmRzKHBhcnNlSW50KCQoZS50YXJnZXQpLnRleHQoKSwgMTApKSk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnMuc2hvd1BpY2tlci5jYWxsKHBpY2tlcik7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGNsZWFyOiBjbGVhcixcblxuICAgICAgICAgICAgICAgIHRvZGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2RheXNEYXRlID0gZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKHRvZGF5c0RhdGUsICdkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKHRvZGF5c0RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGNsb3NlOiBoaWRlXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkb0FjdGlvbiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQoZS5jdXJyZW50VGFyZ2V0KS5pcygnLmRpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY3Rpb25zWyQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdhY3Rpb24nKV0uYXBwbHkocGlja2VyLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8vPHN1bW1hcnk+U2hvd3MgdGhlIHdpZGdldC4gUG9zc2libHkgd2lsbCBlbWl0IGRwLnNob3cgYW5kIGRwLmNoYW5nZTwvc3VtbWFyeT5cbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE1vbWVudCxcbiAgICAgICAgICAgICAgICAgICAgdXNlQ3VycmVudEdyYW51bGFyaXR5ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3llYXInOiBmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLm1vbnRoKDApLmRhdGUoMSkuaG91cnMoMCkuc2Vjb25kcygwKS5taW51dGVzKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdtb250aCc6IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uZGF0ZSgxKS5ob3VycygwKS5zZWNvbmRzKDApLm1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RheSc6IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uaG91cnMoMCkuc2Vjb25kcygwKS5taW51dGVzKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdob3VyJzogZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5zZWNvbmRzKDApLm1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21pbnV0ZSc6IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uc2Vjb25kcygwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5wcm9wKCdkaXNhYmxlZCcpIHx8ICghb3B0aW9ucy5pZ25vcmVSZWFkb25seSAmJiBpbnB1dC5wcm9wKCdyZWFkb25seScpKSB8fCB3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnZhbCgpICE9PSB1bmRlZmluZWQgJiYgaW5wdXQudmFsKCkudHJpbSgpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShwYXJzZUlucHV0RGF0ZShpbnB1dC52YWwoKS50cmltKCkpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMudXNlQ3VycmVudCAmJiB1bnNldCAmJiAoKGlucHV0LmlzKCdpbnB1dCcpICYmIGlucHV0LnZhbCgpLnRyaW0oKS5sZW5ndGggPT09IDApIHx8IG9wdGlvbnMuaW5saW5lKSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9tZW50ID0gZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy51c2VDdXJyZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vbWVudCA9IHVzZUN1cnJlbnRHcmFudWxhcml0eVtvcHRpb25zLnVzZUN1cnJlbnRdKGN1cnJlbnRNb21lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKGN1cnJlbnRNb21lbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdpZGdldCA9IGdldFRlbXBsYXRlKCk7XG5cbiAgICAgICAgICAgICAgICBmaWxsRG93KCk7XG4gICAgICAgICAgICAgICAgZmlsbE1vbnRocygpO1xuXG4gICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyLWhvdXJzJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlci1taW51dGVzJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHdpZGdldC5maW5kKCcudGltZXBpY2tlci1zZWNvbmRzJykuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgc2hvd01vZGUoKTtcblxuICAgICAgICAgICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgcGxhY2UpO1xuICAgICAgICAgICAgICAgIHdpZGdldC5vbignY2xpY2snLCAnW2RhdGEtYWN0aW9uXScsIGRvQWN0aW9uKTsgLy8gdGhpcyBoYW5kbGVzIGNsaWNrcyBvbiB0aGUgd2lkZ2V0XG4gICAgICAgICAgICAgICAgd2lkZ2V0Lm9uKCdtb3VzZWRvd24nLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5oYXNDbGFzcygnYnRuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2lkZ2V0LnNob3coKTtcbiAgICAgICAgICAgICAgICBwbGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZm9jdXNPblNob3cgJiYgIWlucHV0LmlzKCc6Zm9jdXMnKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5vdGlmeUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RwLnNob3cnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLy8gPHN1bW1hcnk+U2hvd3Mgb3IgaGlkZXMgdGhlIHdpZGdldDwvc3VtbWFyeT5cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpZGdldCA/IGhpZGUoKSA6IHNob3coKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwYXJzZUlucHV0RGF0ZSA9IGZ1bmN0aW9uIChpbnB1dERhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5wYXJzZUlucHV0RGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb21lbnQuaXNNb21lbnQoaW5wdXREYXRlKSB8fCBpbnB1dERhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dERhdGUgPSBtb21lbnQoaW5wdXREYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RGF0ZSA9IGdldE1vbWVudChpbnB1dERhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXREYXRlID0gb3B0aW9ucy5wYXJzZUlucHV0RGF0ZShpbnB1dERhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnB1dERhdGUubG9jYWxlKG9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXREYXRlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAga2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgyLFxuICAgICAgICAgICAgICAgICAgICBwcmVzc2VkS2V5cyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBwcmVzc2VkTW9kaWZpZXJzID0ge30sXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRLZXkgPSBlLndoaWNoLFxuICAgICAgICAgICAgICAgICAgICBrZXlCaW5kS2V5cyxcbiAgICAgICAgICAgICAgICAgICAgYWxsTW9kaWZpZXJzUHJlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgcHJlc3NlZCA9ICdwJztcblxuICAgICAgICAgICAgICAgIGtleVN0YXRlW2N1cnJlbnRLZXldID0gcHJlc3NlZDtcblxuICAgICAgICAgICAgICAgIGZvciAoaW5kZXggaW4ga2V5U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleVN0YXRlLmhhc093blByb3BlcnR5KGluZGV4KSAmJiBrZXlTdGF0ZVtpbmRleF0gPT09IHByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNzZWRLZXlzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGluZGV4LCAxMCkgIT09IGN1cnJlbnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzc2VkTW9kaWZpZXJzW2luZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGluZGV4IGluIG9wdGlvbnMua2V5QmluZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMua2V5QmluZHMuaGFzT3duUHJvcGVydHkoaW5kZXgpICYmIHR5cGVvZiAob3B0aW9ucy5rZXlCaW5kc1tpbmRleF0pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlCaW5kS2V5cyA9IGluZGV4LnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5QmluZEtleXMubGVuZ3RoID09PSBwcmVzc2VkS2V5cy5sZW5ndGggJiYga2V5TWFwW2N1cnJlbnRLZXldID09PSBrZXlCaW5kS2V5c1trZXlCaW5kS2V5cy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1vZGlmaWVyc1ByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXgyID0ga2V5QmluZEtleXMubGVuZ3RoIC0gMjsgaW5kZXgyID49IDA7IGluZGV4Mi0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGtleU1hcFtrZXlCaW5kS2V5c1tpbmRleDJdXSBpbiBwcmVzc2VkTW9kaWZpZXJzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTW9kaWZpZXJzUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbE1vZGlmaWVyc1ByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IG9wdGlvbnMua2V5QmluZHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGwocGlja2VyLCB3aWRnZXQpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAga2V5dXAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGtleVN0YXRlW2Uud2hpY2hdID0gJ3InO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gJChlLnRhcmdldCkudmFsKCkudHJpbSgpLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRlID0gdmFsID8gcGFyc2VJbnB1dERhdGUodmFsKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUocGFyc2VkRGF0ZSk7XG4gICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhdHRhY2hEYXRlUGlja2VyRWxlbWVudEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5vbih7XG4gICAgICAgICAgICAgICAgICAgICdjaGFuZ2UnOiBjaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICdibHVyJzogb3B0aW9ucy5kZWJ1ZyA/ICcnIDogaGlkZSxcbiAgICAgICAgICAgICAgICAgICAgJ2tleWRvd24nOiBrZXlkb3duLFxuICAgICAgICAgICAgICAgICAgICAna2V5dXAnOiBrZXl1cCxcbiAgICAgICAgICAgICAgICAgICAgJ2ZvY3VzJzogb3B0aW9ucy5hbGxvd0lucHV0VG9nZ2xlID8gc2hvdyA6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5vbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAnZm9jdXMnOiBzaG93XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5vbignY2xpY2snLCB0b2dnbGUpO1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQub24oJ21vdXNlZG93bicsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkZXRhY2hEYXRlUGlja2VyRWxlbWVudEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5vZmYoe1xuICAgICAgICAgICAgICAgICAgICAnY2hhbmdlJzogY2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAnYmx1cic6IGJsdXIsXG4gICAgICAgICAgICAgICAgICAgICdrZXlkb3duJzoga2V5ZG93bixcbiAgICAgICAgICAgICAgICAgICAgJ2tleXVwJzoga2V5dXAsXG4gICAgICAgICAgICAgICAgICAgICdmb2N1cyc6IG9wdGlvbnMuYWxsb3dJbnB1dFRvZ2dsZSA/IGhpZGUgOiAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaXMoJ2lucHV0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQub2ZmKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb2N1cyc6IHNob3dcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lm9mZignY2xpY2snLCB0b2dnbGUpO1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQub2ZmKCdtb3VzZWRvd24nLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5kZXhHaXZlbkRhdGVzID0gZnVuY3Rpb24gKGdpdmVuRGF0ZXNBcnJheSkge1xuICAgICAgICAgICAgICAgIC8vIFN0b3JlIGdpdmVuIGVuYWJsZWREYXRlcyBhbmQgZGlzYWJsZWREYXRlcyBhcyBrZXlzLlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgd2F5IHdlIGNhbiBjaGVjayB0aGVpciBleGlzdGVuY2UgaW4gTygxKSB0aW1lIGluc3RlYWQgb2YgbG9vcGluZyB0aHJvdWdoIHdob2xlIGFycmF5LlxuICAgICAgICAgICAgICAgIC8vIChmb3IgZXhhbXBsZTogb3B0aW9ucy5lbmFibGVkRGF0ZXNbJzIwMTQtMDItMjcnXSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICB2YXIgZ2l2ZW5EYXRlc0luZGV4ZWQgPSB7fTtcbiAgICAgICAgICAgICAgICAkLmVhY2goZ2l2ZW5EYXRlc0FycmF5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkRGF0ZSA9IHBhcnNlSW5wdXREYXRlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZERhdGUuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnaXZlbkRhdGVzSW5kZXhlZFtkRGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChPYmplY3Qua2V5cyhnaXZlbkRhdGVzSW5kZXhlZCkubGVuZ3RoKSA/IGdpdmVuRGF0ZXNJbmRleGVkIDogZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbmRleEdpdmVuSG91cnMgPSBmdW5jdGlvbiAoZ2l2ZW5Ib3Vyc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgZ2l2ZW4gZW5hYmxlZEhvdXJzIGFuZCBkaXNhYmxlZEhvdXJzIGFzIGtleXMuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyB3YXkgd2UgY2FuIGNoZWNrIHRoZWlyIGV4aXN0ZW5jZSBpbiBPKDEpIHRpbWUgaW5zdGVhZCBvZiBsb29waW5nIHRocm91Z2ggd2hvbGUgYXJyYXkuXG4gICAgICAgICAgICAgICAgLy8gKGZvciBleGFtcGxlOiBvcHRpb25zLmVuYWJsZWRIb3Vyc1snMjAxNC0wMi0yNyddID09PSB0cnVlKVxuICAgICAgICAgICAgICAgIHZhciBnaXZlbkhvdXJzSW5kZXhlZCA9IHt9O1xuICAgICAgICAgICAgICAgICQuZWFjaChnaXZlbkhvdXJzQXJyYXksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW5Ib3Vyc0luZGV4ZWRbdGhpc10gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiAoT2JqZWN0LmtleXMoZ2l2ZW5Ib3Vyc0luZGV4ZWQpLmxlbmd0aCkgPyBnaXZlbkhvdXJzSW5kZXhlZCA6IGZhbHNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5pdEZvcm1hdHRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0IHx8ICdMIExUJztcblxuICAgICAgICAgICAgICAgIGFjdHVhbEZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2csIGZ1bmN0aW9uIChmb3JtYXRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3aW5wdXQgPSBkYXRlLmxvY2FsZURhdGEoKS5sb25nRGF0ZUZvcm1hdChmb3JtYXRJbnB1dCkgfHwgZm9ybWF0SW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdpbnB1dC5yZXBsYWNlKC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2csIGZ1bmN0aW9uIChmb3JtYXRJbnB1dDIpIHsgLy90ZW1wIGZpeCBmb3IgIzc0MFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGUubG9jYWxlRGF0YSgpLmxvbmdEYXRlRm9ybWF0KGZvcm1hdElucHV0MikgfHwgZm9ybWF0SW5wdXQyO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgcGFyc2VGb3JtYXRzID0gb3B0aW9ucy5leHRyYUZvcm1hdHMgPyBvcHRpb25zLmV4dHJhRm9ybWF0cy5zbGljZSgpIDogW107XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRm9ybWF0cy5pbmRleE9mKGZvcm1hdCkgPCAwICYmIHBhcnNlRm9ybWF0cy5pbmRleE9mKGFjdHVhbEZvcm1hdCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRm9ybWF0cy5wdXNoKGFjdHVhbEZvcm1hdCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdXNlMjRIb3VycyA9IChhY3R1YWxGb3JtYXQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdhJykgPCAxICYmIGFjdHVhbEZvcm1hdC5yZXBsYWNlKC9cXFsuKj9cXF0vZywgJycpLmluZGV4T2YoJ2gnKSA8IDEpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRW5hYmxlZCgneScpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblZpZXdNb2RlTnVtYmVyID0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzRW5hYmxlZCgnTScpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblZpZXdNb2RlTnVtYmVyID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzRW5hYmxlZCgnZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblZpZXdNb2RlTnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50Vmlld01vZGUgPSBNYXRoLm1heChtaW5WaWV3TW9kZU51bWJlciwgY3VycmVudFZpZXdNb2RlKTtcblxuICAgICAgICAgICAgICAgIGlmICghdW5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgICpcbiAgICAgICAgICogUHVibGljIEFQSSBmdW5jdGlvbnNcbiAgICAgICAgICogPT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAqXG4gICAgICAgICAqIEltcG9ydGFudDogRG8gbm90IGV4cG9zZSBkaXJlY3QgcmVmZXJlbmNlcyB0byBwcml2YXRlIG9iamVjdHMgb3IgdGhlIG9wdGlvbnNcbiAgICAgICAgICogb2JqZWN0IHRvIHRoZSBvdXRlciB3b3JsZC4gQWx3YXlzIHJldHVybiBhIGNsb25lIHdoZW4gcmV0dXJuaW5nIHZhbHVlcyBvciBtYWtlXG4gICAgICAgICAqIGEgY2xvbmUgd2hlbiBzZXR0aW5nIGEgcHJpdmF0ZSB2YXJpYWJsZS5cbiAgICAgICAgICpcbiAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICBwaWNrZXIuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PkRlc3Ryb3lzIHRoZSB3aWRnZXQgYW5kIHJlbW92ZXMgYWxsIGF0dGFjaGVkIGV2ZW50IGxpc3RlbmVyczwvc3VtbWFyeT5cbiAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgIGRldGFjaERhdGVQaWNrZXJFbGVtZW50RXZlbnRzKCk7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZURhdGEoJ0RhdGVUaW1lUGlja2VyJyk7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZURhdGEoJ2RhdGUnKTtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIudG9nZ2xlID0gdG9nZ2xlO1xuXG4gICAgICAgIHBpY2tlci5zaG93ID0gc2hvdztcblxuICAgICAgICBwaWNrZXIuaGlkZSA9IGhpZGU7XG5cbiAgICAgICAgcGlja2VyLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5EaXNhYmxlcyB0aGUgaW5wdXQgZWxlbWVudCwgdGhlIGNvbXBvbmVudCBpcyBhdHRhY2hlZCB0bywgYnkgYWRkaW5nIGEgZGlzYWJsZWQ9XCJ0cnVlXCIgYXR0cmlidXRlIHRvIGl0LlxuICAgICAgICAgICAgLy8vSWYgdGhlIHdpZGdldCB3YXMgdmlzaWJsZSBiZWZvcmUgdGhhdCBjYWxsIGl0IGlzIGhpZGRlbi4gUG9zc2libHkgZW1pdHMgZHAuaGlkZTwvc3VtbWFyeT5cbiAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50Lmhhc0NsYXNzKCdidG4nKSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlucHV0LnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5FbmFibGVzIHRoZSBpbnB1dCBlbGVtZW50LCB0aGUgY29tcG9uZW50IGlzIGF0dGFjaGVkIHRvLCBieSByZW1vdmluZyBkaXNhYmxlZCBhdHRyaWJ1dGUgZnJvbSBpdC48L3N1bW1hcnk+XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5oYXNDbGFzcygnYnRuJykpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmlnbm9yZVJlYWRvbmx5ID0gZnVuY3Rpb24gKGlnbm9yZVJlYWRvbmx5KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmlnbm9yZVJlYWRvbmx5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpZ25vcmVSZWFkb25seSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaWdub3JlUmVhZG9ubHkgKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmlnbm9yZVJlYWRvbmx5ID0gaWdub3JlUmVhZG9ubHk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5vcHRpb25zID0gZnVuY3Rpb24gKG5ld09wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEobmV3T3B0aW9ucyBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zKCkgb3B0aW9ucyBwYXJhbWV0ZXIgc2hvdWxkIGJlIGFuIG9iamVjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgb3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocGlja2VyW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBwaWNrZXJba2V5XSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBrZXkgKyAnIGlzIG5vdCByZWNvZ25pemVkIScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZGF0ZSA9IGZ1bmN0aW9uIChuZXdEYXRlKSB7XG4gICAgICAgICAgICAvLy88c2lnbmF0dXJlIGhlbHBLZXl3b3JkPVwiJC5mbi5kYXRldGltZXBpY2tlci5kYXRlXCI+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5SZXR1cm5zIHRoZSBjb21wb25lbnQncyBtb2RlbCBjdXJyZW50IGRhdGUsIGEgbW9tZW50IG9iamVjdCBvciBudWxsIGlmIG5vdCBzZXQuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHJldHVybnMgdHlwZT1cIk1vbWVudFwiPmRhdGUuY2xvbmUoKTwvcmV0dXJucz5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlNldHMgdGhlIGNvbXBvbmVudHMgbW9kZWwgY3VycmVudCBtb21lbnQgdG8gaXQuIFBhc3NpbmcgYSBudWxsIHZhbHVlIHVuc2V0cyB0aGUgY29tcG9uZW50cyBtb2RlbCBjdXJyZW50IG1vbWVudC4gUGFyc2luZyBvZiB0aGUgbmV3RGF0ZSBwYXJhbWV0ZXIgaXMgbWFkZSB1c2luZyBtb21lbnQgbGlicmFyeSB3aXRoIHRoZSBvcHRpb25zLmZvcm1hdCBhbmQgb3B0aW9ucy51c2VTdHJpY3QgY29tcG9uZW50cyBjb25maWd1cmF0aW9uLjwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLzxwYXJhbSBuYW1lPVwibmV3RGF0ZVwiIGxvY2lkPVwiJC5mbi5kYXRldGltZXBpY2tlci5kYXRlX3A6bmV3RGF0ZVwiPlRha2VzIHN0cmluZywgRGF0ZSwgbW9tZW50LCBudWxsIHBhcmFtZXRlci48L3BhcmFtPlxuICAgICAgICAgICAgLy8vPC9zaWduYXR1cmU+XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmICh1bnNldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGUuY2xvbmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5ld0RhdGUgIT09IG51bGwgJiYgdHlwZW9mIG5ld0RhdGUgIT09ICdzdHJpbmcnICYmICFtb21lbnQuaXNNb21lbnQobmV3RGF0ZSkgJiYgIShuZXdEYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRlKCkgcGFyYW1ldGVyIG11c3QgYmUgb25lIG9mIFtudWxsLCBzdHJpbmcsIG1vbWVudCBvciBEYXRlXScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRWYWx1ZShuZXdEYXRlID09PSBudWxsID8gbnVsbCA6IHBhcnNlSW5wdXREYXRlKG5ld0RhdGUpKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmZvcm1hdCA9IGZ1bmN0aW9uIChuZXdGb3JtYXQpIHtcbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PnRlc3Qgc3U8L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cGFyYW0gbmFtZT1cIm5ld0Zvcm1hdFwiPmluZm8gYWJvdXQgcGFyYTwvcGFyYW0+XG4gICAgICAgICAgICAvLy88cmV0dXJucyB0eXBlPVwic3RyaW5nfGJvb2xlYW5cIj5yZXR1cm5zIGZvbzwvcmV0dXJucz5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm9ybWF0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKHR5cGVvZiBuZXdGb3JtYXQgIT09ICdzdHJpbmcnKSAmJiAoKHR5cGVvZiBuZXdGb3JtYXQgIT09ICdib29sZWFuJykgfHwgKG5ld0Zvcm1hdCAhPT0gZmFsc2UpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Zvcm1hdCgpIGV4cGVjdHMgYSBzdGluZyBvciBib29sZWFuOmZhbHNlIHBhcmFtZXRlciAnICsgbmV3Rm9ybWF0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXQgPSBuZXdGb3JtYXQ7XG4gICAgICAgICAgICBpZiAoYWN0dWFsRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgaW5pdEZvcm1hdHRpbmcoKTsgLy8gcmVpbml0IGZvcm1hdHRpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLnRpbWVab25lID0gZnVuY3Rpb24gKG5ld1pvbmUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudGltZVpvbmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMudGltZVpvbmUgPSBuZXdab25lO1xuXG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5kYXlWaWV3SGVhZGVyRm9ybWF0ID0gZnVuY3Rpb24gKG5ld0Zvcm1hdCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kYXlWaWV3SGVhZGVyRm9ybWF0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld0Zvcm1hdCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXlWaWV3SGVhZGVyRm9ybWF0KCkgZXhwZWN0cyBhIHN0cmluZyBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5kYXlWaWV3SGVhZGVyRm9ybWF0ID0gbmV3Rm9ybWF0O1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZXh0cmFGb3JtYXRzID0gZnVuY3Rpb24gKGZvcm1hdHMpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZXh0cmFGb3JtYXRzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZm9ybWF0cyAhPT0gZmFsc2UgJiYgIShmb3JtYXRzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXh0cmFGb3JtYXRzKCkgZXhwZWN0cyBhbiBhcnJheSBvciBmYWxzZSBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5leHRyYUZvcm1hdHMgPSBmb3JtYXRzO1xuICAgICAgICAgICAgaWYgKHBhcnNlRm9ybWF0cykge1xuICAgICAgICAgICAgICAgIGluaXRGb3JtYXR0aW5nKCk7IC8vIHJlaW5pdCBmb3JtYXR0aW5nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5kaXNhYmxlZERhdGVzID0gZnVuY3Rpb24gKGRhdGVzKSB7XG4gICAgICAgICAgICAvLy88c2lnbmF0dXJlIGhlbHBLZXl3b3JkPVwiJC5mbi5kYXRldGltZXBpY2tlci5kaXNhYmxlZERhdGVzXCI+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5SZXR1cm5zIGFuIGFycmF5IHdpdGggdGhlIGN1cnJlbnRseSBzZXQgZGlzYWJsZWQgZGF0ZXMgb24gdGhlIGNvbXBvbmVudC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cmV0dXJucyB0eXBlPVwiYXJyYXlcIj5vcHRpb25zLmRpc2FibGVkRGF0ZXM8L3JldHVybnM+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmU+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5TZXR0aW5nIHRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIG9wdGlvbnMubWluRGF0ZSwgb3B0aW9ucy5tYXhEYXRlIGNvbmZpZ3VyYXRpb24uIEFsc28gY2FsbGluZyB0aGlzIGZ1bmN0aW9uIHJlbW92ZXMgdGhlIGNvbmZpZ3VyYXRpb24gb2ZcbiAgICAgICAgICAgIC8vL29wdGlvbnMuZW5hYmxlZERhdGVzIGlmIHN1Y2ggZXhpc3QuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHBhcmFtIG5hbWU9XCJkYXRlc1wiIGxvY2lkPVwiJC5mbi5kYXRldGltZXBpY2tlci5kaXNhYmxlZERhdGVzX3A6ZGF0ZXNcIj5UYWtlcyBhbiBbIHN0cmluZyBvciBEYXRlIG9yIG1vbWVudCBdIG9mIHZhbHVlcyBhbmQgYWxsb3dzIHRoZSB1c2VyIHRvIHNlbGVjdCBvbmx5IGZyb20gdGhvc2UgZGF5cy48L3BhcmFtPlxuICAgICAgICAgICAgLy8vPC9zaWduYXR1cmU+XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAob3B0aW9ucy5kaXNhYmxlZERhdGVzID8gJC5leHRlbmQoe30sIG9wdGlvbnMuZGlzYWJsZWREYXRlcykgOiBvcHRpb25zLmRpc2FibGVkRGF0ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWRhdGVzKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kaXNhYmxlZERhdGVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGRhdGVzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGlzYWJsZWREYXRlcygpIGV4cGVjdHMgYW4gYXJyYXkgcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmRpc2FibGVkRGF0ZXMgPSBpbmRleEdpdmVuRGF0ZXMoZGF0ZXMpO1xuICAgICAgICAgICAgb3B0aW9ucy5lbmFibGVkRGF0ZXMgPSBmYWxzZTtcbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZW5hYmxlZERhdGVzID0gZnVuY3Rpb24gKGRhdGVzKSB7XG4gICAgICAgICAgICAvLy88c2lnbmF0dXJlIGhlbHBLZXl3b3JkPVwiJC5mbi5kYXRldGltZXBpY2tlci5lbmFibGVkRGF0ZXNcIj5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgY3VycmVudGx5IHNldCBlbmFibGVkIGRhdGVzIG9uIHRoZSBjb21wb25lbnQuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHJldHVybnMgdHlwZT1cImFycmF5XCI+b3B0aW9ucy5lbmFibGVkRGF0ZXM8L3JldHVybnM+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmU+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5TZXR0aW5nIHRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIG9wdGlvbnMubWluRGF0ZSwgb3B0aW9ucy5tYXhEYXRlIGNvbmZpZ3VyYXRpb24uIEFsc28gY2FsbGluZyB0aGlzIGZ1bmN0aW9uIHJlbW92ZXMgdGhlIGNvbmZpZ3VyYXRpb24gb2Ygb3B0aW9ucy5kaXNhYmxlZERhdGVzIGlmIHN1Y2ggZXhpc3QuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHBhcmFtIG5hbWU9XCJkYXRlc1wiIGxvY2lkPVwiJC5mbi5kYXRldGltZXBpY2tlci5lbmFibGVkRGF0ZXNfcDpkYXRlc1wiPlRha2VzIGFuIFsgc3RyaW5nIG9yIERhdGUgb3IgbW9tZW50IF0gb2YgdmFsdWVzIGFuZCBhbGxvd3MgdGhlIHVzZXIgdG8gc2VsZWN0IG9ubHkgZnJvbSB0aG9zZSBkYXlzLjwvcGFyYW0+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zLmVuYWJsZWREYXRlcyA/ICQuZXh0ZW5kKHt9LCBvcHRpb25zLmVuYWJsZWREYXRlcykgOiBvcHRpb25zLmVuYWJsZWREYXRlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmVuYWJsZWREYXRlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShkYXRlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuYWJsZWREYXRlcygpIGV4cGVjdHMgYW4gYXJyYXkgcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmVuYWJsZWREYXRlcyA9IGluZGV4R2l2ZW5EYXRlcyhkYXRlcyk7XG4gICAgICAgICAgICBvcHRpb25zLmRpc2FibGVkRGF0ZXMgPSBmYWxzZTtcbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZGF5c09mV2Vla0Rpc2FibGVkID0gZnVuY3Rpb24gKGRheXNPZldlZWtEaXNhYmxlZCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kYXlzT2ZXZWVrRGlzYWJsZWQuc3BsaWNlKDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKHR5cGVvZiBkYXlzT2ZXZWVrRGlzYWJsZWQgPT09ICdib29sZWFuJykgJiYgIWRheXNPZldlZWtEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZGF5c09mV2Vla0Rpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEoZGF5c09mV2Vla0Rpc2FibGVkIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF5c09mV2Vla0Rpc2FibGVkKCkgZXhwZWN0cyBhbiBhcnJheSBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuZGF5c09mV2Vla0Rpc2FibGVkID0gZGF5c09mV2Vla0Rpc2FibGVkLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gcGFyc2VJbnQoY3VycmVudFZhbHVlLCAxMCk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA+IDYgfHwgY3VycmVudFZhbHVlIDwgMCB8fCBpc05hTihjdXJyZW50VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNWYWx1ZS5pbmRleE9mKGN1cnJlbnRWYWx1ZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUucHVzaChjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbiAgICAgICAgICAgIH0sIFtdKS5zb3J0KCk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51c2VDdXJyZW50ICYmICFvcHRpb25zLmtlZXBJbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyaWVzID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoIWlzVmFsaWQoZGF0ZSwgJ2QnKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJpZXMgPT09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93ICdUcmllZCA3IHRpbWVzIHRvIGZpbmQgYSB2YWxpZCBkYXRlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmllcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIubWF4RGF0ZSA9IGZ1bmN0aW9uIChtYXhEYXRlKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLm1heERhdGUgPyBvcHRpb25zLm1heERhdGUuY2xvbmUoKSA6IG9wdGlvbnMubWF4RGF0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgbWF4RGF0ZSA9PT0gJ2Jvb2xlYW4nKSAmJiBtYXhEYXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubWF4RGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWF4RGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF4RGF0ZSA9PT0gJ25vdycgfHwgbWF4RGF0ZSA9PT0gJ21vbWVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4RGF0ZSA9IGdldE1vbWVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBhcnNlZERhdGUgPSBwYXJzZUlucHV0RGF0ZShtYXhEYXRlKTtcblxuICAgICAgICAgICAgaWYgKCFwYXJzZWREYXRlLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heERhdGUoKSBDb3VsZCBub3QgcGFyc2UgZGF0ZSBwYXJhbWV0ZXI6ICcgKyBtYXhEYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1pbkRhdGUgJiYgcGFyc2VkRGF0ZS5pc0JlZm9yZShvcHRpb25zLm1pbkRhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4RGF0ZSgpIGRhdGUgcGFyYW1ldGVyIGlzIGJlZm9yZSBvcHRpb25zLm1pbkRhdGU6ICcgKyBwYXJzZWREYXRlLmZvcm1hdChhY3R1YWxGb3JtYXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMubWF4RGF0ZSA9IHBhcnNlZERhdGU7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51c2VDdXJyZW50ICYmICFvcHRpb25zLmtlZXBJbnZhbGlkICYmIGRhdGUuaXNBZnRlcihtYXhEYXRlKSkge1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKG9wdGlvbnMubWF4RGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmlld0RhdGUuaXNBZnRlcihwYXJzZWREYXRlKSkge1xuICAgICAgICAgICAgICAgIHZpZXdEYXRlID0gcGFyc2VkRGF0ZS5jbG9uZSgpLnN1YnRyYWN0KG9wdGlvbnMuc3RlcHBpbmcsICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLm1pbkRhdGUgPSBmdW5jdGlvbiAobWluRGF0ZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5taW5EYXRlID8gb3B0aW9ucy5taW5EYXRlLmNsb25lKCkgOiBvcHRpb25zLm1pbkRhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgodHlwZW9mIG1pbkRhdGUgPT09ICdib29sZWFuJykgJiYgbWluRGF0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLm1pbkRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1pbkRhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbkRhdGUgPT09ICdub3cnIHx8IG1pbkRhdGUgPT09ICdtb21lbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbkRhdGUgPSBnZXRNb21lbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJzZWREYXRlID0gcGFyc2VJbnB1dERhdGUobWluRGF0ZSk7XG5cbiAgICAgICAgICAgIGlmICghcGFyc2VkRGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaW5EYXRlKCkgQ291bGQgbm90IHBhcnNlIGRhdGUgcGFyYW1ldGVyOiAnICsgbWluRGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5tYXhEYXRlICYmIHBhcnNlZERhdGUuaXNBZnRlcihvcHRpb25zLm1heERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWluRGF0ZSgpIGRhdGUgcGFyYW1ldGVyIGlzIGFmdGVyIG9wdGlvbnMubWF4RGF0ZTogJyArIHBhcnNlZERhdGUuZm9ybWF0KGFjdHVhbEZvcm1hdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5taW5EYXRlID0gcGFyc2VkRGF0ZTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnVzZUN1cnJlbnQgJiYgIW9wdGlvbnMua2VlcEludmFsaWQgJiYgZGF0ZS5pc0JlZm9yZShtaW5EYXRlKSkge1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKG9wdGlvbnMubWluRGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmlld0RhdGUuaXNCZWZvcmUocGFyc2VkRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB2aWV3RGF0ZSA9IHBhcnNlZERhdGUuY2xvbmUoKS5hZGQob3B0aW9ucy5zdGVwcGluZywgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZGVmYXVsdERhdGUgPSBmdW5jdGlvbiAoZGVmYXVsdERhdGUpIHtcbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmUgaGVscEtleXdvcmQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRlZmF1bHREYXRlXCI+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5SZXR1cm5zIGEgbW9tZW50IHdpdGggdGhlIG9wdGlvbnMuZGVmYXVsdERhdGUgb3B0aW9uIGNvbmZpZ3VyYXRpb24gb3IgZmFsc2UgaWYgbm90IHNldDwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLzxyZXR1cm5zIHR5cGU9XCJNb21lbnRcIj5kYXRlLmNsb25lKCk8L3JldHVybnM+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmU+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5XaWxsIHNldCB0aGUgcGlja2VyJ3MgaW5pdGFsIGRhdGUuIElmIGEgYm9vbGVhbjpmYWxzZSB2YWx1ZSBpcyBwYXNzZWQgdGhlIG9wdGlvbnMuZGVmYXVsdERhdGUgcGFyYW1ldGVyIGlzIGNsZWFyZWQuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHBhcmFtIG5hbWU9XCJkZWZhdWx0RGF0ZVwiIGxvY2lkPVwiJC5mbi5kYXRldGltZXBpY2tlci5kZWZhdWx0RGF0ZV9wOmRlZmF1bHREYXRlXCI+VGFrZXMgYSBzdHJpbmcsIERhdGUsIG1vbWVudCwgYm9vbGVhbjpmYWxzZTwvcGFyYW0+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGVmYXVsdERhdGUgPyBvcHRpb25zLmRlZmF1bHREYXRlLmNsb25lKCkgOiBvcHRpb25zLmRlZmF1bHREYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkZWZhdWx0RGF0ZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdERhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZmF1bHREYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0RGF0ZSA9PT0gJ25vdycgfHwgZGVmYXVsdERhdGUgPT09ICdtb21lbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHREYXRlID0gZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IHBhcnNlSW5wdXREYXRlKGRlZmF1bHREYXRlKTtcbiAgICAgICAgICAgIGlmICghcGFyc2VkRGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkZWZhdWx0RGF0ZSgpIENvdWxkIG5vdCBwYXJzZSBkYXRlIHBhcmFtZXRlcjogJyArIGRlZmF1bHREYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNWYWxpZChwYXJzZWREYXRlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RlZmF1bHREYXRlKCkgZGF0ZSBwYXNzZWQgaXMgaW52YWxpZCBhY2NvcmRpbmcgdG8gY29tcG9uZW50IHNldHVwIHZhbGlkYXRpb25zJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdERhdGUgPSBwYXJzZWREYXRlO1xuXG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMuZGVmYXVsdERhdGUgJiYgb3B0aW9ucy5pbmxpbmUpIHx8IGlucHV0LnZhbCgpLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBzZXRWYWx1ZShvcHRpb25zLmRlZmF1bHREYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmxvY2FsZSA9IGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMubG9jYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW1vbWVudC5sb2NhbGVEYXRhKGxvY2FsZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdsb2NhbGUoKSBsb2NhbGUgJyArIGxvY2FsZSArICcgaXMgbm90IGxvYWRlZCBmcm9tIG1vbWVudCBsb2NhbGVzIScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLmxvY2FsZSA9IGxvY2FsZTtcbiAgICAgICAgICAgIGRhdGUubG9jYWxlKG9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgICAgIHZpZXdEYXRlLmxvY2FsZShvcHRpb25zLmxvY2FsZSk7XG5cbiAgICAgICAgICAgIGlmIChhY3R1YWxGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICBpbml0Rm9ybWF0dGluZygpOyAvLyByZWluaXQgZm9ybWF0dGluZ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5zdGVwcGluZyA9IGZ1bmN0aW9uIChzdGVwcGluZykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5zdGVwcGluZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RlcHBpbmcgPSBwYXJzZUludChzdGVwcGluZywgMTApO1xuICAgICAgICAgICAgaWYgKGlzTmFOKHN0ZXBwaW5nKSB8fCBzdGVwcGluZyA8IDEpIHtcbiAgICAgICAgICAgICAgICBzdGVwcGluZyA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnN0ZXBwaW5nID0gc3RlcHBpbmc7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci51c2VDdXJyZW50ID0gZnVuY3Rpb24gKHVzZUN1cnJlbnQpIHtcbiAgICAgICAgICAgIHZhciB1c2VDdXJyZW50T3B0aW9ucyA9IFsneWVhcicsICdtb250aCcsICdkYXknLCAnaG91cicsICdtaW51dGUnXTtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudXNlQ3VycmVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgdXNlQ3VycmVudCAhPT0gJ2Jvb2xlYW4nKSAmJiAodHlwZW9mIHVzZUN1cnJlbnQgIT09ICdzdHJpbmcnKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VzZUN1cnJlbnQoKSBleHBlY3RzIGEgYm9vbGVhbiBvciBzdHJpbmcgcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHVzZUN1cnJlbnQgPT09ICdzdHJpbmcnICYmIHVzZUN1cnJlbnRPcHRpb25zLmluZGV4T2YodXNlQ3VycmVudC50b0xvd2VyQ2FzZSgpKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1c2VDdXJyZW50KCkgZXhwZWN0cyBhIHN0cmluZyBwYXJhbWV0ZXIgb2YgJyArIHVzZUN1cnJlbnRPcHRpb25zLmpvaW4oJywgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy51c2VDdXJyZW50ID0gdXNlQ3VycmVudDtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmNvbGxhcHNlID0gZnVuY3Rpb24gKGNvbGxhcHNlKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmNvbGxhcHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbGxhcHNlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjb2xsYXBzZSgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29sbGFwc2UgPT09IGNvbGxhcHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuY29sbGFwc2UgPSBjb2xsYXBzZTtcbiAgICAgICAgICAgIGlmICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuaWNvbnMgPSBmdW5jdGlvbiAoaWNvbnMpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBvcHRpb25zLmljb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEoaWNvbnMgaW5zdGFuY2VvZiBPYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaWNvbnMoKSBleHBlY3RzIHBhcmFtZXRlciB0byBiZSBhbiBPYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQuZXh0ZW5kKG9wdGlvbnMuaWNvbnMsIGljb25zKTtcbiAgICAgICAgICAgIGlmICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIudG9vbHRpcHMgPSBmdW5jdGlvbiAodG9vbHRpcHMpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBvcHRpb25zLnRvb2x0aXBzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEodG9vbHRpcHMgaW5zdGFuY2VvZiBPYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9vbHRpcHMoKSBleHBlY3RzIHBhcmFtZXRlciB0byBiZSBhbiBPYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQuZXh0ZW5kKG9wdGlvbnMudG9vbHRpcHMsIHRvb2x0aXBzKTtcbiAgICAgICAgICAgIGlmICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIudXNlU3RyaWN0ID0gZnVuY3Rpb24gKHVzZVN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy51c2VTdHJpY3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXNlU3RyaWN0ICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1c2VTdHJpY3QoKSBleHBlY3RzIGEgYm9vbGVhbiBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMudXNlU3RyaWN0ID0gdXNlU3RyaWN0O1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuc2lkZUJ5U2lkZSA9IGZ1bmN0aW9uIChzaWRlQnlTaWRlKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnNpZGVCeVNpZGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2lkZUJ5U2lkZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2lkZUJ5U2lkZSgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5zaWRlQnlTaWRlID0gc2lkZUJ5U2lkZTtcbiAgICAgICAgICAgIGlmICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIudmlld01vZGUgPSBmdW5jdGlvbiAodmlld01vZGUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudmlld01vZGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygdmlld01vZGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmlld01vZGUoKSBleHBlY3RzIGEgc3RyaW5nIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmlld01vZGVzLmluZGV4T2Yodmlld01vZGUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZpZXdNb2RlKCkgcGFyYW1ldGVyIG11c3QgYmUgb25lIG9mICgnICsgdmlld01vZGVzLmpvaW4oJywgJykgKyAnKSB2YWx1ZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLnZpZXdNb2RlID0gdmlld01vZGU7XG4gICAgICAgICAgICBjdXJyZW50Vmlld01vZGUgPSBNYXRoLm1heCh2aWV3TW9kZXMuaW5kZXhPZih2aWV3TW9kZSksIG1pblZpZXdNb2RlTnVtYmVyKTtcblxuICAgICAgICAgICAgc2hvd01vZGUoKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLnRvb2xiYXJQbGFjZW1lbnQgPSBmdW5jdGlvbiAodG9vbGJhclBsYWNlbWVudCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b29sYmFyUGxhY2VtZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRvb2xiYXJQbGFjZW1lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9vbGJhclBsYWNlbWVudCgpIGV4cGVjdHMgYSBzdHJpbmcgcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9vbGJhclBsYWNlbWVudHMuaW5kZXhPZih0b29sYmFyUGxhY2VtZW50KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0b29sYmFyUGxhY2VtZW50KCkgcGFyYW1ldGVyIG11c3QgYmUgb25lIG9mICgnICsgdG9vbGJhclBsYWNlbWVudHMuam9pbignLCAnKSArICcpIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnRvb2xiYXJQbGFjZW1lbnQgPSB0b29sYmFyUGxhY2VtZW50O1xuXG4gICAgICAgICAgICBpZiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLndpZGdldFBvc2l0aW9uaW5nID0gZnVuY3Rpb24gKHdpZGdldFBvc2l0aW9uaW5nKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgb3B0aW9ucy53aWRnZXRQb3NpdGlvbmluZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgoe30pLnRvU3RyaW5nLmNhbGwod2lkZ2V0UG9zaXRpb25pbmcpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3dpZGdldFBvc2l0aW9uaW5nKCkgZXhwZWN0cyBhbiBvYmplY3QgdmFyaWFibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3aWRnZXRQb3NpdGlvbmluZy5ob3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aWRnZXRQb3NpdGlvbmluZy5ob3Jpem9udGFsICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd3aWRnZXRQb3NpdGlvbmluZygpIGhvcml6b250YWwgdmFyaWFibGUgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aWRnZXRQb3NpdGlvbmluZy5ob3Jpem9udGFsID0gd2lkZ2V0UG9zaXRpb25pbmcuaG9yaXpvbnRhbC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChob3Jpem9udGFsTW9kZXMuaW5kZXhPZih3aWRnZXRQb3NpdGlvbmluZy5ob3Jpem9udGFsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignd2lkZ2V0UG9zaXRpb25pbmcoKSBleHBlY3RzIGhvcml6b250YWwgcGFyYW1ldGVyIHRvIGJlIG9uZSBvZiAoJyArIGhvcml6b250YWxNb2Rlcy5qb2luKCcsICcpICsgJyknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0aW9ucy53aWRnZXRQb3NpdGlvbmluZy5ob3Jpem9udGFsID0gd2lkZ2V0UG9zaXRpb25pbmcuaG9yaXpvbnRhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3aWRnZXRQb3NpdGlvbmluZy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2lkZ2V0UG9zaXRpb25pbmcudmVydGljYWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3dpZGdldFBvc2l0aW9uaW5nKCkgdmVydGljYWwgdmFyaWFibGUgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aWRnZXRQb3NpdGlvbmluZy52ZXJ0aWNhbCA9IHdpZGdldFBvc2l0aW9uaW5nLnZlcnRpY2FsLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHZlcnRpY2FsTW9kZXMuaW5kZXhPZih3aWRnZXRQb3NpdGlvbmluZy52ZXJ0aWNhbCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3dpZGdldFBvc2l0aW9uaW5nKCkgZXhwZWN0cyB2ZXJ0aWNhbCBwYXJhbWV0ZXIgdG8gYmUgb25lIG9mICgnICsgdmVydGljYWxNb2Rlcy5qb2luKCcsICcpICsgJyknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0aW9ucy53aWRnZXRQb3NpdGlvbmluZy52ZXJ0aWNhbCA9IHdpZGdldFBvc2l0aW9uaW5nLnZlcnRpY2FsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5jYWxlbmRhcldlZWtzID0gZnVuY3Rpb24gKGNhbGVuZGFyV2Vla3MpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuY2FsZW5kYXJXZWVrcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxlbmRhcldlZWtzICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYWxlbmRhcldlZWtzKCkgZXhwZWN0cyBwYXJhbWV0ZXIgdG8gYmUgYSBib29sZWFuIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuY2FsZW5kYXJXZWVrcyA9IGNhbGVuZGFyV2Vla3M7XG4gICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLnNob3dUb2RheUJ1dHRvbiA9IGZ1bmN0aW9uIChzaG93VG9kYXlCdXR0b24pIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2hvd1RvZGF5QnV0dG9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNob3dUb2RheUJ1dHRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2hvd1RvZGF5QnV0dG9uKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuc2hvd1RvZGF5QnV0dG9uID0gc2hvd1RvZGF5QnV0dG9uO1xuICAgICAgICAgICAgaWYgKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5zaG93Q2xlYXIgPSBmdW5jdGlvbiAoc2hvd0NsZWFyKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnNob3dDbGVhcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzaG93Q2xlYXIgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Nob3dDbGVhcigpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLnNob3dDbGVhciA9IHNob3dDbGVhcjtcbiAgICAgICAgICAgIGlmICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIud2lkZ2V0UGFyZW50ID0gZnVuY3Rpb24gKHdpZGdldFBhcmVudCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy53aWRnZXRQYXJlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2lkZ2V0UGFyZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHdpZGdldFBhcmVudCA9ICQod2lkZ2V0UGFyZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHdpZGdldFBhcmVudCAhPT0gbnVsbCAmJiAodHlwZW9mIHdpZGdldFBhcmVudCAhPT0gJ3N0cmluZycgJiYgISh3aWRnZXRQYXJlbnQgaW5zdGFuY2VvZiAkKSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd3aWRnZXRQYXJlbnQoKSBleHBlY3RzIGEgc3RyaW5nIG9yIGEgalF1ZXJ5IG9iamVjdCBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy53aWRnZXRQYXJlbnQgPSB3aWRnZXRQYXJlbnQ7XG4gICAgICAgICAgICBpZiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmtlZXBPcGVuID0gZnVuY3Rpb24gKGtlZXBPcGVuKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmtlZXBPcGVuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGtlZXBPcGVuICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdrZWVwT3BlbigpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLmtlZXBPcGVuID0ga2VlcE9wZW47XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5mb2N1c09uU2hvdyA9IGZ1bmN0aW9uIChmb2N1c09uU2hvdykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5mb2N1c09uU2hvdztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmb2N1c09uU2hvdyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZm9jdXNPblNob3coKSBleHBlY3RzIGEgYm9vbGVhbiBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5mb2N1c09uU2hvdyA9IGZvY3VzT25TaG93O1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuaW5saW5lID0gZnVuY3Rpb24gKGlubGluZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5pbmxpbmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5saW5lICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbmxpbmUoKSBleHBlY3RzIGEgYm9vbGVhbiBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucy5pbmxpbmUgPSBpbmxpbmU7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyKCk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5rZXlCaW5kcyA9IGZ1bmN0aW9uIChrZXlCaW5kcykge1xuICAgICAgICAgICAgb3B0aW9ucy5rZXlCaW5kcyA9IGtleUJpbmRzO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZ2V0TW9tZW50ID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRNb21lbnQoZCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmRlYnVnID0gZnVuY3Rpb24gKGRlYnVnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlYnVnICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkZWJ1ZygpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLmRlYnVnID0gZGVidWc7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5hbGxvd0lucHV0VG9nZ2xlID0gZnVuY3Rpb24gKGFsbG93SW5wdXRUb2dnbGUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuYWxsb3dJbnB1dFRvZ2dsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhbGxvd0lucHV0VG9nZ2xlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhbGxvd0lucHV0VG9nZ2xlKCkgZXhwZWN0cyBhIGJvb2xlYW4gcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dJbnB1dFRvZ2dsZSA9IGFsbG93SW5wdXRUb2dnbGU7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5zaG93Q2xvc2UgPSBmdW5jdGlvbiAoc2hvd0Nsb3NlKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnNob3dDbG9zZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzaG93Q2xvc2UgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Nob3dDbG9zZSgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLnNob3dDbG9zZSA9IHNob3dDbG9zZTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmtlZXBJbnZhbGlkID0gZnVuY3Rpb24gKGtlZXBJbnZhbGlkKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmtlZXBJbnZhbGlkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGtlZXBJbnZhbGlkICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdrZWVwSW52YWxpZCgpIGV4cGVjdHMgYSBib29sZWFuIHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5rZWVwSW52YWxpZCA9IGtlZXBJbnZhbGlkO1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIuZGF0ZXBpY2tlcklucHV0ID0gZnVuY3Rpb24gKGRhdGVwaWNrZXJJbnB1dCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kYXRlcGlja2VySW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0ZXBpY2tlcklucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGVwaWNrZXJJbnB1dCgpIGV4cGVjdHMgYSBzdHJpbmcgcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuZGF0ZXBpY2tlcklucHV0ID0gZGF0ZXBpY2tlcklucHV0O1xuICAgICAgICAgICAgcmV0dXJuIHBpY2tlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwaWNrZXIucGFyc2VJbnB1dERhdGUgPSBmdW5jdGlvbiAocGFyc2VJbnB1dERhdGUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMucGFyc2VJbnB1dERhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VJbnB1dERhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJzZUlucHV0RGF0ZSgpIHNob2x1ZCBiZSBhcyBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLnBhcnNlSW5wdXREYXRlID0gcGFyc2VJbnB1dERhdGU7XG5cbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLmRpc2FibGVkVGltZUludGVydmFscyA9IGZ1bmN0aW9uIChkaXNhYmxlZFRpbWVJbnRlcnZhbHMpIHtcbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmUgaGVscEtleXdvcmQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRpc2FibGVkVGltZUludGVydmFsc1wiPlxuICAgICAgICAgICAgLy8vPHN1bW1hcnk+UmV0dXJucyBhbiBhcnJheSB3aXRoIHRoZSBjdXJyZW50bHkgc2V0IGRpc2FibGVkIGRhdGVzIG9uIHRoZSBjb21wb25lbnQuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHJldHVybnMgdHlwZT1cImFycmF5XCI+b3B0aW9ucy5kaXNhYmxlZFRpbWVJbnRlcnZhbHM8L3JldHVybnM+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmU+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5TZXR0aW5nIHRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIG9wdGlvbnMubWluRGF0ZSwgb3B0aW9ucy5tYXhEYXRlIGNvbmZpZ3VyYXRpb24uIEFsc28gY2FsbGluZyB0aGlzIGZ1bmN0aW9uIHJlbW92ZXMgdGhlIGNvbmZpZ3VyYXRpb24gb2ZcbiAgICAgICAgICAgIC8vL29wdGlvbnMuZW5hYmxlZERhdGVzIGlmIHN1Y2ggZXhpc3QuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHBhcmFtIG5hbWU9XCJkYXRlc1wiIGxvY2lkPVwiJC5mbi5kYXRldGltZXBpY2tlci5kaXNhYmxlZFRpbWVJbnRlcnZhbHNfcDpkYXRlc1wiPlRha2VzIGFuIFsgc3RyaW5nIG9yIERhdGUgb3IgbW9tZW50IF0gb2YgdmFsdWVzIGFuZCBhbGxvd3MgdGhlIHVzZXIgdG8gc2VsZWN0IG9ubHkgZnJvbSB0aG9zZSBkYXlzLjwvcGFyYW0+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zLmRpc2FibGVkVGltZUludGVydmFscyA/ICQuZXh0ZW5kKHt9LCBvcHRpb25zLmRpc2FibGVkVGltZUludGVydmFscykgOiBvcHRpb25zLmRpc2FibGVkVGltZUludGVydmFscyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZGlzYWJsZWRUaW1lSW50ZXJ2YWxzKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kaXNhYmxlZFRpbWVJbnRlcnZhbHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoZGlzYWJsZWRUaW1lSW50ZXJ2YWxzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGlzYWJsZWRUaW1lSW50ZXJ2YWxzKCkgZXhwZWN0cyBhbiBhcnJheSBwYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuZGlzYWJsZWRUaW1lSW50ZXJ2YWxzID0gZGlzYWJsZWRUaW1lSW50ZXJ2YWxzO1xuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5kaXNhYmxlZEhvdXJzID0gZnVuY3Rpb24gKGhvdXJzKSB7XG4gICAgICAgICAgICAvLy88c2lnbmF0dXJlIGhlbHBLZXl3b3JkPVwiJC5mbi5kYXRldGltZXBpY2tlci5kaXNhYmxlZEhvdXJzXCI+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5SZXR1cm5zIGFuIGFycmF5IHdpdGggdGhlIGN1cnJlbnRseSBzZXQgZGlzYWJsZWQgaG91cnMgb24gdGhlIGNvbXBvbmVudC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cmV0dXJucyB0eXBlPVwiYXJyYXlcIj5vcHRpb25zLmRpc2FibGVkSG91cnM8L3JldHVybnM+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmU+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5TZXR0aW5nIHRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIG9wdGlvbnMubWluRGF0ZSwgb3B0aW9ucy5tYXhEYXRlIGNvbmZpZ3VyYXRpb24uIEFsc28gY2FsbGluZyB0aGlzIGZ1bmN0aW9uIHJlbW92ZXMgdGhlIGNvbmZpZ3VyYXRpb24gb2ZcbiAgICAgICAgICAgIC8vL29wdGlvbnMuZW5hYmxlZEhvdXJzIGlmIHN1Y2ggZXhpc3QuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHBhcmFtIG5hbWU9XCJob3Vyc1wiIGxvY2lkPVwiJC5mbi5kYXRldGltZXBpY2tlci5kaXNhYmxlZEhvdXJzX3A6aG91cnNcIj5UYWtlcyBhbiBbIGludCBdIG9mIHZhbHVlcyBhbmQgZGlzYWxsb3dzIHRoZSB1c2VyIHRvIHNlbGVjdCBvbmx5IGZyb20gdGhvc2UgaG91cnMuPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG9wdGlvbnMuZGlzYWJsZWRIb3VycyA/ICQuZXh0ZW5kKHt9LCBvcHRpb25zLmRpc2FibGVkSG91cnMpIDogb3B0aW9ucy5kaXNhYmxlZEhvdXJzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFob3Vycykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZGlzYWJsZWRIb3VycyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShob3VycyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Rpc2FibGVkSG91cnMoKSBleHBlY3RzIGFuIGFycmF5IHBhcmFtZXRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5kaXNhYmxlZEhvdXJzID0gaW5kZXhHaXZlbkhvdXJzKGhvdXJzKTtcbiAgICAgICAgICAgIG9wdGlvbnMuZW5hYmxlZEhvdXJzID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51c2VDdXJyZW50ICYmICFvcHRpb25zLmtlZXBJbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyaWVzID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoIWlzVmFsaWQoZGF0ZSwgJ2gnKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlLmFkZCgxLCAnaCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJpZXMgPT09IDI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAnVHJpZWQgMjQgdGltZXMgdG8gZmluZCBhIHZhbGlkIGRhdGUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyaWVzKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFZhbHVlKGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBpY2tlci5lbmFibGVkSG91cnMgPSBmdW5jdGlvbiAoaG91cnMpIHtcbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmUgaGVscEtleXdvcmQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmVuYWJsZWRIb3Vyc1wiPlxuICAgICAgICAgICAgLy8vPHN1bW1hcnk+UmV0dXJucyBhbiBhcnJheSB3aXRoIHRoZSBjdXJyZW50bHkgc2V0IGVuYWJsZWQgaG91cnMgb24gdGhlIGNvbXBvbmVudC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cmV0dXJucyB0eXBlPVwiYXJyYXlcIj5vcHRpb25zLmVuYWJsZWRIb3VyczwvcmV0dXJucz5cbiAgICAgICAgICAgIC8vLzwvc2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHNpZ25hdHVyZT5cbiAgICAgICAgICAgIC8vLzxzdW1tYXJ5PlNldHRpbmcgdGhpcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgb3B0aW9ucy5taW5EYXRlLCBvcHRpb25zLm1heERhdGUgY29uZmlndXJhdGlvbi4gQWxzbyBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgY29uZmlndXJhdGlvbiBvZiBvcHRpb25zLmRpc2FibGVkSG91cnMgaWYgc3VjaCBleGlzdC48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy88cGFyYW0gbmFtZT1cImhvdXJzXCIgbG9jaWQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmVuYWJsZWRIb3Vyc19wOmhvdXJzXCI+VGFrZXMgYW4gWyBpbnQgXSBvZiB2YWx1ZXMgYW5kIGFsbG93cyB0aGUgdXNlciB0byBzZWxlY3Qgb25seSBmcm9tIHRob3NlIGhvdXJzLjwvcGFyYW0+XG4gICAgICAgICAgICAvLy88L3NpZ25hdHVyZT5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zLmVuYWJsZWRIb3VycyA/ICQuZXh0ZW5kKHt9LCBvcHRpb25zLmVuYWJsZWRIb3VycykgOiBvcHRpb25zLmVuYWJsZWRIb3Vycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaG91cnMpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmVuYWJsZWRIb3VycyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShob3VycyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuYWJsZWRIb3VycygpIGV4cGVjdHMgYW4gYXJyYXkgcGFyYW1ldGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmVuYWJsZWRIb3VycyA9IGluZGV4R2l2ZW5Ib3Vycyhob3Vycyk7XG4gICAgICAgICAgICBvcHRpb25zLmRpc2FibGVkSG91cnMgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnVzZUN1cnJlbnQgJiYgIW9wdGlvbnMua2VlcEludmFsaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJpZXMgPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlICghaXNWYWxpZChkYXRlLCAnaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUuYWRkKDEsICdoJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmllcyA9PT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93ICdUcmllZCAyNCB0aW1lcyB0byBmaW5kIGEgdmFsaWQgZGF0ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZXMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcGlja2VyLnZpZXdEYXRlID0gZnVuY3Rpb24gKG5ld0RhdGUpIHtcbiAgICAgICAgICAgIC8vLzxzaWduYXR1cmUgaGVscEtleXdvcmQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLnZpZXdEYXRlXCI+XG4gICAgICAgICAgICAvLy88c3VtbWFyeT5SZXR1cm5zIHRoZSBjb21wb25lbnQncyBtb2RlbCBjdXJyZW50IHZpZXdEYXRlLCBhIG1vbWVudCBvYmplY3Qgb3IgbnVsbCBpZiBub3Qgc2V0Ljwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLzxyZXR1cm5zIHR5cGU9XCJNb21lbnRcIj52aWV3RGF0ZS5jbG9uZSgpPC9yZXR1cm5zPlxuICAgICAgICAgICAgLy8vPC9zaWduYXR1cmU+XG4gICAgICAgICAgICAvLy88c2lnbmF0dXJlPlxuICAgICAgICAgICAgLy8vPHN1bW1hcnk+U2V0cyB0aGUgY29tcG9uZW50cyBtb2RlbCBjdXJyZW50IG1vbWVudCB0byBpdC4gUGFzc2luZyBhIG51bGwgdmFsdWUgdW5zZXRzIHRoZSBjb21wb25lbnRzIG1vZGVsIGN1cnJlbnQgbW9tZW50LiBQYXJzaW5nIG9mIHRoZSBuZXdEYXRlIHBhcmFtZXRlciBpcyBtYWRlIHVzaW5nIG1vbWVudCBsaWJyYXJ5IHdpdGggdGhlIG9wdGlvbnMuZm9ybWF0IGFuZCBvcHRpb25zLnVzZVN0cmljdCBjb21wb25lbnRzIGNvbmZpZ3VyYXRpb24uPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vPHBhcmFtIG5hbWU9XCJuZXdEYXRlXCIgbG9jaWQ9XCIkLmZuLmRhdGV0aW1lcGlja2VyLmRhdGVfcDpuZXdEYXRlXCI+VGFrZXMgc3RyaW5nLCB2aWV3RGF0ZSwgbW9tZW50LCBudWxsIHBhcmFtZXRlci48L3BhcmFtPlxuICAgICAgICAgICAgLy8vPC9zaWduYXR1cmU+XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aWV3RGF0ZS5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW5ld0RhdGUpIHtcbiAgICAgICAgICAgICAgICB2aWV3RGF0ZSA9IGRhdGUuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld0RhdGUgIT09ICdzdHJpbmcnICYmICFtb21lbnQuaXNNb21lbnQobmV3RGF0ZSkgJiYgIShuZXdEYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aWV3RGF0ZSgpIHBhcmFtZXRlciBtdXN0IGJlIG9uZSBvZiBbc3RyaW5nLCBtb21lbnQgb3IgRGF0ZV0nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmlld0RhdGUgPSBwYXJzZUlucHV0RGF0ZShuZXdEYXRlKTtcbiAgICAgICAgICAgIHZpZXdVcGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBwaWNrZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gaW5pdGlhbGl6aW5nIGVsZW1lbnQgYW5kIGNvbXBvbmVudCBhdHRyaWJ1dGVzXG4gICAgICAgIGlmIChlbGVtZW50LmlzKCdpbnB1dCcpKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dCA9IGVsZW1lbnQuZmluZChvcHRpb25zLmRhdGVwaWNrZXJJbnB1dCk7XG4gICAgICAgICAgICBpZiAoaW5wdXQuc2l6ZSgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBlbGVtZW50LmZpbmQoJ2lucHV0Jyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpbnB1dC5pcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ1NTIGNsYXNzIFwiJyArIG9wdGlvbnMuZGF0ZXBpY2tlcklucHV0ICsgJ1wiIGNhbm5vdCBiZSBhcHBsaWVkIHRvIG5vbiBpbnB1dCBlbGVtZW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcygnaW5wdXQtZ3JvdXAnKSkge1xuICAgICAgICAgICAgLy8gaW4gY2FzZSB0aGVyZSBpcyBtb3JlIHRoZW4gb25lICdpbnB1dC1ncm91cC1hZGRvbicgSXNzdWUgIzQ4XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5maW5kKCcuZGF0ZXBpY2tlcmJ1dHRvbicpLnNpemUoKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudCA9IGVsZW1lbnQuZmluZCgnLmlucHV0LWdyb3VwLWFkZG9uJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudCA9IGVsZW1lbnQuZmluZCgnLmRhdGVwaWNrZXJidXR0b24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy5pbmxpbmUgJiYgIWlucHV0LmlzKCdpbnB1dCcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBpbml0aWFsaXplIERhdGVUaW1lUGlja2VyIHdpdGhvdXQgYW4gaW5wdXQgZWxlbWVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IGRlZmF1bHRzIGZvciBkYXRlIGhlcmUgbm93IGluc3RlYWQgb2YgaW4gdmFyIGRlY2xhcmF0aW9uXG4gICAgICAgIGRhdGUgPSBnZXRNb21lbnQoKTtcbiAgICAgICAgdmlld0RhdGUgPSBkYXRlLmNsb25lKCk7XG5cbiAgICAgICAgJC5leHRlbmQodHJ1ZSwgb3B0aW9ucywgZGF0YVRvT3B0aW9ucygpKTtcblxuICAgICAgICBwaWNrZXIub3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgICBpbml0Rm9ybWF0dGluZygpO1xuXG4gICAgICAgIGF0dGFjaERhdGVQaWNrZXJFbGVtZW50RXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKGlucHV0LnByb3AoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgIHBpY2tlci5kaXNhYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0LmlzKCdpbnB1dCcpICYmIGlucHV0LnZhbCgpLnRyaW0oKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHNldFZhbHVlKHBhcnNlSW5wdXREYXRlKGlucHV0LnZhbCgpLnRyaW0oKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuZGVmYXVsdERhdGUgJiYgaW5wdXQuYXR0cigncGxhY2Vob2xkZXInKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZXRWYWx1ZShvcHRpb25zLmRlZmF1bHREYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlja2VyO1xuICAgIH07XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKlxuICAgICAqIGpRdWVyeSBwbHVnaW4gY29uc3RydWN0b3IgYW5kIGRlZmF1bHRzIG9iamVjdFxuICAgICAqXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgJC5mbi5kYXRldGltZXBpY2tlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgICAgIGlmICghJHRoaXMuZGF0YSgnRGF0ZVRpbWVQaWNrZXInKSkge1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIHByaXZhdGUgY29weSBvZiB0aGUgZGVmYXVsdHMgb2JqZWN0XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLmZuLmRhdGV0aW1lcGlja2VyLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdEYXRlVGltZVBpY2tlcicsIGRhdGVUaW1lUGlja2VyKCR0aGlzLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkLmZuLmRhdGV0aW1lcGlja2VyLmRlZmF1bHRzID0ge1xuICAgICAgICB0aW1lWm9uZTogJ0V0Yy9VVEMnLFxuICAgICAgICBmb3JtYXQ6IGZhbHNlLFxuICAgICAgICBkYXlWaWV3SGVhZGVyRm9ybWF0OiAnTU1NTSBZWVlZJyxcbiAgICAgICAgZXh0cmFGb3JtYXRzOiBmYWxzZSxcbiAgICAgICAgc3RlcHBpbmc6IDEsXG4gICAgICAgIG1pbkRhdGU6IGZhbHNlLFxuICAgICAgICBtYXhEYXRlOiBmYWxzZSxcbiAgICAgICAgdXNlQ3VycmVudDogdHJ1ZSxcbiAgICAgICAgY29sbGFwc2U6IHRydWUsXG4gICAgICAgIGxvY2FsZTogbW9tZW50LmxvY2FsZSgpLFxuICAgICAgICBkZWZhdWx0RGF0ZTogZmFsc2UsXG4gICAgICAgIGRpc2FibGVkRGF0ZXM6IGZhbHNlLFxuICAgICAgICBlbmFibGVkRGF0ZXM6IGZhbHNlLFxuICAgICAgICBpY29uczoge1xuICAgICAgICAgICAgdGltZTogJ2dseXBoaWNvbiBnbHlwaGljb24tdGltZScsXG4gICAgICAgICAgICBkYXRlOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhcicsXG4gICAgICAgICAgICB1cDogJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcsXG4gICAgICAgICAgICBkb3duOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24nLFxuICAgICAgICAgICAgcHJldmlvdXM6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCcsXG4gICAgICAgICAgICBuZXh0OiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0JyxcbiAgICAgICAgICAgIHRvZGF5OiAnZ2x5cGhpY29uIGdseXBoaWNvbi1zY3JlZW5zaG90JyxcbiAgICAgICAgICAgIGNsZWFyOiAnZ2x5cGhpY29uIGdseXBoaWNvbi10cmFzaCcsXG4gICAgICAgICAgICBjbG9zZTogJ2dseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlJ1xuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwczoge1xuICAgICAgICAgICAgdG9kYXk6ICdHbyB0byB0b2RheScsXG4gICAgICAgICAgICBjbGVhcjogJ0NsZWFyIHNlbGVjdGlvbicsXG4gICAgICAgICAgICBjbG9zZTogJ0Nsb3NlIHRoZSBwaWNrZXInLFxuICAgICAgICAgICAgc2VsZWN0TW9udGg6ICdTZWxlY3QgTW9udGgnLFxuICAgICAgICAgICAgcHJldk1vbnRoOiAnUHJldmlvdXMgTW9udGgnLFxuICAgICAgICAgICAgbmV4dE1vbnRoOiAnTmV4dCBNb250aCcsXG4gICAgICAgICAgICBzZWxlY3RZZWFyOiAnU2VsZWN0IFllYXInLFxuICAgICAgICAgICAgcHJldlllYXI6ICdQcmV2aW91cyBZZWFyJyxcbiAgICAgICAgICAgIG5leHRZZWFyOiAnTmV4dCBZZWFyJyxcbiAgICAgICAgICAgIHNlbGVjdERlY2FkZTogJ1NlbGVjdCBEZWNhZGUnLFxuICAgICAgICAgICAgcHJldkRlY2FkZTogJ1ByZXZpb3VzIERlY2FkZScsXG4gICAgICAgICAgICBuZXh0RGVjYWRlOiAnTmV4dCBEZWNhZGUnLFxuICAgICAgICAgICAgcHJldkNlbnR1cnk6ICdQcmV2aW91cyBDZW50dXJ5JyxcbiAgICAgICAgICAgIG5leHRDZW50dXJ5OiAnTmV4dCBDZW50dXJ5JyxcbiAgICAgICAgICAgIHBpY2tIb3VyOiAnUGljayBIb3VyJyxcbiAgICAgICAgICAgIGluY3JlbWVudEhvdXI6ICdJbmNyZW1lbnQgSG91cicsXG4gICAgICAgICAgICBkZWNyZW1lbnRIb3VyOiAnRGVjcmVtZW50IEhvdXInLFxuICAgICAgICAgICAgcGlja01pbnV0ZTogJ1BpY2sgTWludXRlJyxcbiAgICAgICAgICAgIGluY3JlbWVudE1pbnV0ZTogJ0luY3JlbWVudCBNaW51dGUnLFxuICAgICAgICAgICAgZGVjcmVtZW50TWludXRlOiAnRGVjcmVtZW50IE1pbnV0ZScsXG4gICAgICAgICAgICBwaWNrU2Vjb25kOiAnUGljayBTZWNvbmQnLFxuICAgICAgICAgICAgaW5jcmVtZW50U2Vjb25kOiAnSW5jcmVtZW50IFNlY29uZCcsXG4gICAgICAgICAgICBkZWNyZW1lbnRTZWNvbmQ6ICdEZWNyZW1lbnQgU2Vjb25kJyxcbiAgICAgICAgICAgIHRvZ2dsZVBlcmlvZDogJ1RvZ2dsZSBQZXJpb2QnLFxuICAgICAgICAgICAgc2VsZWN0VGltZTogJ1NlbGVjdCBUaW1lJ1xuICAgICAgICB9LFxuICAgICAgICB1c2VTdHJpY3Q6IGZhbHNlLFxuICAgICAgICBzaWRlQnlTaWRlOiBmYWxzZSxcbiAgICAgICAgZGF5c09mV2Vla0Rpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgY2FsZW5kYXJXZWVrczogZmFsc2UsXG4gICAgICAgIHZpZXdNb2RlOiAnZGF5cycsXG4gICAgICAgIHRvb2xiYXJQbGFjZW1lbnQ6ICdkZWZhdWx0JyxcbiAgICAgICAgc2hvd1RvZGF5QnV0dG9uOiBmYWxzZSxcbiAgICAgICAgc2hvd0NsZWFyOiBmYWxzZSxcbiAgICAgICAgc2hvd0Nsb3NlOiBmYWxzZSxcbiAgICAgICAgd2lkZ2V0UG9zaXRpb25pbmc6IHtcbiAgICAgICAgICAgIGhvcml6b250YWw6ICdhdXRvJyxcbiAgICAgICAgICAgIHZlcnRpY2FsOiAnYXV0bydcbiAgICAgICAgfSxcbiAgICAgICAgd2lkZ2V0UGFyZW50OiBudWxsLFxuICAgICAgICBpZ25vcmVSZWFkb25seTogZmFsc2UsXG4gICAgICAgIGtlZXBPcGVuOiBmYWxzZSxcbiAgICAgICAgZm9jdXNPblNob3c6IHRydWUsXG4gICAgICAgIGlubGluZTogZmFsc2UsXG4gICAgICAgIGtlZXBJbnZhbGlkOiBmYWxzZSxcbiAgICAgICAgZGF0ZXBpY2tlcklucHV0OiAnLmRhdGVwaWNrZXJpbnB1dCcsXG4gICAgICAgIGtleUJpbmRzOiB7XG4gICAgICAgICAgICB1cDogZnVuY3Rpb24gKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGQgPSB0aGlzLmRhdGUoKSB8fCB0aGlzLmdldE1vbWVudCgpO1xuICAgICAgICAgICAgICAgIGlmICh3aWRnZXQuZmluZCgnLmRhdGVwaWNrZXInKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoZC5jbG9uZSgpLnN1YnRyYWN0KDcsICdkJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkLmNsb25lKCkuYWRkKHRoaXMuc3RlcHBpbmcoKSwgJ20nKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRvd246IGZ1bmN0aW9uICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZGF0ZSgpIHx8IHRoaXMuZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlcicpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkLmNsb25lKCkuYWRkKDcsICdkJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkLmNsb25lKCkuc3VidHJhY3QodGhpcy5zdGVwcGluZygpLCAnbScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2NvbnRyb2wgdXAnOiBmdW5jdGlvbiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZGF0ZSgpIHx8IHRoaXMuZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlcicpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkLmNsb25lKCkuc3VidHJhY3QoMSwgJ3knKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKGQuY2xvbmUoKS5hZGQoMSwgJ2gnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdjb250cm9sIGRvd24nOiBmdW5jdGlvbiAod2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZGF0ZSgpIHx8IHRoaXMuZ2V0TW9tZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHdpZGdldC5maW5kKCcuZGF0ZXBpY2tlcicpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkLmNsb25lKCkuYWRkKDEsICd5JykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkLmNsb25lKCkuc3VidHJhY3QoMSwgJ2gnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZnQ6IGZ1bmN0aW9uICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkID0gdGhpcy5kYXRlKCkgfHwgdGhpcy5nZXRNb21lbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAod2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyJykuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKGQuY2xvbmUoKS5zdWJ0cmFjdCgxLCAnZCcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmlnaHQ6IGZ1bmN0aW9uICh3aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkID0gdGhpcy5kYXRlKCkgfHwgdGhpcy5nZXRNb21lbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAod2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyJykuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKGQuY2xvbmUoKS5hZGQoMSwgJ2QnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2VVcDogZnVuY3Rpb24gKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGQgPSB0aGlzLmRhdGUoKSB8fCB0aGlzLmdldE1vbWVudCgpO1xuICAgICAgICAgICAgICAgIGlmICh3aWRnZXQuZmluZCgnLmRhdGVwaWNrZXInKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoZC5jbG9uZSgpLnN1YnRyYWN0KDEsICdNJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYWdlRG93bjogZnVuY3Rpb24gKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGQgPSB0aGlzLmRhdGUoKSB8fCB0aGlzLmdldE1vbWVudCgpO1xuICAgICAgICAgICAgICAgIGlmICh3aWRnZXQuZmluZCgnLmRhdGVwaWNrZXInKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoZC5jbG9uZSgpLmFkZCgxLCAnTScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlc2NhcGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvL3RhYjogZnVuY3Rpb24gKHdpZGdldCkgeyAvL3RoaXMgYnJlYWsgdGhlIGZsb3cgb2YgdGhlIGZvcm0uIGRpc2FibGluZyBmb3Igbm93XG4gICAgICAgICAgICAvLyAgICB2YXIgdG9nZ2xlID0gd2lkZ2V0LmZpbmQoJy5waWNrZXItc3dpdGNoIGFbZGF0YS1hY3Rpb249XCJ0b2dnbGVQaWNrZXJcIl0nKTtcbiAgICAgICAgICAgIC8vICAgIGlmKHRvZ2dsZS5sZW5ndGggPiAwKSB0b2dnbGUuY2xpY2soKTtcbiAgICAgICAgICAgIC8vfSxcbiAgICAgICAgICAgICdjb250cm9sIHNwYWNlJzogZnVuY3Rpb24gKHdpZGdldCkge1xuICAgICAgICAgICAgICAgIGlmICh3aWRnZXQuZmluZCgnLnRpbWVwaWNrZXInKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICAgICB3aWRnZXQuZmluZCgnLmJ0bltkYXRhLWFjdGlvbj1cInRvZ2dsZVBlcmlvZFwiXScpLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUodGhpcy5nZXRNb21lbnQoKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgYWxsb3dJbnB1dFRvZ2dsZTogZmFsc2UsXG4gICAgICAgIGRpc2FibGVkVGltZUludGVydmFsczogZmFsc2UsXG4gICAgICAgIGRpc2FibGVkSG91cnM6IGZhbHNlLFxuICAgICAgICBlbmFibGVkSG91cnM6IGZhbHNlLFxuICAgICAgICB2aWV3RGF0ZTogZmFsc2VcbiAgICB9O1xufSkpO1xuIiwiLy8gaHR0cDovL3NwaW4uanMub3JnLyN2Mi4zLjJcbiFmdW5jdGlvbihhLGIpe1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWIoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGIpOmEuU3Bpbm5lcj1iKCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBhKGEsYil7dmFyIGMsZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGF8fFwiZGl2XCIpO2ZvcihjIGluIGIpZFtjXT1iW2NdO3JldHVybiBkfWZ1bmN0aW9uIGIoYSl7Zm9yKHZhciBiPTEsYz1hcmd1bWVudHMubGVuZ3RoO2M+YjtiKyspYS5hcHBlbmRDaGlsZChhcmd1bWVudHNbYl0pO3JldHVybiBhfWZ1bmN0aW9uIGMoYSxiLGMsZCl7dmFyIGU9W1wib3BhY2l0eVwiLGIsfn4oMTAwKmEpLGMsZF0uam9pbihcIi1cIiksZj0uMDErYy9kKjEwMCxnPU1hdGgubWF4KDEtKDEtYSkvYiooMTAwLWYpLGEpLGg9ai5zdWJzdHJpbmcoMCxqLmluZGV4T2YoXCJBbmltYXRpb25cIikpLnRvTG93ZXJDYXNlKCksaT1oJiZcIi1cIitoK1wiLVwifHxcIlwiO3JldHVybiBtW2VdfHwoay5pbnNlcnRSdWxlKFwiQFwiK2krXCJrZXlmcmFtZXMgXCIrZStcInswJXtvcGFjaXR5OlwiK2crXCJ9XCIrZitcIiV7b3BhY2l0eTpcIithK1wifVwiKyhmKy4wMSkrXCIle29wYWNpdHk6MX1cIisoZitiKSUxMDArXCIle29wYWNpdHk6XCIrYStcIn0xMDAle29wYWNpdHk6XCIrZytcIn19XCIsay5jc3NSdWxlcy5sZW5ndGgpLG1bZV09MSksZX1mdW5jdGlvbiBkKGEsYil7dmFyIGMsZCxlPWEuc3R5bGU7aWYoYj1iLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Iuc2xpY2UoMSksdm9pZCAwIT09ZVtiXSlyZXR1cm4gYjtmb3IoZD0wO2Q8bC5sZW5ndGg7ZCsrKWlmKGM9bFtkXStiLHZvaWQgMCE9PWVbY10pcmV0dXJuIGN9ZnVuY3Rpb24gZShhLGIpe2Zvcih2YXIgYyBpbiBiKWEuc3R5bGVbZChhLGMpfHxjXT1iW2NdO3JldHVybiBhfWZ1bmN0aW9uIGYoYSl7Zm9yKHZhciBiPTE7Yjxhcmd1bWVudHMubGVuZ3RoO2IrKyl7dmFyIGM9YXJndW1lbnRzW2JdO2Zvcih2YXIgZCBpbiBjKXZvaWQgMD09PWFbZF0mJihhW2RdPWNbZF0pfXJldHVybiBhfWZ1bmN0aW9uIGcoYSxiKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYT9hOmFbYiVhLmxlbmd0aF19ZnVuY3Rpb24gaChhKXt0aGlzLm9wdHM9ZihhfHx7fSxoLmRlZmF1bHRzLG4pfWZ1bmN0aW9uIGkoKXtmdW5jdGlvbiBjKGIsYyl7cmV0dXJuIGEoXCI8XCIrYisnIHhtbG5zPVwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LmNvbTp2bWxcIiBjbGFzcz1cInNwaW4tdm1sXCI+JyxjKX1rLmFkZFJ1bGUoXCIuc3Bpbi12bWxcIixcImJlaGF2aW9yOnVybCgjZGVmYXVsdCNWTUwpXCIpLGgucHJvdG90eXBlLmxpbmVzPWZ1bmN0aW9uKGEsZCl7ZnVuY3Rpb24gZigpe3JldHVybiBlKGMoXCJncm91cFwiLHtjb29yZHNpemU6aytcIiBcIitrLGNvb3Jkb3JpZ2luOi1qK1wiIFwiKy1qfSkse3dpZHRoOmssaGVpZ2h0Omt9KX1mdW5jdGlvbiBoKGEsaCxpKXtiKG0sYihlKGYoKSx7cm90YXRpb246MzYwL2QubGluZXMqYStcImRlZ1wiLGxlZnQ6fn5ofSksYihlKGMoXCJyb3VuZHJlY3RcIix7YXJjc2l6ZTpkLmNvcm5lcnN9KSx7d2lkdGg6aixoZWlnaHQ6ZC5zY2FsZSpkLndpZHRoLGxlZnQ6ZC5zY2FsZSpkLnJhZGl1cyx0b3A6LWQuc2NhbGUqZC53aWR0aD4+MSxmaWx0ZXI6aX0pLGMoXCJmaWxsXCIse2NvbG9yOmcoZC5jb2xvcixhKSxvcGFjaXR5OmQub3BhY2l0eX0pLGMoXCJzdHJva2VcIix7b3BhY2l0eTowfSkpKSl9dmFyIGksaj1kLnNjYWxlKihkLmxlbmd0aCtkLndpZHRoKSxrPTIqZC5zY2FsZSpqLGw9LShkLndpZHRoK2QubGVuZ3RoKSpkLnNjYWxlKjIrXCJweFwiLG09ZShmKCkse3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6bCxsZWZ0Omx9KTtpZihkLnNoYWRvdylmb3IoaT0xO2k8PWQubGluZXM7aSsrKWgoaSwtMixcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5CbHVyKHBpeGVscmFkaXVzPTIsbWFrZXNoYWRvdz0xLHNoYWRvd29wYWNpdHk9LjMpXCIpO2ZvcihpPTE7aTw9ZC5saW5lcztpKyspaChpKTtyZXR1cm4gYihhLG0pfSxoLnByb3RvdHlwZS5vcGFjaXR5PWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEuZmlyc3RDaGlsZDtkPWQuc2hhZG93JiZkLmxpbmVzfHwwLGUmJmIrZDxlLmNoaWxkTm9kZXMubGVuZ3RoJiYoZT1lLmNoaWxkTm9kZXNbYitkXSxlPWUmJmUuZmlyc3RDaGlsZCxlPWUmJmUuZmlyc3RDaGlsZCxlJiYoZS5vcGFjaXR5PWMpKX19dmFyIGosayxsPVtcIndlYmtpdFwiLFwiTW96XCIsXCJtc1wiLFwiT1wiXSxtPXt9LG49e2xpbmVzOjEyLGxlbmd0aDo3LHdpZHRoOjUscmFkaXVzOjEwLHNjYWxlOjEsY29ybmVyczoxLGNvbG9yOlwiIzAwMFwiLG9wYWNpdHk6LjI1LHJvdGF0ZTowLGRpcmVjdGlvbjoxLHNwZWVkOjEsdHJhaWw6MTAwLGZwczoyMCx6SW5kZXg6MmU5LGNsYXNzTmFtZTpcInNwaW5uZXJcIix0b3A6XCI1MCVcIixsZWZ0OlwiNTAlXCIsc2hhZG93OiExLGh3YWNjZWw6ITEscG9zaXRpb246XCJhYnNvbHV0ZVwifTtpZihoLmRlZmF1bHRzPXt9LGYoaC5wcm90b3R5cGUse3NwaW46ZnVuY3Rpb24oYil7dGhpcy5zdG9wKCk7dmFyIGM9dGhpcyxkPWMub3B0cyxmPWMuZWw9YShudWxsLHtjbGFzc05hbWU6ZC5jbGFzc05hbWV9KTtpZihlKGYse3Bvc2l0aW9uOmQucG9zaXRpb24sd2lkdGg6MCx6SW5kZXg6ZC56SW5kZXgsbGVmdDpkLmxlZnQsdG9wOmQudG9wfSksYiYmYi5pbnNlcnRCZWZvcmUoZixiLmZpcnN0Q2hpbGR8fG51bGwpLGYuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwicHJvZ3Jlc3NiYXJcIiksYy5saW5lcyhmLGMub3B0cyksIWope3ZhciBnLGg9MCxpPShkLmxpbmVzLTEpKigxLWQuZGlyZWN0aW9uKS8yLGs9ZC5mcHMsbD1rL2Quc3BlZWQsbT0oMS1kLm9wYWNpdHkpLyhsKmQudHJhaWwvMTAwKSxuPWwvZC5saW5lczshZnVuY3Rpb24gbygpe2grKztmb3IodmFyIGE9MDthPGQubGluZXM7YSsrKWc9TWF0aC5tYXgoMS0oaCsoZC5saW5lcy1hKSpuKSVsKm0sZC5vcGFjaXR5KSxjLm9wYWNpdHkoZixhKmQuZGlyZWN0aW9uK2ksZyxkKTtjLnRpbWVvdXQ9Yy5lbCYmc2V0VGltZW91dChvLH5+KDFlMy9rKSl9KCl9cmV0dXJuIGN9LHN0b3A6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsO3JldHVybiBhJiYoY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCksYS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYSksdGhpcy5lbD12b2lkIDApLHRoaXN9LGxpbmVzOmZ1bmN0aW9uKGQsZil7ZnVuY3Rpb24gaChiLGMpe3JldHVybiBlKGEoKSx7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHdpZHRoOmYuc2NhbGUqKGYubGVuZ3RoK2Yud2lkdGgpK1wicHhcIixoZWlnaHQ6Zi5zY2FsZSpmLndpZHRoK1wicHhcIixiYWNrZ3JvdW5kOmIsYm94U2hhZG93OmMsdHJhbnNmb3JtT3JpZ2luOlwibGVmdFwiLHRyYW5zZm9ybTpcInJvdGF0ZShcIit+figzNjAvZi5saW5lcyprK2Yucm90YXRlKStcImRlZykgdHJhbnNsYXRlKFwiK2Yuc2NhbGUqZi5yYWRpdXMrXCJweCwwKVwiLGJvcmRlclJhZGl1czooZi5jb3JuZXJzKmYuc2NhbGUqZi53aWR0aD4+MSkrXCJweFwifSl9Zm9yKHZhciBpLGs9MCxsPShmLmxpbmVzLTEpKigxLWYuZGlyZWN0aW9uKS8yO2s8Zi5saW5lcztrKyspaT1lKGEoKSx7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDoxK34oZi5zY2FsZSpmLndpZHRoLzIpK1wicHhcIix0cmFuc2Zvcm06Zi5od2FjY2VsP1widHJhbnNsYXRlM2QoMCwwLDApXCI6XCJcIixvcGFjaXR5OmYub3BhY2l0eSxhbmltYXRpb246aiYmYyhmLm9wYWNpdHksZi50cmFpbCxsK2sqZi5kaXJlY3Rpb24sZi5saW5lcykrXCIgXCIrMS9mLnNwZWVkK1wicyBsaW5lYXIgaW5maW5pdGVcIn0pLGYuc2hhZG93JiZiKGksZShoKFwiIzAwMFwiLFwiMCAwIDRweCAjMDAwXCIpLHt0b3A6XCIycHhcIn0pKSxiKGQsYihpLGgoZyhmLmNvbG9yLGspLFwiMCAwIDFweCByZ2JhKDAsMCwwLC4xKVwiKSkpO3JldHVybiBkfSxvcGFjaXR5OmZ1bmN0aW9uKGEsYixjKXtiPGEuY2hpbGROb2Rlcy5sZW5ndGgmJihhLmNoaWxkTm9kZXNbYl0uc3R5bGUub3BhY2l0eT1jKX19KSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQpe2s9ZnVuY3Rpb24oKXt2YXIgYz1hKFwic3R5bGVcIix7dHlwZTpcInRleHQvY3NzXCJ9KTtyZXR1cm4gYihkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0sYyksYy5zaGVldHx8Yy5zdHlsZVNoZWV0fSgpO3ZhciBvPWUoYShcImdyb3VwXCIpLHtiZWhhdmlvcjpcInVybCgjZGVmYXVsdCNWTUwpXCJ9KTshZChvLFwidHJhbnNmb3JtXCIpJiZvLmFkaj9pKCk6aj1kKG8sXCJhbmltYXRpb25cIil9cmV0dXJuIGh9KTsiLCIvL2h0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2Nsb3Nlc3RcbmlmICh3aW5kb3cuRWxlbWVudCAmJiAhRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCkge1xuICAgIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPSBcbiAgICBmdW5jdGlvbihzKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGVsID0gdGhpcztcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaSA9IG1hdGNoZXMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKC0taSA+PSAwICYmIG1hdGNoZXMuaXRlbShpKSAhPT0gZWwpIHt9O1xuICAgICAgICB9IHdoaWxlICgoaSA8IDApICYmIChlbCA9IGVsLnBhcmVudEVsZW1lbnQpKTsgXG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9O1xufVxuXG5OdW1iZXIuaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIFxuICAgIGlzRmluaXRlKHZhbHVlKSAmJiBcbiAgICBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG59XG5cblxuLy9odHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvMTU3OTY3MVxuY29uc3QgcmVxdWVzdEFuaW1hdGlvbkZyYW1lUG9seWZpbGwgPSAoKCkgPT4ge1xuICAgIGxldCBjbG9jayA9IERhdGUubm93KCk7XG5cbiAgICByZXR1cm4gKGNhbGxiYWNrKSA9PiB7XG5cbiAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmIChjdXJyZW50VGltZSAtIGNsb2NrID4gMTYpIHtcbiAgICAgICAgICAgIGNsb2NrID0gY3VycmVudFRpbWU7XG4gICAgICAgICAgICBjYWxsYmFjayhjdXJyZW50VGltZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBwb2x5ZmlsbChjYWxsYmFjayk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xuXG53aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgICB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lUG9seWZpbGxcblxuaWYoICEgd2luZG93LkludGwgKSB7XG4gICAgcmVxdWlyZSgnaW50bCcpXG4gICAgcmVxdWlyZSgnaW50bC9sb2NhbGUtZGF0YS9qc29ucC9lbi5qcycpXG59XG5cbi8vaHR0cDovL3d3dy5qYXZhc2NyaXB0a2l0LmNvbS9kaHRtbHR1dG9ycy9zdGlja3ktaG92ZXItaXNzdWUtc29sdXRpb25zLnNodG1sXG5jb25zdCB0b3VjaHN1cHBvcnQgPSAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB8fCAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCkgfHwgKG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMClcbmlmICghdG91Y2hzdXBwb3J0KXsgLy8gYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdG91Y2hcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5vbi10b3VjaFwiKVxufVxuXG5yZXF1aXJlKCdzbW9vdGhzY3JvbGwtcG9seWZpbGwnKS5wb2x5ZmlsbCgpXG5cbm1vZHVsZS5leHBvcnRzID0gdHJ1ZVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKCB7XG5cbiAgICBFcnJvcjogcmVxdWlyZSgnLi4vLi4vbGliL015RXJyb3InKSxcblxuICAgIFJlc291cmNlOiByZXF1aXJlKCcuL3ZpZXdzL1Jlc291cmNlJyksXG5cbiAgICBWaWV3RmFjdG9yeTogcmVxdWlyZSgnLi9mYWN0b3J5L1ZpZXcnKSxcblxuICAgIFZpZXdzOiByZXF1aXJlKCcuLy5WaWV3TWFwJyksXG5cbiAgICBjYXBpdGFsaXplRmlyc3RMZXR0ZXI6IHN0cmluZyA9PiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSksXG5cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpXG5cbiAgICAgICAgd2luZG93Lm9ucG9wc3RhdGUgPSB0aGlzLmhhbmRsZS5iaW5kKHRoaXMpXG5cbiAgICAgICAgdGhpcy51c2VyID0gcmVxdWlyZSgnLi9tb2RlbHMvVXNlcicpXG5cbiAgICAgICAgdGhpcy51c2VyLm9uKCAnbG9nZ2VkSW4nLCAoKSA9PiB0aGlzLm9uTG9naW4oKSApXG5cbiAgICAgICAgdGhpcy51c2VyUHJvbWlzZSA9IG5ldyBQcm9taXNlKCAoIHJlc29sdmUsIHJlamVjdCApID0+IHRoaXMudXNlci5mZXRjaCgpLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKSApXG5cbiAgICAgICAgdGhpcy5mb290ZXIgPSB0aGlzLlZpZXdGYWN0b3J5LmNyZWF0ZSggJ2Zvb3RlcicsIHsgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmNvbnRlbnQsIG1ldGhvZDogJ2FmdGVyJyB9IH0gKVxuXG4gICAgICAgIHRoaXMudmlld3MgPSB7IH1cblxuICAgICAgICB0aGlzLmhhbmRsZSgpXG4gICAgfSxcblxuICAgIGhhbmRsZSgpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVyKCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKS5zbGljZSgxKSApXG4gICAgfSxcblxuICAgIGhhbmRsZUhlYWRlciggcmVzb3VyY2UgKSB7XG4gICAgICAgIGlmKCAvYWRtaW4vLnRlc3QocmVzb3VyY2UpICkge1xuICAgICAgICAgICAgaWYoIHRoaXMuYWRtaW5IZWFkZXIgKSB7IHRoaXMuYWRtaW5IZWFkZXIub25OYXZpZ2F0aW9uKCkgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZG1pbkhlYWRlciA9IHRoaXMuVmlld0ZhY3RvcnkuY3JlYXRlKCAnYWRtaW5IZWFkZXInLCB7IGluc2VydGlvbjogeyBlbDogdGhpcy5jb250ZW50LCBtZXRob2Q6ICdpbnNlcnRCZWZvcmUnIH0gfSApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbiggJ3NpZ25vdXQnLCAoKSA9PiB0aGlzLm9uU2lnbm91dCgpIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKCB0aGlzLmFkbWluSGVhZGVyICkgeyB0aGlzLmFkbWluSGVhZGVyLmhpZGUoKSB9XG4gICAgICAgICAgICBpZiggdGhpcy5oZWFkZXIgKSB7IHJldHVybiB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlciA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVmlld0ZhY3RvcnkuY3JlYXRlKCAnaGVhZGVyJywgeyBpbnNlcnRpb246IHsgZWw6IHRoaXMuY29udGVudCwgbWV0aG9kOiAnaW5zZXJ0QmVmb3JlJyB9IH0gKVxuICAgICAgICAgICAgICAgICAgICAub24oICduYXZpZ2F0ZScsIHRoaXMub25WaWV3TmF2aWdhdGUuYmluZCh0aGlzKSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFuZGxlRm9vdGVyKCByZXNvdXJjZSApIHtcbiAgICAgICAgdGhpcy5mb290ZXIuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCAnZmQtaGlkZGVuJywgL2FkbWluLy50ZXN0KCByZXNvdXJjZSApIClcbiAgICB9LFxuXG4gICAgaGFuZGxlciggcGF0aCApIHtcbiAgICAgICAgaWYoIHBhdGhbMF0gPT09ICdhZG1pbicgJiYgcGF0aFsxXSApIHJldHVybiB0aGlzLnJlc291cmNlSGFuZGxlciggcGF0aFsxXSApXG5cbiAgICAgICAgbGV0IG5hbWUgPSB0aGlzLnBhdGhUb1ZpZXcoIHBhdGhbMF0gKSxcbiAgICAgICAgICAgIHZpZXcgPSB0aGlzLlZpZXdzWyBuYW1lIF0gPyBwYXRoWzBdIDogJ2hvbWUnXG5cbiAgICAgICAgaWYoIHRoaXMucmVzb3VyY2VzWyBwYXRoWzBdIF0gKSB2aWV3ID0gcGF0aFswXVxuXG4gICAgICAgIHRoaXMuaGFuZGxlSGVhZGVyKCBwYXRoWzBdIClcbiAgICAgICAgdGhpcy5oYW5kbGVGb290ZXIoIHBhdGhbMF0gKVxuICAgICAgXG4gICAgICAgIHRoaXMudXNlclByb21pc2UudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMudXNlci5pZCAmJiAvYWRtaW4vLnRlc3QoIHBhdGhbMF0gKSApIHRoaXMuYWRtaW5IZWFkZXIub25Vc2VyKCB0aGlzLnVzZXIgKVxuXG4gICAgICAgICAgICBpZiggdmlldyA9PT0gdGhpcy5jdXJyZW50VmlldyApIHJldHVybiB0aGlzLnZpZXdzWyB2aWV3IF0ub25OYXZpZ2F0aW9uKCBwYXRoLnNsaWNlKDEpIClcblxuICAgICAgICAgICAgUHJvbWlzZS5hbGwoIE9iamVjdC5rZXlzKCB0aGlzLnZpZXdzICkubWFwKCB2aWV3ID0+IHRoaXMudmlld3NbIHZpZXcgXS5oaWRlKCkgKSApXG4gICAgICAgICAgICAudGhlbiggKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50VmlldyA9IHZpZXdcblxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLnZpZXdzWyB2aWV3IF0gKSByZXR1cm4gdGhpcy52aWV3c1sgdmlldyBdLm9uTmF2aWdhdGlvbiggcGF0aCApXG5cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzWyB2aWV3IF0gPSAhdGhpcy5yZXNvdXJjZXNbIHZpZXcgXVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuVmlld0ZhY3RvcnkuY3JlYXRlKCB2aWV3LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuY29udGVudCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgICAgICAgIC5vbiggJ25hdmlnYXRlJywgKCByb3V0ZSwgb3B0aW9ucyApID0+IHRoaXMubmF2aWdhdGUoIHJvdXRlLCBvcHRpb25zICkgKVxuICAgICAgICAgICAgICAgICAgICAgIC5vbiggJ2RlbGV0ZWQnLCAoKSA9PiBkZWxldGUgdGhpcy52aWV3c1sgdmlldyBdIClcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgKCB0aGlzLnJlc291cmNlc1sgdmlldyBdLnZpZXcgKSggT2JqZWN0LmFzc2lnbiggeyBmYWN0b3J5OiB0aGlzLlZpZXdGYWN0b3J5IH0sIHRoaXMucmVzb3VyY2VzWyB2aWV3IF0ub3B0aW9ucyApIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbiggJ25hdmlnYXRlJywgKCByb3V0ZSwgb3B0aW9ucyApID0+IHRoaXMubmF2aWdhdGUoIHJvdXRlLCBvcHRpb25zICkgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoICEvYWRtaW4vLnRlc3QoIHBhdGhbMF0gKSApIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gMFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgICAgIC5jYXRjaCggZXJyID0+IG5ldyB0aGlzLkVycm9yKGVycikgKVxuICAgIH0sXG5cbiAgICBuYXZpZ2F0ZSggbG9jYXRpb24sIG9wdGlvbnM9e30gKSB7XG4gICAgICAgIGlmKCBvcHRpb25zLnJlcGxhY2UgfHwgb3B0aW9ucy51cCApIHtcbiAgICAgICAgICAgIGxldCBwYXRoID0gYCR7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfWAuc3BsaXQoJy8nKVxuICAgICAgICAgICAgcGF0aC5wb3AoKVxuICAgICAgICAgICAgaWYoIG9wdGlvbnMucmVwbGFjZSApIHBhdGgucHVzaCggbG9jYXRpb24gKVxuICAgICAgICAgICAgbG9jYXRpb24gPSBwYXRoLmpvaW4oJy8nKVxuICAgICAgICB9IGVsc2UgaWYoIG9wdGlvbnMuYXBwZW5kICkgeyBsb2NhdGlvbiA9IGAke3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZX0vJHtsb2NhdGlvbn1gIH1cblxuICAgICAgICBpZiggbG9jYXRpb24gIT09IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSApIGhpc3RvcnkucHVzaFN0YXRlKCB7fSwgJycsIGxvY2F0aW9uIClcbiAgICAgICAgaWYoICFvcHRpb25zLnNpbGVudCApIHRoaXMuaGFuZGxlKClcbiAgICB9LFxuXG4gICAgb25Mb2dpbigpIHsgdGhpcy5vblVzZXIoIHRoaXMudXNlciApIH0sXG5cbiAgICBvblZpZXdOYXZpZ2F0ZSggcm91dGUgKSB7IHRoaXMubmF2aWdhdGUoIHJvdXRlLCB7IHRyaWdnZXI6IHRydWUgfSApIH0sXG5cbiAgICBvblNpZ25vdXQoKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLnZpZXdzICkuZm9yRWFjaCggbmFtZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdzWyBuYW1lIF0uZGVsZXRlKClcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnZpZXdzW25hbWVdIFxuICAgICAgICB9IClcbiAgICBcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZSggXCIvXCIgKVxuICAgIH0sXG5cbiAgICBvblVzZXIoIHVzZXIgKSB7XG4gICAgICAgIGlmKCB0aGlzLmFkbWluSGVhZGVyICkgdGhpcy5hZG1pbkhlYWRlci5vblVzZXIoIHRoaXMudXNlciApXG4gICAgfSxcblxuICAgIHBhdGhUb1ZpZXcoIHBhdGggKSB7XG4gICAgICAgIGNvbnN0IGh5cGhlblNwbGl0ID0gcGF0aC5zcGxpdCgnLScpXG4gICAgICAgIHJldHVybiBoeXBoZW5TcGxpdC5tYXAoIGl0ZW0gPT4gdGhpcy5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoIGl0ZW0gKSApLmpvaW4oJycpXG4gICAgfSxcbiAgICBcbiAgICByZXNvdXJjZUhhbmRsZXIoIHJlc291cmNlICkge1xuICAgICAgICB0aGlzLmhhbmRsZUhlYWRlciggYGFkbWluLyR7cmVzb3VyY2V9YCApXG4gICAgICAgIHRoaXMuaGFuZGxlRm9vdGVyKCBgYWRtaW4vJHtyZXNvdXJjZX1gIClcblxuICAgICAgICB0aGlzLnVzZXJQcm9taXNlLnRoZW4oICgpID0+IHtcblxuICAgICAgICAgICAgaWYoIHRoaXMudXNlci5pZCApIHRoaXMuYWRtaW5IZWFkZXIub25Vc2VyKCB0aGlzLnVzZXIgKVxuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyggdGhpcy52aWV3cyApLmZvckVhY2goIGtleSA9PiB0aGlzLnZpZXdzW2tleV0uaGlkZSgpIClcblxuICAgICAgICAgICAgaWYoIHRoaXMudmlld3MucmVzb3VyY2UgKSByZXR1cm4gdGhpcy52aWV3cy5yZXNvdXJjZS51cGRhdGUoIHJlc291cmNlIClcblxuICAgICAgICAgICAgdGhpcy52aWV3cy5yZXNvdXJjZSA9IG5ldyB0aGlzLlJlc291cmNlKCB7IHJlc291cmNlOiByZXNvdXJjZSB9IClcblxuICAgICAgICB9ICkuY2F0Y2goIGVyciA9PiBuZXcgdGhpcy5FcnJvcihlcnIpIClcbiAgICB9LFxuXG4gICAgcmVzb3VyY2VzOiB7XG4gICAgICAgIGFkbWluOiB7XG4gICAgICAgICAgICB2aWV3OiByZXF1aXJlKCcuL3ZpZXdzL0FkbWluJyksXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJhdG9yOiBcIm5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHJlcXVpcmUoJy4vbW9kZWxzL1Jlc291cmNlJyksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlOiByZXNwb25zZSA9PiByZXNwb25zZS5yZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmV0Y2g6IHsgaGVhZGVyczogeyBhY2NlcHQ6IFwiYXBwbGljYXRpb24vbGQranNvblwiIH0gfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInNpZ24tdXBcIjogeyB2aWV3OiByZXF1aXJlKCcuL3ZpZXdzL1NpZ251cCcpLCBvcHRpb25zOiB7IH0gfSxcbiAgICB9XG5cbn0gKVxuIiwiLy8gaHR0cDovL3NwaW4uanMub3JnLyN2Mi4zLjJcbiFmdW5jdGlvbihhLGIpe1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWIoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGIpOmEuU3Bpbm5lcj1iKCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBhKGEsYil7dmFyIGMsZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGF8fFwiZGl2XCIpO2ZvcihjIGluIGIpZFtjXT1iW2NdO3JldHVybiBkfWZ1bmN0aW9uIGIoYSl7Zm9yKHZhciBiPTEsYz1hcmd1bWVudHMubGVuZ3RoO2M+YjtiKyspYS5hcHBlbmRDaGlsZChhcmd1bWVudHNbYl0pO3JldHVybiBhfWZ1bmN0aW9uIGMoYSxiLGMsZCl7dmFyIGU9W1wib3BhY2l0eVwiLGIsfn4oMTAwKmEpLGMsZF0uam9pbihcIi1cIiksZj0uMDErYy9kKjEwMCxnPU1hdGgubWF4KDEtKDEtYSkvYiooMTAwLWYpLGEpLGg9ai5zdWJzdHJpbmcoMCxqLmluZGV4T2YoXCJBbmltYXRpb25cIikpLnRvTG93ZXJDYXNlKCksaT1oJiZcIi1cIitoK1wiLVwifHxcIlwiO3JldHVybiBtW2VdfHwoay5pbnNlcnRSdWxlKFwiQFwiK2krXCJrZXlmcmFtZXMgXCIrZStcInswJXtvcGFjaXR5OlwiK2crXCJ9XCIrZitcIiV7b3BhY2l0eTpcIithK1wifVwiKyhmKy4wMSkrXCIle29wYWNpdHk6MX1cIisoZitiKSUxMDArXCIle29wYWNpdHk6XCIrYStcIn0xMDAle29wYWNpdHk6XCIrZytcIn19XCIsay5jc3NSdWxlcy5sZW5ndGgpLG1bZV09MSksZX1mdW5jdGlvbiBkKGEsYil7dmFyIGMsZCxlPWEuc3R5bGU7aWYoYj1iLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Iuc2xpY2UoMSksdm9pZCAwIT09ZVtiXSlyZXR1cm4gYjtmb3IoZD0wO2Q8bC5sZW5ndGg7ZCsrKWlmKGM9bFtkXStiLHZvaWQgMCE9PWVbY10pcmV0dXJuIGN9ZnVuY3Rpb24gZShhLGIpe2Zvcih2YXIgYyBpbiBiKWEuc3R5bGVbZChhLGMpfHxjXT1iW2NdO3JldHVybiBhfWZ1bmN0aW9uIGYoYSl7Zm9yKHZhciBiPTE7Yjxhcmd1bWVudHMubGVuZ3RoO2IrKyl7dmFyIGM9YXJndW1lbnRzW2JdO2Zvcih2YXIgZCBpbiBjKXZvaWQgMD09PWFbZF0mJihhW2RdPWNbZF0pfXJldHVybiBhfWZ1bmN0aW9uIGcoYSxiKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYT9hOmFbYiVhLmxlbmd0aF19ZnVuY3Rpb24gaChhKXt0aGlzLm9wdHM9ZihhfHx7fSxoLmRlZmF1bHRzLG4pfWZ1bmN0aW9uIGkoKXtmdW5jdGlvbiBjKGIsYyl7cmV0dXJuIGEoXCI8XCIrYisnIHhtbG5zPVwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LmNvbTp2bWxcIiBjbGFzcz1cInNwaW4tdm1sXCI+JyxjKX1rLmFkZFJ1bGUoXCIuc3Bpbi12bWxcIixcImJlaGF2aW9yOnVybCgjZGVmYXVsdCNWTUwpXCIpLGgucHJvdG90eXBlLmxpbmVzPWZ1bmN0aW9uKGEsZCl7ZnVuY3Rpb24gZigpe3JldHVybiBlKGMoXCJncm91cFwiLHtjb29yZHNpemU6aytcIiBcIitrLGNvb3Jkb3JpZ2luOi1qK1wiIFwiKy1qfSkse3dpZHRoOmssaGVpZ2h0Omt9KX1mdW5jdGlvbiBoKGEsaCxpKXtiKG0sYihlKGYoKSx7cm90YXRpb246MzYwL2QubGluZXMqYStcImRlZ1wiLGxlZnQ6fn5ofSksYihlKGMoXCJyb3VuZHJlY3RcIix7YXJjc2l6ZTpkLmNvcm5lcnN9KSx7d2lkdGg6aixoZWlnaHQ6ZC5zY2FsZSpkLndpZHRoLGxlZnQ6ZC5zY2FsZSpkLnJhZGl1cyx0b3A6LWQuc2NhbGUqZC53aWR0aD4+MSxmaWx0ZXI6aX0pLGMoXCJmaWxsXCIse2NvbG9yOmcoZC5jb2xvcixhKSxvcGFjaXR5OmQub3BhY2l0eX0pLGMoXCJzdHJva2VcIix7b3BhY2l0eTowfSkpKSl9dmFyIGksaj1kLnNjYWxlKihkLmxlbmd0aCtkLndpZHRoKSxrPTIqZC5zY2FsZSpqLGw9LShkLndpZHRoK2QubGVuZ3RoKSpkLnNjYWxlKjIrXCJweFwiLG09ZShmKCkse3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6bCxsZWZ0Omx9KTtpZihkLnNoYWRvdylmb3IoaT0xO2k8PWQubGluZXM7aSsrKWgoaSwtMixcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5CbHVyKHBpeGVscmFkaXVzPTIsbWFrZXNoYWRvdz0xLHNoYWRvd29wYWNpdHk9LjMpXCIpO2ZvcihpPTE7aTw9ZC5saW5lcztpKyspaChpKTtyZXR1cm4gYihhLG0pfSxoLnByb3RvdHlwZS5vcGFjaXR5PWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEuZmlyc3RDaGlsZDtkPWQuc2hhZG93JiZkLmxpbmVzfHwwLGUmJmIrZDxlLmNoaWxkTm9kZXMubGVuZ3RoJiYoZT1lLmNoaWxkTm9kZXNbYitkXSxlPWUmJmUuZmlyc3RDaGlsZCxlPWUmJmUuZmlyc3RDaGlsZCxlJiYoZS5vcGFjaXR5PWMpKX19dmFyIGosayxsPVtcIndlYmtpdFwiLFwiTW96XCIsXCJtc1wiLFwiT1wiXSxtPXt9LG49e2xpbmVzOjEyLGxlbmd0aDo3LHdpZHRoOjUscmFkaXVzOjEwLHNjYWxlOjEsY29ybmVyczoxLGNvbG9yOlwiIzAwMFwiLG9wYWNpdHk6LjI1LHJvdGF0ZTowLGRpcmVjdGlvbjoxLHNwZWVkOjEsdHJhaWw6MTAwLGZwczoyMCx6SW5kZXg6MmU5LGNsYXNzTmFtZTpcInNwaW5uZXJcIix0b3A6XCI1MCVcIixsZWZ0OlwiNTAlXCIsc2hhZG93OiExLGh3YWNjZWw6ITEscG9zaXRpb246XCJhYnNvbHV0ZVwifTtpZihoLmRlZmF1bHRzPXt9LGYoaC5wcm90b3R5cGUse3NwaW46ZnVuY3Rpb24oYil7dGhpcy5zdG9wKCk7dmFyIGM9dGhpcyxkPWMub3B0cyxmPWMuZWw9YShudWxsLHtjbGFzc05hbWU6ZC5jbGFzc05hbWV9KTtpZihlKGYse3Bvc2l0aW9uOmQucG9zaXRpb24sd2lkdGg6MCx6SW5kZXg6ZC56SW5kZXgsbGVmdDpkLmxlZnQsdG9wOmQudG9wfSksYiYmYi5pbnNlcnRCZWZvcmUoZixiLmZpcnN0Q2hpbGR8fG51bGwpLGYuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwicHJvZ3Jlc3NiYXJcIiksYy5saW5lcyhmLGMub3B0cyksIWope3ZhciBnLGg9MCxpPShkLmxpbmVzLTEpKigxLWQuZGlyZWN0aW9uKS8yLGs9ZC5mcHMsbD1rL2Quc3BlZWQsbT0oMS1kLm9wYWNpdHkpLyhsKmQudHJhaWwvMTAwKSxuPWwvZC5saW5lczshZnVuY3Rpb24gbygpe2grKztmb3IodmFyIGE9MDthPGQubGluZXM7YSsrKWc9TWF0aC5tYXgoMS0oaCsoZC5saW5lcy1hKSpuKSVsKm0sZC5vcGFjaXR5KSxjLm9wYWNpdHkoZixhKmQuZGlyZWN0aW9uK2ksZyxkKTtjLnRpbWVvdXQ9Yy5lbCYmc2V0VGltZW91dChvLH5+KDFlMy9rKSl9KCl9cmV0dXJuIGN9LHN0b3A6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsO3JldHVybiBhJiYoY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCksYS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYSksdGhpcy5lbD12b2lkIDApLHRoaXN9LGxpbmVzOmZ1bmN0aW9uKGQsZil7ZnVuY3Rpb24gaChiLGMpe3JldHVybiBlKGEoKSx7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHdpZHRoOmYuc2NhbGUqKGYubGVuZ3RoK2Yud2lkdGgpK1wicHhcIixoZWlnaHQ6Zi5zY2FsZSpmLndpZHRoK1wicHhcIixiYWNrZ3JvdW5kOmIsYm94U2hhZG93OmMsdHJhbnNmb3JtT3JpZ2luOlwibGVmdFwiLHRyYW5zZm9ybTpcInJvdGF0ZShcIit+figzNjAvZi5saW5lcyprK2Yucm90YXRlKStcImRlZykgdHJhbnNsYXRlKFwiK2Yuc2NhbGUqZi5yYWRpdXMrXCJweCwwKVwiLGJvcmRlclJhZGl1czooZi5jb3JuZXJzKmYuc2NhbGUqZi53aWR0aD4+MSkrXCJweFwifSl9Zm9yKHZhciBpLGs9MCxsPShmLmxpbmVzLTEpKigxLWYuZGlyZWN0aW9uKS8yO2s8Zi5saW5lcztrKyspaT1lKGEoKSx7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDoxK34oZi5zY2FsZSpmLndpZHRoLzIpK1wicHhcIix0cmFuc2Zvcm06Zi5od2FjY2VsP1widHJhbnNsYXRlM2QoMCwwLDApXCI6XCJcIixvcGFjaXR5OmYub3BhY2l0eSxhbmltYXRpb246aiYmYyhmLm9wYWNpdHksZi50cmFpbCxsK2sqZi5kaXJlY3Rpb24sZi5saW5lcykrXCIgXCIrMS9mLnNwZWVkK1wicyBsaW5lYXIgaW5maW5pdGVcIn0pLGYuc2hhZG93JiZiKGksZShoKFwiIzAwMFwiLFwiMCAwIDRweCAjMDAwXCIpLHt0b3A6XCIycHhcIn0pKSxiKGQsYihpLGgoZyhmLmNvbG9yLGspLFwiMCAwIDFweCByZ2JhKDAsMCwwLC4xKVwiKSkpO3JldHVybiBkfSxvcGFjaXR5OmZ1bmN0aW9uKGEsYixjKXtiPGEuY2hpbGROb2Rlcy5sZW5ndGgmJihhLmNoaWxkTm9kZXNbYl0uc3R5bGUub3BhY2l0eT1jKX19KSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQpe2s9ZnVuY3Rpb24oKXt2YXIgYz1hKFwic3R5bGVcIix7dHlwZTpcInRleHQvY3NzXCJ9KTtyZXR1cm4gYihkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0sYyksYy5zaGVldHx8Yy5zdHlsZVNoZWV0fSgpO3ZhciBvPWUoYShcImdyb3VwXCIpLHtiZWhhdmlvcjpcInVybCgjZGVmYXVsdCNWTUwpXCJ9KTshZChvLFwidHJhbnNmb3JtXCIpJiZvLmFkaj9pKCk6aj1kKG8sXCJhbmltYXRpb25cIil9cmV0dXJuIGh9KTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVxcXCJ3XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLndpZHRoIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBkYXRhLXNvcnQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIj5cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L3RoPiAgICAgICAgICAgICAgICAgICAgXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8ZGl2IGRhdGEtanM9XFxcImNvbnRhaW5lclxcXCIgY2xhc3M9XFxcImNvbC1zbS0xMCBjb2wtc20tb2Zmc2V0LTFcXFwiPjxkaXYgY2xhc3M9XFxcInN1Yi1oZWFkaW5nXFxcIj5SZXNvdXJjZXM8L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3cgbXl0YWJsZVxcXCI+PHRhYmxlIGRhdGEtanM9XFxcInRhYmxlXFxcIj48dGhlYWQgZGF0YS1qcz1cXFwiaGVhZGVyXFxcIj48dHIgY2xhc3M9XFxcImNsZWFyZml4XFxcIj4gICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpZWxkcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgPC90cj48L3RoZWFkPjx0Ym9keSBkYXRhLWpzPVxcXCJib2R5XFxcIj48L3Rib2R5PjwvdGFibGU+PC9kaXY+PC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gKChzdGFjazEgPSBjb250YWluZXIubGFtYmRhKGRlcHRoMCwgZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGZvcm0gY2xhc3M9XFxcImZvcm0taG9yaXpvbnRhbCBjcmVhdGUtaW5zdGFuY2VcXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpZWxkcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2Zvcm0+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbiAgICBgPGRpdiBjbGFzcz0naW50cm8nPiR7cC5pbnRyb308L2Rpdj48cD4ke3AucGFyYWdyYXBofTwvcD5gIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IHt9LCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiPHNwYW4gY2xhc3M9XFxcImhlbHAtYmxvY2sgXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBkYXRhLWpzPVxcXCJmaWVsZEVycm9yXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuZXJyb3IgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmVycm9yIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJlcnJvclwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3NwYW4+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj48bGFiZWwgZm9yPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJjb2wtc20tMyBjb250cm9sLWxhYmVsXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubGFiZWwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJsYWJlbFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2xhYmVsPjxkaXYgY2xhc3M9XFxcImNvbC1zbS05XFxcIj48c2VsZWN0IGRhdGEtanM9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbCBcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnNbXCJjbGFzc1wiXSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDBbXCJjbGFzc1wiXSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiY2xhc3NcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj48b3B0aW9uIHZhbHVlPVxcXCJ0cnVlXFxcIj5UcnVlPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT1cXFwiZmFsc2VcXFwiPkZhbHNlPC9vcHRpb24+PC9zZWxlY3Q+PC9kaXY+PC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcblxucmV0dXJuIEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj48bGFiZWwgZm9yPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJjb2wtc20tMyBjb250cm9sLWxhYmVsXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubGFiZWwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJsYWJlbFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2xhYmVsPjxkaXYgY2xhc3M9XFxcImNvbC1zbS05XFxcIj48ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cCBkYXRlXFxcIj48aW5wdXQgZGF0YS1qcz1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVyc1tcImNsYXNzXCJdIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMFtcImNsYXNzXCJdIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJjbGFzc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcInRleHRcXFwiIGlkPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiLz48c3BhbiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYWRkb25cXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyXFxcIj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IHt9LCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+PGxhYmVsIGZvcj1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiY29sLXNtLTMgY29udHJvbC1sYWJlbFxcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmxhYmVsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibGFiZWxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9sYWJlbD48ZGl2IGNsYXNzPVxcXCJjb2wtc20tOVxcXCI+PHNlbGVjdCBkYXRhLWpzPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzW1wiY2xhc3NcIl0gfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwW1wiY2xhc3NcIl0gOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImNsYXNzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgaWQ9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+PG9wdGlvbiB2YWx1ZT1cXFwiMFxcXCI+U3VuZGF5PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT1cXFwiMVxcXCI+TW9uZGF5PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT1cXFwiMlxcXCI+VHVlc2RheTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9XFxcIjNcXFwiPldlZG5lc2RheTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9XFxcIjRcXFwiPlRodXJzZGF5PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT1cXFwiNVxcXCI+RnJpZGF5PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT1cXFwiNlxcXCI+U2F0dXJkYXk8L29wdGlvbj48L3NlbGVjdD48L2Rpdj48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSGFuZGxlYmFycykge1xuXG5yZXR1cm4gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiB7fSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgZmlsZS11cGxvYWRcXFwiPjxsYWJlbCBmb3I9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImNvbC1zbS0zIGNvbnRyb2wtbGFiZWxcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5sYWJlbCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImxhYmVsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvbGFiZWw+PGRpdiBjbGFzcz1cXFwiY29sLXNtLTlcXFwiPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBkYXRhLWpzPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJCdG5cXFwiIGlkPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCItYnRuXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IHVwbG9hZC13cmFwIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVyc1tcImNsYXNzXCJdIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMFtcImNsYXNzXCJdIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJjbGFzc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiPjxzcGFuPlVwbG9hZCBGaWxlPC9zcGFuPjxpbnB1dCB0eXBlPVxcXCJmaWxlXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBkYXRhLWpzPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIC8+PC9idXR0b24+PGltZyBjbGFzcz1cXFwicHJldmlld1xcXCIgaWQ9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIi1wcmV2aWV3XFxcIiBkYXRhLWpzPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJQcmV2aWV3XFxcIiAvPjwvZGl2PjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcInBhc3N3b3JkXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwidGV4dFwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj48bGFiZWwgZm9yPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJjb2wtc20tMyBjb250cm9sLWxhYmVsXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubGFiZWwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJsYWJlbFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2xhYmVsPjxkaXYgY2xhc3M9XFxcImNvbC1zbS05XFxcIj48aW5wdXQgZGF0YS1qcz1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVyc1tcImNsYXNzXCJdIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMFtcImNsYXNzXCJdIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJjbGFzc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcIlwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFzc3dvcmQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIlxcXCIgaWQ9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIvPjwvZGl2PjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IHt9LCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+PGxhYmVsIGZvcj1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiY29sLXNtLTMgY29udHJvbC1sYWJlbFxcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmxhYmVsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibGFiZWxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9sYWJlbD48ZGl2IGNsYXNzPVxcXCJjb2wtc20tOVxcXCI+PHRleHRhcmVhIGRhdGEtanM9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbCBcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnNbXCJjbGFzc1wiXSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDBbXCJjbGFzc1wiXSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiY2xhc3NcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiByb3dzPVxcXCI0XFxcIj48L3RleHRhcmVhPjwvZGl2PjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgIDx0ZCBjbGFzcz1cXFwid1wiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy53aWR0aCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAud2lkdGggOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIndpZHRoXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIiBcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGRhdGEtanM9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy52YWx1ZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudmFsdWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInZhbHVlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3RkPiAgICBcIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IHt9O1xuXG4gIHJldHVybiBcIjx0ciBkYXRhLWlkPVxcXCJcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImlkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgIGNsYXNzPVxcXCJjbGVhcmZpeFxcXCIgZGF0YS1qcz1cXFwiY29udGFpbmVyXFxcIj4gICAgXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC52YWx1ZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90cj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSGFuZGxlYmFycykge1xuXG5yZXR1cm4gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8ZGl2IGRhdGEtanM9XFxcImludmFsaWRMb2dpbkVycm9yXFxcIiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIiByb2xlPVxcXCJhbGVydFxcXCI+SW52YWxpZCBDcmVkZW50aWFsczwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPjxsYWJlbCBmb3I9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiY29sLXNtLTMgY29udHJvbC1sYWJlbFxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC9sYWJlbD48ZGl2IGNsYXNzPVxcXCJjb2wtc20tOVxcXCI+PGlucHV0IHR5cGU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50eXBlIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBkYXRhLWpzPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+PC9kaXY+PC9kaXY+ICAgICAgICBcIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjxkaXYgZGF0YS1qcz1cXFwiY29udGFpbmVyXFxcIiBjbGFzcz1cXFwiY29udGFpbmVyIGNvbC1zbS00IGNvbC1zbS1vZmZzZXQtNFxcXCI+PGRpdiBjbGFzcz1cXFwiaGVhZGluZ1xcXCI+TG9naW48L2Rpdj48Zm9ybSBjbGFzcz1cXFwiZm9ybS1ob3Jpem9udGFsXFxcIj4gICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDoge30sKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpZWxkcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9mb3JtPjxkaXYgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj48YnV0dG9uIGRhdGEtanM9XFxcImxvZ2luQnRuXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPkxvZyBJbjwvYnV0dG9uPjwvZGl2PjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxkaXYgZGF0YS1qcz1cXFwiY29udGFpbmVyXFxcIiBjbGFzcz1cXFwibW9kYWwgZmFkZVxcXCI+PGRpdiBjbGFzcz1cXFwibW9kYWwtZGlhbG9nXFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250ZW50XFxcIj48ZGl2IGRhdGEtanM9XFxcImhlYWRlclxcXCIgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+PGJ1dHRvbiBkYXRhLWpzPVxcXCJjbG9zZUJ0blxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiY2xvc2VcXFwiIGRhdGEtZGlzbWlzcz1cXFwibW9kYWxcXFwiIGFyaWEtbGFiZWw9XFxcIkNsb3NlXFxcIj48c3BhbiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj48aDQgY2xhc3M9XFxcIm1vZGFsLXRpdGxlXFxcIiBkYXRhLWpzPVxcXCJ0aXRsZVxcXCI+PC9oND48L2Rpdj48ZGl2IGRhdGEtanM9XFxcImJvZHlcXFwiIGNsYXNzPVxcXCJtb2RhbC1ib2R5XFxcIj48L2Rpdj48ZGl2IGRhdGEtanM9XFxcImZvb3RlclxcXCIgY2xhc3M9XFxcIm1vZGFsLWZvb3RlclxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIGRhdGEtanM9XFxcImNhbmNlbEJ0blxcXCIgZGF0YS1kaXNtaXNzPVxcXCJtb2RhbFxcXCI+Q2xvc2U8L2J1dHRvbj48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgZGF0YS1qcz1cXFwiY29uZmlybUJ0blxcXCI+U2F2ZTwvYnV0dG9uPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cXFwid1wiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC53aWR0aCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgZGF0YS1zb3J0PVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC90aD4gICAgICAgICAgICAgICAgICAgIFwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBkYXRhLWpzPVxcXCJjb250YWluZXJcXFwiIGNsYXNzPVxcXCJjb2wtc20tMTAgY29sLXNtLW9mZnNldC0xIHJlc291cmNlXFxcIj48ZGl2IGNsYXNzPVxcXCJzdWItaGVhZGluZ1xcXCI+PHNwYW4gZGF0YS1qcz1cXFwic3ViSGVhZGluZ1xcXCI+PC9zcGFuPjxidXR0b24gZGF0YS1qcz1cXFwiY3JlYXRlQnRuXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj48c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzXFxcIj48L3NwYW4+PC9idXR0b24+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93IG15dGFibGVcXFwiPjxidXR0b24gZGF0YS1qcz1cXFwiZWRpdEJ0blxcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeSBlZGl0LWJ0biBoaWRlXFxcIj48c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1wZW5jaWxcXFwiPjwvc3Bhbj48L2J1dHRvbj48YnV0dG9uIGRhdGEtanM9XFxcImRlbGV0ZUJ0blxcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeSBkZWxldGUtYnRuIGhpZGVcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZVxcXCI+PC9zcGFuPjwvYnV0dG9uPjx0YWJsZSBkYXRhLWpzPVxcXCJ0YWJsZVxcXCI+PHRoZWFkIGRhdGEtanM9XFxcImhlYWRlclxcXCI+PHRyIGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+ICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IHt9LChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5maWVsZHMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgICAgIDwvdHI+PC90aGVhZD48dGJvZHkgZGF0YS1qcz1cXFwiYm9keVxcXCI+PC90Ym9keT48L3RhYmxlPjwvZGl2PjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG5cbnJldHVybiBIYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgPHRkIGNsYXNzPVxcXCJ3XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLndpZHRoIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBkYXRhLWpzPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZhbHVlIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC90ZD4gICAgXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8dHIgY2xhc3M9XFxcImNsZWFyZml4XFxcIiBkYXRhLWpzPVxcXCJjb250YWluZXJcXFwiPiAgICBcIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IHt9LChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC52YWx1ZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90cj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSGFuZGxlYmFycykge1xuXG5yZXR1cm4gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8ZGl2IGRhdGEtanM9XFxcInNlcnZlckVycm9yXFxcIiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIiByb2xlPVxcXCJhbGVydFxcXCI+VW5rbm93biBlcnJvciwgcGxlYXNlIHRyeSBhZ2FpbiBvciBjb250YWN0IHVzIGF0IGFkbWluQHdlbGxwbGVkZ2UuY29tPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2IGRhdGEtanM9XCJjb250YWluZXJcIiBjbGFzcz1cIlNpZ251cFwiPlxuICAgIDxoMT5TaWduIFVwPC9oMT5cbiAgICA8aDIgZGF0YS1qcz1cImludHJvXCI+V2VsY29tZSB0byBvdXIgQ1NBIFNpZ24gVXAgUGFnZTwvaDI+XG4gICAgPHNlY3Rpb24+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cIndhbGt0aHJvdWdoXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJuYXYtYXJyb3dzXCI+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJsZWZ0QnRuXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLW1lbnUtbGVmdFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3Bhbj5CYWNrPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJyaWdodEJ0blwiPlxuICAgICAgICAgICAgICAgIDxzcGFuPk5leHQ8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLW1lbnUtcmlnaHRcIj48L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuPC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXYgY2xhc3M9XCJEYXRlU2VsZWN0aW9uXCIgZGF0YS1qcz1cImNvbnRhaW5lclwiPlxuICAgIDxkaXY+Tm90IGdvaW5nIHRvIGJlIGFyb3VuZD88L2Rpdj5cbiAgICA8ZGl2PlBsZWFzZSBjaG9vc2UgYW55IGRhdGVzIGZvciB3aGljaCB5b3Ugd2lsbCBub3QgYmUgYXZhaWxhYmxlIHRvIHJlY2VpdmUgb3IgcGljayB1cCB5b3VyIHNoYXJlLjwvZGl2PlxuICAgIDx1bCBkYXRhLWpzPVwic2hhcmVzXCI+PC91bD5cbjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2IGNsYXNzPVwiRGVsaXZlcnlcIiBkYXRhLWpzPVwiY29udGFpbmVyXCI+XG4gICAgPHA+UGxlYXNlIHNlbGVjdCBhIGRlbGl2ZXJ5IG9wdGlvbiBmb3IgeW91ciBzaGFyZShzKS48L3A+XG4gICAgPHVsIGRhdGEtanM9XCJzaGFyZXNcIj48L3VsPlxuPC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxsaSBjbGFzcz1cImRlbGl2ZXJ5LW9wdGlvblwiIGRhdGEtaWQ9XCIke3AuaWR9XCIgZGF0YS1qcz1cImNvbnRhaW5lclwiPlxuICAgIDxkaXY+JHtwLmxhYmVsfTwvZGl2PlxuICAgIDxkaXYgZGF0YS1qcz1cImRlbGl2ZXJ5UHJpY2VcIj4ke3AucHJpY2V9IC8gd2Vlazwvc3Bhbj48L2Rpdj5cbjwvbGk+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxsaSBkYXRhLWpzPVwiY29udGFpbmVyXCIgY2xhc3M9XCJkZWxpdmVyeS1vcHRpb25zXCI+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNoYXJlLWxhYmVsXCI+XG4gICAgICAgICAgICA8ZGl2PiR7cC5sYWJlbH08L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHNwYW4+JHtwLmh1bWFuU3RhcnRkYXRlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4tPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuPiR7cC5odW1hbkVuZGRhdGV9PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PiR7cC5kdXJhdGlvbn0gd2Vla3M8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJvcHRpb25zXCIgY2xhc3M9XCJvcHRpb25zXCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJmZWVkYmFja1wiIGNsYXNzPVwiZmVlZGJhY2stbWVzc2FnZXNcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBkYXRhLWpzPVwiZHJvcG9mZnNcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZXJyb3JcIj5QbGVhc2Ugc2VsZWN0IGEgdmFsaWQgb3B0aW9uLjwvZGl2PlxuPC9saT5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdiBkYXRhLWpzPVwiY29udGFpbmVyXCIgY2xhc3M9XCJkcm9wb2ZmXCI+XG4gICAgPGRpdj4ke3AubGFiZWx9PC9kaXY+XG4gICAgPGRpdj4ke3AudmVudWUgfHwgJyd9PC9kaXY+XG4gICAgPGRpdj4ke3Auc3RyZWV0fTwvZGl2PlxuICAgIDxkaXY+JHtwLmNpdHlTdGF0ZVppcH08L2Rpdj5cbiAgICA8ZGl2PiR7cC5kYXlPZldlZWt9IDogJHtwLnN0YXJ0dGltZX0gLSAke3AuZW5kdGltZX08L2Rpdj5cbjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4gYDxkaXYgY2xhc3M9XCJkcm9wb2Zmc1wiIGRhdGEtanM9XCJjb250YWluZXJcIj48L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IGA8ZGl2Pk9uLWZhcm0gcGlja3VwIGF2YWlsYWJsZSAke3AuZGF5T2ZXZWVrfSAke3Auc3RhcnR0aW1lfSAtICR7cC5lbmR0aW1lfTwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4gYDxkaXY+SG9tZSBkZWxpdmVyeSBhdmFpbGFibGUgJHtwLmRheU9mV2Vla30gJHtwLnN0YXJ0dGltZX0gLSAke3AuZW5kdGltZX08L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGxpIGRhdGEtanM9XCJjb250YWluZXJcIiBjbGFzcz1cInBheW1lbnQtb3B0aW9uXCI+XG4gICAgPGRpdj4ke3AubGFiZWx9PC9kaXY+XG4gICAgPGRpdj4ke3Aubm90ZX08L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwibWV0aG9kLXRvdGFsXCI+PC9kaXY+ICAgIFxuPC9saT5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4gYDx1bCBjbGFzcz1cInBheW1lbnQtb3B0aW9uc1wiIGRhdGEtanM9XCJjb250YWluZXJcIj48L3VsPmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2IGRhdGEtanM9XCJjb250YWluZXJcIiBjbGFzcz1cInBpY2t1cC1kYXRlICR7cC5zZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAnJ30gJHtwLnVuc2VsZWN0YWJsZSA/ICd1bnNlbGVjdGFibGUnIDogJyd9XCI+XG4gICAgPGRpdj4ke3AuZGF5T2ZXZWVrfTwvZGl2PlxuICAgIDxkaXY+JHtwLm1vbnRofTwvZGl2PlxuICAgIDxkaXY+JHtwLmRheU9mTW9udGh9PC9kaXY+XG48L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGxpIGRhdGEtanM9XCJjb250YWluZXJcIiBjbGFzcz1cInNoYXJlLWRhdGVzXCI+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNoYXJlLWxhYmVsXCI+XG4gICAgICAgICAgICA8ZGl2PiR7cC5sYWJlbH08L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHNwYW4+JHtwLmh1bWFuU3RhcnRkYXRlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4tPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuPiR7cC5odW1hbkVuZGRhdGV9PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PiR7cC5kdXJhdGlvbn0gd2Vla3M8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cImRhdGVzXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImVycm9yXCI+UGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgZGF0ZSB0byByZWNlaXZlIGEgc2hhcmUuPC9kaXY+XG48L2xpPmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8bGkgZGF0YS1qcz1cImNvbnRhaW5lclwiIGNsYXNzPVwic2hhcmVcIiBkYXRhLWlkPVwiJHtwLmlkfVwiPlxuICAgIDxkaXY+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cInNoYXJlQm94XCI+PC9kaXY+XG4gICAgICAgIDxkaXY+JHtwLmRlc2NyaXB0aW9ufTwvZGl2PlxuICAgIDwvZGl2PlxuPC9saT5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gcC5vcHRpb25zLm1hcCggb3B0aW9uID0+IGA8b3B0aW9uIHZhbHVlPVwiJHtvcHRpb24uaWR9XCI+JHtvcHRpb24ubGFiZWx9PC9vcHRpb24+YCApLmpvaW4oJycpLFxuICAgICAgICBkZXNjcmlwdGlvbiA9IHAuZGVzY3JpcHRpb24gPyBgPHNwYW4gZGF0YS1qcz1cIm9wdGlvbkljb25cIiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24taW5mby1zaWduXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPmAgOiBgYFxuXG5yZXR1cm4gYGAgK1xuYDxkaXYgZGF0YS1qcz1cImNvbnRhaW5lclwiIGNsYXNzPVwic2hhcmUtb3B0aW9uXCI+XG4gICAgPGRpdiBjbGFzcz1cIm9wdGlvbi10aXRsZVwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPHNwYW4+JHtwLmxhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgICR7ZGVzY3JpcHRpb259XG4gICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8c2VsZWN0IGRhdGEtanM9XCJpbnB1dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG4gICAgICAgICAgICAgICAgJHtvcHRpb25zfVxuICAgICAgICAgICAgPC9zZWxlY3Q+ICAgIFxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidG90YWxcIj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwidG90YWxcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2IGNsYXNzPVwiU2hhcmVPcHRpb25zXCIgZGF0YS1qcz1cImNvbnRhaW5lclwiPlxuICAgIDxwPlBsZWFzZSBtYWtlIHNlbGVjdGlvbnMgdG8gY3VzdG9taXplIHlvdXIgYm94PC9wPlxuICAgIDx1bCBkYXRhLWpzPVwic2hhcmVzXCI+PC91bD5cbjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2IGNsYXNzPVwiU2hhcmVzXCIgZGF0YS1qcz1cImNvbnRhaW5lclwiPlxuICAgIDxwPkFzIGEgbWVtYmVyIGluIG91ciBDU0EgcHJvZ3JhbSwgeW91IHdpbGwgcmVjZWl2ZSBhIHdlZWtseSBib3ggb2YgZnJlc2gtcGlja2VkLCBjaGVtaWNhbC1mcmVlIHByb2R1Y2UgYWxsIGdyb3duIGF0IFBhdGNod29yayBHYXJkZW5zLCByaWdodCBoZXJlIGluIHRoZSBNaWFtaSBWYWxsZXkuPC9wPlxuICAgIDxwPklmIHlvdeKAmXJlIG5vdCBxdWl0ZSBzdXJlIHlvdeKAmXJlIHJlYWR5IGZvciBhIENTQSwgY2hlY2sgb3V0IG91ciA8c3BhbiBkYXRhLWpzPVwiY3NhSW5mb0J0blwiIGNsYXNzPVwibGlua1wiPkNTQSBQcm9ncmFtPC9zcGFuPiBwYWdlIGZvciBtb3JlIGluZm9ybWF0aW9uPC9wPlxuICAgIDxoMj5QbGVhc2Ugc2VsZWN0IHdoaWNoIHNlYXNvbihzKSB5b3Ugd291bGQgbGlrZSB0byBqb2luIHVzPC9oMj5cbiAgICA8dWwgZGF0YS1qcz1cInNoYXJlc1wiPjwvdWw+XG4gICAgPGRpdiBjbGFzcz1cImVycm9yXCI+UGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgc2hhcmUuPC9kaXY+XG48L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGxpIGRhdGEtanM9XCJjb250YWluZXJcIj5cbiAgICA8ZGl2IGRhdGEtanM9XCJyb3dcIiBjbGFzcz1cInNpbmdsZS1zaGFyZVwiPlxuICAgICAgICA8ZGl2IGRhdGEtanM9XCJzaGFyZUJveFwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGRhdGEtanM9XCJvcHRpb25zXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdj48c3Bhbj5TaGFyZSBUb3RhbDogPC9zcGFuPjxzcGFuIGRhdGEtanM9XCJ0b3RhbFwiPjwvc3Bhbj48L2Rpdj5cbjwvbGk+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiB7XG5cbmNvbnN0IHNoYXJlcyA9IHAuc2hhcmVzLm1hcCggc2hhcmUgPT4ge1xuXG4gICAgY29uc3Qgc2VsZWN0ZWRPcHRpb25zID0gc2hhcmUuc2VsZWN0ZWRPcHRpb25zLm1hcCggb3B0ID0+XG4gICAgICAgIGA8ZGl2IGNsYXNzPVwiaXRlbS1yb3dcIj5cbiAgICAgICAgICAgIDxkaXY+JHtvcHQub3B0aW9uTmFtZX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHNwYW4+JHtvcHQuc2VsZWN0ZWRPcHRpb25MYWJlbH08L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4+JHtwLnVuaXQgfHwgJyd9PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpY2VcIj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4ke29wdC5wcmljZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4+cGVyIHdlZWs8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+YFxuICAgICkuam9pbignJylcblxuICAgIGNvbnN0IGdyb3VwZHJvcG9mZiA9IHNoYXJlLnNlbGVjdGVkRGVsaXZlcnkuZ3JvdXBkcm9wb2ZmXG4gICAgICAgID8gYDxkaXYgY2xhc3M9XCJpdGVtLXJvd1wiPlxuICAgICAgICAgICAgPGRpdj5Ecm9wLW9mZiBMb2NhdGlvbjwvZGl2PlxuICAgICAgICAgICAgPGRpdj4ke3NoYXJlLnNlbGVjdGVkRGVsaXZlcnkuZ3JvdXBkcm9wb2ZmfTwvZGl2PlxuICAgICAgICA8L2Rpdj5gXG4gICAgICAgIDogYGBcblxuICAgIGNvbnN0IHNraXBEYXlzID0gc2hhcmUuc2tpcERheXNcbiAgICAgICAgPyBgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLXRpdGxlXCI+RGF0ZXMgWW91IFdpbGwgTm90IFBpY2t1cDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBpY2t1cC1kYXRlc1wiPiR7c2hhcmUuc2tpcERheXMuam9pbignJyl9PC9kaXY+XG4gICAgICAgIDwvZGl2PmBcbiAgICAgICAgOiBgYFxuXG4gICAgcmV0dXJuIGBgICtcbiAgICBgPGRpdiBjbGFzcz1cInNoYXJlLXN1bW1hcnlcIj5cbiAgICAgICAgPGRpdj4ke3NoYXJlLnNoYXJlQm94fTwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNlY3Rpb24tdGl0bGVcIj5TaGFyZSBPcHRpb25zPC9kaXY+XG4gICAgICAgICAgICAke3NlbGVjdGVkT3B0aW9uc31cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi10aXRsZVwiPkRlbGl2ZXJ5PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1yb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2Pk1ldGhvZDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+JHtzaGFyZS5zZWxlY3RlZERlbGl2ZXJ5LmRlbGl2ZXJ5VHlwZX08L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpY2VcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtzaGFyZS5zZWxlY3RlZERlbGl2ZXJ5LndlZWtseUNvc3R9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5wZXIgd2Vlazwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gIFxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAke2dyb3VwZHJvcG9mZn1cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLXJvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXY+QWRkcmVzczwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+JHtzaGFyZS5zZWxlY3RlZERlbGl2ZXJ5LmFkZHJlc3N9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLXJvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXY+UGljay11cCBIb3VyczwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPiR7c2hhcmUuc2VsZWN0ZWREZWxpdmVyeS5kYXlPZldlZWt9IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtzaGFyZS5zZWxlY3RlZERlbGl2ZXJ5LnN0YXJ0dGltZX0gLSAke3NoYXJlLnNlbGVjdGVkRGVsaXZlcnkuZW5kdGltZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi10aXRsZVwiPkRhdGVzIFNlbGVjdGVkIGZvciBEZWxpdmVyeTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW0tcm93XCI+XG4gICAgICAgICAgICAgICAgPGRpdj5OdW1iZXIgb2Ygd2Vla3Mgc2VsZWN0ZWQ8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PiR7c2hhcmUud2Vla3NTZWxlY3RlZH08L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBpY2t1cC1kYXRlc1wiPlxuICAgICAgICAgICAgICAgICR7c2hhcmUuc2VsZWN0ZWREYXRlcy5qb2luKCcnKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgJHtza2lwRGF5c31cbiAgICAgICAgPGRpdiBjbGFzcz1cInNoYXJlLXRvdGFsXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi10aXRsZVwiPlNoYXJlIFRvdGFsPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+V2Vla2x5IFByaWNlIDo8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PiR7c2hhcmUud2Vla2x5UHJpY2V9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5OdW1iZXIgb2YgV2Vla3MgOjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+JHtzaGFyZS53ZWVrc1NlbGVjdGVkfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+U2hhcmUgVG90YWwgOjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+JHtzaGFyZS50b3RhbH08L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gXG59ICkuam9pbignJylcblxucmV0dXJuIGBgICtcbmA8ZGl2IGRhdGEtanM9XCJjb250YWluZXJcIiBjbGFzcz1cIlN1bW1hcnkgJHtwLmNvbnRhaW5lckNsYXNzfVwiPlxuICAgIDxkaXYgY2xhc3M9XCJzdW1tYXJpZXNcIj5cbiAgICAgICAgJHtzaGFyZXN9XG4gICAgPC9kaXY+XG4gICAgPGRpdiBkYXRhLWpzPVwiZ3JhbmRUb3RhbFwiIGNsYXNzPVwiZ3JhbmQtdG90YWxcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicGF5bWVudFwiPiAgICBcbiAgICAgICAgPGgyPlNlbGVjdCBhIG1ldGhvZCBvZiBwYXltZW50PC9oMj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwicGF5bWVudE9wdGlvbnNcIj48L2Rpdj5cbiAgICAgICAgPGZvcm0gZGF0YS1qcz1cInBheW1lbnRGb3JtXCIgY2xhc3M9XCJoaWRlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3JlZGl0LWNhcmQtaW5mb1wiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWwgbnVtYmVyXCI+Q2FyZCBOdW1iZXI8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgZGF0YS1qcz1cIm51bWJlclwiIGlkPVwibnVtYmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGZvcm0tY29udHJvbC1mZWVkYmFjayBoaWRlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+VmlzYSwgTWFzdGVyQ2FyZCwgQW1lcmljYW4gRXhwcmVzcywgSkNCLCBEaXNjb3ZlciwgYW5kIERpbmVycyBDbHViIGFyZSBhY2NlcHRlZDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZXhwaXJhdGlvblwiPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj5FeHAgTW9udGg8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGRhdGEtanM9XCJleHBfbW9udGhcIiBtYXhsZW5ndGg9XCIyXCIgc2l6ZT1cIjNcIiBwbGFjZWhvbGRlcj1cIm1tXCIgaWQ9XCJleHBfbW9udGhcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGZvcm0tY29udHJvbC1mZWVkYmFjayBoaWRlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+RXhwIFllYXI8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGRhdGEtanM9XCJleHBfeWVhclwiIG1heGxlbmd0aD1cIjRcIiBzaXplPVwiNFwiIHBsYWNlaG9sZGVyPVwieXl5eVwiIGlkPVwiZXhwX3llYXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGZvcm0tY29udHJvbC1mZWVkYmFjayBoaWRlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+Q1ZDPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3ZjXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBkYXRhLWpzPVwiY3ZjXCIgbWF4bGVuZ3RoPVwiNFwiIHNpemU9XCI0XCIgaWQ9XCJjdmNcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZm9ybS1jb250cm9sLWZlZWRiYWNrIGhpZGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXJvd1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLWpzPVwic2lnbnVwQnRuXCIgY2xhc3M9XCJkaXNhYmxlZFwiPkJlY29tZSBhIE1lbWJlciE8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L2Rpdj5gXG59IiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdj5cbiAgICA8ZGl2PkJlY2F1c2UgeW91IGhhdmUgc2VsZWN0ZWQgaG9tZSBkZWxpdmVyeSwgYW5kIHlvdXIgYWRkcmVzcyBjb3VsZCBub3QgYmUgdmFsaWRhdGVkIGF1dG9tYXRpY2FsbHksIHdlIHdvdWxkIGxpa2UgeW91IHRvIHZlcmlmeSB5b3VyIGFkZHJlc3MgYW5kIHppcCBjb2RlPC9kaXY+XG4gICAgPGZvcm0gY2xhc3M9XCJmb3JtLWhvcml6b250YWxcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1zbS0zIGNvbnRyb2wtbGFiZWxcIj5BZGRyZXNzPC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOVwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJ2ZXJpZmllZEFkZHJlc3NcIiB2YWx1ZT1cIiR7cC5hZGRyZXNzfVwiPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwiemlwQ29kZUZvcm1Hcm91cFwiIGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLXNtLTMgY29udHJvbC1sYWJlbFwiPlppcCBDb2RlPC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOVwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJ2ZXJpZmllZFppcENvZGVcIiB2YWx1ZT1cIiR7cC56aXBDb2RlfVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwiemlwQ29kZUhlbHBCbG9ja1wiIGNsYXNzPVwiaGVscC1ibG9jayBoaWRlXCI+SW52YWxpZCBaaXAgQ29kZSBmb3IgSG9tZSBEZWxpdmVyeTwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG48L2Rpdj5gIiwiY29uc3QgQ3VzdG9tQ29udGVudCA9IHJlcXVpcmUoJy4vdXRpbC9DdXN0b21Db250ZW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwgQ3VzdG9tQ29udGVudCwge1xuXG4gICAgdGFibGVzOiBbIFxuICAgICAgICB7IG5hbWU6ICdTdGFmZicsIGVsOiAnc3RhZmYnLCB0ZW1wbGF0ZTogJ3N0YWZmUHJvZmlsZScgfVxuICAgIF0sXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgc3RhZmZQcm9maWxlOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9TdGFmZlByb2ZpbGUnKVxuICAgIH1cblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBQaWthZGF5OiByZXF1aXJlKCdwaWthZGF5JyksXG5cbiAgICBWaWV3czoge1xuICAgICAgICBidXR0b25GbG93KCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgbW9kZWw6IE9iamVjdC5jcmVhdGUoIHRoaXMuTW9kZWwgKS5jb25zdHJ1Y3Rvcigge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogWyB7IG5hbWU6ICdhZGRUcmFuc2FjdGlvbicsIGNsYXNzOiAnc2F2ZS1idG4nLCB0ZXh0OiAnQWRkIFRyYW5zYWN0aW9uJywgbmV4dFN0YXRlOiAnY29uZmlybScgfSBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybTogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ2NvbmZpcm1BZGQnLCBjbGFzczogJ3NhdmUtYnRuJywgdGV4dDogJ0FyZSB5b3UgU3VyZT8nLCBlbWl0OiB0cnVlLCBuZXh0U3RhdGU6ICdzdGFydCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdjYW5jZWwnLCBjbGFzczogJ3Jlc2V0LWJ0bicsIG5leHRTdGF0ZTogJ3N0YXJ0JywgdGV4dDogJ0NhbmNlbCcsIGVtaXQ6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYWRkVHJhbnNhY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnBvc3QoIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICB7IG1lbWJlclNoYXJlSWQ6IHRoaXMubWVtYmVyU2hhcmVJZCB9LFxuICAgICAgICAgICAgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLnJlZHVjZSggKCBtZW1vLCBhdHRyICkgPT5cbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKCBtZW1vLCB7IFsgYXR0ciBdOlxuICAgICAgICAgICAgICAgICAgICBhdHRyID09PSAnY3JlYXRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5Nb21lbnQoIHRoaXMuZWxzW2F0dHJdLnZhbHVlLCAnTU1NIEQsIFlZWVknICkuZm9ybWF0KCdZWVlZLU1NLUREJykgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZWxzW2F0dHJdLnZhbHVlXG4gICAgICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgICAgIHsgfVxuICAgICAgICAgICAgKSBcbiAgICAgICAgKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnc3VjY2VzcycsICdUcmFuc2FjdGlvbiBhZGRlZCEnICkgKVxuICAgICAgICAuY2F0Y2goIGUgPT4geyB0aGlzLkVycm9yKGUpOyB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnZXJyb3InLCAnRXJyb3IgYWRkaW5nIHRyYW5zYWN0aW9uJyApIH0gKVxuICAgIH0sXG5cbiAgICBvbkFkZEJsdXIoZSkge1xuICAgICAgICBpc05hTiggcGFyc2VGbG9hdCggdGhpcy5lbHMudmFsdWUudmFsdWUgKSApXG4gICAgICAgICAgICA/IHRoaXMuZWxzLmZvcm0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICAgICAgICAgIDogdGhpcy52aWV3cy5idXR0b25GbG93LmVuYWJsZSgpXG4gICAgfSxcblxuICAgIG9uQWRkRm9jdXMoZSkge1xuICAgICAgICB0aGlzLmVscy5mb3JtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgfSxcblxuICAgIG9uQ2FuY2VsKCkge1xuICAgICAgICB0aGlzLnJlc2V0KClcbiAgICAgICAgdGhpcy52aWV3cy5idXR0b25GbG93LmRpc2FibGUoKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMuZm9yRWFjaCggYXR0ciA9PiB7XG4gICAgICAgICAgICB0aGlzLmVsc1sgYXR0ciBdLmFkZEV2ZW50TGlzdGVuZXIoICdmb2N1cycsIGUgPT4gdGhpcy5vbkFkZEZvY3VzKGUpIClcbiAgICAgICAgICAgIHRoaXMuZWxzWyBhdHRyIF0uYWRkRXZlbnRMaXN0ZW5lciggJ2JsdXInLCBlID0+IHRoaXMub25BZGRCbHVyKGUpIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5jcmVhdGVkID0gbmV3IHRoaXMuUGlrYWRheSggeyBmaWVsZDogdGhpcy5lbHMuY3JlYXRlZCwgZm9ybWF0OiAnTU1NIEQsIFlZWVknIH0gKVxuXG4gICAgICAgIHRoaXMudmlld3MuYnV0dG9uRmxvdy5vbiggJ2NvbmZpcm1BZGRDbGlja2VkJywgZSA9PiB0aGlzLmFkZFRyYW5zYWN0aW9uKCkgKVxuICAgICAgICB0aGlzLnZpZXdzLmJ1dHRvbkZsb3cub24oICdjYW5jZWxDbGlja2VkJywgZSA9PiB0aGlzLm9uQ2FuY2VsKCkgKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlc2V0KCkge1xuICAgICAgICBjb25zdCBub3cgPSB0aGlzLk1vbWVudCgpLmZvcm1hdCgnTU1NIEQsIFlZWVknKVxuICAgICAgICB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMuZm9yRWFjaCggYXR0ciA9PlxuICAgICAgICAgICAgdGhpcy5lbHNbIGF0dHIgXS52YWx1ZSA9XG4gICAgICAgICAgICAgICAgYXR0ciA9PT0gJ2FjdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLm1vZGVsLmFjdGlvbnNbMF1cbiAgICAgICAgICAgICAgICAgICAgOiBhdHRyID09PSAnY3JlYXRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbm93XG4gICAgICAgICAgICAgICAgICAgICAgICA6ICcnIClcblxuICAgICAgICB0aGlzLmNyZWF0ZWQuc2V0TW9tZW50KCBub3cgKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZU9wdHMoKSB7XG4gICAgICAgIHJldHVybiB7IGFjdGlvbnM6IHRoaXMubW9kZWwuYWN0aW9ucyB9XG4gICAgfSxcblxuICAgIHVwZGF0ZSggbWVtYmVyU2hhcmVJZCApIHtcbiAgICAgICAgdGhpcy5tZW1iZXJTaGFyZUlkID0gbWVtYmVyU2hhcmVJZFxuICAgICAgICB0aGlzLnJlc2V0KClcbiAgICB9XG59IClcbiIsInZhciBUYWJsZSA9IHJlcXVpcmUoJy4vdXRpbC9UYWJsZScpLFxuICAgIEFkbWluID0gZnVuY3Rpb24oKSB7IHJldHVybiBUYWJsZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBBZG1pbi5wcm90b3R5cGUsIFRhYmxlLnByb3RvdHlwZSwge1xuXG4gICAgSXRlbVZpZXc6IHJlcXVpcmUoJy4vUmVzb3VyY2VSb3cnKSxcblxuICAgIGZpZWxkczogW1xuICAgICAgICB7IG5hbWU6ICduYW1lJywgbGFiZWw6ICdOYW1lJywgd2lkdGg6IDI1IH0sXG4gICAgICAgIHsgbmFtZTogJ2xhYmVsJywgbGFiZWw6ICdMYWJlbCcsIHdpZHRoOiAyNSB9LFxuICAgICAgICB7IG5hbWU6ICdkZXNjcmlwdGlvbicsIGxhYmVsOiAnRGVzY3JpcHRpb24nLCB3aWR0aDogNTAgfVxuICAgIF0sXG4gICAgXG4gICAgb25JdGVtQ2xpY2soIG1vZGVsICkge1xuICAgICAgICB0aGlzLmhpZGUoKS50aGVuKCAoKSA9PiB0aGlzLmVtaXQoICduYXZpZ2F0ZScsIGAvYWRtaW4vJHttb2RlbC5nZXQoJ25hbWUnKX1gICkgKVxuICAgICAgICAuY2F0Y2goIGVyciA9PiBuZXcgdGhpcy5FcnJvciggZXJyICkgKVxuICAgIH0sXG5cbiAgICByZXF1aXJlc1JvbGU6ICdhZG1pbicsXG5cbiAgICBzZWxlY3Rpb246IHRydWUsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2FkbWluJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApXG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFkbWluXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSggJy4vX19wcm90b19fJyApLCB7XG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgJ3NpZ25vdXRCdG4nOiAnY2xpY2snXG4gICAgfSxcblxuICAgIHRlbXBsYXRlT3B0czogeyBsb2dvOiAnL3N0YXRpYy9pbWcvbG9nby5naWYnIH0sXG5cbiAgICBpbnNlcnRpb25NZXRob2Q6ICdiZWZvcmUnLFxuXG4gICAgb25Vc2VyKCkge1xuICAgICAgICB0aGlzLmVscy5uYW1lLnRleHRDb250ZW50ID0gdGhpcy51c2VyLmdldCgnbmFtZScpXG4gICAgICAgIHRoaXMuZWxzLnVzZXJQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCAnaGlkZScgKVxuICAgIH0sXG4gICAgXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICBvblNpZ25vdXRCdG5DbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9ICdwYXRjaHdvcmtqd3Q9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDEgR01UOyc7XG4gICAgICAgIHRoaXMudXNlci5jbGVhcigpXG5cbiAgICAgICAgdGhpcy51c2VyLnNldCggdGhpcy51c2VyLmRlZmF1bHRzIClcblxuICAgICAgICB0aGlzLmVscy5uYW1lLnRleHRDb250ZW50ID0gJydcbiAgICAgICAgdGhpcy5lbHMudXNlclBhbmVsLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxuXG4gICAgICAgIHRoaXMuZW1pdCgnc2lnbm91dCcpXG4gICAgfVxuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIGV2ZW50czoge1xuICAgICAgICAnY29sbGVjdGlvbk1hbmFnZXJCdG4nOiAnY2xpY2snLFxuICAgICAgICAnbWFuYWdlQ3VzdG9tZXJCdG4nOiAnY2xpY2snLFxuICAgICAgICAncmVwb3J0aW5nQnRuJzogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBtb2RlbDoge1xuXG4gICAgICAgIG1hbmFnZUN1c3RvbWVyOiB7IGxhYmVsOiAnTWFuYWdlIEN1c3RvbWVycycsIHJvbGVzOiBuZXcgU2V0KCBbICdhZG1pbicgXSApLCB1cmw6ICdtYW5hZ2UtY3VzdG9tZXInIH0sXG5cbiAgICAgICAgY29sbGVjdGlvbk1hbmFnZXI6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ29sbGVjdGlvbiBNYW5hZ2VyJyxcbiAgICAgICAgICAgIHJvbGVzOiBuZXcgU2V0KCBbICdhZG1pbicgXSApLFxuICAgICAgICAgICAgdXJsOiAnY29sbGVjdGlvbi1tYW5hZ2VyJ1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlcG9ydGluZzogeyBsYWJlbDogJ35ffiBSZXBvcnRpbmcgfl9+Jywgcm9sZXM6IG5ldyBTZXQoIFsgJ2FkbWluJyBdICksIHVybDogJ3JlcG9ydGluZycgfVxuICAgIH0sXG5cbiAgICBvbkNvbGxlY3Rpb25NYW5hZ2VyQnRuQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuZW1pdCggJ25hdmlnYXRlJywgJ2FkbWluLXBsdXMvY29sbGVjdGlvbi1tYW5hZ2VyJyApXG4gICAgfSxcblxuICAgIG9uTWFuYWdlQ3VzdG9tZXJCdG5DbGljaygpIHtcbiAgICAgICAgdGhpcy5lbWl0KCAnbmF2aWdhdGUnLCAnYWRtaW4tcGx1cy9tYW5hZ2UtY3VzdG9tZXInIClcbiAgICB9LFxuXG4gICAgb25OYXZpZ2F0aW9uKCBwYXRoICkge1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoXG5cbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXlzLmZpbmQoIGtleSA9PiB0aGlzLm1vZGVsWyBrZXkgXS51cmwgPT09IHBhdGhbMF0gKVxuXG4gICAgICAgIGlmKCBrZXkgIT09IHVuZGVmaW5lZCApIHJldHVybiB0aGlzLnNob3dWaWV3KCBrZXkgKVxuXG4gICAgICAgIFByb21pc2UuYWxsKCBPYmplY3Qua2V5cyggdGhpcy5tb2RlbCApLm1hcCgga2V5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLm1vZGVsWyBrZXkgXS52aWV3XG4gICAgICAgICAgICByZXR1cm4gdmlldyA/IHZpZXcuaGlkZSgpIDogUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgfSApIClcbiAgICAgICAgLnRoZW4oICgpID0+IHsgdGhpcy5jdXJyZW50RWwgPSB0aGlzLmVscy5uYXY7IHJldHVybiB0aGlzLnNob3dFbCggdGhpcy5lbHMubmF2ICkgfSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgfSxcblxuICAgIG9uUmVwb3J0aW5nQnRuQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuZW1pdCggJ25hdmlnYXRlJywgJ2FkbWluLXBsdXMvcmVwb3J0aW5nJyApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMua2V5cyA9IE9iamVjdC5rZXlzKCB0aGlzLm1vZGVsIClcblxuICAgICAgICB0aGlzLmtleXMuZm9yRWFjaCggKCBuYW1lLCBpICkgPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMudXNlci5nZXQoJ3JvbGVzJykuZmlsdGVyKCByb2xlID0+IHRoaXMubW9kZWxbIG5hbWUgXS5yb2xlcy5oYXMoIHJvbGUgKSApLmxlbmd0aCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IGA8YnV0dG9uIGRhdGEtanM9XCIke25hbWV9QnRuXCI+JHt0aGlzLm1vZGVsWyBuYW1lIF0ubGFiZWx9PC9idXR0b24+YCwgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5uYXYgfSB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5jdXJyZW50RWwgPSB0aGlzLmVscy5uYXZcblxuICAgICAgICBpZiggdGhpcy5wYXRoLmxlbmd0aCA+IDEgKSB0aGlzLm9uTmF2aWdhdGlvbiggdGhpcy5wYXRoLnNsaWNlKCAxICkgKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHNob3dWaWV3KCBrZXkgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhpZGVFbCggdGhpcy5jdXJyZW50RWwgKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb2RlbFsga2V5IF0udmlldyBcbiAgICAgICAgICAgICAgICA/IHRoaXMubW9kZWxbIGtleSBdLnZpZXcub25OYXZpZ2F0aW9uKCB0aGlzLnBhdGguc2xpY2UoIDEgKSApXG4gICAgICAgICAgICAgICAgOiB0aGlzLm1vZGVsWyBrZXkgXS52aWV3ID0gdGhpcy5mYWN0b3J5LmNyZWF0ZSgga2V5LCB7IGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMudmlld3MgfSwgcGF0aDogdGhpcy5wYXRoLnNsaWNlKDEpIH0gKVxuICAgICAgICAgICAgICAgICAgICAub24oICduYXZpZ2F0ZScsICggcm91dGUsIG9wdHMgKSA9PiB0aGlzLmVtaXQoICduYXZpZ2F0ZScsIHJvdXRlLCBvcHRzICkgKVxuICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFZpZXcgPSB0aGlzLm1vZGVsWyBrZXkgXS52aWV3XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRFbCA9IHRoaXMubW9kZWxbIGtleSBdLnZpZXcuZ2V0Q29udGFpbmVyKClcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogdHJ1ZSxcblxuICAgIHJlcXVpcmVzUm9sZTogJ2FkbWluJ1xuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLm1vZGVsLmRhdGEuc3RhdGVzICkuZm9yRWFjaCggc3RhdGVOYW1lID0+XG4gICAgICAgICAgIHRoaXMubW9kZWwuZGF0YS5zdGF0ZXNbIHN0YXRlTmFtZSBdLmZvckVhY2goIGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZWxzWyBidXR0b24ubmFtZSBdXG4gICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCBidXR0b24uY2xpY2tMaXN0ZW5lciApXG4gICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpXG4gICAgICAgICAgIH0gKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMubW9kZWwuZGF0YS5zdGF0ZXMgKS5mb3JFYWNoKCBzdGF0ZU5hbWUgPT5cbiAgICAgICAgICAgdGhpcy5tb2RlbC5kYXRhLnN0YXRlc1sgc3RhdGVOYW1lIF0uZm9yRWFjaCggYnV0dG9uID0+IHtcbiAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbHNbIGJ1dHRvbi5uYW1lIF1cbiAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIGJ1dHRvbi5jbGlja0xpc3RlbmVyIClcbiAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgZ2V0TGlzdGVuZXIoIG5hbWUsIGJ1dHRvbiApIHtcbiAgICAgICAgcmV0dXJuIGUgPT4ge1xuICAgICAgICAgICAgaWYoIGJ1dHRvbi5uZXh0U3RhdGUgKSBlLmZkTmV4dFN0YXRlID0gdGhpcy5vbk5leHRTdGF0ZSggYnV0dG9uLm5leHRTdGF0ZSApXG4gICAgICAgICAgICBpZiggYnV0dG9uLmVtaXQgKSB0aGlzLmVtaXQoIGAke25hbWV9Q2xpY2tlZGAsIGUgKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uTmV4dFN0YXRlKCBuZXdTdGF0ZSApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlkZUVsKCB0aGlzLmVsc1sgdGhpcy5zdGF0ZSBdIClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0VsKCB0aGlzLmVsc1sgbmV3U3RhdGUgXSApXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLnN0YXRlID0gbmV3U3RhdGUgKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICdzdGFydCdcblxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5tb2RlbC5kYXRhLnN0YXRlcyApLmZvckVhY2goIHN0YXRlTmFtZSA9PlxuICAgICAgICAgICB0aGlzLm1vZGVsLmRhdGEuc3RhdGVzWyBzdGF0ZU5hbWUgXS5mb3JFYWNoKCBidXR0b24gPT4ge1xuICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsc1sgYnV0dG9uLm5hbWUgXVxuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGlja0xpc3RlbmVyID0gdGhpcy5nZXRMaXN0ZW5lciggYnV0dG9uLm5hbWUsIGJ1dHRvbiApXG4gICAgICAgICAgICAgICAgaWYoICF0aGlzLm1vZGVsLmRpc2FibGVkICkgeyBlbC5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCBidXR0b24uY2xpY2tMaXN0ZW5lciApIH1cbiAgICAgICAgICAgfSApXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7IH0sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIG1vZGVsOiByZXF1aXJlKCcuLi9tb2RlbHMvQ29sbGVjdGlvbk1hbmFnZXInKSxcblxuICAgIENvbGxlY3Rpb246IHJlcXVpcmUoJy4uL21vZGVscy9Db2xsZWN0aW9uJyksXG4gICAgRG9jdW1lbnRNb2RlbDogcmVxdWlyZSgnLi4vbW9kZWxzL0RvY3VtZW50JyksXG5cbiAgICBUZW1wbGF0ZXM6IHtcbiAgICAgICAgRG9jdW1lbnQ6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL0RvY3VtZW50JylcbiAgICB9LFxuXG4gICAgVmlld3M6IHtcblxuICAgICAgICBjb2xsZWN0aW9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3Q6ICdjbGljaydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLk1vZGVsICkuY29uc3RydWN0b3IoIHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogT2JqZWN0LmNyZWF0ZSggdGhpcy5Db2xsZWN0aW9uICksXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZldGNoOiB0cnVlXG4gICAgICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgICAgIGl0ZW1UZW1wbGF0ZTogY29sbGVjdGlvbiA9PiBgPHNwYW4+JHtjb2xsZWN0aW9uLm5hbWV9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVPcHRzOiB7IGhlYWRpbmc6ICdDb2xsZWN0aW9ucycsIG5hbWU6ICdDb2xsZWN0aW9ucycsIHRvZ2dsZTogdHJ1ZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypjcmVhdGVDb2xsZWN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLm1haW5QYW5lbCB9LFxuICAgICAgICAgICAgICAgIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLkNvbGxlY3Rpb24gKS5jb25zdHJ1Y3RvcigpLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlT3B0czogeyBoZWFkaW5nOiAnQ3JlYXRlIENvbGxlY3Rpb24nIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVDb2xsZWN0aW9uKCBtb2RlbCApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5tYWluUGFuZWwgfSxcbiAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Db2xsZWN0aW9uICkuY29uc3RydWN0b3IoIG1vZGVsICksXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVPcHRzOiB7IG1lc3NhZ2U6IGBEZWxldGUgXCIke21vZGVsLm5hbWV9XCIgQ29sbGVjdGlvbj9gIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwqL1xuXG4gICAgICAgIGRlbGV0ZURvY3VtZW50KCBkb2N1bWVudCApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5tYWluUGFuZWwgfSxcbiAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Eb2N1bWVudE1vZGVsICkuY29uc3RydWN0b3IoIGRvY3VtZW50LCB7IHJlc291cmNlOiB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSB9ICksXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVPcHRzOiB7IG1lc3NhZ2U6IGBEZWxldGUgXCIke2RvY3VtZW50LmxhYmVsIHx8IGRvY3VtZW50Lm5hbWV9XCIgZnJvbSAke3RoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicpfT9gIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkb2N1bWVudExpc3QoIG1vZGVsICkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKCBPYmplY3QuYXNzaWduKCBtb2RlbCwge1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBPYmplY3QuY3JlYXRlKCB0aGlzLkRvY3VtZW50TW9kZWwgKS5jb25zdHJ1Y3RvciggWyBdLCB7IHJlc291cmNlOiB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSB9ICksXG4gICAgICAgICAgICAgICAgICAgIGlzRG9jdW1lbnRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZTogMTAwLFxuICAgICAgICAgICAgICAgICAgICBza2lwOiAwLFxuICAgICAgICAgICAgICAgICAgICBzb3J0OiB7ICdsYWJlbCc6IDEgfSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUGFnaW5hdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0gKSApLFxuICAgICAgICAgICAgICAgIGV2ZW50czogeyBsaXN0OiAnY2xpY2snIH0sXG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5tYWluUGFuZWwgfSxcbiAgICAgICAgICAgICAgICBpdGVtVGVtcGxhdGU6IHRoaXMuVGVtcGxhdGVzLkRvY3VtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZG9jdW1lbnRWaWV3KCBtb2RlbCApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGlzYWxsb3dFbnRlcktleVN1Ym1pc3Npb246IHRydWUsXG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5tYWluUGFuZWwgfSxcbiAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZU9wdHM6IHsgaGVhZGluZzogbW9kZWwuZ2l0KCdsYWJlbCcpIHx8IG1vZGVsLmdpdCgnbmFtZScpIH0sXG4gICAgICAgICAgICAgICAgVmlld3M6IHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGNyZWF0ZUNvbGxlY3Rpb25CdG46ICdjbGljaycsXG4gICAgICAgIGJhY2tCdG46ICdjbGljaycsXG4gICAgICAgIHJlc291cmNlOiAnY2xpY2snLFxuXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uczogW1xuICAgICAgICAgICAgICAgIFsgJ2RlbGV0ZUNsaWNrZWQnLFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oIGNvbGxlY3Rpb24gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckN1cnJlbnRWaWV3KClcbiAgICAgICAgICAgICAgICAgICAgICAudGhlbiggKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLmNyZWF0ZVZpZXcoICdkZWxldGVyJywgJ2RlbGV0ZUNvbGxlY3Rpb24nLCBjb2xsZWN0aW9uICkgKSApXG4gICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFsgJ2ZldGNoZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93UHJvcGVyVmlldyggdHJ1ZSApXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLmhpZGVJdGVtcyggWyB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSBdICkgKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgICAgICAgICAgICAgIH0gXSxcbiAgICAgICAgICAgICAgICBbICdpdGVtQ2xpY2tlZCcsIGZ1bmN0aW9uKCBtb2RlbCApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckN1cnJlbnRWaWV3KClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oICgpID0+IFByb21pc2UucmVzb2x2ZSggdGhpcy5tb2RlbC5zZXQoICdjdXJyZW50Q29sbGVjdGlvbicsIG1vZGVsLm5hbWUgKSApIClcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICAgICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICAgICAgWyAnc3VjY2Vzc2Z1bERyb3AnLCBmdW5jdGlvbiggZGF0YSApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwRG9jdW1lbnQoIHsgZG9jdW1lbnQ6IGRhdGEuZHJvcHBlZCwgdG86IGRhdGEuZHJvcHBlZE9uLm5hbWUsIGZyb206IHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicgKSB9IClcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCB0aGlzLnRvYXN0RXJyb3IuYmluZCh0aGlzKSApXG4gICAgICAgICAgICAgICAgfSBdXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLypjcmVhdGVDb2xsZWN0aW9uOiBbXG4gICAgICAgICAgICAgICAgWyAnZGVsZXRlZCcsIGZ1bmN0aW9uKCkgeyB0aGlzLm1vZGVsLnNldCggJ2N1cnJlbnRWaWV3JywgJ2RvY3VtZW50TGlzdCcgKSB9IF0sXG4gICAgICAgICAgICAgICAgWyAncG9zdGVkJywgZnVuY3Rpb24oIGNvbGxlY3Rpb24gKSB7IHRoaXMudmlld3MuY29sbGVjdGlvbnMuYWRkKCBjb2xsZWN0aW9uICkgfSBdXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZGVsZXRlQ29sbGVjdGlvbjogW1xuICAgICAgICAgICAgICAgIFsgJ2RlbGV0ZWQnLCBmdW5jdGlvbigpIHsgdGhpcy5tb2RlbC5zZXQoJ2N1cnJlbnRWaWV3JywgJ2RvY3VtZW50TGlzdCcgKSB9IF0sXG4gICAgICAgICAgICAgICAgWyAnbW9kZWxEZWxldGVkJywgZnVuY3Rpb24oIG1vZGVsICkgeyB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLnJlbW92ZSggbW9kZWwgKSB9IF1cbiAgICAgICAgICAgIF0sKi9cbiAgICAgICAgICAgIGRlbGV0ZURvY3VtZW50OiBbXG4gICAgICAgICAgICAgICAgWyAnZGVsZXRlZCcsIGZ1bmN0aW9uKCkgeyB0aGlzLm1vZGVsLnNldCgnY3VycmVudFZpZXcnLCAnZG9jdW1lbnRMaXN0JyApIH0gXSxcbiAgICAgICAgICAgICAgICBbICdtb2RlbERlbGV0ZWQnLCBmdW5jdGlvbiggbW9kZWwgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LnJlbW92ZSggbW9kZWwgKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdzLmRvY3VtZW50TGlzdC5nZXRDb3VudCgpLnRoZW4oIGNvdW50ID0+IHRoaXMudXBkYXRlQ291bnQoY291bnQpICkuY2F0Y2godGhpcy5FcnJvcilcbiAgICAgICAgICAgICAgICB9IF1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkb2N1bWVudExpc3Q6IFtcbiAgICAgICAgICAgICAgICBbICdhZGRDbGlja2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDdXJyZW50VmlldygpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlVmlldyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZG9jdW1lbnRWaWV3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVNb2RlbCggJ2RvY3VtZW50VmlldycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgWyAnaXRlbUNsaWNrZWQnLCBmdW5jdGlvbiggZG9jdW1lbnQgKSB7IHRoaXMub25Eb2N1bWVudFNlbGVjdGVkKCBkb2N1bWVudCApIH0gXSxcbiAgICAgICAgICAgICAgICAvL1sgJ2RyYWdTdGFydCcsIGZ1bmN0aW9uKCB0eXBlICkgeyB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLnNob3dEcm9wcGFibGUoIHR5cGUgKSB9IF0sXG4gICAgICAgICAgICAgICAgLy9bICdkcm9wcGVkJywgZnVuY3Rpb24oIGRhdGEgKSB7IHRoaXMudmlld3MuY29sbGVjdGlvbnMuaGlkZURyb3BwYWJsZSgpOyB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLmNoZWNrRHJvcCggZGF0YSApIH0gXSxcbiAgICAgICAgICAgICAgICBbICdkZWxldGVDbGlja2VkJyxcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBkb2N1bWVudCApIHsgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDdXJyZW50VmlldygpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMuY3JlYXRlVmlldyggJ2RlbGV0ZXInLCAnZGVsZXRlRG9jdW1lbnQnLCBkb2N1bWVudCApICkgKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkb2N1bWVudFZpZXc6IFtcbiAgICAgICAgICAgICAgICBbICdkZWxldGVkJywgZnVuY3Rpb24oIG1vZGVsICkgeyB0aGlzLm1vZGVsLnNldCggJ2N1cnJlbnRWaWV3JywgJ2RvY3VtZW50TGlzdCcgKSB9IF0sXG4gICAgICAgICAgICAgICAgWyAncHV0JywgZnVuY3Rpb24oIG1vZGVsICkge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy52aWV3cy5kb2N1bWVudExpc3QuZmV0Y2hlZCApIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LnVwZGF0ZUl0ZW0oIHRoaXMuY3JlYXRlTW9kZWwoICdkb2N1bWVudFZpZXcnLCBtb2RlbCApIClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckN1cnJlbnRWaWV3KCkudGhlbiggKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLm1vZGVsLnNldCgnY3VycmVudFZpZXcnLCAnZG9jdW1lbnRMaXN0JykgKSApLmNhdGNoKHRoaXMuQ2F0Y2gpXG5cbiAgICAgICAgICAgICAgICB9IF0sXG4gICAgICAgICAgICAgICAgWyAncG9zdGVkJywgZnVuY3Rpb24oIG1vZGVsICkge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy52aWV3cy5kb2N1bWVudExpc3QuZmV0Y2hlZCApIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LmFkZCggbW9kZWwsIHRydWUgKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ3VycmVudFZpZXcoKS50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMubW9kZWwuc2V0KCdjdXJyZW50VmlldycsICdkb2N1bWVudExpc3QnKSApICkuY2F0Y2godGhpcy5DYXRjaClcbiAgICAgICAgICAgICAgICB9IF1cbiAgICAgICAgICAgIF1cblxuICAgICAgICB9XG4gICAgfSxcbiAgICBcbiAgICBjbGVhckN1cnJlbnRWaWV3KCkge1xuICAgICAgICBjb25zdCBjdXJyZW50VmlldyA9IHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50VmlldycpO1xuXG4gICAgICAgIHJldHVybiAoIGN1cnJlbnRWaWV3ICE9PSAnZG9jdW1lbnRMaXN0J1xuICAgICAgICAgICAgPyB0aGlzLnZpZXdzWyBjdXJyZW50VmlldyBdLmRlbGV0ZSggeyBzaWxlbnQ6IHRydWUgfSApXG4gICAgICAgICAgICA6IHRoaXMudmlld3NbIGN1cnJlbnRWaWV3IF0uaGlkZSgpXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgY3JlYXRlRG9jdW1lbnRMaXN0KCBjb2xsZWN0aW9uTmFtZSwgZmV0Y2g9dHJ1ZSApIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmNyZWF0ZU1vZGVsKCAnZG9jdW1lbnRMaXN0JyApXG5cbiAgICAgICAgdGhpcy5jcmVhdGVWaWV3KCAnbGlzdCcsICdkb2N1bWVudExpc3QnLCBtb2RlbCApXG4gICAgICAgIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LmdldENvdW50KCkudGhlbiggY291bnQgPT4gdGhpcy51cGRhdGVDb3VudChjb3VudCkgKS5jYXRjaCh0aGlzLkVycm9yKVxuICAgICAgICByZXR1cm4gdGhpcy52aWV3cy5jb2xsZWN0aW9ucy51bmhpZGVJdGVtcygpLmhpZGVJdGVtcyggWyB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSBdIClcbiAgICB9LFxuXG4gICAgY3JlYXRlTW9kZWwoIHR5cGUsIGRhdGE9e30gKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSB0aGlzLnZpZXdzLmNvbGxlY3Rpb25zLmNvbGxlY3Rpb24uc3RvcmUubmFtZVsgdGhpcy5tb2RlbC5naXQoJ2N1cnJlbnRDb2xsZWN0aW9uJykgXVxuXG4gICAgICAgIGlmKCAhY29sbGVjdGlvbiApIHJldHVyblxuXG4gICAgICAgIGlmKCB0eXBlID09PSAnZG9jdW1lbnRMaXN0JyApIHJldHVybiBjb2xsZWN0aW9uLmNsaWVudERhdGFcblxuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKSA9PT0gJ1BhZ2VzJ1xuICAgICAgICAgICAgICAgID8gY29sbGVjdGlvbi5kb2N1bWVudHMuZmluZCggZG9jID0+IGRvYy5uYW1lID09PSBkYXRhLmxhYmVsLnJlcGxhY2UoICcgJywgJycgKSApLnNjaGVtYVxuICAgICAgICAgICAgICAgIDogY29sbGVjdGlvbi5zY2hlbWFcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oIHsgcmVzb3VyY2U6IHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicpIH0sIHNjaGVtYSApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgY3JlYXRlVmlldyggdHlwZSwgbmFtZSwgbW9kZWw9e30gKSB7XG4gICAgICAgIHRoaXMudmlld3NbIG5hbWUgXSA9IHRoaXMuZmFjdG9yeS5jcmVhdGUoIHR5cGUsIFJlZmxlY3QuYXBwbHkoIHRoaXMuVmlld3NbIG5hbWUgXSwgdGhpcywgWyBtb2RlbCBdICkgKVxuXG4gICAgICAgIGlmKCB0aGlzLmV2ZW50cy52aWV3c1sgbmFtZSBdICkgdGhpcy5ldmVudHMudmlld3NbIG5hbWUgXS5mb3JFYWNoKCBhcnIgPT4gdGhpcy52aWV3c1sgbmFtZSBdLm9uKCBhcnJbMF0sIGV2ZW50RGF0YSA9PiBSZWZsZWN0LmFwcGx5KCBhcnJbMV0sIHRoaXMsIFsgZXZlbnREYXRhIF0gKSApIClcbiAgICAgICAgdGhpcy5tb2RlbC5zZXQoICdjdXJyZW50VmlldycsIG5hbWUgKVxuICAgIH0sXG5cbiAgICBnZXREb2N1bWVudCggY29sbGVjdGlvbiwgZG9jdW1lbnROYW1lICkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKCB7fSwgeyByZXNvdXJjZTogdGhpcy5wYXRoWzBdIH0gKS5nZXQoIHsgcXVlcnk6IHsgbmFtZTogdGhpcy5wYXRoWzFdIH0gfSApXG4gICAgfSxcblxuICAgIG9uQmFja0J0bkNsaWNrKCkgeyB0aGlzLmVtaXQoICduYXZpZ2F0ZScsICcvYWRtaW4tcGx1cycgKSB9LFxuXG4gICAgb25DcmVhdGVDb2xsZWN0aW9uQnRuQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuY2xlYXJDdXJyZW50VmlldygpXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMuY3JlYXRlVmlldyggJ2Zvcm0nLCAnY3JlYXRlQ29sbGVjdGlvbicgKSApIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgb25Eb2N1bWVudFNlbGVjdGVkKCBkb2N1bWVudCApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xlYXJDdXJyZW50VmlldygpXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMuc2hvd0RvY3VtZW50VmlldyggZG9jdW1lbnQgKSApIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgb25OYXZpZ2F0aW9uKCBwYXRoICkge1xuXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG5cbiAgICAgICAgKCB0aGlzLmlzSGlkZGVuKCkgPyB0aGlzLnNob3coKSA6IFByb21pc2UucmVzb2x2ZSgpIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuY2xlYXJDdXJyZW50VmlldygpIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuc2hvd1Byb3BlclZpZXcoIGZhbHNlICkgKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKSBcbiAgICB9LFxuXG4gICAgb25SZXNvdXJjZUNsaWNrKCkge1xuICAgICAgICBpZiggdGhpcy5tb2RlbC5naXQoJ2N1cnJlbnRWaWV3JykgPT09ICdkb2N1bWVudExpc3QnICkgcmV0dXJuXG5cbiAgICAgICAgdGhpcy5jbGVhckN1cnJlbnRWaWV3KClcbiAgICAgICAgLnRoZW4oICgpID0+IFByb21pc2UucmVzb2x2ZSggdGhpcy5tb2RlbC5zZXQoJ2N1cnJlbnRWaWV3JywgJ2RvY3VtZW50TGlzdCcpICkgKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICBpZiggdGhpcy5wYXRoLmxlbmd0aCA+IDAgKSB0aGlzLm1vZGVsLnNldCggJ2N1cnJlbnRDb2xsZWN0aW9uJywgdGhpcy5wYXRoWzBdIClcblxuICAgICAgICB0aGlzLm1vZGVsLm9uKCAnY3VycmVudENvbGxlY3Rpb25DaGFuZ2VkJywgKCkgPT5cbiAgICAgICAgICAgIHRoaXMudmlld3MuZG9jdW1lbnRMaXN0LmRlbGV0ZSggeyBzaWxlbnQ6IHRydWUgfSApXG4gICAgICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5jcmVhdGVEb2N1bWVudExpc3QoIHRoaXMubW9kZWwuZ2l0KCAnY3VycmVudENvbGxlY3Rpb24nKSApIClcbiAgICAgICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgICAgIClcblxuICAgICAgICB0aGlzLm1vZGVsLm9uKCAnY3VycmVudFZpZXdDaGFuZ2VkJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFZpZXcgPSB0aGlzLm1vZGVsLmdpdCgnY3VycmVudFZpZXcnKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29sbGVjdGlvbiA9IHRoaXMubW9kZWwuZ2l0KCdjdXJyZW50Q29sbGVjdGlvbicpLFxuICAgICAgICAgICAgICAgIHBhdGggPSBjdXJyZW50VmlldyA9PT0gJ2RvY3VtZW50VmlldydcbiAgICAgICAgICAgICAgICAgICAgPyBgLyR7Y3VycmVudENvbGxlY3Rpb259LyR7dGhpcy52aWV3cy5kb2N1bWVudFZpZXcubW9kZWwuZ2l0KCduYW1lJyl9YFxuICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnRWaWV3ID09PSAnZG9jdW1lbnRMaXN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBgLyR7Y3VycmVudENvbGxlY3Rpb259YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBgYFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmVtaXQoICduYXZpZ2F0ZScsIGAvYWRtaW4tcGx1cy9jb2xsZWN0aW9uLW1hbmFnZXIke3BhdGh9YCwgeyBzaWxlbnQ6IHRydWUgfSApO1xuXG4gICAgICAgICAgICAoIGN1cnJlbnRWaWV3ID09PSAnZG9jdW1lbnRMaXN0JyAmJiB0aGlzLnZpZXdzLmRvY3VtZW50TGlzdC5jb2xsZWN0aW9uLmRhdGEubGVuZ3RoID09PSAwID8gdGhpcy52aWV3cy5kb2N1bWVudExpc3QuZmV0Y2goKSA6IFByb21pc2UucmVzb2x2ZSgpIClcbiAgICAgICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLnZpZXdzWyBjdXJyZW50VmlldyBdLnNob3coKSApXG4gICAgICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBzaG93RG9jdW1lbnRWaWV3KCBkb2N1bWVudCApIHtcbiAgICAgICAgdGhpcy5jcmVhdGVWaWV3KFxuICAgICAgICAgICAgJ2Zvcm0nLFxuICAgICAgICAgICAgJ2RvY3VtZW50VmlldycsXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZU1vZGVsKCAnZG9jdW1lbnRWaWV3JywgZG9jdW1lbnQgKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIHNob3dQcm9wZXJWaWV3KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudmlld3MuZG9jdW1lbnRMaXN0ID8gUHJvbWlzZS5yZXNvbHZlKCkgOiB0aGlzLmNyZWF0ZURvY3VtZW50TGlzdCggdGhpcy5tb2RlbC5naXQoJ2N1cnJlbnRDb2xsZWN0aW9uJyksIHRoaXMucGF0aC5sZW5ndGggPT09IDIgPyBmYWxzZSA6IHRydWUgKSApXG4gICAgICAgIC50aGVuKCAoKSA9PlxuICAgICAgICAgICAgdGhpcy5wYXRoLmxlbmd0aCA9PT0gMlxuICAgICAgICAgICAgICAgID8gdGhpcy5nZXREb2N1bWVudCgpXG4gICAgICAgICAgICAgICAgICAudGhlbiggZG9jdW1lbnQgPT5cbiAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoIGRvY3VtZW50IClcbiAgICAgICAgICAgICAgICAgICAgICA/IFByb21pc2UucmVzb2x2ZSggdGhpcy5tb2RlbC5zZXQoICdjdXJyZW50VmlldycsICdkb2N1bWVudExpc3QnICkgKVxuICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbGVhckN1cnJlbnRWaWV3KCkudGhlbiggKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLnNob3dEb2N1bWVudFZpZXcoIGRvY3VtZW50LCBmYWxzZSApICkgKS5jYXRjaCggdGhpcy5DYXRjaCApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IFByb21pc2UucmVzb2x2ZSggdGhpcy5tb2RlbC5zZXQoICdjdXJyZW50VmlldycsICdkb2N1bWVudExpc3QnICkgKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIHN3YXBEb2N1bWVudCggeyBkb2N1bWVudCwgdG8sIGZyb20gfSApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWGhyKCB7IG1ldGhvZDogJ1BBVENIJywgcmVzb3VyY2U6ICdEb2N1bWVudCcsIGlkOiBkb2N1bWVudC5faWQsIGRhdGE6IEpTT04uc3RyaW5naWZ5KCB7IHRvLCBmcm9tIH0gKSB9IClcbiAgICAgICAgLnRoZW4oICgpID0+IFByb21pc2UucmVzb2x2ZSggdGhpcy52aWV3cy5kb2N1bWVudExpc3QucmVtb3ZlKCBkb2N1bWVudCApICkgKVxuICAgIH0sXG5cbiAgICB0b2FzdEVycm9yKGUpIHtcbiAgICAgICAgdGhpcy5FcnJvcihlKTtcbiAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ2Vycm9yJywgYFNvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluIG9yIGNvbnRhY3QgQ2hyaXMuYCApXG4gICAgfSxcblxuICAgIHVwZGF0ZUNvdW50KCBjb3VudCApIHtcbiAgICAgICAgdGhpcy5lbHMucmVzb3VyY2UudGV4dENvbnRlbnQgPSBgJHt0aGlzLm1vZGVsLmdpdCgnY3VycmVudENvbGxlY3Rpb24nKX0gKCR7Y291bnR9KWBcbiAgICB9XG5cbn0gKVxuIiwiY29uc3QgQ3VzdG9tQ29udGVudCA9IHJlcXVpcmUoJy4vdXRpbC9DdXN0b21Db250ZW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwgQ3VzdG9tQ29udGVudCwge1xuXG4gICAgdGFibGVzOiBbIHsgbmFtZTogJ2NvbnRhY3RpbmZvJywgZWw6ICdjb250YWN0SW5mbycsIHRlbXBsYXRlOiAnY29udGFjdCd9IF0sXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgY29udGFjdDogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvTG9jYXRpb24nKVxuICAgIH1cblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwgcmVxdWlyZSgnLi91dGlsL0N1c3RvbUNvbnRlbnQnKSwge1xuXG4gICAgQ3VycmVudFNoYXJlOiByZXF1aXJlKCcuLi9tb2RlbHMvQ3VycmVudFNoYXJlJyksXG4gICAgU2hhcmVzOiBPYmplY3QuY3JlYXRlKCByZXF1aXJlKCcuLi9tb2RlbHMvX19wcm90b19fJyksIHsgcmVzb3VyY2U6IHsgdmFsdWU6ICdTaGFyZScgfSB9ICksXG4gICAgU2hhcmVPcHRpb25zOiBPYmplY3QuY3JlYXRlKCByZXF1aXJlKCcuLi9tb2RlbHMvX19wcm90b19fJyksIHsgcmVzb3VyY2U6IHsgdmFsdWU6ICdzaGFyZW9wdGlvbicgfSB9ICksXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgc2lnbnVwQnRuOiAnY2xpY2snXG4gICAgfSxcblxuICAgIGhhc2hUb0VsZW1lbnQ6IHtcbiAgICAgICAgJ2hvdy1kby1pLWtub3cnOiAnaG93RG9JS25vdycsXG4gICAgfSxcblxuICAgIGluc2VydEFkZE9uRGVzY3JpcHRpb25zKCkge1xuICAgICAgICB0aGlzLlNoYXJlT3B0aW9ucy5kYXRhLmZpbHRlciggb3B0ID0+IG9wdC5uYW1lICE9PSAnU2hhcmUgc2l6ZScgKS5mb3JFYWNoKCBzaGFyZU9wdCA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZGRPbkluZm8gPSB0aGlzLkN1cnJlbnRTaGFyZS5kYXRhLnByb2R1Y2VPcHRpb25zLmZpbmQoIHByb2R1Y2VPcHQgPT4gcHJvZHVjZU9wdC5zaGFyZW9wdGlvbmlkID09PSBzaGFyZU9wdC5pZCAmJiBwcm9kdWNlT3B0Lm5hbWUgPT09ICdvbmUnIClcblxuICAgICAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLmNzYUl0ZW0oIE9iamVjdC5hc3NpZ24oIGFkZE9uSW5mbywgeyBoZWFkaW5nOiBzaGFyZU9wdC5uYW1lIH0gKSApLFxuICAgICAgICAgICAgICAgIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMuYWRkT25JdGVtcyB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGluc2VydERlbGl2ZXJ5TWF0cml4KCkge1xuICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5kZWxpdmVyeU1hdHJpeCgge1xuICAgICAgICAgICAgICAgIGRlbGl2ZXJ5T3B0aW9uczogdGhpcy5DdXJyZW50U2hhcmUuZGF0YS5kZWxpdmVyeU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc2l6ZU9wdGlvbnM6IHRoaXMuQ3VycmVudFNoYXJlLmdldFNpemVPcHRpb25zKClcbiAgICAgICAgICAgIH0gKSxcbiAgICAgICAgICAgIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMuZGVsaXZlcnlNYXRyaXggfVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgaW5zZXJ0U2hhcmVEZXNjcmlwdGlvbiggc2hhcmUgKSB7XG4gICAgICAgIGNvbnN0IGRlbGl2ZXJ5T3B0cyA9IHRoaXMuQ3VycmVudFNoYXJlLmRhdGEuZGVsaXZlcnlPcHRpb25zLFxuICAgICAgICAgICAgc2hhcmVQcmljZSA9IHBhcnNlRmxvYXQoIHRoaXMuQ3VycmVudFNoYXJlLmRhdGEucHJvZHVjZU9wdGlvbnMuZmluZCggb3B0ID0+IG9wdC5wcm9tcHQgPSAnU2hhcmUgc2l6ZScgJiYgc2hhcmUubmFtZSA9PT0gb3B0Lm5hbWUgKS5wcmljZS5yZXBsYWNlKCckJywnJykgKSxcbiAgICAgICAgICAgIGxvd1ByaWNlID0gc2hhcmVQcmljZSArIHBhcnNlRmxvYXQoIHRoaXMuQ3VycmVudFNoYXJlLmRhdGEuZGVsaXZlcnlPcHRpb25zWzBdLnByaWNlLnJlcGxhY2UoJyQnLCcnKSApLFxuICAgICAgICAgICAgaGlnaFByaWNlID0gc2hhcmVQcmljZSArIHBhcnNlRmxvYXQoIHRoaXMuQ3VycmVudFNoYXJlLmRhdGEuZGVsaXZlcnlPcHRpb25zWyB0aGlzLkN1cnJlbnRTaGFyZS5kYXRhLmRlbGl2ZXJ5T3B0aW9ucy5sZW5ndGggLSAxIF0ucHJpY2UucmVwbGFjZSgnJCcsJycpICksXG4gICAgICAgICAgICBwcmljZVJhbmdlID0gYCQke2xvd1ByaWNlLnRvRml4ZWQoMil9IC0gJCR7aGlnaFByaWNlLnRvRml4ZWQoMil9YFxuXG4gICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLmNzYUl0ZW0oIE9iamVjdC5hc3NpZ24oIHNoYXJlLnNoYXJlRGVzY3JpcHRpb24sIHsgcHJpY2U6IHByaWNlUmFuZ2UgfSApICksXG4gICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLnNoYXJlRGVzY3JpcHRpb25zIH1cbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGluc2VydFNoYXJlRXhhbXBsZSggc2hhcmUgKSB7XG4gICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLnNoYXJlRXhhbXBsZSggc2hhcmUuc2hhcmVFeGFtcGxlICksXG4gICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLnNoYXJlRXhhbXBsZXMgfVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgb25TaWdudXBCdG5DbGljaygpIHsgdGhpcy5lbWl0KCAnbmF2aWdhdGUnLCAnc2lnbi11cCcgKSB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgcmVxdWlyZSgnLi91dGlsL0N1c3RvbUNvbnRlbnQnKS5wb3N0UmVuZGVyLmNhbGwodGhpcylcblxuICAgICAgICBpZiggd2luZG93LmxvY2F0aW9uLmhhc2ggKSB7XG4gICAgICAgICAgICB0aGlzLmVsc1sgdGhpcy5oYXNoVG9FbGVtZW50WyB3aW5kb3cubG9jYXRpb24uaGFzaC5zbGljZSgxKSBdIF0uc2Nyb2xsSW50b1ZpZXcoIHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0gKVxuICAgICAgICB9XG5cbiAgICAgICAgUHJvbWlzZS5hbGwoIFsgdGhpcy5DdXJyZW50U2hhcmUuZ2V0KCksIHRoaXMuU2hhcmVzLmdldCgpLCB0aGlzLlNoYXJlT3B0aW9ucy5nZXQoKSBdIClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0RGVsaXZlcnlNYXRyaXgoKVxuXG4gICAgICAgICAgICB0aGlzLlNoYXJlcy5kYXRhLmZvckVhY2goIHNoYXJlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydFNoYXJlRXhhbXBsZSggc2hhcmUgKVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0U2hhcmVEZXNjcmlwdGlvbiggc2hhcmUgKVxuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0QWRkT25EZXNjcmlwdGlvbnMoKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgY3NhSXRlbTogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvQ3NhSXRlbScpLFxuICAgICAgICBkZWxpdmVyeU1hdHJpeDogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvZGVsaXZlcnlNYXRyaXgnKSxcbiAgICAgICAgc2hhcmVFeGFtcGxlOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9TaGFyZUV4YW1wbGUnKVxuICAgIH1cblxufSApIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgTWVtYmVyRm9vZE9taXNzaW9uOiByZXF1aXJlKCcuLi9tb2RlbHMvTWVtYmVyRm9vZE9taXNzaW9uJyksXG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5maWVsZHMuZm9yRWFjaCggZmllbGQgPT4ge1xuICAgICAgICAgICAgaWYoIGZpZWxkLnR5cGUgIT09ICdzZWxlY3QnICkgdGhpcy5lbHNbIGZpZWxkLm5hbWUgXS50ZXh0Q29udGVudCA9ICcnXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMuZWxzLmluZm9UYWJsZS5xdWVyeVNlbGVjdG9yQWxsKCcuZWRpdGVkJykuZm9yRWFjaCggZWwgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZSgnZWRpdGVkJykgKVxuXG4gICAgICAgIHRoaXMuRm9vZE9taXNzaW9uLmNsZWFyKClcblxuICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QuYWRkKCAnZmQtaGlkZGVuJyApXG4gICAgICAgIHRoaXMuZWxzLmVkaXRTdW1tYXJ5LmNsYXNzTGlzdC5hZGQoICdmZC1oaWRkZW4nIClcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIG9ucGF5bWVudHBsYW46ICdjaGFuZ2UnLFxuICAgICAgICByZXNldEJ0bjogJ2NsaWNrJyxcbiAgICAgICAgc2F2ZUJ0bjogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBmaWVsZHM6IFtcbiAgICAgICAgeyB0YWJsZTogJ3BlcnNvbicsIHR5cGU6ICd0ZXh0JywgbmFtZTogJ25hbWUnLCBsYWJlbDogJ05hbWUnIH0sXG4gICAgICAgIHsgdGFibGU6ICdwZXJzb24nLCB0eXBlOiAndGV4dCcsIG5hbWU6ICdlbWFpbCcsIGxhYmVsOiAnRW1haWwnIH0sXG4gICAgICAgIHsgdGFibGU6ICdwZXJzb24nLCB0eXBlOiAndGV4dCcsIG5hbWU6ICdzZWNvbmRhcnlFbWFpbCcsIGxhYmVsOiAnU2Vjb25kYXJ5IEVtYWlsJyB9LFxuICAgICAgICB7IHRhYmxlOiAnbWVtYmVyJywgdHlwZTogJ3RleHQnLCBuYW1lOiAncGhvbmVudW1iZXInLCBsYWJlbDogJ1Bob25lJyB9LFxuICAgICAgICB7IHRhYmxlOiAnbWVtYmVyJywgdHlwZTogJ3RleHQnLCBuYW1lOiAnemlwY29kZScsIGxhYmVsOiAnWmlwIENvZGUnIH0sXG4gICAgICAgIHsgdGFibGU6ICdtZW1iZXInLCB0eXBlOiAndGV4dCcsIG5hbWU6ICdhZGRyZXNzJywgbGFiZWw6ICdBZGRyZXNzJyB9LFxuICAgICAgICB7IHRhYmxlOiAnbWVtYmVyRm9vZE9taXNzaW9uJywgdHlwZTogJ3NlbGVjdCcsIG5hbWU6ICduZXZlclJlY2VpdmUnLCBsYWJlbDogJ1ZlZ2V0YWJsZSB0byBOZXZlciBSZWNlaXZlJyB9LFxuICAgICAgICB7IHRhYmxlOiAnbWVtYmVyJywgdHlwZTogJ3NlbGVjdCcsIG5hbWU6ICdvbnBheW1lbnRwbGFuJywgbGFiZWw6ICdPbiBQYXltZW50IFBsYW4nIH1cbiAgICBdLFxuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4geyBmaWVsZHM6IHRoaXMuZmllbGRzIH1cbiAgICB9LFxuXG4gICAgaGFuZGxlQmx1ciggZSApIHtcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldCxcbiAgICAgICAgICAgICAgZmllbGQgPSB0aGlzLmZpZWxkcy5maW5kKCBmaWVsZCA9PiBmaWVsZC5uYW1lID09PSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpICksXG4gICAgICAgICAgICAgIGZpZWxkVmFsdWUgPSBlbC50ZXh0Q29udGVudC50cmltKCksXG4gICAgICAgICAgICAgIG1vZGVsVmFsdWUgPSB0aGlzLm1vZGVsWyBmaWVsZC50YWJsZSBdLmRhdGFbIGZpZWxkLm5hbWUgXSB8fCAnJ1xuXG4gICAgICAgIGlmKCBmaWVsZFZhbHVlICE9PSBtb2RlbFZhbHVlICkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZWRpdGVkJylcbiAgICAgICAgICAgIHRoaXMuZWRpdGVkRmllbGRzWyBmaWVsZC5uYW1lIF0gPSBmaWVsZFZhbHVlIHx8IG51bGxcbiAgICAgICAgICAgIHRoaXMuc2hvd0VkaXRTdW1tYXJ5KClcbiAgICAgICAgICAgIHRoaXMuZW1pdCggJ2VkaXRlZCcgKVxuICAgICAgICB9IGVsc2UgaWYoIHRoaXMuZWRpdGVkRmllbGRzWyBmaWVsZC5uYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2VkaXRlZCcpXG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGQubmFtZSBdID0gdW5kZWZpbmVkXG4gICAgICAgICAgICB0aGlzLnNob3dFZGl0U3VtbWFyeSgpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFzRWRpdHMoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyggdGhpcy5lZGl0ZWRGaWVsZHMgKS5maWx0ZXIoIGtleSA9PiB0aGlzLmVkaXRlZEZpZWxkc1sga2V5IF0gIT09IHVuZGVmaW5lZCApLmxlbmd0aCA+IDBcbiAgICB9LFxuXG4gICAgaGFuZGxlRWRpdCggZSApIHsgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LnJlbW92ZSgnZmQtaGlkZGVuJykgfSxcblxuICAgIGhhbmRsZU9taXNzaW9uQ2hhbmdlKCBlLCBtICkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBtLnZhbCgpLFxuICAgICAgICAgICAgbmFtZSA9IHZhbHVlcy5sZW5ndGggPyBtLnZhbCgpWzBdLm5hbWUgOiAnJyxcbiAgICAgICAgICAgIG9yaWdpbmFsTmFtZSA9IHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmRhdGEubGVuZ3RoID8gdGhpcy5NZW1iZXJGb29kT21pc3Npb24uZGF0YVswXS5uYW1lIDogJydcbiAgICAgICBcbiAgICAgICAgaWYoIG9yaWdpbmFsTmFtZSAhPT0gbmFtZSApIHtcbiAgICAgICAgICAgIHRoaXMuZWRpdGVkRmllbGRzLm5ldmVyUmVjZWl2ZSA9IG5hbWVcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZWRpdGVkJylcbiAgICAgICAgICAgIHRoaXMuc2hvd0VkaXRTdW1tYXJ5KClcbiAgICAgICAgfSBlbHNlIGlmKCB0aGlzLmVkaXRlZEZpZWxkcy5uZXZlclJlY2VpdmUgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHRoaXMuZWRpdGVkRmllbGRzLm5ldmVyUmVjZWl2ZSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgdGhpcy5zaG93RWRpdFN1bW1hcnkoKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uT25wYXltZW50cGxhbkNoYW5nZSggZSApIHtcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldCxcbiAgICAgICAgICAgIGZpZWxkVmFsdWUgPSBCb29sZWFuKCBlbC52YWx1ZSA9PT0gXCJ0cnVlXCIgKSxcbiAgICAgICAgICAgIG1vZGVsVmFsdWUgPSB0aGlzLm1vZGVsLm1lbWJlci5kYXRhLm9ucGF5bWVudHBsYW5cblxuICAgICAgICBpZiggbW9kZWxWYWx1ZSAhPT0gZmllbGRWYWx1ZSApIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2VkaXRlZCcpXG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkc1sgJ29ucGF5bWVudHBsYW4nIF0gPSBCb29sZWFuKCBlbC52YWx1ZSA9PT0gXCJ0cnVlXCIgKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdlZGl0ZWQnKVxuICAgICAgICAgICAgdGhpcy5zaG93RWRpdFN1bW1hcnkoKVxuICAgICAgICB9IGVsc2UgaWYoIHRoaXMuZWRpdGVkRmllbGRzLm9ucGF5bWVudHBsYW4gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2VkaXRlZCcpXG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkcy5vbnBheW1lbnRwbGFuID0gdW5kZWZpbmVkXG4gICAgICAgICAgICB0aGlzLnNob3dFZGl0U3VtbWFyeSgpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25SZXNldEJ0bkNsaWNrKCkgeyB0aGlzLnJlc2V0KCB0aGlzLm1vZGVsICkgfSxcblxuICAgIG9uU2F2ZUJ0bkNsaWNrKCkge1xuICAgICAgICBjb25zdCByZXNvdXJjZXNUb1VwZGF0ZSA9IFsgXVxuXG4gICAgICAgIHRoaXMubWVtYmVyRGF0YSA9IHsgfVxuICAgICAgICB0aGlzLnBlcnNvbkRhdGEgPSB7IH1cbiAgICAgICAgdGhpcy5tZW1iZXJGb29kT21pc3Npb25EYXRhID0geyB9XG5cbiAgICAgICAgdGhpcy5maWVsZHMuZm9yRWFjaCggZmllbGQgPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMuZWRpdGVkRmllbGRzWyBmaWVsZC5uYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICB0aGlzWyBgJHtmaWVsZC50YWJsZX1EYXRhYCBdWyBmaWVsZC5uYW1lIF0gPSB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGQubmFtZSBdXG4gICAgICAgICAgICAgICAgaWYoIHJlc291cmNlc1RvVXBkYXRlLmluZGV4T2YoIGZpZWxkLnRhYmxlICkgPT09IC0xICkgcmVzb3VyY2VzVG9VcGRhdGUucHVzaCggZmllbGQudGFibGUgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoIHJlc291cmNlc1RvVXBkYXRlLm1hcCggcmVzb3VyY2UgPT4gdGhpc1sgYHVwZGF0ZSR7cmVzb3VyY2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyByZXNvdXJjZS5zbGljZSgxKX1gIF0oKSApIClcbiAgICAgICAgLnRoZW4oICgpID0+IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZWxzLnJlc2V0QnRuLmNsYXNzTGlzdC5hZGQoJ2ZkLWhpZGRlbicpXG4gICAgICAgICAgICB0aGlzLmVscy5lZGl0U3VtbWFyeS5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuXG4gICAgICAgICAgICB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnc3VjY2VzcycsICdDdXN0b21lciBJbmZvIFVwZGF0ZWQhJyApXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSggdGhpcy5tb2RlbCApXG4gICAgICAgIH0gKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVRhYmxlKCkge1xuICAgICAgICB0aGlzLmZpZWxkcy5mb3JFYWNoKCBmaWVsZCA9PiB7XG4gICAgICAgICAgICBpZiggZmllbGQudHlwZSAhPT0gJ3NlbGVjdCcgKSB0aGlzLmVsc1sgZmllbGQubmFtZSBdLnRleHRDb250ZW50ID0gdGhpcy5tb2RlbFsgZmllbGQudGFibGUgXS5kYXRhWyBmaWVsZC5uYW1lIF1cbiAgICAgICAgfSApXG5cbiAgICAgICAgaWYoIHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmRhdGEubGVuZ3RoICkge1xuICAgICAgICAgICAgY29uc3QgZGF0dW0gPSB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5kYXRhWzBdLFxuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5Gb29kT21pc3Npb24uRm9vZHMuZGF0YS5maW5kSW5kZXgoIGZvb2QgPT5cbiAgICAgICAgICAgICAgICAgICAgKCBmb29kLnByb2R1Y2VpZCA9PSBkYXR1bS5wcm9kdWNlaWQgJiYgZm9vZC5wcm9kdWNlaWQgIT09IG51bGwgKSB8fFxuICAgICAgICAgICAgICAgICAgICAoIGZvb2QucHJvZHVjZWZhbWlseWlkID09IGRhdHVtLnByb2R1Y2VmYW1pbHlpZCAmJiBkYXR1bS5wcm9kdWNlaWQgPT09IG51bGwgKSApXG5cbiAgICAgICAgICAgIGlmKCBpbmRleCAhPT0gLTEgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9vZERhdHVtID0gdGhpcy5Gb29kT21pc3Npb24uRm9vZHMuZGF0YVsgaW5kZXggXVxuICAgICAgICAgICAgICAgIGRhdHVtLm5hbWUgPSBmb29kRGF0dW0ubmFtZVxuICAgICAgICAgICAgICAgIHRoaXMuRm9vZE9taXNzaW9uLm1zLnNldFNlbGVjdGlvbiggWyBPYmplY3QuYXNzaWduKCB7fSwgZm9vZERhdHVtLCB7IGlkOiBpbmRleCB9ICkgXSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVscy5vbnBheW1lbnRwbGFuLnNlbGVjdGVkSW5kZXggPSB0aGlzLm1vZGVsLm1lbWJlci5kYXRhLm9ucGF5bWVudHBsYW4gPyAwIDogMVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuXG4gICAgICAgIHRoaXMuRm9vZE9taXNzaW9uID0gdGhpcy5mYWN0b3J5LmNyZWF0ZSggJ2Zvb2RPbWlzc2lvbicsIHsgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5uZXZlclJlY2VpdmUsIG1ldGhvZDogJ2FmdGVyJyB9IH0gKVxuXG4gICAgICAgIHRoaXMuZWxzLm5ldmVyUmVjZWl2ZS5yZW1vdmUoKVxuXG4gICAgICAgIHRoaXMuRm9vZE9taXNzaW9uLmluaXRpYWxpemVGb29kT21pc3Npb24oKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5Gb29kT21pc3Npb24ucmVtb3ZlSGVscGVyVGV4dCgpXG4gICAgICAgICAgICB0aGlzLkZvb2RPbWlzc2lvbi51bnN0eWxlKClcblxuICAgICAgICAgICAgdGhpcy5Gb29kT21pc3Npb24ub24oICdzZWxlY3Rpb25DaGFuZ2UnLCAoIGUsIG0gKSA9PiB0aGlzLmhhbmRsZU9taXNzaW9uQ2hhbmdlKCBlLCBtICkgKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLmVscy5pbmZvVGFibGUucXVlcnlTZWxlY3RvckFsbCgnZGl2W2NvbnRlbnRlZGl0YWJsZT10cnVlXScpLmZvckVhY2goIGVsID0+IHtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoICdibHVyJywgZSA9PiB0aGlzLmhhbmRsZUJsdXIoZSkgKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLm9uKCAnZWRpdGVkJywgZSA9PiB0aGlzLmhhbmRsZUVkaXQoIGUgKSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgcmVzZXQoIGN1c3RvbWVyICkge1xuICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICB0aGlzLmVscy5lZGl0U3VtbWFyeS5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICB0aGlzLnVwZGF0ZSggY3VzdG9tZXIgKVxuICAgIH0sXG5cbiAgICBzaG93RWRpdFN1bW1hcnkoKSB7XG4gICAgICAgIGNvbnN0IGhhc0VkaXRzID0gdGhpcy5oYXNFZGl0cygpXG5cbiAgICAgICAgdGhpcy5lbHMuY2hhbmdlcy5pbm5lckhUTUwgPSAnJ1xuICAgICAgICBcbiAgICAgICAgdGhpcy5maWVsZHMuZm9yRWFjaCggZmllbGQgPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMuZWRpdGVkRmllbGRzWyBmaWVsZC5uYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICBsZXQgb2xkVmFsdWUgPSAoIGZpZWxkLm5hbWUgPT09ICduZXZlclJlY2VpdmUnIClcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5kYXRhLmxlbmd0aCA/IHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmRhdGFbMF0ubmFtZSA6ICcnXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5tb2RlbFsgZmllbGQudGFibGUgXS5kYXRhWyBmaWVsZC5uYW1lIF1cbiAgICAgICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGQubmFtZSBdXG5cbiAgICAgICAgICAgICAgICBpZiggISBvbGRWYWx1ZSAmJiBmaWVsZC5uYW1lICE9PSAnb25wYXltZW50cGxhbicgKSBvbGRWYWx1ZSA9ICdFTVBUWSdcbiAgICAgICAgICAgICAgICBpZiggISBuZXdWYWx1ZSAmJiBmaWVsZC5uYW1lICE9PSAnb25wYXltZW50cGxhbicgKSBuZXdWYWx1ZSA9ICdFTVBUWSdcblxuICAgICAgICAgICAgICAgIGlmKCBmaWVsZC5uYW1lID09PSAnb25wYXltZW50cGxhbicgKSB7XG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gb2xkVmFsdWUudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiggb2xkVmFsdWUgPT09ICdFTVBUWScgJiYgbmV3VmFsdWUgPT09ICdFTVBUWScgKSByZXR1cm5cblxuICAgICAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSggeyBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLmNoYW5nZXMgfSwgdGVtcGxhdGU6IHRoaXMuVGVtcGxhdGVzLmZpZWxkRWRpdCggeyBsYWJlbDogZmllbGQubGFiZWwsIG9sZFZhbHVlLCBuZXdWYWx1ZSB9ICkgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMuZWxzLnJlc2V0QnRuLmNsYXNzTGlzdC50b2dnbGUoICdmZC1oaWRkZW4nLCAhaGFzRWRpdHMgKVxuICAgICAgICB0aGlzLmVscy5lZGl0U3VtbWFyeS5jbGFzc0xpc3QudG9nZ2xlKCAnZmQtaGlkZGVuJywgIWhhc0VkaXRzIClcbiAgICB9LFxuXG4gICAgVGVtcGxhdGVzOiB7XG4gICAgICAgIGZpZWxkRWRpdDogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvRmllbGRFZGl0JylcbiAgICB9LFxuICAgIFxuICAgIHVwZGF0ZSggY3VzdG9tZXIgKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKVxuXG4gICAgICAgIHRoaXMubW9kZWwgPSBjdXN0b21lclxuICAgICAgICB0aGlzLmVkaXRlZEZpZWxkcyA9IHsgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5nZXQoIHsgcXVlcnk6IHsgbWVtYmVyaWQ6IGN1c3RvbWVyLm1lbWJlci5kYXRhLmlkIH0gfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLnBvcHVsYXRlVGFibGUoKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLnNob3coKSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgfSxcblxuICAgIHVwZGF0ZU1lbWJlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWGhyKCB7IG1ldGhvZDogJ1BBVENIJywgaWQ6IHRoaXMubW9kZWwubWVtYmVyLmRhdGEuaWQsIHJlc291cmNlOiAnbWVtYmVyJywgZGF0YTogSlNPTi5zdHJpbmdpZnkoIHRoaXMubWVtYmVyRGF0YSApIH0gKVxuICAgICAgICAudGhlbiggKCkgPT5cbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5tZW1iZXJEYXRhICkuZm9yRWFjaCggZmllbGQgPT4gdGhpcy5tb2RlbC5tZW1iZXIuZGF0YVsgZmllbGQgXSA9IHRoaXMubWVtYmVyRGF0YVsgZmllbGQgXSApXG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgdXBkYXRlTWVtYmVyRm9vZE9taXNzaW9uKCkge1xuICAgICAgICBjb25zdCBmb29kSWR4ID0gdGhpcy5Gb29kT21pc3Npb24uRm9vZHMuZGF0YS5maW5kSW5kZXgoIGRhdHVtID0+IGRhdHVtLm5hbWUgPT0gdGhpcy5tZW1iZXJGb29kT21pc3Npb25EYXRhLm5ldmVyUmVjZWl2ZSApXG5cbiAgICAgICAgaWYoIGZvb2RJZHggPT09IC0xICkgcmV0dXJuIHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmRlbGV0ZSggdGhpcy5NZW1iZXJGb29kT21pc3Npb24uZGF0YVswXS5pZCApXG5cbiAgICAgICAgY29uc3QgbXNEYXRhID0gdGhpcy5Gb29kT21pc3Npb24uRm9vZHMuZGF0YVsgZm9vZElkeCBdLFxuICAgICAgICAgICAgZGF0YSA9IHsgbWVtYmVyaWQ6IHRoaXMubW9kZWwubWVtYmVyLmRhdGEuaWQsIHByb2R1Y2VpZDogbXNEYXRhLnByb2R1Y2VpZCwgcHJvZHVjZWZhbWlseWlkOiBtc0RhdGEucHJvZHVjZWlkID8gbnVsbCA6IG1zRGF0YS5wcm9kdWNlZmFtaWx5aWQgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5kYXRhLmxlbmd0aFxuICAgICAgICAgICAgPyB0aGlzLk1lbWJlckZvb2RPbWlzc2lvbi5wYXRjaCggdGhpcy5NZW1iZXJGb29kT21pc3Npb24uZGF0YVswXS5pZCwgZGF0YSApXG4gICAgICAgICAgICA6IHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLnBvc3QoIGRhdGEgKVxuICAgIH0sXG5cbiAgICB1cGRhdGVQZXJzb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhociggeyBtZXRob2Q6ICdQQVRDSCcsIGlkOiB0aGlzLm1vZGVsLnBlcnNvbi5kYXRhLmlkLCByZXNvdXJjZTogJ3BlcnNvbicsIGRhdGE6IEpTT04uc3RyaW5naWZ5KCB0aGlzLnBlcnNvbkRhdGEgKSB9IClcbiAgICAgICAgLnRoZW4oICgpID0+XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMucGVyc29uRGF0YSApLmZvckVhY2goIGZpZWxkID0+IHRoaXMubW9kZWwucGVyc29uLmRhdGFbIGZpZWxkIF0gPSB0aGlzLnBlcnNvbkRhdGFbIGZpZWxkIF0gKVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfVxuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiggeyB9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCByZXF1aXJlKCcuL1N1Ym1pdHRlcicpLCB7XG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgY2FuY2VsQnRuOiAnY2xpY2snLFxuICAgICAgICBzdWJtaXRCdG46ICdjbGljaycsXG4gICAgfSxcblxuICAgIG9uQ2FuY2VsQnRuQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlKClcbiAgICB9LFxuXG4gICAgb25TdWJtaXRCdG5DbGljaygpIHtcbiAgICAgICAgaWYoIHRoaXMuc3VibWl0dGluZyApIHJldHVyblxuICAgICAgICB0aGlzLm9uU3VibWl0U3RhcnQoKVxuICAgICAgICB0aGlzLnN1Ym1pdCgpXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMub25TdWJtaXRFbmQoKSApIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuZGVsZXRlKCkgKVxuICAgICAgICAuY2F0Y2goIGUgPT4gdGhpcy5oYW5kbGVTdWJtaXNzaW9uRXJyb3IoZSkgKVxuICAgIH0sXG5cbiAgICBzdWJtaXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmRlbGV0ZSgpXG4gICAgICAgIC50aGVuKCBrZXlWYWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoICdtb2RlbERlbGV0ZWQnLCB0aGlzLm1vZGVsLmRhdGEgKVxuICAgICAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ3N1Y2Nlc3MnLCB0aGlzLnRvYXN0U3VjY2VzcyB8fCBgU3VjY2Vzc2AgKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIH0gKVxuICAgIH1cblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUoIE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBJY29uczoge1xuICAgICAgICBlcnJvcjogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbGliL2Vycm9yJykoKSxcbiAgICAgICAgc3VjY2VzczogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbGliL2NoZWNrbWFyaycpKClcbiAgICB9LFxuICAgIFxuICAgIGJpbmRFdmVudHMoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24gKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXAgKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlIClcbiAgICB9LFxuXG4gICAgbGlzdGVuKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycysrXG5cbiAgICAgICAgaWYoIHRoaXMubGlzdGVuZXJzID09PSAxICkgdGhpcy5iaW5kRXZlbnRzKClcbiAgICB9LFxuXG4gICAgbmFtZTogJ0RyYWdnZXInLFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSAwXG5cbiAgICAgICAgdGhpcy5vbk1vdXNlRG93biA9IGUgPT4gdGhpcy5lbWl0KCdtb3VzZWRvd24nLCBlKVxuICAgICAgICB0aGlzLm9uTW91c2VVcCA9IGUgPT4gdGhpcy5lbWl0KCdtb3VzZXVwJywgZSlcbiAgICAgICAgdGhpcy5vbk1vdXNlTW92ZSA9IGUgPT4gdGhpcy5lbWl0KCdtb3VzZW1vdmUnLCBlKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHN0b3BMaXN0ZW5pbmcoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLS1cblxuICAgICAgICBpZiggdGhpcy5saXN0ZW5lcnMgPT09IDAgKSB0aGlzLnVuYmluZEV2ZW50cygpXG4gICAgfSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9EcmFnZ2VyJyksXG5cbiAgICB1bmJpbmRFdmVudHMoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24gKVxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXAgKVxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlIClcblxuICAgIH1cblxufSApLCB7IH0gKS5jb25zdHJ1Y3RvcigpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICAkOiByZXF1aXJlKCdqcXVlcnknKSxcblxuICAgIEZvb2RzOiByZXF1aXJlKCcuLi9tb2RlbHMvRm9vZCcpLFxuXG4gICAgY2xlYXIoKSB7IHRoaXMubXMuY2xlYXIoKSB9LFxuXG4gICAgZ2V0TWFnaWNTdWdnZXN0KCkgeyByZXR1cm4gdGhpcy5tcyB9LFxuXG4gICAgaW5pdGlhbGl6ZUZvb2RPbWlzc2lvbigpIHsgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuRm9vZHMuZ2V0KClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIGlmKCAhIHRoaXMuRm9vZHMuZGF0YS5sZW5ndGggKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuRm9vZHMuZGF0YS5tYXAoICggZm9vZCwgaSApID0+IE9iamVjdC5hc3NpZ24oIHsgaWQ6IGkgfSwgZm9vZCApICksXG4gICAgICAgICAgICAgICAgICByZW5kZXJlciA9ICBkYXRhID0+IFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2R1Y2VpZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgPHNwYW4gY2xhc3M9XCIke2RhdGEucHJvZHVjZWZhbWlseWlkID8gJ3Byb2R1Y2UtaW4tZmFtaWx5JyA6ICcnfVwiPiR7ZGF0YS5uYW1lfTwvc3Bhbj5gXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGA8c3BhbiBjbGFzcz1cInByb2R1Y2UtZmFtaWx5XCI+QWxsICR7ZGF0YS5uYW1lfTwvc3Bhbj5gXG5cbiAgICAgICAgICAgIHRoaXMubXMgPSB0aGlzLiQoIHRoaXMuZWxzLmNvbnRhaW5lciApLm1hZ2ljU3VnZ2VzdCgge1xuICAgICAgICAgICAgICAgIGFsbG93RnJlZUVudHJpZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICAgICAgbWF4RHJvcEhlaWdodDogMjAwLFxuICAgICAgICAgICAgICAgIG1heFNlbGVjdGlvbjogMSxcbiAgICAgICAgICAgICAgICByZW5kZXJlcixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25SZW5kZXJlcjogcmVuZGVyZXIsXG4gICAgICAgICAgICAgICAgdmFsdWVGaWVsZDogJ2lkJ1xuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgIHRoaXMubXMudmFsID0gdmFsdWUgPT5cbiAgICAgICAgICAgICAgICB2YWx1ZSA/IHRoaXMubXMuc2V0U2VsZWN0aW9uKCB2YWx1ZSApIDogdGhpcy5tcy5nZXRTZWxlY3Rpb24oKVxuXG4gICAgICAgICAgICB0aGlzLiQodGhpcy5tcykub24oICdzZWxlY3Rpb25jaGFuZ2UnLCAoIGUsIG0gKSA9PiB0aGlzLmVtaXQoICdzZWxlY3Rpb25DaGFuZ2UnLCBlLCBtICkgKVxuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgfSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG4gICAgfSxcblxuICAgIHJlbW92ZUhlbHBlclRleHQoKSB7IHRoaXMubXMuaGVscGVyWzBdLnJlbW92ZSgpIH0sXG5cbiAgICBzZXRQbGFjZWhvbGRlciggdGV4dCApIHsgdGhpcy5tcy5pbnB1dC5hdHRyKCAncGxhY2Vob2xkZXInLCB0ZXh0ICkgfSxcblxuICAgIHVuc3R5bGUoKSB7IHRoaXMubXMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdmb3JtLWNvbnRyb2wnKSB9XG5cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG5cbn0gKVxuIiwiY29uc3QgU3VibWl0dGVyID0gcmVxdWlyZSgnLi9TdWJtaXR0ZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHsgfSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwgU3VibWl0dGVyLCB7XG5cbiAgICBldmVudHM6IE9iamVjdC5hc3NpZ24oIFN1Ym1pdHRlci5ldmVudHMsIHsgcHJldmlld0J0bjogJ2NsaWNrJyB9ICksXG5cbiAgICBvblByZXZpZXdCdG5DbGljayggZSApIHtcbiAgICAgICAgZS50YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnNyYyA9IHRoaXMuRm9ybWF0LkltYWdlU3JjKCBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcudmFsdWUgKVxuICAgIH0sXG5cbiAgICBjbGVhcigpIHsgdGhpcy5pbnB1dEVscy5mb3JFYWNoKCBlbCA9PiBlbC52YWx1ZSA9ICcnICkgfSxcblxuICAgIGdldEVsZW1lbnRWYWx1ZSggZWwsIGF0dHJpYnV0ZSApIHtcbiAgICAgICAgaWYoIGF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkIHx8ICggIWF0dHJpYnV0ZS5mayAmJiBhdHRyaWJ1dGUucmFuZ2UgJiYgdHlwZW9mIGF0dHJpYnV0ZS5yYW5nZSA9PT0gJ3N0cmluZycgKSApIHJldHVybiBlbC52YWx1ZVxuICAgIH0sXG5cbiAgICBnZXRGb3JtVmFsdWVzKCkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzXG5cbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLnJlZHVjZXIoIE9iamVjdC5rZXlzKCB0aGlzLmVscyApLCBrZXkgPT5cbiAgICAgICAgICAgIC8oSU5QVVR8U0VMRUNUfFRFWFRBUkVBKS8udGVzdCggdGhpcy5lbHNbIGtleSBdLnRhZ05hbWUgKVxuICAgICAgICAgICAgICAgID8geyBba2V5XTogdGhpcy5nZXRFbGVtZW50VmFsdWUoIHRoaXMuZWxzWyBrZXkgXSwgYXR0cmlidXRlcy5maW5kKCBhdHRyaWJ1dGUgPT4gYXR0cmlidXRlLm5hbWUgPT09IGtleSApICkgfVxuICAgICAgICAgICAgICAgIDogeyB9XG4gICAgICAgIClcblxuICAgICAgICBhdHRyaWJ1dGVzLmZvckVhY2goIGF0dHJpYnV0ZSA9PiB7XG4gICAgICAgICAgICBpZiggYXR0cmlidXRlLmZrICkgeyBkYXRhWyBhdHRyaWJ1dGUuZmsgXSA9IHRoaXMudmlld3NbIGF0dHJpYnV0ZS5mayBdLmdldFNlbGVjdGVkSWQoKSB9XG4gICAgICAgICAgICBlbHNlIGlmKCB0eXBlb2YgYXR0cmlidXRlLnJhbmdlID09PSBcIm9iamVjdFwiICkgeyBkYXRhWyBhdHRyaWJ1dGUubmFtZSBdID0gdGhpcy52aWV3c1sgYXR0cmlidXRlLm5hbWUgXS5nZXRGb3JtVmFsdWVzKCkgfVxuICAgICAgICAgICAgZWxzZSBpZiggYXR0cmlidXRlLnJhbmdlID09PSBcIkxpc3RcIiApIHtcbiAgICAgICAgICAgICAgICBkYXRhWyBhdHRyaWJ1dGUubmFtZSBdID0gQXJyYXkuZnJvbSggdGhpcy52aWV3c1sgYXR0cmlidXRlLm5hbWUgXS5lbHMubGlzdC5jaGlsZHJlbiApLm1hcCggaXRlbUVsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBhdHRyaWJ1dGUuaXRlbVJhbmdlID09PSAnVGV4dCcgPyAnLml0ZW0gdGV4dGFyZWEnIDogJy5pdGVtIGlucHV0J1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRFbGVtZW50VmFsdWUoIGl0ZW1FbC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApLCB7IHJhbmdlOiBhdHRyaWJ1dGUuaXRlbVJhbmdlIH0gKVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gZGF0YVxuICAgIH0sXG5cbiAgICBoYW5kbGVWYWxpZGF0aW9uRXJyb3IoIGF0dHIgKSB7XG4gICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdlcnJvcicsIGF0dHIuZXJyb3IgKVxuICAgICAgICB0aGlzLmVsc1sgYXR0ci5uYW1lIF0uY2xhc3NMaXN0LmFkZCggJ2Vycm9yJyApXG4gICAgICAgIHRoaXMub25TdWJtaXRFbmQoKVxuICAgIH0sXG5cbiAgICBpbml0VHlwZUFoZWFkcygpIHtcbiAgICAgICAgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLmZvckVhY2goIGF0dHJpYnV0ZSA9PiB7XG4gICAgICAgICAgICBpZiggYXR0cmlidXRlLmZrICkgdGhpcy52aWV3c1sgYXR0cmlidXRlLmZrIF0uc2V0UmVzb3VyY2UoIGF0dHJpYnV0ZS5mayApLmluaXRBdXRvQ29tcGxldGUoIHRoaXMubW9kZWwuZ2l0KCBhdHRyaWJ1dGUuZmsgKSApXG4gICAgICAgICAgICBlbHNlIGlmKCB0eXBlb2YgYXR0cmlidXRlLnJhbmdlID09PSBcIm9iamVjdFwiICkge1xuICAgICAgICAgICAgICAgIHRoaXMuVmlld3NbIGF0dHJpYnV0ZS5uYW1lIF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc2FsbG93RW50ZXJLZXlTdWJtaXNzaW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKCBPYmplY3QuYXNzaWduKCB0aGlzLm1vZGVsLmRhdGFbIGF0dHJpYnV0ZS5uYW1lIF0sIHsgbmVzdGVkOiAhdGhpcy5tb2RlbC5naXQoJ25lc3RlZCcpIH0gKSwgeyBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGUucmFuZ2UgfSApLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZU9wdHM6IHsgaGlkZUJ1dHRvblJvdzogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICBWaWV3czogeyB9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZWxzWyBhdHRyaWJ1dGUubmFtZSBdXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZWxzWyBhdHRyaWJ1dGUubmFtZSBdXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ2aWV3RWxlbWVudHMgPSBbIHsgZWwsIHZpZXc6ICdmb3JtJywgbmFtZTogYXR0cmlidXRlLm5hbWUgfSBdXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTdWJ2aWV3cygpXG4gICAgICAgICAgICB9IGVsc2UgaWYoIGF0dHJpYnV0ZS5yYW5nZSA9PT0gXCJMaXN0XCIgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbkRhdGEgPSB0aGlzLm1vZGVsLmdpdCggYXR0cmlidXRlLm5hbWUgKSA/IHRoaXMubW9kZWwuZ2l0KCBhdHRyaWJ1dGUubmFtZSApLm1hcCggZGF0dW0gPT4gKCB7IHZhbHVlOiBkYXR1bSB9ICkgKSA6IFsgXTtcblxuICAgICAgICAgICAgICAgIHRoaXMuVmlld3NbIGF0dHJpYnV0ZS5uYW1lIF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLm1vZGVsICkuY29uc3RydWN0b3IoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IE9iamVjdC5jcmVhdGUoIHRoaXMuTW9kZWwgKS5jb25zdHJ1Y3RvciggY29sbGVjdGlvbkRhdGEsIHsgbWV0YTogeyBrZXk6ICd2YWx1ZScgfSB9ICksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RvY3VtZW50TGlzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6ICdsaXN0SXRlbSdcbiAgICAgICAgICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgICAgICAgICBpdGVtVGVtcGxhdGU6IGRhdHVtID0+IFJlZmxlY3QuYXBwbHkoIHRoaXMuRm9ybWF0LkdldEZvcm1GaWVsZCwgdGhpcy5Gb3JtYXQsIFsgeyByYW5nZTogYXR0cmlidXRlLml0ZW1SYW5nZSB9LCBkYXR1bS52YWx1ZSBdIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsc1sgYXR0cmlidXRlLm5hbWUgXVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmVsc1sgYXR0cmlidXRlLm5hbWUgXVxuICAgICAgICAgICAgICAgIHRoaXMuc3Vidmlld0VsZW1lbnRzID0gWyB7IGVsLCB2aWV3OiAnbGlzdCcsIG5hbWU6IGF0dHJpYnV0ZS5uYW1lIH0gXVxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU3Vidmlld3MoKVxuICAgICAgICAgICAgICAgIHRoaXMudmlld3NbIGF0dHJpYnV0ZS5uYW1lIF0ub24oICdhZGRDbGlja2VkJywgKCkgPT4gdGhpcy52aWV3c1sgYXR0cmlidXRlLm5hbWUgXS5hZGQoIHsgdmFsdWU6ICcnIH0gKSApXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3c1sgYXR0cmlidXRlLm5hbWUgXS5vbiggJ2RlbGV0ZUNsaWNrZWQnLCBkYXR1bSA9PiB0aGlzLnZpZXdzWyBhdHRyaWJ1dGUubmFtZSBdLnJlbW92ZSggZGF0dW0gKSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBzdWJtaXQoKSB7XG4gICAgICAgIGlmKCAhIHRoaXMubW9kZWwudmFsaWRhdGUoIHRoaXMuZ2V0Rm9ybVZhbHVlcygpICkgKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblxuICAgICAgICBjb25zdCBpc1Bvc3QgPSAhQm9vbGVhbiggdGhpcy5tb2RlbC5kYXRhWyB0aGlzLmtleSBdICApXG5cbiAgICAgICAgcmV0dXJuICggaXNQb3N0ID8gdGhpcy5tb2RlbC5wb3N0KCkgOiB0aGlzLm1vZGVsLnB1dCggdGhpcy5tb2RlbC5kYXRhWyB0aGlzLmtleSBdLCB0aGlzLm9taXQoIHRoaXMubW9kZWwuZGF0YSwgWyB0aGlzLmtleSBdICkgKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoIGlzUG9zdCA/ICdwb3N0ZWQnIDogJ3B1dCcsIE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLm1vZGVsLmRhdGEgKSApXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmRhdGEgPSB7IH1cbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKVxuICAgICAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ3N1Y2Nlc3MnLCB0aGlzLnRvYXN0U3VjY2VzcyB8fCBgU3VjY2Vzc2AgKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICBpZiggdGhpcy5tb2RlbC5naXQoJ25lc3RlZCcpICkgdGhpcy5lbHMuY29udGFpbmVyLmNsb3Nlc3QoJy5mb3JtLWdyb3VwJykuY2xhc3NMaXN0LmFkZCgndmVydGljYWwnKVxuICAgICAgICB0aGlzLmlucHV0RWxzID0gdGhpcy5lbHMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LCBzZWxlY3QnKVxuXG4gICAgICAgIGlmKCAhdGhpcy5kaXNhbGxvd0VudGVyS2V5U3VibWlzc2lvbiApIHRoaXMuZWxzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCAna2V5dXAnLCBlID0+IHsgaWYoIGUua2V5Q29kZSA9PT0gMTMgKSB0aGlzLm9uU3VibWl0QnRuQ2xpY2soKSB9IClcblxuICAgICAgICB0aGlzLmlucHV0RWxzLmZvckVhY2goIGVsID0+XG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCAnZm9jdXMnLCAoKSA9PiBlbC5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvcicpIClcbiAgICAgICAgKVxuXG4gICAgICAgIGlmKCB0aGlzLm1vZGVsICl7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCAndmFsaWRhdGlvbkVycm9yJywgYXR0ciA9PiB0aGlzLmhhbmRsZVZhbGlkYXRpb25FcnJvciggYXR0ciApIClcbiAgICAgICAgICAgIHRoaXMuaW5pdFR5cGVBaGVhZHMoKVxuICAgICAgICAgICAgdGhpcy5rZXkgPSB0aGlzLm1vZGVsLm1ldGFkYXRhID8gdGhpcy5tb2RlbC5tZXRhZGF0YS5rZXkgOiAnX2lkJ1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMgXG4gICAgfVxuXG59IClcbiIsImNvbnN0IEN1c3RvbUNvbnRlbnQgPSByZXF1aXJlKCcuL3V0aWwvQ3VzdG9tQ29udGVudCcpXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIEN1c3RvbUNvbnRlbnQsIHtcblxuXG5cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgTmF2OiByZXF1aXJlKCAnLi4vbW9kZWxzL05hdicpLFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGp1c3RpZnk6ICdjbGljaycsXG4gICAgICAgIG5hdkxpbmtzOiAnY2xpY2snLFxuICAgICAgICB0aXRsZTogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBvbkp1c3RpZnlDbGljaygpIHsgdGhpcy5lbHMubmF2TGlua3MuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtbW9iaWxlJykgfSxcblxuICAgIG9uTmF2TGlua3NDbGljayggZSApIHtcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldC5jbG9zZXN0KCdsaScpXG5cbiAgICAgICAgaWYoICFlbCApIHJldHVyblxuXG4gICAgICAgIHRoaXMuZW1pdCggJ25hdmlnYXRlJywgZWwuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSApXG5cbiAgICAgICAgaWYoIHRoaXMuZWxzLm5hdkxpbmtzLmNsYXNzTGlzdC5jb250YWlucygnaXMtbW9iaWxlJykgKSB0aGlzLmVscy5uYXZMaW5rcy5jbGFzc0xpc3QucmVtb3ZlKCdpcy1tb2JpbGUnKVxuICAgIH0sXG5cbiAgICBvblRpdGxlQ2xpY2soKSB7IHRoaXMuZW1pdCggJ25hdmlnYXRlJywgJy8nICkgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMub24oJ2ltZ0xvYWRlZCcsICgpID0+IHRoaXMuZWxzLm5hdi5jbGFzc0xpc3QucmVtb3ZlKCdmZC1oaWRkZW4nKSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgdGVtcGxhdGVPcHRzKCkge1xuICAgICAgICByZXR1cm4geyBmaWVsZHM6IHRoaXMuTmF2LmRhdGEsIGhvbWU6IHsgbGFiZWw6ICdQYXRjaHdvcmsgR2FyZGVucycsIG5hbWU6ICdob21lJyB9IH1cbiAgICB9XG5cbn0gKVxuIiwiY29uc3QgQ3VzdG9tQ29udGVudCA9IHJlcXVpcmUoJy4vdXRpbC9DdXN0b21Db250ZW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwgQ3VzdG9tQ29udGVudCwge1xuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGpvaW5CdG46ICdjbGljaydcbiAgICB9LFxuXG4gICAgb25Kb2luQnRuQ2xpY2soKSB7IHRoaXMuZW1pdCggJ25hdmlnYXRlJywgJ3NpZ24tdXAnICkgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMub24oICdpbWdMb2FkZWQnLCAoKSA9PiB0aGlzLmVscy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaW1nLWxvYWRlZCcpIClcblxuICAgICAgICByZXR1cm4gQ3VzdG9tQ29udGVudC5wb3N0UmVuZGVyLmNhbGwodGhpcylcbiAgICB9XG5cbn0gKVxuIiwidmFyIExpc3RJdGVtID0gcmVxdWlyZSgnLi91dGlsL0xpc3RJdGVtJyksXG4gICAgSW5zdGFuY2VSb3cgPSBmdW5jdGlvbigpIHsgXG4gICAgICAgIHRoaXMuZmlsZXMgPSBbIF1cbiAgICAgICAgcmV0dXJuIExpc3RJdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKVxuICAgIH1cblxuT2JqZWN0LmFzc2lnbiggSW5zdGFuY2VSb3cucHJvdG90eXBlLCBMaXN0SXRlbS5wcm90b3R5cGUsIHtcblxuICAgIGdldEZpZWxkVmFsdWUoIGZpZWxkICkge1xuICAgICAgICBcbiAgICAgICAgdmFyIG1vZGVsVmFsdWUgPSB0aGlzLm1vZGVsLmdldChmaWVsZCksXG4gICAgICAgICAgICBpc0ZpbGUgPSBmYWxzZVxuICAgICAgICBcbiAgICAgICAgaWYoIG1vZGVsVmFsdWUgPT09IG51bGwgKSByZXR1cm4gJydcblxuICAgICAgICBpZiggdHlwZW9mIG1vZGVsVmFsdWUgPT09IFwib2JqZWN0XCIgJiYgKCBtb2RlbFZhbHVlLnR5cGUgPT09IFwiZmlsZVwiIHx8IG1vZGVsVmFsdWUudHlwZSA9PT0gXCJCdWZmZXJcIiApICkge1xuICAgICAgICAgICAgaWYoIG1vZGVsVmFsdWUuc3JjICkgeyByZXR1cm4gdGhpcy4kKCc8aW1nLz4nKS5hdHRyKCB7IHNyYzogbW9kZWxWYWx1ZS5zcmMgfSApLmNzcyggeyBoZWlnaHQ6ICc1MHB4JyB9ICkgfVxuICAgICAgICAgICAgZWxzZSBpZiggbW9kZWxWYWx1ZS5pbWFnZUVsICkgeyByZXR1cm4gbW9kZWxWYWx1ZS5pbWFnZUVsIH1cbiAgICAgICAgICAgIGVsc2UgeyBpc0ZpbGUgPSB0cnVlOyB0aGlzLmZpbGVzLnB1c2goIGZpZWxkICk7IHJldHVybiAnPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBpY3R1cmVcIj48L3NwYW4+JyB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKCB0eXBlb2YgbW9kZWxWYWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBtb2RlbFZhbHVlICE9PSBudWxsIClcbiAgICAgICAgICAgID8gbW9kZWxWYWx1ZS52YWx1ZVxuICAgICAgICAgICAgOiBtb2RlbFZhbHVlXG4gICAgfSxcblxuICAgIGdldFRlbXBsYXRlT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLm1vZGVsLmlkLFxuICAgICAgICAgICAgdmFsdWVzOiB0aGlzLmZpZWxkcy5tYXAoIGZpZWxkID0+ICggeyBuYW1lOiBmaWVsZC5uYW1lLCB2YWx1ZTogdGhpcy5nZXRGaWVsZFZhbHVlKCBmaWVsZC5uYW1lICksIHdpZHRoOiBmaWVsZC53aWR0aCB9ICkgKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGxvYWRGaWxlSWZWaXNpYmxlKCkgeyAgICAgICBcbiAgICAgICAgdmFyIHRvcCA9IHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AsXG4gICAgICAgICAgICB2aXNpYmxlID0gKCB0b3AgPj0gMCAmJiB0b3AgPD0gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSApLFxuICAgICAgICAgICAgaW1hZ2VMb2FkZXJNb2RlbCA9IHsgaWQ6IHRoaXMubW9kZWwuaWQsIGNvbHVtbnM6IHRoaXMuZmlsZXMgfVxuICAgICAgICBcbiAgICAgICAgaWYoIHZpc2libGUgKSB0aGlzLmltYWdlTG9hZGVyLmFkZCggaW1hZ2VMb2FkZXJNb2RlbCApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIExpc3RJdGVtLnByb3RvdHlwZS5wb3N0UmVuZGVyLmNhbGwodGhpcylcbiAgICAgICAgdGhpcy5tb2RlbC5vbiggJ2NoYW5nZScsICgpID0+XG4gICAgICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5tb2RlbC5hdHRyaWJ1dGVzICkuZm9yRWFjaCggZmllbGQgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YVsgZmllbGQgXS5odG1sKCB0aGlzLmdldEZpZWxkVmFsdWUoIGZpZWxkICkgKVxuICAgICAgICAgICAgKSApXG4gICAgICAgIFxuICAgICAgICBpZiggdGhpcy5maWxlcy5sZW5ndGggKSB0aGlzLiQod2luZG93KVxuICAgICAgICAgICAgLm9uKCB0aGlzLnV0aWwuZm9ybWF0KCAnc2Nyb2xsLnRocm90dGxlZExvYWQlcycsIHRoaXMubW9kZWwuaWQgKSwgdGhpcy50aHJvdHRsZWRMb2FkLmJpbmQodGhpcykgKVxuICAgIH0sXG5cbiAgICByZXRyaWV2ZWRJbWFnZSggZmllbGQgKSB7XG4gICAgICAgIHRoaXMuZmlsZXMgPSB0aGlzLl8oIHRoaXMuZmlsZXMgKS5yZWplY3QoIGZpbGUgPT4gZmlsZSA9PT0gZmllbGQgKVxuICAgICAgICBpZiggdGhpcy5maWxlcy5sZW5ndGggPT09IDAgKSB0aGlzLiQod2luZG93KVxuICAgICAgICAgICAgLm9mZiggdGhpcy51dGlsLmZvcm1hdCggJ3Njcm9sbC50aHJvdHRsZWRMb2FkJXMnLCB0aGlzLm1vZGVsLmlkICkgKVxuICAgIH0sXG5cbiAgICBzaXplKCkgeyBpZiggdGhpcy5maWxlcy5sZW5ndGggKSB0aGlzLmxvYWRGaWxlSWZWaXNpYmxlKCkgfSxcblxuICAgIHRocm90dGxlZExvYWQoKSB7IHRoaXMuXy50aHJvdHRsZSggdGhpcy5sb2FkRmlsZUlmVmlzaWJsZSgpLCA1MDAgKSB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9pbnN0YW5jZVJvdycpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBJbnN0YW5jZVJvd1xuIiwiY29uc3QgU3VwZXIgPSByZXF1aXJlKCcuL19fcHJvdG9fXycpXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiggeyB9LCBTdXBlciwge1xuXG4gICAgYWRkKCBkYXR1bSwgc29ydD1mYWxzZSApIHtcbiAgICAgICAgaWYoICF0aGlzLmNvbGxlY3Rpb24gKSB0aGlzLmNvbGxlY3Rpb24gPSBPYmplY3QuY3JlYXRlKCB0aGlzLk1vZGVsIClcblxuICAgICAgICBjb25zdCBrZXlWYWx1ZSA9IGRhdHVtWyB0aGlzLmtleSBdXG4gICAgICAgIGxldCBpbnNlcnRpb24gPSB7IGVsOiB0aGlzLmVscy5saXN0IH1cblxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24uYWRkKCBkYXR1bSApXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5zdG9yZVsgdGhpcy5rZXkgXVsga2V5VmFsdWUgXSA9IGRhdHVtXG5cbiAgICAgICAgaWYoIHNvcnQgJiYgdGhpcy5jb2xsZWN0aW9uLmRhdGEubGVuZ3RoICE9PSAxICkge1xuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uLnNvcnQoIHRoaXMubW9kZWwuZ2l0KCdzb3J0JykgKVxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jb2xsZWN0aW9uLmRhdGEuZmluZEluZGV4KCBkYXR1bSA9PiBkYXR1bVt0aGlzLmtleV0gPT0ga2V5VmFsdWUgKVxuXG4gICAgICAgICAgICBpZiggaW5kZXggIT09IC0xICkgaW5zZXJ0aW9uID0gdGhpcy5lbHMubGlzdC5jaGlsZHJlbi5pdGVtKGluZGV4KVxuICAgICAgICAgICAgICAgID8geyBtZXRob2Q6ICdpbnNlcnRCZWZvcmUnLCBlbDogdGhpcy5lbHMubGlzdC5jaGlsZHJlbi5pdGVtKCBpbmRleCApIH1cbiAgICAgICAgICAgICAgICA6IHsgZWw6IHRoaXMuZWxzLmxpc3QgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlKClcblxuICAgICAgICBpZiggdGhpcy5pdGVtVGVtcGxhdGUgKSB7XG4gICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRpb24sXG4gICAgICAgICAgICAgICAgcmVuZGVyU3Vidmlld3M6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMuZ2V0SXRlbVRlbXBsYXRlUmVzdWx0KCBrZXlWYWx1ZSwgZGF0dW0gKVxuICAgICAgICAgICAgfSApXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdGhpcy5lbHMubGlzdC5xdWVyeVNlbGVjdG9yKGAqW2RhdGEta2V5PVwiJHtrZXlWYWx1ZX1cIl1gKS5zY3JvbGxJbnRvVmlldyggeyBiZWhhdmlvcjogJ3Ntb290aCcgfSApXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pdGVtVmlld3NbIGtleVZhbHVlIF0gPVxuICAgICAgICAgICAgdGhpcy5mYWN0b3J5LmNyZWF0ZSggdGhpcy5tb2RlbC5naXQoJ3ZpZXcnKSwgeyBpbnNlcnRpb24sIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLmNvbGxlY3Rpb24ubW9kZWwgKS5jb25zdHJ1Y3RvciggZGF0dW0gKSB9IClcbiAgICAgICAgICAgIC5vbiggJ2RlbGV0ZWQnLCAoKSA9PiB0aGlzLm9uRGVsZXRlZCggZGF0dW0gKSApXG4gICAgICAgXG4gICAgICAgIHRoaXMuaXRlbVZpZXdzWyBrZXlWYWx1ZSBdLmVscy5jb250YWluZXIuc2Nyb2xsSW50b1ZpZXcoIHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0gKVxuICAgIH0sXG5cbiAgICBjaGVja0RyYWcoIGUgKSB7XG4gICAgICAgIGlmKCAhdGhpcy5kcmFnZ2luZyApIHJldHVyblxuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgICAgIHRoaXMuRHJhZ2dlci5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGRlbicpXG4gICAgICAgIHRoaXMuRHJhZ2dlci5lbHMuY29udGFpbmVyLnN0eWxlLnRvcCA9IGAke2UuY2xpZW50WSs1fXB4YFxuICAgICAgICB0aGlzLkRyYWdnZXIuZWxzLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gYCR7ZS5jbGllbnRYKzV9cHhgXG5cbiAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2l0KCdkcmFnZ2FibGUnKSAhPT0gJ2xpc3RJdGVtJyApIHJldHVyblxuXG4gICAgICAgIGNvbnN0IGxpc3RJdGVtUmVjdGFuZ2xlcyA9IEFycmF5LmZyb20oIHRoaXMuZWxzLmxpc3QuY2hpbGRyZW4gKS5tYXAoIGl0ZW0gPT4gKCB7IGVsOiBpdGVtLCByZWN0YW5nbGU6IGl0ZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgfSApICksXG4gICAgICAgICAgICBtYXRjaGluZ0l0ZW0gPSBsaXN0SXRlbVJlY3RhbmdsZXMuZmluZCggaXRlbSA9PlxuICAgICAgICAgICAgICAgIGl0ZW0ucmVjdGFuZ2xlLnJpZ2h0ID49IGUuY2xpZW50WCAmJiBpdGVtLnJlY3RhbmdsZS5sZWZ0IDw9IGUuY2xpZW50WCAmJiBpdGVtLnJlY3RhbmdsZS5ib3R0b20gPj0gZS5jbGllbnRZICYmIGl0ZW0ucmVjdGFuZ2xlLnRvcCA8PSBlLmNsaWVudFlcbiAgICAgICAgKVxuXG4gICAgICAgIGlmKCAhbWF0Y2hpbmdJdGVtIHx8ICggIW1hdGNoaW5nSXRlbSAmJiB0aGlzLmRyYWdvdmVyRWwgKSB8fCAoIG1hdGNoaW5nSXRlbSAmJiB0aGlzLmRyYWdvdmVyRWwgJiYgbWF0Y2hpbmdJdGVtLmVsLmlzU2FtZU5vZGUoIHRoaXMuZHJhZ2dpbmcuZWwgKSApICkge1xuICAgICAgICAgICAgaWYoIHRoaXMuZHJhZ292ZXJFbCApIHRoaXMuZHJhZ292ZXJFbC5jbGFzc0xpc3QucmVtb3ZlKCAnZHJhZ292ZXItdG9wJywgJ2RyYWdvdmVyLWJvdHRvbScgKVxuICAgICAgICAgICAgdGhpcy5kcmFnb3ZlckVsID0gdW5kZWZpbmVkXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBtYXRjaGluZ0l0ZW0gJiYgIW1hdGNoaW5nSXRlbS5lbC5pc1NhbWVOb2RlKCB0aGlzLmRyYWdnaW5nLmVsICkgKSB7XG4gICAgICAgICAgICBpZiggdGhpcy5kcmFnb3ZlckVsICkgdGhpcy5kcmFnb3ZlckVsLmNsYXNzTGlzdC5yZW1vdmUoICdkcmFnb3Zlci10b3AnLCAnZHJhZ292ZXItYm90dG9tJyApXG4gICAgICAgICAgICB0aGlzLmRyYWdvdmVyRWwgPSBtYXRjaGluZ0l0ZW0uZWxcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1SZWN0ID0gbWF0Y2hpbmdJdGVtLmVsLnF1ZXJ5U2VsZWN0b3IoJy5pdGVtJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgICAgICAgICAgaWYoIGUuY2xpZW50WSA8ICggaXRlbVJlY3QuYm90dG9tIC0gaXRlbVJlY3QuaGVpZ2h0IC8gMiApICkge1xuICAgICAgICAgICAgICAgIGlmKCB0aGlzLmRyYWdvdmVyRWwucHJldmlvdXNTaWJsaW5nICYmIHRoaXMuZHJhZ292ZXJFbC5wcmV2aW91c1NpYmxpbmcuaXNTYW1lTm9kZSggdGhpcy5kcmFnZ2luZy5lbCApICkgcmV0dXJuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnb3ZlckVsLmNsYXNzTGlzdC5hZGQoJ2RyYWdvdmVyLXRvcCcpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKCB0aGlzLmRyYWdvdmVyRWwubmV4dFNpYmxpbmcgJiYgdGhpcy5kcmFnb3ZlckVsLm5leHRTaWJsaW5nLmlzU2FtZU5vZGUoIHRoaXMuZHJhZ2dpbmcuZWwgKSApIHJldHVyblxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ292ZXJFbC5jbGFzc0xpc3QuYWRkKCdkcmFnb3Zlci1ib3R0b20nKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgY2hlY2tEcmFnRW5kKCBlICkge1xuICAgICAgICBpZiggIXRoaXMuZHJhZ2dpbmcgKSByZXR1cm5cblxuICAgICAgICBpZiggdGhpcy5kcmFnb3ZlckVsICkge1xuICAgICAgICAgICAgdGhpcy5lbHMubGlzdC5pbnNlcnRCZWZvcmUoIHRoaXMuZHJhZ2dpbmcuZWwsIHRoaXMuZHJhZ292ZXJFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2RyYWdvdmVyLXRvcCcpID8gdGhpcy5kcmFnb3ZlckVsIDogdGhpcy5kcmFnb3ZlckVsLm5leHRTaWJsaW5nIClcbiAgICAgICAgICAgIHRoaXMuZHJhZ292ZXJFbC5jbGFzc0xpc3QucmVtb3ZlKCAnZHJhZ292ZXItdG9wJywgJ2RyYWdvdmVyLWJvdHRvbScgKVxuICAgICAgICAgICAgdGhpcy5kcmFnb3ZlckVsID0gdW5kZWZpbmVkXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVtaXQoICdkcm9wcGVkJywgeyBlLCB0eXBlOiB0aGlzLm1vZGVsLmdpdCgnZHJhZ2dhYmxlJyksIG1vZGVsOiB0aGlzLmRyYWdnaW5nLm1vZGVsIH0gKVxuICAgICAgICB0aGlzLmRyYWdnaW5nLmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRyYWdnaW5nJylcbiAgICAgICAgdGhpcy5lbHMubGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kcmFnZ2luZycpXG5cdFx0dGhpcy5EcmFnZ2VyLmVscy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICAgICAgdGhpcy5kcmFnZ2luZyA9IGZhbHNlXG4gICAgfSxcblxuICAgIGNoZWNrRHJhZ1N0YXJ0KCBlICkge1xuICAgICAgICBjb25zdCBjbG9zZXN0TGlzdCA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5MaXN0JylcbiAgICAgICAgaWYoIGNsb3Nlc3RMaXN0ID09PSBudWxsIHx8ICggIWNsb3Nlc3RMaXN0LmlzU2FtZU5vZGUoIHRoaXMuZWxzLmNvbnRhaW5lciApICkgKSByZXR1cm5cblxuICAgICAgICBjb25zdCBlbCA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICAgICAgaWYoICFlbCApIHJldHVybiBudWxsXG5cbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmNvbGxlY3Rpb24uc3RvcmVbIHRoaXMua2V5IF1bIGVsLnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWtleScpIF1cblxuICAgICAgICB0aGlzLmRyYWdnaW5nID0geyBlbDogZWwucGFyZW50Tm9kZSwgbW9kZWwgfVxuICAgICAgICB0aGlzLmRyYWdnaW5nLmVsLmNsYXNzTGlzdC5hZGQoJ2lzLWRyYWdnaW5nJylcbiAgICAgICAgdGhpcy5lbHMubGlzdC5jbGFzc0xpc3QuYWRkKCdpcy1kcmFnZ2luZycpXG4gICAgICAgIGlmKCBtb2RlbCAmJiBtb2RlbC5sYWJlbCApIHRoaXMuRHJhZ2dlci5lbHMuY29udGFpbmVyLnRleHRDb250ZW50ID0gYE1vdmUgJHttb2RlbC5sYWJlbH0uYFxuICAgICAgICB0aGlzLmVtaXQoICdkcmFnU3RhcnQnLCB0aGlzLm1vZGVsLmdpdCgnZHJhZ2dhYmxlJykgKVxuXG4gICAgfSxcblxuICAgIGNoZWNrRHJvcCggeyBlLCB0eXBlLCBtb2RlbCB9ICkge1xuICAgICAgICBpZiggdGhpcy5tb2RlbC5naXQoJ2Ryb3BwYWJsZScpICE9PSB0eXBlICkgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG5cbiAgICAgICAgaWYoICFlbCApIHJldHVyblxuICAgICAgICBcbiAgICAgICAgY29uc3QgbG9jYWxNb2RlbCA9IHRoaXMuY29sbGVjdGlvbi5zdG9yZVsgdGhpcy5rZXkgXVsgZWwucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEta2V5JykgXVxuXG4gICAgICAgIGlmKCAhbG9jYWxNb2RlbCApIHJldHVyblxuXG4gICAgICAgIHRoaXMuZW1pdCggJ3N1Y2Nlc3NmdWxEcm9wJywgeyBkcm9wcGVkOiBtb2RlbCwgZHJvcHBlZE9uOiBsb2NhbE1vZGVsIH0gKVxuICAgIH0sXG5cbiAgICBmZXRjaCggbmV4dFBhZ2U9ZmFsc2UgKSB7XG4gICAgICAgIHRoaXMuZmV0Y2hpbmcgPSB0cnVlXG4gICAgICAgIGlmKCBuZXh0UGFnZSApIHRoaXMubW9kZWwuc2V0KCAnc2tpcCcsIHRoaXMubW9kZWwuZ2l0KCdza2lwJykgKyB0aGlzLm1vZGVsLmdpdCgncGFnZVNpemUnKSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbi5nZXQoIHsgcXVlcnk6IHsgc2tpcDogdGhpcy5tb2RlbC5naXQoJ3NraXAnKSwgbGltaXQ6IHRoaXMubW9kZWwuZ2l0KCdwYWdlU2l6ZScpLCBzb3J0OiB0aGlzLm1vZGVsLmdpdCgnc29ydCcpIH0gfSApXG4gICAgICAgIC50aGVuKCBuZXdEYXRhID0+IHtcbiAgICAgICAgICAgIHRoaXMucG9wdWxhdGVMaXN0KCBuZXdEYXRhIClcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hlZCA9IHRydWVcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hpbmcgPSBmYWxzZVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdmZXRjaGVkJylcbiAgICAgICAgICAgIGlmKCBuZXdEYXRhLmxlbmd0aCA9PSAwICYmIG5leHRQYWdlICkgdGhpcy5lbHMubGlzdC5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcy5vblNjcm9sbFBhZ2luYXRpb24gKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBnZXRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbi5nZXRDb3VudCgpXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMuY29sbGVjdGlvbi5tZXRhLmNvdW50ICkgKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgIH0sXG5cbiAgICBnZXRJdGVtVGVtcGxhdGVSZXN1bHQoIGtleVZhbHVlLCBkYXR1bSApIHtcbiAgICAgICAgY29uc3QgYnV0dG9uc09uUmlnaHQgPSB0aGlzLm1vZGVsLmdpdCgnZGVsZXRlJykgPyBgPGRpdiBjbGFzcz1cImJ1dHRvbnNcIj4ke3RoaXMuZGVsZXRlSWNvbn08L2Rpdj5gIDogYGAsXG4gICAgICAgICAgICBzZWxlY3Rpb24gPSB0aGlzLnRvZ2dsZVNlbGVjdGlvbiA/IGA8ZGl2IGNsYXNzPVwic2VsZWN0aW9uXCI+PGlucHV0IGRhdGEtanM9XCJjaGVja2JveFwiIHR5cGU9XCJjaGVja2JveFwiIC8+PC9kaXY+YCA6IGBgXG5cbiAgICAgICAgcmV0dXJuIGBgICtcbiAgICAgICAgYDxsaSBkYXRhLWtleT1cIiR7a2V5VmFsdWV9XCI+XG4gICAgICAgICAgICAke3NlbGVjdGlvbn1cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtXCI+JHt0aGlzLml0ZW1UZW1wbGF0ZSggZGF0dW0gKX08L2Rpdj5cbiAgICAgICAgICAgICR7YnV0dG9uc09uUmlnaHR9XG4gICAgICAgIDwvbGk+YFxuICAgIH0sXG5cbiAgICBoaWRlKCkge1xuICAgICAgICBpZiggdGhpcy5lbHMucmVzZXRCdG4gKSB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICBpZiggdGhpcy5lbHMuc2F2ZUJ0biApIHRoaXMuZWxzLnNhdmVCdG4uY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkoIFN1cGVyLmhpZGUsIHRoaXMsIFsgXSApXG4gICAgfSxcblxuICAgIGhpZGVJdGVtcygga2V5cyApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICAgICAga2V5cy5tYXAoIGtleSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVscy5saXN0LnF1ZXJ5U2VsZWN0b3IoYGxpW2RhdGEta2V5PVwiJHtrZXl9XCJdYClcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwgPyB0aGlzLmhpZGVFbCggZWwgKSA6IFByb21pc2UucmVzb2x2ZSgpIFxuICAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgaGlkZUxpc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhpZGVFbCggdGhpcy5lbHMubGlzdCApXG4gICAgICAgIC50aGVuKCAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHRoaXMuZWxzLnRvZ2dsZS5jbGFzc0xpc3QuYWRkKCdpcy1oaWRkZW4nKSApIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZURyYWdEcm9wKCkge1xuICAgICAgICB0aGlzLkRyYWdnZXIub24oICdtb3VzZWRvd24nLCBlID0+IHRoaXMuY2hlY2tEcmFnU3RhcnQoZSkgKVxuICAgICAgICB0aGlzLkRyYWdnZXIub24oICdtb3VzZXVwJywgZSA9PiB0aGlzLmNoZWNrRHJhZ0VuZChlKSApXG4gICAgICAgIHRoaXMuRHJhZ2dlci5vbiggJ21vdXNlbW92ZScsIGUgPT4gdGhpcy5jaGVja0RyYWcoZSkgKVxuICAgICAgICB0aGlzLkRyYWdnZXIubGlzdGVuKClcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZVNjcm9sbFBhZ2luYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IGxpc3RFbCA9IHRoaXMuZWxzLmxpc3RcblxuICAgICAgICB0aGlzLm9uU2Nyb2xsUGFnaW5hdGlvbiA9IGUgPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMuZmV0Y2hpbmcgKSByZXR1cm5cbiAgICAgICAgICAgIGlmKCAoIHRoaXMuc2Nyb2xsSGVpZ2h0IC0gKCBsaXN0RWwuc2Nyb2xsVG9wICsgdGhpcy5vZmZzZXRIZWlnaHQgKSApIDwgMTAwICkgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggKCkgPT4gdGhpcy5mZXRjaCggdHJ1ZSApLmNhdGNoKHRoaXMuRXJyb3IpIClcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3RFbC5hZGRFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcy5vblNjcm9sbFBhZ2luYXRpb24gKVxuICAgIH0sXG5cbiAgICBlbXB0eSgpIHtcbiAgICAgICAgdGhpcy5lbHMubGlzdC5pbm5lckhUTUwgPSAnJ1xuICAgIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgYWRkQnRuOiAnY2xpY2snLFxuICAgICAgICBjaGVja2JveDogJ2NoYW5nZScsXG4gICAgICAgIGdvQmFja0J0bjogJ2NsaWNrJyxcbiAgICAgICAgcmVzZXRCdG46ICdjbGljaycsXG4gICAgICAgIHNhdmVCdG46ICdjbGljaycsXG4gICAgICAgIHRvZ2dsZTogJ2NsaWNrJ1xuICAgIH0sXG5cbiAgICBnZXRMaXN0SXRlbUtleSggZSApIHtcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG5cbiAgICAgICAgaWYoICFlbCApIHJldHVybiBudWxsXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbi5zdG9yZVsgdGhpcy5rZXkgXVsgZWwucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEta2V5JykgXVxuICAgIH0sXG5cbiAgICBoaWRlRHJvcHBhYmxlKCkge1xuICAgICAgICB0aGlzLmVscy5saXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRyb3BwYWJsZScpXG4gICAgICAgIEFycmF5LmZyb20oIHRoaXMuZWxzLmxpc3QuY2hpbGRyZW4gKS5mb3JFYWNoKCBjaGlsZCA9PiBjaGlsZC5yZW1vdmVDaGlsZCggY2hpbGQubGFzdENoaWxkICkgKVxuICAgIH0sXG5cbiAgICBvbkFkZEJ0bkNsaWNrKCBlICkge1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24ubW9kZWxcbiAgICAgICAgICAgID8gdGhpcy5hZGQoIHRoaXMuY29sbGVjdGlvbi5tb2RlbC5DcmVhdGVEZWZhdWx0KCkgKVxuICAgICAgICAgICAgOiB0aGlzLmVtaXQoJ2FkZENsaWNrZWQnKVxuICAgIH0sXG5cbiAgICBvbkNoZWNrYm94Q2hhbmdlKCBlICkge1xuICAgICAgICBjb25zdCBlbCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ0xJJylcblxuICAgICAgICBpZiggIWVsICkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmNvbGxlY3Rpb24uc3RvcmVbIHRoaXMua2V5IF1bIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1rZXknKSBdXG4gICAgICAgICAgICBldmVudCA9IGB0b2dnbGVkJHsgZS50YXJnZXQuY2hlY2tlZCA/ICdPbicgOiAnT2ZmJ31gXG5cbiAgICAgICAgaWYoICFtb2RlbCApIHJldHVyblxuXG4gICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoICdjaGVja2VkJywgZS50YXJnZXQuY2hlY2tlZCApXG5cbiAgICAgICAgdGhpcy5lbWl0KCBldmVudCwgbW9kZWwgKVxuICAgIH0sXG5cbiAgICBvbkdvQmFja0J0bkNsaWNrKCBlICkge1xuICAgICAgICB0aGlzLmVtaXQoICdnb0JhY2tDbGlja2VkJyApXG4gICAgfSxcblxuICAgIG9uSXRlbU1vdXNlZW50ZXIoIGUgKSB7IGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ21vdXNlb3ZlcicpIH0sXG4gICAgb25JdGVtTW91c2VsZWF2ZSggZSApIHsgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnbW91c2VvdmVyJykgfSxcblxuICAgIG9uTGlzdENsaWNrKCBlICkge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuZ2V0TGlzdEl0ZW1LZXkoIGUgKVxuXG4gICAgICAgIGlmKCAhbW9kZWwgKSByZXR1cm5cblxuICAgICAgICB0aGlzLmVtaXQoICdpdGVtQ2xpY2tlZCcsIG1vZGVsIClcbiAgICB9LFxuXG4gICAgb25MaXN0RGJsY2xpY2soIGUgKSB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5nZXRMaXN0SXRlbUtleSggZSApXG5cbiAgICAgICAgaWYoICFtb2RlbCApIHJldHVyblxuXG4gICAgICAgIHRoaXMuZW1pdCggJ2l0ZW1EYmxDbGlja2VkJywgbW9kZWwgKVxuICAgIH0sXG4gICAgXG4gICAgb25SZXNldEJ0bkNsaWNrKCkge1xuICAgICAgICB0aGlzLmVtaXQoJ3Jlc2V0Q2xpY2tlZCcpXG4gICAgfSxcblxuICAgIG9uU2F2ZUJ0bkNsaWNrKCkge1xuICAgICAgICBpZiggdGhpcy5tb2RlbC5naXQoJ3ZpZXcnKSApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCggJ3NhdmVDbGlja2VkJywgT2JqZWN0LmtleXMoIHRoaXMuaXRlbVZpZXdzICkubWFwKCBrZXkgPT4gdGhpcy5pdGVtVmlld3Nba2V5XS5nZXRQcm9wb3NlZE1vZGVsKCkgKSApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25Ub2dnbGVDbGljaygpIHsgdGhpcy5lbHMubGlzdC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZkLWhpZGRlbicpID8gdGhpcy5zaG93TGlzdCgpIDogdGhpcy5oaWRlTGlzdCgpIH0sXG5cbiAgICBwb3B1bGF0ZUxpc3QoIGRhdGEgKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IHRoaXMuY29sbGVjdGlvbi5kYXRhXG5cbiAgICAgICAgaWYoICFBcnJheS5pc0FycmF5KCBkYXRhICkgKSBkYXRhID0gWyBkYXRhIF1cblxuICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlKClcblxuICAgICAgICBpZiggZGF0YS5sZW5ndGggPT09IDAgKSByZXR1cm5cblxuICAgICAgICBpZiggdGhpcy5tb2RlbC5naXQoJ3ZpZXcnKSApIHtcbiAgICAgICAgICAgIGxldCB2aWV3TmFtZSA9IHRoaXMubW9kZWwuZ2l0KCd2aWV3JylcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID1cbiAgICAgICAgICAgICAgICBkYXRhLnJlZHVjZShcbiAgICAgICAgICAgICAgICAgICAgKCBmcmFnbWVudCwgZGF0dW0gKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXlWYWx1ZSA9IGRhdHVtWyB0aGlzLmtleSBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb24uc3RvcmVbIHRoaXMua2V5IF1bIGtleVZhbHVlIF0gPSBkYXR1bVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1WaWV3c1sga2V5VmFsdWUgXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWN0b3J5LmNyZWF0ZSggdmlld05hbWUsIHsgbW9kZWw6IE9iamVjdC5jcmVhdGUoIHRoaXMuY29sbGVjdGlvbi5tb2RlbCApLmNvbnN0cnVjdG9yKCBkYXR1bSApLCBzdG9yZUZyYWdtZW50OiB0cnVlIH0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oICdkZWxldGVkJywgKCkgPT4gdGhpcy5vbkRlbGV0ZWQoIGRhdHVtICkgKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSggdGhpcy5pdGVtVmlld3NbIGtleVZhbHVlIF0uZnJhZ21lbnQuZmlyc3RDaGlsZCApIGZyYWdtZW50LmFwcGVuZENoaWxkKCB0aGlzLml0ZW1WaWV3c1sga2V5VmFsdWUgXS5mcmFnbWVudC5maXJzdENoaWxkIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmFnbWVudFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KClcbiAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgIHRoaXMuZWxzLmxpc3QuYXBwZW5kQ2hpbGQoIGZyYWdtZW50IClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgICAgIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMubGlzdCB9LFxuICAgICAgICAgICAgICAgIHJlbmRlclN1YnZpZXdzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBkYXRhLnJlZHVjZShcbiAgICAgICAgICAgICAgICAgICAgKCBtZW1vLCBkYXR1bSApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleVZhbHVlID0gZGF0dW1bIHRoaXMua2V5IF1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbi5zdG9yZVsgdGhpcy5rZXkgXVsga2V5VmFsdWUgXSA9IGRhdHVtXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtbyArIHRoaXMuZ2V0SXRlbVRlbXBsYXRlUmVzdWx0KCBrZXlWYWx1ZSwgZGF0dW0gKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2l0KCdzY3JvbGxQYWdpbmF0aW9uJykgKSB7IHRoaXMuc2Nyb2xsSGVpZ2h0ID0gdGhpcy5lbHMubGlzdC5zY3JvbGxIZWlnaHQ7IHRoaXMub2Zmc2V0SGVpZ2h0ID0gdGhpcy5lbHMubGlzdC5vZmZzZXRIZWlnaHQgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IHRoaXMubW9kZWwuZ2l0KCdjb2xsZWN0aW9uJykgfHwgT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApXG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5jb2xsZWN0aW9uLm1ldGEua2V5XG5cbiAgICAgICAgaWYoIHRoaXMuY29sbGVjdGlvbiApIHRoaXMuY29sbGVjdGlvbi5zdG9yZSA9IHsgWyB0aGlzLmtleSBdOiB7IH0gfVxuXG4gICAgICAgIGlmKCB0aGlzLm1vZGVsLmdpdCgnZGVsZXRlJykgKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUljb24gPSB0aGlzLkZvcm1hdC5HZXRJY29uKCdnYXJiYWdlJylcbiAgICAgICAgICAgIHRoaXMuZWxzLmxpc3QuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXRcbiAgICAgICAgICAgICAgICBpZiggdGFyZ2V0LnRhZ05hbWUgPT09ICdzdmcnICYmIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2dhcmJhZ2UnKSApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCAnZGVsZXRlQ2xpY2tlZCcsIHRoaXMuY29sbGVjdGlvbi5zdG9yZVsgdGhpcy5rZXkgXVsgdGFyZ2V0LmNsb3Nlc3QoJ0xJJykuZ2V0QXR0cmlidXRlKCdkYXRhLWtleScpIF0gKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2l0KCdmZXRjaCcpICkgdGhpcy5mZXRjaCgpLmNhdGNoKCB0aGlzLkVycm9yIClcblxuICAgICAgICBpZiggdGhpcy5tb2RlbC5naXQoJ3Njcm9sbFBhZ2luYXRpb24nKSApIHRoaXMuaW5pdGlhbGl6ZVNjcm9sbFBhZ2luYXRpb24oKVxuXG4gICAgICAgIHRoaXMudXBkYXRlU3R5bGUoKVxuXG4gICAgICAgIGlmKCB0aGlzLmNvbGxlY3Rpb24uZGF0YS5sZW5ndGggKSB0aGlzLnBvcHVsYXRlTGlzdCgpXG5cbiAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2l0KCdkcmFnZ2FibGUnKSApIHRoaXMuaW5pdGlhbGl6ZURyYWdEcm9wKClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICByZW1vdmUoIGRhdHVtICkge1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24ucmVtb3ZlKCBkYXR1bSApXG5cbiAgICAgICAgdGhpcy51cGRhdGVTdHlsZSgpXG5cbiAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2l0KCd2aWV3JykgKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5pdGVtVmlld3NbIGRhdHVtWyB0aGlzLmtleSBdIF1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5lbHMubGlzdC5xdWVyeVNlbGVjdG9yKCBgW2RhdGEta2V5PVwiJHtkYXR1bVsgdGhpcy5rZXkgXX1cIl1gIClcblxuICAgICAgICAgICAgaWYoIGNoaWxkICkgdGhpcy5lbHMubGlzdC5yZW1vdmVDaGlsZCggY2hpbGQgKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgaWYoIHRoaXMuZWxzLnJlc2V0QnRuICkgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LnJlbW92ZSgnZmQtaGlkZGVuJylcbiAgICAgICAgaWYoIHRoaXMuZWxzLnNhdmVCdG4gKSB0aGlzLmVscy5zYXZlQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGRlbicpXG4gICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KCBTdXBlci5zaG93LCB0aGlzLCBbIF0gKVxuICAgIH0sXG5cbiAgICBzaG93TGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hvd0VsKCB0aGlzLmVscy5saXN0IClcbiAgICAgICAgLnRoZW4oICgpID0+IFByb21pc2UucmVzb2x2ZSggdGhpcy5lbHMudG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWhpZGRlbicpICkgKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgIH0sXG5cbiAgICBzaG93RHJvcHBhYmxlKCB0eXBlICkge1xuICAgICAgICB0aGlzLmVscy5saXN0LmNsYXNzTGlzdC5hZGQoJ2lzLWRyb3BwYWJsZScpXG4gICAgICAgIEFycmF5LmZyb20oIHRoaXMuZWxzLmxpc3QuY2hpbGRyZW4gKS5mb3JFYWNoKCBjaGlsZCA9PiB7XG4gICAgICAgICAgICB0aGlzLmJpbmRFdmVudCggJ2l0ZW0nLCAnbW91c2VlbnRlcicsIGNoaWxkICkgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnQoICdpdGVtJywgJ21vdXNlbGVhdmUnLCBjaGlsZCApICAgICAgICAgICBcbiAgICAgICAgICAgIGNoaWxkLmFwcGVuZENoaWxkKCB0aGlzLmh0bWxUb0ZyYWdtZW50KGA8ZGl2IGNsYXNzPVwiZHJhZ1wiPkRyYWcgaGVyZSB0byBtb3ZlICR7dHlwZX08L2Rpdj5gKSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICB1bmhpZGVJdGVtcygpIHtcbiAgICAgICAgUHJvbWlzZS5hbGwoIEFycmF5LmZyb20oIHRoaXMuZWxzLmxpc3QucXVlcnlTZWxlY3RvckFsbChgbGkuZmQtaGlkZGVuYCkgKS5tYXAoIGVsID0+IHRoaXMuc2hvd0VsKGVsKSApIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICB1cGRhdGUoIGl0ZW1zICkge1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24uY29uc3RydWN0b3IoIGl0ZW1zLCB7IHN0b3JlQnk6IFsgdGhpcy5rZXkgXSB9IClcblxuICAgICAgICBpZiggdGhpcy5pdGVtVGVtcGxhdGUgKSByZXR1cm4gdGhpcy5yZW1vdmVDaGlsZHJlbiggdGhpcy5lbHMubGlzdCApLnBvcHVsYXRlTGlzdCgpXG5cbiAgICAgICAgdGhpcy5lbXB0eSgpXG4gICAgICAgIFxuICAgICAgICBPYmplY3QuYXNzaWduKCB0aGlzLCB7IGl0ZW1WaWV3czogeyB9IH0gKS5wb3B1bGF0ZUxpc3QoKVxuICAgICAgICBcbiAgICAgICAgLy93aW5kb3cuc2Nyb2xsKCB7IGJlaGF2aW9yOiAnc21vb3RoJywgdG9wOiB0aGlzLmVscy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0IC0gNTAgfSApXG4gICAgICAgIHRoaXMuZWxzLmNvbnRhaW5lci5zY3JvbGxJbnRvVmlldyggeyBiZWhhdmlvcjogJ3Ntb290aCcgfSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgdXBkYXRlSXRlbSggbW9kZWwgKSB7XG4gICAgICAgIGNvbnN0IGtleVZhbHVlID0gbW9kZWwuZ2l0KHRoaXMua2V5KVxuXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5fcHV0KCBrZXlWYWx1ZSwgbW9kZWwuZGF0YSApXG4gICAgICAgIFxuICAgICAgICBpZiggIXRoaXMubW9kZWwuZ2l0KCd2aWV3JykgKSB7XG4gICAgICAgICAgICBsZXQgb2xkSXRlbSA9IHRoaXMuZWxzLmxpc3QucXVlcnlTZWxlY3RvcihgKltkYXRhLWtleT1cIiR7a2V5VmFsdWV9XCJdYClcbiAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgICAgIGluc2VydGlvbjogeyBtZXRob2Q6ICdpbnNlcnRCZWZvcmUnLCBlbDogb2xkSXRlbSB9LFxuICAgICAgICAgICAgICAgIHJlbmRlclN1YnZpZXdzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLmdldEl0ZW1UZW1wbGF0ZVJlc3VsdCgga2V5VmFsdWUsIG1vZGVsLmRhdGEgKVxuICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB0aGlzLmVscy5saXN0LnJlbW92ZUNoaWxkKCBvbGRJdGVtIClcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGVTdHlsZSgpIHtcbiAgICAgICAgdGhpcy5lbHMubGlzdC5jbGFzc0xpc3QudG9nZ2xlKCAnbm8taXRlbXMnLCB0aGlzLmNvbGxlY3Rpb24uZGF0YS5sZW5ndGggPT09IDAgKVxuICAgIH1cblxufSApXG4iLCJjb25zdCBDdXN0b21Db250ZW50ID0gcmVxdWlyZSgnLi91dGlsL0N1c3RvbUNvbnRlbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCBDdXN0b21Db250ZW50LCB7XG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgbGVnZW5kOiAnY2xpY2snLFxuICAgICAgICBzaWdudXBCdG46ICdjbGljaydcbiAgICB9LFxuXG4gICAgbW9kZWw6IHJlcXVpcmUoJy4uL21vZGVscy9Mb2NhdGlvbnMnKSxcblxuICAgIG1vZGVsczoge1xuICAgICAgICBncm91cExvY2F0aW9uOiByZXF1aXJlKCcuLi9tb2RlbHMvQ3VycmVudFNoYXJlJyksXG4gICAgICAgIGZhcm1lck1hcmtldDogcmVxdWlyZSgnLi4vbW9kZWxzL0Zhcm1lck1hcmtldCcpLFxuICAgICAgICByZXRhaWxPdXRsZXQ6IHJlcXVpcmUoJy4uL21vZGVscy9SZXRhaWxPdXRsZXQnKSxcbiAgICAgICAgcmVzdGF1cmFudDogcmVxdWlyZSgnLi4vbW9kZWxzL1Jlc3RhdXJhbnQnKSxcbiAgICAgICAgZmFybVBpY2t1cDogcmVxdWlyZSgnLi4vbW9kZWxzL0Zhcm1QaWNrdXAnKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgaW5mb1dpbmRvdzogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvSW5mb1dpbmRvdycpLFxuICAgICAgICBsb2NhdGlvbjogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvTG9jYXRpb24nKVxuICAgIH0sXG5cbiAgICBjcmVhdGVEZWxpdmVyeVJhbmdlKCkge1xuICAgICAgICBjb25zdCBvdmVybGF5Q29sb3IgPSB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMuZmluZCggYXR0ciA9PiBhdHRyLm5hbWUgPT09ICdkZWxpdmVyeVJhbmdlJyApLmNvbG9yXG5cbiAgICAgICAgdGhpcy5kZWxpdmVyeVJhbmdlID0gbmV3IGdvb2dsZS5tYXBzLlBvbHlnb24oIHtcbiAgICAgICAgICAgIHBhdGhzOiB0aGlzLm1vZGVsLmRhdGEuZGVsaXZlcnlSYW5nZUNvb3JkcyxcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBvdmVybGF5Q29sb3IsXG4gICAgICAgICAgICBzdHJva2VPcGFjaXR5OiAuMyxcbiAgICAgICAgICAgIHN0cm9rZVdlaWdodDogMSxcbiAgICAgICAgICAgIGZpbGxDb2xvcjogb3ZlcmxheUNvbG9yLFxuICAgICAgICAgICAgZmlsbE9wYWNpdHk6IC4zLFxuICAgICAgICAgICAgY2xpY2thYmxlOiBmYWxzZVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLmRlbGl2ZXJ5UmFuZ2Uuc2V0TWFwKCB0aGlzLm1hcCApXG4gICAgfSxcblxuICAgIGNyZWF0ZU1hcmtlcnMoIGRhdGEsIGNhdGVnb3J5ICkge1xuICAgICAgICB0aGlzLmljb25zWyBjYXRlZ29yeSBdID0gdGhpcy5nZXRJY29uKCBjYXRlZ29yeSApXG4gICAgICAgIHRoaXMubWFya2Vyc1sgY2F0ZWdvcnkgXSA9IFsgXVxuXG4gICAgICAgIGRhdGEuZm9yRWFjaCggZGF0dW0gPT4ge1xuICAgICAgICAgICAgaWYoICFkYXR1bS5sb2NhdGlvbiApIHJldHVyblxuXG4gICAgICAgICAgICBjb25zdCBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLnRlbXBsYXRlcy5pbmZvV2luZG93KCBkYXR1bSApLFxuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogeyBsYXQ6IGRhdHVtLmxvY2F0aW9uWzBdLCBsbmc6IGRhdHVtLmxvY2F0aW9uWzFdIH0sXG4gICAgICAgICAgICAgICAgbWFwOiB0aGlzLm1hcCxcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGljb246IHRoaXMuaWNvbnNbIGNhdGVnb3J5IF0sXG4gICAgICAgICAgICAgICAgdGl0bGU6IGRhdHVtLm5hbWVcbiAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICB0aGlzLm1hcmtlcnNbIGNhdGVnb3J5IF0ucHVzaCggbWFya2VyIClcblxuICAgICAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCAnY2xpY2snLCAoKSA9PiBpbmZvd2luZG93Lm9wZW4oIHRoaXMubWFwLCBtYXJrZXIgKSApXG5cbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGZldGNoQW5kUmVuZGVyKCkge1xuICAgICAgICBsZXQgY2hhaW4gPSBQcm9taXNlLnJlc29sdmUoKVxuXG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLm1vZGVscyApLmZvckVhY2goIG5hbWUgPT4ge1xuICAgICAgICAgICAgY2hhaW4gPSBjaGFpbi50aGVuKCAoKSA9PiBcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsc1sgbmFtZSBdLmdldCgpXG4gICAgICAgICAgICAgICAgLnRoZW4oICgpID0+XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPT09ICdncm91cExvY2F0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLm1vZGVscy5ncm91cExvY2F0aW9uLmdldEN1cnJlbnRHcm91cERyb3BvZmZzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmFtZSA9PT0gJ2Zhcm1QaWNrdXAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLm1vZGVscy5mYXJtUGlja3VwLmdldEhvdXJzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC50aGVuKCBkcm9wb2ZmRGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGVsQXR0ciA9IHRoaXMubW9kZWwuYXR0cmlidXRlcy5maW5kKCBhdHRyID0+IGF0dHIubmFtZSA9PT0gbmFtZSApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGRyb3BvZmZEYXRhIHx8IHRoaXMubW9kZWxzWyBuYW1lIF0uZGF0YVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0TGlzdExvY2F0aW9ucyggZGF0YSwgdGhpcy5lbHNbIG1vZGVsQXR0ci5lbCBdIClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVNYXJrZXJzKCBkYXRhLCBuYW1lIClcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICAuY2F0Y2goIGUgPT4gUHJvbWlzZS5yZXNvbHZlKCBjb25zb2xlLmxvZyggYEZhaWxlZCB0byByZXRyaWV2ZSAke25hbWV9IGRhdGEuYCApICkgKVxuICAgICAgICAgICAgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgZ2V0SWNvbiggY2F0ZWdvcnkgKSB7XG4gICAgICAgIGlmKCBjYXRlZ29yeSA9PT0gJ2Zhcm1QaWNrdXAnICkgcmV0dXJuICcvc3RhdGljL2ltZy9mYXZpY29uLnBuZydcblxuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMubW9kZWwuYXR0cmlidXRlcy5maW5kKCBhdHRyID0+IGNhdGVnb3J5ID09PSBhdHRyLm5hbWUgKS5jb2xvclxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXRoOiBnb29nbGUubWFwcy5TeW1ib2xQYXRoLkNJUkNMRSxcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBjb2xvcixcbiAgICAgICAgICAgIGZpbGxDb2xvcjogY29sb3IsXG4gICAgICAgICAgICBmaWxsT3BhY2l0eTogMSxcbiAgICAgICAgICAgIHNjYWxlOiA0XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdE1hcCgpIHtcbiAgICAgICAgY29uc3QgbWFwT3B0cyA9IHtcbiAgICAgICAgICAgIGNlbnRlcjogeyBsYXQ6IDM5Ljc1ODk0OCwgbG5nOiAtODQuMTkxNjA3IH0sXG4gICAgICAgICAgICB6b29tOiAxMCxcbiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKCB0aGlzLmVscy5tYXAsIG1hcE9wdHMgKVxuXG4gICAgICAgIHRoaXMubWFya2VycyA9IHsgfVxuICAgICAgICB0aGlzLmljb25zID0geyB9XG5cbiAgICAgICAgdGhpcy5jcmVhdGVEZWxpdmVyeVJhbmdlKClcblxuICAgICAgICB0aGlzLm1hcC5jb250cm9sc1tnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uVE9QX0xFRlRdLnB1c2goIHRoaXMuZWxzLmxlZ2VuZCApXG5cbiAgICAgICAgdGhpcy5mZXRjaEFuZFJlbmRlcigpXG4gICAgfSxcblxuICAgIGluc2VydExpc3RMb2NhdGlvbnMoIGRhdGEsIGVsICkge1xuICAgICAgICBkYXRhLmZvckVhY2goIGRhdHVtID0+XG4gICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXMubG9jYXRpb24oIGRhdHVtICksXG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsIH1cbiAgICAgICAgICAgIH0gKVxuICAgICAgICApXG4gICAgfSxcblxuICAgIG9uTGVnZW5kQ2xpY2soIGUgKSB7XG4gICAgICAgIGlmKCBlLnRhcmdldC50YWdOYW1lICE9PSBcIklOUFVUXCIgKSByZXR1cm5cblxuICAgICAgICBjb25zdCBjYXRlZ29yeSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJyksXG4gICAgICAgICAgICBjaGVja2VkID0gZS50YXJnZXQuY2hlY2tlZFxuXG4gICAgICAgIGlmKCBjYXRlZ29yeSA9PT0gJ2RlbGl2ZXJ5UmFuZ2UnICkgcmV0dXJuIHRoaXMudG9nZ2xlRGVsaXZlcnlSYW5nZSggY2hlY2tlZCApXG5cbiAgICAgICAgdGhpcy50b2dnbGVNYXJrZXJDYXRlZ29yeSggY2F0ZWdvcnksIGNoZWNrZWQgKVxuXG4gICAgfSxcblxuICAgIG9uU2lnbnVwQnRuQ2xpY2soKSB7IHRoaXMuZW1pdCggJ25hdmlnYXRlJywgJ3NpZ24tdXAnICkgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIGlmKCB3aW5kb3cuZ29vZ2xlICkgeyB0aGlzLmluaXRNYXAoKSB9IGVsc2UgeyB3aW5kb3cuaW5pdEdNYXAgPSB0aGlzLmluaXRNYXAgfVxuXG4gICAgICAgIHJldHVybiBDdXN0b21Db250ZW50LnBvc3RSZW5kZXIuY2FsbCh0aGlzKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZU9wdHMoKSB7IHJldHVybiB7IGNhdGVnb3JpZXM6IHRoaXMubW9kZWwuYXR0cmlidXRlcyB9IH0sXG5cbiAgICB0b2dnbGVEZWxpdmVyeVJhbmdlKCBjaGVja2VkICkge1xuICAgICAgICB0aGlzLmRlbGl2ZXJ5UmFuZ2Uuc2V0TWFwKCBjaGVja2VkID8gdGhpcy5tYXAgOiBudWxsIClcbiAgICB9LFxuXG4gICAgdG9nZ2xlTWFya2VyQ2F0ZWdvcnkoIGNhdGVnb3J5LCBjaGVja2VkICkge1xuICAgICAgICB0aGlzLm1hcmtlcnNbIGNhdGVnb3J5IF0uZm9yRWFjaCggbWFya2VyID0+IG1hcmtlci5zZXRNYXAoIGNoZWNrZWQgPyB0aGlzLm1hcCA6IG51bGwgKSApXG4gICAgfSxcblxufSApIiwidmFyIE15VmlldyA9IHJlcXVpcmUoJy4vTXlWaWV3JyksXG4gICAgTG9naW4gPSBmdW5jdGlvbigpIHsgcmV0dXJuIE15Vmlldy5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfTtcblxuT2JqZWN0LmFzc2lnbiggTG9naW4ucHJvdG90eXBlLCBNeVZpZXcucHJvdG90eXBlLCByZXF1aXJlKCcuL3V0aWwvRm9ybScpLnByb3RvdHlwZSwge1xuXG4gICAgY2hlY2tGb3JFbnRlciggZSApIHsgaWYoIGUua2V5Q29kZSA9PT0gMTMgKSB0aGlzLmxvZ2luKCkgfSxcblxuICAgIGV2ZW50czoge1xuICAgICAgICAnbG9naW5CdG4nOiB7IG1ldGhvZDogJ2xvZ2luJyB9XG4gICAgfSxcblxuICAgIGZpZWxkczogWyB7XG4gICAgICAgIG5hbWU6IFwiZW1haWxcIixcbiAgICAgICAgbGFiZWw6ICdFbWFpbCcsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKCB2YWwgKSB7IHJldHVybiB0cnVlIH1cbiAgICB9LCB7XG4gICAgICAgIG5hbWU6IFwicGFzc3dvcmRcIixcbiAgICAgICAgbGFiZWw6ICdQYXNzd29yZCcsXG4gICAgICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgICAgIGVycm9yOiBcIlBhc3N3b3JkcyBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVycyBsb25nLlwiLFxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24oIHZhbCApIHsgcmV0dXJuIHZhbC5sZW5ndGggPj0gNiB9XG4gICAgfSBdLFxuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zKCkgeyByZXR1cm4geyBmaWVsZHM6IHRoaXMuZmllbGRzIH0gfSxcblxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIGlmKCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPT09IFwiL2FkbWluXCIgfHwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSBcIi9hZG1pbi1wbHVzXCIgKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKCB0aGlzLmZpZWxkc1swXSwge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnRW1haWwgb3IgVXNlcm5hbWUnLFxuICAgICAgICAgICAgICAgIGVycm9yOiBcIlVzZXJuYW1lIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzIGxvbmcuXCIsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IHZhbCA9PiB2YWwubGVuZ3RoID49IDYgfSApXG4gICAgICAgIH1cblxuICAgICAgICBNeVZpZXcucHJvdG90eXBlLmluaXRpYWxpemUuY2FsbCh0aGlzKVxuICAgIH0sXG5cbiAgICBsb2dpbigpIHsgdGhpcy5zdWJtaXRGb3JtKCB7IHJlc291cmNlOiBcImF1dGhcIiB9ICkgfSxcblxuICAgIG5hbWU6IFwiTG9naW5cIixcblxuICAgIG9uU3VibWlzc2lvblJlc3BvbnNlKCByZXNwb25zZSApIHtcbiAgICAgICAgXG4gICAgICAgIGlmKCBPYmplY3Qua2V5cyggcmVzcG9uc2UgKS5sZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5pbnZhbGlkTG9naW5FcnJvciggcmVzcG9uc2UgKSwgaW5zZXJ0aW9uOiB7ICRlbDogdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyIH0gfSApXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuJChkb2N1bWVudCkub2ZmKCAna2V5dXAnLCB0aGlzLmNoZWNrRm9yRW50ZXIuYmluZCh0aGlzKSApXG4gICAgXG4gICAgICAgIHJlcXVpcmUoJy4uL21vZGVscy9Vc2VyJykuc2V0KCByZXNwb25zZSApO1xuICAgICAgICB0aGlzLmVtaXQoIFwic3VjY2Vzc1wiLCByZXNwb25zZSApO1xuICAgICAgICB0aGlzLmhpZGUoKS5kb25lKCk7XG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5maW5kKCAnaW5wdXQnICkub24oICdmb2N1cycsIHRoaXMucmVtb3ZlRXJyb3JzLmJpbmQodGhpcykgKVxuICAgICAgICB0aGlzLiQoZG9jdW1lbnQpLm9uKCAna2V5dXAnLCB0aGlzLmNoZWNrRm9yRW50ZXIuYmluZCh0aGlzKSApXG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9sb2dpbicpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgTG9naW4oKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgQ3VzdG9tZXI6IHJlcXVpcmUoJy4uL21vZGVscy9DdXN0b21lcicpLFxuICAgIERlbGl2ZXJ5OiByZXF1aXJlKCcuLi9tb2RlbHMvRGVsaXZlcnknKSxcblxuICAgIHBhdGNoTWVtYmVyU2hhcmUoKSB7XG4gICAgICAgIGNvbnN0IHdlZWtQYXRjaCA9IHRoaXMudmlld3Mud2Vla09wdGlvbnMuZ2V0UGF0Y2hEYXRhKClcblxuICAgICAgICBsZXQgd2Vla0RldGFpbCA9IGBgLFxuICAgICAgICAgICAgZW1haWxUbyA9IFsgdGhpcy5zZWxlY3RlZEN1c3RvbWVyLnBlcnNvbi5kYXRhLmVtYWlsIF1cblxuICAgICAgICBpZiggdGhpcy5zZWxlY3RlZEN1c3RvbWVyLnBlcnNvbi5kYXRhLnNlY29uZGFyeUVtYWlsICkgZW1haWxUby5wdXNoKCB0aGlzLnNlbGVjdGVkQ3VzdG9tZXIucGVyc29uLmRhdGEuc2Vjb25kYXJ5RW1haWwgKVxuXG4gICAgICAgIGlmKCB3ZWVrUGF0Y2guYWRkZWREYXRlcy5sZW5ndGggfHwgd2Vla1BhdGNoLnJlbW92ZWREYXRlcy5sZW5ndGggKSB7IHdlZWtEZXRhaWwgKz0gYCAoIGAgfVxuXG4gICAgICAgIGlmKCB3ZWVrUGF0Y2guYWRkZWREYXRlcy5sZW5ndGggKSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHdlZWtQYXRjaC5hZGRlZERhdGVzLm1hcCggZGF0ZSA9PiBkYXRlLnNsaWNlKDUpICkuam9pbignLCcpXG4gICAgICAgICAgICB3ZWVrRGV0YWlsICs9IGBBZGRlZCBXZWVrczogJHtkZXNjcmlwdGlvbn1gXG4gICAgICAgICAgICBpZiggd2Vla1BhdGNoLnJlbW92ZWREYXRlcy5sZW5ndGggKSB7IHdlZWtEZXRhaWwgKz0gYCwgYCB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmKCB3ZWVrUGF0Y2gucmVtb3ZlZERhdGVzLmxlbmd0aCApIHtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gd2Vla1BhdGNoLnJlbW92ZWREYXRlcy5tYXAoIGRhdGUgPT4gZGF0ZS5zbGljZSg1KSApLmpvaW4oJywnKVxuICAgICAgICAgICAgd2Vla0RldGFpbCArPSBgUmVtb3ZlZCBXZWVrczogJHtkZXNjcmlwdGlvbn1gXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmKCB3ZWVrUGF0Y2guYWRkZWREYXRlcy5sZW5ndGggfHwgd2Vla1BhdGNoLnJlbW92ZWREYXRlcy5sZW5ndGggKSB7IHdlZWtEZXRhaWwgKz0gYCApIGAgfVxuXG4gICAgICAgIHRoaXMuWGhyKCB7XG4gICAgICAgICAgICBpZDogdGhpcy5tZW1iZXJTaGFyZUlkLFxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnLFxuICAgICAgICAgICAgcmVzb3VyY2U6ICdtZW1iZXItb3JkZXInLFxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoIHtcbiAgICAgICAgICAgICAgICBhZGp1c3RtZW50OiB0aGlzLnZpZXdzLnNoYXJlUGF0Y2guZ2V0UGF0Y2hEYXRhKCksXG4gICAgICAgICAgICAgICAgbWVtYmVyU2hhcmVJZDogdGhpcy5tZW1iZXJTaGFyZUlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuc2VsZWN0ZWRDdXN0b21lci5wZXJzb24uZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgIG9yZGVyT3B0aW9uczogdGhpcy52aWV3cy5vcmRlck9wdGlvbnMuZ2V0UGF0Y2hEYXRhKCksXG4gICAgICAgICAgICAgICAgc2hhcmVMYWJlbDogdGhpcy5zZWxlY3RlZFNoYXJlLmxhYmVsLFxuICAgICAgICAgICAgICAgIHdlZWtPcHRpb25zOiB3ZWVrUGF0Y2guYWxsUmVtb3ZlZCxcbiAgICAgICAgICAgICAgICB3ZWVrRGV0YWlsLFxuICAgICAgICAgICAgICAgIHRvOiBlbWFpbFRvXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnc3VjY2VzcycsICdPcmRlciBVcGRhdGVkJyApXG4gICAgICAgICAgICB0aGlzLnZpZXdzLnNlYXNvbnMuc2VsZWN0KCB0aGlzLm1lbWJlclNoYXJlSWQgKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCBlID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCBlLnN0YWNrIHx8IGUgKVxuICAgICAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ2Vycm9yJywgJ1VwZGF0ZSBGYWlsZWQnIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG5cbiAgICAgICAgdGhpcy52aWV3cy5tZW1iZXJUeXBlYWhlYWQuZm9jdXMoKVxuXG4gICAgICAgIHRoaXMudmlld3MubWVtYmVyVHlwZWFoZWFkLm9uKCAnY3VzdG9tZXJTZWxlY3RlZCcsIGN1c3RvbWVyID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDdXN0b21lciA9IGN1c3RvbWVyXG4gICAgICAgICAgICB0aGlzLnZpZXdzLmN1c3RvbWVySW5mby5yZXNldCggY3VzdG9tZXIgKVxuICAgICAgICAgICAgdGhpcy52aWV3cy5zZWFzb25zLnVwZGF0ZSggY3VzdG9tZXIgKVxuICAgICAgICAgICAgdGhpcy52aWV3cy5vcmRlck9wdGlvbnMuaGlkZSgpXG4gICAgICAgICAgICB0aGlzLnZpZXdzLndlZWtPcHRpb25zLmhpZGUoKVxuICAgICAgICAgICAgdGhpcy52aWV3cy50cmFuc2FjdGlvbnMuaGlkZSgpXG4gICAgICAgICAgICB0aGlzLnZpZXdzLnNoYXJlUGF0Y2gucmVzZXQoKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLnZpZXdzLnNlYXNvbnMub24oICdzZWxlY3RlZCcsIGRhdGEgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3cy5zaGFyZVBhdGNoLnJlc2V0KClcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTaGFyZSA9IGRhdGEuc2hhcmVcbiAgICAgICAgICAgIHRoaXMubWVtYmVyU2hhcmVJZCA9IHRoaXMuc2VsZWN0ZWRTaGFyZS5tZW1iZXJzaGFyZWlkXG5cbiAgICAgICAgICAgIHRoaXMuRGVsaXZlcnkuZ2V0KCB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVtYmVyc2hhcmVpZDogZGF0YS5zaGFyZS5tZW1iZXJzaGFyZWlkLFxuICAgICAgICAgICAgICAgICAgICBkZWxpdmVyeW9wdGlvbmlkOiB7IG9wZXJhdGlvbjogJ2pvaW4nLCB2YWx1ZTogeyB0YWJsZTogJ2RlbGl2ZXJ5b3B0aW9uJywgY29sdW1uOiAnaWQnIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBkcm9wb2ZmaWQ6IHsgb3BlcmF0aW9uOiAnbGVmdEpvaW4nLCB2YWx1ZTogeyB0YWJsZTogJ2dyb3VwZHJvcG9mZicsIGNvbHVtbjogJ2lkJyB9IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy9UT0RPOklmIG5vIGRlbGl2ZXJ5LCBUb2FzdCwgb3Igc29tZSBVSVxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oIGRhdGEsIHsgZGVsaXZlcnk6IHRoaXMuRGVsaXZlcnkgfSApXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cy5vcmRlck9wdGlvbnMudXBkYXRlKCBkYXRhICkudGhlbiggKCkgPT4gdGhpcy52aWV3cy5zaGFyZVBhdGNoLnNldE9yaWdpbmFsV2Vla2x5UHJpY2UoIHRoaXMudmlld3Mub3JkZXJPcHRpb25zLm9yaWdpbmFsV2Vla2x5UHJpY2UgKSApLmNhdGNoKHRoaXMuRXJyb3IpXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cy53ZWVrT3B0aW9ucy51cGRhdGUoIGRhdGEgKS50aGVuKCAoKSA9PiB0aGlzLnZpZXdzLnNoYXJlUGF0Y2guc2V0V2Vla3NBZmZlY3RlZCggdGhpcy52aWV3cy53ZWVrT3B0aW9ucy5nZXRXZWVrc0FmZmVjdGVkKCkgKSApLmNhdGNoKHRoaXMuRXJyb3IpXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cy50cmFuc2FjdGlvbnMudXBkYXRlKCBkYXRhIClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLnZpZXdzLm9yZGVyT3B0aW9ucy5vbiggJ2RlbGl2ZXJ5Q2hhbmdlZCcsIGRhdGEgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3cy5zaGFyZVBhdGNoLnNldFdlZWtzQWZmZWN0ZWQoIHRoaXMudmlld3Mud2Vla09wdGlvbnMuZ2V0V2Vla3NBZmZlY3RlZCgpIClcbiAgICAgICAgICAgIHRoaXMudmlld3Mud2Vla09wdGlvbnMudXBkYXRlRGVsaXZlcnkoIGRhdGEgKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLnZpZXdzLm9yZGVyT3B0aW9ucy5vbiggJ3Jlc2V0JywgbW9kZWwgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3cy53ZWVrT3B0aW9ucy51cGRhdGUoIG1vZGVsIClcbiAgICAgICAgICAgIHRoaXMudmlld3Muc2hhcmVQYXRjaC5vbk9wdGlvbnNSZXNldCgpXG4gICAgICAgIH0gKVxuICAgICAgICBcbiAgICAgICAgdGhpcy52aWV3cy53ZWVrT3B0aW9ucy5vbiggJ3Jlc2V0JywgbW9kZWwgPT4gdGhpcy52aWV3cy5zaGFyZVBhdGNoLm9uV2Vla3NSZXNldCgpIClcblxuICAgICAgICB0aGlzLnZpZXdzLm9yZGVyT3B0aW9ucy5vbiggJ2FkanVzdG1lbnQnLCBkYXRhID0+IHRoaXMudmlld3Muc2hhcmVQYXRjaC5vbk9wdGlvbnNVcGRhdGUoIGRhdGEgKSApXG4gICAgICAgIHRoaXMudmlld3Mud2Vla09wdGlvbnMub24oICdhZGp1c3RtZW50JywgZGF0YSA9PiB0aGlzLnZpZXdzLnNoYXJlUGF0Y2gub25XZWVrVXBkYXRlKCBkYXRhICkgKVxuXG4gICAgICAgIHRoaXMudmlld3Muc2hhcmVQYXRjaC5vbiggJ3BhdGNoTWVtYmVyU2hhcmUnLCAoKSA9PiB0aGlzLnBhdGNoTWVtYmVyU2hhcmUoKSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogdHJ1ZSxcbiAgICBcbiAgICByZXF1aXJlc1JvbGU6ICdhZG1pbicsXG5cbiAgICBcblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBBdXRvQ29tcGxldGU6IHJlcXVpcmUoJy4uL0F1dG9Db21wbGV0ZScpLFxuXG4gICAgQ3VzdG9tZXI6IHJlcXVpcmUoJy4uL21vZGVscy9DdXN0b21lcicpLFxuXG4gICAgZm9jdXMoKSB7IHRoaXMuZWxzLmN1c3RvbWVySW5wdXQuZm9jdXMoKSB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgbmV3IHRoaXMuQXV0b0NvbXBsZXRlKCB7XG4gICAgICAgICAgICBkZWxheTogNTAwLFxuICAgICAgICAgICAgc2VsZWN0b3I6IHRoaXMuZWxzLmN1c3RvbWVySW5wdXQsXG4gICAgICAgICAgICBtaW5DaGFyczogMyxcbiAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgIHNvdXJjZTogKCB0ZXJtLCBzdWdnZXN0ICkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoKCAnbmFtZScsIHRlcm0udHJpbSgpLCBzdWdnZXN0IClcbiAgICAgICAgICAgICAgICAudGhlbiggZm91bmQgPT4gZm91bmQgPyBQcm9taXNlLnJlc29sdmUodHJ1ZSkgOiB0aGlzLnNlYXJjaCggJ2VtYWlsJywgdGVybSwgc3VnZ2VzdCApIClcbiAgICAgICAgICAgICAgICAudGhlbiggZm91bmQgPT4gZm91bmQgPyBQcm9taXNlLnJlc29sdmUodHJ1ZSkgOiB0aGlzLnNlYXJjaCggJ3NlY29uZGFyeUVtYWlsJywgdGVybSwgc3VnZ2VzdCApIClcbiAgICAgICAgICAgICAgICAudGhlbiggZm91bmQgPT4gZm91bmQgPyBQcm9taXNlLnJlc29sdmUodHJ1ZSkgOiBzdWdnZXN0KFtdKSApXG4gICAgICAgICAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblNlbGVjdDogKCBlLCB0ZXJtLCBpdGVtICkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDdXN0b21lciA9IHRoaXMuQ3VzdG9tZXIuZGF0YS5maW5kKCBkYXR1bSA9PiBkYXR1bS5wZXJzb24uZGF0YVsgdGhpcy5hdHRyIF0gPT09IHRlcm0gKVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCggJ2N1c3RvbWVyU2VsZWN0ZWQnLCB0aGlzLnNlbGVjdGVkQ3VzdG9tZXIgKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHNlYXJjaCggYXR0ciwgdGVybSwgc3VnZ2VzdCApIHtcbiAgICAgICAgY29uc29sZS5sb2coICdzZWFyY2gnIClcbiAgICAgICAgY29uc29sZS5sb2coIGF0dHIgKVxuICAgICAgICBjb25zb2xlLmxvZyggdGVybSApXG4gICAgICAgIHJldHVybiB0aGlzLkN1c3RvbWVyLmdldCggeyBxdWVyeTogeyBbYXR0cl06IHsgb3BlcmF0aW9uOiAnfionLCB2YWx1ZTogdGVybSB9LCAnaWQnOiB7IG9wZXJhdGlvbjogJ2pvaW4nLCB2YWx1ZTogeyB0YWJsZTogJ21lbWJlcicsIGNvbHVtbjogJ3BlcnNvbmlkJyB9IH0gfSB9IClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCB0aGlzLkN1c3RvbWVyLmRhdGEgKVxuICAgICAgICAgICAgaWYoICEgdGhpcy5DdXN0b21lci5kYXRhLmxlbmd0aCApIHJldHVybiBQcm9taXNlLnJlc29sdmUoIGZhbHNlIClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5hdHRyID0gYXR0ciAgICAgICAgICAgIFxuICAgICAgICAgICAgc3VnZ2VzdCggdGhpcy5DdXN0b21lci5kYXRhLm1hcCggZGF0dW0gPT4gZGF0dW0ucGVyc29uLmRhdGFbIGF0dHIgXSApIClcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHRydWUgKVxuICAgICAgICB9IClcbiAgICB9XG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHJlcXVpcmUoJy4vdXRpbC9DdXN0b21Db250ZW50JyksIHtcblxufSApXG4iLCJ2YXIgTXlWaWV3ID0gZnVuY3Rpb24oIGRhdGEgKSB7IHJldHVybiBPYmplY3QuYXNzaWduKCB0aGlzLCBkYXRhICkuaW5pdGlhbGl6ZSgpIH1cblxuT2JqZWN0LmFzc2lnbiggTXlWaWV3LnByb3RvdHlwZSwgcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyLnByb3RvdHlwZSwge1xuXG4gICAgQ29sbGVjdGlvbjogcmVxdWlyZSgnYmFja2JvbmUnKS5Db2xsZWN0aW9uLFxuICAgIFxuICAgIEVycm9yOiByZXF1aXJlKCcuLi9NeUVycm9yJyksXG5cbiAgICBNb2RlbDogcmVxdWlyZSgnYmFja2JvbmUnKS5Nb2RlbCxcblxuICAgIF86IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKSxcblxuICAgICQ6IHJlcXVpcmUoJ2pxdWVyeScpLFxuXG4gICAgWGhyOiByZXF1aXJlKCcuLi9YaHInKSxcblxuICAgIGRlbGVnYXRlRXZlbnRzKCBrZXksIGVsICkge1xuICAgICAgICB2YXIgdHlwZTtcblxuICAgICAgICBpZiggISB0aGlzLmV2ZW50c1sga2V5IF0gKSByZXR1cm5cblxuICAgICAgICB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCB0aGlzLmV2ZW50c1trZXldICk7XG5cbiAgICAgICAgaWYoIHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nICkge1xuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnQoIGtleSwgdGhpcy5ldmVudHNba2V5XSwgZWwgKTtcbiAgICAgICAgfSBlbHNlIGlmKCB0eXBlID09PSAnW29iamVjdCBBcnJheV0nICkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNba2V5XS5mb3JFYWNoKCBzaW5nbGVFdmVudCA9PiB0aGlzLmJpbmRFdmVudCgga2V5LCBzaW5nbGVFdmVudCwgZWwgKSApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZGVsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYoIHRoaXMudGVtcGxhdGVEYXRhICYmIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lciApIHtcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5yZW1vdmUoKVxuICAgICAgICAgICAgdGhpcy5lbWl0KFwicmVtb3ZlZFwiKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGZvcm1hdDoge1xuICAgICAgICBjYXBpdGFsaXplRmlyc3RMZXR0ZXI6IHN0cmluZyA9PiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSlcbiAgICB9LFxuXG4gICAgZ2V0Rm9ybURhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmZvcm1EYXRhID0geyB9XG5cbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMudGVtcGxhdGVEYXRhICkuZm9yRWFjaCgga2V5ID0+IHtcbiAgICAgICAgICAgIHZhciAkZWwgPSB0aGlzLnRlbXBsYXRlRGF0YVtrZXldLCB2YWwgPSAkZWwudmFsKClcbiAgICAgICAgICAgIGlmKCAvSU5QVVR8VEVYVEFSRUF8U0VMRUNULy50ZXN0KCAkZWwucHJvcCgndGFnTmFtZScpICkgJiYgdmFsICkgdGhpcy5mb3JtRGF0YVtrZXldID0gdmFsXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1EYXRhXG4gICAgfSxcblxuICAgIGdldFJvdXRlcjogZnVuY3Rpb24oKSB7IHJldHVybiByZXF1aXJlKCcuLi9yb3V0ZXInKSB9LFxuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zOiAoKSA9PiAoe30pLFxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCAoIHJlc29sdmUsIHJlamVjdCApID0+IHtcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5oaWRlKClcbiAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgaWYoICEgdGhpcy5jb250YWluZXIgKSB0aGlzLmNvbnRhaW5lciA9IHRoaXMuJCgnI2NvbnRlbnQnKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5yb3V0ZXIgPSB0aGlzLmdldFJvdXRlcigpXG5cbiAgICAgICAgdGhpcy5tb2RhbFZpZXcgPSByZXF1aXJlKCcuL21vZGFsJylcblxuICAgICAgICB0aGlzLiQod2luZG93KS5yZXNpemUoIHRoaXMuXy50aHJvdHRsZSggKCkgPT4gdGhpcy5zaXplKCksIDUwMCApIClcblxuICAgICAgICBpZiggdGhpcy5yZXF1aXJlc0xvZ2luICYmICEgdGhpcy51c2VyLmlkICkge1xuICAgICAgICAgICAgcmVxdWlyZSgnLi9Mb2dpbicpLnNob3coKS5vbmNlKCBcInN1Y2Nlc3NcIiwgZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0ZXIub25Vc2VyKCB0aGlzLnVzZXIgKVxuXG4gICAgICAgICAgICAgICAgaWYoIHRoaXMucmVxdWlyZXNSb2xlICYmICggISB0aGlzLl8oIHRoaXMudXNlci5nZXQoJ3JvbGVzJykgKS5jb250YWlucyggdGhpcy5yZXF1aXJlc1JvbGUgKSApICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxlcnQoJ1lvdSBkbyBub3QgaGF2ZSBhY2Nlc3MnKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfSBlbHNlIGlmKCB0aGlzLnVzZXIuaWQgJiYgdGhpcy5yZXF1aXJlc1JvbGUgKSB7XG4gICAgICAgICAgICBpZiggKCAhIHRoaXMuXyggdGhpcy51c2VyLmdldCgncm9sZXMnKSApLmNvbnRhaW5zKCB0aGlzLnJlcXVpcmVzUm9sZSApICkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsZXJ0KCdZb3UgZG8gbm90IGhhdmUgYWNjZXNzJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gICAgfSxcblxuICAgIGlzSGlkZGVuOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnIH0sXG5cbiAgICBcbiAgICBtb21lbnQ6IHJlcXVpcmUoJ21vbWVudCcpLFxuXG4gICAgb25OYXZpZ2F0aW9uKCBwYXRoICkgeyByZXR1cm4gdGhpcy5zaG93KCkgfSxcblxuICAgIHBvc3RSZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlbmRlclN1YnZpZXdzKClcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgUTogcmVxdWlyZSgncScpLFxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlKCB0aGlzLmdldFRlbXBsYXRlT3B0aW9ucygpICksXG4gICAgICAgICAgICBpbnNlcnRpb246IHsgJGVsOiB0aGlzLmluc2VydGlvbkVsIHx8IHRoaXMuY29udGFpbmVyLCBtZXRob2Q6IHRoaXMuaW5zZXJ0aW9uTWV0aG9kIH0gfSApXG5cbiAgICAgICAgdGhpcy5zaXplKClcblxuICAgICAgICB0aGlzLnBvc3RSZW5kZXIoKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlbmRlclN1YnZpZXdzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMuc3Vidmlld3MgfHwgWyBdICkuZm9yRWFjaCgga2V5ID0+IFxuICAgICAgICAgICAgdGhpcy5zdWJ2aWV3c1sga2V5IF0uZm9yRWFjaCggc3Vidmlld01ldGEgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXNbIHN1YnZpZXdNZXRhLm5hbWUgXSA9IG5ldyBzdWJ2aWV3TWV0YS52aWV3KCB7IGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGFbIGtleSBdIH0gKSB9ICkgKVxuICAgIH0sXG5cbiAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLnNob3coKVxuICAgICAgICB0aGlzLnNpemUoKVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgc2x1cnBFbDogZnVuY3Rpb24oIGVsICkge1xuXG4gICAgICAgIHZhciBrZXkgPSBlbC5hdHRyKCdkYXRhLWpzJyk7XG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGFbIGtleSBdID0gKCB0aGlzLnRlbXBsYXRlRGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpIClcbiAgICAgICAgICAgID8gdGhpcy50ZW1wbGF0ZURhdGFbIGtleSBdLmFkZCggZWwgKVxuICAgICAgICAgICAgOiBlbDtcblxuICAgICAgICBlbC5yZW1vdmVBdHRyKCdkYXRhLWpzJyk7XG5cbiAgICAgICAgaWYoIHRoaXMuZXZlbnRzWyBrZXkgXSApIHRoaXMuZGVsZWdhdGVFdmVudHMoIGtleSwgZWwgKVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBzbHVycFRlbXBsYXRlOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuICAgICAgICB2YXIgJGh0bWwgPSB0aGlzLiQoIG9wdGlvbnMudGVtcGxhdGUgKSxcbiAgICAgICAgICAgIHNlbGVjdG9yID0gJ1tkYXRhLWpzXSc7XG5cbiAgICAgICAgaWYoIHRoaXMudGVtcGxhdGVEYXRhID09PSB1bmRlZmluZWQgKSB0aGlzLnRlbXBsYXRlRGF0YSA9IHsgfTtcblxuICAgICAgICAkaHRtbC5lYWNoKCAoIGluZGV4LCBlbCApID0+IHtcbiAgICAgICAgICAgIHZhciAkZWwgPSB0aGlzLiQoZWwpO1xuICAgICAgICAgICAgaWYoICRlbC5pcyggc2VsZWN0b3IgKSApIHRoaXMuc2x1cnBFbCggJGVsIClcbiAgICAgICAgfSApO1xuXG4gICAgICAgICRodG1sLmdldCgpLmZvckVhY2goICggZWwgKSA9PiB7IHRoaXMuJCggZWwgKS5maW5kKCBzZWxlY3RvciApLmVhY2goICggaSwgZWxUb0JlU2x1cnBlZCApID0+IHRoaXMuc2x1cnBFbCggdGhpcy4kKGVsVG9CZVNsdXJwZWQpICkgKSB9IClcbiAgICAgICBcbiAgICAgICAgaWYoIG9wdGlvbnMgJiYgb3B0aW9ucy5pbnNlcnRpb24gKSBvcHRpb25zLmluc2VydGlvbi4kZWxbICggb3B0aW9ucy5pbnNlcnRpb24ubWV0aG9kICkgPyBvcHRpb25zLmluc2VydGlvbi5tZXRob2QgOiAnYXBwZW5kJyBdKCAkaHRtbCApXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBcbiAgICBiaW5kRXZlbnQ6IGZ1bmN0aW9uKCBlbGVtZW50S2V5LCBldmVudERhdGEsIGVsICkge1xuICAgICAgICB2YXIgZWxlbWVudHMgPSAoIGVsICkgPyBlbCA6IHRoaXMudGVtcGxhdGVEYXRhWyBlbGVtZW50S2V5IF07XG5cbiAgICAgICAgZWxlbWVudHMub24oIGV2ZW50RGF0YS5ldmVudCB8fCAnY2xpY2snLCBldmVudERhdGEuc2VsZWN0b3IsIGV2ZW50RGF0YS5tZXRhLCB0aGlzWyBldmVudERhdGEubWV0aG9kIF0uYmluZCh0aGlzKSApXG4gICAgfSxcblxuICAgIGV2ZW50czoge30sXG5cbiAgICBpc01vdXNlT25FbDogZnVuY3Rpb24oIGV2ZW50LCBlbCApIHtcblxuICAgICAgICB2YXIgZWxPZmZzZXQgPSBlbC5vZmZzZXQoKSxcbiAgICAgICAgICAgIGVsSGVpZ2h0ID0gZWwub3V0ZXJIZWlnaHQoIHRydWUgKSxcbiAgICAgICAgICAgIGVsV2lkdGggPSBlbC5vdXRlcldpZHRoKCB0cnVlICk7XG5cbiAgICAgICAgaWYoICggZXZlbnQucGFnZVggPCBlbE9mZnNldC5sZWZ0ICkgfHxcbiAgICAgICAgICAgICggZXZlbnQucGFnZVggPiAoIGVsT2Zmc2V0LmxlZnQgKyBlbFdpZHRoICkgKSB8fFxuICAgICAgICAgICAgKCBldmVudC5wYWdlWSA8IGVsT2Zmc2V0LnRvcCApIHx8XG4gICAgICAgICAgICAoIGV2ZW50LnBhZ2VZID4gKCBlbE9mZnNldC50b3AgKyBlbEhlaWdodCApICkgKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiB0cnVlLFxuICAgIFxuICAgIHNpemU6ICgpID0+IHsgdGhpcyB9LFxuXG4gICAgdXNlcjogcmVxdWlyZSgnLi4vbW9kZWxzL1VzZXInKSxcblxuICAgIHV0aWw6IHJlcXVpcmUoJ3V0aWwnKVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBNeVZpZXdcbiIsImNvbnN0IE1vZGVsID0gcmVxdWlyZSgnLi4vbW9kZWxzL19fcHJvdG9fXycpXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIERlbGl2ZXJ5T3B0aW9uczogT2JqZWN0LmNyZWF0ZSggTW9kZWwsIHsgcmVzb3VyY2U6IHsgdmFsdWU6ICdkZWxpdmVyeW9wdGlvbicgfSB9ICksXG4gICAgR3JvdXBEcm9wb2ZmczogT2JqZWN0LmNyZWF0ZSggTW9kZWwsIHsgcmVzb3VyY2U6IHsgdmFsdWU6ICdncm91cGRyb3BvZmYnIH0gfSApLFxuICAgIE1lbWJlclNlbGVjdGlvbjogcmVxdWlyZSgnLi4vbW9kZWxzL01lbWJlclNlbGVjdGlvbicpLFxuICAgIE1lbWJlclNoYXJlT3B0aW9uOiBPYmplY3QuY3JlYXRlKCBNb2RlbCwgeyByZXNvdXJjZTogeyB2YWx1ZTogJ21lbWJlcnNoYXJlb3B0aW9uJyB9IH0gKSxcbiAgICBPcmRlck9wdGlvbjogcmVxdWlyZSgnLi4vbW9kZWxzL09yZGVyT3B0aW9uJyksXG4gICAgU2hhcmVPcHRpb25PcHRpb246IHJlcXVpcmUoJy4uL21vZGVscy9TaGFyZU9wdGlvbk9wdGlvbicpLFxuXG4gICAgY2FsY3VsYXRlV2Vla2x5UHJpY2UoKSB7XG4gICAgICAgIGxldCBvcHRpb25QcmljZSA9IHRoaXMuTWVtYmVyU2VsZWN0aW9uLmRhdGEucmVkdWNlKCAoIHN1bSwgc2VsZWN0aW9uICkgPT4gc3VtICsgTW9kZWwubW9uZXlUb1JlYWwoIHNlbGVjdGlvbi5wcmljZSApLCAwIClcbiAgICAgICAgcmV0dXJuIG9wdGlvblByaWNlICsgTW9kZWwubW9uZXlUb1JlYWwoIHRoaXMubW9kZWwuZGVsaXZlcnkuZGF0YVswXS5kZWxpdmVyeW9wdGlvbi5wcmljZSApXG4gICAgfSxcblxuICAgIGNhbGN1bGF0ZVByaWNlQWRqdXN0bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKCB0aGlzLmVkaXRlZEZpZWxkcyApLnJlZHVjZSggKCBhY2MsIGtleSApID0+IHtcbiAgICAgICAgICAgIGlmKCAhIHRoaXMuZWRpdGVkRmllbGRzWyBrZXkgXS5uZXdWYWx1ZSB8fCBrZXkgPT09ICdncm91cE9wdGlvbicgKSByZXR1cm4gYWNjXG5cbiAgICAgICAgICAgIGxldCBvbGRQcmljZSwgbmV3UHJpY2UsIGRpZmZcblxuICAgICAgICAgICAgaWYoIGtleSA9PT0gJ2RlbGl2ZXJ5T3B0aW9uJyApIHtcbiAgICAgICAgICAgICAgICBvbGRQcmljZSA9IHRoaXMuRGVsaXZlcnlPcHRpb25zLmRhdGEuZmluZCggb3B0aW9uID0+IG9wdGlvbi5uYW1lID09PSB0aGlzLmVkaXRlZEZpZWxkc1sga2V5IF0ub2xkVmFsdWUgKS5wcmljZVxuICAgICAgICAgICAgICAgIG5ld1ByaWNlID0gdGhpcy5EZWxpdmVyeU9wdGlvbnMuZGF0YS5maW5kKCBvcHRpb24gPT4gb3B0aW9uLm5hbWUgPT09IHRoaXMuZWRpdGVkRmllbGRzWyBrZXkgXS5uZXdWYWx1ZSApLnByaWNlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNoYXJlT3B0aW9uSWQgPSB0aGlzLk9yZGVyT3B0aW9uLmRhdGEuZmluZCggb3B0aW9uID0+IG9wdGlvbi5rZXkgPT09IGtleSApLmlkXG5cbiAgICAgICAgICAgICAgICBvbGRQcmljZSA9IHRoaXMuU2hhcmVPcHRpb25PcHRpb24uZGF0YS5maW5kKFxuICAgICAgICAgICAgICAgICAgICBvcHRpb24gPT4gb3B0aW9uLm5hbWUgPT09IHRoaXMuZWRpdGVkRmllbGRzWyBrZXkgXS5vbGRWYWx1ZSAmJiBvcHRpb24uc2hhcmVvcHRpb25pZCA9PT0gc2hhcmVPcHRpb25JZFxuICAgICAgICAgICAgICAgICkucHJpY2VcblxuICAgICAgICAgICAgICAgIG5ld1ByaWNlID0gdGhpcy5TaGFyZU9wdGlvbk9wdGlvbi5kYXRhLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbiA9PiBvcHRpb24ubmFtZSA9PT0gdGhpcy5lZGl0ZWRGaWVsZHNbIGtleSBdLm5ld1ZhbHVlICYmIG9wdGlvbi5zaGFyZW9wdGlvbmlkID09PSBzaGFyZU9wdGlvbklkXG4gICAgICAgICAgICAgICAgKS5wcmljZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaWZmID0gTW9kZWwubW9uZXlUb1JlYWwoIG5ld1ByaWNlICkgLSBNb2RlbC5tb25leVRvUmVhbCggb2xkUHJpY2UgKVxuXG4gICAgICAgICAgICByZXR1cm4gYWNjICsgZGlmZlxuXG4gICAgICAgIH0sIDAgKVxuICAgIH0sXG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5lbHMuY2hhbmdlcy5pbm5lckhUTUwgPSAnJ1xuICAgICAgICB0aGlzLmVscy5vcHRpb25zLmlubmVySFRNTCA9ICcnXG5cbiAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcbiAgICAgICAgdGhpcy5lbHMuZWRpdFN1bW1hcnkuY2xhc3NMaXN0LmFkZCgnZmQtaGlkZGVuJylcblxuICAgICAgICB0aGlzLmVscyA9IHtcbiAgICAgICAgICAgIGVkaXRTdW1tYXJ5OiB0aGlzLmVscy5lZGl0U3VtbWFyeSxcbiAgICAgICAgICAgIGNoYW5nZXM6IHRoaXMuZWxzLmNoYW5nZXMsXG4gICAgICAgICAgICBjb250YWluZXI6IHRoaXMuZWxzLmNvbnRhaW5lcixcbiAgICAgICAgICAgIHNlYXNvbkxhYmVsOiB0aGlzLmVscy5zZWFzb25MYWJlbCxcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMuZWxzLm9wdGlvbnMsXG4gICAgICAgICAgICByZXNldEJ0bjogdGhpcy5lbHMucmVzZXRCdG4sXG4gICAgICAgICAgICBuZXdXZWVrbHlQcmljZTogdGhpcy5lbHMubmV3V2Vla2x5UHJpY2UsXG4gICAgICAgICAgICBvcmlnaW5hbFdlZWtseVByaWNlOiB0aGlzLmVscy5vcmlnaW5hbFdlZWtseVByaWNlXG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgb3B0aW9uczogJ2NoYW5nZScsXG4gICAgICAgIHJlc2V0QnRuOiAnY2xpY2snXG4gICAgfSxcblxuICAgIGdldEFkanVzdG1lbnREZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oIHRoaXMuZWxzLm9wdGlvbnMucXVlcnlTZWxlY3RvckFsbCgnbGkuZWRpdGVkJykgKS5tYXAoIGVsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJyksXG4gICAgICAgICAgICAgICAgICBmaWVsZExhYmVsID0gdGhpcy5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoIGZpZWxkTmFtZSApLFxuICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPSB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGROYW1lIF0ub2xkVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGROYW1lIF0ub2xkVmFsdWUudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICA6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdGhpcy5lZGl0ZWRGaWVsZHNbIGZpZWxkTmFtZSBdLm5ld1ZhbHVlLnRvU3RyaW5nKClcblxuICAgICAgICAgICAgcmV0dXJuIGAke2ZpZWxkTGFiZWx9OiAke29sZFZhbHVlfSB0byAke25ld1ZhbHVlfWBcbiAgICAgICAgfSApLmpvaW4oJywgJylcbiAgICB9LFxuXG4gICAgZ2V0RGVsaXZlcnlEYXRhKCApIHtcblxuICAgICAgICBjb25zdCBwYXRjaElkID0gdGhpcy5tb2RlbC5kZWxpdmVyeS5kYXRhWzBdLm1lbWJlcnNoYXJlZGVsaXZlcnkuaWQsXG4gICAgICAgICAgICAgIG5ld0RlbGl2ZXJ5SWQgPSB0aGlzLkRlbGl2ZXJ5T3B0aW9ucy5kYXRhLmZpbmQoIG9wdGlvbiA9PiBvcHRpb24ubmFtZSA9PT0gdGhpcy5lZGl0ZWRGaWVsZHMuZGVsaXZlcnlPcHRpb24ubmV3VmFsdWUgKS5pZCxcbiAgICAgICAgICAgICAgZHJvcG9mZklkID0gKCB0aGlzLmVkaXRlZEZpZWxkcy5kZWxpdmVyeU9wdGlvbi5uZXdWYWx1ZSA9PT0gJ2dyb3VwJyApXG4gICAgICAgICAgICAgICAgPyB0aGlzLkdyb3VwRHJvcG9mZnMuZGF0YS5maW5kKCBvcHRpb24gPT4gb3B0aW9uLm5hbWUgPT09IHRoaXMuZWRpdGVkRmllbGRzLmdyb3VwT3B0aW9uLm5ld1ZhbHVlICkuaWRcbiAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHBhdGNoSWQsXG4gICAgICAgICAgICBkZWxpdmVyeW9wdGlvbmlkOiBuZXdEZWxpdmVyeUlkLFxuICAgICAgICAgICAgZ3JvdXBkcm9wb2ZmaWQ6IGRyb3BvZmZJZFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldFNoYXJlT3B0aW9uRGF0YSgga2V5ICkge1xuICAgICAgICBjb25zdCBzaGFyZU9wdGlvbklkID0gdGhpcy5PcmRlck9wdGlvbi5kYXRhLmZpbmQoIG9wdGlvbiA9PiBvcHRpb24ua2V5ID09PSBrZXkgKS5pZCxcbiAgICAgICAgICAgIG1lbWJlclNoYXJlSWQgPSB0aGlzLm1vZGVsLnNoYXJlLm1lbWJlcnNoYXJlaWRcblxuICAgICAgICBjb25zdCBzaGFyZU9wdGlvbk9wdGlvbklkID0gdGhpcy5TaGFyZU9wdGlvbk9wdGlvbi5kYXRhLmZpbmQoXG4gICAgICAgICAgICBvcHRpb24gPT4gb3B0aW9uLm5hbWUgPT09IHRoaXMuZWRpdGVkRmllbGRzWyBrZXkgXS5uZXdWYWx1ZSAmJiBvcHRpb24uc2hhcmVvcHRpb25pZCA9PT0gc2hhcmVPcHRpb25JZFxuICAgICAgICApLmlkXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLk1lbWJlclNlbGVjdGlvbi5kYXRhLmZpbmQoIG1lbWJlclNlbGVjdGlvbiA9PiBzaGFyZU9wdGlvbklkID09IG1lbWJlclNlbGVjdGlvbi5zaGFyZW9wdGlvbmlkICkubWVtYmVyc2hhcmVvcHRpb25pZCxcbiAgICAgICAgICAgIHNoYXJlb3B0aW9ub3B0aW9uaWQ6IHNoYXJlT3B0aW9uT3B0aW9uSWRcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRQYXRjaERhdGEoKSB7XG5cbiAgICAgICAgdmFyIHJ2ID0geyBtZW1iZXJzaGFyZWRlbGl2ZXJ5OlxuICAgICAgICAgICAgKCB0aGlzLmVkaXRlZEZpZWxkcy5kZWxpdmVyeU9wdGlvbi5uZXdWYWx1ZSB8fCB0aGlzLmVkaXRlZEZpZWxkcy5ncm91cE9wdGlvbi5uZXdWYWx1ZSApXG4gICAgICAgICAgICAgICAgPyB0aGlzLmdldERlbGl2ZXJ5RGF0YSgpXG4gICAgICAgICAgICAgICAgOiB7IH0sXG4gICAgICAgICAgICBtZW1iZXJzaGFyZW9wdGlvbjogWyBdXG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5lZGl0ZWRGaWVsZHMgKS5mb3JFYWNoKCBrZXkgPT4ge1xuICAgICAgICAgICAgaWYoICF0aGlzLmVkaXRlZEZpZWxkc1sga2V5IF0ubmV3VmFsdWUgfHwga2V5ID09PSAnZGVsaXZlcnlPcHRpb24nIHx8IGtleSA9PT0gJ2dyb3VwT3B0aW9uJyApIHJldHVyblxuXG4gICAgICAgICAgICBydi5tZW1iZXJzaGFyZW9wdGlvbi5wdXNoKCB0aGlzLmdldFNoYXJlT3B0aW9uRGF0YSgga2V5ICkgKVxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gcnZcbiAgICB9LFxuXG4gICAgb25PcHRpb25zQ2hhbmdlKCBlICkge1xuICAgICAgICBjb25zdCBsaXN0SXRlbUVsID0gZS50YXJnZXQuY2xvc2VzdCgnbGkuZWRpdGFibGUnKSxcbiAgICAgICAgICAgIHNoYXJlT3B0aW9uS2V5ID0gbGlzdEl0ZW1FbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpLFxuICAgICAgICAgICAgdmFsID0gZS50YXJnZXQudmFsdWVcblxuICAgICAgICBpZiggc2hhcmVPcHRpb25LZXkgPT09ICdkZWxpdmVyeU9wdGlvbicgJiYgdmFsICE9PSAnZ3JvdXAnICkgdGhpcy5lbWl0KCAnZGVsaXZlcnlDaGFuZ2VkJywgeyBkZWxpdmVyeU9wdGlvbjogdmFsIH0gKVxuICAgICAgICBpZiggc2hhcmVPcHRpb25LZXkgPT09ICdncm91cE9wdGlvbicgJiYgdmFsICE9PSAnbm9uZScgKSB0aGlzLmVtaXQoICdkZWxpdmVyeUNoYW5nZWQnLCB7IGRlbGl2ZXJ5T3B0aW9uOiAnZ3JvdXAnLCBncm91cE9wdGlvbjogdmFsIH0gKVxuXG4gICAgICAgIGlmKCBzaGFyZU9wdGlvbktleSA9PT0gJ2RlbGl2ZXJ5T3B0aW9uJyApIHtcbiAgICAgICAgICAgIGlmKCB2YWwgIT09ICdncm91cCcgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbHMuZ3JvdXBPcHRpb24uc2VsZWN0ZWRJbmRleCA9IDBcbiAgICAgICAgICAgICAgICB0aGlzLmVscy5ncm91cE9wdGlvbi5kaXNhYmxlZCA9IHRydWVcbiAgICAgICAgICAgICAgICB0aGlzLmVscy5ncm91cE9wdGlvbi5jbG9zZXN0KCdsaScpLmNsYXNzTGlzdC5yZW1vdmUoJ2VkaXRlZCcpXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHMuZ3JvdXBPcHRpb24ubmV3VmFsdWUgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIH0gZWxzZSB7IHRoaXMuZWxzLmdyb3VwT3B0aW9uLmRpc2FibGVkID0gZmFsc2UgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHRoaXMuZWRpdGVkRmllbGRzWyBzaGFyZU9wdGlvbktleSBdLm9sZFZhbHVlID09PSB2YWwgKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkc1sgc2hhcmVPcHRpb25LZXkgXS5uZXdWYWx1ZSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgbGlzdEl0ZW1FbC5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0ZWQnKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd0VkaXRTdW1tYXJ5KClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZWRpdGVkRmllbGRzWyBzaGFyZU9wdGlvbktleSBdLm5ld1ZhbHVlID0gdmFsXG4gICAgICAgIGxpc3RJdGVtRWwuY2xhc3NMaXN0LmFkZCgnZWRpdGVkJylcblxuICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdmZC1oaWRkZW4nKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zaG93RWRpdFN1bW1hcnkoKVxuICAgICAgICBcbiAgICB9LFxuXG4gICAgb25SZXNldEJ0bkNsaWNrKCkge1xuICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICB0aGlzLmVscy5lZGl0U3VtbWFyeS5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICB0aGlzLnVwZGF0ZSggdGhpcy5tb2RlbCApXG4gICAgICAgIHRoaXMuZW1pdCggJ3Jlc2V0JywgdGhpcy5tb2RlbCApXG4gICAgfSxcblxuICAgIHJlbmRlckRlbGl2ZXJ5T3B0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMubW9kZWwuZGVsaXZlcnkuZGF0YVswXSApXG5cbiAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlc1sgdGhpcy5vcHRpb25UZW1wbGF0ZSBdKCB7IG5hbWU6ICdEZWxpdmVyeSBPcHRpb24nLCBpZDogJ2RlbGl2ZXJ5T3B0aW9uJyB9ICksIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMub3B0aW9ucyB9IH0gKVxuICAgICAgICAgICBcbiAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlc1sgdGhpcy5vcHRpb25UZW1wbGF0ZSBdKCB7IG5hbWU6ICdHcm91cCBPcHRpb24nLCBpZDogJ2dyb3VwT3B0aW9uJyB9ICksIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMub3B0aW9ucyB9IH0gKVxuICAgICAgICAgICAgXG4gICAgICAgIGlmKCB0aGlzLm9wdGlvblRlbXBsYXRlID09PSAnZWRpdGFibGVPcHRpb24nICkge1xuXG4gICAgICAgICAgICB0aGlzLkRlbGl2ZXJ5T3B0aW9ucy5kYXRhLmZvckVhY2goIG9wdGlvbiA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXMuc2VsZWN0T3B0aW9uKCBvcHRpb24gKSwgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5kZWxpdmVyeU9wdGlvbiB9IH0gKVxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICB0aGlzLmVscy5kZWxpdmVyeU9wdGlvbi5xdWVyeVNlbGVjdG9yKGBvcHRpb25bdmFsdWU9JHtDU1MuZXNjYXBlKCBvcHRpb24uZGVsaXZlcnlvcHRpb24ubmFtZSApfWApLnNlbGVjdGVkID0gdHJ1ZVxuICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHMuZGVsaXZlcnlPcHRpb24gPSB7IH1cbiAgICAgICAgICAgIHRoaXMuZWRpdGVkRmllbGRzLmRlbGl2ZXJ5T3B0aW9uLm9sZFZhbHVlID0gdGhpcy5lbHMuZGVsaXZlcnlPcHRpb24udmFsdWVcblxuICAgICAgICAgICAgdGhpcy5Hcm91cERyb3BvZmZzLmRhdGEudW5zaGlmdCggeyBuYW1lOiAnbm9uZScsIGxhYmVsOiAnTm9uZScgfSApXG4gICAgICAgICAgICB0aGlzLkdyb3VwRHJvcG9mZnMuZGF0YS5mb3JFYWNoKCBvcHRpb24gPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzLnNlbGVjdE9wdGlvbiggb3B0aW9uICksIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMuZ3JvdXBPcHRpb24gfSB9IClcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgaWYoICEgb3B0aW9uLmdyb3VwZHJvcG9mZi5pZCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVscy5ncm91cE9wdGlvbi5zZWxlY3RlZEluZGV4ID0gMFxuICAgICAgICAgICAgICAgIHRoaXMuZWxzLmdyb3VwT3B0aW9uLmRpc2FibGVkID0gdHJ1ZVxuICAgICAgICAgICAgfSBlbHNlIHRoaXMuZWxzLmdyb3VwT3B0aW9uLnF1ZXJ5U2VsZWN0b3IoYG9wdGlvblt2YWx1ZT0ke0NTUy5lc2NhcGUoIG9wdGlvbi5ncm91cGRyb3BvZmYubmFtZSApfWApLnNlbGVjdGVkID0gdHJ1ZVxuXG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkcy5ncm91cE9wdGlvbiA9IHsgfVxuICAgICAgICAgICAgdGhpcy5lZGl0ZWRGaWVsZHMuZ3JvdXBPcHRpb24ub2xkVmFsdWUgPSB0aGlzLmVscy5ncm91cE9wdGlvbi5kaXNhYmxlZCA/IHVuZGVmaW5lZCA6IHRoaXMuZWxzLmdyb3VwT3B0aW9uLnZhbHVlXG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWxzLmRlbGl2ZXJ5T3B0aW9uLnRleHRDb250ZW50ID0gb3B0aW9uLmRlbGl2ZXJ5b3B0aW9uLmxhYmVsXG4gICAgICAgICAgICB0aGlzLmVscy5ncm91cE9wdGlvbi50ZXh0Q29udGVudCA9IG9wdGlvbi5ncm91cGRyb3BvZmYubGFiZWwgfHwgJ04vQSdcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlbmRlclNoYXJlT3B0aW9ucygpIHtcbiAgICAgICAgdGhpcy5PcmRlck9wdGlvbi5kYXRhLmZvckVhY2goIHNoYXJlT3B0aW9uID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXNbIHRoaXMub3B0aW9uVGVtcGxhdGUgXSggc2hhcmVPcHRpb24gKSwgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5vcHRpb25zIH0gfSApXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCB0aGlzLmVkaXRhYmxlICkge1xuICAgICAgICAgICAgICAgIHRoaXMuU2hhcmVPcHRpb25PcHRpb24uZGF0YS5mb3JFYWNoKCBvcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiggb3B0aW9uLnNoYXJlb3B0aW9uaWQgPT09IHNoYXJlT3B0aW9uLmlkICkgdGhpcy5zbHVycFRlbXBsYXRlKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXMuc2VsZWN0T3B0aW9uKCBvcHRpb24gKSwgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVsc1sgc2hhcmVPcHRpb24uaWQgXSB9XG4gICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLk1lbWJlclNlbGVjdGlvbi5kYXRhLmZvckVhY2goIHNlbGVjdGlvbiA9PiB7XG4gICAgICAgICAgICBpZiggdGhpcy5lZGl0YWJsZSApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLk9yZGVyT3B0aW9uLmRhdGEuZmluZCggc2hhcmVPcHRpb24gPT4gc2hhcmVPcHRpb24uaWQgPT09IHNlbGVjdGlvbi5zaGFyZW9wdGlvbmlkICkua2V5XG4gICAgICAgICAgICAgICAgdGhpcy5lbHNbIHNlbGVjdGlvbi5zaGFyZW9wdGlvbmlkIF0ucXVlcnlTZWxlY3Rvcihgb3B0aW9uW3ZhbHVlPSR7Q1NTLmVzY2FwZSggc2VsZWN0aW9uLm5hbWUgKX1gKS5zZWxlY3RlZCA9IHRydWVcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkc1sga2V5IF0gPSB7IH1cbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRlZEZpZWxkc1sga2V5IF0ub2xkVmFsdWUgPSB0aGlzLmVsc1sgc2VsZWN0aW9uLnNoYXJlb3B0aW9uaWQgXS52YWx1ZVxuICAgICAgICAgICAgfSBlbHNlIHsgdGhpcy5lbHNbIHNlbGVjdGlvbi5zaGFyZW9wdGlvbmlkIF0udGV4dENvbnRlbnQgPSBzZWxlY3Rpb24ubGFiZWwgfVxuICAgICAgICB9IClcblxuICAgIH0sXG5cbiAgICBzaG93RWRpdFN1bW1hcnkoKSB7XG4gICAgICAgIGNvbnN0IHByaWNlQWRqdXN0bWVudCA9IHRoaXMuY2FsY3VsYXRlUHJpY2VBZGp1c3RtZW50KCksXG4gICAgICAgICAgICBlZGl0cyA9IHRoaXMuZWxzLm9wdGlvbnMucXVlcnlTZWxlY3RvckFsbCgnbGkuZWRpdGVkJylcblxuICAgICAgICB0aGlzLmVscy5jaGFuZ2VzLmlubmVySFRNTCA9ICcnXG5cbiAgICAgICAgaWYoIGVkaXRzLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCggJ3Jlc2V0JywgdGhpcy5tb2RlbCApXG4gICAgICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxzLmVkaXRTdW1tYXJ5LmNsYXNzTGlzdC5hZGQoJ2ZkLWhpZGRlbicpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGVkaXRzLmZvckVhY2goIGVsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJyksXG4gICAgICAgICAgICAgICAgICBmaWVsZExhYmVsID0gdGhpcy5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoIGZpZWxkTmFtZSApLFxuICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPSB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGROYW1lIF0ub2xkVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmVkaXRlZEZpZWxkc1sgZmllbGROYW1lIF0ub2xkVmFsdWUudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICA6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdGhpcy5lZGl0ZWRGaWVsZHNbIGZpZWxkTmFtZSBdLm5ld1ZhbHVlLnRvU3RyaW5nKClcblxuICAgICAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7IGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMuY2hhbmdlcyB9LCB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXMuZmllbGRFZGl0KCB7IGxhYmVsOiBmaWVsZExhYmVsLCBvbGRWYWx1ZSwgbmV3VmFsdWUgfSApIH0gKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLmVscy5vcmlnaW5hbFdlZWtseVByaWNlLnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIHRoaXMub3JpZ2luYWxXZWVrbHlQcmljZSApXG4gICAgICAgIHRoaXMuZWxzLm5ld1dlZWtseVByaWNlLnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIHRoaXMub3JpZ2luYWxXZWVrbHlQcmljZSArIHByaWNlQWRqdXN0bWVudCApXG5cbiAgICAgICAgdGhpcy5lbHMuZWRpdFN1bW1hcnkuY2xhc3NMaXN0LnJlbW92ZSgnZmQtaGlkZGVuJylcblxuICAgICAgICB0aGlzLmVtaXQoICdhZGp1c3RtZW50JywgeyBkZXNjcmlwdGlvbjogdGhpcy5nZXRBZGp1c3RtZW50RGVzY3JpcHRpb24oKSwgb3JpZ2luYWxXZWVrbHlQcmljZTogdGhpcy5vcmlnaW5hbFdlZWtseVByaWNlLCBwcmljZUFkanVzdG1lbnQgfSApXG4gICAgfSxcblxuICAgIHRlbXBsYXRlczoge1xuICAgICAgICBmaWVsZEVkaXQ6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL0ZpZWxkRWRpdCcpLFxuICAgICAgICBhcmNoaXZlZE9wdGlvbjogb3B0aW9uID0+IGA8bGk+PGRpdiBjbGFzcz1cImNlbGxcIj4ke29wdGlvbi5uYW1lfTwvZGl2PjxkaXYgY2xhc3M9XCJjZWxsXCIgZGF0YS1qcz1cIiR7b3B0aW9uLmlkfVwiPjwvZGl2PjwvbGk+YCxcbiAgICAgICAgZWRpdGFibGVPcHRpb246IG9wdGlvbiA9PiBgPGxpIGRhdGEtbmFtZT1cIiR7b3B0aW9uLmtleSB8fCBvcHRpb24uaWR9XCIgY2xhc3M9XCJlZGl0YWJsZVwiPjxzcGFuPiR7b3B0aW9uLm5hbWV9PC9zcGFuPjxzZWxlY3QgZGF0YS1qcz1cIiR7b3B0aW9uLmlkfVwiPjwvc2VsZWN0PjwvbGk+YCxcbiAgICAgICAgc2VsZWN0T3B0aW9uOiBvcHRpb24gPT4gYDxvcHRpb24gdmFsdWU9XCIke29wdGlvbi5uYW1lfVwiPiR7b3B0aW9uLmxhYmVsfTwvb3B0aW9uPmBcbiAgICB9LFxuXG4gICAgdXBkYXRlKCB7IGN1c3RvbWVyLCBkZWxpdmVyeSwgc2hhcmUgfSApIHtcbiAgICAgICAgdGhpcy5jbGVhcigpXG4gICAgICAgIHRoaXMuZWRpdGVkRmllbGRzID0geyB9XG5cbiAgICAgICAgdGhpcy5tb2RlbCA9IGFyZ3VtZW50c1swXVxuXG4gICAgICAgIHRoaXMuZWRpdGFibGUgPSAoIHRoaXMuTW9tZW50KCkgPCB0aGlzLk1vbWVudCggc2hhcmUuZW5kZGF0ZSApIClcbiAgICAgICAgdGhpcy5vcHRpb25UZW1wbGF0ZSA9IHRoaXMuZWRpdGFibGUgPyAnZWRpdGFibGVPcHRpb24nIDogJ2FyY2hpdmVkT3B0aW9uJ1xuXG4gICAgICAgIHRoaXMuZWxzLnNlYXNvbkxhYmVsLnRleHRDb250ZW50ID0gc2hhcmUubGFiZWxcblxuICAgICAgICByZXR1cm4gdGhpcy5PcmRlck9wdGlvbi5nZXQoIHsgcXVlcnk6IHsgc2hhcmVpZDogc2hhcmUuaWQsIHNoYXJlb3B0aW9uaWQ6IHsgb3BlcmF0aW9uOiAnam9pbicsIHZhbHVlOiB7IHRhYmxlOiAnc2hhcmVvcHRpb24nLCBjb2x1bW46ICdpZCcgfSB9IH0gfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLlNoYXJlT3B0aW9uT3B0aW9uLmdldCgpIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuTWVtYmVyU2VsZWN0aW9uLmdldCggeyBxdWVyeTogeyBtZW1iZXJzaGFyZWlkOiBzaGFyZS5tZW1iZXJzaGFyZWlkLCBzaGFyZW9wdGlvbm9wdGlvbmlkOiB7IG9wZXJhdGlvbjogJ2pvaW4nLCB2YWx1ZTogeyB0YWJsZTogJ3NoYXJlb3B0aW9ub3B0aW9uJywgY29sdW1uOiAnaWQnIH0gfSB9IH0gKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLnJlbmRlclNoYXJlT3B0aW9ucygpIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuRGVsaXZlcnlPcHRpb25zLmdldCgpIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuR3JvdXBEcm9wb2Zmcy5nZXQoKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckRlbGl2ZXJ5T3B0aW9ucygpIFxuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbFdlZWtseVByaWNlID0gdGhpcy5jYWxjdWxhdGVXZWVrbHlQcmljZSgpXG4gICAgICAgICAgICB0aGlzLnNob3coKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIH0gKVxuXG4gICAgfVxuXG59IClcbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbigge30sIHJlcXVpcmUoJy4vX19wcm90b19fJyksIHtcblxuICAgIFBpa2FkYXk6IHJlcXVpcmUoJ3Bpa2FkYXknKSxcblxuICAgIGV2ZW50czoge1xuICAgICAgICBleHBvcnRCdG46ICdjbGljaycsXG4gICAgICAgIHZpZXdCdG46ICdjbGljaydcbiAgICB9LFxuXG4gICAgaGFuZGxlQ29sdW1ucyggcm93cyApIHtcbiAgICAgICAgY29uc3QgY29sdW1ucyA9IHRoaXMuZWxzLmNvbHVtbnNcblxuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkcmVuKCBjb2x1bW5zIClcblxuICAgICAgICB0aGlzLmNvbHVtbnMgPSBPYmplY3Qua2V5cyggcm93c1swXSApXG5cbiAgICAgICAgdGhpcy5jb2x1bW5zLmZvckVhY2goIGNvbHVtbiA9PiB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgdGVtcGxhdGU6IGA8bGk+JHtjb2x1bW59PC9saT5gLCBpbnNlcnRpb246IHsgZWw6IGNvbHVtbnMgfSB9ICkgKVxuICAgIH0sXG5cbiAgICBoYW5kbGVSb3dzKCByb3dzICkge1xuICAgICAgICBjb25zdCByb3dzRWwgPSB0aGlzLmVscy5yb3dzXG5cbiAgICAgICAgdGhpcy5yZW1vdmVDaGlsZHJlbiggcm93c0VsIClcblxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHJvd3MubWFwKCByb3cgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29sdW1ucyA9IHRoaXMuY29sdW1ucy5tYXAoIGNvbHVtbiA9PiBgPGxpPiR7cm93W2NvbHVtbl19PC9saT5gICkuam9pbignJylcbiAgICAgICAgICAgIHJldHVybiBgPG9sPiR7Y29sdW1uc308L29sPmBcbiAgICAgICAgfSApLmpvaW4oJycpXG5cbiAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlLCBpbnNlcnRpb246IHsgZWw6IHJvd3NFbCB9IH0gKVxuICAgIH0sXG5cbiAgICBub1Jlc3VsdHMoKSB7XG4gICAgICAgIHRoaXMuZWxzLmVtcHR5LmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGUnKVxuICAgIH0sXG5cbiAgICBvbkV4cG9ydEJ0bkNsaWNrKCkge1xuICAgICAgICBjb25zdCBxcyA9IHsgaWQ6IHRoaXMuZWxzLnJlcG9ydC52YWx1ZSwgdG86IHRoaXMuZWxzLnRvLnZhbHVlLCBmcm9tOiB0aGlzLmVscy5mcm9tLnZhbHVlLCBleHBvcnQ6IHRydWUgfVxuICAgICAgICB3aW5kb3cub3BlbiggYC9yZXBvcnQ/JHsgd2luZG93LmVuY29kZVVSSUNvbXBvbmVudCggSlNPTi5zdHJpbmdpZnkoIHFzICkgKSB9YCApXG4gICAgfSxcbiAgICBcbiAgICBvblZpZXdCdG5DbGljaygpIHtcbiAgICAgICAgdGhpcy5YaHIoIHsgbWV0aG9kOiAnZ2V0JywgcmVzb3VyY2U6ICdyZXBvcnQnLCBxczogSlNPTi5zdHJpbmdpZnkoIHsgaWQ6IHRoaXMuZWxzLnJlcG9ydC52YWx1ZSwgdG86IHRoaXMuZWxzLnRvLnZhbHVlLCBmcm9tOiB0aGlzLmVscy5mcm9tLnZhbHVlIH0gKSB9IClcbiAgICAgICAgLnRoZW4oIHJlc3VsdCA9PiB7XG4gICAgICAgICAgICBpZiggcmVzdWx0Lmxlbmd0aCA9PSAwICkgcmV0dXJuIHRoaXMubm9SZXN1bHRzKClcbiAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmVscy5lbXB0eS5jbGFzc0xpc3QuYWRkKCdmZC1oaWRlJylcblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVDb2x1bW5zKCByZXN1bHQgKVxuICAgICAgICAgICAgdGhpcy5oYW5kbGVSb3dzKCByZXN1bHQgKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIH0gKVxuICAgICAgICAuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgIFxuICAgICAgICB0aGlzLlJlcG9ydHMgPSBPYmplY3QuY3JlYXRlKCB0aGlzLk1vZGVsLCB7IHJlc291cmNlOiB7IHZhbHVlOiAncmVwb3J0JyB9IH0gKVxuXG4gICAgICAgIHRoaXMuUmVwb3J0cy5nZXQoKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5SZXBvcnRzLmRhdGEuZm9yRWFjaCggcmVwb3J0ID0+IHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZTogYDxvcHRpb24gdmFsdWU9XCIke3JlcG9ydC5pZH1cIj4ke3JlcG9ydC5sYWJlbH08L29wdGlvbj5gLCBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWxzLnJlcG9ydCB9IH0gKSApIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcblxuICAgICAgICBuZXcgdGhpcy5QaWthZGF5KCB7IGZpZWxkOiB0aGlzLmVscy5mcm9tLCBmb3JtYXQ6ICdZWVlZLU1NLUREJyB9IClcbiAgICAgICAgbmV3IHRoaXMuUGlrYWRheSggeyBmaWVsZDogdGhpcy5lbHMudG8sIGZvcm1hdDogJ1lZWVktTU0tREQnIH0gKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlbW92ZUNoaWxkcmVuKCBlbCApIHtcbiAgICAgICAgd2hpbGUoIGVsLmZpcnN0Q2hpbGQgKSB7IGVsLnJlbW92ZUNoaWxkKCBlbC5maXJzdENoaWxkICkgfVxuICAgIH0sXG59IClcbiIsInZhciBUYWJsZSA9IHJlcXVpcmUoJy4vdXRpbC9UYWJsZScpLFxuICAgIFJlc291cmNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc3Bpbm5lciA9IG5ldyB0aGlzLlNwaW5uZXIoIHtcbiAgICAgICAgICAgIGNvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICBsZW5ndGg6IDE1LFxuICAgICAgICAgICAgc2NhbGU6IDAuMjUsXG4gICAgICAgICAgICB3aWR0aDogNVxuICAgICAgICB9ICkuc3BpbigpXG4gICAgICAgIHJldHVybiBUYWJsZS5hcHBseSggdGhpcywgYXJndW1lbnRzIClcbiAgICB9XG5cbk9iamVjdC5hc3NpZ24oIFJlc291cmNlLnByb3RvdHlwZSwgVGFibGUucHJvdG90eXBlLCB7XG5cbiAgICBJbnN0YW5jZTogcmVxdWlyZSgnLi4vbW9kZWxzL0luc3RhbmNlJyksXG5cbiAgICBJdGVtVmlldzogcmVxdWlyZSgnLi9JbnN0YW5jZVJvdycpLFxuXG4gICAgU3Bpbm5lcjogcmVxdWlyZSgnLi4vc3BpbicpLFxuXG4gICAgY29sbGVjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZGVsOiB0aGlzLkluc3RhbmNlLFxuICAgICAgICAgICAgcGFyc2U6IHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsID0gcmVzcG9uc2UubGFiZWw7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmREZXNjcmlwdG9yID0gcmVzcG9uc2UucmVjb3JkRGVzY3JpcHRvcjtcbiAgICAgICAgICAgICAgICBpZiggcmVzcG9uc2Uub3BlcmF0aW9uW1wiQHR5cGVcIl0gPT09IFwiQ3JlYXRlXCIgKSB0aGlzLmNyZWF0ZVByb3BlcnRpZXMgPSByZXNwb25zZS5vcGVyYXRpb24uZXhwZWN0cy5zdXBwb3J0ZWRQcm9wZXJ0eVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZVsgdGhpcy5yZXNvdXJjZSBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXJsOiB0aGlzLnV0aWwuZm9ybWF0KCBcIi8lc1wiLCB0aGlzLnJlc291cmNlIClcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjcmVhdGUoIGRhdGEgKSB7XG4gICAgICAgIHZhciBmaWxlcyA9IFtdXG5cbiAgICAgICAgdGhpcy5jcmVhdGVQcm9wZXJ0aWVzLmZvckVhY2goIHByb3BlcnR5ID0+IHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gcHJvcGVydHkucHJvcGVydHlcblxuICAgICAgICAgICAgaWYoIHByb3BlcnR5LmZrICYmIHRoaXNbIHByb3BlcnR5LmZrLnRhYmxlICsgXCJUeXBlYWhlYWRcIiBdICkge1xuICAgICAgICAgICAgICAgIGRhdGFbIG5hbWUgXSA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbIHByb3BlcnR5LmZrLnRhYmxlICsgXCJUeXBlYWhlYWRcIiBdWyAoIHByb3BlcnR5LmRlc2NyaXB0b3IucGF0aC5sZW5ndGggKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbIHByb3BlcnR5LmRlc2NyaXB0b3IucGF0aFswXS50YWJsZSwgJ2lkJyBdLmpvaW4oJy4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnaWQnIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCBwcm9wZXJ0eS5yYW5nZSA9PT0gXCJGaWxlXCIgKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFbIG5hbWUgXVxuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goIHsgbmFtZTogbmFtZSwgZGF0YTogdGhpc1sgbmFtZSArIFwiRmlsZVwiIF0gfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMubW9kYWxWaWV3LnRlbXBsYXRlRGF0YS5jb25maXJtQnRuLmFwcGVuZCggdGhpcy5zcGlubmVyLnNwaW4oKS5lbCApLmFkZENsYXNzKCdoYXMtc3Bpbm5lcicpXG5cbiAgICAgICAgdGhpcy4kLmFqYXgoIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSggZGF0YSApLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6IHRoaXMudXRpbC5mb3JtYXQoIFwiLyVzXCIsIHRoaXMucmVzb3VyY2UgKSxcbiAgICAgICAgfSApXG4gICAgICAgIC5kb25lKCAoIHJlc3BvbnNlLCB0ZXh0U3RhdHVzLCBqcVhIUiApID0+IHtcbiAgICAgICAgICAgIGlmKCB0aGlzLml0ZW1zLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmZpZWxkcyA9PT0gdW5kZWZpbmVkICkgdGhpcy5zZXRGaWVsZHMoIHJlc3BvbnNlIClcblxuICAgICAgICAgICAgUHJvbWlzZS5hbGwoIGZpbGVzLm1hcCggZmlsZSA9PiB0aGlzLnVwbG9hZEZpbGUoIGZpbGUubmFtZSwgZmlsZS5kYXRhLCByZXNwb25zZS5pZCApICkgKS50aGVuKCAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVByb3BlcnRpZXMuZm9yRWFjaCggcHJvcGVydHkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHByb3BlcnR5LnByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgIGlmKCBwcm9wZXJ0eS5mayAmJiB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXSAmJiAoIHByb3BlcnR5LmRlc2NyaXB0b3IucGF0aCApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VbIFsgcHJvcGVydHkuZGVzY3JpcHRvci50YWJsZSwgcHJvcGVydHkuZGVzY3JpcHRvci5jb2x1bW4ubmFtZSBdLmpvaW4oJy4nKSBdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3I6IHByb3BlcnR5LmRlc2NyaXB0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IHByb3BlcnR5LmZrLnRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiByZXNwb25zZVsgbmFtZSBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXVsgcHJvcGVydHkuZGVzY3JpcHRvci5jb2x1bW4ubmFtZSBdIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5hZGQoIG5ldyB0aGlzLkluc3RhbmNlKCByZXNwb25zZSwgeyBwYXJzZTogdHJ1ZSB9ICkgKVxuICAgICAgICAgICAgICAgIHRoaXMubW9kYWxWaWV3LnRlbXBsYXRlRGF0YS5jb25maXJtQnRuLnJlbW92ZUNsYXNzKCdoYXMtc3Bpbm5lcicpXG4gICAgICAgICAgICAgICAgdGhpcy5zcGlubmVyLnN0b3AoKVxuICAgICAgICAgICAgICAgIHRoaXMubW9kYWxWaWV3LmhpZGUoIHsgcmVzZXQ6IHRydWUgfSApXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGRlbGV0ZU1vZGVsKCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy4kLmFqYXgoIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAgdXJsOiB0aGlzLnV0aWwuZm9ybWF0KCBcIi8lcy8lc1wiLCB0aGlzLnJlc291cmNlLCB0aGlzLm1vZGVsVG9EZWxldGUuaWQgKVxuICAgICAgICB9IClcbiAgICAgICAgLmRvbmUoICggcmVzcG9uc2UsIHRleHRTdGF0dXMsIGpxWEhSICkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5yZW1vdmUoIHRoaXMubW9kZWxUb0RlbGV0ZSApXG4gICAgICAgICAgICB0aGlzLm1vZGVsVG9EZWxldGUgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIHRoaXMubW9kYWxWaWV3LmhpZGUoIHsgcmVzZXQ6IHRydWUgfSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBlZGl0KCBkYXRhICkge1xuXG4gICAgICAgIHZhciBmaWxlUHJvbWlzZXMgPSBbIF0sXG4gICAgICAgICAgICBtb2RlbEF0dHJzID0geyB9XG5cbiAgICAgICAgdGhpcy5jcmVhdGVQcm9wZXJ0aWVzLmZvckVhY2goIHByb3BlcnR5ID0+IHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gcHJvcGVydHkucHJvcGVydHlcblxuICAgICAgICAgICAgaWYoIHByb3BlcnR5LmZrICkge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVcblxuICAgICAgICAgICAgICAgIGlmKCAhIHRoaXNbIHByb3BlcnR5LmZrLnRhYmxlICsgXCJUeXBlYWhlYWRcIiBdICkgeyBkZWxldGUgZGF0YVsgbmFtZSBdOyByZXR1cm4gfVxuXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlID0gdGhpcy51dGlsLmZvcm1hdCggJyVzLiVzJywgcHJvcGVydHkuZGVzY3JpcHRvci50YWJsZSwgcHJvcGVydHkuZGVzY3JpcHRvci5jb2x1bW4ubmFtZSApXG5cbiAgICAgICAgICAgICAgICBkYXRhWyBuYW1lIF0gPVxuICAgICAgICAgICAgICAgICAgICB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXVsgKCBwcm9wZXJ0eS5kZXNjcmlwdG9yLnBhdGgubGVuZ3RoIClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gWyBwcm9wZXJ0eS5kZXNjcmlwdG9yLnBhdGhbMF0udGFibGUsICdpZCcgXS5qb2luKCcuJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ2lkJyBdXG5cbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsVG9FZGl0LmdldCggYXR0cmlidXRlICkuaWQgPSB0aGlzWyBwcm9wZXJ0eS5may50YWJsZSArIFwiVHlwZWFoZWFkXCIgXS5pZFxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxUb0VkaXQuZ2V0KCBhdHRyaWJ1dGUgKS52YWx1ZSA9IHRoaXNbIHByb3BlcnR5LmZrLnRhYmxlICsgXCJUeXBlYWhlYWRcIiBdWyBwcm9wZXJ0eS5kZXNjcmlwdG9yLmNvbHVtbi5uYW1lIF1cbiAgICAgICAgICAgIH0gZWxzZSBpZiggcHJvcGVydHkucmFuZ2UgPT09IFwiRmlsZVwiICkgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YVsgbmFtZSBdXG4gICAgICAgICAgICAgICAgaWYoIHRoaXNbIG5hbWUgKyBcIkZpbGVcIiBdICYmIHRoaXNbIG5hbWUgKyBcIkZpbGVcIiBdLmxlbmd0aCApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbFRvRWRpdC5nZXQoIG5hbWUgKS5zcmMgPSB0aGlzWyBuYW1lICsgXCJCYXNlNjRcIiBdXG4gICAgICAgICAgICAgICAgICAgIGZpbGVQcm9taXNlcy5wdXNoKCB0aGlzLnVwbG9hZEZpbGUoIG5hbWUsIHRoaXNbIG5hbWUgKyBcIkZpbGVcIiBdLCB0aGlzLm1vZGVsVG9FZGl0LmlkICkgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiggcHJvcGVydHkucHJvcGVydHkgPT09IFwiZGF5b2Z3ZWVrXCIgKSB7XG4gICAgICAgICAgICAgICAgbW9kZWxBdHRyc1sgcHJvcGVydHkucHJvcGVydHkgXSA9IHsgcmF3OiBkYXRhWyBwcm9wZXJ0eS5wcm9wZXJ0eSBdLCB2YWx1ZTogdGhpcy5tb2RlbFRvRWRpdC5EYXlPZldlZWtIYXNoWyBkYXRhWyBwcm9wZXJ0eS5wcm9wZXJ0eSBdIF0gfSB9XG4gICAgICAgICAgICBlbHNlIHsgbW9kZWxBdHRyc1sgcHJvcGVydHkucHJvcGVydHkgXSA9IGRhdGFbIHByb3BlcnR5LnByb3BlcnR5IF0gfVxuICAgICAgICAgICAgXG4gICAgICAgIH0gKVxuICAgICAgIFxuICAgICAgICBQcm9taXNlLmFsbCggZmlsZVByb21pc2VzICkudGhlbiggKCkgPT5cbiAgICAgICAgICAgIHRoaXMuJC5hamF4KCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyBhY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoIGRhdGEgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLnV0aWwuZm9ybWF0KCBcIi8lcy8lZFwiLCB0aGlzLnJlc291cmNlLCB0aGlzLm1vZGVsVG9FZGl0LmlkIClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgLmRvbmUoICggcmVzcG9uc2UsIHRleHRTdGF0dXMsIGpxWEhSICkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxUb0VkaXQuc2V0KCBtb2RlbEF0dHJzLCB7IHNpbGVudDogdHJ1ZSB9IClcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsVG9FZGl0LnRyaWdnZXIoICdjaGFuZ2UnLCB0aGlzLm1vZGVsVG9FZGl0IClcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsVG9FZGl0ID0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RhbFZpZXcuaGlkZSggeyByZXNldDogdHJ1ZSB9IClcbiAgICAgICAgICAgIH0gKSApXG4gICAgICAgIC5jYXRjaCggZXJyID0+IGNvbnNvbGUubG9nKCBlcnIuc3RhY2sgfHwgZXJyICkgKVxuICAgIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgY3JlYXRlQnRuOiB7IG1ldGhvZDogJ3Nob3dDcmVhdGVEaWFsb2cnIH0sXG4gICAgICAgIGRlbGV0ZUJ0bjogeyBtZXRob2Q6ICdzaG93RGVsZXRlRGlhbG9nJyB9LFxuICAgICAgICBlZGl0QnRuOiB7IG1ldGhvZDogJ3Nob3dFZGl0RGlhbG9nJyB9LFxuICAgICAgICBib2R5OiBbXG4gICAgICAgICAgICB7IGV2ZW50OiAnbW91c2VvdmVyJywgc2VsZWN0b3I6ICd0cicsIG1ldGhvZDogJ29uUm93TW91c2VFbnRlcicgfSxcbiAgICAgICAgICAgIHsgZXZlbnQ6ICdtb3VzZW91dCcsIHNlbGVjdG9yOiAndHInLCBtZXRob2Q6ICdvblJvd01vdXNlTGVhdmUnIH1cbiAgICAgICAgXVxuICAgIH0sXG5cbiAgICBmZXRjaDogeyBoZWFkZXJzOiB7IGFjY2VwdDogXCJhcHBsaWNhdGlvbi9sZCtqc29uXCIgfSB9LFxuXG4gICAgZ2V0SW1hZ2UoIG1vZGVsICkge1xuICAgICAgICB2YXIgaW1hZ2VFbCA9IG5ldyBJbWFnZSgpO1xuICAgICAgIFxuICAgICAgICBpbWFnZUVsLnN0eWxlLmhlaWdodCA9ICc1MHB4JyBcbiAgICAgICAgaW1hZ2VFbC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiggdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0gKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0udGVtcGxhdGVEYXRhWyBtb2RlbC5jb2x1bW4gXS5odG1sKCBpbWFnZUVsIClcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1WaWV3c1sgbW9kZWwuaWQgXS5yZXRyaWV2ZWRJbWFnZSggbW9kZWwuY29sdW1uIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCB0aGlzLml0ZW1zLmdldCggbW9kZWwuaWQgKSApIHRoaXMuaXRlbXMuZ2V0KCBtb2RlbC5pZCApLmdldCggbW9kZWwuY29sdW1uICkuaW1hZ2VFbCA9IGltYWdlRWxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoICgpID0+IHRoaXMuaW1hZ2VMb2FkZXIucmVtb3ZlKG1vZGVsKSwgMTAwIClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaW1hZ2VFbC5vbmVycm9yID0gKCkgPT4gd2luZG93LnNldFRpbWVvdXQoICgpID0+IHRoaXMuaW1hZ2VMb2FkZXIucmVtb3ZlKG1vZGVsKSwgMTAwIClcblxuICAgICAgICBpbWFnZUVsLnNyYyA9ICggbW9kZWwuY29sdW1uID09PSBcImpvYmRlc2NyaXB0aW9uXCIgKVxuICAgICAgICAgICAgPyAnL3N0YXRpYy9pbWcvcGRmLnN2ZydcbiAgICAgICAgICAgIDogdGhpcy51dGlsLmZvcm1hdCggJy9maWxlLyVzLyVzLyVkJywgdGhpcy5yZXNvdXJjZSwgbW9kZWwuY29sdW1uLCBtb2RlbC5pZCApXG4gICAgfSxcblxuICAgIGdldEltYWdlRGF0YSggYmFzZTY0ICkgeyByZXR1cm4gYmFzZTY0LnNsaWNlKCBiYXNlNjQuaW5kZXhPZignLCcpICsgMSApIH0sXG5cbiAgICBnZXRMYWJlbCggcHJvcGVydHkgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdC5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoIHByb3BlcnR5IClcbiAgICB9LFxuXG4gICAgaW5pdERhdGVwaWNrZXIoIHByb3BlcnR5LCBtb2RlbFZhbHVlICkge1xuICAgICAgICB2YXIgdGltZSwgdmFsdWVcbiAgICAgICAgICAgIFxuICAgICAgICBpZiggbW9kZWxWYWx1ZSApIHZhbHVlID0gbW9kZWxWYWx1ZS52YWx1ZVxuXG4gICAgICAgIGlmKCB2YWx1ZSAmJiBwcm9wZXJ0eS5yYW5nZSA9PT0gXCJUaW1lXCIgKSB7XG4gICAgICAgICAgICB0aW1lID0gdmFsdWUuc2xpY2UoIDAsIC0yIClcbiAgICAgICAgICAgIHZhbHVlID0gKCAvQU0vLnRlc3QodmFsdWUpIHx8IHRpbWUuc2xpY2UoMCwxKSA9PT0gXCIxMlwiICkgPyB0aW1lIDogdGhpcy51dGlsLmZvcm1hdCggJyVkOiVzJywgcGFyc2VJbnQodGltZS5zcGxpdChcIjpcIilbMF0pICsgMTIsIHRpbWUuc3BsaXQoXCI6XCIpWzFdIClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy4kKCAnIycgKyBwcm9wZXJ0eS5wcm9wZXJ0eSApLmRhdGV0aW1lcGlja2VyKFxuICAgICAgICAgICAgKCBwcm9wZXJ0eS5yYW5nZSA9PT0gXCJUaW1lXCIgKVxuICAgICAgICAgICAgICAgID8geyBmb3JtYXQ6IFwiaDptbUFcIiwgZGVmYXVsdERhdGU6ICggdmFsdWUgKSA/IHRoaXMubW9tZW50KCBbIHRoaXMubW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJyksIHZhbHVlIF0uam9pbihcIiBcIikgKSA6IFwiXCIgfVxuICAgICAgICAgICAgICAgIDogeyBmb3JtYXQ6IFwiWVlZWS1NTS1ERFwiLCBkZWZhdWx0RGF0ZTogKCB2YWx1ZSAmJiBtb2RlbFZhbHVlLnJhdyApID8gdGhpcy5tb21lbnQoIG1vZGVsVmFsdWUucmF3ICkuZm9ybWF0KCdZWVlZLU1NLUREJykgOiBcIlwiIH0gKVxuICAgIH0sXG5cbiAgICBpbml0RmlsZVVwbG9hZGVyKCBwcm9wZXJ0eSApIHtcbiAgICAgICAgdmFyIG5hbWUgPSBwcm9wZXJ0eS5wcm9wZXJ0eSxcbiAgICAgICAgICAgICRlbCA9IHRoaXMubW9kYWxWaWV3LnRlbXBsYXRlRGF0YVsgbmFtZSBdLFxuICAgICAgICAgICAgYnRuID0gdGhpcy5tb2RhbFZpZXcudGVtcGxhdGVEYXRhWyBwcm9wZXJ0eS5wcm9wZXJ0eSArIFwiQnRuXCIgXVxuXG4gICAgICAgIHRoaXNbIHByb3BlcnR5LnByb3BlcnR5ICsgXCJGaWxlXCIgXSA9PT0gdW5kZWZpbmVkXG5cbiAgICAgICAgJGVsLm9uKCAnY2hhbmdlJywgZSA9PiB7XG4gICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGJ0bi5hZGRDbGFzcygnaGFzLXNwaW5uZXInKS5hcHBlbmQoIHRoaXMuc3Bpbm5lci5zcGluKCkuZWwgKVxuXG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gKCBldnQgKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGltYWdlRGF0YSA9IHRoaXMuZ2V0SW1hZ2VEYXRhKCBldnQudGFyZ2V0LnJlc3VsdCApLFxuICAgICAgICAgICAgICAgICAgICBwcmV2aWV3SW1hZ2VTcmMgPSAoIGV2dC50YXJnZXQucmVzdWx0LnNsaWNlKDAsMjApID09PSAnZGF0YTphcHBsaWNhdGlvbi9wZGYnIClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJy9zdGF0aWMvaW1nL3BkZi5zdmcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGV2dC50YXJnZXQucmVzdWx0XG5cbiAgICAgICAgICAgICAgICB0aGlzWyBwcm9wZXJ0eS5wcm9wZXJ0eSArIFwiRmlsZVwiIF0gPSBpbWFnZURhdGFcbiAgICAgICAgICAgICAgICB0aGlzWyBwcm9wZXJ0eS5wcm9wZXJ0eSArIFwiQmFzZTY0XCIgXSA9IGV2dC50YXJnZXQucmVzdWx0XG4gICAgICAgICAgICAgICAgYnRuLnJlbW92ZUNsYXNzKCdoYXMtc3Bpbm5lcicpXG4gICAgICAgICAgICAgICAgdGhpcy5zcGlubmVyLnN0b3AoKVxuICAgICAgICAgICAgICAgIHRoaXMuJCggJyMnICsgcHJvcGVydHkucHJvcGVydHkgKyBcIi1wcmV2aWV3XCIgKS5hdHRyKCB7IHNyYzogcHJldmlld0ltYWdlU3JjIH0gKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTCggZS5vcmlnaW5hbEV2ZW50LnRhcmdldC5maWxlc1swXSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBpbml0VHlwZWFoZWFkKCBwcm9wZXJ0eSApIHtcbiAgICAgICAgdmFyIGJsb29kaG91bmQgPSBuZXcgQmxvb2Rob3VuZCgge1xuICAgICAgICAgICAgZGF0dW1Ub2tlbml6ZXI6IEJsb29kaG91bmQudG9rZW5pemVycy5vYmoud2hpdGVzcGFjZShwcm9wZXJ0eS5kZXNjcmlwdG9yLmNvbHVtbi5uYW1lKSxcbiAgICAgICAgICAgIGlkZW50aWZ5OiBvYmogPT4gb2JqLmlkLFxuICAgICAgICAgICAgcXVlcnlUb2tlbml6ZXI6IEJsb29kaG91bmQudG9rZW5pemVycy53aGl0ZXNwYWNlLFxuICAgICAgICAgICAgcmVtb3RlOiB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZTogKHVybCwgcXVlcnkpID0+IHVybC5yZXBsYWNlKCAnJVFVRVJZJywgZW5jb2RlVVJJQ29tcG9uZW50IChxdWVyeSkgKSxcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMudXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIi8lcz8lcz0lUVVFUlkmbGlrZT0xJnBhdGg9JXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LmRlc2NyaXB0b3IudGFibGUsIHByb3BlcnR5LmRlc2NyaXB0b3IuY29sdW1uLm5hbWUsIGVuY29kZVVSSUNvbXBvbmVudCggSlNPTi5zdHJpbmdpZnkoIHByb3BlcnR5LmRlc2NyaXB0b3IucGF0aCApICkgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9ICksXG4gICAgICAgIGVsID0gdGhpcy4kKCAnIycgKyBwcm9wZXJ0eS5wcm9wZXJ0eSApXG5cbiAgICAgICAgYmxvb2Rob3VuZC5pbml0aWFsaXplKClcblxuICAgICAgICBlbC50eXBlYWhlYWQoIHsgaGludDogdHJ1ZSB9LCB7IGRpc3BsYXk6IG9iaiA9PiBvYmpbIHByb3BlcnR5LmRlc2NyaXB0b3IuY29sdW1uLm5hbWUgXSwgc291cmNlOiBibG9vZGhvdW5kLnR0QWRhcHRlcigpIH0gKVxuICAgICAgICAuYmluZCggJ3R5cGVhaGVhZDpzZWxlY3RlZCB0eXBlYWhlYWQ6YXV0b2NvbXBsZXRlZCcsICggb2JqLCBzZWxlY3RlZCwgbmFtZSApID0+IHtcbiAgICAgICAgICAgIHRoaXNbIHByb3BlcnR5LmZrLnRhYmxlICsgXCJUeXBlYWhlYWRcIiBdID0gc2VsZWN0ZWRcbiAgICAgICAgICAgIGVsLm9uZSggJ2NoYW5nZScsICgpID0+IHRoaXNbIHByb3BlcnR5LmZrLnRhYmxlICsgXCJUeXBlYWhlYWRcIiBdID0gdW5kZWZpbmVkIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIG9uUm93TW91c2VFbnRlciggZSApIHtcbiAgICAgICAgdmFyIHJvdyA9IHRoaXMuJCggZS5jdXJyZW50VGFyZ2V0ICksXG4gICAgICAgICAgICB0b3AgPSByb3cucG9zaXRpb24oKS50b3AgKyAxM1xuXG4gICAgICAgIHRoaXMuaG92ZXJlZE1vZGVsID0gdGhpcy5pdGVtcy5nZXQoIHJvdy5hdHRyKCAnZGF0YS1pZCcgKSApXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmVkaXRCdG4ucmVtb3ZlQ2xhc3MoJ2hpZGUnKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5kZWxldGVCdG4ucmVtb3ZlQ2xhc3MoJ2hpZGUnKVxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmVkaXRCdG4uY3NzKCB7IHRvcDogdG9wLCBsZWZ0OiAnMTE1cHgnIH0gKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5kZWxldGVCdG4uY3NzKCB7IHRvcDogdG9wLCBsZWZ0OiAnMTM1cHgnIH0gKVxuICAgIH0sXG4gICAgXG4gICAgb25Sb3dNb3VzZUxlYXZlKCBlICkge1xuXG4gICAgICAgIGlmKCB0aGlzLmlzTW91c2VPbkVsKCBlLCB0aGlzLnRlbXBsYXRlRGF0YS5kZWxldGVCdG4gKSB8fCB0aGlzLmlzTW91c2VPbkVsKCBlLCB0aGlzLnRlbXBsYXRlRGF0YS5lZGl0QnRuICkgKSByZXR1cm5cblxuICAgICAgICB0aGlzLmhvdmVyZWRNb2RlbCA9IHVuZGVmaW5lZFxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmRlbGV0ZUJ0bi5hZGRDbGFzcygnaGlkZScpXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmVkaXRCdG4uYWRkQ2xhc3MoJ2hpZGUnKVxuICAgIH0sXG5cbiAgICBwb3B1bGF0ZU1vZGFsRmllbGQoIHByb3BlcnR5ICkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzLm1vZGFsVmlldy50ZW1wbGF0ZURhdGFbIHByb3BlcnR5LnByb3BlcnR5IF0sXG4gICAgICAgICAgICBpbWcsXG4gICAgICAgICAgICBtb2RlbFZhbHVlXG5cbiAgICAgICAgaWYoICEgZWwgKSByZXR1cm5cbiAgICAgICAgaWYoIHByb3BlcnR5LnJhbmdlID09PSAnRmlsZScgKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRGaWxlVXBsb2FkZXIoIHByb3BlcnR5IClcbiAgICAgICAgICAgIGltZyA9IHRoaXMuaXRlbVZpZXdzWyB0aGlzLm1vZGVsVG9FZGl0LmlkIF0udGVtcGxhdGVEYXRhWyBwcm9wZXJ0eS5wcm9wZXJ0eSBdLmZpbmQoJ2ltZycpXG4gICAgICAgICAgICBpZiggaW1nLmxlbmd0aCApIHRoaXMubW9kYWxWaWV3LnRlbXBsYXRlRGF0YVsgcHJvcGVydHkucHJvcGVydHkgKyBcIlByZXZpZXdcIiBdLnJlcGxhY2VXaXRoKCBpbWcuY2xvbmUoZmFsc2UpLmF0dHIoIHsgaWQ6IHByb3BlcnR5LnByb3BlcnR5ICsgXCItcHJldmlld1wiIH0gKSApXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbW9kZWxWYWx1ZSA9IHRoaXMubW9kZWxUb0VkaXQuZ2V0KCBwcm9wZXJ0eS5wcm9wZXJ0eSApXG4gICAgICAgICBcbiAgICAgICAgaWYoIC9EYXRlfFRpbWUvLnRlc3QocHJvcGVydHkucmFuZ2UpICkgeyByZXR1cm4gdGhpcy5pbml0RGF0ZXBpY2tlciggcHJvcGVydHksIG1vZGVsVmFsdWUgKSB9XG4gICAgICAgIGVsc2UgaWYoIHByb3BlcnR5LnByb3BlcnR5ID09PSAnZGF5b2Z3ZWVrJyApIHtcbiAgICAgICAgICAgIHJldHVybiBlbC52YWwoIG1vZGVsVmFsdWUucmF3IClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKCAhcHJvcGVydHkuZmsgfHwgIXByb3BlcnR5LmRlc2NyaXB0b3IgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWwudmFsKCAoIHR5cGVvZiBtb2RlbFZhbHVlID09PSBcImJvb2xlYW5cIiApID8gbW9kZWxWYWx1ZS50b1N0cmluZygpIDogbW9kZWxWYWx1ZSApXG4gICAgICAgIH1cbiAgICAgICBcbiAgICAgICAgdGhpcy5pbml0VHlwZWFoZWFkKCBwcm9wZXJ0eSApIFxuICAgICAgICBlbC50eXBlYWhlYWQoICd2YWwnLCB0aGlzLm1vZGVsVG9FZGl0LmdldCggWyBwcm9wZXJ0eS5kZXNjcmlwdG9yLnRhYmxlLCBwcm9wZXJ0eS5kZXNjcmlwdG9yLmNvbHVtbi5uYW1lIF0uam9pbignLicpICkudmFsdWUgKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICB0aGlzLmltYWdlTG9hZGVyID0gbmV3ICggcmVxdWlyZSgnYmFja2JvbmUnKS5Db2xsZWN0aW9uICkoKVxuICAgICAgICAgICAgLm9uKCAnYWRkJywgKCkgPT4geyBpZiggdGhpcy5pbWFnZUxvYWRlci5sZW5ndGggPT09IDEgKSB0aGlzLnByb2Nlc3NJbWFnZUxvYWRlcigpIH0gKVxuICAgICAgICAgICAgLm9uKCAncmVtb3ZlJywgKCkgPT4geyBpZiggdGhpcy5pbWFnZUxvYWRlci5sZW5ndGggKSB0aGlzLnByb2Nlc3NJbWFnZUxvYWRlcigpIH0gKVxuXG4gICAgICAgIFRhYmxlLnByb3RvdHlwZS5wb3N0UmVuZGVyLmNhbGwodGhpcylcbiAgICAgICAgdGhpcy5pdGVtcy5vbiggJ3Jlc2V0JywgKCkgPT4gdGhpcy50ZW1wbGF0ZURhdGEuc3ViSGVhZGluZy50ZXh0KCB0aGlzLmxhYmVsICkgKVxuICAgIH0sXG5cbiAgICBwcm9jZXNzSW1hZ2VMb2FkZXIoKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaW1hZ2VMb2FkZXIuYXQoMCkuaWQsXG4gICAgICAgICAgICBjb2x1bW5zID0gdGhpcy5pbWFnZUxvYWRlci5hdCgwKS5nZXQoJ2NvbHVtbnMnKVxuXG4gICAgICAgIGNvbHVtbnMuZm9yRWFjaCggY29sdW1uID0+IHRoaXMuZ2V0SW1hZ2UoIHsgJ2lkJzogaWQsICdjb2x1bW4nOiBjb2x1bW4gfSApIClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNSb2xlOiAnYWRtaW4nLFxuXG4gICAgc2V0RmllbGRzKCBpbnN0YW5jZSApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyggaW5zdGFuY2UgKSwgd2lkdGggPSBNYXRoLmZsb29yKCAxMDAgLyBrZXlzLmxlbmd0aCApXG4gICAgICAgIHRoaXMuZmllbGRzID0ga2V5cy5tYXAoIGtleSA9PiB7XG4gICAgICAgICAgICB2YXIgZmllbGQgPSB7IG5hbWU6IGtleSwgbGFiZWw6IHRoaXMuZm9ybWF0LmNhcGl0YWxpemVGaXJzdExldHRlcigga2V5ICksIHdpZHRoOiB3aWR0aCB9XG4gICAgICAgICAgICB0aGlzLiQoIHRoaXMudGVtcGxhdGVEYXRhLmhlYWRlci5jaGlsZHJlbigndHInKVswXSApLmFwcGVuZCggdGhpcy50ZW1wbGF0ZXMuaGVhZGVyQ29sdW1uLmNhbGwoIHRoaXMsIGZpZWxkICkgKVxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBzaG93Q3JlYXRlRGlhbG9nKCkge1xuXG4gICAgICAgIHZhciBvblNob3duID0gKCkgPT4gdGhpcy5jcmVhdGVQcm9wZXJ0aWVzLmZvckVhY2goIHByb3BlcnR5ID0+IHtcbiAgICAgICAgICAgICAgICBpZiggcHJvcGVydHkuZmsgJiYgcHJvcGVydHkuZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkICkgdGhpcy5pbml0VHlwZWFoZWFkKCBwcm9wZXJ0eSApXG4gICAgICAgICAgICAgICAgZWxzZSBpZiggL0RhdGV8VGltZS8udGVzdChwcm9wZXJ0eS5yYW5nZSkgKSB0aGlzLmluaXREYXRlcGlja2VyKCBwcm9wZXJ0eSApXG4gICAgICAgICAgICAgICAgZWxzZSBpZiggcHJvcGVydHkucmFuZ2UgPT09IFwiRmlsZVwiICkgdGhpcy5pbml0RmlsZVVwbG9hZGVyKCBwcm9wZXJ0eSApXG4gICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgb25TdWJtaXQgPSBkYXRhID0+IHRoaXMuY3JlYXRlKGRhdGEpXG5cbiAgICAgICAgdGhpcy5tb2RhbFZpZXcuc2hvdygge1xuICAgICAgICAgICAgYm9keTogdGhpcy50ZW1wbGF0ZXMuY3JlYXRlKCB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiB0aGlzLmNyZWF0ZVByb3BlcnRpZXMubWFwKCBwcm9wZXJ0eSA9PiBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZXNbIHByb3BlcnR5LnJhbmdlIF0oIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAoIHByb3BlcnR5LmZrICkgPyAndHlwZWFoZWFkJyA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuZ2V0TGFiZWwoICggcHJvcGVydHkuZGVzY3JpcHRvciApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbIHByb3BlcnR5LmRlc2NyaXB0b3IudGFibGUsIHByb3BlcnR5LmRlc2NyaXB0b3IuY29sdW1uLm5hbWUgXS5qb2luKCcuJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHByb3BlcnR5LnByb3BlcnR5ICksXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm9wZXJ0eS5wcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAoIHByb3BlcnR5LnByb3BlcnR5ID09PSBcInBhc3N3b3JkXCIgKSA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9ICkgXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgdGl0bGU6IHRoaXMudXRpbC5mb3JtYXQoICdDcmVhdGUgJXMnLCB0aGlzLmxhYmVsIClcbiAgICAgICAgfSApXG4gICAgICAgIC5vbiggJ3Nob3duJywgb25TaG93biApXG4gICAgICAgIC5vbiggJ3N1Ym1pdCcsIG9uU3VibWl0IClcbiAgICAgICAgLm9uKCAnaGlkZGVuJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb2RhbFZpZXcucmVtb3ZlTGlzdGVuZXIoICdzdWJtaXQnLCBvblN1Ym1pdCApXG4gICAgICAgICAgICB0aGlzLm1vZGFsVmlldy5yZW1vdmVMaXN0ZW5lciggJ3Nob3duJywgb25TaG93biApXG4gICAgICAgIH0gKVxuXG4gICAgfSxcblxuICAgIHNob3dEZWxldGVEaWFsb2coKSB7XG5cbiAgICAgICAgdmFyIG9uU3VibWl0ID0gKCkgPT4gdGhpcy5kZWxldGVNb2RlbCgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLm1vZGVsVG9EZWxldGUgPSB0aGlzLmhvdmVyZWRNb2RlbFxuXG4gICAgICAgIHRoaXMubW9kYWxWaWV3LnNob3coIHtcbiAgICAgICAgICAgIGJvZHk6IHRoaXMudXRpbC5mb3JtYXQoICdBcmUgeW91IHN1cmUgeW91IHdvdWxkIGxpa2UgdG8gZGVsZXRlICVzPycsIHRoaXMubW9kZWxUb0RlbGV0ZS5nZXQoIHRoaXMucmVjb3JkRGVzY3JpcHRvciApIHx8IFwidGhpcyByZWNvcmRcIiApLFxuICAgICAgICAgICAgY29uZmlybVRleHQ6ICdZZXMnLFxuICAgICAgICAgICAgdGl0bGU6IHRoaXMudXRpbC5mb3JtYXQoICdEZWxldGUgJXMnLCB0aGlzLmxhYmVsIClcbiAgICAgICAgfSApXG4gICAgICAgIC5vbiggJ3N1Ym1pdCcsIG9uU3VibWl0IClcbiAgICAgICAgLm9uKCAnaGlkZGVuJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb2RlbFRvRGVsZXRlID0gdW5kZWZpbmVkXG4gICAgICAgICAgICB0aGlzLm1vZGFsVmlldy5yZW1vdmVMaXN0ZW5lciggJ3N1Ym1pdCcsIG9uU3VibWl0IClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHNob3dFZGl0RGlhbG9nKCkge1xuXG4gICAgICAgIHZhciBwb3B1bGF0ZU1vZGFsRmllbGRzID0gKCkgPT4gdGhpcy5jcmVhdGVQcm9wZXJ0aWVzLmZvckVhY2goIHByb3BlcnR5ID0+IHRoaXMucG9wdWxhdGVNb2RhbEZpZWxkKCBwcm9wZXJ0eSApICksXG4gICAgICAgICAgICBvblN1Ym1pdCA9IGRhdGEgPT4gdGhpcy5lZGl0KGRhdGEpXG5cbiAgICAgICAgdGhpcy5tb2RlbFRvRWRpdCA9IHRoaXMuaG92ZXJlZE1vZGVsXG5cbiAgICAgICAgdGhpcy5tb2RhbFZpZXcuc2hvdygge1xuICAgICAgICAgICAgYm9keTogdGhpcy50ZW1wbGF0ZXMuY3JlYXRlKCB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiB0aGlzLmNyZWF0ZVByb3BlcnRpZXMubWFwKCBwcm9wZXJ0eSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlc1sgKCBwcm9wZXJ0eS5wcm9wZXJ0eSA9PT0gXCJkYXlvZndlZWtcIiApID8gXCJEYXlPZldlZWtcIiA6IHByb3BlcnR5LnJhbmdlIF0oIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAoIHByb3BlcnR5LmZrICkgPyAndHlwZWFoZWFkJyA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvcGVydHkucHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy5nZXRMYWJlbCggKCBwcm9wZXJ0eS5kZXNjcmlwdG9yIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFsgcHJvcGVydHkuZGVzY3JpcHRvci50YWJsZSwgcHJvcGVydHkuZGVzY3JpcHRvci5jb2x1bW4ubmFtZSBdLmpvaW4oJy4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcHJvcGVydHkucHJvcGVydHkgKVxuICAgICAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9ICksXG4gICAgICAgICAgICB0aXRsZTogdGhpcy51dGlsLmZvcm1hdCggJ0VkaXQgJXMnLCB0aGlzLmxhYmVsIClcbiAgICAgICAgfSApXG4gICAgICAgIC5vbiggJ3Nob3duJywgcG9wdWxhdGVNb2RhbEZpZWxkcyApXG4gICAgICAgIC5vbiggJ3N1Ym1pdCcsIG9uU3VibWl0IClcbiAgICAgICAgLm9uKCAnaGlkZGVuJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb2RhbFZpZXcucmVtb3ZlTGlzdGVuZXIoICdzaG93bicsIHBvcHVsYXRlTW9kYWxGaWVsZHMgKVxuICAgICAgICAgICAgdGhpcy5tb2RhbFZpZXcucmVtb3ZlTGlzdGVuZXIoICdzdWJtaXQnLCBvblN1Ym1pdCApXG4gICAgICAgICAgICB0aGlzLm1vZGVsVG9FZGl0ID0gdW5kZWZpbmVkXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL3Jlc291cmNlJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApLFxuXG4gICAgdGVtcGxhdGVzOiBPYmplY3QuYXNzaWduKCB7fSwgVGFibGUucHJvdG90eXBlLnRlbXBsYXRlcywge1xuICAgICAgICBjcmVhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9jcmVhdGVJbnN0YW5jZScpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKSxcbiAgICAgICAgQm9vbGVhbjogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2Zvcm0vQm9vbGVhbicpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKSxcbiAgICAgICAgRGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2Zvcm0vRGF0ZScpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKSxcbiAgICAgICAgRGF5T2ZXZWVrOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvZm9ybS9EYXlPZldlZWsnKSggcmVxdWlyZSgnaGFuZGxlYmFycycpICksXG4gICAgICAgIEZpbGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9mb3JtL0ZpbGUnKSggcmVxdWlyZSgnaGFuZGxlYmFycycpICksXG4gICAgICAgIEZsb2F0OiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvZm9ybS9UZXh0JykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApLFxuICAgICAgICBJbnRlZ2VyOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvZm9ybS9UZXh0JykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApLFxuICAgICAgICBUZXh0OiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvZm9ybS9UZXh0JykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApLFxuICAgICAgICBUZXh0QXJlYTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2Zvcm0vVGV4dEFyZWEnKSggcmVxdWlyZSgnaGFuZGxlYmFycycpICksXG4gICAgICAgIFRpbWU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9mb3JtL0RhdGUnKSggcmVxdWlyZSgnaGFuZGxlYmFycycpIClcbiAgICB9ICksXG5cbiAgICB1cGRhdGUoIHJlc291cmNlICkge1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcmVzb3VyY2VcblxuICAgICAgICB0aGlzLml0ZW1zLnJlc2V0KCBudWxsIClcbiAgICAgICAgdGhpcy5maWVsZHMgPSBbIF1cbiAgICAgICAgdGhpcy4kKCB0aGlzLnRlbXBsYXRlRGF0YS5oZWFkZXIuY2hpbGRyZW4oJ3RyJylbMF0gKS5lbXB0eSgpXG5cbiAgICAgICAgdGhpcy5jcmVhdGVJdGVtcygpXG5cbiAgICAgICAgdGhpcy5pdGVtcy5vbiggJ3Jlc2V0JywgKCkgPT4geyB0aGlzLnRlbXBsYXRlRGF0YS5zdWJIZWFkaW5nLnRleHQoIHRoaXMubGFiZWwgKSB9IClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZmV0Y2hJdGVtcygpLnNob3coKVxuICAgIH0sXG5cbiAgICB1cGxvYWRGaWxlKCBuYW1lLCBkYXRhLCBpZCApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCAoIHJlc29sdmUsIHJlamVjdCApID0+IHtcbiAgICAgICAgICAgIHRoaXMuJC5hamF4KCB7XG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIHVybDogdGhpcy51dGlsLmZvcm1hdCggXCIvZmlsZS8lcy8lcy8lZFwiLCB0aGlzLnJlc291cmNlLCBuYW1lLCBpZCApIH0gKVxuICAgICAgICAgICAgLmRvbmUoICggcmVzcG9uc2UsIHRleHRTdGF0dXMsIGpxWEhSICkgPT4gcmVzb2x2ZSgpIClcbiAgICAgICAgICAgIC5mYWlsKCAoIGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnIgKSA9PiByZWplY3QoIGVyciApIClcbiAgICAgICAgfSApXG4gICAgfVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBSZXNvdXJjZVxuIiwidmFyIExpc3RJdGVtID0gcmVxdWlyZSgnLi91dGlsL0xpc3RJdGVtJyksXG4gICAgUmVzb3VyY2VSb3cgPSBmdW5jdGlvbigpIHsgcmV0dXJuIExpc3RJdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIFJlc291cmNlUm93LnByb3RvdHlwZSwgTGlzdEl0ZW0ucHJvdG90eXBlLCB7XG5cbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7IHJldHVybiB7XG4gICAgICAgIGlkOiB0aGlzLm1vZGVsLmlkLFxuICAgICAgICB2YWx1ZXM6IHRoaXMuZmllbGRzLm1hcCggZmllbGQgPT4gKCB7IG5hbWU6IGZpZWxkLm5hbWUsIHZhbHVlOiB0aGlzLm1vZGVsLmdldChmaWVsZC5uYW1lKSwgd2lkdGg6IGZpZWxkLndpZHRoIH0gKSApXG4gICAgfSB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9yZXNvdXJjZVJvdycpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBSZXNvdXJjZVJvd1xuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgTWVtYmVyU2Vhc29uOiByZXF1aXJlKCcuLi9tb2RlbHMvTWVtYmVyU2Vhc29uJyksXG5cbiAgICBjbGVhcigpIHsgdGhpcy5lbHMubGlzdC5pbm5lckhUTUwgPSAnJyB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIGxpc3Q6ICdjbGljaydcbiAgICB9LFxuXG4gICAgaW5zZXJ0U2hhcmVMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IGNvdW50UGVyU2hhcmUgPSB7IH1cblxuICAgICAgICB0aGlzLk1lbWJlclNlYXNvbi5kYXRhLmZvckVhY2goIHNlYXNvbiA9PiB7XG4gICAgICAgICAgICBjb3VudFBlclNoYXJlWyBzZWFzb24ubmFtZSBdID8gKytjb3VudFBlclNoYXJlWyBzZWFzb24ubmFtZSBdIDogY291bnRQZXJTaGFyZVsgc2Vhc29uLm5hbWUgXSA9IDFcbiAgICAgICAgICAgIGlmKCBjb3VudFBlclNoYXJlWyBzZWFzb24ubmFtZSBdID4gMSApIHNlYXNvbi5jb3VudCA9IGNvdW50UGVyU2hhcmVbIHNlYXNvbi5uYW1lIF1cblxuICAgICAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5TaGFyZUJveCggc2Vhc29uICksIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMubGlzdCB9IH0gKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgb25MaXN0Q2xpY2soIGUgKSB7XG4gICAgICAgIGlmKCAhIGUudGFyZ2V0LmNsb3Nlc3QoJ2Rpdi5zaGFyZS1sYWJlbCcpICkgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgaWYoIHRoaXMuY3VycmVudFNlbGVjdGlvbiApIHRoaXMuY3VycmVudFNlbGVjdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBlbCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ2Rpdi5zaGFyZS1sYWJlbCcpXG5cbiAgICAgICAgdGhpcy5jdXJyZW50U2VsZWN0aW9uID0gZWxcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCggJ3NlbGVjdGVkJyApXG4gICAgICAgIHRoaXMuZW1pdCggJ3NlbGVjdGVkJywgeyBjdXN0b21lcjogdGhpcy5jdXN0b21lciwgc2hhcmU6IHRoaXMuTWVtYmVyU2Vhc29uLmRhdGEuZmluZCggc2Vhc29uID0+IHNlYXNvbi5tZW1iZXJzaGFyZWlkID09IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpICkgfSApXG4gICAgfSxcblxuICAgIHNlbGVjdCggbWVtYmVyU2hhcmVJZCApIHtcbiAgICAgICAgdGhpcy5lbHMubGlzdC5xdWVyeVNlbGVjdG9yKGBkaXYuc2hhcmUtbGFiZWxbZGF0YS1pZD1cIiR7bWVtYmVyU2hhcmVJZH1cIl1gKS5jbGljaygpXG4gICAgfSxcblxuICAgIHRlbXBsYXRlczoge1xuICAgICAgICBTaGFyZUJveDogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvU2hhcmVCb3gnKVxuICAgIH0sXG5cbiAgICB1cGRhdGUoIGN1c3RvbWVyICkge1xuICAgICAgICB0aGlzLmN1c3RvbWVyID0gY3VzdG9tZXJcbiAgICAgIFxuICAgICAgICB0aGlzLmNsZWFyKClcbiAgICAgICAgIFxuICAgICAgICB0aGlzLk1lbWJlclNlYXNvbi5nZXQoIHsgcXVlcnk6IHsgbWVtYmVyaWQ6IGN1c3RvbWVyLm1lbWJlci5kYXRhLmlkLCBzaGFyZWlkOiB7IG9wZXJhdGlvbjogJ2pvaW4nLCB2YWx1ZTogeyB0YWJsZTogJ3NoYXJlJywgY29sdW1uOiAnaWQnIH0gfSB9IH0gKVxuICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5pbnNlcnRTaGFyZUxhYmVscygpIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuc2hvdygpIClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9XG5cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuICAgIGdldFRlbXBsYXRlT3B0aW9ucygpIHsgcmV0dXJuIHRoaXMubW9kZWwuYXR0cmlidXRlcyB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2Vcbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7fSwgcmVxdWlyZSgnLi9fX3Byb3RvX18nKSwge1xuXG4gICAgVmlld3M6IHtcbiAgICAgICAgYnV0dG9uRmxvdygpIHtcbiAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgIG1vZGVsOiBPYmplY3QuY3JlYXRlKCB0aGlzLk1vZGVsICkuY29uc3RydWN0b3IoIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogWyB7IG5hbWU6ICdzYXZlJywgdGV4dDogJ1NhdmUgQ2hhbmdlcycsIGNsYXNzOidzYXZlLWJ0bicsIG5leHRTdGF0ZTogJ2NvbmZpcm0nIH0gXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm06IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdjb25maXJtQnRuJywgY2xhc3M6J3NhdmUtYnRuJywgdGV4dDogJ0FyZSB5b3UgU3VyZT8nLCBlbWl0OiB0cnVlLCBuZXh0U3RhdGU6ICdzdGFydCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdjYW5jZWwnLCBjbGFzczoncmVzZXQtYnRuJywgbmV4dFN0YXRlOiAnc3RhcnQnLCB0ZXh0OiAnQ2FuY2VsJyB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkaXNwbGF5VG90YWwoKSB7XG4gICAgICAgIHRoaXMudG90YWwgPSAwXG5cbiAgICAgICAgdGhpcy50b3RhbCArPSB0aGlzLndlZWtzUmVtb3ZlZFByaWNlXG4gICAgICAgIHRoaXMudG90YWwgKz0gdGhpcy53ZWVrc0FkZGVkUHJpY2VcblxuICAgICAgICBpZiggdGhpcy53ZWVrbHlQcmljZUFkanVzdG1lbnQgKSB0aGlzLnRvdGFsICs9IHRoaXMub3B0aW9uc0FkanVzdG1lbnRcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZWxzLmFkanVzdG1lbnQudGV4dENvbnRlbnQgPSB0aGlzLkN1cnJlbmN5LmZvcm1hdCggdGhpcy50b3RhbCApXG4gICAgICAgIGlmKCB0aGlzLnRvdGFsIDwgMCApIHRoaXMuZWxzLmFkanVzdG1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtbmVnYXRpdmUnKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIGdldFdoaXRlc3BhY2UoIGNvdW50ICkge1xuICAgICAgICBsZXQgcnYgPSBcIlwiXG5cbiAgICAgICAgd2hpbGUoIGNvdW50ID4gMCApIHsgcnYgKz0gXCIgXCI7IGNvdW50LS0gfVxuXG4gICAgICAgIHJldHVybiBydlxuICAgIH0sXG5cbiAgICBnZXREZXNjcmlwdGlvbigpIHtcbiAgICAgICAgY29uc3QgbGluZVdpZHRoID0gMTAwLFxuICAgICAgICAgICAgbGluZXMgPSBbXG4gICAgICAgICAgICAgICAgWyBgV2Vla3MgUmVtb3ZlZDogJHt0aGlzLmVscy53ZWVrc1JlbW92ZWQudGV4dENvbnRlbnR9YCwgYEFkanVzdG1lbnQ6ICR7dGhpcy5DdXJyZW5jeS5mb3JtYXQodGhpcy53ZWVrc1JlbW92ZWRQcmljZSl9YCBdLFxuICAgICAgICAgICAgICAgIFsgYFdlZWtzIEFkZGVkOiAke3RoaXMuZWxzLndlZWtzQWRkZWQudGV4dENvbnRlbnR9YCwgYEFkanVzdG1lbnQ6ICR7dGhpcy5DdXJyZW5jeS5mb3JtYXQodGhpcy53ZWVrc0FkZGVkUHJpY2UpfWAgXVxuICAgICAgICAgICAgXVxuXG4gICAgICAgIHJldHVybiBbIGAke2xpbmVzWzBdWzBdfSR7dGhpcy5nZXRXaGl0ZXNwYWNlKCBsaW5lV2lkdGggLSBsaW5lc1swXVswXS5sZW5ndGggLSBsaW5lc1swXVsxXS5sZW5ndGggKX0ke2xpbmVzWzBdWzFdfWAsXG4gICAgICAgICAgICAgICAgIGAke2xpbmVzWzFdWzBdfSR7dGhpcy5nZXRXaGl0ZXNwYWNlKCBsaW5lV2lkdGggLSBsaW5lc1sxXVswXS5sZW5ndGggLSBsaW5lc1sxXVsxXS5sZW5ndGggKX0ke2xpbmVzWzFdWzFdfWAsXG4gICAgICAgICAgICAgICAgYE9wdGlvbnMgVXBkYXRlOiAke3RoaXMub3B0aW9uc0Rlc2NyaXB0aW9ufWAsXG4gICAgICAgICAgICAgICAgYFdlZWtseSBwcmljZSBhZGp1c3RtZW50OiAke3RoaXMuQ3VycmVuY3kuZm9ybWF0KHRoaXMud2Vla2x5UHJpY2VBZGp1c3RtZW50KX1gLFxuICAgICAgICAgICAgICAgIGBXZWVrcyBhZmZlY3RlZDogJHt0aGlzLndlZWtzQWZmZWN0ZWR9YFxuICAgICAgICAgICAgXS5qb2luKCdcXG4nKVxuICAgIH0sXG5cbiAgICBnZXRQYXRjaERhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy50b3RhbCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmdldERlc2NyaXB0aW9uKCksXG4gICAgICAgICAgICBzZW5kRW1haWw6IHRoaXMuZWxzLnNlbmRFbWFpbC5jaGVja2VkXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25PcHRpb25zUmVzZXQoKSB7XG4gICAgICAgIHRoaXMud2Vla2x5UHJpY2VBZGp1c3RtZW50ID0gZmFsc2VcbiAgICAgICAgdGhpcy5lbHMub3B0aW9ucy5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuXG4gICAgICAgIHRoaXMuZWxzLndlZWtseUFkanVzdG1lbnQudGV4dENvbnRlbnQgPSB0aGlzLkN1cnJlbmN5LmZvcm1hdCggMCApXG4gICAgICAgIHRoaXMuZWxzLnNoYXJlT3B0aW9uRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBgYFxuXG4gICAgICAgIHRoaXMuZGlzcGxheVRvdGFsKClcblxuICAgICAgICBpZiggdGhpcy5lbHMud2Vla3NSZW1vdmVkLnRleHRDb250ZW50ID09IDAgJiYgdGhpcy5lbHMud2Vla3NBZGRlZC50ZXh0Q29udGVudCA9PSAwICkgdGhpcy5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2ZkLWhpZGRlbicpXG4gICAgfSxcblxuICAgIG9uV2Vla3NSZXNldCgpIHtcbiAgICAgICAgdGhpcy5vbldlZWtVcGRhdGUoIHsgYWRkZWQ6IDAsIHJlbW92ZWQ6IDAgfSApXG4gICAgfSxcblxuICAgIG9uT3B0aW9uc1VwZGF0ZSggeyBkZXNjcmlwdGlvbiwgcHJpY2VBZGp1c3RtZW50IH0gKSB7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zRGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvblxuXG4gICAgICAgIHRoaXMuZWxzLm9wdGlvbnMuY2xhc3NMaXN0LnJlbW92ZSgnZmQtaGlkZGVuJylcblxuICAgICAgICB0aGlzLndlZWtseVByaWNlQWRqdXN0bWVudCA9IHByaWNlQWRqdXN0bWVudFxuICAgICAgICB0aGlzLmVscy53ZWVrbHlBZGp1c3RtZW50LnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIHByaWNlQWRqdXN0bWVudCApXG4gICAgICAgIHRoaXMuZWxzLnNoYXJlT3B0aW9uRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBkZXNjcmlwdGlvblxuICAgICAgICBcbiAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zQWRqdXN0bWVudCgpXG5cbiAgICAgICAgdGhpcy5kaXNwbGF5VG90YWwoKS5zaG93KClcbiAgICB9LFxuXG4gICAgb25XZWVrVXBkYXRlKCB7IGFkZGVkLCByZW1vdmVkIH0gKSB7XG4gICAgICAgIHRoaXMud2Vla3NBZmZlY3RlZCA9IHRoaXMub3JpZ2luYWxXZWVrc0FmZmVjdGVkIC0gcmVtb3ZlZFxuICAgICAgICB0aGlzLmVscy53ZWVrc0FmZmVjdGVkLnRleHRDb250ZW50ID0gdGhpcy53ZWVrc0FmZmVjdGVkXG4gICAgICAgIFxuICAgICAgICB0aGlzLmVscy53ZWVrc1JlbW92ZWQudGV4dENvbnRlbnQgPSByZW1vdmVkXG4gICAgICAgIHRoaXMuZWxzLndlZWtzQWRkZWQudGV4dENvbnRlbnQgPSBhZGRlZFxuXG4gICAgICAgIHRoaXMud2Vla3NBZGRlZFByaWNlID0gYWRkZWQgKiAoIHRoaXMub3JpZ2luYWxXZWVrbHlQcmljZSArICggdGhpcy53ZWVrbHlQcmljZUFkanVzdG1lbnQgfHwgMCApIClcbiAgICAgICAgdGhpcy5lbHMud2Vla3NBZGRlZFByaWNlLnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIHRoaXMud2Vla3NBZGRlZFByaWNlIClcblxuICAgICAgICB0aGlzLndlZWtzUmVtb3ZlZFByaWNlID0gLTEgKiByZW1vdmVkICogdGhpcy5vcmlnaW5hbFdlZWtseVByaWNlXG4gICAgICAgIHRoaXMuZWxzLndlZWtzUmVtb3ZlZFByaWNlLnRleHRDb250ZW50ID0gdGhpcy5DdXJyZW5jeS5mb3JtYXQoIHRoaXMud2Vla3NSZW1vdmVkUHJpY2UgKVxuXG4gICAgICAgIGlmKCBhZGRlZCA9PSAwICYmIHJlbW92ZWQgPT0gMCAmJiAhdGhpcy53ZWVrbHlQcmljZUFkanVzdG1lbnQgKSByZXR1cm4gdGhpcy5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2ZkLWhpZGRlbicpXG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbnNBZGp1c3RtZW50KClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGlzcGxheVRvdGFsKCkuc2hvdygpXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMub3B0aW9uc0Rlc2NyaXB0aW9uID0gYGBcbiAgICAgICAgdGhpcy5lbHMud2Vla3NBZGRlZC50ZXh0Q29udGVudCA9IDBcbiAgICAgICAgdGhpcy5lbHMud2Vla3NSZW1vdmVkLnRleHRDb250ZW50ID0gMFxuICAgICAgICB0aGlzLndlZWtzUmVtb3ZlZFByaWNlID0gMFxuICAgICAgICB0aGlzLndlZWtzQWRkZWRQcmljZSA9IDBcbiAgICAgICAgdGhpcy5lbHMud2Vla3NSZW1vdmVkUHJpY2UudGV4dENvbnRlbnQgPSB0aGlzLkN1cnJlbmN5LmZvcm1hdCggdGhpcy53ZWVrc1JlbW92ZWRQcmljZSApXG4gICAgICAgIHRoaXMuZWxzLndlZWtzQWRkZWRQcmljZS50ZXh0Q29udGVudCA9IHRoaXMuQ3VycmVuY3kuZm9ybWF0KCB0aGlzLndlZWtzQWRkZWRQcmljZSApXG5cbiAgICAgICAgdGhpcy52aWV3cy5idXR0b25GbG93Lm9uKCAnY29uZmlybUJ0bkNsaWNrZWQnLCAoKSA9PiB0aGlzLmVtaXQoICdwYXRjaE1lbWJlclNoYXJlJyApIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5lbHMuc2VuZEVtYWlsLmNoZWNrZWQgPSBmYWxzZVxuICAgICAgICB0aGlzLm9wdGlvbnNEZXNjcmlwdGlvbiA9IGBgXG4gICAgICAgIHRoaXMuZWxzLndlZWtzQWRkZWQudGV4dENvbnRlbnQgPSAwXG4gICAgICAgIHRoaXMuZWxzLndlZWtzUmVtb3ZlZC50ZXh0Q29udGVudCA9IDBcbiAgICAgICAgdGhpcy53ZWVrc1JlbW92ZWRQcmljZSA9IDBcbiAgICAgICAgdGhpcy5lbHMud2Vla3NSZW1vdmVkUHJpY2UudGV4dENvbnRlbnQgPSB0aGlzLkN1cnJlbmN5LmZvcm1hdCggdGhpcy53ZWVrc1JlbW92ZWRQcmljZSApXG4gICAgICAgIHRoaXMuZWxzLndlZWtseUFkanVzdG1lbnQudGV4dENvbnRlbnQgPSB0aGlzLkN1cnJlbmN5LmZvcm1hdCggMCApXG4gICAgICAgIHRoaXMud2Vla2x5UHJpY2VBZGp1c3RtZW50ID0gZmFsc2VcbiAgICAgICAgdGhpcy5lbHMuc2hhcmVPcHRpb25EZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IGBgXG4gICAgICAgIHRoaXMuaGlkZSgpXG4gICAgfSxcblxuICAgIHNldE9yaWdpbmFsV2Vla2x5UHJpY2UoIHByaWNlICkge1xuICAgICAgICB0aGlzLm9yaWdpbmFsV2Vla2x5UHJpY2UgPSBwcmljZVxuICAgIH0sXG5cbiAgICBzZXRXZWVrc0FmZmVjdGVkKCB7IHNlbGVjdGFibGUsIHNraXBwZWQgfSApIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbFdlZWtzQWZmZWN0ZWQgPSBzZWxlY3RhYmxlIC0gc2tpcHBlZFxuICAgICAgICB0aGlzLndlZWtzQWZmZWN0ZWQgPSB0aGlzLm9yaWdpbmFsV2Vla3NBZmZlY3RlZFxuICAgICAgICB0aGlzLmVscy53ZWVrc0FmZmVjdGVkLnRleHRDb250ZW50ID0gdGhpcy53ZWVrc0FmZmVjdGVkXG4gICAgfSxcblxuICAgIHVwZGF0ZU9wdGlvbnNBZGp1c3RtZW50KCkge1xuICAgICAgICB0aGlzLm9wdGlvbnNBZGp1c3RtZW50ID0gdGhpcy53ZWVrc0FmZmVjdGVkICogdGhpcy53ZWVrbHlQcmljZUFkanVzdG1lbnRcbiAgICAgICAgdGhpcy5lbHMub3B0aW9uc0FkanVzdG1lbnQudGV4dENvbnRlbnQgPSB0aGlzLkN1cnJlbmN5LmZvcm1hdCggdGhpcy5vcHRpb25zQWRqdXN0bWVudCApXG4gICAgICAgIHRoaXMuZWxzLm9wdGlvbnNBZGp1c3RtZW50LmNsYXNzTGlzdC5hZGQoIHRoaXMub3B0aW9uc0FkanVzdG1lbnQgPCAwID8gJ2lzLW5lZ2F0aXZlJyA6ICdpcy1wb3NpdGl2ZScgKVxuICAgIH1cblxufSApXG4iLCJ2YXIgTXlWaWV3ID0gcmVxdWlyZSgnLi9NeVZpZXcnKSxcbiAgICBTaWdudXAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIE15Vmlldy5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBTaWdudXAucHJvdG90eXBlLCBNeVZpZXcucHJvdG90eXBlLCB7XG5cbiAgICBkb25lKCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5sZWZ0QnRuLmhpZGUoKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5yaWdodEJ0bi5oaWRlKClcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdsZWZ0QnRuJzogeyBtZXRob2Q6ICdnb0JhY2snIH0sXG4gICAgICAgICdyaWdodEJ0bic6IHsgbWV0aG9kOiAndmFsaWRhdGVWaWV3JyB9LFxuICAgIH0sXG4gICAgXG4gICAgZ29CYWNrKCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5sZWZ0QnRuLm9mZigpXG5cbiAgICAgICAgdGhpcy5pbnN0YW5jZXNbIHRoaXMudmlld3NbIHRoaXMuY3VycmVudEluZGV4IF0ubmFtZSBdLmhpZGUoKVxuICAgICAgICB0aGlzLmluc3RhbmNlc1sgdGhpcy52aWV3c1sgdGhpcy5jdXJyZW50SW5kZXggXS5uYW1lIF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnc2xpZGUtaW4tbGVmdCcpLnJlbW92ZUNsYXNzKCdzbGlkZS1pbi1yaWdodCcpXG5cbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggLT0gMVxuXG4gICAgICAgIHRoaXMuc3RhdGUuc2lnbnVwLmluZGV4ID0gdGhpcy5jdXJyZW50SW5kZXhcbiAgICAgICAgdGhpcy5zYXZlU3RhdGUoKVxuXG4gICAgICAgIHRoaXMuc2hvd1Byb3BlclZpZXcoIHRydWUgKVxuXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCAoKSA9PiB0aGlzLmRlbGVnYXRlRXZlbnRzKCAnbGVmdEJ0bicsIHRoaXMudGVtcGxhdGVEYXRhLmxlZnRCdG4gKSwgMTAwMCApXG4gICAgfSxcblxuICAgIGluc3RhbmNlczogeyB9LFxuXG4gICAgbm9TaGFyZXMoKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmxlZnRCdG4uaGlkZSgpXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnJpZ2h0QnRuLmhpZGUoKVxuXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzLnNoYXJlcy50ZW1wbGF0ZURhdGEuaGVhZGVyLnRleHQoJ1RoZXJlIGFyZSBubyBzaGFyZXMgYXZhaWxhYmxlIGF0IHRoaXMgdGltZScpXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG5cbiAgICAgICAgdGhpcy5zaWdudXBEYXRhID0geyB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMudXNlci5nZXQoJ3N0YXRlJylcblxuICAgICAgICBpZiggdGhpcy5zdGF0ZS5zaWdudXAgJiYgT2JqZWN0LmtleXMoIHRoaXMuc3RhdGUuc2lnbnVwICkubGVuZ3RoICkgcmV0dXJuIHRoaXMudXBkYXRlU3RhdGUoIHRoaXMuc3RhdGUuc2lnbnVwIClcblxuICAgICAgICBpZiggISB0aGlzLmN1cnJlbnRJbmRleCApIHRoaXMuY3VycmVudEluZGV4ID0gMFxuICAgICAgICB0aGlzLnN0YXRlLnNpZ251cCA9IHsgaW5kZXg6IHRoaXMuY3VycmVudEluZGV4LCBzaGFyZXM6IFsgXSB9XG4gICAgICAgIHRoaXMuc2hvd1Byb3BlclZpZXcoKVxuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHNhdmVTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy4kLmFqYXgoIHtcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KCB7IHN0YXRlOiB0aGlzLnN0YXRlIH0gKSxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICAgICAgdXJsOiBcIi91c2VyXCIgfSApXG4gICAgICAgIC5mYWlsKCBlID0+IG5ldyB0aGlzLkVycm9yKGUpIClcbiAgICB9LFxuXG4gICAgc2VyaWFsaXplU2hhcmUoIHNoYXJlICkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHNoYXJlLmlkLFxuICAgICAgICAgICAgc2VsZWN0ZWREZWxpdmVyeTogc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JyksXG4gICAgICAgICAgICBzZWxlY3RlZE9wdGlvbnM6IHNoYXJlLmdldCgnc2VsZWN0ZWRPcHRpb25zJyksXG4gICAgICAgICAgICBza2lwRGF5czogc2hhcmUuZ2V0KCdza2lwRGF5cycpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvd05leHQoKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VzWyB0aGlzLnZpZXdzWyB0aGlzLmN1cnJlbnRJbmRleCBdLm5hbWUgXS5oaWRlKClcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNbIHRoaXMudmlld3NbIHRoaXMuY3VycmVudEluZGV4IF0ubmFtZSBdLnRlbXBsYXRlRGF0YS5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NsaWRlLWluLWxlZnQnKS5yZW1vdmVDbGFzcygnc2xpZGUtaW4tcmlnaHQnKVxuXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ICs9IDFcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3RhdGUuc2lnbnVwLmluZGV4ID0gdGhpcy5jdXJyZW50SW5kZXhcbiAgICAgICAgdGhpcy5zdGF0ZS5zaWdudXAuc2hhcmVzID0gdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5tYXAoIHNoYXJlID0+IHRoaXMuc2VyaWFsaXplU2hhcmUoIHNoYXJlICkgKVxuICAgICAgICB0aGlzLnNhdmVTdGF0ZSgpXG5cbiAgICAgICAgdGhpcy5zaG93UHJvcGVyVmlldygpXG4gICAgfSxcblxuICAgIHNob3dQcm9wZXJOYXYoKSB7XG4gICAgICAgIHZhciBsZWZ0ID0gdGhpcy50ZW1wbGF0ZURhdGEubGVmdEJ0biwgcmlnaHQgPSB0aGlzLnRlbXBsYXRlRGF0YS5yaWdodEJ0blxuXG4gICAgICAgIGlmKCB0aGlzLmN1cnJlbnRJbmRleCA+IDAgKSB0aGlzLnRlbXBsYXRlRGF0YS5pbnRyby50ZXh0KCdDb250aW51ZSB5b3VyIENTQSBzaWduLXVwJylcbiAgICAgICAgaWYoIHRoaXMuY3VycmVudEluZGV4ID09PSA1ICkgdGhpcy50ZW1wbGF0ZURhdGEuaW50cm8udGV4dCgnUmV2aWV3IHlvdXIgb3JkZXIgYW5kIGNoZWNrIG91dCcpXG5cbiAgICAgICAgaWYoIHRoaXMuY3VycmVudEluZGV4ID09PSAwICkge1xuICAgICAgICAgICAgbGVmdC5oaWRlKClcbiAgICAgICAgICAgIGlmKCByaWdodC5pcygnOmhpZGRlbicpICkgcmlnaHQuc2hvdygpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiggdGhpcy5jdXJyZW50SW5kZXggPT09IHRoaXMudmlld3MubGVuZ3RoIC0gMSApIHtcbiAgICAgICAgICAgIHJpZ2h0LmhpZGUoKVxuICAgICAgICAgICAgaWYoIGxlZnQuaXMoJzpoaWRkZW4nKSApIGxlZnQuc2hvdygpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiggbGVmdC5pcygnOmhpZGRlbicpICkgbGVmdC5zaG93KClcbiAgICAgICAgICAgIGlmKCByaWdodC5pcygnOmhpZGRlbicpICkgcmlnaHQuc2hvdygpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvd1Byb3BlclZpZXcoIGJhY2sgKSB7XG4gICAgICAgIHZhciBjdXJyZW50Vmlld05hbWUgPSB0aGlzLnZpZXdzWyB0aGlzLmN1cnJlbnRJbmRleCBdLm5hbWUsXG4gICAgICAgICAgICBrbGFzcyA9IHRoaXMudXRpbC5mb3JtYXQoJ3NsaWRlLWluLSVzJywgKCBiYWNrICkgPyAnbGVmdCcgOiAncmlnaHQnIClcblxuICAgICAgICB0aGlzLnNob3dQcm9wZXJOYXYoKVxuICAgICAgICBcbiAgICAgICAgaWYoIHRoaXMuaW5zdGFuY2VzWyBjdXJyZW50Vmlld05hbWUgXSApIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzWyBjdXJyZW50Vmlld05hbWUgXS5zaG93KCkudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5hZGRDbGFzcyhrbGFzcylcbiAgICAgICAgICAgIGlmKCB0aGlzLmluc3RhbmNlc1sgY3VycmVudFZpZXdOYW1lIF0uZ29CYWNrICkgdGhpcy5nb0JhY2soKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzWyBjdXJyZW50Vmlld05hbWUgXSA9XG4gICAgICAgICAgICBuZXcgdGhpcy52aWV3c1sgdGhpcy5jdXJyZW50SW5kZXggXS52aWV3KCB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLnRlbXBsYXRlRGF0YS53YWxrdGhyb3VnaCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJDbGFzczoga2xhc3MsXG4gICAgICAgICAgICAgICAgZmFjdG9yeTogdGhpcy5mYWN0b3J5LFxuICAgICAgICAgICAgICAgIHNpZ251cERhdGE6IHRoaXMuc2lnbnVwRGF0YSxcbiAgICAgICAgICAgIH0gKVxuICAgICAgICBcbiAgICAgICAgaWYoIHRoaXMuaW5zdGFuY2VzWyBjdXJyZW50Vmlld05hbWUgXS50ZW1wbGF0ZURhdGEgKSB0aGlzLmluc3RhbmNlc1sgY3VycmVudFZpZXdOYW1lIF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lci5hZGRDbGFzcyhrbGFzcylcblxuICAgICAgICBpZiggdGhpcy52aWV3c1sgdGhpcy5jdXJyZW50SW5kZXggXS5vbiApIHtcbiAgICAgICAgICAgIHRoaXMudmlld3NbIHRoaXMuY3VycmVudEluZGV4IF0ub24uZm9yRWFjaCggZXZlbnREYXRhID0+XG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNbIGN1cnJlbnRWaWV3TmFtZSBdLm9uKCBldmVudERhdGEuZXZlbnQsICgpID0+IHRoaXNbIGV2ZW50RGF0YS5tZXRob2QgXSgpICkgKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHRoaXMuaW5zdGFuY2VzWyBjdXJyZW50Vmlld05hbWUgXS5nb0JhY2sgKSB0aGlzLmdvQmFjaygpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL3NpZ251cCcpLFxuXG4gICAgdXBkYXRlU3RhdGUoIGRhdGEgKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gZGF0YS5pbmRleFxuXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzLnNoYXJlcyA9IG5ldyB0aGlzLnZpZXdzWzBdLnZpZXcoIHtcbiAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEud2Fsa3Rocm91Z2gsXG4gICAgICAgICAgICBmYWN0b3J5OiB0aGlzLmZhY3RvcnksXG4gICAgICAgICAgICBzZXNzaW9uU2hhcmVzOiBkYXRhLnNoYXJlcyxcbiAgICAgICAgICAgIHNpZ251cERhdGE6IHRoaXMuc2lnbnVwRGF0YVxuICAgICAgICB9ICkub24oICdpbml0aWFsaXplZCcsICgpID0+IHRoaXMuc2hvd1Byb3BlclZpZXcoKSApXG4gICAgICAgIFxuICAgICAgICB0aGlzLmluc3RhbmNlcy5zaGFyZXMuaGlkZSgpXG4gICAgfSxcblxuICAgIHZhbGlkYXRlVmlldygpIHtcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLmluc3RhbmNlc1sgdGhpcy52aWV3c1sgdGhpcy5jdXJyZW50SW5kZXggXS5uYW1lIF1cbiAgICAgICAgXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnJpZ2h0QnRuLm9mZigpXG5cbiAgICAgICAgdGhpcy5RLndoZW4oIHZpZXcudmFsaWRhdGUoKSApLnRoZW4oIHJlc3VsdCA9PiB7IGlmKCByZXN1bHQgKSB0aGlzLnNob3dOZXh0KCkgfSApXG4gICAgICAgIC5mYWlsKCBlID0+IG5ldyB0aGlzLkVycm9yKGUpIClcbiAgICAgICAgLmRvbmUoICgpID0+IHdpbmRvdy5zZXRUaW1lb3V0KCAoKSA9PiB0aGlzLmRlbGVnYXRlRXZlbnRzKCAncmlnaHRCdG4nLCB0aGlzLnRlbXBsYXRlRGF0YS5yaWdodEJ0biApLCAxMDAwICkgKVxuICAgIH0sXG5cbiAgICB2aWV3czogW1xuICAgICAgICB7IG5hbWU6ICdzaGFyZXMnLCB2aWV3OiByZXF1aXJlKCcuL3NpZ251cC9TaGFyZXMnKSwgb246IFsgeyBldmVudDogJ25vU2hhcmVzJywgbWV0aG9kOiAnbm9TaGFyZXMnIH0gXSB9LFxuICAgICAgICB7IG5hbWU6ICdtZW1iZXJJbmZvJywgdmlldzogcmVxdWlyZSgnLi9zaWdudXAvTWVtYmVySW5mbycpIH0sXG4gICAgICAgIHsgbmFtZTogJ3NoYXJlT3B0aW9ucycsIHZpZXc6IHJlcXVpcmUoJy4vc2lnbnVwL1NoYXJlT3B0aW9ucycpIH0sXG4gICAgICAgIHsgbmFtZTogJ2RlbGl2ZXJ5JywgdmlldzogcmVxdWlyZSgnLi9zaWdudXAvRGVsaXZlcnknKSB9LFxuICAgICAgICB7IG5hbWU6ICdkYXRlU2VsZWN0aW9uJywgdmlldzogcmVxdWlyZSgnLi9zaWdudXAvRGF0ZVNlbGVjdGlvbicpIH0sXG4gICAgICAgIHsgbmFtZTogJ3N1bW1hcnknLCB2aWV3OiByZXF1aXJlKCcuL3NpZ251cC9TdW1tYXJ5JyksIG9uOiBbIHsgZXZlbnQ6ICdkb25lJywgbWV0aG9kOiAnZG9uZScgfSBdIH1cbiAgICBdXG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ251cFxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgJ2NhbmNlbEJ0bic6ICdjbGljaycsXG4gICAgICAgICdzdWJtaXRCdG4nOiAnY2xpY2snXG4gICAgfSxcblxuICAgIGhhbmRsZVN1Ym1pc3Npb25FcnJvciggZSApIHtcbiAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ2Vycm9yJywgdGhpcy50b2FzdEVycm9yIHx8ICdFcnJvcicgKVxuICAgICAgICB0aGlzLkVycm9yKCBlIClcbiAgICAgICAgdGhpcy5vblN1Ym1pdEVuZCgpXG4gICAgfSxcblxuICAgIG9uQ2FuY2VsQnRuQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlKCkuY2F0Y2goIHRoaXMuRXJyb3IgKVxuICAgIH0sXG5cbiAgICBvblN1Ym1pdEJ0bkNsaWNrKCkge1xuICAgICAgICBpZiggdGhpcy5zdWJtaXR0aW5nICkgcmV0dXJuXG4gICAgICAgIHRoaXMub25TdWJtaXRTdGFydCgpXG4gICAgICAgIHRoaXMuc3VibWl0KClcbiAgICAgICAgLnRoZW4oICgpID0+IFByb21pc2UucmVzb2x2ZSggdGhpcy5vblN1Ym1pdEVuZCgpICkgKVxuICAgICAgICAuY2F0Y2goIGUgPT4gdGhpcy5oYW5kbGVTdWJtaXNzaW9uRXJyb3IoZSkgKVxuICAgIH0sXG5cbiAgICBvblN1Ym1pdEVuZCgpIHtcbiAgICAgICAgdGhpcy5zdWJtaXR0aW5nID0gZmFsc2VcbiAgICAgICAgdGhpcy5lbHMuc3VibWl0QnRuLmNsYXNzTGlzdC5yZW1vdmUoJ3N1Ym1pdHRpbmcnKVxuICAgIH0sXG4gICAgXG4gICAgb25TdWJtaXRTdGFydCgpIHtcbiAgICAgICAgdGhpcy5zdWJtaXR0aW5nID0gdHJ1ZVxuICAgICAgICB0aGlzLmVscy5zdWJtaXRCdG4uY2xhc3NMaXN0LmFkZCgnc3VibWl0dGluZycpXG4gICAgfVxuXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUoIE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBJY29uczoge1xuICAgICAgICBlcnJvcjogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbGliL2Vycm9yJykoKSxcbiAgICAgICAgc3VjY2VzczogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbGliL2NoZWNrbWFyaycpKClcbiAgICB9LFxuXG4gICAgaW5zZXJ0aW9uOiB7IGVsOiBkb2N1bWVudC5ib2R5IH0sXG5cbiAgICBuYW1lOiAnVG9hc3QnLFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICBzaG93TWVzc2FnZSggdHlwZSwgbWVzc2FnZSApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCAoIHJlc29sdmUsIHJlamVjdCApICA9PiB7XG4gICAgICAgICAgICBpZiggL3Nob3cvLnRlc3QoIHRoaXMuc3RhdHVzICkgKSByZXR1cm4gcmVzb2x2ZSgpXG5cbiAgICAgICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IHJlc29sdmVcblxuICAgICAgICAgICAgaWYoIHR5cGUgIT09ICdlcnJvcicgKSB0aGlzLmVscy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnc3VjY2VzcycpXG5cbiAgICAgICAgICAgIHRoaXMuZWxzLm1lc3NhZ2UudGV4dENvbnRlbnQgPSBtZXNzYWdlXG4gICAgICAgICAgICB0aGlzLmVscy50aXRsZS50ZXh0Q29udGVudCA9IHR5cGUgPT09ICdlcnJvcicgPyAnRXJyb3InIDogJ1N1Y2Nlc3MnXG4gICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHsgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5pY29uIH0sIHRlbXBsYXRlOiB0eXBlID09PSAnZXJyb3InID8gdGhpcy5JY29ucy5lcnJvciA6IHRoaXMuSWNvbnMuc3VjY2VzcyB9IClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSAnc2hvd2luZydcblxuICAgICAgICAgICAgdGhpcy5zaG93KCB0cnVlIClcbiAgICAgICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLmhpZGUoIHRydWUgKSApXG4gICAgICAgICAgICAudGhlbiggKCkgPT4gdGhpcy50ZWFyZG93bigpIClcbiAgICAgICAgICAgIC5jYXRjaCggcmVqZWN0IClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHRlYXJkb3duKCkge1xuICAgICAgICBpZiggdGhpcy5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygnc3VjY2VzcycpICkgdGhpcy5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3N1Y2Nlc3MnKVxuICAgICAgICB0aGlzLmVscy5tZXNzYWdlLnRleHRDb250ZW50ID0gJydcbiAgICAgICAgdGhpcy5lbHMubWVzc2FnZS50aXRsZSA9ICcnXG4gICAgICAgIGlmKCB0aGlzLmVscy5pY29uLmZpcnN0Q2hpbGQgKSB0aGlzLmVscy5pY29uLnJlbW92ZUNoaWxkKCB0aGlzLmVscy5pY29uLmZpcnN0Q2hpbGQgKVxuXG4gICAgICAgIHRoaXMuc3RhdHVzID0gJ2hpZGRlbidcbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uKClcbiAgICB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL1RvYXN0JylcblxufSApLCB7IH0gKS5jb25zdHJ1Y3RvcigpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCByZXF1aXJlKCcuL19fcHJvdG9fXycpLCB7XG5cbiAgICBQaWthZGF5OiByZXF1aXJlKCdwaWthZGF5JyksXG4gICAgXG4gICAgVGVtcGxhdGVzOiB7XG4gICAgICAgIFRyYW5zYWN0aW9uOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9Dc2FUcmFuc2FjdGlvbicpLFxuICAgICAgICBFZGl0VHJhbnNhY3Rpb246IHJlcXVpcmUoJy4vdGVtcGxhdGVzL0VkaXRDc2FUcmFuc2FjdGlvbicpXG4gICAgfSxcblxuICAgIFZpZXdzOiB7XG4gICAgICAgIGVkaXRCdXR0b25zKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCApLmNvbnN0cnVjdG9yKCB7XG4gICAgICAgICAgICAgICAgICAgIGhpZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdlZGl0Jywgc3ZnOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9saWIvZWRpdCcpKCksIGVtaXQ6IHRydWUsIG5leHRTdGF0ZTogJ29uRWRpdCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdnYXJiYWdlJywgc3ZnOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9saWIvZ2FyYmFnZScpKCksIG5leHRTdGF0ZTogJ29uRGVsZXRlJywgZW1pdDogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25EZWxldGU6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdjb25maXJtRGVsZXRlJywgY2xhc3M6ICdsaW5rJywgJ3RleHQnOiAnRGVsZXRlPycsIG5leHRTdGF0ZTogJ3N0YXJ0JywgZW1pdDogJ3RydWUnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnY2FuY2VsRGVsZXRlJywgc3ZnOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9saWIvZXgnKSggeyBuYW1lOiAnY2FuY2VsRGVsZXRlJyB9ICksIG5leHRTdGF0ZTogJ3N0YXJ0JywgZW1pdDogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25FZGl0OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnY29uZmlybUVkaXQnLCBjbGFzczogJ2xpbmsnLCAndGV4dCc6ICdFZGl0JywgZW1pdDogJ3RydWUnLCBuZXh0U3RhdGU6ICdzdGFydCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdjYW5jZWxFZGl0Jywgc3ZnOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9saWIvZXgnKSggeyBuYW1lOiAnY2FuY2VsRWRpdCcgfSApLCBuZXh0U3RhdGU6ICdzdGFydCcsIGVtaXQ6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVtYWlsQnV0dG9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IE9iamVjdC5jcmVhdGUoIHRoaXMuTW9kZWwgKS5jb25zdHJ1Y3Rvcigge1xuICAgICAgICAgICAgICAgICAgICBoaWRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBbIHsgbmFtZTogJ3NlbmRFbWFpbCcsIGNsYXNzOiAnc2F2ZS1idG4nLCB0ZXh0OiAnU2VuZCBFbWFpbCBSZW1pbmRlcicsIG5leHRTdGF0ZTogJ2NvbmZpcm0nIH0gXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm06IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdjb25maXJtRW1haWwnLCBjbGFzczogJ3NhdmUtYnRuJywgdGV4dDogJ0FyZSB5b3UgU3VyZT8nLCBlbWl0OiB0cnVlLCBuZXh0U3RhdGU6ICdzdGFydCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdjYW5jZWwnLCBuZXh0U3RhdGU6ICdzdGFydCcsIGNsYXNzOiAncmVzZXQtYnRuJywgdGV4dDogJ0NhbmNlbCcgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFkZFRyYW5zYWN0aW9uOiBmdW5jdGlvbigpIHsgcmV0dXJuIHsgbW9kZWw6IHRoaXMubW9kZWwgfSB9LFxuICAgIH0sXG5cbiAgICBhZGRUcmFuc2FjdGlvbigpIHtcbiAgICAgICAgdGhpcy5tb2RlbC5wb3N0KCBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgeyBtZW1iZXJTaGFyZUlkOiB0aGlzLnNoYXJlLm1lbWJlcnNoYXJlaWQgfSxcbiAgICAgICAgICAgIHRoaXMubW9kZWwuYXR0cmlidXRlcy5yZWR1Y2UoICggbWVtbywgYXR0ciApID0+IE9iamVjdC5hc3NpZ24oIG1lbW8sIHsgWyBhdHRyIF06IHRoaXMuZWxzW2F0dHJdLnZhbHVlIH0gKSwgeyB9IClcbiAgICAgICAgKSApXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmluc2VydFRyYW5zYWN0aW9uKCByZXNwb25zZS5pZCApXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUJhbGFuY2UoKVxuICAgICAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ3N1Y2Nlc3MnLCAnVHJhbnNhY3Rpb24gYWRkZWQhJyApXG4gICAgICAgIH0gKVxuICAgICAgICAuY2F0Y2goIGUgPT4geyB0aGlzLkVycm9yKGUpOyB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnZXJyb3InLCAnRXJyb3IgYWRkaW5nIHRyYW5zYWN0aW9uJyApIH0gKVxuICAgIH0sXG5cbiAgICBjbGVhcigpIHsgdGhpcy5lbHMudHJhbnNhY3Rpb25zLmlubmVySFRNTCA9ICcnIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgbGlzdDogJ2NsaWNrJyxcbiAgICAgICAgdHJhbnNhY3Rpb246IFsgJ21vdXNlZW50ZXInLCAnbW91c2VsZWF2ZScgXVxuICAgIH0sXG5cbiAgICBhcHBlbmRUcmFuc2FjdGlvbiggdHJhbnNhY3Rpb24gKSB7XG4gICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMuVGVtcGxhdGVzLlRyYW5zYWN0aW9uKFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgIHsgY3VycmVuY3k6IHRoaXMuQ3VycmVuY3kuZm9ybWF0LCBtb21lbnQ6IHRoaXMuTW9tZW50IH0gKSxcbiAgICAgICAgICAgIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHMudHJhbnNhY3Rpb25zIH1cbiAgICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBpbnNlcnRUcmFuc2FjdGlvbiggdHJhbnNhY3Rpb25JZCApIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm1vZGVsLmRhdGEuZmluZEluZGV4KCBkYXR1bSA9PiBkYXR1bS5pZCA9PSB0cmFuc2FjdGlvbklkICksXG4gICAgICAgICAgICBjaGlsZHJlbiA9IEFycmF5LmZyb20oIHRoaXMuZWxzLnRyYW5zYWN0aW9ucy5jaGlsZHJlbiApLFxuICAgICAgICAgICAgaW5zZXJ0aW9uID0gaW5kZXggPT09IDBcbiAgICAgICAgICAgICAgICA/IHsgZWw6IGNoaWxkcmVuWzBdLCBtZXRob2Q6ICdpbnNlcnRCZWZvcmUnIH1cbiAgICAgICAgICAgICAgICA6IHsgZWw6IGNoaWxkcmVuWyBpbmRleCAtIDEgXSwgbWV0aG9kOiAnYWZ0ZXInIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMuVGVtcGxhdGVzLlRyYW5zYWN0aW9uKCB0aGlzLm1vZGVsLmRhdGFbIGluZGV4IF0sIHsgY3VycmVuY3k6IHRoaXMuQ3VycmVuY3kuZm9ybWF0LCBtb21lbnQ6IHRoaXMuTW9tZW50IH0gKSxcbiAgICAgICAgICAgIGluc2VydGlvblxuICAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGVkaXRUcmFuc2FjdGlvbiggZSApIHtcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldC5jbG9zZXN0KCdsaScpLFxuICAgICAgICAgICAgaWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSBcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoIFtcbiAgICAgICAgICAgIHRoaXMubW9kZWwucGF0Y2goXG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLnJlZHVjZSggKCBtZW1vLCBhdHRyICkgPT5cbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbiggbWVtbywgeyBbIGF0dHIgXTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPT09ICdjcmVhdGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5Nb21lbnQoIHRoaXMuZWxzLmVkaXRUcmFuc2FjdGlvbi5xdWVyeVNlbGVjdG9yKGBbZGF0YS1hdHRyPVwiY3JlYXRlZFwiXWApLnZhbHVlLCAnTU1NIEQsIFlZWVknICkuZm9ybWF0KCdZWVlZLU1NLUREJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZWxzLmVkaXRUcmFuc2FjdGlvbi5xdWVyeVNlbGVjdG9yKGBbZGF0YS1hdHRyPVwiJHthdHRyfVwiXWApLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH0gKSxcbiAgICAgICAgICAgICAgICAgICAgeyB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGUuZmROZXh0U3RhdGVcbiAgICAgICAgXSApXG4gICAgICAgIC50aGVuKCBkYXR1bSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVkaXRSb3coKVxuICAgICAgICAgICAgdGhpcy5tb3ZlT3V0RWRpdEJ1dHRvbnMoKVxuICAgICAgICAgICAgZWwucmVtb3ZlKClcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0VHJhbnNhY3Rpb24oaWQpXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUJhbGFuY2UoKVxuICAgICAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ3N1Y2Nlc3MnLCAnVHJhbnNhY3Rpb24gZWRpdGVkIScgKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCBlID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRWRpdFJvdygpXG4gICAgICAgICAgICB0aGlzLkVycm9yKGUpO1xuICAgICAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ2Vycm9yJywgJ0Vycm9yIGVkaXRpbmcgdHJhbnNhY3Rpb24nIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGRlbGV0ZVRyYW5zYWN0aW9uKCBlICkge1xuICAgICAgICBjb25zdCBpZCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ2xpJykuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykgXG5cbiAgICAgICAgUHJvbWlzZS5hbGwoIFtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuZGVsZXRlKCBpZCApLFxuICAgICAgICAgICAgZS5mZE5leHRTdGF0ZVxuICAgICAgICBdIClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubW92ZU91dEVkaXRCdXR0b25zKClcbiAgICAgICAgICAgIHRoaXMuZWxzLnRyYW5zYWN0aW9ucy5xdWVyeVNlbGVjdG9yKGBsaVtkYXRhLWlkPVwiJHtpZH1cIl1gKS5yZW1vdmUoKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVCYWxhbmNlKClcbiAgICAgICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdzdWNjZXNzJywgJ1RyYW5zYWN0aW9uIGRlbGV0ZWQhJyApXG4gICAgICAgIH0gKVxuICAgICAgICAuY2F0Y2goIGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5FcnJvcihlKTtcbiAgICAgICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdlcnJvcicsICdFcnJvciBhZGRpbmcgdHJhbnNhY3Rpb24nIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIG1vZGVsOiByZXF1aXJlKCcuLi9tb2RlbHMvQ3NhVHJhbnNhY3Rpb24nKSxcblxuICAgIG9uQWRkQnRuQ2xpY2soKSB7XG4gICAgICAgIGlmKCB0aGlzLnN0YXRlID09PSAnY29uZmlybURlbGV0ZScgKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLmRlbGV0ZSggdGhpcy5tYXJrZWRGb3JEZWxldGlvbiAgKVxuICAgICAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVscy50cmFuc2FjdGlvbnMucXVlcnlTZWxlY3RvcihgbGlbZGF0YS1pZD1cIiR7dGhpcy5tYXJrZWRGb3JEZWxldGlvbn1cIl1gKS5yZW1vdmUoKVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQmFsYW5jZSgpXG4gICAgICAgICAgICAgICAgdGhpcy5Ub2FzdC5zaG93TWVzc2FnZSggJ3N1Y2Nlc3MnLCAnVHJhbnNhY3Rpb24gZGVsZXRlZCEnIClcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0U3RhdGUoKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gZWxzZSBpZiggdGhpcy5zdGF0ZSA9PT0gJ2NvbmZpcm1pbmcnICkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5wb3N0KCBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgIHsgbWVtYmVyU2hhcmVJZDogdGhpcy5zaGFyZS5tZW1iZXJzaGFyZWlkIH0sXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLnJlZHVjZSggKCBtZW1vLCBhdHRyICkgPT4gT2JqZWN0LmFzc2lnbiggbWVtbywgeyBbIGF0dHIgXTogdGhpcy5lbHNbYXR0cl0udmFsdWUgfSApLCB7IH0gKVxuICAgICAgICAgICAgKSApXG4gICAgICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0VHJhbnNhY3Rpb24oIHJlc3BvbnNlLmlkIClcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJhbGFuY2UoKVxuICAgICAgICAgICAgICAgIHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdzdWNjZXNzJywgJ1RyYW5zYWN0aW9uIGFkZGVkIScgKVxuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRTdGF0ZSgpXG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgIC5jYXRjaCggZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5FcnJvcihlKTtcbiAgICAgICAgICAgICAgICB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnZXJyb3InLCAnRXJyb3IgYWRkaW5nIHRyYW5zYWN0aW9uJyApXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldFN0YXRlKClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSBpZiggdGhpcy5zdGF0ZSA9PT0gJ2FkZGluZycgKSB7XG5cbiAgICAgICAgICAgIHRoaXMuZWxzLmFkZEJ0bi50ZXh0Q29udGVudCA9ICdBcmUgeW91IHN1cmU/J1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICdjb25maXJtaW5nJ1xuXG4gICAgICAgIH0gZWxzZSBpZiggIXRoaXMuc3RhdGUgKSB7XG4gICAgICAgICAgICB0aGlzLmVscy5jYW5jZWxCdG4uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgICAgICAgICAgIHRoaXMuZWxzLmFkZFRyYW5zYWN0aW9uUm93LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXG5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAnYWRkaW5nJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICBcbiAgICBvbkV4Q2xpY2soIGUgKSB7XG4gICAgICAgIGlmKCB0aGlzLm1hcmtlZEZvckRlbGV0aW9uICkgcmV0dXJuXG4gICAgICAgIFxuICAgICAgICBjb25zdCBpdGVtID0gIGUudGFyZ2V0LmNsb3Nlc3QoJ2xpJylcblxuICAgICAgICB0aGlzLm1hcmtlZEZvckRlbGV0aW9uID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKVxuICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ21hcmtlZCcpXG4gICAgICAgXG4gICAgICAgIHRoaXMuZWxzLmFkZEJ0bi50ZXh0Q29udGVudCA9ICdDb25maXJtIERlbGV0ZScgXG4gICAgICAgIHRoaXMuZWxzLmNhbmNlbEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuICAgICAgICB0aGlzLnN0YXRlID0gJ2NvbmZpcm1EZWxldGUnXG4gICAgfSxcblxuICAgIG9uTGlzdENsaWNrKCBlICkge1xuICAgICAgICBpZiggdGhpcy5jdXJyZW50U2VsZWN0aW9uICkgdGhpcy5jdXJyZW50U2VsZWN0aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJylcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGVsID0gZS50YXJnZXRcbiAgICAgICAgdGhpcy5jdXJyZW50U2VsZWN0aW9uID0gZWxcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCggJ3NlbGVjdGVkJyApXG4gICAgICAgIHRoaXMuZW1pdCggJ3NlbGVjdGVkJywgeyBjdXN0b21lcjogdGhpcy5jdXN0b21lciwgc2hhcmU6IHRoaXMuTWVtYmVyU2Vhc29uLmRhdGEuZmluZCggc2Vhc29uID0+IHNlYXNvbi5pZCA9PSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSApIH0gKVxuICAgIH0sXG5cbiAgICBvblRyYW5zYWN0aW9uTW91c2VlbnRlciggZSApIHtcbiAgICAgICAgaWYoIGUudGFyZ2V0LnRhZ05hbWUgIT09IFwiTElcIiApIHJldHVyblxuICAgICAgICBpZiggdGhpcy52aWV3cy5lZGl0QnV0dG9ucy5zdGF0ZSAhPT0gJ3N0YXJ0JyApIHJldHVyblxuICAgICAgICBlLnRhcmdldC5jaGlsZHJlblswXS5hcHBlbmRDaGlsZCggdGhpcy52aWV3cy5lZGl0QnV0dG9ucy5lbHMuY29udGFpbmVyIClcbiAgICAgICAgdGhpcy52aWV3cy5lZGl0QnV0dG9ucy5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGRlbicsICdmZC1oaWRlJylcbiAgICB9LFxuICAgIFxuICAgIG9uVHJhbnNhY3Rpb25Nb3VzZWxlYXZlKCBlICkge1xuICAgICAgICBpZiggZS50YXJnZXQudGFnTmFtZSAhPT0gXCJMSVwiICkgcmV0dXJuXG4gICAgICAgIGlmKCB0aGlzLnZpZXdzLmVkaXRCdXR0b25zLnN0YXRlICE9PSAnc3RhcnQnICkgcmV0dXJuXG4gICAgICAgIHRoaXMubW92ZU91dEVkaXRCdXR0b25zKClcbiAgICB9LFxuXG4gICAgbW92ZU91dEVkaXRCdXR0b25zKCkge1xuICAgICAgICB0aGlzLmVscy50cmFuc2FjdGlvbnMuYWZ0ZXIoIHRoaXMudmlld3MuZWRpdEJ1dHRvbnMuZWxzLmNvbnRhaW5lciApXG4gICAgICAgIHRoaXMudmlld3MuZWRpdEJ1dHRvbnMuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmZC1oaWRkZW4nKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuXG4gICAgICAgIHRoaXMudmlld3MuZW1haWxCdXR0b25zLm9uKCAnY29uZmlybUVtYWlsQ2xpY2tlZCcsIGUgPT4gdGhpcy5zZW5kTWFpbCgpIClcblxuICAgICAgICB0aGlzLnZpZXdzLmVkaXRCdXR0b25zLm9uKCAnZWRpdENsaWNrZWQnLCBlID0+IHRoaXMuY3JlYXRlRWRpdFJvdyggZSApIClcbiAgICAgICAgdGhpcy52aWV3cy5lZGl0QnV0dG9ucy5vbiggJ2NhbmNlbEVkaXRDbGlja2VkJywgZSA9PiB0aGlzLnJlbW92ZUVkaXRSb3coIGUgKSApXG4gICAgICAgIHRoaXMudmlld3MuZWRpdEJ1dHRvbnMub24oICdjb25maXJtRWRpdENsaWNrZWQnLCBlID0+IHRoaXMuZWRpdFRyYW5zYWN0aW9uKCBlICkgKVxuXG4gICAgICAgIHRoaXMudmlld3MuZWRpdEJ1dHRvbnMub24oICdnYXJiYWdlQ2xpY2tlZCcsIGUgPT4gdGhpcy50b2dnbGVEZWxldGVTdHlsZSggZSwgdHJ1ZSApIClcbiAgICAgICAgdGhpcy52aWV3cy5lZGl0QnV0dG9ucy5vbiggJ2NhbmNlbERlbGV0ZUNsaWNrZWQnLCBlID0+IHRoaXMudG9nZ2xlRGVsZXRlU3R5bGUoIGUsIGZhbHNlICkgKVxuICAgICAgICB0aGlzLnZpZXdzLmVkaXRCdXR0b25zLm9uKCAnY29uZmlybURlbGV0ZUNsaWNrZWQnLCBlID0+IHRoaXMuZGVsZXRlVHJhbnNhY3Rpb24oIGUgKSApXG5cbiAgICAgICAgdGhpcy5tb2RlbC5vbiggJ2FkZGVkJywgZGF0dW0gPT4gdGhpcy5vbk1vZGVsQWRkKCBkYXR1bSApIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBjcmVhdGVFZGl0Um93KCBlICkge1xuICAgICAgICB0aGlzLmVkaXRlZFJvdyA9IGUudGFyZ2V0LmNsb3Nlc3QoJ2xpJylcbiAgICAgICAgdGhpcy5lZGl0ZWRSb3cuY2xhc3NMaXN0LmFkZCgnY29uZmlybWluZy1lZGl0JylcblxuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMubW9kZWwuZGF0YS5maW5kKCBkYXR1bSA9PiBkYXR1bS5pZCA9PSB0aGlzLmVkaXRlZFJvdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSApXG5cbiAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7XG4gICAgICAgICAgICBpbnNlcnRpb246IHsgZWw6IHRoaXMuZWRpdGVkUm93LCBtZXRob2Q6ICdhZnRlcicgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLlRlbXBsYXRlcy5FZGl0VHJhbnNhY3Rpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLnJlZHVjZSggKCBtZW1vLCBhdHRyICkgPT5cbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbiggbWVtbywgeyBbIGF0dHIgXTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPT09ICdjcmVhdGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5Nb21lbnQoIG1vZGVsLmNyZWF0ZWQgKS5mb3JtYXQoJ01NTSBELCBZWVlZJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG1vZGVsWyBhdHRyIF1cbiAgICAgICAgICAgICAgICAgICAgfSApLFxuICAgICAgICAgICAgICAgICAgICB7IGFjdGlvbnM6IHRoaXMubW9kZWwuYWN0aW9ucyB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLmNyZWF0ZWQgPSBuZXcgdGhpcy5QaWthZGF5KCB7IGZpZWxkOiB0aGlzLmVscy5lZGl0VHJhbnNhY3Rpb24ucXVlcnlTZWxlY3RvcihgaW5wdXRbZGF0YS1hdHRyPVwiY3JlYXRlZFwiXWApLCBmb3JtYXQ6ICdNTU0gRCwgWVlZWScgfSApXG4gICAgfSxcblxuICAgIHJlbW92ZUVkaXRSb3coIGUgKSB7XG4gICAgICAgIHRoaXMuZWRpdGVkUm93LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbmZpcm1pbmctZWRpdCcpXG4gICAgICAgIHRoaXMuZWRpdGVkUm93ID0gdW5kZWZpbmVkXG4gICAgICAgIHRoaXMuZWxzLmVkaXRUcmFuc2FjdGlvbi5yZW1vdmUoKVxuICAgICAgICBkZWxldGUgdGhpcy5lbHMuZWRpdFRyYW5zYWN0aW9uXG4gICAgfSxcblxuICAgIHRvZ2dsZURlbGV0ZVN0eWxlKCBlLCB2YWx1ZSApIHtcbiAgICAgICAgZS50YXJnZXQuY2xvc2VzdCgnbGknKS5jbGFzc0xpc3QudG9nZ2xlKCAnY29uZmlybWluZy1kZWxldGUnLCB2YWx1ZSApXG4gICAgfSxcblxuICAgIG9uQ2FuY2VsQWRkVHJhbnNhY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWxzLmFkZFRyYW5zYWN0aW9uUm93LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgICAgIHRoaXMubW9kZWwuYXR0cmlidXRlcy5mb3JFYWNoKCBhdHRyID0+IHRoaXMuZWxzWyBhdHRyIF0udmFsdWUgPSBhdHRyID09PSAnYWN0aW9uJyA/IHRoaXMubW9kZWwuYWN0aW9uc1swXSA6ICcnIClcbiAgICB9LFxuXG4gICAgb25Nb2RlbEFkZCggZGF0dW0gKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0VHJhbnNhY3Rpb24oIGRhdHVtLmlkIClcbiAgICAgICAgdGhpcy51cGRhdGVCYWxhbmNlKClcbiAgICB9LFxuXG4gICAgc2VuZE1haWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhocigge1xuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICByZXNvdXJjZTogJ21haWwnLFxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoIHtcbiAgICAgICAgICAgICAgICB0bzogdGhpcy5jdXN0b21lci5wZXJzb24uZW1haWwsXG4gICAgICAgICAgICAgICAgc3ViamVjdDogYFBhdGNod29yayBHYXJkZW5zICR7dGhpcy5zaGFyZS5sYWJlbH0gQmFsYW5jZWAsXG4gICAgICAgICAgICAgICAgYm9keTogYEFjY29yZGluZyB0byBvdXIgcmVjb3JkcywgeW91IGhhdmUgYW4gb3V0c3RhbmRpbmcgYmFsYW5jZSBvZiAke3RoaXMuZWxzLmJhbGFuY2UudGV4dENvbnRlbnR9LlxcclxcblxcclxcblBsZWFzZSBzZW5kIHBheW1lbnQgYXQgeW91ciBlYXJsaWVzdCBjb252ZW5pZW5jZSB0byBQYXRjaHdvcmsgR2FyZGVucywgOTA1NyBXIFRoaXJkIFN0LCBEYXl0b24gT0ggNDU0MTcuXFxyXFxuXFxyXFxuSWYgeW91IGJlbGlldmUgdGhpcyBpcyBpbmNvcnJlY3QsIHBsZWFzZSBjb250YWN0IHVzIGJ5IGVtYWlsIG9yIHBob25lICg5MzcpIDgzNS01ODA3LlxcclxcblxcclxcblRoYW5rIFlvdS5gXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLlRvYXN0LnNob3dNZXNzYWdlKCAnc3VjY2VzcycsICdFbWFpbCBzZW50LicgKSApXG4gICAgICAgIC5jYXRjaCggZSA9PiB7IHRoaXMuRXJyb3IoZSk7IHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdlcnJvcicsICdFcnJvciBzZW5kaW5nIGVtYWlsLicgKSB9IClcbiAgICB9LFxuXG4gICAgXG5cbiAgICB1cGRhdGUoIHsgY3VzdG9tZXIsIHNoYXJlIH0gKSB7XG4gICAgICAgIHRoaXMuY3VzdG9tZXIgPSBjdXN0b21lclxuICAgICAgICB0aGlzLnNoYXJlID0gc2hhcmVcbiAgICAgIFxuICAgICAgICB0aGlzLmNsZWFyKClcblxuICAgICAgICB0aGlzLm1vZGVsLmdldCggeyBxdWVyeTogeyBtZW1iZXJTaGFyZUlkOiBzaGFyZS5tZW1iZXJzaGFyZWlkIH0gfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLm1vZGVsLmRhdGEuZm9yRWFjaCggY3NhVHJhbnNhY3Rpb24gPT4gdGhpcy5hcHBlbmRUcmFuc2FjdGlvbiggY3NhVHJhbnNhY3Rpb24gKSApIClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMudXBkYXRlQmFsYW5jZSgpLnNob3coKSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApXG5cbiAgICAgICAgdGhpcy52aWV3cy5hZGRUcmFuc2FjdGlvbi51cGRhdGUoIHNoYXJlLm1lbWJlcnNoYXJlaWQgKVxuICAgIH0sXG5cbiAgICB1cGRhdGVCYWxhbmNlKCkge1xuICAgICAgICBjb25zdCBiYWxhbmNlID0gdGhpcy5tb2RlbC5nZXRCYWxhbmNlKClcbiAgICAgICAgdGhpcy5lbHMuYmFsYW5jZS50ZXh0Q29udGVudCA9IHRoaXMuQ3VycmVuY3kuZm9ybWF0KCBiYWxhbmNlIClcblxuICAgICAgICBpZiggYmFsYW5jZSA+IDAgKSB7IHRoaXMudmlld3MuZW1haWxCdXR0b25zLnNob3coKSB9XG4gICAgICAgIGVsc2UgeyB0aGlzLnZpZXdzLmVtYWlsQnV0dG9ucy5oaWRlKCkgfVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG59IClcbiIsImNvbnN0IFN1cGVyID0gcmVxdWlyZSgnLi9fX3Byb3RvX18nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oIHt9LCBTdXBlciwge1xuXG4gICAgRGVsaXZlcnlPcHRpb246IE9iamVjdC5jcmVhdGUoIFN1cGVyLk1vZGVsLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnZGVsaXZlcnlvcHRpb24nIH0gfSApLFxuICAgIEdyb3VwRHJvcG9mZnM6IE9iamVjdC5jcmVhdGUoIFN1cGVyLk1vZGVsLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnZ3JvdXBkcm9wb2ZmJyB9IH0gKSxcbiAgICBSb3V0ZTogT2JqZWN0LmNyZWF0ZSggU3VwZXIuTW9kZWwsIHsgcmVzb3VyY2U6IHsgdmFsdWU6ICdkZWxpdmVyeXJvdXRlJyB9IH0gKSxcbiAgICBTa2lwV2Vla3M6IE9iamVjdC5jcmVhdGUoIFN1cGVyLk1vZGVsLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnbWVtYmVyc2hhcmVza2lwd2VlaycgfSB9ICksXG5cbiAgICBTaGFyZTogcmVxdWlyZSgnLi4vbW9kZWxzL1NoYXJlJyksXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgZGF0ZXM6ICdjbGljaycsXG4gICAgICAgIHJlc2V0QnRuOiAnY2xpY2snLFxuICAgIH0sXG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5lbHMuZGF0ZXMuaW5uZXJIVE1MID0gJydcblxuICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICB0aGlzLmVscy5lZGl0U3VtbWFyeS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgIH0sXG5cbiAgICBkZXRlcm1pbmVEYXRlcyggZGF5T2ZXZWVrICkge1xuICAgICAgICB0aGlzLmVscy5kZWxpdmVyeURheS50ZXh0Q29udGVudCA9IHRoaXMuTW9tZW50KCkuaXNvV2Vla2RheSggZGF5T2ZXZWVrICkuZm9ybWF0KCdkZGRkJylcbiAgICAgICAgdGhpcy5kYXRlcyA9IFsgXVxuXG4gICAgICAgIGlmKCAhIE51bWJlci5pc0ludGVnZXIoIGRheU9mV2VlayApICkgcmV0dXJuIHRoaXNcblxuICAgICAgICBjb25zdCBub3cgPSB0aGlzLk1vbWVudCgpLFxuICAgICAgICAgICAgbmV4dERlbGl2ZXJ5Q3V0b2ZmID0gbm93LFxuICAgICAgICAgICAgZW5kRGF0ZSA9IHRoaXMuTW9tZW50KCB0aGlzLm1vZGVsLnNoYXJlLmVuZGRhdGUgKVxuICAgICAgICAgICAgXG4gICAgICAgIGxldCBkZWxpdmVyeURhdGUgPSB0aGlzLk1vbWVudCggdGhpcy5tb2RlbC5zaGFyZS5zdGFydGRhdGUgKSxcbiAgICAgICAgICAgIHN0YXJ0RGF5ID0gZGVsaXZlcnlEYXRlLmRheSgpXG5cbiAgICAgICAgd2hpbGUoIHN0YXJ0RGF5ICE9IGRheU9mV2VlayApIHtcbiAgICAgICAgICAgIGRlbGl2ZXJ5RGF0ZS5hZGQoIDEsICdkYXlzJyApXG4gICAgICAgICAgICBzdGFydERheSA9IHRoaXMuTW9tZW50KCBkZWxpdmVyeURhdGUgKS5kYXkoKVxuICAgICAgICB9XG4gICAgICAgXG4gICAgICAgIHdoaWxlKCBlbmREYXRlLmRpZmYoIGRlbGl2ZXJ5RGF0ZSwgJ2RheXMnICkgPj0gMCApIHtcbiAgICAgICAgICAgIGNvbnN0IGlzU2tpcFdlZWsgPSB0aGlzLlNraXBXZWVrcy5kYXRhLmZpbmQoIHdlZWsgPT4gXG4gICAgICAgICAgICAgICAgdGhpcy5Nb21lbnQoIHdlZWsuZGF0ZSApLndlZWsoKSA9PT0gdGhpcy5Nb21lbnQoIGRlbGl2ZXJ5RGF0ZSApLndlZWsoKSApID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGF0ZXMucHVzaCgge1xuICAgICAgICAgICAgICAgIGRhdGU6IHRoaXMuTW9tZW50KCBkZWxpdmVyeURhdGUgKSxcbiAgICAgICAgICAgICAgICB1bnNlbGVjdGFibGU6IEJvb2xlYW4oIGRlbGl2ZXJ5RGF0ZS5kaWZmKCBuZXh0RGVsaXZlcnlDdXRvZmYgKSA8IDAgKSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogIWlzU2tpcFdlZWtcbiAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICBkZWxpdmVyeURhdGUuYWRkKCA3LCAnZGF5cycgKVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBnZXRQYXRjaERhdGEoKSB7XG4gICAgICAgIGNvbnN0IGFkZGVkRGF0ZXMgPSBbIF0sXG4gICAgICAgICAgICAgIHJlbW92ZWREYXRlcyA9IFsgXVxuXG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLmNoYW5nZWREYXRlcyApLmZvckVhY2goIGRhdGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWRpdGVkU3RhdHVzID0gdGhpcy5jaGFuZ2VkRGF0ZXNbIGRhdGUgXS5lZGl0ZWRTdGF0dXNcblxuICAgICAgICAgICAgaWYoICFlZGl0ZWRTdGF0dXMgKSByZXR1cm5cblxuICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IHRoaXMuTW9tZW50KCBkYXRlICkuZm9ybWF0KFwiWVlZWS1NTS1ERFwiKVxuICAgICAgICAgICAgaWYoIGVkaXRlZFN0YXR1cyA9PT0gJ3NlbGVjdGVkJyApIGFkZGVkRGF0ZXMucHVzaCggZm9ybWF0dGVkRGF0ZSApXG4gICAgICAgICAgICBlbHNlIHJlbW92ZWREYXRlcy5wdXNoKCBmb3JtYXR0ZWREYXRlIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZGVkRGF0ZXMsXG4gICAgICAgICAgICByZW1vdmVkRGF0ZXMsIFxuICAgICAgICAgICAgYWxsUmVtb3ZlZDogQXJyYXkuZnJvbSggdGhpcy5lbHMuZGF0ZXMucXVlcnlTZWxlY3RvckFsbCgnbGk6bm90KC5zZWxlY3RlZCknKSApLm1hcCggZWwgPT4gdGhpcy5Nb21lbnQoIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kYXRlJyksICdZWVlZTU1ERCcgKS5mb3JtYXQoJ1lZWVktTU0tREQnKSApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0V2Vla3NBZmZlY3RlZCgpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0YWJsZURhdGVzID0gdGhpcy5kYXRlcy5maWx0ZXIoIGRhdGUgPT4gIWRhdGUudW5zZWxlY3RhYmxlICkgXG4gICAgICAgIHJldHVybiB7IHNlbGVjdGFibGU6IHNlbGVjdGFibGVEYXRlcy5sZW5ndGgsIHNraXBwZWQ6IHNlbGVjdGFibGVEYXRlcy5maWx0ZXIoIGRhdGUgPT4gIWRhdGUuc2VsZWN0ZWQgKS5sZW5ndGggfVxuICAgIH0sXG5cbiAgICBnZXREYXlPZldlZWsoKSB7XG4gICAgICAgIGNvbnN0IGRlbGl2ZXJ5ID0gdGhpcy5tb2RlbC5kZWxpdmVyeS5kYXRhWzBdXG5cbiAgICAgICAgcmV0dXJuIGRlbGl2ZXJ5Lmdyb3VwZHJvcG9mZi5pZFxuICAgICAgICAgICAgPyB0aGlzLlhociggeyBtZXRob2Q6ICdnZXQnLCByZXNvdXJjZTogJ3NoYXJlZ3JvdXBkcm9wb2ZmJywgcXM6IEpTT04uc3RyaW5naWZ5KCB7IHNoYXJlaWQ6IHRoaXMubW9kZWwuc2hhcmUuaWQsIGdyb3VwZHJvcG9mZmlkOiBkZWxpdmVyeS5ncm91cGRyb3BvZmYuaWQgfSApIH0gKVxuICAgICAgICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4gUHJvbWlzZS5yZXNvbHZlKCByZXNwb25zZVswXS5kYXlvZndlZWsgKSApXG4gICAgICAgICAgICA6IGRlbGl2ZXJ5LmRlbGl2ZXJ5b3B0aW9uLm5hbWUgPT09ICdmYXJtJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5Sb3V0ZS5kYXRhLmZpbmQoIHJvdXRlID0+IHJvdXRlLmxhYmVsID09ICdmYXJtJyApLmRheW9md2Vla1xuICAgICAgICAgICAgICAgIDogdGhpcy5YaHIoIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6ICd6aXBjb2Rlcm91dGUnLFxuICAgICAgICAgICAgICAgICAgICBxczogSlNPTi5zdHJpbmdpZnkoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHppcGNvZGU6IHRoaXMubW9kZWwuY3VzdG9tZXIubWVtYmVyLnppcGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZWlkOiB7IG9wZXJhdGlvbjogJ2pvaW4nLCB2YWx1ZTogeyB0YWJsZTogJ2RlbGl2ZXJ5cm91dGUnLCBjb2x1bW46ICdpZCcgfSB9XG4gICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4gUHJvbWlzZS5yZXNvbHZlKCByZXNwb25zZVswXVsgJ2RlbGl2ZXJ5cm91dGUuZGF5b2Z3ZWVrJyBdICkgKVxuICAgIH0sXG5cbiAgICBnZXRUb3RhbERhdGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbHMuZGF0ZXMucXVlcnlTZWxlY3RvckFsbCgnbGkuc2VsZWN0ZWQnKS5sZW5ndGhcbiAgICB9LFxuXG4gICAgb25EYXRlc0NsaWNrKCBlICkge1xuICAgICAgICBjb25zdCBlbCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ2xpJyksXG4gICAgICAgICAgICAgIGRhdGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0ZScpXG4gICAgICAgIFxuICAgICAgICBpZiggZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd1bnNlbGVjdGFibGUnKSApIHJldHVyblxuXG4gICAgICAgIGxldCBlZGl0ZWRTdGF0dXNcblxuICAgICAgICBpZiggISB0aGlzLmNoYW5nZWREYXRlc1sgZGF0ZSBdICkgdGhpcy5jaGFuZ2VkRGF0ZXNbIGRhdGUgXSA9IHsgaW5pdGlhbFN0YXR1czogZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpID8gJ3NlbGVjdGVkJyA6ICdyZW1vdmVkJyB9XG5cbiAgICAgICAgZWwuY2xhc3NMaXN0LnRvZ2dsZSgnc2VsZWN0ZWQnKVxuICAgICAgICBlZGl0ZWRTdGF0dXMgPSBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykgPyAnc2VsZWN0ZWQnIDogJ3JlbW92ZWQnXG5cbiAgICAgICAgaWYoIGVkaXRlZFN0YXR1cyAhPT0gdGhpcy5jaGFuZ2VkRGF0ZXNbIGRhdGUgXS5pbml0aWFsU3RhdHVzICkge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VkRGF0ZXNbIGRhdGUgXS5lZGl0ZWRTdGF0dXMgPSBlZGl0ZWRTdGF0dXNcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2VkaXRlZCcpXG4gICAgICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VkRGF0ZXNbIGRhdGUgXS5lZGl0ZWRTdGF0dXMgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2VkaXRlZCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiggISBPYmplY3Qua2V5cyggdGhpcy5jaGFuZ2VkRGF0ZXMgKS5maW5kKCBrZXkgPT4gdGhpcy5jaGFuZ2VkRGF0ZXNba2V5XS5lZGl0ZWRTdGF0dXMgIT09IHVuZGVmaW5lZCApICkge1xuICAgICAgICAgICAgdGhpcy5lbHMucmVzZXRCdG4uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICAgICAgICAgIHRoaXMuZW1pdCggJ3Jlc2V0JywgdGhpcy5tb2RlbCApXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbHMuZWRpdFN1bW1hcnkuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2hvd0VkaXRTdW1tYXJ5KClcbiAgICB9LFxuXG4gICAgb25SZXNldEJ0bkNsaWNrKCkge1xuICAgICAgICB0aGlzLmVscy5yZXNldEJ0bi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICB0aGlzLmVscy5lZGl0U3VtbWFyeS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuXG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLmNoYW5nZWREYXRlcyApLmZvckVhY2goIGtleSA9PiB7XG4gICAgICAgICAgICBpZiggdGhpcy5jaGFuZ2VkRGF0ZXNba2V5XS5lZGl0ZWRTdGF0dXMgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVscy5kYXRlcy5xdWVyeVNlbGVjdG9yKGBsaVtkYXRhLWRhdGU9JHtDU1MuZXNjYXBlKCBrZXkgKX1gKVxuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoJ3NlbGVjdGVkJylcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0ZWQnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcblxuICAgICAgICB0aGlzLnVwZGF0ZSggdGhpcy5tb2RlbCApXG4gICAgICAgIHRoaXMuZW1pdCggJ3Jlc2V0JywgdGhpcy5tb2RlbCApXG4gICAgfSxcblxuICAgIHJlbmRlckRhdGVzKCkge1xuICAgICAgICB0aGlzLmRhdGVzLmZvckVhY2goIGRhdHVtID0+IHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXMuZGF0ZSggZGF0dW0gKSwgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVscy5kYXRlcyB9IH0gKSApXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHNob3dFZGl0U3VtbWFyeSgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IDAsXG4gICAgICAgICAgICBhZGRlZCA9IDAsXG4gICAgICAgICAgICByZW1vdmVkID0gMFxuXG4gICAgICAgIHRoaXMuZWxzLnNlbGVjdGVkRGF0ZXMuaW5uZXJIVE1MID0gJydcbiAgICAgICAgdGhpcy5lbHMucmVtb3ZlZERhdGVzLmlubmVySFRNTCA9ICcnXG5cbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMuY2hhbmdlZERhdGVzICkuZm9yRWFjaCggZGF0ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlZGl0ZWRTdGF0dXMgPSB0aGlzLmNoYW5nZWREYXRlc1sgZGF0ZSBdLmVkaXRlZFN0YXR1c1xuXG4gICAgICAgICAgICBpZiggZWRpdGVkU3RhdHVzICkge1xuXG4gICAgICAgICAgICAgICAgZWRpdGVkU3RhdHVzID09PSAnc2VsZWN0ZWQnXG4gICAgICAgICAgICAgICAgICAgID8gYWRkZWQgKz0gMVxuICAgICAgICAgICAgICAgICAgICA6IHJlbW92ZWQgKz0gMVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydGlvbjogeyBlbDogdGhpcy5lbHNbIGAke2VkaXRlZFN0YXR1c31EYXRlc2AgXSB9LFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXMuc3VtbWFyeUNvbHVtbiggeyB2YWx1ZTogdGhpcy5Nb21lbnQoIGRhdGUgKS5mb3JtYXQoXCJNTU0gRFwiKSB9IClcbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgcmVzdWx0ID0gYWRkZWQgLSByZW1vdmVkXG4gICAgICAgIHRoaXMuZWxzLndlZWtDaGFuZ2UudGV4dENvbnRlbnQgPSByZXN1bHRcbiAgICAgICAgdGhpcy5lbHMud2Vla0NoYW5nZS5jbGFzc0xpc3QudG9nZ2xlKCAnaXMtbmVnYXRpdmUnLCBCb29sZWFuKCByZXN1bHQgPCAwICkgKVxuXG4gICAgICAgIHRoaXMuZWxzLmVkaXRTdW1tYXJ5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXG5cbiAgICAgICAgdGhpcy5lbWl0KCAnYWRqdXN0bWVudCcsIHsgYWRkZWQsIHJlbW92ZWQgfSApXG4gICAgfSxcblxuICAgIHRlbXBsYXRlczoge1xuICAgICAgICBkYXRlOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9EZWxpdmVyeURhdGUnKSxcbiAgICAgICAgc3VtbWFyeUNvbHVtbjogZGF0ZSA9PiBgPGxpPiR7ZGF0ZS52YWx1ZX08L2xpPmBcbiAgICB9LFxuXG4gICAgdXBkYXRlKCB7IGN1c3RvbWVyLCBkZWxpdmVyeSwgc2hhcmUgfSApIHtcbiAgICAgICAgaWYoIHRoaXMudXBkYXRpbmcgKSByZXR1cm5cblxuICAgICAgICB0aGlzLnVwZGF0aW5nID0gdHJ1ZVxuXG4gICAgICAgIHRoaXMubW9kZWwgPSBhcmd1bWVudHNbMF1cblxuICAgICAgICB0aGlzLmNoYW5nZWREYXRlcyA9IHsgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLlJvdXRlLmdldCgpXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLlNraXBXZWVrcy5nZXQoIHsgcXVlcnk6IHsgbWVtYmVyc2hhcmVpZDogc2hhcmUubWVtYmVyc2hhcmVpZCB9IH0gKSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLmdldERheU9mV2VlaygpIClcbiAgICAgICAgLnRoZW4oIGRheU9mV2VlayA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKClcbiAgICAgICAgICAgIHRoaXMuZGV0ZXJtaW5lRGF0ZXMoIGRheU9mV2VlayApLnJlbmRlckRhdGVzKCkuc2hvdygpXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLnVwZGF0aW5nID0gZmFsc2UgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgdXBkYXRlRGVsaXZlcnkoIGRhdGEgKSB7XG4gICAgICAgIGNvbnN0IG1vZGVsQ29weSA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCB0aGlzLm1vZGVsICkgKSBcblxuICAgICAgICByZXR1cm4gdGhpcy5EZWxpdmVyeU9wdGlvbi5nZXQoIHsgcXVlcnk6IHsgbmFtZTogZGF0YS5kZWxpdmVyeU9wdGlvbiB9IH0gKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgaWYoIHRoaXMuRGVsaXZlcnlPcHRpb24uZGF0YS5sZW5ndGggKSBtb2RlbENvcHkuZGVsaXZlcnkuZGF0YVswXS5kZWxpdmVyeW9wdGlvbiA9IHRoaXMuRGVsaXZlcnlPcHRpb24uZGF0YVswXVxuXG4gICAgICAgICAgICBpZiggISBkYXRhLmdyb3VwT3B0aW9uICkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKCBtb2RlbENvcHkuZGVsaXZlcnkuZGF0YVswXS5ncm91cGRyb3BvZmYgKS5mb3JFYWNoKCBrZXkgPT5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWxDb3B5LmRlbGl2ZXJ5LmRhdGFbMF0uZ3JvdXBkcm9wb2ZmWyBrZXkgXSA9IG51bGxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAoIGRhdGEuZ3JvdXBPcHRpb24gKVxuICAgICAgICAgICAgICAgID8gdGhpcy5Hcm91cERyb3BvZmZzLmdldCggeyBxdWVyeTogeyBuYW1lOiBkYXRhLmdyb3VwT3B0aW9uIH0gfSApXG4gICAgICAgICAgICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5Hcm91cERyb3BvZmZzLmRhdGEubGVuZ3RoICkgbW9kZWxDb3B5LmRlbGl2ZXJ5LmRhdGFbMF0uZ3JvdXBkcm9wb2ZmID0gdGhpcy5Hcm91cERyb3BvZmZzLmRhdGFbMF1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoIG1vZGVsQ29weSApXG4gICAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICA6IHRoaXMudXBkYXRlKCBtb2RlbENvcHkgKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcbiAgICB9XG5cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7IH0sIHJlcXVpcmUoJy4uLy4uLy4uL2xpYi9NeU9iamVjdCcpLnByb3RvdHlwZSwgcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyLnByb3RvdHlwZSwge1xuXG4gICAgQ3VycmVuY3k6IG5ldyBJbnRsLk51bWJlckZvcm1hdCggJ2VuLVVTJywge1xuICAgICAgc3R5bGU6ICdjdXJyZW5jeScsXG4gICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDJcbiAgICB9ICksXG5cbiAgICBFcnJvcjogcmVxdWlyZSgnLi4vLi4vLi4vbGliL015RXJyb3InKSxcblxuICAgIEZvcm1hdDogcmVxdWlyZSgnLi4vRm9ybWF0JyksXG5cbiAgICBNb2RlbDogcmVxdWlyZSgnLi4vbW9kZWxzL19fcHJvdG9fXycpLFxuXG4gICAgTW9tZW50OiByZXF1aXJlKCdtb21lbnQnKSxcblxuICAgIE9wdGltaXplZFJlc2l6ZTogcmVxdWlyZSgnLi9saWIvT3B0aW1pemVkUmVzaXplJyksXG4gICAgXG4gICAgUDogKCBmdW4sIGFyZ3M9WyBdLCB0aGlzQXJnICkgPT5cbiAgICAgICAgbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4gUmVmbGVjdC5hcHBseSggZnVuLCB0aGlzQXJnIHx8IHRoaXMsIGFyZ3MuY29uY2F0KCAoIGUsIC4uLmNhbGxiYWNrICkgPT4gZSA/IHJlamVjdChlKSA6IHJlc29sdmUoY2FsbGJhY2spICkgKSApLFxuXG4gICAgWGhyOiByZXF1aXJlKCcuLi9YaHInKSxcblxuICAgIGJpbmRFdmVudCgga2V5LCBldmVudCwgZWwgKSB7XG4gICAgICAgIHZhciBlbHMgPSBlbCA/IFsgZWwgXSA6IEFycmF5LmlzQXJyYXkoIHRoaXMuZWxzWyBrZXkgXSApID8gdGhpcy5lbHNbIGtleSBdIDogWyB0aGlzLmVsc1sga2V5IF0gXVxuICAgICAgICBlbHMuZm9yRWFjaCggZWwgPT4gZWwuYWRkRXZlbnRMaXN0ZW5lciggZXZlbnQgfHwgJ2NsaWNrJywgZSA9PiB0aGlzWyBgb24ke3RoaXMuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGtleSl9JHt0aGlzLmNhcGl0YWxpemVGaXJzdExldHRlcihldmVudCl9YCBdKCBlICkgKSApXG4gICAgfSxcblxuICAgIGNhcGl0YWxpemVGaXJzdExldHRlcjogc3RyaW5nID0+IHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKSxcblxuICAgIGNvbnN0cnVjdG9yKCBvcHRzPXt9ICkge1xuXG4gICAgICAgIGlmKCBvcHRzLmV2ZW50cyApIHsgT2JqZWN0LmFzc2lnbiggdGhpcy5ldmVudHMsIG9wdHMuZXZlbnRzICk7IGRlbGV0ZSBvcHRzLmV2ZW50czsgfVxuICAgICAgICBPYmplY3QuYXNzaWduKCB0aGlzLCBvcHRzIClcblxuICAgICAgICB0aGlzLnN1YnZpZXdFbGVtZW50cyA9IFsgXVxuXG4gICAgICAgIGlmKCB0aGlzLnJlcXVpcmVzTG9naW4gJiYgKCF0aGlzLnVzZXIuaWQgKSApIHJldHVybiB0aGlzLmhhbmRsZUxvZ2luKClcbiAgICAgICAgaWYoIHRoaXMudXNlciAmJiAhdGhpcy5pc0FsbG93ZWQoIHRoaXMudXNlci5hdHRyaWJ1dGVzICkgKSByZXR1cm4gdGhpcy5zY29vdEF3YXkoKVxuXG4gICAgICAgIHJldHVybiB0aGlzLmluaXRpYWxpemUoKS5yZW5kZXIoKVxuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZUV2ZW50cygga2V5LCBlbCApIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdGhpcy5ldmVudHNba2V5XVxuXG4gICAgICAgIGlmKCB0eXBlID09PSBcInN0cmluZ1wiICkgeyB0aGlzLmJpbmRFdmVudCgga2V5LCB0aGlzLmV2ZW50c1trZXldLCBlbCApIH1cbiAgICAgICAgZWxzZSBpZiggQXJyYXkuaXNBcnJheSggdGhpcy5ldmVudHNba2V5XSApICkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbIGtleSBdLmZvckVhY2goIGV2ZW50T2JqID0+IHRoaXMuYmluZEV2ZW50KCBrZXksIGV2ZW50T2JqICkgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnQoIGtleSwgdGhpcy5ldmVudHNba2V5XS5ldmVudCApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZGVsZXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaWRlKClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxzLmNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLmVscy5jb250YWluZXIgKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggdGhpcy5lbWl0KCdkZWxldGVkJykgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7fSxcblxuICAgIGZhZGVJbkltYWdlKCBlbCApIHtcbiAgICAgICAgZWwub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCAnaW1nTG9hZGVkJywgZWwgKVxuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNyYycpXG4gICAgICAgIH1cblxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoICdzcmMnLCBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJykgKVxuICAgIH0sXG5cbiAgICBnZXRDb250YWluZXIoKSB7IHJldHVybiB0aGlzLmVscy5jb250YWluZXIgfSxcblxuICAgIGdldERhdGEoKSB7XG4gICAgICAgIGlmKCAhdGhpcy5tb2RlbCApIHRoaXMubW9kZWwgPSBPYmplY3QuY3JlYXRlKCB0aGlzLk1vZGVsLCB7IHJlc291cmNlOiB7IHZhbHVlOiB0aGlzLm5hbWUgfSB9IClcblxuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5nZXQoKVxuICAgIH0sXG5cbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHJ2ID0gT2JqZWN0LmFzc2lnbiggdGhpcy51c2VyID8geyB1c2VyOiB0aGlzLnVzZXIuZGF0YSB9IDoge30sIHRoaXMuRm9ybWF0IClcblxuICAgICAgICBpZiggdGhpcy5tb2RlbCApIHtcbiAgICAgICAgICAgIHJ2Lm1vZGVsID0gdGhpcy5tb2RlbC5kYXRhXG5cbiAgICAgICAgICAgIGlmKCB0aGlzLm1vZGVsLm1ldGEgKSBydi5tZXRhID0gdGhpcy5tb2RlbC5tZXRhXG4gICAgICAgICAgICBpZiggdGhpcy5tb2RlbC5hdHRyaWJ1dGVzICkgcnYuYXR0cmlidXRlcyA9IHRoaXMubW9kZWwuYXR0cmlidXRlc1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHRoaXMudGVtcGxhdGVPcHRzICkgcnYub3B0cyA9IHR5cGVvZiB0aGlzLnRlbXBsYXRlT3B0cyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMudGVtcGxhdGVPcHRzKCkgOiB0aGlzLnRlbXBsYXRlT3B0cyB8fCB7fVxuXG4gICAgICAgIHJldHVybiBydlxuICAgIH0sXG5cbiAgICBoYW5kbGVMb2dpbigpIHtcblxuICAgICAgICByZXF1aXJlKCcuL0xvZ2luJykuc2hvdygpLm9uY2UoIFwic3VjY2Vzc1wiLCB1c2VyRGF0YSA9PiB7XG4gICAgICAgICAgICBpZiggIXRoaXMuaXNBbGxvd2VkKCB1c2VyRGF0YSApICkgcmV0dXJuIHRoaXMuc2Nvb3RBd2F5KClcblxuICAgICAgICAgICAgdGhpcy51c2VyLnNldCggdXNlckRhdGEgKVxuICAgICAgICAgICAgdGhpcy51c2VyLnRyaWdnZXIoJ2xvZ2dlZEluJylcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub25Mb2dpbigpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIGhpZGUoIGlzU2xvdyApIHsgcmV0dXJuIHRoaXMuaGlkZUVsKCB0aGlzLmVscy5jb250YWluZXIsIGlzU2xvdyApIH0sXG5cbiAgICBoaWRlU3luYygpIHsgdGhpcy5lbHMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2ZkLWhpZGRlbicpOyByZXR1cm4gdGhpcyB9LFxuXG4gICAgX2hpZGVFbCggZWwsIHJlc29sdmUsIGhhc2gsIGlzU2xvdyApIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2FuaW1hdGlvbmVuZCcsIHRoaXNbIGhhc2ggXSApXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZkLWhpZGRlbicpXG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYGFuaW1hdGUtb3V0JHsgaXNTbG93ID8gJy1zbG93JyA6ICcnfWApXG4gICAgICAgIGRlbGV0ZSB0aGlzW2hhc2hdXG4gICAgICAgIHRoaXMuaXNIaWRpbmcgPSBmYWxzZVxuICAgICAgICByZXNvbHZlKClcbiAgICB9LFxuXG4gICAgaGlkZUVsKCBlbCwgaXNTbG93ICkge1xuICAgICAgICBpZiggdGhpcy5pc0hpZGRlbiggZWwgKSApIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXG4gICAgICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgICAgIGhhc2ggPSBgJHt0aW1lfUhpZGVgXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoIHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgdGhpc1sgaGFzaCBdID0gZSA9PiB0aGlzLl9oaWRlRWwoIGVsLCByZXNvbHZlLCBoYXNoLCBpc1Nsb3cgKVxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lciggJ2FuaW1hdGlvbmVuZCcsIHRoaXNbIGhhc2ggXSApXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGBhbmltYXRlLW91dCR7IGlzU2xvdyA/ICctc2xvdycgOiAnJ31gKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgaHRtbFRvRnJhZ21lbnQoIHN0ciApIHtcbiAgICAgICAgbGV0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgLy8gbWFrZSB0aGUgcGFyZW50IG9mIHRoZSBmaXJzdCBkaXYgaW4gdGhlIGRvY3VtZW50IGJlY29tZXMgdGhlIGNvbnRleHQgbm9kZVxuICAgICAgICByYW5nZS5zZWxlY3ROb2RlKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpLml0ZW0oMCkpXG4gICAgICAgIHJldHVybiByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoIHN0ciApXG4gICAgfSxcblxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKCB0aGlzLCB7IGVsczogeyB9LCBzbHVycDogeyBhdHRyOiAnZGF0YS1qcycsIHZpZXc6ICdkYXRhLXZpZXcnLCBuYW1lOiAnZGF0YS1uYW1lJywgaW1nOiAnZGF0YS1zcmMnLCBiZ0ltZzogJ2RhdGEtYmcnIH0sIHZpZXdzOiB7IH0gfSApXG4gICAgfSxcblxuICAgIGluc2VydFRvRG9tKCBmcmFnbWVudCwgb3B0aW9ucyApIHtcbiAgICAgICAgY29uc3QgaW5zZXJ0aW9uID0gdHlwZW9mIG9wdGlvbnMuaW5zZXJ0aW9uID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5pbnNlcnRpb24oKSA6IG9wdGlvbnMuaW5zZXJ0aW9uO1xuXG4gICAgICAgIGluc2VydGlvbi5tZXRob2QgPT09ICdpbnNlcnRCZWZvcmUnXG4gICAgICAgICAgICA/IGluc2VydGlvbi5lbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZnJhZ21lbnQsIGluc2VydGlvbi5lbCApXG4gICAgICAgICAgICA6IGluc2VydGlvbi5lbFsgaW5zZXJ0aW9uLm1ldGhvZCB8fCAnYXBwZW5kQ2hpbGQnIF0oIGZyYWdtZW50IClcbiAgICB9LFxuXG4gICAgaXNBbGxvd2VkKCB1c2VyICkge1xuICAgICAgICBpZiggIXRoaXMucmVxdWlyZXNSb2xlICkgcmV0dXJuIHRydWVcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWlyZXNSb2xlICYmIHVzZXIucm9sZXMuaW5jbHVkZXMoIHRoaXMucmVxdWlyZXNSb2xlIClcbiAgICB9LFxuICAgIFxuICAgIGlzSGlkZGVuKCBlbCApIHsgcmV0dXJuIGVsID8gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmZC1oaWRkZW4nKSA6IHRoaXMuZWxzLmNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ2ZkLWhpZGRlbicpIH0sXG5cbiAgICBsb2FkQmdJbWFnZSggZWwgKSB7XG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpXG5cbiAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IGVsLmNsYXNzTGlzdC5hZGQoJ2JnLWxvYWRlZCcpXG4gICAgICAgIGltZy5zcmMgPSB0aGlzLkZvcm1hdC5JbWFnZVNyYyggZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWJnJykgKVxuICAgIH0sXG5cbiAgICBvbkxvZ2luKCkge1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKS5yZW5kZXIoKVxuICAgIH0sXG5cbiAgICBvbk5hdmlnYXRpb24oIHBhdGggKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3coKVxuICAgIH0sXG5cbiAgICBzaG93Tm9BY2Nlc3MoKSB7XG4gICAgICAgIGFsZXJ0KFwiTm8gcHJpdmlsZWdlcywgc29uXCIpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7IHJldHVybiB0aGlzIH0sXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmKCB0aGlzLmRhdGEgKSB0aGlzLm1vZGVsID0gT2JqZWN0LmNyZWF0ZSggdGhpcy5Nb2RlbCwgeyB9ICkuY29uc3RydWN0b3IoIHRoaXMuZGF0YSApXG5cbiAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7XG4gICAgICAgICAgICBpbnNlcnRpb246IHRoaXMuaW5zZXJ0aW9uIHx8IHsgZWw6IGRvY3VtZW50LmJvZHkgfSxcbiAgICAgICAgICAgIGlzVmlldzogdHJ1ZSxcbiAgICAgICAgICAgIHN0b3JlRnJhZ21lbnQ6IHRoaXMuc3RvcmVGcmFnbWVudCxcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlKCB0aGlzLmdldFRlbXBsYXRlT3B0aW9ucygpLCB7IE1vbWVudDogdGhpcy5Nb21lbnQgfSApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMucmVuZGVyU3Vidmlld3MoKVxuXG4gICAgICAgIGlmKCB0aGlzLnNpemUgKSB7IHRoaXMuc2l6ZSgpOyB0aGlzLk9wdGltaXplZFJlc2l6ZS5hZGQoIHRoaXMuc2l6ZS5iaW5kKHRoaXMpICkgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnBvc3RSZW5kZXIoKVxuICAgIH0sXG5cbiAgICByZW5kZXJTdWJ2aWV3cygpIHtcbiAgICAgICAgdGhpcy5zdWJ2aWV3RWxlbWVudHMuZm9yRWFjaCggb2JqID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBvYmoubmFtZSB8fCBvYmoudmlld1xuXG4gICAgICAgICAgICBsZXQgb3B0cyA9IHsgfVxuXG4gICAgICAgICAgICBpZiggdGhpcy5WaWV3cyAmJiB0aGlzLlZpZXdzWyBvYmoudmlldyBdICkgb3B0cyA9IHR5cGVvZiB0aGlzLlZpZXdzWyBvYmoudmlldyBdID09PSBcIm9iamVjdFwiID8gdGhpcy5WaWV3c1sgb2JqLnZpZXcgXSA6IFJlZmxlY3QuYXBwbHkoIHRoaXMuVmlld3NbIG9iai52aWV3IF0sIHRoaXMsIFsgXSApXG4gICAgICAgICAgICBpZiggdGhpcy5WaWV3cyAmJiB0aGlzLlZpZXdzWyBuYW1lIF0gKSBvcHRzID0gdHlwZW9mIHRoaXMuVmlld3NbIG5hbWUgXSA9PT0gXCJvYmplY3RcIiA/IHRoaXMuVmlld3NbIG5hbWUgXSA6IFJlZmxlY3QuYXBwbHkoIHRoaXMuVmlld3NbIG5hbWUgXSwgdGhpcywgWyBdIClcblxuICAgICAgICAgICAgdGhpcy52aWV3c1sgbmFtZSBdID0gdGhpcy5mYWN0b3J5LmNyZWF0ZSggb2JqLnZpZXcsIE9iamVjdC5hc3NpZ24oIHsgaW5zZXJ0aW9uOiB7IGVsOiBvYmouZWwsIG1ldGhvZDogJ2luc2VydEJlZm9yZScgfSB9LCBvcHRzICkgKVxuXG4gICAgICAgICAgICBpZiggdGhpcy5ldmVudHMudmlld3MgKSB7XG4gICAgICAgICAgICAgICAgaWYoIHRoaXMuZXZlbnRzLnZpZXdzWyBuYW1lIF0gKSB0aGlzLmV2ZW50cy52aWV3c1sgbmFtZSBdLmZvckVhY2goIGFyciA9PiB0aGlzLnZpZXdzWyBuYW1lIF0ub24oIGFyclswXSwgZXZlbnREYXRhID0+IFJlZmxlY3QuYXBwbHkoIGFyclsxXSwgdGhpcywgWyBldmVudERhdGEgXSApICkgKVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIHRoaXMuZXZlbnRzLnZpZXdzWyBvYmoudmlldyBdICkgdGhpcy5ldmVudHMudmlld3NbIG9iai52aWV3IF0uZm9yRWFjaCggYXJyID0+IHRoaXMudmlld3NbIG5hbWUgXS5vbiggYXJyWzBdLCBldmVudERhdGEgPT4gUmVmbGVjdC5hcHBseSggYXJyWzFdLCB0aGlzLCBbIGV2ZW50RGF0YSBdICkgKSApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCBvYmouZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmZC1oaWRkZW4nKSApIHRoaXMudmlld3NbbmFtZV0uaGlkZVN5bmMoKVxuICAgICAgICAgICAgb2JqLmVsLnJlbW92ZSgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMuc3Vidmlld0VsZW1lbnRzID0gWyBdXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICBzY29vdEF3YXkoKSB7XG4gICAgICAgIHRoaXMuVG9hc3Quc2hvdyggJ2Vycm9yJywgJ1lvdSBhcmUgbm90IGFsbG93ZWQgaGVyZS4gIFNvcnJ5LicpXG4gICAgICAgIC5jYXRjaCggZSA9PiB7IHRoaXMuRXJyb3IoIGUgKTsgdGhpcy5lbWl0KCAnbmF2aWdhdGUnLCBgL2AgKSB9IClcbiAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuZW1pdCggJ25hdmlnYXRlJywgYC9gICkgKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHNob3coIGlzU2xvdyApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hvd0VsKCB0aGlzLmVscy5jb250YWluZXIsIGlzU2xvdyApXG4gICAgfSxcblxuICAgIHNob3dTeW5jKCkgeyB0aGlzLmVscy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnZmQtaGlkZGVuJyk7IHJldHVybiB0aGlzIH0sXG5cbiAgICBfc2hvd0VsKCBlbCwgcmVzb2x2ZSwgaGFzaCwgaXNTbG93ICkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCAnYW5pbWF0aW9uZW5kJywgdGhpc1toYXNoXSApXG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYGFuaW1hdGUtaW4keyBpc1Nsb3cgPyAnLXNsb3cnIDogJyd9YClcbiAgICAgICAgZGVsZXRlIHRoaXNbIGhhc2ggXVxuICAgICAgICByZXNvbHZlKClcbiAgICB9LFxuXG4gICAgc2hvd0VsKCBlbCwgaXNTbG93ICkge1xuICAgICAgICBjb25zdCB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICAgICAgICBoYXNoID0gYCR7dGltZX1TaG93YFxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICB0aGlzWyBoYXNoIF0gPSBlID0+IHRoaXMuX3Nob3dFbCggZWwsIHJlc29sdmUsIGhhc2gsIGlzU2xvdyApXG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCAnYW5pbWF0aW9uZW5kJywgdGhpc1sgaGFzaCBdIClcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZkLWhpZGRlbicpXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGBhbmltYXRlLWluJHsgaXNTbG93ID8gJy1zbG93JyA6ICcnfWApXG4gICAgICAgIH0gKSAgICAgICAgXG4gICAgfSxcblxuICAgIHNsdXJwRWwoIGVsICkge1xuICAgICAgICB2YXIga2V5ID0gZWwuZ2V0QXR0cmlidXRlKCB0aGlzLnNsdXJwLmF0dHIgKSB8fCAnY29udGFpbmVyJ1xuXG4gICAgICAgIGlmKCBrZXkgPT09ICdjb250YWluZXInICkgZWwuY2xhc3NMaXN0LmFkZCggdGhpcy5uYW1lIClcblxuICAgICAgICB0aGlzLmVsc1sga2V5IF0gPSBBcnJheS5pc0FycmF5KCB0aGlzLmVsc1sga2V5IF0gKVxuICAgICAgICAgICAgPyB0aGlzLmVsc1sga2V5IF0uY29uY2F0KCBlbCApXG4gICAgICAgICAgICA6ICggdGhpcy5lbHNbIGtleSBdICE9PSB1bmRlZmluZWQgKVxuICAgICAgICAgICAgICAgID8gWyB0aGlzLmVsc1sga2V5IF0sIGVsIF1cbiAgICAgICAgICAgICAgICA6IGVsXG5cbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKHRoaXMuc2x1cnAuYXR0cilcblxuICAgICAgICBpZiggdGhpcy5ldmVudHNbIGtleSBdICkgdGhpcy5kZWxlZ2F0ZUV2ZW50cygga2V5LCBlbCApXG4gICAgfSxcblxuICAgIHNsdXJwVGVtcGxhdGUoIG9wdGlvbnMgKSB7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IHRoaXMuaHRtbFRvRnJhZ21lbnQoIG9wdGlvbnMudGVtcGxhdGUgKSxcbiAgICAgICAgICAgIHNlbGVjdG9yID0gYFske3RoaXMuc2x1cnAuYXR0cn1dYCxcbiAgICAgICAgICAgIHZpZXdTZWxlY3RvciA9IGBbJHt0aGlzLnNsdXJwLnZpZXd9XWAsXG4gICAgICAgICAgICBpbWdTZWxlY3RvciA9IGBbJHt0aGlzLnNsdXJwLmltZ31dYCxcbiAgICAgICAgICAgIGJnSW1nU2VsZWN0b3IgPSBgWyR7dGhpcy5zbHVycC5iZ0ltZ31dYCxcbiAgICAgICAgICAgIGZpcnN0RWwgPSBmcmFnbWVudC5xdWVyeVNlbGVjdG9yKCcqJylcblxuICAgICAgICBpZiggb3B0aW9ucy5pc1ZpZXcgfHwgZmlyc3RFbC5nZXRBdHRyaWJ1dGUoIHRoaXMuc2x1cnAuYXR0ciApICkgdGhpcy5zbHVycEVsKCBmaXJzdEVsIClcblxuICAgICAgICBBcnJheS5mcm9tKCBmcmFnbWVudC5xdWVyeVNlbGVjdG9yQWxsKCBgJHtzZWxlY3Rvcn0sICR7dmlld1NlbGVjdG9yfSwgJHtpbWdTZWxlY3Rvcn0sICR7YmdJbWdTZWxlY3Rvcn1gICkgKS5mb3JFYWNoKCBlbCA9PiB7XG4gICAgICAgICAgICBpZiggZWwuaGFzQXR0cmlidXRlKCB0aGlzLnNsdXJwLmF0dHIgKSApIHsgdGhpcy5zbHVycEVsKCBlbCApIH1cbiAgICAgICAgICAgIGVsc2UgaWYoIGVsLmhhc0F0dHJpYnV0ZSggdGhpcy5zbHVycC5pbWcgKSApIHJldHVybiB0aGlzLmZhZGVJbkltYWdlKCBlbCApXG4gICAgICAgICAgICBlbHNlIGlmKCBlbC5oYXNBdHRyaWJ1dGUoIHRoaXMuc2x1cnAuYmdJbWcgKSApIHJldHVybiB0aGlzLmxvYWRCZ0ltYWdlKCBlbCApXG4gICAgICAgICAgICBlbHNlIGlmKCBlbC5oYXNBdHRyaWJ1dGUoIHRoaXMuc2x1cnAudmlldyApICkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3Vidmlld0VsZW1lbnRzLnB1c2goIHsgZWwsIHZpZXc6IGVsLmdldEF0dHJpYnV0ZSh0aGlzLnNsdXJwLnZpZXcpLCBuYW1lOiBlbC5nZXRBdHRyaWJ1dGUodGhpcy5zbHVycC5uYW1lKSB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICBcbiAgICAgICAgaWYoIG9wdGlvbnMuc3RvcmVGcmFnbWVudCApIHJldHVybiBPYmplY3QuYXNzaWduKCB0aGlzLCB7IGZyYWdtZW50IH0gKVxuXG4gICAgICAgIHRoaXMuaW5zZXJ0VG9Eb20oIGZyYWdtZW50LCBvcHRpb25zIClcblxuICAgICAgICBpZiggb3B0aW9ucy5yZW5kZXJTdWJ2aWV3cyApIHRoaXMucmVuZGVyU3Vidmlld3MoKVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxufSApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUoIHtcblxuICAgIGFkZChjYWxsYmFjaykge1xuICAgICAgICBpZiggIXRoaXMuY2FsbGJhY2tzLmxlbmd0aCApIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplLmJpbmQodGhpcykgKVxuICAgICAgICB0aGlzLmNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKVxuICAgIH0sXG5cbiAgICBvblJlc2l6ZSgpIHtcbiAgICAgICBpZiggdGhpcy5ydW5uaW5nICkgcmV0dXJuXG5cbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZVxuICAgICAgICBcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCB0aGlzLnJ1bkNhbGxiYWNrcy5iaW5kKHRoaXMpIClcbiAgICAgICAgICAgIDogc2V0VGltZW91dCggdGhpcy5ydW5DYWxsYmFja3MsIDY2KVxuICAgIH0sXG5cbiAgICBydW5DYWxsYmFja3MoKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3MuZmlsdGVyKCBjYWxsYmFjayA9PiBjYWxsYmFjaygpIClcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2UgXG4gICAgfVxuXG59LCB7IGNhbGxiYWNrczogeyB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IFtdIH0sIHJ1bm5pbmc6IHsgd3JpdGFibGU6IHRydWUsIHZhbHVlOiBmYWxzZSB9IH0gKVxuIiwidmFyIE15VmlldyA9IHJlcXVpcmUoJy4vTXlWaWV3JyksXG4gICAgTW9kYWwgPSBmdW5jdGlvbigpIHsgcmV0dXJuIE15Vmlldy5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5NeVZpZXcucHJvdG90eXBlLl8uZXh0ZW5kKCBNb2RhbC5wcm90b3R5cGUsIE15Vmlldy5wcm90b3R5cGUsIHtcblxuICAgIGNoZWNrRm9yRW50ZXIoIGUgKSB7IGlmKCBlLmtleUNvZGUgPT09IDEzICkgdGhpcy5lbWl0Q29uZmlybWF0aW9uKCkgfSxcblxuICAgIGVtaXRDb25maXJtYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVtaXQoICdzdWJtaXQnLCB0aGlzLmdldEZvcm1EYXRhKCkgKVxuICAgIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgJ2NvbmZpcm1CdG4nOiB7IGV2ZW50OiAnY2xpY2snLCBzZWxlY3RvcjogJycsIG1ldGhvZDogJ2VtaXRDb25maXJtYXRpb24nIH1cbiAgICB9LFxuXG4gICAgaGlkZTogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YSA9IHRoaXMuXy5waWNrKCB0aGlzLnRlbXBsYXRlRGF0YSwgdGhpcy50ZW1wbGF0ZURhdGFLZXlzIClcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIubW9kYWwoJ2hpZGUnKVxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnRpdGxlLnRleHQoJycpXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmhlYWRlci5zaG93KClcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuYm9keS5yZW1vdmVDbGFzcygnaGlkZScpLmVtcHR5KClcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuZm9vdGVyLnNob3coKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jYW5jZWxCdG4uc2hvdygpLnRleHQoJ0NhbmNlbCcpXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNsb3NlQnRuLnNob3coKVxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jb25maXJtQnRuLnNob3coKS50ZXh0KCdTYXZlJylcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy4kKGRvY3VtZW50KS5vbiggJ2tleXVwJywgdGhpcy5jaGVja0ZvckVudGVyLmJpbmQodGhpcykgKVxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5vbiggJ2hpZGRlbi5icy5tb2RhbCcsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSggeyByZXNldDogdHJ1ZSB9IClcbiAgICAgICAgICAgIHRoaXMuZW1pdCggJ2hpZGRlbicgKVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoICdzdWJtaXQnIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLm9uKCAnc2hvd24uYnMubW9kYWwnLCAoKSA9PiB7IFxuICAgICAgICAgICAgdmFyIGZpcnN0SW5wdXQgPSB0aGlzLiQoJy5tb2RhbC1ib2R5IGlucHV0OmZpcnN0JylcbiAgICAgICAgICAgIHRoaXMuZW1pdCggJ3Nob3duJyApXG4gICAgICAgICAgICBpZiggZmlyc3RJbnB1dC5sZW5ndGggJiYgKCEgL2RhdGUvLnRlc3QoIGZpcnN0SW5wdXQuYXR0cignaWQnKSApICkgKSBmaXJzdElucHV0LmZvY3VzKClcbiAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2hvdyggb3B0aW9ucyApIHtcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YUtleXMgPSBPYmplY3Qua2V5cyggdGhpcy50ZW1wbGF0ZURhdGEgKVxuXG4gICAgICAgIHZhciBic09wdHMgPSB7IHNob3c6IHRydWUgfVxuXG4gICAgICAgIGlmKCBvcHRpb25zLnRpdGxlICkge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEudGl0bGUudGV4dCggb3B0aW9ucy50aXRsZSApXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5oZWFkZXIuc2hvdygpXG4gICAgICAgIH0gZWxzZSB7IHRoaXMudGVtcGxhdGVEYXRhLmhlYWRlci5oaWRlKCkgfVxuXG4gICAgICAgIGlmKCBvcHRpb25zLmJvZHkgKSB7XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5ib2R5LnJlbW92ZUNsYXNzKCdoaWRlJylcbiAgICAgICAgICAgIG9wdGlvbnMuYm9keS5jaGFyQXQoMCkgPT09ICc8J1xuICAgICAgICAgICAgICAgID8gdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlOiBvcHRpb25zLmJvZHksIGluc2VydGlvbjogeyAkZWw6IHRoaXMudGVtcGxhdGVEYXRhLmJvZHksIG1ldGhvZDogJ2FwcGVuZCcgfSB9IClcbiAgICAgICAgICAgICAgICA6IHRoaXMudGVtcGxhdGVEYXRhLmJvZHkuaHRtbCggb3B0aW9ucy5ib2R5IClcbiAgICAgICAgfSBlbHNlIGlmKCAhb3B0aW9ucy5ib2R5ICYmIHRoaXMudGVtcGxhdGVEYXRhLmJvZHkuY2hpbGRyZW4oKS5sZW5ndGggPT09IDAgKSB7IHRoaXMudGVtcGxhdGVEYXRhLmJvZHkuYWRkQ2xhc3MoJ2hpZGUnKSB9XG5cbiAgICAgICAgaWYoIG9wdGlvbnMuaGlkZUZvb3RlciApIHRoaXMudGVtcGxhdGVEYXRhLmZvb3Rlci5oaWRlKCkgXG5cbiAgICAgICAgaWYoIG9wdGlvbnMuY29uZmlybVRleHQgKSB0aGlzLnRlbXBsYXRlRGF0YS5jb25maXJtQnRuLnRleHQoIG9wdGlvbnMuY29uZmlybVRleHQgKVxuXG4gICAgICAgIGlmKCBvcHRpb25zLmhpZGVDYW5jZWxCdG4gKSB0aGlzLnRlbXBsYXRlRGF0YS5jYW5jZWxCdG4uaGlkZSgpXG4gICAgICAgIGlmKCBvcHRpb25zLmNhbmNlbFRleHQgKSB0aGlzLnRlbXBsYXRlRGF0YS5jYW5jZWxCdG4udGV4dCggb3B0aW9ucy5jYW5jZWxUZXh0IClcblxuICAgICAgICBpZiggb3B0aW9ucy5zdGF0aWMgKSB7XG4gICAgICAgICAgICBic09wdHMuYmFja2Ryb3AgPSAnc3RhdGljJ1xuICAgICAgICAgICAgYnNPcHRzLmtleWJvYXJkID0gZmFsc2VcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNsb3NlQnRuLmhpZGUoKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIubW9kYWwoIGJzT3B0cyApXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9tb2RhbCcpKCByZXF1aXJlKCdoYW5kbGViYXJzJykgKSxcblxuICAgIHVwZGF0ZUNvbnRlbnQ6IGZ1bmN0aW9uKCB1cGRhdGVzICkge1xuICAgICAgICB0aGlzLl8udXBkYXRlcy5lYWNoKCAoIHZhbHVlLCBrZXkgKSA9PiB0aGlzLnRlbXBsYXRlRGF0YVsga2V5IF0uaHRtbCggdmFsdWUgKSApXG4gICAgfVxuXG59ICk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IE1vZGFsKCB7IGNvbnRhaW5lcjogTXlWaWV3LnByb3RvdHlwZS4kKCdib2R5JykgfSApXG4iLCJ2YXIgTGlzdCA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdCcpLFxuICAgIERhdGVTZWxlY3Rpb24gPSBmdW5jdGlvbigpIHsgcmV0dXJuIExpc3QuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuT2JqZWN0LmFzc2lnbiggRGF0ZVNlbGVjdGlvbi5wcm90b3R5cGUsIExpc3QucHJvdG90eXBlLCB7XG5cbiAgICBJdGVtVmlldzogcmVxdWlyZSgnLi9QaWNrdXBEYXRlcycpLFxuXG4gICAgY29sbGVjdGlvbjogeyBjb21wYXJhdG9yOiAnc3RhcnRFcG9jaCcgfSxcblxuICAgIGdldEl0ZW1WaWV3T3B0aW9ucygpIHsgcmV0dXJuIHsgY29udGFpbmVyOiB0aGlzLnRlbXBsYXRlRGF0YS5zaGFyZXMgfSB9LFxuICAgIFxuICAgIGl0ZW1Nb2RlbHMoKSB7IHJldHVybiB0aGlzLnNpZ251cERhdGEuc2hhcmVzLm1vZGVscyB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcblxuICAgICAgICBMaXN0LnByb3RvdHlwZS5wb3N0UmVuZGVyLmNhbGwodGhpcylcblxuICAgICAgICB0aGlzLnNpZ251cERhdGEuc2hhcmVzLm9uKCAnYWRkJywgc2hhcmUgPT4gdGhpcy5pdGVtcy5hZGQoIHNoYXJlICkgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCAncmVtb3ZlJywgc2hhcmUgPT4gdGhpcy5pdGVtcy5yZW1vdmUoIHNoYXJlICkgKVxuXG4gICAgICAgIHRoaXMucHJlVmFsaWRhdGUoKVxuICAgIH0sXG5cbiAgICBwcmVWYWxpZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5nb0JhY2sgPSBmYWxzZVxuXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCggc2hhcmUgPT4ge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGVsaXZlcnkgPSBzaGFyZS5nZXQoJ3NlbGVjdGVkRGVsaXZlcnknKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiggIU51bWJlci5pc0ludGVnZXIoc2VsZWN0ZWREZWxpdmVyeS5kYXlvZndlZWspIHx8ICFzZWxlY3RlZERlbGl2ZXJ5LnN0YXJ0dGltZSB8fCAhc2VsZWN0ZWREZWxpdmVyeS5zdGFydHRpbWUgKSB7XG4gICAgICAgICAgICAgICAgc2hhcmUuc2V0KCB7IHNlbGVjdGVkRGVsaXZlcnk6IHsgfSB9IClcbiAgICAgICAgICAgICAgICB0aGlzLmdvQmFjayA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2VsZWN0aW9uOiB0cnVlLFxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgTGlzdC5wcm90b3R5cGUuc2hvdy5jYWxsKHRoaXMpXG5cbiAgICAgICAgdGhpcy5wcmVWYWxpZGF0ZSgpXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9zaWdudXAvZGF0ZVNlbGVjdGlvbicpLFxuXG4gICAgdmFsaWRhdGUoKSB7XG4gICAgICAgIHZhciB2YWxpZCA9IHRydWUsXG4gICAgICAgICAgICBlcnJvclZpZXdzID0gWyBdLFxuICAgICAgICAgICAgdGFyZ2V0RXJyb3JWaWV3ID0gbnVsbFxuXG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLml0ZW1WaWV3cyApLmZvckVhY2goIGlkID0+IHtcbiAgICAgICAgICAgIGlmKCAhIHRoaXMuaXRlbVZpZXdzW2lkXS52YWxpZCApIHtcbiAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgZXJyb3JWaWV3cy5wdXNoKCB0aGlzLml0ZW1WaWV3c1tpZF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lciApXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtVmlld3NbaWRdLnRlbXBsYXRlRGF0YS5jb250YWluZXIuYWRkQ2xhc3MoJ2hhcy1lcnJvcicpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgICAgICBcbiAgICAgICAgaWYoIGVycm9yVmlld3MubGVuZ3RoICkge1xuICAgICAgICAgICAgdGFyZ2V0RXJyb3JWaWV3ID0gZXJyb3JWaWV3cy5zbGljZSgtMSlbMF1cbiAgICAgICAgICAgIHRoaXMuJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IHRhcmdldEVycm9yVmlldy5vZmZzZXQoKS50b3BcbiAgICAgICAgICAgIH0sIDUwMCApXG4gICAgICAgIH1cblxuICAgICAgICBpZiggdmFsaWQgKSB7XG4gICAgICAgICAgICAvLy5yZWplY3QoIGRlbGl2ZXJ5RGF5ID0+IGRlbGl2ZXJ5RGF5LmdldCgndW5zZWxlY3RhYmxlJykgKVxuXG4gICAgICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goIGl0ZW0gPT4gaXRlbS5zZXQoICdza2lwRGF5cycsXG4gICAgICAgICAgICAgICAgdGhpcy5fKCBpdGVtLmdldCgnZGVsaXZlcnlEYXRlcycpXG4gICAgICAgICAgICAgICAgICAgIC5yZWplY3QoIGRlbGl2ZXJ5RGF5ID0+ICggdGhpcy5pdGVtVmlld3NbIGl0ZW0uaWQgXS5zZWxlY3RlZEl0ZW1zWyBkZWxpdmVyeURheS5pZCBdICkgPyB0cnVlIDogZmFsc2UgKSApXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoIGRlbGl2ZXJ5RGF5ID0+IGRlbGl2ZXJ5RGF5LmlkIClcbiAgICAgICAgICAgICkgKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbGlkXG4gICAgfVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRlU2VsZWN0aW9uXG4iLCJ2YXIgTGlzdCA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdCcpLFxuICAgIERlbGl2ZXJ5ID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIERlbGl2ZXJ5LnByb3RvdHlwZSwgTGlzdC5wcm90b3R5cGUsIHtcblxuICAgIEl0ZW1WaWV3OiByZXF1aXJlKCcuL0RlbGl2ZXJ5T3B0aW9ucycpLFxuXG4gICAgTW9kZWxzOiB7XG4gICAgICAgIERlbGl2ZXJ5Um91dGU6IHJlcXVpcmUoJy4uLy4uL21vZGVscy9EZWxpdmVyeVJvdXRlJyksXG4gICAgfSxcblxuICAgIGNvbGxlY3Rpb246IHsgY29tcGFyYXRvcjogJ3N0YXJ0RXBvY2gnIH0sXG5cbiAgICBnZXRJdGVtVmlld09wdGlvbnMoKSB7IHJldHVybiB7IGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEuc2hhcmVzLCBzaWdudXBEYXRhOiB0aGlzLnNpZ251cERhdGEgfSB9LFxuICAgIFxuICAgIGl0ZW1Nb2RlbHMoKSB7IHJldHVybiB0aGlzLnNpZ251cERhdGEuc2hhcmVzLm1vZGVscyB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgTGlzdC5wcm90b3R5cGUucG9zdFJlbmRlci5jYWxsKHRoaXMpXG5cbiAgICAgICAgdGhpcy5zaWdudXBEYXRhLnNoYXJlc1xuICAgICAgICAgICAgLm9uKCAnYWRkJywgc2hhcmUgPT4gdGhpcy5pdGVtcy5hZGQoIHNoYXJlICkgKVxuICAgICAgICAgICAgLm9uKCAncmVtb3ZlJywgc2hhcmUgPT4gdGhpcy5pdGVtcy5yZW1vdmUoIHNoYXJlICkgKVxuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL2RlbGl2ZXJ5JyksXG5cbiAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgdmVyaWZ5QWRkcmVzczogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC92ZXJpZnlBZGRyZXNzJylcbiAgICB9LFxuXG4gICAgdmFsaWRhdGUoKSB7XG4gICAgICAgIHZhciB2YWxpZCA9IHRydWUsXG4gICAgICAgICAgICBlcnJvclZpZXdzID0gWyBdLFxuICAgICAgICAgICAgdGFyZ2V0RXJyb3JWaWV3ID0gbnVsbCxcbiAgICAgICAgICAgIGhvbWVEZWxpdmVyeVNlbGVjdGVkID0gZmFsc2UsXG4gICAgICAgICAgICBhZGRyZXNzTW9kZWwgPSB0aGlzLnVzZXIuZ2V0KCdhZGRyZXNzTW9kZWwnKSxcbiAgICAgICAgICAgIHBvc3RhbENvZGUgPSAgKCBhZGRyZXNzTW9kZWwgJiYgYWRkcmVzc01vZGVsLnBvc3RhbENvZGUgKSA/IGFkZHJlc3NNb2RlbC5wb3N0YWxDb2RlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGVmZXJyZWQgPSB0aGlzLlEuZGVmZXIoKVxuICAgICAgIFxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5pdGVtVmlld3MgKS5mb3JFYWNoKCBpZCA9PiB7XG4gICAgICAgICAgICBpZiggISB0aGlzLml0ZW1WaWV3c1tpZF0udmFsaWQgKSB7XG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgIGVycm9yVmlld3MucHVzaCggdGhpcy5pdGVtVmlld3NbaWRdLnRlbXBsYXRlRGF0YS5jb250YWluZXIgKVxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbVZpZXdzW2lkXS50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmFkZENsYXNzKCdoYXMtZXJyb3InKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcbiAgICAgICAgICAgXG4gICAgICAgIGlmKCAhIHZhbGlkICkgcmV0dXJuIGZhbHNlIFxuXG4gICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLml0ZW1WaWV3cyApLmZvckVhY2goIGlkID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuZ2V0KCBpZCApLnNldCggJ3NlbGVjdGVkRGVsaXZlcnknLCBPYmplY3QuYXNzaWduKCB7fSwgdGhpcy5pdGVtVmlld3NbaWRdLnNlbGVjdGVkRGVsaXZlcnkgKSApXG4gICAgICAgICAgICBpZiggdGhpcy5pdGVtVmlld3NbaWRdLnNlbGVjdGVkRGVsaXZlcnkuaXNIb21lICkgaG9tZURlbGl2ZXJ5U2VsZWN0ZWQgPSB0cnVlXG4gICAgICAgIH0gKVxuICAgICAgICBcbiAgICAgICAgaWYoIGVycm9yVmlld3MubGVuZ3RoICkge1xuICAgICAgICAgICAgdGFyZ2V0RXJyb3JWaWV3ID0gZXJyb3JWaWV3cy5zbGljZSgtMSlbMF1cbiAgICAgICAgICAgIHRoaXMuJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IHRhcmdldEVycm9yVmlldy5vZmZzZXQoKS50b3BcbiAgICAgICAgICAgIH0sIDUwMCApXG4gICAgICAgIH1cblxuICAgICAgICBpZiggISB2YWxpZCApIHJldHVybiBmYWxzZVxuICAgICAgICBcbiAgICAgICAgaWYoIGhvbWVEZWxpdmVyeVNlbGVjdGVkICYmIHRoaXMudXNlci5nZXQoJ2N1c3RvbUFkZHJlc3MnKSApIHtcbiAgICAgICAgICAgIHRoaXMubW9kYWxWaWV3LnNob3coIHtcbiAgICAgICAgICAgICAgICBib2R5OiB0aGlzLnRlbXBsYXRlcy52ZXJpZnlBZGRyZXNzKCB7IGFkZHJlc3M6IHRoaXMudXNlci5nZXQoJ2FkZHJlc3MnKSwgemlwQ29kZTogcG9zdGFsQ29kZSB9ICksXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdWZXJpZnkgQWRyZXNzJyB9IClcbiAgICAgICAgICAgIC5vbiggJ2hpZGRlbicsICgpID0+IHtcblxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLml0ZW1WaWV3cyApLmZvckVhY2goIGlkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGVsaXZlcnkgPSB0aGlzLml0ZW1zLmdldCggaWQgKS5nZXQoICdzZWxlY3RlZERlbGl2ZXJ5JyApXG4gICAgICAgICAgICAgICAgICAgIGlmKCAhc2VsZWN0ZWREZWxpdmVyeS5kYXlvZndlZWsgfHwgIXNlbGVjdGVkRGVsaXZlcnkuc3RhcnR0aW1lIHx8ICFzZWxlY3RlZERlbGl2ZXJ5LmVuZHRpbWUgKSBkZWZlcnJlZC5yZWplY3QoKVxuICAgICAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpXG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgIC5vbiggJ3N1Ym1pdCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgemlwUm91dGUgPSBuZXcgKCB0aGlzLk1vZGVsLmV4dGVuZCggeyBwYXJzZTogcmVzcG9uc2UgPT4gcmVzcG9uc2VbMF0sIHVybFJvb3Q6IFwiL3ppcGNvZGVyb3V0ZVwiIH0gKSApKCksXG4gICAgICAgICAgICAgICAgICAgIGhvbWVEZWxpdmVyeVJvdXRlID0gbmV3IHRoaXMuTW9kZWxzLkRlbGl2ZXJ5Um91dGUoKSxcbiAgICAgICAgICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXNcblxuICAgICAgICAgICAgICAgIHRoaXMuJCgnI3ppcENvZGVGb3JtR3JvdXAnKS5yZW1vdmVDbGFzcygnaGFzLWVycm9yJylcbiAgICAgICAgICAgICAgICB0aGlzLiQoJyN6aXBDb2RlSGVscEJsb2NrJykuYWRkQ2xhc3MoJ2hpZGUnKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKCAhIHRoaXMuJCgnI3ZlcmlmaWVkWmlwQ29kZScpLnZhbCgpLmxlbmd0aCApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kKCcjemlwQ29kZUZvcm1Hcm91cCcpLmFkZENsYXNzKCdoYXMtZXJyb3InKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQoJyN6aXBDb2RlSGVscEJsb2NrJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLlEoIHppcFJvdXRlLmZldGNoKCB7IGRhdGE6IHsgemlwY29kZTogdGhpcy4kKCcjdmVyaWZpZWRaaXBDb2RlJykudmFsKCkgfSB9ICkgKVxuICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCBPYmplY3Qua2V5cyggemlwUm91dGUuYXR0cmlidXRlcyApLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJCgnI3ppcENvZGVGb3JtR3JvdXAnKS5hZGRDbGFzcygnaGFzLWVycm9yJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJCgnI3ppcENvZGVIZWxwQmxvY2snKS5yZW1vdmVDbGFzcygnaGlkZScpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgfSAgICBcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5RKCBob21lRGVsaXZlcnlSb3V0ZS5zZXQoIHsgaWQ6IHppcFJvdXRlLmdldCgncm91dGVpZCcpIH0gKS5mZXRjaCgpIClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLml0ZW1WaWV3cyApLmZvckVhY2goIGlkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWREZWxpdmVyeSA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLml0ZW1WaWV3c1tpZF0uc2VsZWN0ZWREZWxpdmVyeSwgaG9tZURlbGl2ZXJ5Um91dGUucGljayggWyAnZGF5b2Z3ZWVrJywgJ3N0YXJ0dGltZScsICdlbmR0aW1lJyBdICkgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzLml0ZW1WaWV3c1tpZF0uc2VsZWN0ZWREZWxpdmVyeS5pc0hvbWUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuZ2V0KCBpZCApLnNldCggJ3NlbGVjdGVkRGVsaXZlcnknLCBzZWxlY3RlZERlbGl2ZXJ5IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtVmlld3NbaWRdLnNlbGVjdGVkRGVsaXZlcnkgPSBzZWxlY3RlZERlbGl2ZXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbVZpZXdzW2lkXS5zaG93RmVlZGJhY2soIHRoaXMuaXRlbVZpZXdzW2lkXS5mZWVkYmFjay5ob21lKCBzZWxlY3RlZERlbGl2ZXJ5ICkgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnVzZXIuYXR0cmlidXRlcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuJCgnI3ZlcmlmaWVkQWRkcmVzcycpLnZhbCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NNb2RlbDogT2JqZWN0LmFzc2lnbiggdGhpcy51c2VyLmdldCgnYWRkcmVzc01vZGVsJykgfHwge30gLCB7IHBvc3RhbENvZGU6IHRoaXMuJCgnI3ZlcmlmaWVkWmlwQ29kZScpLnZhbCgpLCB0eXBlczogWyBcInN0cmVldF9hZGRyZXNzXCIgXSAgfSApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUFkZHJlc3M6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUSggdGhpcy4kLmFqYXgoIHsgZGF0YTogSlNPTi5zdHJpbmdpZnkoIHVzZXJBdHRyaWJ1dGVzICksIG1ldGhvZDogXCJQQVRDSFwiLCB1cmw6IFwiL3VzZXJcIiB9ICkgKVxuICAgICAgICAgICAgICAgICAgICB9ICkudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51c2VyLnNldCggdXNlckF0dHJpYnV0ZXMsIHsgc2lsZW50OiB0cnVlIH0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RhbFZpZXcudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5tb2RhbCgnaGlkZScpXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpXG4gICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIC5mYWlsKCBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZS5zdGFjayB8fCBlKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgLmRvbmUoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IERlbGl2ZXJ5XG4iLCJ2YXIgTGlzdEl0ZW0gPSByZXF1aXJlKCcuLi91dGlsL0xpc3RJdGVtJyksXG4gICAgRGVsaXZlcnlPcHRpb24gPSBmdW5jdGlvbigpIHsgcmV0dXJuIExpc3RJdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIERlbGl2ZXJ5T3B0aW9uLnByb3RvdHlwZSwgTGlzdEl0ZW0ucHJvdG90eXBlLCB7XG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL2RlbGl2ZXJ5T3B0aW9uJylcblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gRGVsaXZlcnlPcHRpb25cbiIsInZhciBMaXN0ID0gcmVxdWlyZSgnLi4vdXRpbC9MaXN0JyksXG4gICAgRGVsaXZlcnlPcHRpb25zID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIERlbGl2ZXJ5T3B0aW9ucy5wcm90b3R5cGUsIExpc3QucHJvdG90eXBlLCB7XG5cbiAgICBJdGVtVmlldzogcmVxdWlyZSgnLi9EZWxpdmVyeU9wdGlvbicpLFxuXG4gICAgTW9kZWxzOiB7XG4gICAgICAgIERlbGl2ZXJ5Um91dGU6IHJlcXVpcmUoJy4uLy4uL21vZGVscy9EZWxpdmVyeVJvdXRlJyksXG4gICAgfSxcblxuICAgIFZpZXdzOiB7XG4gICAgICAgIERyb3BvZmZzOiByZXF1aXJlKCcuL0Ryb3BvZmZzJylcbiAgICB9LFxuXG4gICAgZmFybUZlZWRiYWNrKCBtb2RlbCApIHtcbiAgICAgICAgdGhpcy5mYXJtUGlja3VwID0gbmV3ICggdGhpcy5Nb2RlbHMuRGVsaXZlcnlSb3V0ZS5leHRlbmQoIHsgcGFyc2U6IHJlc3BvbnNlID0+IHRoaXMuTW9kZWxzLkRlbGl2ZXJ5Um91dGUucHJvdG90eXBlLnBhcnNlKCByZXNwb25zZVswXSApIH0gKSApKClcbiAgICAgICAgdGhpcy5mYXJtUGlja3VwLmZldGNoKCB7IGRhdGE6IHsgbGFiZWw6ICdmYXJtJyB9IH0gKS5kb25lKCAoKSA9PiB7XG4gICAgICAgICAgICBpZiggT2JqZWN0LmtleXMoIHRoaXMuZmFybVBpY2t1cC5hdHRyaWJ1dGVzICkubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3dGZWVkYmFjayggdGhpcy5mZWVkYmFjay5ub0Zhcm1Sb3V0ZSgpIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zaG93RmVlZGJhY2soIHRoaXMuZmVlZGJhY2suZmFybSggdGhpcy5mYXJtUGlja3VwLmF0dHJpYnV0ZXMgKSApXG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREZWxpdmVyeSA9IE9iamVjdC5hc3NpZ24oIHt9LCB7IGRlbGl2ZXJ5b3B0aW9uaWQ6IG1vZGVsLmlkIH0sIHRoaXMuZmFybVBpY2t1cC5waWNrKCBbICdkYXlvZndlZWsnLCAnc3RhcnR0aW1lJywgJ2VuZHRpbWUnIF0gKSApXG5cbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlXG4gICAgICAgIH0gKVxuICAgIH0sXG4gICAgXG4gICAgZmVlZGJhY2s6IHtcbiAgICAgICAgaG9tZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9ob21lRGVsaXZlcnlGZWVkYmFjaycpLFxuICAgICAgICBmYXJtOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL2Zhcm1QaWNrdXBGZWVkYmFjaycpLFxuICAgICAgICBncm91cDogZnVuY3Rpb24oKSB7IHJldHVybiBcIlBsZWFzZSBzZWxlY3QgYSBkcm9wb2ZmIGxvY2F0aW9uIGJlbG93LlwiIH0sXG4gICAgICAgIGludmFsaWRaaXA6IGZ1bmN0aW9uKCB6aXBjb2RlICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXRpbC5mb3JtYXQoICdQb3N0YWwgQ29kZSBvZiAlcyBpcyBub3QgaW4gb3VyIGRlbGl2ZXJ5IGFyZWEuICBQbGVhc2UgY29udGFjdCB1cyB0byBkaXNjdXNzIG9wdGlvbnMuJywgemlwY29kZSApXG4gICAgICAgIH0sXG4gICAgICAgIG5vRmFybVJvdXRlOiBmdW5jdGlvbigpIHsgcmV0dXJuIFwiVGhlcmUgaXMgY3VycmVudGx5IGFuIGVycm9yIHdpdGggT24tRmFybSBQaWNrdXAgc2VsZWN0aW9uLlwiIH1cbiAgICB9LFxuXG4gICAgZ2V0SXRlbVZpZXdPcHRpb25zKCkgeyByZXR1cm4geyBjb250YWluZXI6IHRoaXMudGVtcGxhdGVEYXRhLm9wdGlvbnMgfSB9LFxuXG4gICAgZ2V0VGVtcGxhdGVPcHRpb25zKCkgeyByZXR1cm4gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzIH0sXG5cbiAgICBncm91cEZlZWRiYWNrKCBkZWxpdmVyeU9wdGlvbiApIHtcbiAgICAgICAgaWYoIHRoaXMuZHJvcG9mZlZpZXcgKSB7XG4gICAgICAgICAgICBpZiggIU9iamVjdC5rZXlzKCB0aGlzLmRyb3BvZmZWaWV3LnNlbGVjdGVkSXRlbXMgKS5sZW5ndGggKSB0aGlzLnNob3dGZWVkYmFjayggdGhpcy5mZWVkYmFjay5ncm91cCgpIClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3BvZmZWaWV3LnRlbXBsYXRlRGF0YS5jb250YWluZXIuc2hvdygpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdyb3VwRHJvcG9mZlByb21pc2UudGhlbiggKCkgPT4ge1xuXG4gICAgICAgICAgICBpZiggIXRoaXMuc2VsZWN0ZWREZWxpdmVyeSB8fCAoIHRoaXMuc2VsZWN0ZWREZWxpdmVyeSAmJiAhdGhpcy5zZWxlY3RlZERlbGl2ZXJ5Lmdyb3VwZHJvcG9mZmlkICkgKSB0aGlzLnNob3dGZWVkYmFjayggdGhpcy5mZWVkYmFjay5ncm91cCgpIClcblxuICAgICAgICAgICAgdGhpcy5kcm9wb2ZmVmlldyA9IG5ldyB0aGlzLlZpZXdzLkRyb3BvZmZzKCB7IGNvbnRhaW5lcjogdGhpcy50ZW1wbGF0ZURhdGEuZHJvcG9mZnMgfSApXG4gICAgICAgICAgICAgICAgLm9uKCAnaXRlbVVuc2VsZWN0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcG9mZlZpZXcuaXRlbVZpZXdzLmZvckVhY2goIHZpZXcgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHZpZXcudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5pcygnOmhpZGRlbicpICkgdmlldy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLnNob3coKVxuICAgICAgICAgICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dGZWVkYmFjayggdGhpcy5mZWVkYmFjay5ncm91cCgpIClcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2UgXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgLm9uKCAnaXRlbVNlbGVjdGVkJywgbW9kZWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRJZCA9IG1vZGVsLmlkXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmdldCgnZ3JvdXBkcm9wb2ZmcycpLmZvckVhY2goIG1vZGVsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBtb2RlbC5pZCAhPT0gc2VsZWN0ZWRJZCApIHRoaXMuZHJvcG9mZlZpZXcuaXRlbVZpZXdzWyBtb2RlbC5pZCBdLnRlbXBsYXRlRGF0YS5jb250YWluZXIuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREZWxpdmVyeSA9IE9iamVjdC5hc3NpZ24oIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBkZWxpdmVyeW9wdGlvbmlkOiBkZWxpdmVyeU9wdGlvbi5pZCwgZ3JvdXBkcm9wb2ZmaWQ6IG1vZGVsLmlkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5waWNrKCBbICdkYXlvZndlZWsnLCAnc3RhcnR0aW1lJywgJ2VuZHRpbWUnIF0gKVxuICAgICAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuZmVlZGJhY2suZW1wdHkoKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWVcbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICAub24oICdpdGVtQWRkZWQnLCBtb2RlbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZERlbGl2ZXJ5ID0gdGhpcy5tb2RlbC5nZXQoJ3NlbGVjdGVkRGVsaXZlcnknKVxuICAgICAgICAgICAgICAgICAgICBpZiggc2VsZWN0ZWREZWxpdmVyeSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMuZHJvcG9mZlZpZXcuaXRlbVZpZXdzICkubGVuZ3RoID09IHRoaXMuZHJvcG9mZlZpZXcuaXRlbXMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3BvZmZWaWV3Lml0ZW1WaWV3c1sgc2VsZWN0ZWREZWxpdmVyeS5ncm91cGRyb3BvZmZpZCBdICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3BvZmZWaWV3LnNlbGVjdEl0ZW0oIHRoaXMuZHJvcG9mZlZpZXcuaXRlbXMuZ2V0KCBzZWxlY3RlZERlbGl2ZXJ5Lmdyb3VwZHJvcG9mZmlkICkgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgIHRoaXMuZHJvcG9mZlZpZXcuaXRlbXMucmVzZXQoIHRoaXMubW9kZWwuZ2V0KCdncm91cGRyb3BvZmZzJykubW9kZWxzIClcblxuICAgICAgICAgICAgaWYoIHRoaXMubW9kZWwuZ2V0KCdncm91cGRyb3BvZmZzJykubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJvcG9mZlZpZXcudGVtcGxhdGVEYXRhLmNvbnRhaW5lci50ZXh0KFwiTm8gYXZhaWxhYmxlIGdyb3VwIGRyb3BvZmYgbG9jYXRpb25zLCBwbGVhc2Ugc2VsZWN0IGFub3RoZXIgb3B0aW9uXCIpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSApXG4gICAgICAgIC5mYWlsKCBlID0+IGNvbnNvbGUubG9nKCBlLnN0YWNrIHx8IGUgKSApXG4gICAgICAgIC5kb25lKClcbiAgICB9LFxuXG4gICAgaG9tZUZlZWRiYWNrKCBkZWxpdmVyeU9wdGlvbiApIHtcbiAgICAgICAgdmFyIGFkZHJlc3NNb2RlbCA9IHRoaXMudXNlci5nZXQoJ2FkZHJlc3NNb2RlbCcpLFxuICAgICAgICAgICAgdXNlclBvc3RhbENvZGUgPSAoIGFkZHJlc3NNb2RlbCApID8gYWRkcmVzc01vZGVsLnBvc3RhbENvZGUgOiB1bmRlZmluZWRcblxuICAgICAgICBpZiggIXVzZXJQb3N0YWxDb2RlICkge1xuXG4gICAgICAgICAgICB0aGlzLnNob3dGZWVkYmFjaygnPGRpdj5CZWNhdXNlIHdlIGNvdWxkIG5vdCBsb29rdXAgeW91ciBhZGRyZXNzLCB3ZSBhcmUgY3VycmVudGx5IHVuYWJsZSB0byBwcm92aWRlIGEgZGVsaXZlcnkgZGF5IGZvciB0aGUgd2VlayBvciB0aW1lLiAgV2Ugd2lsbCB0YWtlIGNhcmUgb2YgdGhpcyBpbiB0aGUgbmV4dCBzdGVwIGJ5IGhhdmluZyB5b3UgdmVyaWZ5IHlvdXIgYWRkcmVzcy48L2Rpdj4nKVxuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGVsaXZlcnkgPSB7IGRlbGl2ZXJ5b3B0aW9uaWQ6IGRlbGl2ZXJ5T3B0aW9uLmlkLCBpc0hvbWU6IHRydWUgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZCA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuemlwUm91dGUgPSBuZXcgKCB0aGlzLk1vZGVsLmV4dGVuZCggeyBwYXJzZTogcmVzcG9uc2UgPT4gcmVzcG9uc2VbMF0sIHVybFJvb3Q6IFwiL3ppcGNvZGVyb3V0ZVwiIH0gKSApKClcbiAgICAgICAgdGhpcy5ob21lRGVsaXZlcnlSb3V0ZSA9IG5ldyB0aGlzLk1vZGVscy5EZWxpdmVyeVJvdXRlKClcblxuICAgICAgICB0aGlzLnppcFJvdXRlXG4gICAgICAgICAgICAuZmV0Y2goIHsgZGF0YTogeyB6aXBjb2RlOiB1c2VyUG9zdGFsQ29kZSB9IH0gKVxuICAgICAgICAgICAgLmZhaWwoIGUgPT4gY29uc29sZS5sb2coIGUuc3RhY2sgfHwgZSApIClcbiAgICAgICAgICAgIC5kb25lKCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoIE9iamVjdC5rZXlzKCB0aGlzLnppcFJvdXRlLmF0dHJpYnV0ZXMgKS5sZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaG93RmVlZGJhY2soIHRoaXMuZmVlZGJhY2suaW52YWxpZFppcC5jYWxsKCB0aGlzLCB1c2VyUG9zdGFsQ29kZSApIClcbiAgICAgICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuaG9tZURlbGl2ZXJ5Um91dGUuc2V0KCB7IGlkOiB0aGlzLnppcFJvdXRlLmdldCgncm91dGVpZCcpIH0gKVxuICAgICAgICAgICAgICAgIC5mZXRjaCgpXG4gICAgICAgICAgICAgICAgLmZhaWwoIGUgPT4gY29uc29sZS5sb2coIGUuc3RhY2sgfHwgZSApIClcbiAgICAgICAgICAgICAgICAuZG9uZSggKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dGZWVkYmFjayggdGhpcy5mZWVkYmFjay5ob21lKCB0aGlzLmhvbWVEZWxpdmVyeVJvdXRlLmF0dHJpYnV0ZXMgKSApXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGVsaXZlcnkgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBkZWxpdmVyeW9wdGlvbmlkOiBkZWxpdmVyeU9wdGlvbi5pZCwgaXNIb21lOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbWVEZWxpdmVyeVJvdXRlLnBpY2soIFsgJ2RheW9md2VlaycsICdzdGFydHRpbWUnLCAnZW5kdGltZScgXSApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciBzaGFyZSA9IHRoaXMubW9kZWxcblxuICAgICAgICB0aGlzLnNlbGVjdGlvbiA9ICdzaW5nbGUnXG5cbiAgICAgICAgTGlzdC5wcm90b3R5cGUucG9zdFJlbmRlci5jYWxsKCB0aGlzIClcblxuICAgICAgICB0aGlzLm9uKCAnaXRlbUFkZGVkJywgbW9kZWwgPT4ge1xuICAgICAgICAgICAgdmFyIHByaWNlID0gcGFyc2VGbG9hdCggbW9kZWwuZ2V0KCdwcmljZScpLnJlcGxhY2UoL1xcJHwsL2csIFwiXCIpICksXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWREZWxpdmVyeSA9IHRoaXMubW9kZWwuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoIHByaWNlID09IDAgKSB0aGlzLml0ZW1WaWV3c1sgbW9kZWwuaWQgXS50ZW1wbGF0ZURhdGEuZGVsaXZlcnlQcmljZS50ZXh0KCBcIk5vIGNoYXJnZVwiIClcbiAgICAgICAgICAgIGVsc2UgaWYoIHByaWNlIDwgMCApIHRoaXMuaXRlbVZpZXdzWyBtb2RlbC5pZCBdLnRlbXBsYXRlRGF0YS5kZWxpdmVyeVByaWNlLnRleHQoIHRoaXMudXRpbC5mb3JtYXQoJ1NhdmUgJXMgcGVyIHdlZWsnLCBtb2RlbC5nZXQoJ3ByaWNlJykucmVwbGFjZSgnLScsJycpICkgKVxuXG4gICAgICAgICAgICBpZiggc2VsZWN0ZWREZWxpdmVyeSAmJiBzZWxlY3RlZERlbGl2ZXJ5LmRlbGl2ZXJ5b3B0aW9uaWQgPT0gbW9kZWwuaWQgKSB0aGlzLnNlbGVjdEl0ZW0oIG1vZGVsIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgc2hhcmUuZ2V0RGVsaXZlcnlPcHRpb25zKClcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHZhciBkZWxpdmVyeU9wdGlvbnMgPSBzaGFyZS5nZXQoJ2RlbGl2ZXJ5b3B0aW9ucycpXG5cbiAgICAgICAgICAgIHRoaXMuaXRlbXMucmVzZXQoIGRlbGl2ZXJ5T3B0aW9ucy5tb2RlbHMgKVxuXG4gICAgICAgICAgICBpZiggZGVsaXZlcnlPcHRpb25zLmxlbmd0aCA9PT0gMCApIHRoaXMudGVtcGxhdGVEYXRhLm9wdGlvbnMudGV4dCgnVGhpcyBzaGFyZSBkb2VzIG5vdCBoYXZlIGRlbGl2ZXJ5IG9wdGlvbnMgYXNzb2NpYXRlZCB3aXRoIGl0LiAgUGxlYXNlIGNvbnRhY3QgUGF0Y2h3b3JrIGFuZCBzaWduIHVwIGZvciB0aGlzIHBhcnRpY3VsYXIgc2hhcmUgYXQgYSBsYXRlciBkYXRlLicpXG4gICAgICAgIH0gKVxuICAgICAgICAuZmFpbCggZSA9PiBjb25zb2xlLmxvZyggZS5zdGFjayB8fCBlICkgKVxuICAgICAgICAuZG9uZSgpXG5cbiAgICAgICAgdGhpcy5vbiggJ2l0ZW1TZWxlY3RlZCcsIG1vZGVsID0+IHtcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnaGFzLWVycm9yJylcbiAgICAgICAgICAgIGlmKCB0aGlzLmRyb3BvZmZWaWV3ICYmIG1vZGVsLmdldCgnbmFtZScpICE9PSAnZ3JvdXAnICkgdGhpcy5kcm9wb2ZmVmlldy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLmhpZGUoKVxuICAgICAgICAgICAgdGhpc1sgdGhpcy51dGlsLmZvcm1hdCgnJXNGZWVkYmFjaycsIG1vZGVsLmdldCgnbmFtZScpICkgXSggbW9kZWwgKSAgICAgICAgXG4gICAgICAgIH0gKVxuICAgICAgICAub24oICdpdGVtVW5zZWxlY3RlZCcsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuZmVlZGJhY2suZW1wdHkoKVxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERlbGl2ZXJ5ID0gbnVsbFxuICAgICAgICAgICAgaWYoIHRoaXMuZHJvcG9mZlZpZXcgKSB0aGlzLmRyb3BvZmZWaWV3LnRlbXBsYXRlRGF0YS5jb250YWluZXIuaGlkZSgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMuZ3JvdXBEcm9wb2ZmUHJvbWlzZSA9IHNoYXJlLmdldEdyb3VwRHJvcG9mZnMoKVxuXG4gICAgICAgIHRoaXMudXNlci5vbiggJ2NoYW5nZTphZGRyZXNzJywgKCkgPT4ge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkSWRzID0gT2JqZWN0LmtleXMoIHRoaXMuc2VsZWN0ZWRJdGVtcyApXG5cbiAgICAgICAgICAgIGlmKCBzZWxlY3RlZElkcy5sZW5ndGggPT09IDAgKSByZXR1cm5cblxuICAgICAgICAgICAgdGhpcy51bnNlbGVjdEl0ZW0oIHRoaXMuaXRlbXMuZ2V0KCBzZWxlY3RlZElkc1swXSApIClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2hvd0ZlZWRiYWNrKCBodG1sICkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5mZWVkYmFjay5odG1sKCBodG1sICkuc2hvdygpXG4gICAgfSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL2RlbGl2ZXJ5T3B0aW9ucycpXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBEZWxpdmVyeU9wdGlvbnNcbiIsInZhciBJdGVtID0gcmVxdWlyZSgnLi4vdXRpbC9MaXN0SXRlbScpLFxuICAgIERyb3BvZmYgPSBmdW5jdGlvbigpIHsgcmV0dXJuIEl0ZW0uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuT2JqZWN0LmFzc2lnbiggRHJvcG9mZi5wcm90b3R5cGUsIEl0ZW0ucHJvdG90eXBlLCB7XG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL2Ryb3BvZmYnKVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBEcm9wb2ZmXG4iLCJ2YXIgTGlzdCA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdCcpLFxuICAgIERyb3BvZmZzID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIERyb3BvZmZzLnByb3RvdHlwZSwgTGlzdC5wcm90b3R5cGUsIHtcblxuICAgIEl0ZW1WaWV3OiByZXF1aXJlKCcuL0Ryb3BvZmYnKSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2VsZWN0aW9uOiAnc2luZ2xlJyxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL2Ryb3BvZmZzJyksXG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3BvZmZzXG4iLCJ2YXIgVmlldyA9IHJlcXVpcmUoJy4uL015VmlldycpLFxuICAgIEZvcm0gPSByZXF1aXJlKCcuLi91dGlsL0Zvcm0nKS5wcm90b3R5cGUsXG4gICAgTWVtYmVySW5mbyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gVmlldy5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBNZW1iZXJJbmZvLnByb3RvdHlwZSwgVmlldy5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgICAgICBcbiAgICBNZW1iZXJGb29kT21pc3Npb246IHJlcXVpcmUoJy4uLy4uL21vZGVscy9NZW1iZXJGb29kT21pc3Npb24nKSxcblxuICAgIGFkZHJlc3NTZWxlY3RlZCgpIHtcbiAgICAgICAgdmFyIHBsYWNlID0gdGhpcy5hZGRyZXNzQXV0b0NvbXBsZXRlLmdldFBsYWNlKClcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5hZGRyZXNzLnZhbCggcGxhY2UuZm9ybWF0dGVkX2FkZHJlc3MgKSBcbiAgICAgICAgdGhpcy5zaG93VmFsaWQoIHRoaXMudGVtcGxhdGVEYXRhLmFkZHJlc3MgKVxuXG4gICAgICAgIHRoaXMudXNlci5zZXQoIHtcbiAgICAgICAgICAgIGFkZHJlc3M6IHBsYWNlLmZvcm1hdHRlZF9hZGRyZXNzLFxuICAgICAgICAgICAgYWRkcmVzc01vZGVsOiB7XG4gICAgICAgICAgICAgICAgcG9zdGFsQ29kZTogdGhpcy5fKCBwbGFjZS5hZGRyZXNzX2NvbXBvbmVudHMgKS5maW5kKCBjb21wb25lbnQgPT4gY29tcG9uZW50LnR5cGVzWzBdID09PSBcInBvc3RhbF9jb2RlXCIgKS5zaG9ydF9uYW1lLFxuICAgICAgICAgICAgICAgIHR5cGVzOiBwbGFjZS50eXBlc1xuICAgICAgICAgICAgfVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgZW1haWxSZWdleDogRm9ybS5lbWFpbFJlZ2V4LFxuXG4gICAgZXZlbnRzOiB7IFxuICAgICAgICAnaW5mb0J0bic6IHsgbWV0aG9kOiAnc2hvd0luZm9Nb2RhbCcgfVxuICAgIH0sXG5cbiAgICBmaWVsZHM6IFsge1xuICAgICAgICBuYW1lOiAnbmFtZScsXG4gICAgICAgIGxhYmVsOiAnTmFtZScsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgZXJyb3I6IFwiTmFtZSBpcyBhIHJlcXVpcmVkIGZpZWxkLlwiLFxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24oIHZhbCApIHsgcmV0dXJuIHRoaXMuJC50cmltKHZhbCkgIT09ICcnIH1cbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdlbWFpbCcsXG4gICAgICAgIGxhYmVsOiAnRW1haWwnLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIGVycm9yOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuXCIsXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiggdmFsICkgeyByZXR1cm4gdGhpcy5lbWFpbFJlZ2V4LnRlc3QodmFsKSB9XG4gICAgfSwge1xuICAgICAgICBuYW1lOiAncGhvbmVudW1iZXInLFxuICAgICAgICBsYWJlbDogJ1Bob25lIE51bWJlcicsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgZXJyb3I6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgcGhvbmUgbnVtYmVyLlwiLFxuICAgICAgICB2YWxpZGF0ZTogdmFsID0+IHZhbC5sZW5ndGggPiA4LFxuICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ2FkZHJlc3MnLFxuICAgICAgICBsYWJlbDogJ0FkZHJlc3MgMScsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgZXJyb3I6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgYWRkcmVzcy5cIixcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gdGhpcy52YWxpZGF0ZUFkZHJlc3MoIHZhbCApIH1cbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdleHRyYWFkZHJlc3MnLFxuICAgICAgICBsYWJlbDogJ0FkZHJlc3MgMicsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgdmFsaWRhdGU6ICgpID0+IHRydWVcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdwYXNzd29yZCcsXG4gICAgICAgIGxhYmVsOiAnUGFzc3dvcmQnLFxuICAgICAgICB0eXBlOiAncGFzc3dvcmQnLFxuICAgICAgICBlcnJvcjogXCJQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IHNpeCBjaGFyYWN0ZXJzLlwiLFxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiB0aGlzLnVzZXIuaXNBZG1pbigpIHx8IHZhbC5sZW5ndGggPiA1IH1cbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdyZXBlYXRwYXNzd29yZCcsXG4gICAgICAgIGxhYmVsOiAnUmVwZWF0IFBhc3N3b3JkJyxcbiAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgZXJyb3I6IFwiUGFzc3dvcmRzIG11c3QgbWF0Y2guXCIsXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiggdmFsICkgeyByZXR1cm4gdGhpcy51c2VyLmlzQWRtaW4oKSB8fCAoIHZhbCA9PT0gdGhpcy50ZW1wbGF0ZURhdGEucGFzc3dvcmQudmFsKCkgKSB9XG4gICAgfSwge1xuICAgICAgICBuYW1lOiAnb21pc3Npb24nLFxuICAgICAgICBsYWJlbDogJ09wdC1vdXQgVmVnZXRhYmxlJyxcbiAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgIGluZm86IHRydWUsXG4gICAgICAgIHZhbGlkYXRlOiAoKSA9PiB0cnVlXG4gICAgfSwge1xuICAgICAgICBuYW1lOiAnaGVhcmQnLFxuICAgICAgICBsYWJlbDogJ0hvdyB5b3UgaGVhcmQgYWJvdXQgdXMnLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHZhbGlkYXRlOiAoKSA9PiB0cnVlXG4gICAgfSBdLFxuXG4gICAgZ2VvbG9jYXRlKCkge1xuICAgICAgICBpZiggbmF2aWdhdG9yLmdlb2xvY2F0aW9uICkge1xuICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbiggcG9zaXRpb24gPT5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRyZXNzQXV0b0NvbXBsZXRlLnNldEJvdW5kcyhcbiAgICAgICAgICAgICAgICAgICAgbmV3IGdvb2dsZS5tYXBzLkNpcmNsZSgge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBwb3NpdGlvbi5jb29yZHMuYWNjdXJhY3kgfSApXG4gICAgICAgICAgICAgICAgICAgIC5nZXRCb3VuZHMoKSApXG5cbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7IHJldHVybiB7IGZpZWxkczogdGhpcy5maWVsZHMgfSB9LFxuXG4gICAgaW5pdEF1dG9jb21wbGV0ZSgpIHtcbiAgICAgICAgdGhpcy5hZGRyZXNzQXV0b0NvbXBsZXRlID0gbmV3IGdvb2dsZS5tYXBzLnBsYWNlcy5BdXRvY29tcGxldGUoIHRoaXMudGVtcGxhdGVEYXRhLmFkZHJlc3MuZ2V0KDApLCB7IHR5cGVzOiBbJ2FkZHJlc3MnXSB9IClcblxuICAgICAgICB0aGlzLmFkZHJlc3NBdXRvQ29tcGxldGUuYWRkTGlzdGVuZXIoICdwbGFjZV9jaGFuZ2VkJywgdGhpcy5hZGRyZXNzU2VsZWN0ZWQuYmluZCh0aGlzKSApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBpZiggdGhpcy51c2VyLmlzQWRtaW4oKSApIHtcbiAgICAgICAgICAgIHRoaXMudmlld3MgPSB7IG1lbWJlclR5cGVhaGVhZDogdGhpcy5mYWN0b3J5LmNyZWF0ZSggJ21lbWJlclR5cGVhaGVhZCcsIE9iamVjdC5hc3NpZ24oIHsgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIuZ2V0KDApLmZpcnN0Q2hpbGQsIG1ldGhvZDogJ2luc2VydEJlZm9yZScgfSB9ICkgKSB9XG4gICAgICAgICAgICB0aGlzLnZpZXdzLm1lbWJlclR5cGVhaGVhZC5mb2N1cygpXG5cbiAgICAgICAgICAgIHRoaXMudmlld3MubWVtYmVyVHlwZWFoZWFkLm9uKCAnY3VzdG9tZXJTZWxlY3RlZCcsIGN1c3RvbWVyID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkQ3VzdG9tZXIgPSBjdXN0b21lclxuICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLm5hbWUudmFsKCBjdXN0b21lci5wZXJzb24uZGF0YS5uYW1lIClcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5lbWFpbC52YWwoXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyLnBlcnNvbi5kYXRhLnNlY29uZGFyeUVtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFsgY3VzdG9tZXIucGVyc29uLmRhdGEuZW1haWwsIGN1c3RvbWVyLnBlcnNvbi5kYXRhLnNlY29uZGFyeUVtYWlsIF0uam9pbignLCAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXN0b21lci5wZXJzb24uZGF0YS5lbWFpbFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5waG9uZW51bWJlci52YWwoIGN1c3RvbWVyLm1lbWJlci5kYXRhLnBob25lbnVtYmVyIClcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5hZGRyZXNzLnZhbCggY3VzdG9tZXIubWVtYmVyLmRhdGEuYWRkcmVzcyApXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuZXh0cmFhZGRyZXNzLnZhbCggY3VzdG9tZXIubWVtYmVyLmRhdGEuZXh0cmFhZGRyZXNzIClcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5oZWFyZC52YWwoIGN1c3RvbWVyLm1lbWJlci5kYXRhLmhlYXJkIClcblxuICAgICAgICAgICAgICAgIHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmdldCggeyBxdWVyeTogeyBtZW1iZXJpZDogY3VzdG9tZXIubWVtYmVyLmRhdGEuaWQgfSB9IClcbiAgICAgICAgICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5NZW1iZXJGb29kT21pc3Npb24uZGF0YS5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXR1bSA9IHRoaXMuTWVtYmVyRm9vZE9taXNzaW9uLmRhdGFbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLkZvb2RPbWlzc2lvbi5Gb29kcy5kYXRhLmZpbmRJbmRleCggZm9vZCA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIGZvb2QucHJvZHVjZWlkID09IGRhdHVtLnByb2R1Y2VpZCAmJiBmb29kLnByb2R1Y2VpZCAhPT0gbnVsbCApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggZm9vZC5wcm9kdWNlZmFtaWx5aWQgPT0gZGF0dW0ucHJvZHVjZWZhbWlseWlkICYmIGRhdHVtLnByb2R1Y2VpZCA9PT0gbnVsbCApIClcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGluZGV4ICE9PSAtMSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb29kRGF0dW0gPSB0aGlzLkZvb2RPbWlzc2lvbi5Gb29kcy5kYXRhWyBpbmRleCBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0dW0ubmFtZSA9IGZvb2REYXR1bS5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Gb29kT21pc3Npb24ubXMuc2V0U2VsZWN0aW9uKCBbIE9iamVjdC5hc3NpZ24oIHt9LCBmb29kRGF0dW0sIHsgaWQ6IGluZGV4IH0gKSBdIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuRm9vZE9taXNzaW9uLmNsZWFyKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIC5jYXRjaCggZSA9PiB7IHRoaXMuVG9hc3Quc2hvd01lc3NhZ2UoICdlcnJvcicsICdFcnJvciByZXRyaWV2aW5nIEZvb2QgT21pc3Npb24gRGF0YScgKTsgdGhpcy5FcnJvciB9IClcbiAgICAgICAgICAgIH0gKTtcbiAgICAgICAgfVxuXG4gICAgICAgICggd2luZG93Lmdvb2dsZSAmJiB3aW5kb3cuZ29vZ2xlLm1hcHMgKSBcbiAgICAgICAgICAgID8gdGhpcy5pbml0QXV0b2NvbXBsZXRlKClcbiAgICAgICAgICAgIDogd2luZG93LmluaXRHTWFwID0gKCkgPT4gdGhpcy5pbml0QXV0b2NvbXBsZXRlKClcblxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5hZGRyZXNzLmF0dHIoICdwbGFjZWhvbGRlcicsICcnIClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuRm9vZE9taXNzaW9uID0gdGhpcy5mYWN0b3J5LmNyZWF0ZSggJ2Zvb2RPbWlzc2lvbicsIHsgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLnRlbXBsYXRlRGF0YS5vbWlzc2lvbi5nZXQoMCksIG1ldGhvZDogJ2FmdGVyJyB9IH0gKVxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLm9taXNzaW9uLnJlbW92ZSgpXG5cbiAgICAgICAgdGhpcy5Gb29kT21pc3Npb24uaW5pdGlhbGl6ZUZvb2RPbWlzc2lvbigpXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5vbWlzc2lvbiA9IHRoaXMuRm9vZE9taXNzaW9uLmdldE1hZ2ljU3VnZ2VzdCgpXG5cbiAgICAgICAgICAgIHRoaXMuZmllbGRzLmZvckVhY2goIGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgICBpZiggdGhpcy51c2VyLmhhcyggZmllbGQubmFtZSApICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YVsgZmllbGQubmFtZSBdLnZhbCggdGhpcy51c2VyLmdldCggZmllbGQubmFtZSApIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgICAgIFxuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIuZmluZCgnZm9ybSBpbnB1dCcpXG4gICAgICAgIC5vbiggJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkZWwgPSBzZWxmLiQodGhpcyksXG4gICAgICAgICAgICAgICAgZmllbGQgPSBzZWxmLl8oIHNlbGYuZmllbGRzICkuZmluZCggZnVuY3Rpb24oIGZpZWxkICkgeyByZXR1cm4gZmllbGQubmFtZSA9PT0gJGVsLmF0dHIoJ2lkJykgfSApXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCBmaWVsZC5uYW1lID09PSAnYWRkcmVzcycgKSB7XG4gICAgICAgICAgICAgICAgaWYoIHNlbGYudGVtcGxhdGVEYXRhLmFkZHJlc3MudmFsKCkgPT09ICcnICkgc2VsZi5zaG93RXJyb3IoICRlbCwgZmllbGQuZXJyb3IgKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBzZWxmLlEuZmNhbGwoIGZpZWxkLnZhbGlkYXRlLmJpbmQoIHNlbGYsICRlbC52YWwoKSApICkudGhlbiggdmFsaWQgPT4ge1xuICAgICAgICAgICAgICAgIGlmKCB2YWxpZCApIHsgc2VsZi5zaG93VmFsaWQoICRlbCApIH1cbiAgICAgICAgICAgICAgICBlbHNlIHsgc2VsZi5zaG93RXJyb3IoICRlbCwgZmllbGQuZXJyb3IgKSB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgICAgIC5vbiggJ2ZvY3VzJywgZnVuY3Rpb24oKSB7IHNlbGYucmVtb3ZlRXJyb3IoIHNlbGYuJCh0aGlzKSApIH0gKVxuXG4gICAgfSxcblxuICAgIHJlbW92ZUVycm9yKCAkZWwgKSB7XG4gICAgICAgICRlbC5wYXJlbnQoKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnaGFzLWVycm9yJylcbiAgICAgICAgJGVsLm5leHQoKS5yZW1vdmVDbGFzcygnaGlkZScpLnJlbW92ZUNsYXNzKCdnbHlwaGljb24tcmVtb3ZlJylcbiAgICAgICAgJGVsLnNpYmxpbmdzKCcuaGVscC1ibG9jaycpLnJlbW92ZSgpXG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2hvd0Vycm9yKCAkZWwsIGVycm9yICkge1xuICAgICAgICB2YXIgZm9ybUdyb3VwID0gJGVsLnBhcmVudCgpLnBhcmVudCgpXG5cbiAgICAgICAgaWYoIGZvcm1Hcm91cC5oYXNDbGFzcyggJ2hhcy1lcnJvcicgKSApIHJldHVyblxuXG4gICAgICAgIGZvcm1Hcm91cC5yZW1vdmVDbGFzcygnaGFzLXN1Y2Nlc3MnKS5hZGRDbGFzcygnaGFzLWZlZWRiYWNrIGhhcy1lcnJvcicpXG4gICAgICAgICRlbC5uZXh0KCkucmVtb3ZlQ2xhc3MoJ2hpZGUnKS5yZW1vdmVDbGFzcygnZ2x5cGhpY29uLW9rJykuYWRkQ2xhc3MoJ2dseXBoaWNvbi1yZW1vdmUnKVxuICAgICAgICAgICAuYWZ0ZXIoIEZvcm0udGVtcGxhdGVzLmZpZWxkRXJyb3IoIHsgZXJyb3I6IGVycm9yIH0gKSApXG4gICAgfSxcblxuICAgIHNob3dJbmZvTW9kYWwoKSB7XG4gICAgICAgIHRoaXMuWGhyKCB7IG1ldGhvZDogJ2dldCcsIHJlc291cmNlOiAnY3NhY3VzdG9taXphdGlvbicgfSApXG4gICAgICAgIC50aGVuKCBkYXRhID0+XG4gICAgICAgICAgICB0aGlzLm1vZGFsVmlldy5zaG93KCB7XG4gICAgICAgICAgICAgICAgYm9keTogdGhpcy50ZW1wbGF0ZXMuY3NhQ3VzdG9taXphdGlvbiggZGF0YVswXSApLFxuICAgICAgICAgICAgICAgIGhpZGVGb290ZXI6IHRydWVcbiAgICAgICAgICAgIH0gKVxuICAgICAgICApXG4gICAgICAgIC5jYXRjaCggZSA9PiBuZXcgdGhpcy5FcnJvcihlKSApXG4gICAgfSxcblxuICAgIHNob3dWYWxpZCggJGVsICkge1xuICAgICAgICAkZWwucGFyZW50KCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2hhcy1lcnJvcicpLmFkZENsYXNzKCdoYXMtZmVlZGJhY2sgaGFzLXN1Y2Nlc3MnKVxuICAgICAgICAkZWwubmV4dCgpLnJlbW92ZUNsYXNzKCdoaWRlJykucmVtb3ZlQ2xhc3MoJ2dseXBoaWNvbi1yZW1vdmUnKS5hZGRDbGFzcygnZ2x5cGhpY29uLW9rJylcbiAgICAgICAgJGVsLnNpYmxpbmdzKCcuaGVscC1ibG9jaycpLnJlbW92ZSgpXG4gICAgfSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvTWVtYmVySW5mbycpLFxuXG4gICAgdGVtcGxhdGVzOiB7XG4gICAgICAgIGNzYUN1c3RvbWl6YXRpb246IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9jc2FDdXN0b21pemF0aW9uJylcbiAgICB9LFxuXG4gICAgdmFsaWRhdGUoKSB7XG4gICAgICAgIHZhciB2YWxpZCA9IHRydWVcbiAgICAgICAgXG4gICAgICAgIGlmKCB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIuZmluZCgnaGFzLWVycm9yJykubGVuZ3RoICkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuUS5hbGwoIHRoaXMuZmllbGRzLm1hcCggZmllbGQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUS53aGVuKCBmaWVsZC52YWxpZGF0ZS5jYWxsKHRoaXMsIHRoaXMudGVtcGxhdGVEYXRhWyBmaWVsZC5uYW1lIF0udmFsKCkgKSApXG4gICAgICAgICAgICAudGhlbiggcmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiggcmVzdWx0ID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dFcnJvciggdGhpcy50ZW1wbGF0ZURhdGFbIGZpZWxkLm5hbWUgXSwgZmllbGQuZXJyb3IgKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXNlci5zZXQoIGZpZWxkLm5hbWUsIHRoaXMudGVtcGxhdGVEYXRhWyBmaWVsZC5uYW1lIF0udmFsKCkgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9ICkgKVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgaWYoIHZhbGlkICYmICghdGhpcy51c2VyLmlzQWRtaW4oKSkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUSggdGhpcy4kLmFqYXgoIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoIHRoaXMudXNlci5hdHRyaWJ1dGVzICksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL3VzZXJcIiB9ICkgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcbiAgICAgICAgLnRoZW4oICgpID0+IHZhbGlkIClcbiAgICAgICAgLmZhaWwoIGUgPT4geyBjb25zb2xlLmxvZyggZS5zdGFjayB8fCBlICk7IHJldHVybiBmYWxzZSB9IClcbiAgICB9LFxuICAgIFxuICAgIHZhbGlkYXRlQWRkcmVzcyggYWRkcmVzcyApIHtcbiAgICAgICAgdmFyIGFkZHJlc3NNb2RlbCwgY3VzdG9tQWRkcmVzc1xuXG4gICAgICAgIGlmKCB0aGlzLiQudHJpbSggYWRkcmVzcyApLmxlbmd0aCA9PT0gMCApIHJldHVybiBmYWxzZVxuXG4gICAgICAgIGFkZHJlc3NNb2RlbCA9IHRoaXMudXNlci5nZXQoJ2FkZHJlc3NNb2RlbCcpXG4gICAgICAgIGN1c3RvbUFkZHJlc3MgPSAoIGFkZHJlc3MgIT09IHRoaXMudXNlci5nZXQoJ2FkZHJlc3MnKSB8fCAhYWRkcmVzc01vZGVsIHx8ICggISB0aGlzLl8oIGFkZHJlc3NNb2RlbC50eXBlcyApLmNvbnRhaW5zKCBcInN0cmVldF9hZGRyZXNzXCIgKSApICkgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXNlci5zZXQoIHsgY3VzdG9tQWRkcmVzczogY3VzdG9tQWRkcmVzcyB9IClcblxuICAgICAgICBpZiggY3VzdG9tQWRkcmVzcyApIHRoaXMudXNlci5zZXQoIHsgYWRkcmVzc01vZGVsOiB7IH0gfSApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gTWVtYmVySW5mb1xuIiwidmFyIExpc3RJdGVtID0gcmVxdWlyZSgnLi4vdXRpbC9MaXN0SXRlbScpLFxuICAgIFBheW1lbnRPcHRpb24gPSBmdW5jdGlvbigpIHsgcmV0dXJuIExpc3RJdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIFBheW1lbnRPcHRpb24ucHJvdG90eXBlLCBMaXN0SXRlbS5wcm90b3R5cGUsIHtcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9zaWdudXAvcGF5bWVudE9wdGlvbicpXG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBheW1lbnRPcHRpb25cbiIsInZhciBMaXN0ID0gcmVxdWlyZSgnLi4vdXRpbC9MaXN0JyksXG4gICAgUGF5bWVudE9wdGlvbnMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIExpc3QuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuT2JqZWN0LmFzc2lnbiggUGF5bWVudE9wdGlvbnMucHJvdG90eXBlLCBMaXN0LnByb3RvdHlwZSwge1xuXG4gICAgSXRlbVZpZXc6IHJlcXVpcmUoJy4vUGF5bWVudE9wdGlvbicpLFxuXG4gICAgaXRlbU1vZGVsczogW1xuICAgICAgICB7IGlkOiAxLCBuYW1lOiAnY2FzaCcsIGxhYmVsOiAnQ2FzaCBvciBDaGVjaycsIG5vdGU6ICdNYWlsIHBheW1lbnQgdG8gUGF0Y2h3b3JrJyB9LFxuICAgICAgICB7IGlkOiAyLCBuYW1lOiAnY2FyZCcsIGxhYmVsOiAnQ3JlZGl0IENhcmQnLCBub3RlOiAnUGF5IG9ubGluZS4nIH1cbiAgICBdLFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICBzZWxlY3Rpb246ICdzaW5nbGUnLFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9zaWdudXAvcGF5bWVudE9wdGlvbnMnKVxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gUGF5bWVudE9wdGlvbnNcbiIsInZhciBMaXN0SXRlbSA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdEl0ZW0nKSxcbiAgICBQaWNrdXBEYXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0SXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBQaWNrdXBEYXRlLnByb3RvdHlwZSwgTGlzdEl0ZW0ucHJvdG90eXBlLCB7XG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL3BpY2t1cERhdGUnKVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBQaWNrdXBEYXRlXG4iLCJ2YXIgTGlzdCA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdCcpLFxuICAgIFBpY2t1cERhdGVzID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIFBpY2t1cERhdGVzLnByb3RvdHlwZSwgTGlzdC5wcm90b3R5cGUsIHtcblxuICAgIEl0ZW1WaWV3OiByZXF1aXJlKCcuL1BpY2t1cERhdGUnKSxcblxuICAgIGdldEl0ZW1WaWV3T3B0aW9ucygpIHsgcmV0dXJuIHsgY29udGFpbmVyOiB0aGlzLnRlbXBsYXRlRGF0YS5kYXRlcyB9IH0sXG5cbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7IHJldHVybiB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMgfSxcblxuICAgIGl0ZW1Nb2RlbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmdldERlbGl2ZXJ5RGF0ZXMoKS5tb2RlbHNcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgdGhpcy52YWxpZCA9IHRydWVcblxuICAgICAgICB0aGlzLm9uKCAnaXRlbVNlbGVjdGVkJywgbW9kZWwgPT4ge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdoYXMtZXJyb3InKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVTaGFyZSgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMub24oICdpdGVtVW5zZWxlY3RlZCcsIG1vZGVsID0+IHRoaXMudXBkYXRlU2hhcmUoKSApXG5cbiAgICAgICAgdGhpcy5vbiggJ2l0ZW1BZGRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmKCB0aGlzLm1vZGVsLmhhcygnc2tpcERheXMnKSAmJlxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuZ2V0KCdza2lwRGF5cycpLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKCB0aGlzLml0ZW1WaWV3cyApLmxlbmd0aCA9PSB0aGlzLml0ZW1zLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KCB7IHNraXBEYXlzOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmdldCgnc2tpcERheXMnKS5maWx0ZXIoIHNraXBEYXlJZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5pdGVtcy5nZXQoIHNraXBEYXlJZCApICkgeyB0aGlzLnVuc2VsZWN0SXRlbSggdGhpcy5pdGVtcy5nZXQoIHNraXBEYXlJZCApICk7IHJldHVybiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5tb2RlbC5vbiggJ2NoYW5nZTpzZWxlY3RlZERlbGl2ZXJ5JywgKCkgPT4gdGhpcy5pdGVtcy5yZXNldCggdGhpcy5pdGVtTW9kZWxzKCkgKSApXG5cblxuICAgICAgICBMaXN0LnByb3RvdHlwZS5wb3N0UmVuZGVyLmNhbGwoIHRoaXMgKVxuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHNlbGVjdGVkOiB0cnVlLFxuXG4gICAgc2VsZWN0aW9uOiAnbXVsdGlTaW1wbGUnLFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9zaWdudXAvcGlja3VwRGF0ZXMnKSxcblxuICAgIHVwZGF0ZVNoYXJlKCkge1xuICAgICAgICB0aGlzLnZhbGlkID0gKCBPYmplY3Qua2V5cyggdGhpcy5zZWxlY3RlZEl0ZW1zICkubGVuZ3RoID09PSAwICkgPyBmYWxzZSA6IHRydWVcbiAgICB9XG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBpY2t1cERhdGVzXG4iLCJ2YXIgTGlzdEl0ZW0gPSByZXF1aXJlKCcuLi91dGlsL0xpc3RJdGVtJyksXG4gICAgU2hhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIExpc3RJdGVtLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIFNoYXJlLnByb3RvdHlwZSwgTGlzdEl0ZW0ucHJvdG90eXBlLCB7XG5cbiAgICBwb3N0UmVuZGVyKCkge1xuICAgICAgICBMaXN0SXRlbS5wcm90b3R5cGUucG9zdFJlbmRlci5jYWxsKHRoaXMpXG5cbiAgICAgICAgdGhpcy5mYWN0b3J5LmNyZWF0ZSggJ3NoYXJlQm94JywgeyBpbnNlcnRpb246IHsgZWw6IHRoaXMudGVtcGxhdGVEYXRhLnNoYXJlQm94LmdldCgwKSB9LCBtb2RlbDogdGhpcy5tb2RlbCB9IClcblxuICAgICAgICBpZiggIXRoaXMudXNlci5pc0FkbWluKCkgJiYgKCAvc3ByaW5nL2kudGVzdCggdGhpcy5tb2RlbC5nZXQoJ25hbWUnKSApIHx8IC9zcHJpbmcvaS50ZXN0KCB0aGlzLm1vZGVsLmdldCgnbGFiZWwnKSApICkgKSB7XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIuYWRkQ2xhc3MoJ2luYWN0aXZlJykub2ZmKCdjbGljaycpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICByZXF1aXJlc0xvZ2luOiBmYWxzZSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL3NoYXJlJylcblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gU2hhcmVcbiIsInZhciBWaWV3ID0gcmVxdWlyZSgnLi4vTXlWaWV3JyksXG4gICAgU2hhcmVPcHRpb24gPSBmdW5jdGlvbigpIHsgcmV0dXJuIFZpZXcuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIH1cblxuT2JqZWN0LmFzc2lnbiggU2hhcmVPcHRpb24ucHJvdG90eXBlLCBWaWV3LnByb3RvdHlwZSwge1xuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdvcHRpb25JY29uJzogeyBtZXRob2Q6ICdzaG93T3B0aW9uSW5mbycgfVxuICAgIH0sXG4gIFxuICAgIGdldFRlbXBsYXRlT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oIHsgfSwgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLCB7IG9wdGlvbnM6IHRoaXMubW9kZWwuZ2V0KCdvcHRpb25zJykubWFwKCBtb2RlbCA9PiBtb2RlbC5hdHRyaWJ1dGVzICkgfSApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVG90YWwoKVxuXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLmlucHV0Lm9uKCAnY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVUb3RhbCgpXG4gICAgICAgICAgICB0aGlzLmVtaXQoICdjaGFuZ2VkJywgdGhpcy50ZW1wbGF0ZURhdGEuaW5wdXQudmFsKCkgKVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICBzaG93T3B0aW9uSW5mbygpIHtcbiAgICAgICAgdGhpcy5tb2RhbFZpZXcuc2hvdygge1xuICAgICAgICAgICAgdGl0bGU6IHRoaXMubW9kZWwuZ2V0KCduYW1lJyksXG4gICAgICAgICAgICBib2R5OiB0aGlzLm1vZGVsLmdldCgnZGVzY3JpcHRpb24nKSxcbiAgICAgICAgICAgIGhpZGVGb290ZXI6IHRydWVcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL3NoYXJlT3B0aW9uJyksXG5cbiAgICB1cGRhdGVUb3RhbCgpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEudG90YWwudGV4dChcbiAgICAgICAgICAgIHRoaXMudXRpbC5mb3JtYXQoICckJXMgcGVyIHdlZWsnLFxuICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoIHRoaXMubW9kZWwuZ2V0KCdvcHRpb25zJykuYXQoIHRoaXMudGVtcGxhdGVEYXRhLmlucHV0LmdldCgwKS5zZWxlY3RlZEluZGV4ICkuZ2V0KCdwcmljZScpLnJlcGxhY2UoL1xcJHwsL2csIFwiXCIpICkudG9GaXhlZCgyKSApIClcbiAgICB9XG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYXJlT3B0aW9uXG4iLCJ2YXIgTGlzdCA9IHJlcXVpcmUoJy4uL3V0aWwvTGlzdCcpLFxuICAgIFNoYXJlT3B0aW9ucyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTGlzdC5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBTaGFyZU9wdGlvbnMucHJvdG90eXBlLCBMaXN0LnByb3RvdHlwZSwge1xuXG4gICAgSXRlbVZpZXc6IHJlcXVpcmUoJy4vU2luZ2xlU2hhcmVPcHRpb25zJyksXG5cbiAgICBjb2xsZWN0aW9uOiB7IGNvbXBhcmF0b3I6ICdzdGFydEVwb2NoJyB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgfSxcblxuICAgIGdldEl0ZW1WaWV3T3B0aW9ucygpIHsgcmV0dXJuIHsgY29udGFpbmVyOiB0aGlzLnRlbXBsYXRlRGF0YS5zaGFyZXMsIHNpZ251cERhdGE6IHRoaXMuc2lnbnVwRGF0YSwgZmFjdG9yeTogdGhpcy5mYWN0b3J5IH0gfSxcbiAgICBcbiAgICBpdGVtTW9kZWxzKCkgeyByZXR1cm4gdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5tb2RlbHMgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIExpc3QucHJvdG90eXBlLnBvc3RSZW5kZXIuY2FsbCh0aGlzKVxuXG4gICAgICAgIHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMub24oICdhZGQnLCBzaGFyZSA9PiB0aGlzLml0ZW1zLmFkZCggc2hhcmUgKSApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oICdyZW1vdmUnLCBzaGFyZSA9PiB0aGlzLml0ZW1zLnJlbW92ZSggc2hhcmUgKSApXG4gICAgfSxcblxuICAgIHJlcXVpcmVzTG9naW46IGZhbHNlLFxuXG4gICAgc2VsZWN0aW9uOiB0cnVlLFxuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9zaWdudXAvc2hhcmVPcHRpb25zJyksXG5cbiAgICB2YWxpZGF0ZSgpIHtcblxuICAgICAgICB0aGlzLnNpZ251cERhdGEuc2hhcmVzLmZvckVhY2goIHNoYXJlID0+IHtcbiAgICAgICAgICAgIHNoYXJlLnNldCggJ3NlbGVjdGVkT3B0aW9ucycsIHNoYXJlLmdldCggJ3NoYXJlb3B0aW9ucycgKS5tYXAoIHNoYXJlT3B0aW9uID0+ICgge1xuICAgICAgICAgICAgICAgIHNoYXJlb3B0aW9uaWQ6IHNoYXJlT3B0aW9uLmlkLFxuICAgICAgICAgICAgICAgIHNoYXJlb3B0aW9ub3B0aW9uaWQ6IHRoaXMuaXRlbVZpZXdzWyBzaGFyZS5pZCBdLml0ZW1WaWV3c1sgc2hhcmVPcHRpb24uaWQgXS50ZW1wbGF0ZURhdGEuaW5wdXQudmFsKClcbiAgICAgICAgICAgIH0gKSApIClcbiAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbn0gKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYXJlT3B0aW9uc1xuIiwidmFyIExpc3QgPSByZXF1aXJlKCcuLi91dGlsL0xpc3QnKSxcbiAgICBTaGFyZVNlbGVjdGlvbiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTGlzdC5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBTaGFyZVNlbGVjdGlvbi5wcm90b3R5cGUsIExpc3QucHJvdG90eXBlLCB7XG5cbiAgICBJdGVtVmlldzogcmVxdWlyZSgnLi9TaGFyZScpLFxuXG4gICAgTW9kZWxzOiB7XG4gICAgICAgIERlbGl2ZXJ5RGF0ZTogcmVxdWlyZSgnLi4vLi4vbW9kZWxzL0RlbGl2ZXJ5RGF0ZScpLFxuICAgICAgICBTaGFyZTogcmVxdWlyZSgnLi4vLi4vbW9kZWxzL1NoYXJlJylcbiAgICB9LFxuXG4gICAgY29sbGVjdGlvbjogeyBjb21wYXJhdG9yOiAnc3RhcnRFcG9jaCcsIG1vZGVsOiByZXF1aXJlKCcuLi8uLi9tb2RlbHMvU2hhcmUnKSwgdXJsOiBcIi9zaGFyZVwiIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgY3NhSW5mb0J0bjogeyBtZXRob2Q6ICdzaG93Q1NBSW5mb1BhZ2VJbk5ld1RhYicgfVxuICAgIH0sXG5cbiAgICBmZXRjaDogeyBkYXRhOiB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIGVuZGRhdGU6IEpTT04uc3RyaW5naWZ5KCB7IG9wZXJhdGlvbjogJz4nLCB2YWx1ZTogcmVxdWlyZSgnbW9tZW50JykoKS5hZGQoIDIsICd3ZWVrcycgKS5mb3JtYXQoJ1lZWVktTU0tREQnKSB9ICksXG4gICAgICAgIHNpZ251cGN1dG9mZjogSlNPTi5zdHJpbmdpZnkoIHsgb3BlcmF0aW9uOiAnPicsIHZhbHVlOiByZXF1aXJlKCdtb21lbnQnKSgpLmZvcm1hdCgnWVlZWS1NTS1ERCcpIH0gKVxuICAgIH0gfSxcblxuICAgIGdldEl0ZW1WaWV3T3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHsgY29udGFpbmVyOiB0aGlzLnRlbXBsYXRlRGF0YS5zaGFyZXMsIGZhY3Rvcnk6IHRoaXMuZmFjdG9yeSB9XG4gICAgfSxcblxuICAgIGlzU2Vhc29uKCBzZWFzb24sIG1vZGVsICkge1xuICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoIHNlYXNvbiwgJ2knIClcblxuICAgICAgICByZXR1cm4gQm9vbGVhbiggcmUudGVzdCggbW9kZWwuZ2V0KCduYW1lJykgKSB8fCByZS50ZXN0KCBtb2RlbC5nZXQoJ2xhYmVsJykgKSApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIExpc3QucHJvdG90eXBlLnBvc3RSZW5kZXIuY2FsbCh0aGlzKVxuXG4gICAgICAgIHRoaXMub24oICdpdGVtU2VsZWN0ZWQnLCBtb2RlbCA9PiB7XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ2hhcy1lcnJvcicpXG4gICAgICAgICAgICBpZiggIXRoaXMudXNlci5pc0FkbWluKCkgJiYgdGhpcy5pc1NlYXNvbiggJ3N1bW1lcicsIG1vZGVsICkgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKCBzaGFyZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzLmlzU2Vhc29uKCAnc3ByaW5nJywgc2hhcmUgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbVZpZXdzW3NoYXJlLmlkXS50ZW1wbGF0ZURhdGEuY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCAnY2xpY2snLCAoKSA9PiB0aGlzLml0ZW1WaWV3c1tzaGFyZS5pZF0uZW1pdCggJ2NsaWNrZWQnLCB0aGlzLml0ZW1WaWV3c1tzaGFyZS5pZF0ubW9kZWwgKSApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5vbiggJ2l0ZW1VbnNlbGVjdGVkJywgbW9kZWwgPT4ge1xuICAgICAgICAgICAgaWYoICF0aGlzLnVzZXIuaXNBZG1pbigpICYmIHRoaXMuaXNTZWFzb24oICdzdW1tZXInLCBtb2RlbCApICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCggc2hhcmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5pc1NlYXNvbiggJ3NwcmluZycsIHNoYXJlICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1WaWV3c1tzaGFyZS5pZF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lci5hZGRDbGFzcygnaW5hY3RpdmUnKS5vZmYoJ2NsaWNrJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5zZWxlY3RJdGVtKCBzaGFyZSApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5zaWdudXBEYXRhLnNoYXJlcyA9IG5ldyAoIHRoaXMuQ29sbGVjdGlvbi5leHRlbmQoIHsgY29tcGFyYXRvcjogJ3N0YXJ0RXBvY2gnIH0gKSApKClcblxuICAgICAgICB0aGlzLml0ZW1zLm9uKCAncmVzZXQnLCAoKSA9PiB7IGlmKCB0aGlzLml0ZW1zLmxlbmd0aCA9PT0gMCApIHJldHVybiB0aGlzLmVtaXQoJ25vU2hhcmVzJykgfSApXG5cbiAgICAgICAgdGhpcy5vbiggJ2luaXRpYWxpemVkJywgKCkgPT5cbiAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCggaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvblNoYXJlID0gdGhpcy5zZXNzaW9uU2hhcmVzLmZpbmQoIHNoYXJlID0+IHNoYXJlLmlkID09PSBpdGVtLmlkIClcbiAgICAgICAgICAgICAgICBpZiggc2Vzc2lvblNoYXJlICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEl0ZW0oIGl0ZW0gKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpZ251cERhdGEuc2hhcmVzLmFkZCggaXRlbSApXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzZXNzaW9uU2hhcmUuc2VsZWN0ZWRPcHRpb25zICkgaXRlbS5zZXQoICdzZWxlY3RlZE9wdGlvbnMnLCBzZXNzaW9uU2hhcmUuc2VsZWN0ZWRPcHRpb25zICkgXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzZXNzaW9uU2hhcmUuc2VsZWN0ZWREZWxpdmVyeSApIGl0ZW0uc2V0KCAnc2VsZWN0ZWREZWxpdmVyeScsIHNlc3Npb25TaGFyZS5zZWxlY3RlZERlbGl2ZXJ5ICkgXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzZXNzaW9uU2hhcmUuc2tpcERheXMgKSB7IGl0ZW0uc2V0KCAnc2tpcERheXMnLCBzZXNzaW9uU2hhcmUuc2tpcERheXMgKSB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgIClcblxuICAgICAgICBpZiggdGhpcy5zZXNzaW9uU2hhcmVzICkge1xuICAgICAgICAgICAgdGhpcy5vbiggJ2l0ZW1BZGRlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiggT2JqZWN0LmtleXMoIHRoaXMuaXRlbVZpZXdzICkubGVuZ3RoID09PSB0aGlzLml0ZW1zLmxlbmd0aCApIHRoaXMuZW1pdCgnaW5pdGlhbGl6ZWQnKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICBzZWxlY3Rpb246IHRydWUsXG5cbiAgICBzaG93Q1NBSW5mb1BhZ2VJbk5ld1RhYigpIHsgd2luZG93Lm9wZW4oJy9jc2EjaG93LWRvLWkta25vdycpIH0sXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9zaGFyZXMnKSxcblxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICB2YXIgcHJldlNoYXJlSWRzID0gdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5tYXAoIHNoYXJlID0+IHNoYXJlLmlkICksXG4gICAgICAgICAgICBzZWxlY3RlZFNoYXJlSWRzID0gT2JqZWN0LmtleXMoIHRoaXMuc2VsZWN0ZWRJdGVtcyApLm1hcCggaWQgPT4gcGFyc2VJbnQoaWQpIClcblxuICAgICAgICBpZiggc2VsZWN0ZWRTaGFyZUlkcy5sZW5ndGggPT09IDAgKSB7IHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lci5hZGRDbGFzcygnaGFzLWVycm9yJyk7IHJldHVybiBmYWxzZSB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLl8oIHByZXZTaGFyZUlkcyApLmRpZmZlcmVuY2UoIHNlbGVjdGVkU2hhcmVJZHMgKS5mb3JFYWNoKCBpZCA9PiB7XG4gICAgICAgICAgICB2YXIgc2hhcmUgPSB0aGlzLml0ZW1zLmdldChpZClcbiAgICAgICAgICAgIHNoYXJlLnVuc2V0KCdzZWxlY3RlZE9wdGlvbnMnKVxuICAgICAgICAgICAgc2hhcmUudW5zZXQoJ3NlbGVjdGVkRGVsaXZlcnknKVxuICAgICAgICAgICAgc2hhcmUudW5zZXQoJ3NraXBEYXlzJylcbiAgICAgICAgICAgIHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMucmVtb3ZlKCBzaGFyZSApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHRoaXMuXyggc2VsZWN0ZWRTaGFyZUlkcyApLmRpZmZlcmVuY2UoIHByZXZTaGFyZUlkcyApLmZvckVhY2goIGlkID0+IHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMuYWRkKCB0aGlzLml0ZW1zLmdldChpZCkgKSApXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gU2hhcmVTZWxlY3Rpb25cbiIsInZhciBMaXN0ID0gcmVxdWlyZSgnLi4vdXRpbC9MaXN0JyksXG4gICAgU2luZ2xlU2hhcmVPcHRpb25zID0gZnVuY3Rpb24oKSB7IHJldHVybiBMaXN0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB9XG5cbk9iamVjdC5hc3NpZ24oIFNpbmdsZVNoYXJlT3B0aW9ucy5wcm90b3R5cGUsIExpc3QucHJvdG90eXBlLCB7XG5cbiAgICBJdGVtVmlldzogcmVxdWlyZSgnLi9TaGFyZU9wdGlvbicpLFxuXG4gICAgZ2V0SXRlbVZpZXdPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLnRlbXBsYXRlRGF0YS5vcHRpb25zLFxuICAgICAgICAgICAgc2hhcmU6IHRoaXMubW9kZWxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7IHJldHVybiB0aGlzLm1vZGVsLmF0dHJpYnV0ZXMgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgc2hhcmUgPSB0aGlzLm1vZGVsXG4gICAgICAgIFxuICAgICAgICBMaXN0LnByb3RvdHlwZS5wb3N0UmVuZGVyLmNhbGwoIHRoaXMgKVxuXG4gICAgICAgIHRoaXMub24oICdpdGVtQWRkZWQnLCBzaGFyZU9wdGlvbiA9PiB7XG4gICAgICAgICAgICB0aGlzLml0ZW1WaWV3c1sgc2hhcmVPcHRpb24uaWQgXS5vbiggJ2NoYW5nZWQnLCAoKSA9PiB0aGlzLnVwZGF0ZVRvdGFsKCkgKVxuICAgICAgICAgICAgaWYoIHNoYXJlLmdldCgnc2VsZWN0ZWRPcHRpb25zJykgKSB7XG4gICAgICAgICAgICAgICAgc2hhcmUuZ2V0KCdzZWxlY3RlZE9wdGlvbnMnKS5mb3JFYWNoKCBzZWxlY3RlZE9wdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCBzZWxlY3RlZE9wdGlvbi5zaGFyZW9wdGlvbmlkID09IHNoYXJlT3B0aW9uLmlkICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtVmlld3NbIHNoYXJlT3B0aW9uLmlkIF0udGVtcGxhdGVEYXRhLmlucHV0LnZhbCggc2VsZWN0ZWRPcHRpb24uc2hhcmVvcHRpb25vcHRpb25pZCApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCBPYmplY3Qua2V5cyggdGhpcy5pdGVtVmlld3MgKS5sZW5ndGggPT0gdGhpcy5pdGVtcy5sZW5ndGggKSB0aGlzLnVwZGF0ZVRvdGFsKClcbiAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5mYWN0b3J5LmNyZWF0ZSggJ3NoYXJlQm94JywgeyBpbnNlcnRpb246IHsgZWw6IHRoaXMudGVtcGxhdGVEYXRhLnNoYXJlQm94LmdldCgwKSB9LCBtb2RlbDogc2hhcmUgfSApXG5cbiAgICAgICAgLy9UT0RPOiBXcml0ZSBVSSB3aGVuIG5vIG9wdGlvbnMgZXhpc3QuXG4gICAgICAgIHRoaXMubW9kZWwuZ2V0U2hhcmVPcHRpb25zKClcbiAgICAgICAgICAgIC50aGVuKCAoKSA9PiBzaGFyZS5nZXQoJ3NoYXJlb3B0aW9ucycpLmZvckVhY2goIHNoYXJlb3B0aW9uID0+IHRoaXMuaXRlbXMuYWRkKCBzaGFyZW9wdGlvbiApICkgKVxuICAgICAgICAgICAgLmZhaWwoIGUgPT4gY29uc29sZS5sb2coIGUuc3RhY2sgfHwgZSApIClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NpZ251cC9zaW5nbGVTaGFyZU9wdGlvbnMnKSxcblxuICAgIHVwZGF0ZVRvdGFsKCkge1xuICAgICAgICB2YXIgdG90YWwgPVxuICAgICAgICAgICAgdGhpcy5pdGVtcy5tYXAoIHNoYXJlT3B0aW9uID0+XG4gICAgICAgICAgICAgICAgcGFyc2VGbG9hdCggc2hhcmVPcHRpb24uZ2V0KCdvcHRpb25zJykuZ2V0KCB0aGlzLml0ZW1WaWV3c1sgc2hhcmVPcHRpb24uaWQgXS50ZW1wbGF0ZURhdGEuaW5wdXQudmFsKCkgKS5nZXQoJ3ByaWNlJykucmVwbGFjZSgvXFwkfCwvZywgXCJcIikgKSApXG4gICAgICAgICAgICAucmVkdWNlKCAoIGEsIGIgKSA9PiBhICsgYiApLnRvRml4ZWQoMikgXG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEudG90YWwudGV4dCggdGhpcy51dGlsLmZvcm1hdCggJyQlcyBwZXIgd2VlaycsIHRvdGFsICkgKVxuICAgIH1cblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gU2luZ2xlU2hhcmVPcHRpb25zXG4iLCJ2YXIgVmlldyA9IHJlcXVpcmUoJy4uL015VmlldycpLFxuICAgIEZvcm0gPSByZXF1aXJlKCcuLi91dGlsL0Zvcm0nKS5wcm90b3R5cGUsXG4gICAgU3VtbWFyeSA9IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgXG4gICAgICAgIHdpbmRvdy5zcGlubmVyID0gdGhpcy5zcGlubmVyID0gbmV3IHRoaXMuU3Bpbm5lcigge1xuICAgICAgICAgICAgY29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgIGxpbmVzOiA3LFxuICAgICAgICAgICAgbGVuZ3RoOiAyLFxuICAgICAgICAgICAgcmFkaXVzOiAxNCxcbiAgICAgICAgICAgIHNjYWxlOiAwLjVcbiAgICAgICAgfSApIFxuXG4gICAgICAgIHJldHVybiBWaWV3LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKVxuICAgIH1cblxuT2JqZWN0LmFzc2lnbiggU3VtbWFyeS5wcm90b3R5cGUsIFZpZXcucHJvdG90eXBlLCB7XG5cbiAgICBEYXlPZldlZWtNYXA6IHJlcXVpcmUoJy4uLy4uL21vZGVscy9EZWxpdmVyeVJvdXRlJykucHJvdG90eXBlLmRheU9mV2Vla01hcCxcblxuICAgIENvbnRhY3RJbmZvOiByZXF1aXJlKCcuLi8uLi9tb2RlbHMvQ29udGFjdEluZm8nKSxcblxuICAgIFNwaW5uZXI6IHJlcXVpcmUoJy4uLy4uL3BsdWdpbnMvc3Bpbm5lci5qcycpLFxuXG4gICAgYnVpbGRSZXF1ZXN0KCkge1xuICAgICAgICBjb25zdCBhZGRyZXNzTW9kZWwgPSB0aGlzLnVzZXIuZ2V0KCdhZGRyZXNzTW9kZWwnKVxuXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSgge1xuICAgICAgICAgICAgbWVtYmVyOiBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgIHRoaXMudXNlci5waWNrKCBbICduYW1lJywgJ2VtYWlsJywgJ3Bob25lbnVtYmVyJywgJ3Bhc3N3b3JkJywgJ3JlcGVhdHBhc3N3b3JkJywgJ2FkZHJlc3MnLCAnZXh0cmFhZGRyZXNzJywgJ2hlYXJkJywgJ29taXNzaW9uJyBdICksXG4gICAgICAgICAgICAgICAgeyB6aXBjb2RlOiAoIGFkZHJlc3NNb2RlbCAmJiBhZGRyZXNzTW9kZWwucG9zdGFsQ29kZSApID8gYWRkcmVzc01vZGVsLnBvc3RhbENvZGUgOiAnJyB9ICksXG4gICAgICAgICAgICBwYXltZW50OiAoIHRoaXMucGF5bWVudFNlbGVjdGVkID09PSAnY2FyZCcgKSA/IHRoaXMuZ2V0Rm9ybURhdGEoKSA6IHt9LFxuICAgICAgICAgICAgc2hhcmVzOiB0aGlzLmJ1aWxkU2hhcmVzKCksXG4gICAgICAgICAgICB0b3RhbDogKCB0aGlzLmZlZSApID8gdGhpcy5ncmFuZFRvdGFsUGx1c0ZlZSA6IHRoaXMuZ3JhbmRUb3RhbCxcbiAgICAgICAgICAgIGlzQWRtaW46IHRoaXMudXNlci5pc0FkbWluKCksXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBidWlsZFNoYXJlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMubWFwKCBzaGFyZSA9PiB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRXZWVrcyA9IHNoYXJlLmdldCgnc2VsZWN0ZWREYXRlcycpLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBza2lwRGF5cyA9IHNoYXJlLmdldCgnc2tpcERheXMnKSxcbiAgICAgICAgICAgICAgICBza2lwRGF5c1RvdGFsID0gKCBza2lwRGF5cyApID8gc2tpcERheXMubGVuZ3RoIDogMFxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiBzaGFyZS5pZCxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLmZvcm1hdCgnRnJvbSAlcyB0byAlcyB5b3Ugd2lsbCBiZSByZWNlaXZpbmcgZnJlc2ggZm9vZCBmb3IgJWQgb3V0IG9mICVkIHdlZWtzLicsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFyZS5nZXQoJ2h1bWFuU3RhcnRkYXRlJyksIHNoYXJlLmdldCgnaHVtYW5FbmRkYXRlJyksIHNlbGVjdGVkV2Vla3MsIHNlbGVjdGVkV2Vla3MgKyBza2lwRGF5c1RvdGFsKSxcbiAgICAgICAgICAgICAgICBsYWJlbDogc2hhcmUuZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHNoYXJlLmdldCgnc2VsZWN0ZWRPcHRpb25zJyksXG4gICAgICAgICAgICAgICAgZGVsaXZlcnk6IHRoaXMuXyggc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JykgKS5waWNrKCBbICdkZWxpdmVyeW9wdGlvbmlkJywgJ2dyb3VwZHJvcG9mZmlkJywgJ2Rlc2NyaXB0aW9uJyBdICksXG4gICAgICAgICAgICAgICAgc2tpcERheXM6ICggc2tpcERheXMgKSA/IHNraXBEYXlzLm1hcCggc2tpcERheUlkID0+IHNoYXJlLmdldCgnZGVsaXZlcnlEYXRlcycpLmdldChza2lwRGF5SWQpLmdldCgnZGF0ZScpICkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdG90YWw6IHNoYXJlLmdldCgndG90YWwnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IClcbiAgICB9LFxuXG4gICAgY2FyZFBheW1lbnRTZWxlY3RlZCgpIHtcbiAgICAgICAgdGhpcy5zaWdudXBIYW5kbGVyID0gKCkgPT4geyBpZiggdGhpcy52YWxpZGF0ZUNhcmRJbmZvKCkgKSB0aGlzLnNpZ251cCgpIH1cblxuICAgICAgICB0aGlzLmZlZSA9IGZhbHNlXG4gICAgICAgIHRoaXMucGF5bWVudFNlbGVjdGVkID0gJ2NhcmQnXG4gICAgICAgIHRoaXMudXBkYXRlR3JhbmRUb3RhbCgpXG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEucGF5bWVudEZvcm0ucmVtb3ZlQ2xhc3MoJ2hpZGUnKVxuXG4gICAgICAgIHRoaXMuZW5hYmxlU2lnbnVwQnRuKClcbiAgICB9LFxuXG4gICAgY2FzaFBheW1lbnRTZWxlY3RlZCgpIHtcbiAgICAgICAgdGhpcy5zaWdudXBIYW5kbGVyID0gKCkgPT4gdGhpcy5zaWdudXAoKVxuXG4gICAgICAgIHRoaXMuZmVlID0gZmFsc2VcbiAgICAgICAgdGhpcy5wYXltZW50U2VsZWN0ZWQgPSAnY2FzaCdcblxuICAgICAgICB0aGlzLmVuYWJsZVNpZ251cEJ0bigpXG4gICAgfSxcblxuICAgIGRpc2FibGVTaWdudXBCdG4oKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnNpZ251cEJ0blxuICAgICAgICAgICAgLmFkZENsYXNzKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2J0bi1zdWNjZXNzJylcbiAgICAgICAgICAgIC5vZmYoICdjbGljaycgKVxuICAgIH0sXG5cbiAgICBlbmFibGVTaWdudXBCdG4oKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnNpZ251cEJ0blxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2J0bi1zdWNjZXNzJylcbiAgICAgICAgICAgIC5vZmYoICdjbGljaycgKVxuICAgICAgICAgICAgLm9uZSggJ2NsaWNrJywgdGhpcy5zaWdudXBIYW5kbGVyIClcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdwYXltZW50Rm9ybSc6IFtcbiAgICAgICAgICAgIHsgZXZlbnQ6ICdibHVyJywgJ3NlbGVjdG9yJzogJ2lucHV0JywgbWV0aG9kOiAnb25JbnB1dEJsdXInIH0sXG4gICAgICAgICAgICB7IGV2ZW50OiAnZm9jdXMnLCAnc2VsZWN0b3InOiAnaW5wdXQnLCBtZXRob2Q6ICdvbklucHV0Rm9jdXMnIH1cbiAgICAgICAgXVxuICAgIH0sXG5cbiAgICBmaWVsZHM6IHtcbiAgICAgICAgbnVtYmVyOiB7XG4gICAgICAgICAgICBlcnJvcjogXCJFbnRlciBhIGNhcmQgbnVtYmVyXCIsXG4gICAgICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24oIHZhbCApIHsgcmV0dXJuIHRoaXMuJC50cmltKHZhbCkubGVuZ3RoID4gMCB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhwX21vbnRoXCI6IHtcbiAgICAgICAgICAgIGVycm9yOiAnRW50ZXIgdGhlIG1vbnRoIGluIFwiTU1cIiBmb3JtYXQnLFxuICAgICAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKCB2YWwgKSB7IHJldHVybiB2YWwubGVuZ3RoID09PSAyIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJleHBfeWVhclwiOiB7XG4gICAgICAgICAgICBlcnJvcjogJ0VudGVyIHRoZSB5ZWFyIGluIFwiWVlZWVwiIGZvcm1hdCcsXG4gICAgICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24oIHZhbCApIHsgcmV0dXJuIHZhbC5sZW5ndGggPT09IDQgfVxuICAgICAgICB9LFxuICAgICAgICBjdmM6IHtcbiAgICAgICAgICAgIGVycm9yOiBcIkVudGVyIGEgY3ZjIG51bWJlclwiLFxuICAgICAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKCB2YWwgKSB7IHJldHVybiB0aGlzLiQudHJpbSh2YWwpLmxlbmd0aCA+IDAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldFRlbXBsYXRlT3B0aW9ucygpIHtcbiAgICAgICAgdmFyIHNwYWNlVHdvVGFiID0gXCJcXHJcXG5cXHRcXHRcIlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGFpbmVyQ2xhc3M6IHRoaXMuY29udGFpbmVyQ2xhc3MsXG4gICAgICAgICAgICBzaGFyZXM6IHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMubWFwKCBzaGFyZSA9PiB7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWREZWxpdmVyeSA9IHNoYXJlLmdldCgnZGVsaXZlcnlvcHRpb25zJykuZ2V0KCBzaGFyZS5nZXQoJ3NlbGVjdGVkRGVsaXZlcnknKS5kZWxpdmVyeW9wdGlvbmlkICksXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwRHJvcG9mZiA9ICggc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JykuZ3JvdXBkcm9wb2ZmaWQgKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzaGFyZS5nZXQoJ2dyb3VwZHJvcG9mZnMnKS5nZXQoc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JykuZ3JvdXBkcm9wb2ZmaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0aW1lcyA9ICggZ3JvdXBEcm9wb2ZmIClcbiAgICAgICAgICAgICAgICAgICAgPyBncm91cERyb3BvZmYucGljayggWyAnc3RhcnR0aW1lJywgJ2VuZHRpbWUnIF0gKVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuXyggc2hhcmUuZ2V0KCdzZWxlY3RlZERlbGl2ZXJ5JykgKS5waWNrKCBbICdzdGFydHRpbWUnLCAnZW5kdGltZScgXSApLFxuICAgICAgICAgICAgICAgIHNoYXJlT3B0aW9uV2Vla2x5VG90YWwgPSBzaGFyZS5nZXQoJ3NlbGVjdGVkT3B0aW9ucycpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoIHNlbGVjdGVkT3B0aW9uID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KCBzaGFyZS5nZXQoJ3NoYXJlb3B0aW9ucycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXQoIHNlbGVjdGVkT3B0aW9uLnNoYXJlb3B0aW9uaWQgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KCAnb3B0aW9ucycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KCBzZWxlY3RlZE9wdGlvbi5zaGFyZW9wdGlvbm9wdGlvbmlkIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldCgncHJpY2UnKS5yZXBsYWNlKC9cXCR8LC9nLCBcIlwiKSApIClcbiAgICAgICAgICAgICAgICAgICAgLnJlZHVjZSggKCBhLCBiICkgPT4gYSArIGIgKSxcbiAgICAgICAgICAgICAgICB3ZWVrbHlUb3RhbCA9ICBzaGFyZU9wdGlvbldlZWtseVRvdGFsICsgcGFyc2VGbG9hdCggc2VsZWN0ZWREZWxpdmVyeS5nZXQoJ3ByaWNlJykucmVwbGFjZSgvXFwkfCwvZyxcIlwiKSApLFxuICAgICAgICAgICAgICAgIGFkZHJlc3MgPSAoIHNlbGVjdGVkRGVsaXZlcnkuZ2V0KCduYW1lJykgPT09ICdob21lJyApXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy51c2VyLmdldCgnYWRkcmVzcycpXG4gICAgICAgICAgICAgICAgICAgIDogKCBncm91cERyb3BvZmYgKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBncm91cERyb3BvZmYuZ2V0KCdhZGRyZXNzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5Db250YWN0SW5mby5kYXRhLmZhcm1waWNrdXBcblxuICAgICAgICAgICAgICAgIHNoYXJlLnNldCgge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZERlbGl2ZXJ5OiBPYmplY3QuYXNzaWduKCBzaGFyZS5nZXQoJ3NlbGVjdGVkRGVsaXZlcnknKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLmZvcm1hdCgnRGVsaXZlcnk6JXNNZXRob2Q6ICVzJXNEYXkvVGltZTogJXNzICVzLSVzJXNQbGFjZTogJXMlc0Nvc3Q6ICVzIHBlciB3ZWVrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2VUd29UYWIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRGVsaXZlcnkuZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFjZVR3b1RhYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmUuZGF5T2ZXZWVrTWFwWyBzaGFyZS5nZXQoJ3NlbGVjdGVkRGVsaXZlcnknKS5kYXlvZndlZWsgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXMuc3RhcnR0aW1lLCB0aW1lcy5lbmR0aW1lLCBzcGFjZVR3b1RhYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcywgc3BhY2VUd29UYWIsIHNlbGVjdGVkRGVsaXZlcnkuZ2V0KCdwcmljZScpICkgfSApLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbDogd2Vla2x5VG90YWwgKiBzaGFyZS5nZXQoJ3NlbGVjdGVkRGF0ZXMnKS5sZW5ndGhcbiAgICAgICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgICAgIHNoYXJlLnNldCggJ3NlbGVjdGVkT3B0aW9ucycsIHNoYXJlLmdldCggJ3NlbGVjdGVkT3B0aW9ucycgKS5tYXAoIHNlbGVjdGVkT3B0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlT3B0aW9uID0gc2hhcmUuZ2V0KCdzaGFyZW9wdGlvbnMnKS5nZXQoIHNlbGVjdGVkT3B0aW9uLnNoYXJlb3B0aW9uaWQgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlT3B0aW9uT3B0aW9uID0gc2hhcmVPcHRpb24uZ2V0KCdvcHRpb25zJykuZ2V0KCBzZWxlY3RlZE9wdGlvbi5zaGFyZW9wdGlvbm9wdGlvbmlkIClcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbiggc2VsZWN0ZWRPcHRpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLnV0aWwuZm9ybWF0KCAnJXM6ICVzICVzIC0tICVzIHBlciB3ZWVrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZU9wdGlvbi5nZXQoJ25hbWUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZU9wdGlvbk9wdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVPcHRpb25PcHRpb24uZ2V0KCd1bml0JykgfHwgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZU9wdGlvbk9wdGlvbi5nZXQoJ3ByaWNlJykgKVxuICAgICAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICB9ICkgKVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVCb3g6IHRoaXMudGVtcGxhdGVzLlNoYXJlQm94KCBzaGFyZS5hdHRyaWJ1dGVzICksXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uczogc2hhcmUuZ2V0KCdzZWxlY3RlZE9wdGlvbnMnKS5tYXAoIHNlbGVjdGVkT3B0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZU9wdGlvbiA9IHNoYXJlLmdldCgnc2hhcmVvcHRpb25zJykuZ2V0KCBzZWxlY3RlZE9wdGlvbi5zaGFyZW9wdGlvbmlkICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVPcHRpb25PcHRpb24gPSBzaGFyZU9wdGlvbi5nZXQoJ29wdGlvbnMnKS5nZXQoIHNlbGVjdGVkT3B0aW9uLnNoYXJlb3B0aW9ub3B0aW9uaWQgKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbk5hbWU6IHNoYXJlT3B0aW9uLmdldCgnbmFtZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlOiBzaGFyZU9wdGlvbk9wdGlvbi5nZXQoJ3ByaWNlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb25MYWJlbDogc2hhcmVPcHRpb25PcHRpb24uZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6IHNoYXJlT3B0aW9uT3B0aW9uLmdldCgndW5pdCcpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gKSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWREZWxpdmVyeToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsaXZlcnlUeXBlOiBzZWxlY3RlZERlbGl2ZXJ5LmdldCgnbGFiZWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlZWtseUNvc3Q6IHNlbGVjdGVkRGVsaXZlcnkuZ2V0KCdwcmljZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBkcm9wb2ZmOiAoIGdyb3VwRHJvcG9mZiApID8gZ3JvdXBEcm9wb2ZmLmdldCgnbGFiZWwnKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6ICggZ3JvdXBEcm9wb2ZmIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdyb3VwRHJvcG9mZi5nZXQoJ3N0cmVldCcpICsgJywgJyArIGdyb3VwRHJvcG9mZi5nZXQoJ2NpdHlTdGF0ZVppcCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoIHNlbGVjdGVkRGVsaXZlcnkuZ2V0KCduYW1lJykgPT09ICdmYXJtJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5Db250YWN0SW5mby5kYXRhLmZhcm1waWNrdXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnVzZXIuZ2V0KCdhZGRyZXNzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlPZldlZWs6IHRoaXMuRGF5T2ZXZWVrTWFwWyBzaGFyZS5nZXQoJ3NlbGVjdGVkRGVsaXZlcnknKS5kYXlvZndlZWsgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0dGltZTogdGltZXMuc3RhcnR0aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kdGltZTogdGltZXMuZW5kdGltZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB3ZWVrbHlQcmljZTogdGhpcy51dGlsLmZvcm1hdCggJyQlcycsIHdlZWtseVRvdGFsLnRvRml4ZWQoMikgKSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWREYXRlczogc2hhcmUuZ2V0KCdzZWxlY3RlZERhdGVzJykubWFwKCBkYXRlID0+IHRoaXMudGVtcGxhdGVzLlBpY2t1cERhdGUoIE9iamVjdC5hc3NpZ24oIHsgc2VsZWN0ZWQ6IHRydWUgfSwgZGF0ZS5hdHRyaWJ1dGVzICkgKSApLFxuICAgICAgICAgICAgICAgICAgICB3ZWVrc1NlbGVjdGVkOiBzaGFyZS5nZXQoJ3NlbGVjdGVkRGF0ZXMnKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIHNraXBEYXlzOiAoIHNoYXJlLmhhcygnc2tpcERheXMnKSApXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNoYXJlLmdldCgnc2tpcERheXMnKS5tYXAoIHNraXBEYXlJZCA9PiB0aGlzLnRlbXBsYXRlcy5QaWNrdXBEYXRlKCBzaGFyZS5nZXQoJ2RlbGl2ZXJ5RGF0ZXMnKS5nZXQoc2tpcERheUlkKS5hdHRyaWJ1dGVzICkgKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRoaXMudXRpbC5mb3JtYXQoICckJXMnLCBzaGFyZS5nZXQoJ3RvdGFsJykudG9GaXhlZCgyKSApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSApIFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uSW5wdXRCbHVyKCBlICkge1xuICAgICAgICB2YXIgJGVsID0gdGhpcy4kKCBlLmN1cnJlbnRUYXJnZXQgKSxcbiAgICAgICAgICAgIGZpZWxkID0gdGhpcy5maWVsZHNbICRlbC5hdHRyKCdpZCcpIF0sXG4gICAgICAgICAgICByZXN1bHRcblxuICAgICAgICByZXN1bHQgPSBmaWVsZC52YWxpZGF0ZS5jYWxsKCB0aGlzLCAkZWwudmFsKCkgKVxuXG4gICAgICAgIGlmKCByZXN1bHQgKSB7XG4gICAgICAgICAgICAkZWwucGFyZW50KCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2hhcy1lcnJvcicpLmFkZENsYXNzKCdoYXMtZmVlZGJhY2sgaGFzLXN1Y2Nlc3MnKVxuICAgICAgICAgICAgJGVsLm5leHQoKS5yZW1vdmVDbGFzcygnaGlkZScpLnJlbW92ZUNsYXNzKCdnbHlwaGljb24tcmVtb3ZlJykuYWRkQ2xhc3MoJ2dseXBoaWNvbi1vaycpXG4gICAgICAgICAgICAkZWwuc2libGluZ3MoJy5oZWxwLWJsb2NrJykucmVtb3ZlKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9yKCAkZWwsIGZpZWxkLmVycm9yIClcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZVNpZ251cEJ0bigpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25JbnB1dEZvY3VzKCBlICkge1xuICAgICAgICB2YXIgJGVsID0gdGhpcy4kKCBlLmN1cnJlbnRUYXJnZXQgKVxuICAgICAgICBpZiggJGVsLm5leHQoKS5oYXNDbGFzcygnZ2x5cGhpY29uLXJlbW92ZScpICkgdGhpcy5yZW1vdmVFcnJvciggdGhpcy4kKCBlLmN1cnJlbnRUYXJnZXQgKSApXG4gICAgICAgIGlmKCB0aGlzLnRlbXBsYXRlRGF0YS5wYXltZW50Rm9ybS5maW5kKCcuaGFzLWVycm9yJykubGVuZ3RoID09PSAwICkgdGhpcy5lbmFibGVTaWdudXBCdG4oKVxuICAgIH0sXG5cbiAgICBwYXltZW50VW5zZWxlY3RlZCgpIHtcblxuICAgICAgICB0aGlzLmZlZSA9IGZhbHNlXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRQYXltZW50ID0gdW5kZWZpbmVkXG4gICAgICAgIHRoaXMudXBkYXRlR3JhbmRUb3RhbCgpXG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuc2lnbnVwQnRuLmFkZENsYXNzKCdkaXNhYmxlZCcpLnJlbW92ZUNsYXNzKCdidG4tc3VjY2VzcycpLm9mZiggJ2NsaWNrJyApXG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnBheW1lbnRGb3JtLmFkZENsYXNzKCdoaWRlJylcbiAgICB9LFxuXG4gICAgcG9zdFJlbmRlcigpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZmVlID0gZmFsc2VcbiAgICAgICAgdGhpcy5zZWxlY3RlZFBheW1lbnQgPSB1bmRlZmluZWRcbiAgICAgICAgXG4gICAgICAgIFZpZXcucHJvdG90eXBlLnBvc3RSZW5kZXIuY2FsbCh0aGlzKVxuXG4gICAgICAgIHRoaXMucGF5bWVudE9wdGlvbnNcbiAgICAgICAgICAgIC5vbiggJ2l0ZW1TZWxlY3RlZCcsIG1vZGVsID0+IHRoaXNbIHRoaXMudXRpbC5mb3JtYXQoICclc1BheW1lbnRTZWxlY3RlZCcsIG1vZGVsLmdldCgnbmFtZScpICkgXSgpIClcbiAgICAgICAgICAgIC5vbiggJ2l0ZW1VbnNlbGVjdGVkJywgbW9kZWwgPT4gdGhpcy5wYXltZW50VW5zZWxlY3RlZCgpIClcblxuICAgICAgICB0aGlzLmdyYW5kVG90YWwgPSB0aGlzLnNpZ251cERhdGEuc2hhcmVzLm1hcCggc2hhcmUgPT4gc2hhcmUuZ2V0KCd0b3RhbCcpICkucmVkdWNlKCAoIGEsIGIgKSA9PiBhICsgYiApXG4gICAgICAgIHRoaXMuZ3JhbmRUb3RhbFBsdXNGZWUgPSAoIHRoaXMuZ3JhbmRUb3RhbCArIHRoaXMuZ3JhbmRUb3RhbCAqIC4wMyApXG5cbiAgICAgICAgdGhpcy51cGRhdGVHcmFuZFRvdGFsKClcbiAgICB9LFxuXG4gICAgcmVxdWlyZXNMb2dpbjogZmFsc2UsXG5cbiAgICByZW1vdmVFcnJvciggJGVsICkge1xuICAgICAgICBpZiggJGVsLnNpYmxpbmdzKCcuaGVscC1ibG9jaycpLmxlbmd0aCA9PT0gMSApICRlbC5wYXJlbnQoKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnaGFzLWVycm9yJylcbiAgICAgICAgJGVsLm5leHQoKS5yZW1vdmVDbGFzcygnaGlkZScpLnJlbW92ZUNsYXNzKCdnbHlwaGljb24tcmVtb3ZlJylcbiAgICAgICAgJGVsLnNpYmxpbmdzKCB0aGlzLnV0aWwuZm9ybWF0KCAnLmhlbHAtYmxvY2suJXMnLCAkZWwuYXR0cignaWQnKSApICkucmVtb3ZlKClcbiAgICB9LFxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICB2YXIgZGF0YVByb21pc2VzID0gWyBdXG5cbiAgICAgICAgZGF0YVByb21pc2VzLnB1c2goIHRoaXMuQ29udGFjdEluZm8uZ2V0KCkgKVxuXG4gICAgICAgIHRoaXMuc2lnbnVwRGF0YS5zaGFyZXMuZm9yRWFjaCggc2hhcmUgPT4ge1xuICAgICAgICAgICAgaWYoICEgc2hhcmUuaGFzKCdzaGFyZW9wdGlvbnMnKSApIGRhdGFQcm9taXNlcy5wdXNoKCBzaGFyZS5nZXRTaGFyZU9wdGlvbnMoKSApXG4gICAgICAgICAgICBpZiggISBzaGFyZS5oYXMoJ2RlbGl2ZXJ5b3B0aW9ucycpICkgZGF0YVByb21pc2VzLnB1c2goIHNoYXJlLmdldERlbGl2ZXJ5T3B0aW9ucygpIClcbiAgICAgICAgICAgIGlmKCAhIHNoYXJlLmhhcygnZ3JvdXBkcm9wb2ZmcycpICkgZGF0YVByb21pc2VzLnB1c2goIHNoYXJlLmdldEdyb3VwRHJvcG9mZnMoKSApXG4gICAgICAgICAgICBpZiggISBzaGFyZS5oYXMoJ2RlbGl2ZXJ5RGF0ZXMnKSApIGRhdGFQcm9taXNlcy5wdXNoKCBzaGFyZS5nZXREZWxpdmVyeURhdGVzKCkgKVxuICAgICAgICAgfSApXG5cbiAgICAgICAgdGhpcy5RLmFsbCggZGF0YVByb21pc2VzICkudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaWdudXBEYXRhLnNoYXJlcy5mb3JFYWNoKCBzaGFyZSA9PiBzaGFyZS5nZXRTZWxlY3RlZERhdGVzKCkgKVxuICAgICAgICAgICAgVmlldy5wcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcylcbiAgICAgICAgfSApXG4gICAgICAgIC5mYWlsKCBlID0+IG5ldyB0aGlzLkVycm9yKGUpIClcbiAgICAgICAgLmRvbmUoKVxuICAgIH0sXG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIuZW1wdHkoKS5yZW1vdmUoKVxuICAgICAgICB0aGlzLnJlbmRlcigpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHNob3dFcnJvciggJGVsLCBlcnJvciApIHtcbiAgICAgICAgdmFyIGZvcm1Hcm91cCA9ICRlbC5wYXJlbnQoKS5wYXJlbnQoKVxuXG4gICAgICAgIGlmKCAkZWwubmV4dCgpLmhhc0NsYXNzKCAnZ2x5cGhpY29uLXJlbW92ZScgKSApIHJldHVyblxuICAgICAgICBcbiAgICAgICAgZm9ybUdyb3VwLnJlbW92ZUNsYXNzKCdoYXMtc3VjY2VzcycpLmFkZENsYXNzKCdoYXMtZmVlZGJhY2sgaGFzLWVycm9yJylcbiAgICAgICAgJGVsLm5leHQoKS5yZW1vdmVDbGFzcygnaGlkZScpLnJlbW92ZUNsYXNzKCdnbHlwaGljb24tb2snKS5hZGRDbGFzcygnZ2x5cGhpY29uLXJlbW92ZScpXG4gICAgICAgICAgIC5wYXJlbnQoKS5hcHBlbmQoIEZvcm0udGVtcGxhdGVzLmZpZWxkRXJyb3IoIHsgZXJyb3I6IGVycm9yLCBuYW1lOiAkZWwuYXR0cignaWQnKSB9ICkgKVxuICAgIH0sXG5cbiAgICBzaG93RXJyb3JNb2RhbCggb3B0cyApIHtcbiAgICAgICAgdGhpcy5tb2RhbFZpZXcuc2hvdygge1xuICAgICAgICAgICAgdGl0bGU6ICdIbW1tJyxcbiAgICAgICAgICAgIGJvZHk6ICggb3B0cyAmJiBvcHRzLmVycm9yIClcbiAgICAgICAgICAgICAgICA/IG9wdHMuZXJyb3JcbiAgICAgICAgICAgICAgICA6ICdUaGVyZSB3YXMgYSBwcm9ibGVtLiAgUGxlYXNlIGNvbnRhY3QgdXMgYXQgZWF0LnBhdGNod29ya2dhcmRlbnNAZ21haWwuY29tLiAgV2UgYXBvbG9naXplIGZvciB0aGUgaW5jb252ZW5pZW5jZScsXG4gICAgICAgICAgICBoaWRlQ2FuY2VsQnRuOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlybVRleHQ6ICdPa2F5JyB9IClcbiAgICAgICAgLm9uKCAnc3VibWl0JywgKCkgPT4gdGhpcy5tb2RhbFZpZXcuaGlkZSgpIClcbiAgICB9LFxuICAgIFxuICAgIHNob3dTdWNjZXNzTW9kYWwoKSB7XG4gICAgICAgIHRoaXMubW9kYWxWaWV3LnNob3coIHtcbiAgICAgICAgICAgIHRpdGxlOiAnR3JlYXQgU3VjY2VzcycsXG4gICAgICAgICAgICBib2R5OiB0aGlzLnV0aWwuZm9ybWF0KCAnVGhhbmtzIGZvciBzaWduaW5nIHVwLiAgV2UgbG9vayBmb3J3YXJkIHRvIHNoYXJpbmcgdGhlIHNlYXNvbiB3aXRoIHlvdS4gJXMnLFxuICAgICAgICAgICAgICAgICggT2JqZWN0LmtleXMoIHRoaXMuZ2V0Rm9ybURhdGEoKSApLmxlbmd0aCApID8gICdZb3Ugc2hvdWxkIGZpbmQgYSByZWNlaXB0IGluIHlvdXIgZW1haWwgaW5ib3gnIDogJycgKSxcbiAgICAgICAgICAgIGhpZGVDYW5jZWxCdG46IHRydWUsXG4gICAgICAgICAgICBjb25maXJtVGV4dDogJ09rYXknIH0gKVxuICAgICAgICAub24oICdzdWJtaXQnLCAoKSA9PiB3aW5kb3cubG9jYXRpb24gPSAnLycgKVxuICAgICAgICAub24oICdoaWRkZW4nLCAoKSA9PiB3aW5kb3cubG9jYXRpb24gPSAnLycgKVxuICAgIH0sXG5cbiAgICBzaWdudXAoKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVEYXRhLnNpZ251cEJ0blxuICAgICAgICAgICAgLm9mZignY2xpY2snKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdoYXMtc3Bpbm5lcicpXG4gICAgICAgICAgICAuYXBwZW5kKCB0aGlzLnNwaW5uZXIuc3BpbigpLmVsIClcblxuICAgICAgICB0aGlzLiQuYWpheCgge1xuICAgICAgICAgICAgZGF0YTogdGhpcy5idWlsZFJlcXVlc3QoKSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIHVybDogXCIvc2lnbnVwXCIgfSApXG4gICAgICAgIC5kb25lKCByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiggcmVzcG9uc2UuZXJyb3IgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JNb2RhbCggeyBlcnJvcjogcmVzcG9uc2UuZXJyb3IgfSApXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuc2lnbnVwQnRuXG4gICAgICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrJylcbiAgICAgICAgICAgICAgICAgICAgLm9uZSggJ2NsaWNrJywgdGhpcy5zaWdudXBIYW5kbGVyIClcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoJ0JlY29tZSBhIE1lbWJlciEnKSAgIFxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdkb25lJylcbiAgICAgICAgICAgIHRoaXMucGF5bWVudE9wdGlvbnMucmVtb3ZlQWxsTGlzdGVuZXJzKCAnaXRlbVNlbGVjdGVkJyApLnJlbW92ZUFsbExpc3RlbmVycyggJ2l0ZW1VbnNlbGVjdGVkJyApXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5zaWdudXBCdG4udGV4dCgnVGhhbmsgeW91JylcbiAgICAgICAgICAgIHRoaXMuc2hvd1N1Y2Nlc3NNb2RhbCgpXG4gICAgICAgIH0gKVxuICAgICAgICAuZmFpbCggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JNb2RhbCgpXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5zaWdudXBCdG5cbiAgICAgICAgICAgICAgICAub2ZmKCdjbGljaycpXG4gICAgICAgICAgICAgICAgLm9uZSggJ2NsaWNrJywgdGhpcy5zaWdudXBIYW5kbGVyIClcbiAgICAgICAgICAgICAgICAudGV4dCgnQmVjb21lIGEgTWVtYmVyIScpXG4gICAgICAgIH0gKVxuICAgICAgICAuYWx3YXlzKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNwaW5uZXIuc3RvcCgpXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YS5zaWdudXBCdG4ucmVtb3ZlQ2xhc3MoJ2hhcy1zcGlubmVyJylcbiAgICAgICB9IClcbiAgICB9LFxuXG4gICAgc3Vidmlld3M6IHtcbiAgICAgICAgcGF5bWVudE9wdGlvbnM6IFtcbiAgICAgICAgICAgIHsgbmFtZTogJ3BheW1lbnRPcHRpb25zJywgdmlldzogcmVxdWlyZSgnLi9QYXltZW50T3B0aW9ucycpIH0sXG4gICAgICAgIF0sXG4gICAgfSxcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL3N1bW1hcnknKSxcblxuICAgIHRlbXBsYXRlczoge1xuICAgICAgICBQaWNrdXBEYXRlOiByZXF1aXJlKCcuLi8uLi90ZW1wbGF0ZXMvc2lnbnVwL3BpY2t1cERhdGUnKSxcbiAgICAgICAgU2hhcmVCb3g6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy9TaGFyZUJveCcpXG4gICAgfSxcblxuICAgIHVwZGF0ZUdyYW5kVG90YWwoKSB7XG4gICAgICAgIHZhciB0b3RhbCA9ICggdGhpcy5mZWUgKSA/IHRoaXMuZ3JhbmRUb3RhbFBsdXNGZWUgOiB0aGlzLmdyYW5kVG90YWxcbiAgICAgICAgdGhpcy50ZW1wbGF0ZURhdGEuZ3JhbmRUb3RhbC50ZXh0KCAnR3JhbmQgVG90YWwgOiAgJyArICckJyArIHRvdGFsLnRvRml4ZWQoMikgKVxuXG4gICAgICAgIHRoaXMuJCgnLnBheW1lbnQtb3B0aW9uOmZpcnN0LWNoaWxkIC5tZXRob2QtdG90YWwnKS50ZXh0KCAnR3JhbmQgVG90YWwgOiAgJyArICckJyArIHRoaXMuZ3JhbmRUb3RhbC50b0ZpeGVkKDIpIClcbiAgICAgICAgdGhpcy4kKCcucGF5bWVudC1vcHRpb246bGFzdC1jaGlsZCAubWV0aG9kLXRvdGFsJykudGV4dCggJ0dyYW5kIFRvdGFsIDogICcgKyAnJCcgKyB0aGlzLmdyYW5kVG90YWwudG9GaXhlZCgyKSApXG4gICAgfSxcblxuICAgIHZhbGlkYXRlQ2FyZEluZm8oKSB7XG4gICAgICAgIHZhciB2YWxpZCA9IHRydWVcblxuICAgICAgICBPYmplY3Qua2V5cyggdGhpcy5maWVsZHMgKS5mb3JFYWNoKCBrZXkgPT4ge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZmllbGRzWyBrZXkgXS52YWxpZGF0ZS5jYWxsKCB0aGlzLCB0aGlzLnRlbXBsYXRlRGF0YVtrZXldLnZhbCgpIClcblxuICAgICAgICAgICAgaWYoICEgcmVzdWx0ICkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9yKCB0aGlzLnRlbXBsYXRlRGF0YVtrZXldLCB0aGlzLmZpZWxkc1sga2V5IF0uZXJyb3IgKVxuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgaWYoICEgdmFsaWQgKSB0aGlzLmRpc2FibGVTaWdudXBCdG4oKVxuXG4gICAgICAgIHJldHVybiB2YWxpZFxuICAgIH1cblxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gU3VtbWFyeVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdj5cbiAgICA8aDE+QWJvdXQ8L2gxPlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJzZWN0aW9uT25lXCIgY2xhc3M9XCJzdHJpcGVkXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwic2VjdGlvblR3b1wiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cInNlY3Rpb25UaHJlZVwiIGNsYXNzPVwic3RyaXBlZFwiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cInNlY3Rpb25Gb3VyXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3RhZmZcIiBkYXRhLWpzPVwic3RhZmZcIj48L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG48L2Rpdj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9ICggcCwgeyBNb21lbnQgfSApID0+IHtcbiAgICBjb25zdCBhY3Rpb25zID0gcC5vcHRzLmFjdGlvbnMubWFwKCBhY3Rpb24gPT4gYDxvcHRpb24gdmFsdWU9XCIke2FjdGlvbn1cIj4ke2FjdGlvbn08L29wdGlvbj5gICkuam9pbignJylcbiAgICByZXR1cm4gYGAgK1xuYDxkaXY+XG4gICAgPGZvcm0gZGF0YS1qcz1cImZvcm1cIj5cbiAgICAgICAgPHNwYW4+PC9zcGFuPlxuICAgICAgICA8c2VsZWN0IGRhdGEtanM9XCJhY3Rpb25cIj4ke2FjdGlvbnN9PC9zZWxlY3Q+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtanM9XCJ2YWx1ZVwiIHBsYWNlaG9sZGVyPVwiJDAuMDBcIi8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtanM9XCJjaGVja051bWJlclwiLz5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1qcz1cImNyZWF0ZWRcIiB2YWx1ZT1cIiR7TW9tZW50KCkuZm9ybWF0KCdNTU0gRCwgWVlZWScpfVwiIC8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtanM9XCJkZXNjcmlwdGlvblwiIHBsYWNlaG9sZGVyPVwiZGVzY3JpcHRpb25cIi8+XG4gICAgPC9mb3JtPlxuICAgIDxkaXYgZGF0YS12aWV3PVwiYnV0dG9uRmxvd1wiPjwvZGl2PlxuPC9kaXY+YFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPG5hdiBkYXRhLWpzPVwiY29udGFpbmVyXCIgY2xhc3M9XCJhZG1pbi1oZWFkZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXggaGlkZGVuLXhzXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsb2dvLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGltZyBzcmM9XCIke3Aub3B0cy5sb2dvfVwiLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cInVzZXJQYW5lbFwiIGNsYXNzPVwicHVsbC1yaWdodCBoaWRlXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGRhdGEtanM9XCJzaWdub3V0QnRuXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIj5TaWduIE91dDwvYnV0dG9uPlxuICAgICAgICAgICAgPHNwYW4gZGF0YS1qcz1cIm5hbWVcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBkYXRhLWpzPVwicHJvZmlsZUJ0blwiIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi11c2VyIGhpZGVcIj48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9uYXY+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdj5cbiAgICA8ZGl2IGRhdGEtanM9XCJuYXZcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidmlld3NcIiBkYXRhLWpzPVwidmlld3NcIj48L2Rpdj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiB7XG4gICAgY29uc3QgZGlzYWJsZWQgPSBwLmRpc2FibGVkID8gJ2Rpc2FibGVkJzogJydcblxucmV0dXJuIGBgICtcbmA8c2VjdGlvbiBjbGFzcz1cIiR7cC5oaWRlID8gJ2ZkLWhpZGRlbiBmZC1oaWRlJyA6ICcnfVwiPmAgK1xuT2JqZWN0LmtleXMoIHAubW9kZWwuc3RhdGVzICkubWFwKCBzdGF0ZU5hbWUgPT5cbiAgICBgPGRpdiBkYXRhLWpzPVwiJHtzdGF0ZU5hbWV9XCIgY2xhc3M9XCJzdGF0ZSAke3N0YXRlTmFtZX0gJHtzdGF0ZU5hbWUgPT09ICdzdGFydCcgPyAnJyA6ICdmZC1oaWRkZW4gZmQtaGlkZSd9XCI+YCArXG4gICAgcC5tb2RlbC5zdGF0ZXNbIHN0YXRlTmFtZSBdLm1hcCggYnV0dG9uID0+XG4gICAgICAgIGJ1dHRvbi5zdmdcbiAgICAgICAgICAgID8gYnV0dG9uLnN2Z1xuICAgICAgICAgICAgOiBgPGJ1dHRvbiBjbGFzcz1cIiR7ZGlzYWJsZWR9ICR7YnV0dG9uLmNsYXNzIHx8ICcnfSBcImRhdGEtanM9XCIke2J1dHRvbi5uYW1lfVwiPiR7YnV0dG9uLnRleHR9PC9idXR0b24+YFxuICAgICkuam9pbignJykgK1xuICAgIGA8L2Rpdj5gXG4pLmpvaW4oJycpICtcbmA8L3NlY3Rpb24+YFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSAoIHAgKSA9PiBgPHNlY3Rpb24+XG4gICAgPGRpdiBjbGFzcz1cImxlZnQtcGFuZWxcIiBkYXRhLWpzPVwibGVmdFBhbmVsXCI+XG4gICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImxpbmtcIiBkYXRhLWpzPVwiYmFja0J0blwiPiR7cmVxdWlyZSgnLi9saWIvbGVmdEFycm93JykoKX08c3Bhbj5CYWNrIHRvIEFkbWluPC9zcGFuPjwvYnV0dG9uPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImxpbmtcIiBkYXRhLWpzPVwicmVzb3VyY2VcIj48L2J1dHRvbj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS12aWV3PVwibGlzdFwiIGRhdGEtbmFtZT1cImNvbGxlY3Rpb25zXCI+PC9kaXY+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGRhdGEtanM9XCJtYWluUGFuZWxcIiBjbGFzcz1cIm1haW4tcGFuZWxcIj48L2Rpdj5cbjwvc2VjdGlvbj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2PlxuICAgIDxoMT5Db250YWN0PC9oMT5cbiAgICA8c2VjdGlvbj5cbiAgICAgICAgPGgyIGRhdGEtanM9XCJpbnRyb1wiPjwvaDI+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cImNvbnRhY3RJbmZvXCI+PC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuPC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXY+XG4gICAgPGgxPkNTQSBQcm9ncmFtPC9oMT5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwiYWJvdXRDU0FcIiBjbGFzcz1cImFib3V0LWNzYVwiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICA8L3NlY3Rpb24+XG4gICAgPGRpdiBkYXRhLWpzPVwiZGl2aWRlckltYWdlT25lXCI+PC9kaXY+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cImNzYUZpdFwiIGNsYXNzPVwiY3NhLWZpdFwiPlxuICAgICAgICA8aDIgZGF0YS1qcz1cImhvd0RvSUtub3dcIj48L2gyPlxuICAgICAgICA8cD48L3A+XG4gICAgICAgIDx1bCBkYXRhLWpzPVwiY3NhRml0U3RhdGVtZW50c1wiPjwvdWw+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJjc2FDb250ZW50c1wiIGNsYXNzPVwiY3NhLWNvbnRlbnRzXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgICAgICA8cD48L3A+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cInNoYXJlRXhhbXBsZXNcIiBjbGFzcz1cInNoYXJlLWV4YW1wbGVzXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cInNoYXJlRGVzY3JpcHRpb25zXCIgY2xhc3M9XCJzaGFyZS1kZXNjcmlwdGlvbnNcIj48L2Rpdj5cbiAgICAgICAgPHAgZGF0YS1qcz1cInNoYXJlUHJpb3JpdHlcIj48L3A+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tcm93XCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLXllbGxvd1wiIGRhdGEtanM9XCJzaWdudXBCdG5cIiB0eXBlPVwiYnV0dG9uXCI+U2lnbiBVcCBOb3chPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgICA8ZGl2IGRhdGEtanM9XCJkaXZpZGVySW1hZ2VUd29cIj48L2Rpdj5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwiY3NhRGVsaXZlcnlcIiBjbGFzcz1cImRlbGl2ZXJ5XCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgICAgICA8cD48L3A+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkZWxpdmVyeS1tYXRyaXhcIiBkYXRhLWpzPVwiZGVsaXZlcnlNYXRyaXhcIj48L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cImNzYUN1c3RvbWl6YXRpb25cIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjxwPlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwiYWRkT25zXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgICAgICA8cD48L3A+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cImFkZE9uSXRlbXNcIiBjbGFzcz1cImFkZC1vbnNcIj48L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cInBheW1lbnRcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICAgICAgPHAgZGF0YS1qcz1cInBheWFibGVUb1wiPjwvcD5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwiY29udGFjdFwiIGNsYXNzPVwiY29udGFjdFwiPjwvZGl2PlxuICAgICAgICA8cCBkYXRhLWpzPVwiZW1haWxVc1wiPjwvcD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1yb3dcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4teWVsbG93XCIgZGF0YS1qcz1cInNpZ251cEJ0blwiIHR5cGU9XCJidXR0b25cIj5TaWduIFVwIE5vdyE8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuPC9kaXY+YCIsImNvbnN0IEZvcm1hdCA9IHJlcXVpcmUoJy4uLy4uL0Zvcm1hdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gcCA9PiB7XG4gICAgY29uc3QgcHJpY2UgPSBwLnVuaXQgPyBgJHtwLnByaWNlfSBwZXIgJHtwLnVuaXR9YCA6IHAucHJpY2VcblxucmV0dXJuIGBgICtcbmA8ZGl2IGNsYXNzPVwiaXRlbS1kZXRhaWxcIj5cbiAgICA8ZGl2PlxuICAgICAgICA8c3Bhbj4ke3AuaGVhZGluZ308L3NwYW4+XG4gICAgICAgIDxzcGFuPnw8L3NwYW4+XG4gICAgICAgIDxzcGFuPiR7cHJpY2V9PC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxwPiR7Rm9ybWF0LlBhcnNlVGV4dExpbmtzKCBwLmluZm9ybWF0aW9uIHx8IHAuZGVzY3JpcHRpb24gKX08L3A+XG48L2Rpdj5gXG59IiwibW9kdWxlLmV4cG9ydHMgPSAoIHAsIGZvcm1hdCApID0+IHtcbiAgICBjb25zdCBuZWdhdGl2ZUNsYXNzID0gcC5pc05lZ2F0aXZlID8gJ25lZ2F0aXZlJyA6ICcnXG5cbnJldHVybiBgYCArXG5gPGxpIGRhdGEtanM9XCJ0cmFuc2FjdGlvblwiIGRhdGEtaWQ9XCIke3AuaWR9XCI+XG4gICAgPHNwYW4gY2xhc3M9XCJjZWxsXCI+PC9zcGFuPlxuICAgIDxzcGFuIGRhdGEtYXR0cj1cImFjdGlvblwiIGNsYXNzPVwiY2VsbFwiPiR7cC5hY3Rpb259PC9zcGFuPlxuICAgIDxzcGFuIGRhdGEtYXR0cj1cInZhbHVlXCIgY2xhc3M9XCJjZWxsICR7bmVnYXRpdmVDbGFzc31cIj4ke2Zvcm1hdC5jdXJyZW5jeShNYXRoLmFicyhwLnZhbHVlKSl9PC9zcGFuPlxuICAgIDxzcGFuIGRhdGEtYXR0cj1cImNoZWNrTnVtYmVyXCIgY2xhc3M9XCJjZWxsXCI+JHtwLmNoZWNrTnVtYmVyIHx8ICcnfTwvc3Bhbj5cbiAgICA8c3BhbiBkYXRhLWF0dHI9XCJjcmVhdGVkXCIgY2xhc3M9XCJjZWxsXCI+JHtmb3JtYXQubW9tZW50KHAuY3JlYXRlZCkuZm9ybWF0KCdNTU0gRCwgWVlZWScpfTwvc3Bhbj5cbiAgICA8c3BhbiBkYXRhLWF0dHI9XCJkZXNjcmlwdGlvblwiIGNsYXNzPVwiY2VsbFwiPiR7cC5kZXNjcmlwdGlvbn08L3NwYW4+XG48L2xpPmBcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiB7XG5cbiAgICBjb25zdCByb3dzID0gcC5maWVsZHMubWFwKCBmaWVsZCA9PiB7XG4gICAgICAgIGNvbnN0IHJvd1ZhbHVlID0gZmllbGQubmFtZSA9PT0gJ25ldmVyUmVjZWl2ZSdcbiAgICAgICAgICAgID8gYDxkaXYgZGF0YS1qcz1cIm5ldmVyUmVjZWl2ZVwiIGNsYXNzPVwiY2VsbFwiPjwvZGl2PmBcbiAgICAgICAgICAgIDogZmllbGQubmFtZSA9PT0gJ29ucGF5bWVudHBsYW4nXG4gICAgICAgICAgICAgICAgPyBgPHNlbGVjdCBkYXRhLWpzPVwib25wYXltZW50cGxhblwiIGNsYXNzPVwiY2VsbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInRydWVcIj5UcnVlPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZmFsc2VcIj5GYWxzZTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5gXG4gICAgICAgICAgICAgICAgOiBgPGRpdiBkYXRhLW5hbWU9XCIke2ZpZWxkLm5hbWV9XCIgZGF0YS1qcz1cIiR7ZmllbGQubmFtZX1cIiBjbGFzcz1cImNlbGxcIiBjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCI+PC9kaXY+YFxuXG4gICAgICAgIHJldHVybiBgYCArXG4gICAgICAgIGA8ZGl2IGNsYXNzPVwidGFibGUtcm93ICR7ZmllbGQubmFtZX1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjZWxsXCI+JHtmaWVsZC5sYWJlbH08L2Rpdj5cbiAgICAgICAgICAgICR7cm93VmFsdWV9XG4gICAgICAgIDwvZGl2PmBcbiAgICB9ICkuam9pbignJylcblxuICAgIHJldHVybiBgYCArXG4gICAgYDxkaXYgY2xhc3M9XCJmZC1oaWRlIGZkLWhpZGRlbiBzZWN0aW9uXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLWhlYWRpbmdcIj5cbiAgICAgICAgICAgIDxoMz5DdXN0b21lciBJbmZvPC9oMz5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJyZXNldC1idG4gZmQtaGlkZGVuXCIgZGF0YS1qcz1cInJlc2V0QnRuXCI+UmVzZXQ8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGF0YVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cImluZm9UYWJsZVwiIGNsYXNzPVwiY3VzdG9tZXItdGFibGVcIj4ke3Jvd3N9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cImVkaXRTdW1tYXJ5XCIgY2xhc3M9XCJlZGl0LXN1bW1hcnkgZmQtaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgPGRpdj5TdW1tYXJ5IG9mIENoYW5nZXM8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJjaGFuZ2VzXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInNhdmUtYnRuXCIgZGF0YS1qcz1cInNhdmVCdG5cIj5TYXZlIENoYW5nZXM8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICggeyBvcHRzIH0gKSA9PlxuYDxzZWN0aW9uPlxuICAgIDxwPiR7b3B0cy5tZXNzYWdlfTwvcD5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXJvd1wiPlxuICAgICAgIDxidXR0b24gZGF0YS1qcz1cInN1Ym1pdEJ0blwiIGNsYXNzPVwiYnRuLXN1Ym1pdFwiPkRlbGV0ZTwvYnV0dG9uPlxuICAgICAgIDxidXR0b24gZGF0YS1qcz1cImNhbmNlbEJ0blwiIGNsYXNzPVwiYnRuLWNhbmNlbFwiPkNhbmNlbDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuPC9zZWN0aW9uPmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBcbmA8bGkgZGF0YS1kYXRlPVwiJHtwLmRhdGUuZm9ybWF0KCdZWVlZTU1ERCcpfVwiIGNsYXNzPVwiZGVsaXZlcnktZGF0ZSAke3Auc2VsZWN0ZWQgPyAnc2VsZWN0ZWQnIDogJyd9ICR7cC51bnNlbGVjdGFibGUgPyAndW5zZWxlY3RhYmxlJyA6ICcnfVwiPlxuICAgIDxkaXY+JHtwLmRhdGUuZm9ybWF0KCdkZGQnKX08L2Rpdj5cbiAgICA8ZGl2PiR7cC5kYXRlLmZvcm1hdCgnTU1NJyl9PC9kaXY+XG4gICAgPGRpdj4ke3AuZGF0ZS5mb3JtYXQoJ0QnKX08L2Rpdj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gZGF0dW0gPT5cbmA8ZGl2PlxuICAgIDxzcGFuPiR7ZGF0dW0ubGFiZWwgfHwgZGF0dW0ubmFtZX08L3NwYW4+XG48L2Rpdj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4gYDxzZWN0aW9uIGNsYXNzPVwibm8tc2VsZWN0IGZkLWhpZGRlblwiPkRyYWdnaW5nIEl0ZW08L3NlY3Rpb24+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcbiAgICBjb25zdCBhY3Rpb25zID0gcC5hY3Rpb25zLm1hcCggYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBhY3Rpb24gPT09IHAuYWN0aW9uID8gYHNlbGVjdGVkPVwic2VsZWN0ZWRcImA6IGBgXG4gICAgICAgIHJldHVybiBgPG9wdGlvbiB2YWx1ZT1cIiR7YWN0aW9ufVwiICR7c2VsZWN0ZWR9PiR7YWN0aW9ufTwvb3B0aW9uPmBcbiAgICB9ICkuam9pbignJylcbiAgICByZXR1cm4gYGAgK1xuYDxsaSBkYXRhLWpzPVwiZWRpdFRyYW5zYWN0aW9uXCIgY2xhc3M9XCJlZGl0LXRyYW5zYWN0aW9uXCI+XG4gICAgPHNwYW4+PC9zcGFuPlxuICAgIDxzZWxlY3QgZGF0YS1hdHRyPVwiYWN0aW9uXCI+JHthY3Rpb25zfTwvc2VsZWN0PlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtYXR0cj1cInZhbHVlXCIgdmFsdWU9XCIke3AudmFsdWV9XCIvPlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtYXR0cj1cImNoZWNrTnVtYmVyXCIgdmFsdWU9XCIke3AuY2hlY2tOdW1iZXIgfHwgJyd9XCIvPlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtYXR0cj1cImNyZWF0ZWRcIiB2YWx1ZT1cIiR7cC5jcmVhdGVkIHx8ICcnfVwiIC8+XG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1hdHRyPVwiZGVzY3JpcHRpb25cIiB2YWx1ZT1cIiR7cC5kZXNjcmlwdGlvbiB8fCAnJ31cIi8+XG48L2xpPmBcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBgPGRpdj4ke3AubGFiZWx9OiA8c3Bhbj4ke3Aub2xkVmFsdWV9PC9zcGFuPnRvPHNwYW4+JHtwLm5ld1ZhbHVlfTwvc3Bhbj48L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IGA8ZGl2PjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9ICgpID0+XG5gPGRpdj5cbiAgICA8cD5BIDxhIGhyZWY9J21haWx0bzp0b3BoZXJiYXJvbkBnbWFpbC5jb20nPkZ1dHVyZURheXM8L2E+IFNpdGU8L3A+XG48L2Rpdj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4ge1xuICAgIGNvbnN0IGhlYWRpbmcgPSBwLm9wdHMuaGVhZGluZyA/IGA8ZGl2IGNsYXNzPVwiaGVhZGluZ1wiPiR7cC5vcHRzLmhlYWRpbmd9PC9kaXY+YCA6IGBgLFxuICAgICAgIHByb21wdCAgPSBwLm9wdHMucHJvbXB0ID8gIGA8ZGl2IGNsYXNzPVwicHJvbXB0XCI+JHtwLm9wdHMucHJvbXB0fTwvZGl2PmAgOiBgYCxcbiAgICAgICBmaWVsZHMgPSBwLkdldEZvcm1GaWVsZHMoIHAuYXR0cmlidXRlcywgcC5tb2RlbCApLFxuICAgICAgIGJ1dHRvblJvdyA9IHAub3B0cy5oaWRlQnV0dG9uUm93XG4gICAgICAgID8gYGBcbiAgICAgICAgOiBgPGRpdiBjbGFzcz1cImJ0bi1yb3dcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4tc3VibWl0XCIgZGF0YS1qcz1cInN1Ym1pdEJ0blwiIHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4ke3Aub3B0cy5zdWJtaXRUZXh0IHx8ICdTdWJtaXQnfTwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1jYW5jZWxcIiBkYXRhLWpzPVwiY2FuY2VsQnRuXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDxzcGFuPiR7cC5vcHRzLmNhbmNlbFRleHQgfHwgJ0NhbmNlbCd9PC9zcGFuPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PmBcblxucmV0dXJuIGA8c2VjdGlvbj5cbiAgICAke2hlYWRpbmd9XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tYm94XCI+XG4gICAgICAgICR7cHJvbXB0fVxuICAgICAgICA8Zm9ybT4ke2ZpZWxkc308L2Zvcm0+XG4gICAgICAgICR7YnV0dG9uUm93fSAgXG4gICAgPC9kaXY+XG48L3NlY3Rpb24+YFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+XG5gPGRpdj5cbiAgICA8aDE+R2V0IEludm9sdmVkPC9oMT5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwiZW1wbG95bWVudFwiIGNsYXNzPVwic3RyaXBlZFwiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICAgICAgPHA+PC9wPlxuICAgICAgICA8dWwgY2xhc3M9XCJwb3NpdGlvbnNcIiBkYXRhLWpzPVwib3BlblBvc2l0aW9uc1wiPjwvdWw+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxzZWN0aW9uIGNsYXNzPVwiaW50ZXJuc2hpcHNcIiBkYXRhLWpzPVwiaW50ZXJuc2hpcHNcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS1qcz1cImludGVybkR1dGllc1wiPlxuICAgICAgICAgICAgICAgIDxoMz48L2gzPlxuICAgICAgICAgICAgICAgIDx1bCBkYXRhLWpzPVwiZHV0eUxpc3RcIj48L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJpbnRlcm5RdWFsaWZpY2F0aW9uc1wiPlxuICAgICAgICAgICAgICAgIDxoMz48L2gzPlxuICAgICAgICAgICAgICAgIDx1bCBkYXRhLWpzPVwicXVhbGlmaWNhdGlvbkxpc3RcIj48L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtanM9XCJpbnRlcm5Db21wZW5zYXRpb25cIj5cbiAgICAgICAgICAgICAgICA8aDM+PC9oMz5cbiAgICAgICAgICAgICAgICA8dWwgZGF0YS1qcz1cImNvbXBlbnNhdGlvbkxpc3RcIj48L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8cCBkYXRhLWpzPVwiYXBwbGljYXRpb25cIj48L3A+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxzZWN0aW9uIGRhdGEtanM9XCJ2b2x1bnRlZXJcIiBjbGFzcz1cInN0cmlwZWRcIj5cbiAgICAgICAgPGgyPjwvaDI+XG4gICAgICAgIDxwPjwvcD5cbiAgICA8L3NlY3Rpb24+XG48L2Rpdj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9ICggeyBvcHRzLCBJbWFnZVNyYyB9ICkgPT4ge1xuICAgIGNvbnN0IGZpZWxkcyA9IG9wdHMuZmllbGRzLm1hcCggZmllbGQgPT4gYDxsaSBkYXRhLW5hbWU9XCIke2ZpZWxkLm5hbWV9XCI+JHtmaWVsZC5sYWJlbH08L2xpPmAgKS5qb2luKCcnKVxuXG5yZXR1cm4gYGAgK1xuYDxkaXY+XG4gICAgPGRpdj5cbiAgICAgICAgPGltZyBkYXRhLXNyYz1cIiR7SW1hZ2VTcmMoJ2hlYWRlcl9zdW4nKX1cIiAvPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgZGF0YS1qcz1cIm5hdlwiIGNsYXNzPVwiZmQtaGlkZGVuXCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICAke3JlcXVpcmUoJy4vbGliL2p1c3RpZnknKX1cbiAgICAgICAgICAgIDxkaXY+PHNwYW4gZGF0YS1qcz1cInRpdGxlXCIgZGF0YS1uYW1lPVwiJHtvcHRzLmhvbWUubmFtZX1cIj4ke29wdHMuaG9tZS5sYWJlbH08L3NwYW4+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dWwgZGF0YS1qcz1cIm5hdkxpbmtzXCI+JHtmaWVsZHN9PC91bD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2PlxuPC9kaXY+YFxufSIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXY+XG4gICAgPGltZyBkYXRhLXNyYz1cIiR7cC5JbWFnZVNyYygnY29ybnVjb3BpYScpfVwiIC8+XG4gICAgPGRpdiBjbGFzcz1cIm92ZXJsYXlcIj5cbiAgICAgICAgPGRpdiBkYXRhLWpzPVwic2xvZ2FuXCI+PC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLXllbGxvd1wiIGRhdGEtanM9XCJqb2luQnRuXCIgdHlwZT1cImJ1dHRvblwiPkpvaW4gb3VyIENTQSE8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L2Rpdj5gIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcbiAgICBjb25zdCB3ZWJzaXRlID0gcC51cmwgPyBgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIiR7cC51cmx9XCI+V2Vic2l0ZTwvYT5gIDogYGAsXG4gICAgICAgIGRpcmVjdGlvbnMgPSBwLnN0cmVldCAmJiBwLmNpdHlTdGF0ZVppcCA/IGA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL21hcHMuZ29vZ2xlLmNvbS8/cT0ke3Auc3RyZWV0fSwgJHtwLmNpdHlTdGF0ZVppcH1cIj5EaXJlY3Rpb25zPC9hPmAgOiBgYFxuXG5yZXR1cm4gYGAgK1xuYDxkaXYgY2xhc3M9XCJpbmZvLXdpbmRvd1wiPlxuICAgIDxkaXY+JHtwLm5hbWV9PC9kaXY+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdj4ke3Auc3RyZWV0IHx8ICcnfTwvZGl2PlxuICAgICAgICA8ZGl2PiR7cC5jaXR5U3RhdGVaaXAgfHwgJyd9PC9kaXY+XG4gICAgICAgIDxkaXY+JHtwLnBob25lbnVtYmVyIHx8ICcnfTwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXY+XG4gICAgICAgIDxkaXY+JHtkaXJlY3Rpb25zfTwvZGl2PlxuICAgICAgICA8ZGl2PiR7d2Vic2l0ZX08L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcblxufSIsImNvbnN0IGdldEhlYWRpbmcgPSAoIHAgPSB7IG9wdHM6e30gfSApID0+IHtcbiAgICBpZiggIXAub3B0cyB8fCAhcC5vcHRzLm5hbWUgKSByZXR1cm4gYGBcbiAgICByZXR1cm4gcC5vcHRzLnRvZ2dsZVxuICAgICAgICA/IGA8ZGl2IGRhdGEtanM9XCJ0b2dnbGVcIiBjbGFzcz1cImhlYWRpbmcgc2lkZS1ieS1zaWRlIHRvZ2dsZVwiPlxuICAgICAgICAgICAgJHtwLkdldEljb24oJ2NhcmV0LWRvd24nKX1cbiAgICAgICAgICAgIDxzcGFuPiR7cC5vcHRzLm5hbWV9PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PmBcbiAgICAgICAgOiBgPGgzIGNsYXNzPVwiaGVhZGluZ1wiPiR7cC5vcHRzLm5hbWV9PC9oMz5gXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHAgKSB7XG4gICAgY29uc3QgYnV0dG9uQ2xhc3MgPSBwLm1vZGVsLmlzRG9jdW1lbnRMaXN0ID8gJ2Zsb2F0aW5nJyA6ICdidG4teWVsbG93J1xuXG5yZXR1cm4gYGAgK1xuYDxzZWN0aW9uPlxuICAgICR7Z2V0SGVhZGluZyhwKX1cbiAgICA8b2wgZGF0YS1qcz1cImxpc3RcIiBjbGFzcz1cImxpc3QgJHtwLm1vZGVsLmRyYWdnYWJsZSB8fCBwLm1vZGVsLmRyb3BwYWJsZSA/ICduby1zZWxlY3QnIDogJycgfVwiPjwvb2w+XG4gICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1yb3dcIj5cbiAgICAgICAgJHtwLm1vZGVsLnJlc2V0ID8gYDxidXR0b24gY2xhc3M9XCIke2J1dHRvbkNsYXNzfVwiIGRhdGEtanM9XCJyZXNldEJ0blwiIHR5cGU9XCJidXR0b25cIj5SZXNldDwvYnV0dG9uPmAgOiBgYH1cbiAgICAgICAgJHtwLm1vZGVsLnNhdmUgPyBgPGJ1dHRvbiBjbGFzcz1cIiR7YnV0dG9uQ2xhc3N9XCIgZGF0YS1qcz1cInNhdmVCdG5cIiB0eXBlPVwiYnV0dG9uXCI+U2F2ZTwvYnV0dG9uPmAgOiBgYH1cbiAgICAgICAgJHtwLm1vZGVsLmFkZCA/IGA8YnV0dG9uIGNsYXNzPVwiJHtidXR0b25DbGFzc31cIiBkYXRhLWpzPVwiYWRkQnRuXCIgdHlwZT1cImJ1dHRvblwiPkFkZDwvYnV0dG9uPmAgOiBgYH1cbiAgICA8L2Rpdj5cbjwvc2VjdGlvbj5gXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSBwLnVybCA/IGA8ZGl2PjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIke3AudXJsfVwiPiR7cC5uYW1lIHx8ICcnfTwvYT48L2Rpdj5gIDogYDxkaXY+JHtwLm5hbWUgfHwgJyd9PC9kaXY+YFxuICAgIGNvbnN0IGhvdXJzID0gcC5ob3VycyA/IHAuaG91cnMuc3BsaXQoJywnKS5tYXAoIGl0ZW0gPT4gYDxkaXY+JHtpdGVtfTwvZGl2PmAgKS5qb2luKCcnKSA6IGBgXG5cbnJldHVybiBgYCArXG5gPGxpIGNsYXNzPVwibG9jYXRpb25cIj5cbiAgICAke25hbWV9XG4gICAgPGRpdj4ke3AubGFiZWwgfHwgJyd9PC9kaXY+XG4gICAgPGRpdj4ke3AudmVudWUgfHwgJyd9PC9kaXY+XG4gICAgPGRpdj4ke3Auc3RyZWV0IHx8ICcnfTwvZGl2PlxuICAgIDxkaXY+JHtwLmNpdHlTdGF0ZVppcCB8fCAnJ308L2Rpdj5cbiAgICA8ZGl2PiR7cC5waG9uZW51bWJlciB8fCAnJ308L2Rpdj5cbiAgICA8ZGl2PjxhIGhyZWY9XCJtYWlsdG86JHtwLmVtYWlsfVwiPiR7cC5lbWFpbCB8fCAnJ308L2E+PC9kaXY+XG4gICAgJHtob3Vyc31cbjwvbGk+YFxufSIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiB7XG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IHAub3B0cy5jYXRlZ29yaWVzLm1hcCggYXR0ciA9PlxuICAgICAgICBgPGxpPlxuICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBkYXRhLW5hbWU9XCIke2F0dHIubmFtZX1cIiB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkIC8+XG4gICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJHthdHRyLm5hbWV9XCI+JHthdHRyLmxhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvbGk+YFxuICAgICkuam9pbignJylcblxucmV0dXJuIGBgICtcbmA8ZGl2PlxuICAgIDxoMT5Mb2NhdGlvbnM8L2gxPlxuICAgIDxkaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYXAtd3JhcFwiPlxuICAgICAgICAgICAgPGRpdiBkYXRhLWpzPVwibWFwXCI+PC9kaXY+XG4gICAgICAgICAgICA8dWwgY2xhc3M9XCJsZWdlbmRcIiBkYXRhLWpzPVwibGVnZW5kXCI+XG4gICAgICAgICAgICAgICAgJHtjYXRlZ29yaWVzfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPHNlY3Rpb24+XG4gICAgICAgIDxwIGRhdGEtanM9XCJpbnRyb1wiPjwvcD5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cImZhcm1lcnNNYXJrZXRzXCIgY2xhc3M9XCJzdHJpcGVkXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgICAgICA8cD48L3A+XG4gICAgICAgIDx1bCBkYXRhLWpzPVwiZmFybWVyTWFya2V0c0xpc3RcIj48L3VsPlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwicmV0YWlsT3V0bGV0c1wiPlxuICAgICAgICA8aDI+PC9oMj5cbiAgICAgICAgPHA+PC9wPlxuICAgICAgICA8dWwgZGF0YS1qcz1cInJldGFpbE91dGxldHNMaXN0XCI+PC91bD5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gZGF0YS1qcz1cInJlc3RhdXJhbnRzXCIgY2xhc3M9XCJzdHJpcGVkXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgICAgICA8cD48L3A+XG4gICAgICAgIDx1bCBkYXRhLWpzPVwicmVzdGF1cmFudHNMaXN0XCI+PC91bD5cbiAgICA8L3NlY3Rpb24+ICBcbiAgICA8c2VjdGlvbiBkYXRhLWpzPVwicGlja3VwTG9jYXRpb25zXCI+XG4gICAgICAgIDxoMj48L2gyPlxuICAgICAgICA8cD48L3A+XG4gICAgICAgIDx1bCBkYXRhLWpzPVwiZ3JvdXBMb2NhdGlvbnNMaXN0XCI+PC91bD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1yb3dcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4teWVsbG93XCIgZGF0YS1qcz1cInNpZ251cEJ0blwiIHR5cGU9XCJidXR0b25cIj5TaWduIFVwIE5vdyE8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuPC9kaXY+YFxufSIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXY+XG4gICAgPGRpdiBjbGFzcz1cIm1haW4tc2VhcmNoXCI+XG4gICAgICAgIDxkaXYgZGF0YS12aWV3PVwibWVtYmVyVHlwZWFoZWFkXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBkYXRhLXZpZXc9XCJjdXN0b21lckluZm9cIj48L2Rpdj5cbiAgICA8ZGl2IGRhdGEtdmlldz1cInNlYXNvbnNcIj48L2Rpdj5cbiAgICA8ZGl2IGRhdGEtdmlldz1cIm9yZGVyT3B0aW9uc1wiPjwvZGl2PlxuICAgIDxkaXYgZGF0YS12aWV3PVwid2Vla09wdGlvbnNcIj48L2Rpdj5cbiAgICA8ZGl2IGRhdGEtdmlldz1cInNoYXJlUGF0Y2hcIj48L2Rpdj5cbiAgICA8ZGl2IGRhdGEtdmlldz1cInRyYW5zYWN0aW9uc1wiPjwvZGl2PlxuPC9kaXY+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSBwID0+IHtcbiAgICBjb25zdCBmaWVsZHMgPSBwLmZpZWxkcy5tYXAoIGZpZWxkID0+XG4gICAgICAgIGA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cIiR7ZmllbGQubmFtZX1cIj4ke2ZpZWxkLmxhYmVsfTwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiJHtmaWVsZC50eXBlfVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCIke2ZpZWxkLm5hbWV9XCIgZGF0YS1qcz1cIiR7ZmllbGQubmFtZX1cIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBmb3JtLWNvbnRyb2wtZmVlZGJhY2sgaGlkZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5gXG4gICAgKS5qb2luKCcnKVxuXG5yZXR1cm4gYGAgK1xuYDxkaXYgY2xhc3M9XCJNZW1iZXJJbmZvXCIgZGF0YS1qcz1cImNvbnRhaW5lclwiPlxuICAgIDxwPlBsZWFzZSBwcm92aWRlIHVzIHdpdGggc29tZSBpbmZvcm1hdGlvbiBhYm91dCB5b3Vyc2VsZjwvcD5cbiAgICA8Zm9ybT5cbiAgICAgICAgJHtmaWVsZHN9XG4gICAgICAgIDxkaXYgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPjxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiUHJldmVudENocm9tZUF1dG9jb21wbGV0ZVwiIG5hbWU9XCJQcmV2ZW50Q2hyb21lQXV0b2NvbXBsZXRlXCIgYXV0b2NvbXBsZXRlPVwiYWRkcmVzcy1sZXZlbDRcIiAvPjwvZGl2PlxuICAgIDwvZm9ybT5cbjwvZGl2PmBcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxkaXY+XG4gICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPlNlYXJjaCBDdXN0b21lcnM8L2xhYmVsPiAgXG4gICAgPGlucHV0IGRhdGEtanM9XCJjdXN0b21lcklucHV0XCIgY2xhc3M9XCJpbnB1dC1zdGQgdHlwZT1cInRleHRcIj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBgYCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBcbmA8ZGl2IGNsYXNzPVwiZmQtaGlkZSBmZC1oaWRkZW4gc2VjdGlvblwiPlxuICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLWhlYWRpbmdcIj5cbiAgICAgICAgPGgzPk9yZGVyIE9wdGlvbnM8L2gzPlxuICAgICAgICA8c3BhbiBkYXRhLWpzPVwic2Vhc29uTGFiZWxcIj48L3NwYW4+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJyZXNldC1idG4gZmQtaGlkZGVuXCIgZGF0YS1qcz1cInJlc2V0QnRuXCI+UmVzZXQ8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGF0YVwiPlxuICAgICAgICAgICAgPG9sIGRhdGEtanM9XCJvcHRpb25zXCI+PC9vbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cImVkaXRTdW1tYXJ5XCIgY2xhc3M9XCJlZGl0LXN1bW1hcnkgZmQtaGlkZGVuXCI+XG4gICAgICAgICAgICA8ZGl2PlN1bW1hcnkgb2YgQ2hhbmdlczwvZGl2PlxuICAgICAgICAgICAgPGRpdiBkYXRhLWpzPVwiY2hhbmdlc1wiPjwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8c3Bhbj5XZWVrbHkgcHJpY2UgYWRqdXN0bWVudDogPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwib3JpZ2luYWwtcHJpY2VcIiBkYXRhLWpzPVwib3JpZ2luYWxXZWVrbHlQcmljZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3Bhbj50bzwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm5ldy1wcmljZVwiIGRhdGEtanM9XCJuZXdXZWVrbHlQcmljZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PlxuYDxzZWN0aW9uPlxuICAgIDxoND5SZXBvcnRpbmc8L2g0PlxuICAgIDxmb3JtPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsPk5hbWU6PC9sYWJlbD5cbiAgICAgICAgICAgIDxzZWxlY3QgZGF0YS1qcz1cInJlcG9ydFwiPjwvc2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbD5Gcm9tOjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWpzPVwiZnJvbVwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsPlRvOjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWpzPVwidG9cIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtanM9XCJ2aWV3QnRuXCIgY2xhc3M9XCJsaW5rXCI+VmlldzwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1qcz1cImV4cG9ydEJ0blwiIGNsYXNzPVwibGlua1wiPkV4cG9ydDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG4gICAgPGRpdiBjbGFzcz1cInJlc3VsdHNcIiBkYXRhLWpzPVwicmVzdWx0c1wiPlxuICAgICAgICA8aDQgY2xhc3M9XCJmZC1oaWRlXCIgZGF0YS1qcz1cImVtcHR5XCI+Tm8gcmVzdWx0czwvaDQ+XG4gICAgICAgIDxvbCBjbGFzcz1cImNvbHVtbnNcIiBkYXRhLWpzPVwiY29sdW1uc1wiPjwvb2w+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dzXCIgZGF0YS1qcz1cInJvd3NcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbjwvc2VjdGlvbj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4gXG5gPGRpdiBjbGFzcz1cImZkLWhpZGUgZmQtaGlkZGVuIHNlY3Rpb25cIj5cbiAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi1oZWFkaW5nXCI+XG4gICAgICAgIDxoMz5BbGwgU2Vhc29uczwvaDM+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInRhYmxlXCI+XG4gICAgICAgIDxvbCBjbGFzcz1cInRhYmxlLXJvd1wiIGRhdGEtanM9XCJsaXN0XCI+PC9vbD5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiB7XG4gICAgY29uc3QgZGF0YUlkID0gcC5tZW1iZXJzaGFyZWlkID8gYGRhdGEtaWQ9XCIke3AubWVtYmVyc2hhcmVpZH1cImAgOiBgYCxcbiAgICAgICAgICBjb3VudCA9IHAuY291bnQgPyBgPHNwYW4+KCR7cC5jb3VudH0pPC9zcGFuPmAgOiBgYFxuXG4gICAgcmV0dXJuIGBgICtcbiAgICBgPGRpdiAke2RhdGFJZH1cIiBjbGFzcz1cInNoYXJlLWxhYmVsXCI+XG4gICAgICAgIDxkaXY+PHNwYW4+JHtwLmxhYmVsfTwvc3Bhbj4gJHtjb3VudH08L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxzcGFuPiR7cC5odW1hblN0YXJ0ZGF0ZX08L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj4tPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+JHtwLmh1bWFuRW5kZGF0ZX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PiR7cC5kdXJhdGlvbn0gd2Vla3M8L2Rpdj5cbiAgICA8L2Rpdj5gXG59XG4iLCJjb25zdCBGb3JtYXQgPSByZXF1aXJlKCcuLi8uLi9Gb3JtYXQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2PlxuICAgIDxoND4ke3AuaGVhZGluZ308L2g0PlxuICAgIDxkaXY+PGltZyBkYXRhLXNyYz1cIiR7Rm9ybWF0LkltYWdlU3JjKCBwLmltYWdlICl9XCIgLz48L2Rpdj5cbiAgICA8ZGl2PiR7cC5saXN0SGVhZGluZ308L2Rpdj5cbiAgICA8dWw+JHtGb3JtYXQuR2V0TGlzdEl0ZW1zKCBwLnNhbXBsZUxpc3QgKX08L3VsPlxuPC9kaXY+YCIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiBcbmA8ZGl2IGNsYXNzPVwiZmQtaGlkZSBmZC1oaWRkZW5cIj5cbiAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi1oZWFkaW5nXCI+XG4gICAgICAgIDxoMz5BZGp1c3QgTWVtYmVyIFNoYXJlIE9wdGlvbnM8L2gzPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiY2xlYXJmaXggbGluZS1pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPldlZWtzIFJlbW92ZWQ6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1qcz1cIndlZWtzUmVtb3ZlZFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhZGp1c3RtZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5BZGp1c3RtZW50OiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlzLW5lZ2F0aXZlXCIgZGF0YS1qcz1cIndlZWtzUmVtb3ZlZFByaWNlXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaW5lLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+V2Vla3MgQWRkZWQ6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1qcz1cIndlZWtzQWRkZWRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtanM9XCJhZGRlZEFkanVzdG1lbnRcIiBjbGFzcz1cImFkanVzdG1lbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkFkanVzdG1lbnQ6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaXMtcG9zaXRpdmVcIiBkYXRhLWpzPVwid2Vla3NBZGRlZFByaWNlXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgZGF0YS1qcz1cIm9wdGlvbnNcIiBjbGFzcz1cImxpbmUtaXRlbSBmZC1oaWRkZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk9wdGlvbnMgVXBkYXRlOiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWpzPVwic2hhcmVPcHRpb25EZXNjcmlwdGlvblwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5XZWVrbHkgcHJpY2UgYWRqdXN0bWVudDogPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1qcz1cIndlZWtseUFkanVzdG1lbnRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+V2Vla3MgYWZmZWN0ZWQ6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtanM9XCJ3ZWVrc0FmZmVjdGVkXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhZGp1c3RtZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IEFkanVzdG1lbnQ6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWpzPVwib3B0aW9uc0FkanVzdG1lbnRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+VG90YWwgQWRqdXN0bWVudDogPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWpzPVwiYWRqdXN0bWVudFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbWFpbFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgZGF0YS1qcz1cInNlbmRFbWFpbFwiIHR5cGU9XCJjaGVja2JveFwiPlNlbmQgRW1haWw8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtdmlldz1cImJ1dHRvbkZsb3dcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L2Rpdj5gXG4iLCJjb25zdCBGb3JtYXQgPSByZXF1aXJlKCcuLi8uLi9Gb3JtYXQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2IGNsYXNzPVwiYmlvXCI+XG4gICAgPGRpdj5cbiAgICAgICAgPGltZyBkYXRhLXNyYz1cIiR7Rm9ybWF0LkltYWdlU3JjKCBwLmltYWdlICl9XCIgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXlcIj5cbiAgICAgICAgICAgIDxkaXY+JHtwLmJpbyB8fCAnJ308L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdj4ke3AubmFtZX08L2Rpdj5cbjwvZGl2PmAiLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4gYGAgK1xuYDxkaXYgY2xhc3M9XCJjbGVhcmZpeCBmZC1oaWRlIGZkLWhpZGRlblwiPlxuICAgIDxkaXYgZGF0YS1qcz1cImljb25cIj48L2Rpdj5cbiAgICA8ZGl2PlxuICAgICAgICA8ZGl2IGRhdGEtanM9XCJ0aXRsZVwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGRhdGEtanM9XCJtZXNzYWdlXCI+PC9kaXY+XG4gICAgPC9kaXY+XG48L2Rpdj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT5cbmA8ZGl2IGNsYXNzPVwiZmQtaGlkZSBmZC1oaWRkZW4gc2VjdGlvblwiPlxuICAgIDxkaXYgY2xhc3M9XCJoZWFkaW5nXCI+XG4gICAgICAgIDxzcGFuPjwvc3Bhbj5cbiAgICAgICAgPGgzPlRyYW5zYWN0aW9uczwvaDM+XG4gICAgICAgIDxzcGFuPlZhbHVlPC9zcGFuPlxuICAgICAgICA8c3Bhbj5DaGVjayAjPC9zcGFuPlxuICAgICAgICA8c3Bhbj5EYXRlPC9zcGFuPlxuICAgICAgICA8c3Bhbj5EZXNjcmlwdGlvbjwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8b2wgZGF0YS1qcz1cInRyYW5zYWN0aW9uc1wiPjwvb2w+XG4gICAgPGRpdiBkYXRhLXZpZXc9XCJidXR0b25GbG93XCIgZGF0YS1uYW1lPVwiZWRpdEJ1dHRvbnNcIj48L2Rpdj5cbiAgICA8ZGl2IGRhdGEtdmlldz1cImFkZFRyYW5zYWN0aW9uXCI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImJhbGFuY2VcIj5cbiAgICAgICAgPGgzPkJhbGFuY2U8L2gzPlxuICAgICAgICA8c3BhbiBkYXRhLWpzPVwiYmFsYW5jZVwiPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4+PC9zcGFuPlxuICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxkaXYgZGF0YS12aWV3PVwiYnV0dG9uRmxvd1wiIGRhdGEtbmFtZT1cImVtYWlsQnV0dG9uc1wiPjwvZGl2PlxuICAgICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG48L2Rpdj5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHAgPT4gXG5gPGRpdiBjbGFzcz1cImZkLWhpZGUgZmQtaGlkZGVuXCI+XG4gICAgPGRpdiBjbGFzcz1cInNlY3Rpb24taGVhZGluZ1wiPlxuICAgICAgICA8aDM+V2VlayBPcHRpb25zPC9oMz5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxzcGFuPkRlbGl2ZXJ5IERheTogPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gZGF0YS1qcz1cImRlbGl2ZXJ5RGF5XCI+PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlc2V0LWJ0biBoaWRkZW5cIiBkYXRhLWpzPVwicmVzZXRCdG5cIj5SZXNldDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXRhXCI+XG4gICAgICAgICAgICA8b2wgZGF0YS1qcz1cImRhdGVzXCI+PC9vbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgZGF0YS1qcz1cImVkaXRTdW1tYXJ5XCIgY2xhc3M9XCJlZGl0LXN1bW1hcnkgaGlkZGVuXCI+XG4gICAgICAgICAgICA8ZGl2PlN1bW1hcnkgb2YgQ2hhbmdlczwvZGl2PlxuICAgICAgICAgICAgPGRpdiBkYXRhLWpzPVwiY2hhbmdlc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2x1bW5cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5BZGRlZCBEYXRlczwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8b2wgZGF0YS1qcz1cInNlbGVjdGVkRGF0ZXNcIiBjbGFzcz1cImFkZGVkLWRhdGVzXCI+PC9vbD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sdW1uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+UmVtb3ZlZCBEYXRlczwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8b2wgZGF0YS1qcz1cInJlbW92ZWREYXRlc1wiIGNsYXNzPVwicmVtb3ZlZC1kYXRlc1wiPjwvb2w+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHNwYW4+V2VlayBjb3VudCBhZGp1c3RtZW50OiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcmljZS1jaGFuZ2VcIiBkYXRhLWpzPVwid2Vla0NoYW5nZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbiIsIm1vZHVsZS5leHBvcnRzID0gcCA9PiB7XG4gICAgY29uc3Qgc2l6ZU9wdGlvbnMgPSBwLnNpemVPcHRpb25zLm1hcCggb3B0aW9uID0+IGA8ZGl2IGNsYXNzPVwiY2VsbFwiPiR7b3B0aW9uLmxhYmVsfSBTaGFyZTwvZGl2PmAgKS5qb2luKCcnKSxcbiAgICAgICAgcm93cyA9IHAuZGVsaXZlcnlPcHRpb25zLm1hcCggZGVsaXZlcnlPcHRpb24gPT5cbiAgICAgICAgICAgIGA8ZGl2PmAgK1xuICAgICAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiY2VsbFwiPiR7ZGVsaXZlcnlPcHRpb24ubGFiZWx9PC9kaXY+YCArXG4gICAgICAgICAgICAgICAgcC5zaXplT3B0aW9ucy5tYXAoIHNpemVPcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmljZSA9ICggcGFyc2VGbG9hdChzaXplT3B0aW9uLnByaWNlLnJlcGxhY2UoJyQnLCcnKSkgKyBwYXJzZUZsb2F0KGRlbGl2ZXJ5T3B0aW9uLnByaWNlLnJlcGxhY2UoJyQnLCcnKSkgKS50b0ZpeGVkKDIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImNlbGxcIj4kJHtwcmljZX0gLyBib3g8L2Rpdj5gXG4gICAgICAgICAgICAgICAgfSApLmpvaW4oJycpICtcbiAgICAgICAgICAgIGA8L2Rpdj5gXG4gICAgICAgICkuam9pbignJylcblxucmV0dXJuIGBgICtcbmA8ZGl2PlxuICAgIDxkaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjZWxsXCI+RGVsaXZlcnkgT3B0aW9uPC9kaXY+XG4gICAgICAgICR7c2l6ZU9wdGlvbnN9XG4gICAgPC9kaXY+XG4gICAgJHtyb3dzfVxuPC9kaXY+YFxuXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwID0ge30gKSB7XG5yZXR1cm4gYGAgK1xuYDxzdmcgY2xhc3M9XCJjYXJldC1kb3duXCIgdmVyc2lvbj1cIjEuMVwiIGNsYXNzPVwiY2FyZXQtZG93blwiICR7dGhpcy5JY29uRGF0YUpzKHApfSB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIlxuXHQgdmlld0JveD1cIjAgMCAyOTIuMzYyIDI5Mi4zNjJcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjkyLjM2MiAyOTIuMzYyO1wiXG5cdCB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxuPGc+XG5cdDxwYXRoIGQ9XCJNMjg2LjkzNSw2OS4zNzdjLTMuNjE0LTMuNjE3LTcuODk4LTUuNDI0LTEyLjg0OC01LjQyNEgxOC4yNzRjLTQuOTUyLDAtOS4yMzMsMS44MDctMTIuODUsNS40MjRcblx0XHRDMS44MDcsNzIuOTk4LDAsNzcuMjc5LDAsODIuMjI4YzAsNC45NDgsMS44MDcsOS4yMjksNS40MjQsMTIuODQ3bDEyNy45MDcsMTI3LjkwN2MzLjYyMSwzLjYxNyw3LjkwMiw1LjQyOCwxMi44NSw1LjQyOFxuXHRcdHM5LjIzMy0xLjgxMSwxMi44NDctNS40MjhMMjg2LjkzNSw5NS4wNzRjMy42MTMtMy42MTcsNS40MjctNy44OTgsNS40MjctMTIuODQ3QzI5Mi4zNjIsNzcuMjc5LDI5MC41NDgsNzIuOTk4LDI4Ni45MzUsNjkuMzc3elwiLz5cbjwvZz48L3N2Zz5gXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChwPXt9KSA9PiBgPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgZGF0YS1qcz1cIiR7cC5uYW1lIHx8ICdjaGVja21hcmsnfVwiIGNsYXNzPVwiY2hlY2ttYXJrXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCJcblx0IHdpZHRoPVwiOTcuNjE5cHhcIiBoZWlnaHQ9XCI5Ny42MThweFwiIHZpZXdCb3g9XCIwIDAgOTcuNjE5IDk3LjYxOFwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA5Ny42MTkgOTcuNjE4O1wiXG5cdCB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxuPGc+XG5cdDxwYXRoIGQ9XCJNOTYuOTM5LDE3LjM1OEw4My45NjgsNS45NTljLTAuMzk4LTAuMzUyLTAuOTI3LTAuNTMxLTEuNDQ5LTAuNDk0QzgxLjk5LDUuNSw4MS40OTYsNS43NDMsODEuMTQ2LDYuMTQyTDM0LjEsNTkuNjg4XG5cdFx0TDE3LjM3MiwzNy41NDdjLTAuMzE5LTAuNDIyLTAuNzk0LTAuNzAxLTEuMzE5LTAuNzczYy0wLjUyNC0wLjA3OC0xLjA1OSwwLjA2NC0xLjQ4MSwwLjM4NUwwLjc5NCw0Ny41Njdcblx0XHRjLTAuODgxLDAuNjY2LTEuMDU2LDEuOTItMC4zOSwyLjgwMWwzMC45NzQsNDAuOTk2YzAuMzYyLDAuNDc5LDAuOTIyLDAuNzcxLDEuNTIyLDAuNzkzYzAuMDI0LDAsMC4wNDksMCwwLjA3MywwXG5cdFx0YzAuNTc0LDAsMS4xMjItMC4yNDYsMS41MDMtMC42OGw2Mi42NDQtNzEuMjk3Qzk3Ljg1LDE5LjM1MSw5Ny43NjksMTguMDg2LDk2LjkzOSwxNy4zNTh6XCIvPlxuPC9nPjwvc3ZnPmBcbiIsIm1vZHVsZS5leHBvcnRzID0gKHA9e30pID0+IGA8c3ZnIGRhdGEtanM9XCIke3AubmFtZSB8fCAnZWRpdCd9XCIgY2xhc3M9XCJlZGl0XCIgeG1sbnM6ZGM9XCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiIHhtbG5zOmNjPVwiaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjXCIgeG1sbnM6cmRmPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI1wiIHhtbG5zOnN2Zz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnNvZGlwb2RpPVwiaHR0cDovL3NvZGlwb2RpLnNvdXJjZWZvcmdlLm5ldC9EVEQvc29kaXBvZGktMC5kdGRcIiB4bWxuczppbmtzY2FwZT1cImh0dHA6Ly93d3cuaW5rc2NhcGUub3JnL25hbWVzcGFjZXMvaW5rc2NhcGVcIiB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIj48ZyB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwtOTUyLjM2MjE4KVwiPjxwYXRoIHN0eWxlPVwib3BhY2l0eToxO2NvbG9yOiMwMDAwMDA7ZmlsbDojMDAwMDAwO3N0cm9rZTpub25lO3N0cm9rZS13aWR0aDo0O3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1vcGFjaXR5OjE7c3Ryb2tlLWRhc2hvZmZzZXQ6MDttYXJrZXI6bm9uZTt2aXNpYmlsaXR5OnZpc2libGU7ZGlzcGxheTppbmxpbmU7b3ZlcmZsb3c6dmlzaWJsZTtlbmFibGUtYmFja2dyb3VuZDphY2N1bXVsYXRlO2ZpbGwtb3BhY2l0eToxO3N0cm9rZS1kYXNoYXJyYXk6bm9uZVwiIGQ9XCJNIDcwIDEzIEwgNjEuNDM3NSAyMS41NjI1IEwgNzguNDM3NSAzOC41NjI1IEwgODcgMzAgTCA3MCAxMyB6IE0gNTguNTkzNzUgMjQuNDA2MjUgTCAyMC40Mzc1IDYyLjU2MjUgTCAzNy40Mzc1IDc5LjU2MjUgTCA3NS41OTM3NSA0MS40MDYyNSBMIDU4LjU5Mzc1IDI0LjQwNjI1IHogTSAxNy44NDM3NSA2NS42NTYyNSBMIDEzIDg3IEwgMzQuMzQzNzUgODIuMTU2MjUgTCAxNy44NDM3NSA2NS42NTYyNSB6IFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDk1Mi4zNjIxOClcIi8+PC9nPjwvc3ZnPmBcbiIsIm1vZHVsZS5leHBvcnRzID0gKHA9e30pID0+IGA8c3ZnIHZlcnNpb249XCIxLjFcIiBkYXRhLWpzPVwiJHtwLm5hbWUgfHwgJ2Vycm9yJ31cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDE4Ljk3OCAxOC45NzhcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTguOTc4IDE4Ljk3ODtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxyXG48Zz5cclxuICAgIDxwYXRoIGQ9XCJNMTYuMDg4LDEuNjc1Yy0wLjEzMy0wLjEwNC0wLjMwNi0wLjE0NC0wLjQ3LTAuMTA1Yy0wLjAxMywwLjAwMi0xLjI2MSwwLjI5LTIuNTk0LDAuMjlcclxuICAgICAgICBjLTEuNzg4LDAtMi43ODktMC40NzYtMi45NzUtMS40MTVDOS45OTksMC4xOTEsOS43NzksMC4wMDcsOS41MjEsMGMtMC4yNTctMC4wMDctMC40ODcsMC4xNjctMC41NSwwLjQxOFxyXG4gICAgICAgIEM4LjcyNywxLjM4Niw3LjcxLDEuODc3LDUuOTUsMS44NzdjLTEuMzMyLDAtMi41NzEtMC4zMDItMi41ODMtMC4zMDVjLTAuMTY2LTAuMDQtMC4zNC0wLjAwNC0wLjQ3NCwwLjEwMlxyXG4gICAgICAgIEMyLjc2LDEuNzc3LDIuNjgxLDEuOTM4LDIuNjgxLDIuMTA4djQuODY5YzAsMC4wNCwwLjAwNCwwLjA3OCwwLjAxMywwLjExNWMwLjA1NywxLjY0NywwLjY1LDguNzE0LDYuNTI4LDExLjgyMlxyXG4gICAgICAgIGMwLjA4LDAuMDQzLDAuMTY5LDAuMDY0LDAuMjU4LDAuMDY0YzAuMDkyLDAsMC4xODMtMC4wMjEsMC4yNjYtMC4wNjZjNS43NC0zLjEzNyw2LjQ0NS0xMC4xMTUsNi41MzItMTEuNzkxXHJcbiAgICAgICAgYzAuMDEyLTAuMDQ2LDAuMDE5LTAuMDk0LDAuMDE5LTAuMTQ0VjIuMTA4QzE2LjI5NywxLjkzOSwxNi4yMTksMS43OCwxNi4wODgsMS42NzV6IE0xNS4xOSw2Ljg1N1xyXG4gICAgICAgIGMtMC4wMDcsMC4wMzEtMC4wMTIsMC4wNjQtMC4wMTMsMC4wOTdjLTAuMDUzLDEuMjk4LTAuNTc0LDcuODMyLTUuNzAxLDEwLjgzOGMtNS4yMTUtMi45NjUtNS42NDYtOS41MjYtNS42OC0xMC44M1xyXG4gICAgICAgIGMwLTAuMDI5LTAuMDA0LTAuMDU4LTAuMDA5LTAuMDg1VjIuNzg0QzQuMzIyLDIuODc3LDUuMTEyLDIuOTgyLDUuOTUsMi45ODJjMS45MTEsMCwyLjk2NS0wLjU0LDMuNTM3LTEuMjA4XHJcbiAgICAgICAgYzAuNTUzLDAuNjYxLDEuNTk5LDEuMTkxLDMuNTM2LDEuMTkxYzAuODM5LDAsMS42MzEtMC4xMDEsMi4xNjYtMC4xODhMMTUuMTksNi44NTdMMTUuMTksNi44NTd6XCIvPlxyXG4gICAgPHBvbHlnb24gcG9pbnRzPVwiMTAuMjQxLDExLjIzNyAxMC41MjksNS4zMTEgOC40NDksNS4zMTEgOC43NSwxMS4yMzcgXHRcdFwiLz5cclxuICAgIDxwYXRoIGQ9XCJNOS40OTYsMTEuODkxYy0wLjY5NCwwLTEuMTc4LDAuNDk4LTEuMTc4LDEuMTg5YzAsMC42ODIsMC40NzEsMS4xOTEsMS4xNzgsMS4xOTFcclxuICAgICAgICBjMC43MDYsMCwxLjE2NC0wLjUxLDEuMTY0LTEuMTkxQzEwLjY0NywxMi4zODksMTAuMTg5LDExLjg5MSw5LjQ5NiwxMS44OTF6XCIvPlxyXG48L2c+PC9zdmc+YFxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IChwPXt9KSA9PiBgPHN2ZyBjbGFzcz1cImV4XCIgZGF0YS1qcz1cIiR7cC5uYW1lIHx8ICdleCd9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiIGVuYWJsZS1iYWNrZ3JvdW5kPVwibmV3IDAgMCA1MTIgNTEyXCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48Zz48Zz48cG9seWdvbiBwb2ludHM9XCI0MDUsMTM2Ljc5OCAzNzUuMjAyLDEwNyAyNTYsMjI2LjIwMiAxMzYuNzk4LDEwNyAxMDcsMTM2Ljc5OCAyMjYuMjAyLDI1NiAxMDcsMzc1LjIwMiAxMzYuNzk4LDQwNSAyNTYsMjg1Ljc5OCAgICAgMzc1LjIwMiw0MDUgNDA1LDM3NS4yMDIgMjg1Ljc5OCwyNTYgICBcIi8+PC9nPjwvZz48L3N2Zz5gXG4iLCJtb2R1bGUuZXhwb3J0cyA9IChwPXt9KSA9PiBgPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgY2xhc3M9XCJnYXJiYWdlXCIgZGF0YS1qcz1cIiR7cC5uYW1lIHx8ICdnYXJiYWdlJ31cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDU5IDU5XCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDU5IDU5O1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XHJcbjxnPjxwYXRoIGQ9XCJNMjkuNSw1MWMwLjU1MiwwLDEtMC40NDcsMS0xVjE3YzAtMC41NTMtMC40NDgtMS0xLTFzLTEsMC40NDctMSwxdjMzQzI4LjUsNTAuNTUzLDI4Ljk0OCw1MSwyOS41LDUxelwiLz5cclxuXHQ8cGF0aCBkPVwiTTE5LjUsNTFjMC41NTIsMCwxLTAuNDQ3LDEtMVYxN2MwLTAuNTUzLTAuNDQ4LTEtMS0xcy0xLDAuNDQ3LTEsMXYzM0MxOC41LDUwLjU1MywxOC45NDgsNTEsMTkuNSw1MXpcIi8+XHJcblx0PHBhdGggZD1cIk0zOS41LDUxYzAuNTUyLDAsMS0wLjQ0NywxLTFWMTdjMC0wLjU1My0wLjQ0OC0xLTEtMXMtMSwwLjQ0Ny0xLDF2MzNDMzguNSw1MC41NTMsMzguOTQ4LDUxLDM5LjUsNTF6XCIvPlxyXG5cdDxwYXRoIGQ9XCJNNTIuNSw2SDM4LjQ1NmMtMC4xMS0xLjI1LTAuNDk1LTMuMzU4LTEuODEzLTQuNzExQzM1LjgwOSwwLjQzNCwzNC43NTEsMCwzMy40OTksMEgyMy41Yy0xLjI1MiwwLTIuMzEsMC40MzQtMy4xNDQsMS4yODlcclxuXHRcdEMxOS4wMzgsMi42NDIsMTguNjUzLDQuNzUsMTguNTQzLDZINi41Yy0wLjU1MiwwLTEsMC40NDctMSwxczAuNDQ4LDEsMSwxaDIuMDQxbDEuOTE1LDQ2LjAyMUMxMC40OTMsNTUuNzQzLDExLjU2NSw1OSwxNS4zNjQsNTlcclxuXHRcdGgyOC4yNzJjMy43OTksMCw0Ljg3MS0zLjI1Nyw0LjkwNy00Ljk1OEw1MC40NTksOEg1Mi41YzAuNTUyLDAsMS0wLjQ0NywxLTFTNTMuMDUyLDYsNTIuNSw2eiBNMjEuNzkyLDIuNjgxXHJcblx0XHRDMjIuMjQsMi4yMjMsMjIuNzk5LDIsMjMuNSwyaDkuOTk5YzAuNzAxLDAsMS4yNiwwLjIyMywxLjcwOCwwLjY4MWMwLjgwNSwwLjgyMywxLjEyOCwyLjI3MSwxLjI0LDMuMzE5SDIwLjU1M1xyXG5cdFx0QzIwLjY2NSw0Ljk1MiwyMC45ODgsMy41MDQsMjEuNzkyLDIuNjgxeiBNNDYuNTQ0LDUzLjk3OUM0Ni41MzgsNTQuMjg4LDQ2LjQsNTcsNDMuNjM2LDU3SDE1LjM2NFxyXG5cdFx0Yy0yLjczNCwwLTIuODk4LTIuNzE3LTIuOTA5LTMuMDQyTDEwLjU0Miw4aDM3LjkxNUw0Ni41NDQsNTMuOTc5elwiLz5cclxuPC9nPjwvc3ZnPmBcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBgPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgZGF0YS1qcz1cImp1c3RpZnlcIiBjbGFzcz1cImp1c3RpZnlcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiLTIgLTIgMjggMjhcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjIuOTE2IDIyLjkxNjtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxuPGc+XG5cdDxwYXRoIGQ9XCJNMjIuNDE2LDIyLjgyOEgwLjVjLTAuMjc2LDAtMC41LTAuMjI0LTAuNS0wLjVzMC4yMjQtMC41LDAuNS0wLjVoMjEuOTE2YzAuMjc2LDAsMC41LDAuMjI0LDAuNSwwLjVcblx0XHRTMjIuNjkyLDIyLjgyOCwyMi40MTYsMjIuODI4elwiLz5cblx0PHBhdGggZD1cIk0yMi40MTYsMTUuNTgySDAuNWMtMC4yNzYsMC0wLjUtMC4yMjQtMC41LTAuNXMwLjIyNC0wLjUsMC41LTAuNWgyMS45MTZjMC4yNzYsMCwwLjUsMC4yMjQsMC41LDAuNVxuXHRcdFMyMi42OTIsMTUuNTgyLDIyLjQxNiwxNS41ODJ6XCIvPlxuXHQ8cGF0aCBkPVwiTTIyLjQxNiw4LjMzNUgwLjVjLTAuMjc2LDAtMC41LTAuMjI0LTAuNS0wLjVzMC4yMjQtMC41LDAuNS0wLjVoMjEuOTE2YzAuMjc2LDAsMC41LDAuMjI0LDAuNSwwLjVcblx0XHRTMjIuNjkyLDguMzM1LDIyLjQxNiw4LjMzNXpcIi8+XG5cdDxwYXRoIGQ9XCJNMjIuNDE2LDEuMDg4SDAuNWMtMC4yNzYsMC0wLjUtMC4yMjQtMC41LTAuNXMwLjIyNC0wLjUsMC41LTAuNWgyMS45MTZjMC4yNzYsMCwwLjUsMC4yMjQsMC41LDAuNVxuXHRcdFMyMi42OTIsMS4wODgsMjIuNDE2LDEuMDg4elwiLz48L2c+PC9zdmc+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSAocD17fSkgPT4gYDxzdmcgY2xhc3M9XCJsZWZ0LWFycm93XCIgZGF0YS1qcz1cIiR7cC5uYW1lIHx8ICdsZWZ0QXJyb3cnfVwiIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIlxuXHQgdmlld0JveD1cIjAgMCAzMS40OTQgMzEuNDk0XCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMxLjQ5NCAzMS40OTQ7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cbjxwYXRoIHN0eWxlPVwiZmlsbDojMUUyMDFEO1wiIGQ9XCJNMTAuMjczLDUuMDA5YzAuNDQ0LTAuNDQ0LDEuMTQzLTAuNDQ0LDEuNTg3LDBjMC40MjksMC40MjksMC40MjksMS4xNDMsMCwxLjU3MWwtOC4wNDcsOC4wNDdoMjYuNTU0XG5cdGMwLjYxOSwwLDEuMTI3LDAuNDkyLDEuMTI3LDEuMTExYzAsMC42MTktMC41MDgsMS4xMjctMS4xMjcsMS4xMjdIMy44MTNsOC4wNDcsOC4wMzJjMC40MjksMC40NDQsMC40MjksMS4xNTksMCwxLjU4N1xuXHRjLTAuNDQ0LDAuNDQ0LTEuMTQzLDAuNDQ0LTEuNTg3LDBsLTkuOTUyLTkuOTUyYy0wLjQyOS0wLjQyOS0wLjQyOS0xLjE0MywwLTEuNTcxTDEwLjI3Myw1LjAwOXpcIi8+PC9zdmc+YFxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBQYWdlczogT2JqZWN0LmNyZWF0ZSggcmVxdWlyZSgnLi4vLi4vbW9kZWxzL19fcHJvdG9fXycpLCB7IHJlc291cmNlOiB7IHZhbHVlOiAnUGFnZXMnIH0gfSApLFxuXG4gICAgbG9hZFRhYmxlRGF0YSggdGFibGUgKSB7XG4gICAgICAgIHRoaXMubW9kZWxzWyB0YWJsZS5uYW1lIF0gPSBPYmplY3QuY3JlYXRlKCByZXF1aXJlKCcuLi8uLi9tb2RlbHMvX19wcm90b19fJyksIHsgcmVzb3VyY2U6IHsgdmFsdWU6IHRhYmxlLm5hbWUgfSB9IClcbiAgICAgICAgXG4gICAgICAgIHRoaXMubW9kZWxzWyB0YWJsZS5uYW1lIF0uZ2V0KCkudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgaWYoIHRhYmxlLmltYWdlICkge1xuICAgICAgICAgICAgICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsc1sgdGFibGUubmFtZSBdLmRhdGEuZm9yRWFjaCggbW9kZWwgPT4gcHJvbWlzZSA9IHByb21pc2UudGhlbiggKCkgPT4gdGhpcy5sb2FkSW1hZ2VUYWJsZSggdGFibGUsIG1vZGVsICkgKSApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbHNbIHRhYmxlLm5hbWUgXS5kYXRhLmZvckVhY2goIG1vZGVsID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSgge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVsc1sgdGFibGUuZWwgXSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVzWyB0YWJsZS50ZW1wbGF0ZSBdKCBtb2RlbCApXG4gICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICAgICAgIC5jYXRjaCggdGhpcy5FcnJvciApICAgICAgIFxuICAgIH0sXG5cbiAgICBwcm9jZXNzT2JqZWN0KCBuYW1lLCBkYXRhICkge1xuICAgICAgICBPYmplY3Qua2V5cyggZGF0YSApLmZvckVhY2goIGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBkYXRhWyBrZXkgXVxuXG4gICAgICAgICAgICBpZiggdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgKSByZXR1cm4gQXJyYXkuaXNBcnJheSggdmFsICkgPyB0aGlzLmluc2VydEFycmF5RGF0YSggbmFtZSwga2V5LCB2YWwgKSA6IHRoaXMucHJvY2Vzc09iamVjdCgga2V5LCB2YWwgKVxuXG4gICAgICAgICAgICBpZiggdGhpcy5lbHNbIGtleSBdICkgcmV0dXJuIC9pbWFnZS9pLnRlc3QoIGtleSApXG4gICAgICAgICAgICAgICAgPyB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0aW9uOiB7IGVsOiB0aGlzLmVsc1sga2V5IF0gfSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IGA8aW1nIGRhdGEtc3JjPVwiJHt0aGlzLkZvcm1hdC5JbWFnZVNyYyggZGF0YVsga2V5IF0gKX1cIiAvPmBcbiAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIDogdGhpcy5lbHNbIGtleSBdLmlubmVySFRNTCA9IHRoaXMuRm9ybWF0LlBhcnNlVGV4dExpbmtzKCBkYXRhWyBrZXkgXSApXG5cbiAgICAgICAgICAgIGlmKCB0aGlzLm5hbWVUb1RhZ05hbWVbIGtleSBdICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxzWyBuYW1lIF0ucXVlcnlTZWxlY3RvciggdGhpcy5uYW1lVG9TZWxlY3Rvclsga2V5IF0gfHwgdGhpcy5uYW1lVG9UYWdOYW1lWyBrZXkgXSApLmlubmVySFRNTCA9IHRoaXMuRm9ybWF0LlBhcnNlVGV4dExpbmtzKCBkYXRhWyBrZXkgXSApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGluc2VydEFycmF5RGF0YSggc2VjdGlvbk5hbWUsIGtleSwgZGF0YSApIHtcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsc1sga2V5IF0gfHwgdGhpcy5lbHNbIHNlY3Rpb25OYW1lIF1cblxuICAgICAgICBkYXRhLmZvckVhY2goIGRhdHVtID0+XG4gICAgICAgICAgICB0aGlzLnNsdXJwVGVtcGxhdGUoIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRpb246IHsgZWwgfSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogYDwke3RoaXMubmFtZVRvVGFnTmFtZVsga2V5IF0gfHwgJ2xpJ30+JHt0aGlzLkZvcm1hdC5QYXJzZVRleHRMaW5rcyggZGF0dW0gKX08LyR7dGhpcy5uYW1lVG9UYWdOYW1lWyBrZXkgXSB8fCAnbGknfT5gXG4gICAgICAgICAgICB9IClcbiAgICAgICAgKVxuICAgIH0sXG5cbiAgICBuYW1lVG9TZWxlY3Rvcjoge1xuICAgICAgICBoZWFkaW5nOiAnaDIsIGgzLCBoNCdcbiAgICB9LFxuXG4gICAgbmFtZVRvVGFnTmFtZToge1xuICAgICAgICBoZWFkaW5nOiAnaDInLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ3AnXG4gICAgfSxcblxuICAgIG9uTGlua0NsaWNrKCBlbCApIHtcbiAgICAgICAgaWYoICFlbC5oYXNBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpICkgcmV0dXJuXG4gICAgICAgIHRoaXMuZW1pdCggJ25hdmlnYXRlJywgZWwuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSApXG4gICAgfSxcblxuICAgIHBvc3RSZW5kZXIoKSB7XG4gICAgICAgIGlmKCB0aGlzLnRhYmxlcy5sZW5ndGggKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVscyA9IHsgfVxuICAgICAgICAgICAgdGhpcy50YWJsZXMuZm9yRWFjaCggdGFibGUgPT4gdGhpcy5sb2FkVGFibGVEYXRhKCB0YWJsZSApIClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuUGFnZXMuZ2V0KCB7IHF1ZXJ5OiB7IG5hbWU6IHRoaXMuZG9jdW1lbnROYW1lIH0gfSApXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NPYmplY3QoIG51bGwsIHRoaXMuUGFnZXMuZGF0YSApXG4gICAgICAgICAgICB0aGlzLmVscy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLmxpbmsnKS5mb3JFYWNoKCBlbCA9PiBlbC5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoKSA9PiB0aGlzLm9uTGlua0NsaWNrKCBlbCApICkgKVxuICAgICAgICB9IClcbiAgICAgICAgLmNhdGNoKCB0aGlzLkVycm9yIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICB0YWJsZXM6IFsgXVxuXG59IiwidmFyIE15VmlldyA9IHJlcXVpcmUoJy4uL015VmlldycpLFxuICAgIEZvcm0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIE15Vmlldy5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBGb3JtLnByb3RvdHlwZSwgTXlWaWV3LnByb3RvdHlwZSwge1xuXG4gICAgZW1haWxSZWdleDogL15cXHcrKFtcXC4tXT9cXHcrKSpAXFx3KyhbXFwuLV0/XFx3KykqKFxcLlxcd3syLDN9KSskLyxcblxuICAgIGZpZWxkczogWyBdLFxuXG4gICAgb25Gb3JtRmFpbDogZnVuY3Rpb24oIGVycm9yICkge1xuICAgICAgICBjb25zb2xlLmxvZyggZXJyb3Iuc3RhY2sgfHwgZXJyb3IgKTtcbiAgICAgICAgdGhpcy5zbHVycFRlbXBsYXRlKCB7IHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlcy5zZXJ2ZXJFcnJvciggZXJyb3IgKSwgaW5zZXJ0aW9uOiB7ICRlbDogdGhpcy50ZW1wbGF0ZURhdGEuYnV0dG9uUm93LCBtZXRob2Q6ICdiZWZvcmUnIH0gfSApXG4gICAgfSxcblxuICAgIG9uU3VibWlzc2lvblJlc3BvbnNlOiBmdW5jdGlvbigpIHsgfSxcbiAgICBcbiAgICBwb3N0Rm9ybSggZGF0YSApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUShcbiAgICAgICAgICAgIHRoaXMuJC5hamF4KCB7XG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoIGRhdGEudmFsdWVzICkgfHwgSlNPTi5zdHJpbmdpZnkoIHRoaXMuZ2V0Rm9ybURhdGEoKSApLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgdG9rZW46ICggdGhpcy51c2VyICkgPyB0aGlzLnVzZXIuZ2V0KCd0b2tlbicpIDogJycgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMudXRpbC5mb3JtYXQoIFwiLyVzXCIsIGRhdGEucmVzb3VyY2UgKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcmVtb3ZlRXJyb3JzOiBmdW5jdGlvbiggZSApIHtcblxuICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLiQoIGUudGFyZ2V0ICk7XG4gICAgICAgIGlucHV0LnBhcmVudCgpLnJlbW92ZUNsYXNzKCdoYXMtZXJyb3InKTtcbiAgICAgICAgaW5wdXQubmV4dCgpLnJlbW92ZSgpO1xuXG4gICAgfSxcblxuICAgIHN1Ym1pdEZvcm06IGZ1bmN0aW9uKCByZXNvdXJjZSApIHtcbiAgICAgICAgXG4gICAgICAgIGlmICggdGhpcy52YWxpZGF0ZUZvcm0oKSA9PT0gZmFsc2UgKSByZXR1cm5cbiAgICAgICAgdGhpcy5wb3N0Rm9ybSggcmVzb3VyY2UgKVxuICAgICAgICAgIC50aGVuKCB0aGlzLm9uU3VibWlzc2lvblJlc3BvbnNlLmJpbmQodGhpcykgKVxuICAgICAgICAgIC5mYWlsKCB0aGlzLm9uRm9ybUZhaWwuYmluZCh0aGlzKSApXG4gICAgICAgICAgLmRvbmUoKVxuICAgIFxuICAgIH0sXG4gICAgXG4gICAgdGVtcGxhdGVzOiB7XG4gICAgICAgIGZpZWxkRXJyb3I6IHJlcXVpcmUoJy4uLy4uL3RlbXBsYXRlcy9maWVsZEVycm9yJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApLFxuICAgICAgICBpbnZhbGlkTG9naW5FcnJvcjogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL2ludmFsaWRMb2dpbkVycm9yJykoIHJlcXVpcmUoJ2hhbmRsZWJhcnMnKSApLFxuICAgICAgICBzZXJ2ZXJFcnJvcjogcmVxdWlyZSgnLi4vLi4vdGVtcGxhdGVzL3NlcnZlckVycm9yJykocmVxdWlyZSgnaGFuZGxlYmFycycpIClcbiAgICB9LFxuXG4gICAgdmFsaWRhdGVGb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbGlkID0gdHJ1ZVxuICAgICAgICBcbiAgICAgICAgaWYgKCB0aGlzLnRlbXBsYXRlRGF0YS5pbnZhbGlkTG9naW5FcnJvciApIHRoaXMudGVtcGxhdGVEYXRhLmludmFsaWRMb2dpbkVycm9yLnJlbW92ZSgpO1xuICAgICAgICBpZiAoIHRoaXMudGVtcGxhdGVEYXRhLnNlcnZlckVycm9yICkgdGhpcy50ZW1wbGF0ZURhdGEuc2VydmVyRXJyb3IucmVtb3ZlKCk7XG5cbiAgICAgICAgdGhpcy5maWVsZHMuZm9yRWFjaCggZnVuY3Rpb24oIGZpZWxkICkge1xuICAgICAgICAgIFxuICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhWyBmaWVsZC5uYW1lIF0ucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2hhcy1lcnJvcicpO1xuICAgICAgICAgIHRoaXMudGVtcGxhdGVEYXRhWyBmaWVsZC5uYW1lIF0ubmV4dCgpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgaWYgKCBmaWVsZC52YWxpZGF0ZS5jYWxsKCB0aGlzLCB0aGlzLnRlbXBsYXRlRGF0YVsgZmllbGQubmFtZSBdLnZhbCgpICkgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZVxuXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlRGF0YVsgZmllbGQubmFtZSBdLnBhcmVudCgpLmFkZENsYXNzKCdoYXMtZXJyb3InKTtcbiAgICAgICAgICAgIHRoaXMuc2x1cnBUZW1wbGF0ZSggeyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZXMuZmllbGRFcnJvciggZmllbGQgKSwgaW5zZXJ0aW9uOiB7ICRlbDogdGhpcy50ZW1wbGF0ZURhdGFbIGZpZWxkLm5hbWUgXS5wYXJlbnQoKSwgbWV0aG9kOiAnYXBwZW5kJyB9IH0gKVxuICAgICAgICAgIH1cblxuICAgICAgICB9LCB0aGlzIClcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB2YWxpZFxuXG4gICAgfSxcblxuICAgIHZhbGlkYXRlUGFzc3dvcmQoIHZhbCApIHtcbiAgICAgICAgaWYoICF2YWwgKSByZXR1cm4gZmFsc2VcbiAgICAgICAgZWxzZSByZXR1cm4gdmFsLmxlbmd0aCA+PSA2XG4gICAgfVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtXG4iLCJ2YXIgTXlWaWV3ID0gcmVxdWlyZSgnLi4vTXlWaWV3JyksXG4gICAgTGlzdFZpZXcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIE15Vmlldy5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBMaXN0Vmlldy5wcm90b3R5cGUsIE15Vmlldy5wcm90b3R5cGUsIHtcblxuICAgIGFkZEl0ZW06IGZ1bmN0aW9uKCBtb2RlbCApIHtcbiAgICAgICAgdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0gPVxuICAgICAgICAgICAgbmV3IHRoaXMuSXRlbVZpZXcoXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbiggeyBjb250YWluZXI6IHRoaXMudGVtcGxhdGVEYXRhLmNvbnRhaW5lciwgbW9kZWw6IG1vZGVsLCBzZWxlY3Rpb246IHRoaXMuc2VsZWN0aW9uIH0sIHRoaXMuZ2V0SXRlbVZpZXdPcHRpb25zKCkgKSApXG4gICAgICAgICAgICAub24oICdyZW1vdmVkJywgKCkgPT4gZGVsZXRlIHRoaXMuaXRlbVZpZXdzWyBtb2RlbC5pZCBdIClcblxuICAgICAgICB0aGlzLmVtaXQoICdpdGVtQWRkZWQnLCBtb2RlbCApXG4gICAgICAgIFxuICAgICAgICBpZiggbW9kZWwuZ2V0KCd1bnNlbGVjdGFibGUnKSApIHJldHVyblxuXG4gICAgICAgIGlmKCB0aGlzLnNlbGVjdGlvbiApIHRoaXMuaXRlbVZpZXdzWyBtb2RlbC5pZCBdLm9uKCAnY2xpY2tlZCcsIG1vZGVsID0+IHRoaXMub25JdGVtQ2xpY2soIG1vZGVsICkgKVxuICAgICAgICBpZiggdGhpcy5zZWxlY3RlZCApIHRoaXMub25JdGVtQ2xpY2soIG1vZGVsIClcbiAgICB9LFxuXG4gICAgY29sbGVjdGlvbjogeyB9LFxuXG4gICAgY3JlYXRlSXRlbXMoKSB7XG4gICAgICAgIHRoaXMuaXRlbXMgPVxuICAgICAgICAgICAgbmV3ICggdGhpcy5Db2xsZWN0aW9uLmV4dGVuZCggKCB0eXBlb2YgdGhpcy5jb2xsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgKSA/IHRoaXMuY29sbGVjdGlvbigpIDogdGhpcy5jb2xsZWN0aW9uICkgKSgpXG4gICAgICAgICAgICAub24oICdyZXNldCcsICgpID0+IHRoaXMub25JdGVtc1Jlc2V0KCkgKVxuICAgICAgICAgICAgLm9uKCAnYWRkJywgaXRlbSA9PiB0aGlzLmFkZEl0ZW0oIGl0ZW0gKSApXG4gICAgICAgICAgICAub24oICdyZW1vdmUnLCBpdGVtID0+IHRoaXMucmVtb3ZlSXRlbSggaXRlbSApIClcbiAgICAgICAgICAgIC5vbiggJ3VwZGF0ZScsICgpID0+IHRoaXMubm9JdGVtQ2hlY2soKSApXG4gICAgICAgICAgICAub24oICdzb3J0JywgKCkgPT4gdGhpcy5yZU9yZGVyRE9NKCkgKVxuICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgZmV0Y2hJdGVtcygpIHtcbiAgICAgICAgdGhpcy5pdGVtcy5mZXRjaCggT2JqZWN0LmFzc2lnbigge30sIHsgcmVzZXQ6IHRydWUgfSwgdGhpcy5mZXRjaCApIClcbiAgICAgICAgLmZhaWwoIGVyciA9PiBjb25zb2xlLmxvZyggJ0Vycm9yIGZldGNoaW5nIGNvbGxlY3Rpb24gOiAnICsgdGhpcy51cmwgKyBcIiAtLSBcIiArIGVyci5zdGFjayB8fGVyciApIClcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBnZXRDbG9zZXN0Q2xpY2tlZEluZGV4OiBmdW5jdGlvbiggbW9kZWwgKSB7XG4gICAgICAgIHZhciBjbGlja2VkSW5kZXggPSB0aGlzLml0ZW1zLmluZGV4T2YoIG1vZGVsICksXG4gICAgICAgICAgICBjbG9zZXN0ID0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgbWF4RGlzdGFuY2UgPSAwLFxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleGVzID0gT2JqZWN0LmtleXMoIHRoaXMuc2VsZWN0ZWRJdGVtcyApLm1hcCggaWQgPT4gdGhpcy5pdGVtcy5pbmRleE9mKCB0aGlzLml0ZW1zLmdldChpZCkgKSApLnNvcnQoKVxuXG4gICAgICAgIHNlbGVjdGVkSW5kZXhlcy5mb3JFYWNoKCBpbmRleCA9PiB7XG4gICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLmFicyggaW5kZXggLSBjbGlja2VkSW5kZXggKVxuICAgICAgICAgICAgaWYoIGRpc3RhbmNlID4gbWF4RGlzdGFuY2UgKSB7IG1heERpc3RhbmNlID0gZGlzdGFuY2U7IGNsb3Nlc3QgPSBpbmRleDsgfVxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gY2xvc2VzdFxuICAgIH0sXG5cbiAgICBnZXRJdGVtVmlld09wdGlvbnM6IGZ1bmN0aW9uKCkgeyByZXR1cm4ge30gfSxcblxuICAgIGhhbmRsZUtleWRvd246IGZ1bmN0aW9uKCBlICkge1xuXG4gICAgICAgIHRoaXMucHJlc3NlZEtleSA9ICggZS53aGljaCA9PT0gMTYgKVxuICAgICAgICAgICAgPyAnc2hpZnQnXG4gICAgICAgICAgICA6ICggZS53aGljaCA9PT0gMTcgfHwgZS53aGljaCA9PT0gOTEgKVxuICAgICAgICAgICAgICAgID8gJ2N0cmwnXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICB9LFxuICAgIFxuICAgIGhhbmRsZUtleXVwOiBmdW5jdGlvbiggZSApIHtcblxuICAgICAgICB0aGlzLnByZXNzZWRLZXkgPSAoIGUud2hpY2ggPT09IDE2ICYmIHRoaXMucHJlc3NlZEtleSA9PT0gJ3NoaWZ0JyApXG4gICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiAoICggZS53aGljaCA9PT0gMTcgfHwgZS53aGljaCA9PT0gOTEgKSAmJiB0aGlzLnByZXNzZWRLZXkgPT09ICdjdHJsJyApXG4gICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA6IHRoaXMucHJlc3NlZEtleVxuICAgIH0sXG5cbiAgICBub0l0ZW1DaGVjazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmdldEl0ZW1WaWV3T3B0aW9ucygpLmNvbnRhaW5lciB8fCB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXJcbiAgICAgICAgaWYoIHRoaXMuaXRlbXMubGVuZ3RoID09PSAwICkgY29udGFpbmVyLmFkZENsYXNzKCduby1pdGVtcycpXG4gICAgICAgIGVsc2UgY29udGFpbmVyLnJlbW92ZUNsYXNzKCduby1pdGVtcycpXG4gICAgfSxcblxuICAgIG9uSXRlbUNsaWNrOiBmdW5jdGlvbiggbW9kZWwgKSB7XG4gICAgICAgIHZhciBtZXRob2QgPSB0aGlzLnV0aWwuZm9ybWF0KCAnJXNzZWxlY3RJdGVtJyxcbiAgICAgICAgICAgICAgICAoIHRoaXMuaXRlbVZpZXdzWyBtb2RlbC5pZCBdLnRlbXBsYXRlRGF0YS5jb250YWluZXIuaGFzQ2xhc3MoJ3NlbGVjdGVkJykgJiYgdGhpcy5zZWxlY3Rpb24gIT09ICdtdWx0aUNvbXBsZXgnICkgPyAndW4nIDogJycgKVxuXG4gICAgICAgIHRoaXNbIG1ldGhvZCBdKCBtb2RlbCApXG4gICAgfSxcblxuICAgIG9uSXRlbXNSZXNldCgpIHtcbiAgICAgICAgdmFyIGxpc3RDb250YWluZXIgPSB0aGlzLmdldEl0ZW1WaWV3T3B0aW9ucygpLmNvbnRhaW5lciB8fCB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIgXG4gICAgICAgIFxuICAgICAgICBsaXN0Q29udGFpbmVyLmVtcHR5KClcbiAgICAgICAgdGhpcy5pdGVtVmlld3MgPSBbXVxuICAgICAgICBpZiggdGhpcy5pdGVtcy5sZW5ndGggJiYgdGhpcy5zZXRGaWVsZHMgKSB7IHRoaXMuc2V0RmllbGRzKCB0aGlzLml0ZW1zLmF0KDApLmF0dHJpYnV0ZXMgKSB9XG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCggaXRlbSA9PiB0aGlzLmFkZEl0ZW0oIGl0ZW0gKSApXG4gICAgICAgIHRoaXMubm9JdGVtQ2hlY2soKVxuICAgIH0sXG5cbiAgICBwb3N0UmVuZGVyKCkge1xuXG4gICAgICAgIGlmKCB0aGlzLnNlbGVjdGlvbiA9PT0gJ211bHRpQ29tcGxleCcgKSB7XG5cbiAgICAgICAgICAgIHRoaXMuJChkb2N1bWVudClcbiAgICAgICAgICAgICAgICAub24oICdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duLmJpbmQodGhpcykgKVxuICAgICAgICAgICAgICAgIC5vbiggJ2tleXVwJywgdGhpcy5oYW5kbGVLZXl1cC5iaW5kKHRoaXMpIClcblxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwiYmx1clwiLCBlID0+IHRoaXMucHJlc3NlZEtleSA9IHVuZGVmaW5lZCApXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJmb2N1c1wiLCBlID0+IHRoaXMucHJlc3NlZEtleSA9IHVuZGVmaW5lZCApXG4gICAgICAgIH0gXG5cbiAgICAgICAgdGhpcy5pdGVtVmlld3MgPSBbXVxuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbXMgPSB7IH1cbiAgICAgICBcbiAgICAgICAgdGhpcy5jcmVhdGVJdGVtcygpXG5cbiAgICAgICAgaWYoIHRoaXMuaXRlbU1vZGVscyApIHRoaXMuaXRlbXMucmVzZXQoICggdHlwZW9mIHRoaXMuaXRlbU1vZGVscyA9PT0gXCJmdW5jdGlvblwiICkgPyB0aGlzLml0ZW1Nb2RlbHMoKSA6IHRoaXMuaXRlbU1vZGVscyApXG4gICAgICAgIFxuICAgICAgICBpZiggdGhpcy5mZXRjaCApIHRoaXMuZmV0Y2hJdGVtcygpXG4gICAgfSxcblxuICAgIHJlbW92ZUl0ZW0oIGl0ZW0gKSB7XG4gICAgICAgIGlmKCB0aGlzLml0ZW1WaWV3c1sgaXRlbS5pZCBdLnRlbXBsYXRlRGF0YS5jb250YWluZXIuaGFzQ2xhc3MoJ3NlbGVjdGVkJykgKSB0aGlzLnVuc2VsZWN0SXRlbSggaXRlbSApXG4gICAgICAgIHRoaXMuaXRlbVZpZXdzWyBpdGVtLmlkIF0uZGVsZXRlKClcbiAgICAgICAgZGVsZXRlIHRoaXMuaXRlbVZpZXdzWyBpdGVtLmlkIF1cbiAgICB9LFxuXG4gICAgcmVPcmRlckRPTTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmdldEl0ZW1WaWV3T3B0aW9ucygpLmNvbnRhaW5lciB8fCB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKCBpdGVtID0+IGNvbnRhaW5lclsgKCB0aGlzLnJldmVyc2VTb3J0ICkgPyAncHJlcGVuZCcgOiAnYXBwZW5kJyBdKCB0aGlzLml0ZW1WaWV3c1tpdGVtLmlkXS50ZW1wbGF0ZURhdGEuY29udGFpbmVyICkgKVxuICAgIH0sXG5cbiAgICBzY3JvbGxUb0JvdHRvbTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoZWlnaHRcblxuICAgICAgICB2YXIgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLm91dGVySGVpZ2h0KCB0cnVlICk7XG4gICAgICAgICAgICBpZiggaGVpZ2h0ID09PSBuZXdIZWlnaHQgKXsgICAgXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCggaW50ZXJ2YWxJZCApO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnNjcm9sbFRvcCggdGhpcy5jb250YWluZXIucHJvcCgnc2Nyb2xsSGVpZ2h0JykgKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLnRlbXBsYXRlRGF0YS5jb250YWluZXIub3V0ZXJIZWlnaHQoIHRydWUgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwICk7XG5cbiAgICB9LFxuXG4gICAgc2VsZWN0SXRlbSggbW9kZWwgKSB7XG4gICAgICAgIHZhciBzZWxlY3RlZElkcyA9IE9iamVjdC5rZXlzKCB0aGlzLnNlbGVjdGVkSXRlbXMgKVxuXG4gICAgICAgIGlmKCAoIHRoaXMucHJlc3NlZEtleSA9PT0gdW5kZWZpbmVkICYmIHRoaXMuc2VsZWN0aW9uID09PSAnbXVsdGlDb21wbGV4JyApIHx8IHRoaXMuc2VsZWN0aW9uID09PSAnc2luZ2xlJyApIHtcbiAgICAgICAgICAgIHNlbGVjdGVkSWRzLmZvckVhY2goIGlkID0+IHRoaXMudW5zZWxlY3RJdGVtKCB0aGlzLnNlbGVjdGVkSXRlbXNbIGlkIF0gKSApIFxuICAgICAgICB9XG4gICAgICAgXG4gICAgICAgIGlmKCB0aGlzLnByZXNzZWRLZXkgPT09ICdzaGlmdCcgJiYgc2VsZWN0ZWRJZHMubGVuZ3RoICkgeyBcbiAgICAgICAgICAgIGxldCBlbmQgPSB0aGlzLmdldENsb3Nlc3RDbGlja2VkSW5kZXgoIG1vZGVsICksXG4gICAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzLml0ZW1zLmluZGV4T2YoIG1vZGVsIClcblxuICAgICAgICAgICAgdGhpcy5fLnJhbmdlKCBzdGFydCwgZW5kLCAoIHN0YXJ0IDwgZW5kICkgPyAxIDogLTEgKS5mb3JFYWNoKCBpbmRleCA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1Ub1NlbGVjdCA9IHRoaXMuaXRlbXMuYXQoIGluZGV4IClcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1WaWV3c1sgaXRlbVRvU2VsZWN0LmlkIF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0ZWQnKVxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtc1sgaXRlbVRvU2VsZWN0LmlkIF0gPSBpdGVtVG9TZWxlY3RcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoICdpdGVtU2VsZWN0ZWQnLCBpdGVtVG9TZWxlY3QgKVxuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbVZpZXdzWyBtb2RlbC5pZCBdLnRlbXBsYXRlRGF0YS5jb250YWluZXIuYWRkQ2xhc3MoJ3NlbGVjdGVkJylcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtc1sgbW9kZWwuaWQgXSA9IG1vZGVsXG4gICAgICAgICAgICB0aGlzLmVtaXQoICdpdGVtU2VsZWN0ZWQnLCBtb2RlbCApXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdW5zZWxlY3RJdGVtOiBmdW5jdGlvbiggbW9kZWwgKSB7XG5cbiAgICAgICAgdGhpcy5pdGVtVmlld3NbIG1vZGVsLmlkIF0udGVtcGxhdGVEYXRhLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLnNlbGVjdGVkSXRlbXNbIG1vZGVsLmlkIF1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuZW1pdCggJ2l0ZW1VbnNlbGVjdGVkJywgbW9kZWwgKVxuICAgIH1cblxufSApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RWaWV3XG4iLCJ2YXIgTXlWaWV3ID0gcmVxdWlyZSgnLi4vTXlWaWV3JyksXG4gICAgTGlzdEl0ZW0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIE15Vmlldy5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBMaXN0SXRlbS5wcm90b3R5cGUsIE15Vmlldy5wcm90b3R5cGUsIHtcblxuICAgIGdldFRlbXBsYXRlT3B0aW9ucygpIHsgcmV0dXJuIHRoaXMubW9kZWwuYXR0cmlidXRlcyB9LFxuXG5cdHBvc3RSZW5kZXIoKSB7XG5cdFx0aWYoIHRoaXMuc2VsZWN0aW9uICkgdGhpcy50ZW1wbGF0ZURhdGEuY29udGFpbmVyLm9uKCAnY2xpY2snLCAoKSA9PiB0aGlzLmVtaXQoICdjbGlja2VkJywgdGhpcy5tb2RlbCApIClcblx0fVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0SXRlbVxuIiwidmFyIExpc3QgPSByZXF1aXJlKCcuL0xpc3QnKSxcbiAgICBUYWJsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gTGlzdC5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfVxuXG5PYmplY3QuYXNzaWduKCBUYWJsZS5wcm90b3R5cGUsIExpc3QucHJvdG90eXBlLCB7XG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgJ2hlYWRlcic6IHsgZXZlbnQ6ICdjbGljaycsIHNlbGVjdG9yOiAndGgnLCBtZXRob2Q6ICdzb3J0QnlIZWFkZXInIH1cbiAgICB9LFxuXG4gICAgZ2V0SXRlbVZpZXdPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4geyBjb250YWluZXI6IHRoaXMudGVtcGxhdGVEYXRhLmJvZHksIGZpZWxkczogdGhpcy5maWVsZHMsIGltYWdlTG9hZGVyOiB0aGlzLmltYWdlTG9hZGVyLCBzcGlubmVyOiB0aGlzLnNwaW5uZXIgfVxuICAgIH0sXG5cbiAgICBnZXRUZW1wbGF0ZU9wdGlvbnMoKSB7IHJldHVybiB7IGZpZWxkczogdGhpcy5maWVsZHMgfSB9LFxuXG4gICAgc29ydEJ5SGVhZGVyOiBmdW5jdGlvbiggZSApIHtcblxuICAgICAgICB2YXIgY29tcGFyYXRvciA9IHRoaXMuJChlLmN1cnJlbnRUYXJnZXQpLmF0dHIoICdkYXRhLXNvcnQnIClcblxuICAgICAgICB0aGlzLnJldmVyc2VTb3J0ID0gKCAoIGNvbXBhcmF0b3IgPT09IHRoaXMuaXRlbXMuY29tcGFyYXRvciApICYmICggdGhpcy5yZXZlcnNlU29ydCA9PT0gZmFsc2UgKSApID8gdHJ1ZSA6IGZhbHNlXG5cbiAgICAgICAgdGhpcy5pdGVtcy5jb21wYXJhdG9yID0gY29tcGFyYXRvclxuXG4gICAgICAgIHRoaXMuaXRlbXMuc29ydCgpICAgICAgICBcbiAgICB9LFxuXG4gICAgdGVtcGxhdGVzOiB7XG4gICAgICAgIGhlYWRlckNvbHVtbjogZnVuY3Rpb24oIGRhdGEgKSB7IHJldHVybiB0aGlzLnV0aWwuZm9ybWF0KCAnPHRoIGNsYXNzPVwidyVzICVzXCIgZGF0YS1zb3J0PVwiJXNcIj4lczwvdGg+JywgZGF0YS53aWR0aCwgZGF0YS5uYW1lLCBkYXRhLm5hbWUsIGRhdGEubGFiZWwgKSB9XG4gICAgfVxuXG59IClcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZVxuIiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKCB7IH0sIHJlcXVpcmUoJy4vTXlPYmplY3QnKS5wcm90b3R5cGUsIHtcblxuICAgIENyZWF0ZURlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZXIoIHRoaXMuYXR0cmlidXRlcywgYXR0ciA9PiAoIHsgW2F0dHIubmFtZV06IHR5cGVvZiBhdHRyLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgPyBhdHRyLmRlZmF1bHQoKSA6IGF0dHIuZGVmYXVsdCB9ICkgKVxuICAgIH0sXG5cbiAgICBhdHRyaWJ1dGVzOiBbIF0sXG5cbiAgICBkYXRhOiB7IH0sXG5cbiAgICBjb25zdHJ1Y3RvciggZGF0YT17fSwgb3B0cz17fSApIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbiggdGhpcywgeyBzdG9yZTogeyB9LCBkYXRhIH0sIG9wdHMgKVxuXG4gICAgICAgIGlmKCB0aGlzLnN0b3JlQnkgKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlQnkuZm9yRWFjaCgga2V5ID0+IHRoaXMuc3RvcmVbIGtleSBdID0geyB9IClcbiAgICAgICAgICAgIHRoaXMuX3N0b3JlKClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIG1ldGE6IHsgfSxcblxuICAgIHNvcnQoIG9wdHMgKSB7XG4gICAgICAgIGNvbnN0IGF0dHIgPSBPYmplY3Qua2V5cyggb3B0cyApWzBdLFxuICAgICAgICAgICAgdmFsdWUgPSBvcHRzW2F0dHJdO1xuXG4gICAgICAgIHRoaXMuZGF0YS5zb3J0KCAoIGEsIGIgKSA9PlxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICA/IGFbYXR0cl0gPCBiW2F0dHJdID8gLTEgOiAxXG4gICAgICAgICAgICAgICAgOiBiW2F0dHJdIDwgYVthdHRyXSA/IC0xIDogMVxuICAgICAgICApXG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuXG4gICAgX3Jlc2V0U3RvcmUoIHN0b3JlQnkgKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSB7IH1cbiAgICAgICAgc3RvcmVCeS5mb3JFYWNoKCBhdHRyID0+IHRoaXMuc3RvcmVbIGF0dHIgXSA9IHsgfSApXG4gICAgICAgIHRoaXMuc3RvcmVCeSA9IHN0b3JlQnlcbiAgICB9LFxuXG4gICAgX3N0b3JlKCBkYXRhICkge1xuICAgICAgICBkYXRhID0gZGF0YSB8fCB0aGlzLmRhdGFcbiAgICAgICAgZGF0YS5mb3JFYWNoKCBkYXR1bSA9PiB0aGlzLnN0b3JlQnkuZm9yRWFjaCggYXR0ciA9PiB0aGlzLl9zdG9yZUF0dHIoIGRhdHVtLCBhdHRyICkgKSApXG4gICAgfSxcblxuICAgIF9zdG9yZUF0dHIoIGRhdHVtLCBhdHRyICkge1xuICAgICAgICB0aGlzLnN0b3JlWyBhdHRyIF1bIGRhdHVtWyBhdHRyIF0gXSA9XG4gICAgICAgICAgICB0aGlzLnN0b3JlWyBhdHRyIF1bIGRhdHVtWyBhdHRyIF0gXVxuICAgICAgICAgICAgICAgID8gQXJyYXkuaXNBcnJheSggdGhpcy5zdG9yZVsgYXR0ciBdWyBkYXR1bVsgYXR0ciBdIF0gKVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc3RvcmVbIGF0dHIgXVsgZGF0dW1bIGF0dHIgXSBdLmNvbmNhdCggZGF0dW0gKVxuICAgICAgICAgICAgICAgICAgICA6WyB0aGlzLnN0b3JlWyBhdHRyIF1bIGRhdHVtWyBhdHRyIF0gXSwgZGF0dW0gXVxuICAgICAgICAgICAgICAgIDogZGF0dW1cbiAgICB9LFxuXG4gICAgX3N0b3JlT25lKCBkYXR1bSApIHtcbiAgICAgICAgdGhpcy5zdG9yZUJ5LmZvckVhY2goIGF0dHIgPT4gdGhpcy5fc3RvcmVBdHRyKCBkYXR1bSwgYXR0ciApIClcbiAgICB9XG5cbn0gKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBlcnIgPT4geyBjb25zb2xlLmxvZyggZXJyLnN0YWNrIHx8IGVyciApIH1cbiIsInZhciBNeU9iamVjdCA9IGZ1bmN0aW9uKCBkYXRhICkgeyByZXR1cm4gT2JqZWN0LmFzc2lnbiggdGhpcywgZGF0YSApIH1cblxuT2JqZWN0LmFzc2lnbiggTXlPYmplY3QucHJvdG90eXBlLCB7XG5cbiAgICBFcnJvcjogcmVxdWlyZSgnLi9NeUVycm9yJyksXG5cbiAgICBfOiByZXF1aXJlKCd1bmRlcnNjb3JlJyksXG5cbiAgICBmb3JtYXQ6IHJlcXVpcmUoJ3V0aWwnKS5mb3JtYXQsXG5cbiAgICBtb21lbnQ6IHJlcXVpcmUoJ21vbWVudCcpLFxuXG4gICAgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyOiBzdHJpbmcgPT4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpLFxuXG4gICAgZ2V0SW50UmFuZ2UoIGludCApIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oIEFycmF5KCBpbnQgKS5rZXlzKCkgKVxuICAgIH0sXG5cbiAgICBnZXRSYW5kb21JbmNsdXNpdmVJbnRlZ2VyKCBtaW4sIG1heCApIHtcbiAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbilcbiAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluXG4gICAgfSxcblxuICAgIG9taXQoIG9iaiwga2V5cyApIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKCBvYmogKS5maWx0ZXIoIGtleSA9PiAha2V5cy5pbmNsdWRlcygga2V5ICkgKS5yZWR1Y2UoICggbWVtbywga2V5ICkgPT4gT2JqZWN0LmFzc2lnbiggbWVtbywgeyBba2V5XTogb2JqW2tleV0gfSApLCB7IH0gKVxuICAgIH0sXG5cbiAgICBmZFBpY2soIG9iaiwga2V5cyApIHtcbiAgICAgICAgcmV0dXJuIGtleXMucmVkdWNlKCAoIG1lbW8sIGtleSApID0+IE9iamVjdC5hc3NpZ24oIG1lbW8sIHsgW2tleV06IG9ialtrZXldIH0gKSwgeyB9IClcbiAgICB9LFxuXG4gICAgcmVkdWNlciggYXJyLCBmbiApIHsgcmV0dXJuIGFyci5yZWR1Y2UoICggbWVtbywgaXRlbSwgaSApID0+IE9iamVjdC5hc3NpZ24oIG1lbW8sIGZuKCBpdGVtLCBpICkgKSwgeyB9ICkgfSxcblxuICAgIHNodWZmbGVBcnJheSggYXJyICkge1xuICAgICAgICBjb25zdCBydiA9IEFycmF5LmZyb20oIGFyciApXG4gICAgICAgXG4gICAgICAgIHJ2LmZvckVhY2goICggaXRlbSwgaSApID0+IHtcbiAgICAgICAgICAgIGlmKCBpID09PSBydi5sZW5ndGggLSAxICkgcmV0dXJuIFxuICAgICAgICAgICAgY29uc3QgaW50ID0gdGhpcy5nZXRSYW5kb21JbmNsdXNpdmVJbnRlZ2VyKCBpLCBydi5sZW5ndGggLSAxICksXG4gICAgICAgICAgICAgICAgaG9sZGVyID0gcnZbIGkgXVxuXG4gICAgICAgICAgICBydltpXSA9IHJ2W2ludF1cbiAgICAgICAgICAgIHJ2W2ludF0gPSBob2xkZXJcbiAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIHJ2XG4gICAgfSxcblxuICAgIFA6ICggZnVuLCBhcmdzPVsgXSwgdGhpc0FyZyApID0+XG4gICAgICAgIG5ldyBQcm9taXNlKCAoIHJlc29sdmUsIHJlamVjdCApID0+IFJlZmxlY3QuYXBwbHkoIGZ1biwgdGhpc0FyZyB8fCB0aGlzLCBhcmdzLmNvbmNhdCggKCBlLCAuLi5jYWxsYmFjayApID0+IGUgPyByZWplY3QoZSkgOiByZXNvbHZlKGNhbGxiYWNrKSApICkgKSxcblxuICAgIFE6IHJlcXVpcmUoJ3EnKVxuICAgIFxufSApXG5cbm1vZHVsZS5leHBvcnRzID0gTXlPYmplY3RcbiIsIi8qKiB2aW06IGV0OnRzPTQ6c3c9NDpzdHM9NFxuICogQGxpY2Vuc2UgYW1kZWZpbmUgMS4wLjEgQ29weXJpZ2h0IChjKSAyMDExLTIwMTYsIFRoZSBEb2pvIEZvdW5kYXRpb24gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIEF2YWlsYWJsZSB2aWEgdGhlIE1JVCBvciBuZXcgQlNEIGxpY2Vuc2UuXG4gKiBzZWU6IGh0dHA6Ly9naXRodWIuY29tL2pyYnVya2UvYW1kZWZpbmUgZm9yIGRldGFpbHNcbiAqL1xuXG4vKmpzbGludCBub2RlOiB0cnVlICovXG4vKmdsb2JhbCBtb2R1bGUsIHByb2Nlc3MgKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVmaW5lIGZvciBub2RlLlxuICogQHBhcmFtIHtPYmplY3R9IG1vZHVsZSB0aGUgXCJtb2R1bGVcIiBvYmplY3QgdGhhdCBpcyBkZWZpbmVkIGJ5IE5vZGUgZm9yIHRoZVxuICogY3VycmVudCBtb2R1bGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVxdWlyZUZuXS4gTm9kZSdzIHJlcXVpcmUgZnVuY3Rpb24gZm9yIHRoZSBjdXJyZW50IG1vZHVsZS5cbiAqIEl0IG9ubHkgbmVlZHMgdG8gYmUgcGFzc2VkIGluIE5vZGUgdmVyc2lvbnMgYmVmb3JlIDAuNSwgd2hlbiBtb2R1bGUucmVxdWlyZVxuICogZGlkIG5vdCBleGlzdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBkZWZpbmUgZnVuY3Rpb24gdGhhdCBpcyB1c2FibGUgZm9yIHRoZSBjdXJyZW50IG5vZGVcbiAqIG1vZHVsZS5cbiAqL1xuZnVuY3Rpb24gYW1kZWZpbmUobW9kdWxlLCByZXF1aXJlRm4pIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIGRlZmluZUNhY2hlID0ge30sXG4gICAgICAgIGxvYWRlckNhY2hlID0ge30sXG4gICAgICAgIGFscmVhZHlDYWxsZWQgPSBmYWxzZSxcbiAgICAgICAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKSxcbiAgICAgICAgbWFrZVJlcXVpcmUsIHN0cmluZ1JlcXVpcmU7XG5cbiAgICAvKipcbiAgICAgKiBUcmltcyB0aGUgLiBhbmQgLi4gZnJvbSBhbiBhcnJheSBvZiBwYXRoIHNlZ21lbnRzLlxuICAgICAqIEl0IHdpbGwga2VlcCBhIGxlYWRpbmcgcGF0aCBzZWdtZW50IGlmIGEgLi4gd2lsbCBiZWNvbWVcbiAgICAgKiB0aGUgZmlyc3QgcGF0aCBzZWdtZW50LCB0byBoZWxwIHdpdGggbW9kdWxlIG5hbWUgbG9va3VwcyxcbiAgICAgKiB3aGljaCBhY3QgbGlrZSBwYXRocywgYnV0IGNhbiBiZSByZW1hcHBlZC4gQnV0IHRoZSBlbmQgcmVzdWx0LFxuICAgICAqIGFsbCBwYXRocyB0aGF0IHVzZSB0aGlzIGZ1bmN0aW9uIHNob3VsZCBsb29rIG5vcm1hbGl6ZWQuXG4gICAgICogTk9URTogdGhpcyBtZXRob2QgTU9ESUZJRVMgdGhlIGlucHV0IGFycmF5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyeSB0aGUgYXJyYXkgb2YgcGF0aCBzZWdtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRG90cyhhcnkpIHtcbiAgICAgICAgdmFyIGksIHBhcnQ7XG4gICAgICAgIGZvciAoaSA9IDA7IGFyeVtpXTsgaSs9IDEpIHtcbiAgICAgICAgICAgIHBhcnQgPSBhcnlbaV07XG4gICAgICAgICAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICAgICAgICAgICAgYXJ5LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMSAmJiAoYXJ5WzJdID09PSAnLi4nIHx8IGFyeVswXSA9PT0gJy4uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9FbmQgb2YgdGhlIGxpbmUuIEtlZXAgYXQgbGVhc3Qgb25lIG5vbi1kb3RcbiAgICAgICAgICAgICAgICAgICAgLy9wYXRoIHNlZ21lbnQgYXQgdGhlIGZyb250IHNvIGl0IGNhbiBiZSBtYXBwZWRcbiAgICAgICAgICAgICAgICAgICAgLy9jb3JyZWN0bHkgdG8gZGlzay4gT3RoZXJ3aXNlLCB0aGVyZSBpcyBsaWtlbHlcbiAgICAgICAgICAgICAgICAgICAgLy9ubyBwYXRoIG1hcHBpbmcgZm9yIGEgcGF0aCBzdGFydGluZyB3aXRoICcuLicuXG4gICAgICAgICAgICAgICAgICAgIC8vVGhpcyBjYW4gc3RpbGwgZmFpbCwgYnV0IGNhdGNoZXMgdGhlIG1vc3QgcmVhc29uYWJsZVxuICAgICAgICAgICAgICAgICAgICAvL3VzZXMgb2YgLi5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBhcnkuc3BsaWNlKGkgLSAxLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgaSAtPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZShuYW1lLCBiYXNlTmFtZSkge1xuICAgICAgICB2YXIgYmFzZVBhcnRzO1xuXG4gICAgICAgIC8vQWRqdXN0IGFueSByZWxhdGl2ZSBwYXRocy5cbiAgICAgICAgaWYgKG5hbWUgJiYgbmFtZS5jaGFyQXQoMCkgPT09ICcuJykge1xuICAgICAgICAgICAgLy9JZiBoYXZlIGEgYmFzZSBuYW1lLCB0cnkgdG8gbm9ybWFsaXplIGFnYWluc3QgaXQsXG4gICAgICAgICAgICAvL290aGVyd2lzZSwgYXNzdW1lIGl0IGlzIGEgdG9wLWxldmVsIHJlcXVpcmUgdGhhdCB3aWxsXG4gICAgICAgICAgICAvL2JlIHJlbGF0aXZlIHRvIGJhc2VVcmwgaW4gdGhlIGVuZC5cbiAgICAgICAgICAgIGlmIChiYXNlTmFtZSkge1xuICAgICAgICAgICAgICAgIGJhc2VQYXJ0cyA9IGJhc2VOYW1lLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICAgICAgYmFzZVBhcnRzID0gYmFzZVBhcnRzLnNsaWNlKDAsIGJhc2VQYXJ0cy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICBiYXNlUGFydHMgPSBiYXNlUGFydHMuY29uY2F0KG5hbWUuc3BsaXQoJy8nKSk7XG4gICAgICAgICAgICAgICAgdHJpbURvdHMoYmFzZVBhcnRzKTtcbiAgICAgICAgICAgICAgICBuYW1lID0gYmFzZVBhcnRzLmpvaW4oJy8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgbm9ybWFsaXplKCkgZnVuY3Rpb24gcGFzc2VkIHRvIGEgbG9hZGVyIHBsdWdpbidzXG4gICAgICogbm9ybWFsaXplIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYWtlTm9ybWFsaXplKHJlbE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplKG5hbWUsIHJlbE5hbWUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VMb2FkKGlkKSB7XG4gICAgICAgIGZ1bmN0aW9uIGxvYWQodmFsdWUpIHtcbiAgICAgICAgICAgIGxvYWRlckNhY2hlW2lkXSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9hZC5mcm9tVGV4dCA9IGZ1bmN0aW9uIChpZCwgdGV4dCkge1xuICAgICAgICAgICAgLy9UaGlzIG9uZSBpcyBkaWZmaWN1bHQgYmVjYXVzZSB0aGUgdGV4dCBjYW4vcHJvYmFibHkgdXNlc1xuICAgICAgICAgICAgLy9kZWZpbmUsIGFuZCBhbnkgcmVsYXRpdmUgcGF0aHMgYW5kIHJlcXVpcmVzIHNob3VsZCBiZSByZWxhdGl2ZVxuICAgICAgICAgICAgLy90byB0aGF0IGlkIHdhcyBpdCB3b3VsZCBiZSBmb3VuZCBvbiBkaXNrLiBCdXQgdGhpcyB3b3VsZCByZXF1aXJlXG4gICAgICAgICAgICAvL2Jvb3RzdHJhcHBpbmcgYSBtb2R1bGUvcmVxdWlyZSBmYWlybHkgZGVlcGx5IGZyb20gbm9kZSBjb3JlLlxuICAgICAgICAgICAgLy9Ob3Qgc3VyZSBob3cgYmVzdCB0byBnbyBhYm91dCB0aGF0IHlldC5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYW1kZWZpbmUgZG9lcyBub3QgaW1wbGVtZW50IGxvYWQuZnJvbVRleHQnKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbG9hZDtcbiAgICB9XG5cbiAgICBtYWtlUmVxdWlyZSA9IGZ1bmN0aW9uIChzeXN0ZW1SZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUsIHJlbElkKSB7XG4gICAgICAgIGZ1bmN0aW9uIGFtZFJlcXVpcmUoZGVwcywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGVwcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAvL1N5bmNocm9ub3VzLCBzaW5nbGUgbW9kdWxlIHJlcXVpcmUoJycpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1JlcXVpcmUoc3lzdGVtUmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlLCBkZXBzLCByZWxJZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vQXJyYXkgb2YgZGVwZW5kZW5jaWVzIHdpdGggYSBjYWxsYmFjay5cblxuICAgICAgICAgICAgICAgIC8vQ29udmVydCB0aGUgZGVwZW5kZW5jaWVzIHRvIG1vZHVsZXMuXG4gICAgICAgICAgICAgICAgZGVwcyA9IGRlcHMubWFwKGZ1bmN0aW9uIChkZXBOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdSZXF1aXJlKHN5c3RlbVJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSwgZGVwTmFtZSwgcmVsSWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9XYWl0IGZvciBuZXh0IHRpY2sgdG8gY2FsbCBiYWNrIHRoZSByZXF1aXJlIGNhbGwuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgZGVwcyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFtZFJlcXVpcmUudG9VcmwgPSBmdW5jdGlvbiAoZmlsZVBhdGgpIHtcbiAgICAgICAgICAgIGlmIChmaWxlUGF0aC5pbmRleE9mKCcuJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplKGZpbGVQYXRoLCBwYXRoLmRpcm5hbWUobW9kdWxlLmZpbGVuYW1lKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlUGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gYW1kUmVxdWlyZTtcbiAgICB9O1xuXG4gICAgLy9GYXZvciBleHBsaWNpdCB2YWx1ZSwgcGFzc2VkIGluIGlmIHRoZSBtb2R1bGUgd2FudHMgdG8gc3VwcG9ydCBOb2RlIDAuNC5cbiAgICByZXF1aXJlRm4gPSByZXF1aXJlRm4gfHwgZnVuY3Rpb24gcmVxKCkge1xuICAgICAgICByZXR1cm4gbW9kdWxlLnJlcXVpcmUuYXBwbHkobW9kdWxlLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBydW5GYWN0b3J5KGlkLCBkZXBzLCBmYWN0b3J5KSB7XG4gICAgICAgIHZhciByLCBlLCBtLCByZXN1bHQ7XG5cbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICBlID0gbG9hZGVyQ2FjaGVbaWRdID0ge307XG4gICAgICAgICAgICBtID0ge1xuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICB1cmk6IF9fZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgZXhwb3J0czogZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHIgPSBtYWtlUmVxdWlyZShyZXF1aXJlRm4sIGUsIG0sIGlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vT25seSBzdXBwb3J0IG9uZSBkZWZpbmUgY2FsbCBwZXIgZmlsZVxuICAgICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FtZGVmaW5lIHdpdGggbm8gbW9kdWxlIElEIGNhbm5vdCBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgcGVyIGZpbGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgLy9Vc2UgdGhlIHJlYWwgdmFyaWFibGVzIGZyb20gbm9kZVxuICAgICAgICAgICAgLy9Vc2UgbW9kdWxlLmV4cG9ydHMgZm9yIGV4cG9ydHMsIHNpbmNlXG4gICAgICAgICAgICAvL3RoZSBleHBvcnRzIGluIGhlcmUgaXMgYW1kZWZpbmUgZXhwb3J0cy5cbiAgICAgICAgICAgIGUgPSBtb2R1bGUuZXhwb3J0cztcbiAgICAgICAgICAgIG0gPSBtb2R1bGU7XG4gICAgICAgICAgICByID0gbWFrZVJlcXVpcmUocmVxdWlyZUZuLCBlLCBtLCBtb2R1bGUuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9JZiB0aGVyZSBhcmUgZGVwZW5kZW5jaWVzLCB0aGV5IGFyZSBzdHJpbmdzLCBzbyBuZWVkXG4gICAgICAgIC8vdG8gY29udmVydCB0aGVtIHRvIGRlcGVuZGVuY3kgdmFsdWVzLlxuICAgICAgICBpZiAoZGVwcykge1xuICAgICAgICAgICAgZGVwcyA9IGRlcHMubWFwKGZ1bmN0aW9uIChkZXBOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIoZGVwTmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQ2FsbCB0aGUgZmFjdG9yeSB3aXRoIHRoZSByaWdodCBkZXBlbmRlbmNpZXMuXG4gICAgICAgIGlmICh0eXBlb2YgZmFjdG9yeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFjdG9yeS5hcHBseShtLmV4cG9ydHMsIGRlcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFjdG9yeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgbG9hZGVyQ2FjaGVbaWRdID0gbS5leHBvcnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RyaW5nUmVxdWlyZSA9IGZ1bmN0aW9uIChzeXN0ZW1SZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUsIGlkLCByZWxJZCkge1xuICAgICAgICAvL1NwbGl0IHRoZSBJRCBieSBhICEgc28gdGhhdFxuICAgICAgICB2YXIgaW5kZXggPSBpZC5pbmRleE9mKCchJyksXG4gICAgICAgICAgICBvcmlnaW5hbElkID0gaWQsXG4gICAgICAgICAgICBwcmVmaXgsIHBsdWdpbjtcblxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBpZCA9IG5vcm1hbGl6ZShpZCwgcmVsSWQpO1xuXG4gICAgICAgICAgICAvL1N0cmFpZ2h0IG1vZHVsZSBsb29rdXAuIElmIGl0IGlzIG9uZSBvZiB0aGUgc3BlY2lhbCBkZXBlbmRlbmNpZXMsXG4gICAgICAgICAgICAvL2RlYWwgd2l0aCBpdCwgb3RoZXJ3aXNlLCBkZWxlZ2F0ZSB0byBub2RlLlxuICAgICAgICAgICAgaWYgKGlkID09PSAncmVxdWlyZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVJlcXVpcmUoc3lzdGVtUmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlLCByZWxJZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlkID09PSAnZXhwb3J0cycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWQgPT09ICdtb2R1bGUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG9hZGVyQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlckNhY2hlW2lkXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVmaW5lQ2FjaGVbaWRdKSB7XG4gICAgICAgICAgICAgICAgcnVuRmFjdG9yeS5hcHBseShudWxsLCBkZWZpbmVDYWNoZVtpZF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkZXJDYWNoZVtpZF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKHN5c3RlbVJlcXVpcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5c3RlbVJlcXVpcmUob3JpZ2luYWxJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb2R1bGUgd2l0aCBJRDogJyArIGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL1RoZXJlIGlzIGEgcGx1Z2luIGluIHBsYXkuXG4gICAgICAgICAgICBwcmVmaXggPSBpZC5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuICAgICAgICAgICAgaWQgPSBpZC5zdWJzdHJpbmcoaW5kZXggKyAxLCBpZC5sZW5ndGgpO1xuXG4gICAgICAgICAgICBwbHVnaW4gPSBzdHJpbmdSZXF1aXJlKHN5c3RlbVJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSwgcHJlZml4LCByZWxJZCk7XG5cbiAgICAgICAgICAgIGlmIChwbHVnaW4ubm9ybWFsaXplKSB7XG4gICAgICAgICAgICAgICAgaWQgPSBwbHVnaW4ubm9ybWFsaXplKGlkLCBtYWtlTm9ybWFsaXplKHJlbElkKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vTm9ybWFsaXplIHRoZSBJRCBub3JtYWxseS5cbiAgICAgICAgICAgICAgICBpZCA9IG5vcm1hbGl6ZShpZCwgcmVsSWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobG9hZGVyQ2FjaGVbaWRdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlckNhY2hlW2lkXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGx1Z2luLmxvYWQoaWQsIG1ha2VSZXF1aXJlKHN5c3RlbVJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSwgcmVsSWQpLCBtYWtlTG9hZChpZCksIHt9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkZXJDYWNoZVtpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy9DcmVhdGUgYSBkZWZpbmUgZnVuY3Rpb24gc3BlY2lmaWMgdG8gdGhlIG1vZHVsZSBhc2tpbmcgZm9yIGFtZGVmaW5lLlxuICAgIGZ1bmN0aW9uIGRlZmluZShpZCwgZGVwcywgZmFjdG9yeSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICAgICAgICAgIGZhY3RvcnkgPSBkZXBzO1xuICAgICAgICAgICAgZGVwcyA9IGlkO1xuICAgICAgICAgICAgaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZmFjdG9yeSA9IGlkO1xuICAgICAgICAgICAgaWQgPSBkZXBzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlcHMgJiYgIUFycmF5LmlzQXJyYXkoZGVwcykpIHtcbiAgICAgICAgICAgIGZhY3RvcnkgPSBkZXBzO1xuICAgICAgICAgICAgZGVwcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGVwcykge1xuICAgICAgICAgICAgZGVwcyA9IFsncmVxdWlyZScsICdleHBvcnRzJywgJ21vZHVsZSddO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9TZXQgdXAgcHJvcGVydGllcyBmb3IgdGhpcyBtb2R1bGUuIElmIGFuIElELCB0aGVuIHVzZVxuICAgICAgICAvL2ludGVybmFsIGNhY2hlLiBJZiBubyBJRCwgdGhlbiB1c2UgdGhlIGV4dGVybmFsIHZhcmlhYmxlc1xuICAgICAgICAvL2ZvciB0aGlzIG5vZGUgbW9kdWxlLlxuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIC8vUHV0IHRoZSBtb2R1bGUgaW4gZGVlcCBmcmVlemUgdW50aWwgdGhlcmUgaXMgYVxuICAgICAgICAgICAgLy9yZXF1aXJlIGNhbGwgZm9yIGl0LlxuICAgICAgICAgICAgZGVmaW5lQ2FjaGVbaWRdID0gW2lkLCBkZXBzLCBmYWN0b3J5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJ1bkZhY3RvcnkoaWQsIGRlcHMsIGZhY3RvcnkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9kZWZpbmUucmVxdWlyZSwgd2hpY2ggaGFzIGFjY2VzcyB0byBhbGwgdGhlIHZhbHVlcyBpbiB0aGVcbiAgICAvL2NhY2hlLiBVc2VmdWwgZm9yIEFNRCBtb2R1bGVzIHRoYXQgYWxsIGhhdmUgSURzIGluIHRoZSBmaWxlLFxuICAgIC8vYnV0IG5lZWQgdG8gZmluYWxseSBleHBvcnQgYSB2YWx1ZSB0byBub2RlIGJhc2VkIG9uIG9uZSBvZiB0aG9zZVxuICAgIC8vSURzLlxuICAgIGRlZmluZS5yZXF1aXJlID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmIChsb2FkZXJDYWNoZVtpZF0pIHtcbiAgICAgICAgICAgIHJldHVybiBsb2FkZXJDYWNoZVtpZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVmaW5lQ2FjaGVbaWRdKSB7XG4gICAgICAgICAgICBydW5GYWN0b3J5LmFwcGx5KG51bGwsIGRlZmluZUNhY2hlW2lkXSk7XG4gICAgICAgICAgICByZXR1cm4gbG9hZGVyQ2FjaGVbaWRdO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZS5hbWQgPSB7fTtcblxuICAgIHJldHVybiBkZWZpbmU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYW1kZWZpbmU7XG4iLCIvLyBUaGlzIGZpbGUgaXMgYXV0b2dlbmVyYXRlZCB2aWEgdGhlIGBjb21tb25qc2AgR3J1bnQgdGFzay4gWW91IGNhbiByZXF1aXJlKCkgdGhpcyBmaWxlIGluIGEgQ29tbW9uSlMgZW52aXJvbm1lbnQuXG5yZXF1aXJlKCcuLi8uLi9qcy90cmFuc2l0aW9uLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2FsZXJ0LmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2J1dHRvbi5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9jYXJvdXNlbC5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9jb2xsYXBzZS5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9kcm9wZG93bi5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9tb2RhbC5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy90b29sdGlwLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL3BvcG92ZXIuanMnKVxucmVxdWlyZSgnLi4vLi4vanMvc2Nyb2xsc3B5LmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL3RhYi5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9hZmZpeC5qcycpIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFmZml4LmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWZmaXhcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBBRkZJWCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQWZmaXggPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBZmZpeC5ERUZBVUxUUywgb3B0aW9ucylcblxuICAgIHRoaXMuJHRhcmdldCA9ICQodGhpcy5vcHRpb25zLnRhcmdldClcbiAgICAgIC5vbignc2Nyb2xsLmJzLmFmZml4LmRhdGEtYXBpJywgJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sIHRoaXMpKVxuICAgICAgLm9uKCdjbGljay5icy5hZmZpeC5kYXRhLWFwaScsICAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AsIHRoaXMpKVxuXG4gICAgdGhpcy4kZWxlbWVudCAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5hZmZpeGVkICAgICAgPSBudWxsXG4gICAgdGhpcy51bnBpbiAgICAgICAgPSBudWxsXG4gICAgdGhpcy5waW5uZWRPZmZzZXQgPSBudWxsXG5cbiAgICB0aGlzLmNoZWNrUG9zaXRpb24oKVxuICB9XG5cbiAgQWZmaXguVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgQWZmaXguUkVTRVQgICAgPSAnYWZmaXggYWZmaXgtdG9wIGFmZml4LWJvdHRvbSdcblxuICBBZmZpeC5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDAsXG4gICAgdGFyZ2V0OiB3aW5kb3dcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pIHtcbiAgICB2YXIgc2Nyb2xsVG9wICAgID0gdGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpXG4gICAgdmFyIHBvc2l0aW9uICAgICA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClcbiAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gdGhpcy4kdGFyZ2V0LmhlaWdodCgpXG5cbiAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwgJiYgdGhpcy5hZmZpeGVkID09ICd0b3AnKSByZXR1cm4gc2Nyb2xsVG9wIDwgb2Zmc2V0VG9wID8gJ3RvcCcgOiBmYWxzZVxuXG4gICAgaWYgKHRoaXMuYWZmaXhlZCA9PSAnYm90dG9tJykge1xuICAgICAgaWYgKG9mZnNldFRvcCAhPSBudWxsKSByZXR1cm4gKHNjcm9sbFRvcCArIHRoaXMudW5waW4gPD0gcG9zaXRpb24udG9wKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICAgIHJldHVybiAoc2Nyb2xsVG9wICsgdGFyZ2V0SGVpZ2h0IDw9IHNjcm9sbEhlaWdodCAtIG9mZnNldEJvdHRvbSkgPyBmYWxzZSA6ICdib3R0b20nXG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyAgID0gdGhpcy5hZmZpeGVkID09IG51bGxcbiAgICB2YXIgY29sbGlkZXJUb3AgICAgPSBpbml0aWFsaXppbmcgPyBzY3JvbGxUb3AgOiBwb3NpdGlvbi50b3BcbiAgICB2YXIgY29sbGlkZXJIZWlnaHQgPSBpbml0aWFsaXppbmcgPyB0YXJnZXRIZWlnaHQgOiBoZWlnaHRcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiBzY3JvbGxUb3AgPD0gb2Zmc2V0VG9wKSByZXR1cm4gJ3RvcCdcbiAgICBpZiAob2Zmc2V0Qm90dG9tICE9IG51bGwgJiYgKGNvbGxpZGVyVG9wICsgY29sbGlkZXJIZWlnaHQgPj0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSkgcmV0dXJuICdib3R0b20nXG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRQaW5uZWRPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucGlubmVkT2Zmc2V0KSByZXR1cm4gdGhpcy5waW5uZWRPZmZzZXRcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKEFmZml4LlJFU0VUKS5hZGRDbGFzcygnYWZmaXgnKVxuICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHJldHVybiAodGhpcy5waW5uZWRPZmZzZXQgPSBwb3NpdGlvbi50b3AgLSBzY3JvbGxUb3ApXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dCgkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcyksIDEpXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHJldHVyblxuXG4gICAgdmFyIGhlaWdodCAgICAgICA9IHRoaXMuJGVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0ICAgICAgID0gdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wXG4gICAgdmFyIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b21cbiAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gTWF0aC5tYXgoJChkb2N1bWVudCkuaGVpZ2h0KCksICQoZG9jdW1lbnQuYm9keSkuaGVpZ2h0KCkpXG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCAhPSAnb2JqZWN0JykgICAgICAgICBvZmZzZXRCb3R0b20gPSBvZmZzZXRUb3AgPSBvZmZzZXRcbiAgICBpZiAodHlwZW9mIG9mZnNldFRvcCA9PSAnZnVuY3Rpb24nKSAgICBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wKHRoaXMuJGVsZW1lbnQpXG4gICAgaWYgKHR5cGVvZiBvZmZzZXRCb3R0b20gPT0gJ2Z1bmN0aW9uJykgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbSh0aGlzLiRlbGVtZW50KVxuXG4gICAgdmFyIGFmZml4ID0gdGhpcy5nZXRTdGF0ZShzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkICE9IGFmZml4KSB7XG4gICAgICBpZiAodGhpcy51bnBpbiAhPSBudWxsKSB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgJycpXG5cbiAgICAgIHZhciBhZmZpeFR5cGUgPSAnYWZmaXgnICsgKGFmZml4ID8gJy0nICsgYWZmaXggOiAnJylcbiAgICAgIHZhciBlICAgICAgICAgPSAkLkV2ZW50KGFmZml4VHlwZSArICcuYnMuYWZmaXgnKVxuXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICB0aGlzLmFmZml4ZWQgPSBhZmZpeFxuICAgICAgdGhpcy51bnBpbiA9IGFmZml4ID09ICdib3R0b20nID8gdGhpcy5nZXRQaW5uZWRPZmZzZXQoKSA6IG51bGxcblxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpXG4gICAgICAgIC5hZGRDbGFzcyhhZmZpeFR5cGUpXG4gICAgICAgIC50cmlnZ2VyKGFmZml4VHlwZS5yZXBsYWNlKCdhZmZpeCcsICdhZmZpeGVkJykgKyAnLmJzLmFmZml4JylcbiAgICB9XG5cbiAgICBpZiAoYWZmaXggPT0gJ2JvdHRvbScpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2Zmc2V0KHtcbiAgICAgICAgdG9wOiBzY3JvbGxIZWlnaHQgLSBoZWlnaHQgLSBvZmZzZXRCb3R0b21cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cblxuICAvLyBBRkZJWCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5hZmZpeCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWZmaXgnLCAoZGF0YSA9IG5ldyBBZmZpeCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWZmaXhcblxuICAkLmZuLmFmZml4ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWZmaXguQ29uc3RydWN0b3IgPSBBZmZpeFxuXG5cbiAgLy8gQUZGSVggTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFmZml4Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hZmZpeCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFGRklYIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cImFmZml4XCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhID0gJHNweS5kYXRhKClcblxuICAgICAgZGF0YS5vZmZzZXQgPSBkYXRhLm9mZnNldCB8fCB7fVxuXG4gICAgICBpZiAoZGF0YS5vZmZzZXRCb3R0b20gIT0gbnVsbCkgZGF0YS5vZmZzZXQuYm90dG9tID0gZGF0YS5vZmZzZXRCb3R0b21cbiAgICAgIGlmIChkYXRhLm9mZnNldFRvcCAgICAhPSBudWxsKSBkYXRhLm9mZnNldC50b3AgICAgPSBkYXRhLm9mZnNldFRvcFxuXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCBkYXRhKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBhbGVydC5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2FsZXJ0c1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFMRVJUIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBkaXNtaXNzID0gJ1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXSdcbiAgdmFyIEFsZXJ0ICAgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAkKGVsKS5vbignY2xpY2snLCBkaXNtaXNzLCB0aGlzLmNsb3NlKVxuICB9XG5cbiAgQWxlcnQuVkVSU0lPTiA9ICczLjMuNSdcblxuICBBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgQWxlcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICAgPSAkKHRoaXMpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9ICQoc2VsZWN0b3IpXG5cbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAkcGFyZW50ID0gJHRoaXMuY2xvc2VzdCgnLmFsZXJ0JylcbiAgICB9XG5cbiAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2Nsb3NlLmJzLmFsZXJ0JykpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KCkge1xuICAgICAgLy8gZGV0YWNoIGZyb20gcGFyZW50LCBmaXJlIGV2ZW50IHRoZW4gY2xlYW4gdXAgZGF0YVxuICAgICAgJHBhcmVudC5kZXRhY2goKS50cmlnZ2VyKCdjbG9zZWQuYnMuYWxlcnQnKS5yZW1vdmUoKVxuICAgIH1cblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICRwYXJlbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAkcGFyZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIHJlbW92ZUVsZW1lbnQpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICByZW1vdmVFbGVtZW50KClcbiAgfVxuXG5cbiAgLy8gQUxFUlQgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy5hbGVydCcpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWxlcnQnLCAoZGF0YSA9IG5ldyBBbGVydCh0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmFsZXJ0XG5cbiAgJC5mbi5hbGVydCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmFsZXJ0LkNvbnN0cnVjdG9yID0gQWxlcnRcblxuXG4gIC8vIEFMRVJUIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5hbGVydC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYWxlcnQgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBTEVSVCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5hbGVydC5kYXRhLWFwaScsIGRpc21pc3MsIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGJ1dHRvbi5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2J1dHRvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBCVVRUT04gUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgPSAkLmV4dGVuZCh7fSwgQnV0dG9uLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgfVxuXG4gIEJ1dHRvbi5WRVJTSU9OICA9ICczLjMuNSdcblxuICBCdXR0b24uREVGQVVMVFMgPSB7XG4gICAgbG9hZGluZ1RleHQ6ICdsb2FkaW5nLi4uJ1xuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHZhciBkICAgID0gJ2Rpc2FibGVkJ1xuICAgIHZhciAkZWwgID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciB2YWwgID0gJGVsLmlzKCdpbnB1dCcpID8gJ3ZhbCcgOiAnaHRtbCdcbiAgICB2YXIgZGF0YSA9ICRlbC5kYXRhKClcblxuICAgIHN0YXRlICs9ICdUZXh0J1xuXG4gICAgaWYgKGRhdGEucmVzZXRUZXh0ID09IG51bGwpICRlbC5kYXRhKCdyZXNldFRleHQnLCAkZWxbdmFsXSgpKVxuXG4gICAgLy8gcHVzaCB0byBldmVudCBsb29wIHRvIGFsbG93IGZvcm1zIHRvIHN1Ym1pdFxuICAgIHNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAkZWxbdmFsXShkYXRhW3N0YXRlXSA9PSBudWxsID8gdGhpcy5vcHRpb25zW3N0YXRlXSA6IGRhdGFbc3RhdGVdKVxuXG4gICAgICBpZiAoc3RhdGUgPT0gJ2xvYWRpbmdUZXh0Jykge1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWVcbiAgICAgICAgJGVsLmFkZENsYXNzKGQpLmF0dHIoZCwgZClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoZCkucmVtb3ZlQXR0cihkKVxuICAgICAgfVxuICAgIH0sIHRoaXMpLCAwKVxuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNoYW5nZWQgPSB0cnVlXG4gICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nKVxuXG4gICAgaWYgKCRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICB2YXIgJGlucHV0ID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpXG4gICAgICBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAncmFkaW8nKSB7XG4gICAgICAgIGlmICgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSBjaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgJHBhcmVudC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9IGVsc2UgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBpZiAoKCRpbnB1dC5wcm9wKCdjaGVja2VkJykpICE9PSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgICAkaW5wdXQucHJvcCgnY2hlY2tlZCcsIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKVxuICAgICAgaWYgKGNoYW5nZWQpICRpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuICB9XG5cblxuICAvLyBCVVRUT04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYnV0dG9uJywgKGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMsIG9wdGlvbnMpKSlcblxuICAgICAgaWYgKG9wdGlvbiA9PSAndG9nZ2xlJykgZGF0YS50b2dnbGUoKVxuICAgICAgZWxzZSBpZiAob3B0aW9uKSBkYXRhLnNldFN0YXRlKG9wdGlvbilcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYnV0dG9uXG5cbiAgJC5mbi5idXR0b24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5idXR0b24uQ29uc3RydWN0b3IgPSBCdXR0b25cblxuXG4gIC8vIEJVVFRPTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmJ1dHRvbi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYnV0dG9uID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQlVUVE9OIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgJGJ0biA9ICQoZS50YXJnZXQpXG4gICAgICBpZiAoISRidG4uaGFzQ2xhc3MoJ2J0bicpKSAkYnRuID0gJGJ0bi5jbG9zZXN0KCcuYnRuJylcbiAgICAgIFBsdWdpbi5jYWxsKCRidG4sICd0b2dnbGUnKVxuICAgICAgaWYgKCEoJChlLnRhcmdldCkuaXMoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpIHx8ICQoZS50YXJnZXQpLmlzKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKSkpIGUucHJldmVudERlZmF1bHQoKVxuICAgIH0pXG4gICAgLm9uKCdmb2N1cy5icy5idXR0b24uZGF0YS1hcGkgYmx1ci5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJykudG9nZ2xlQ2xhc3MoJ2ZvY3VzJywgL15mb2N1cyhpbik/JC8udGVzdChlLnR5cGUpKVxuICAgIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBjYXJvdXNlbC5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Nhcm91c2VsXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ0FST1VTRUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMuJGluZGljYXRvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5jYXJvdXNlbC1pbmRpY2F0b3JzJylcbiAgICB0aGlzLm9wdGlvbnMgICAgID0gb3B0aW9uc1xuICAgIHRoaXMucGF1c2VkICAgICAgPSBudWxsXG4gICAgdGhpcy5zbGlkaW5nICAgICA9IG51bGxcbiAgICB0aGlzLmludGVydmFsICAgID0gbnVsbFxuICAgIHRoaXMuJGFjdGl2ZSAgICAgPSBudWxsXG4gICAgdGhpcy4kaXRlbXMgICAgICA9IG51bGxcblxuICAgIHRoaXMub3B0aW9ucy5rZXlib2FyZCAmJiB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpKVxuXG4gICAgdGhpcy5vcHRpb25zLnBhdXNlID09ICdob3ZlcicgJiYgISgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpICYmIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignbW91c2VlbnRlci5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5wYXVzZSwgdGhpcykpXG4gICAgICAub24oJ21vdXNlbGVhdmUuYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMuY3ljbGUsIHRoaXMpKVxuICB9XG5cbiAgQ2Fyb3VzZWwuVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMFxuXG4gIENhcm91c2VsLkRFRkFVTFRTID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIHBhdXNlOiAnaG92ZXInLFxuICAgIHdyYXA6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWVcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuXG4gICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICBjYXNlIDM3OiB0aGlzLnByZXYoKTsgYnJlYWtcbiAgICAgIGNhc2UgMzk6IHRoaXMubmV4dCgpOyBicmVha1xuICAgICAgZGVmYXVsdDogcmV0dXJuXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gZmFsc2UpXG5cbiAgICB0aGlzLmludGVydmFsICYmIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcblxuICAgIHRoaXMub3B0aW9ucy5pbnRlcnZhbFxuICAgICAgJiYgIXRoaXMucGF1c2VkXG4gICAgICAmJiAodGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCQucHJveHkodGhpcy5uZXh0LCB0aGlzKSwgdGhpcy5vcHRpb25zLmludGVydmFsKSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB0aGlzLiRpdGVtcyA9IGl0ZW0ucGFyZW50KCkuY2hpbGRyZW4oJy5pdGVtJylcbiAgICByZXR1cm4gdGhpcy4kaXRlbXMuaW5kZXgoaXRlbSB8fCB0aGlzLiRhY3RpdmUpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUZvckRpcmVjdGlvbiA9IGZ1bmN0aW9uIChkaXJlY3Rpb24sIGFjdGl2ZSkge1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGFjdGl2ZSlcbiAgICB2YXIgd2lsbFdyYXAgPSAoZGlyZWN0aW9uID09ICdwcmV2JyAmJiBhY3RpdmVJbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICB8fCAoZGlyZWN0aW9uID09ICduZXh0JyAmJiBhY3RpdmVJbmRleCA9PSAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkpXG4gICAgaWYgKHdpbGxXcmFwICYmICF0aGlzLm9wdGlvbnMud3JhcCkgcmV0dXJuIGFjdGl2ZVxuICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PSAncHJldicgPyAtMSA6IDFcbiAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy4kaXRlbXMubGVuZ3RoXG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmVxKGl0ZW1JbmRleClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgdGhhdCAgICAgICAgPSB0aGlzXG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgodGhpcy4kYWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKSlcblxuICAgIGlmIChwb3MgPiAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkgfHwgcG9zIDwgMCkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy5zbGlkaW5nKSAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudC5vbmUoJ3NsaWQuYnMuY2Fyb3VzZWwnLCBmdW5jdGlvbiAoKSB7IHRoYXQudG8ocG9zKSB9KSAvLyB5ZXMsIFwic2xpZFwiXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09IHBvcykgcmV0dXJuIHRoaXMucGF1c2UoKS5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpcy5zbGlkZShwb3MgPiBhY3RpdmVJbmRleCA/ICduZXh0JyA6ICdwcmV2JywgdGhpcy4kaXRlbXMuZXEocG9zKSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSB0cnVlKVxuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuZmluZCgnLm5leHQsIC5wcmV2JykubGVuZ3RoICYmICQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKVxuICAgICAgdGhpcy5jeWNsZSh0cnVlKVxuICAgIH1cblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ25leHQnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ3ByZXYnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnNsaWRlID0gZnVuY3Rpb24gKHR5cGUsIG5leHQpIHtcbiAgICB2YXIgJGFjdGl2ZSAgID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKVxuICAgIHZhciAkbmV4dCAgICAgPSBuZXh0IHx8IHRoaXMuZ2V0SXRlbUZvckRpcmVjdGlvbih0eXBlLCAkYWN0aXZlKVxuICAgIHZhciBpc0N5Y2xpbmcgPSB0aGlzLmludGVydmFsXG4gICAgdmFyIGRpcmVjdGlvbiA9IHR5cGUgPT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0J1xuICAgIHZhciB0aGF0ICAgICAgPSB0aGlzXG5cbiAgICBpZiAoJG5leHQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm4gKHRoaXMuc2xpZGluZyA9IGZhbHNlKVxuXG4gICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSAkbmV4dFswXVxuICAgIHZhciBzbGlkZUV2ZW50ID0gJC5FdmVudCgnc2xpZGUuYnMuY2Fyb3VzZWwnLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICB9KVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkZUV2ZW50KVxuICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuc2xpZGluZyA9IHRydWVcblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLnBhdXNlKClcblxuICAgIGlmICh0aGlzLiRpbmRpY2F0b3JzLmxlbmd0aCkge1xuICAgICAgdGhpcy4kaW5kaWNhdG9ycy5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB2YXIgJG5leHRJbmRpY2F0b3IgPSAkKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleCgkbmV4dCldKVxuICAgICAgJG5leHRJbmRpY2F0b3IgJiYgJG5leHRJbmRpY2F0b3IuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuXG4gICAgdmFyIHNsaWRFdmVudCA9ICQuRXZlbnQoJ3NsaWQuYnMuY2Fyb3VzZWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsIGRpcmVjdGlvbjogZGlyZWN0aW9uIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnc2xpZGUnKSkge1xuICAgICAgJG5leHQuYWRkQ2xhc3ModHlwZSlcbiAgICAgICRuZXh0WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuICAgICAgJGFjdGl2ZS5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkbmV4dC5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkbmV4dC5yZW1vdmVDbGFzcyhbdHlwZSwgZGlyZWN0aW9uXS5qb2luKCcgJykpLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoWydhY3RpdmUnLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSlcbiAgICAgICAgICB0aGF0LnNsaWRpbmcgPSBmYWxzZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICAgICAgICB9LCAwKVxuICAgICAgICB9KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgICB9IGVsc2Uge1xuICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICRuZXh0LmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgdGhpcy5zbGlkaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgfVxuXG4gICAgaXNDeWNsaW5nICYmIHRoaXMuY3ljbGUoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ0FST1VTRUwgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ2Fyb3VzZWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG4gICAgICB2YXIgYWN0aW9uICA9IHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgPyBvcHRpb24gOiBvcHRpb25zLnNsaWRlXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnLCAoZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnbnVtYmVyJykgZGF0YS50byhvcHRpb24pXG4gICAgICBlbHNlIGlmIChhY3Rpb24pIGRhdGFbYWN0aW9uXSgpXG4gICAgICBlbHNlIGlmIChvcHRpb25zLmludGVydmFsKSBkYXRhLnBhdXNlKCkuY3ljbGUoKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jYXJvdXNlbFxuXG4gICQuZm4uY2Fyb3VzZWwgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jYXJvdXNlbC5Db25zdHJ1Y3RvciA9IENhcm91c2VsXG5cblxuICAvLyBDQVJPVVNFTCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY2Fyb3VzZWwubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNhcm91c2VsID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ0FST1VTRUwgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICB2YXIgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgIHZhciAkdGFyZ2V0ID0gJCgkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmID0gJHRoaXMuYXR0cignaHJlZicpKSAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkgLy8gc3RyaXAgZm9yIGllN1xuICAgIGlmICghJHRhcmdldC5oYXNDbGFzcygnY2Fyb3VzZWwnKSkgcmV0dXJuXG4gICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcbiAgICB2YXIgc2xpZGVJbmRleCA9ICR0aGlzLmF0dHIoJ2RhdGEtc2xpZGUtdG8nKVxuICAgIGlmIChzbGlkZUluZGV4KSBvcHRpb25zLmludGVydmFsID0gZmFsc2VcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbnMpXG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgJHRhcmdldC5kYXRhKCdicy5jYXJvdXNlbCcpLnRvKHNsaWRlSW5kZXgpXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGVdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGUtdG9dJywgY2xpY2tIYW5kbGVyKVxuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkY2Fyb3VzZWwgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNvbGxhcHNlLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY29sbGFwc2VcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDT0xMQVBTRSBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBDb2xsYXBzZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLiR0cmlnZ2VyICAgICAgPSAkKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXSwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMnICsgZWxlbWVudC5pZCArICdcIl0nKVxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IG51bGxcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucGFyZW50KSB7XG4gICAgICB0aGlzLiRwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJHRyaWdnZXIpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy50b2dnbGUpIHRoaXMudG9nZ2xlKClcbiAgfVxuXG4gIENvbGxhcHNlLlZFUlNJT04gID0gJzMuMy41J1xuXG4gIENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzNTBcblxuICBDb2xsYXBzZS5ERUZBVUxUUyA9IHtcbiAgICB0b2dnbGU6IHRydWVcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5kaW1lbnNpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhc1dpZHRoID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnd2lkdGgnKVxuICAgIHJldHVybiBoYXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0J1xuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBhY3RpdmVzRGF0YVxuICAgIHZhciBhY3RpdmVzID0gdGhpcy4kcGFyZW50ICYmIHRoaXMuJHBhcmVudC5jaGlsZHJlbignLnBhbmVsJykuY2hpbGRyZW4oJy5pbiwgLmNvbGxhcHNpbmcnKVxuXG4gICAgaWYgKGFjdGl2ZXMgJiYgYWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIGFjdGl2ZXNEYXRhID0gYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEudHJhbnNpdGlvbmluZykgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLmNvbGxhcHNlJylcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc3RhcnRFdmVudClcbiAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgUGx1Z2luLmNhbGwoYWN0aXZlcywgJ2hpZGUnKVxuICAgICAgYWN0aXZlc0RhdGEgfHwgYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScsIG51bGwpXG4gICAgfVxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylbZGltZW5zaW9uXSgwKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMVxuXG4gICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlIGluJylbZGltZW5zaW9uXSgnJylcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnRyaWdnZXIoJ3Nob3duLmJzLmNvbGxhcHNlJylcbiAgICB9XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKVxuXG4gICAgdmFyIHNjcm9sbFNpemUgPSAkLmNhbWVsQ2FzZShbJ3Njcm9sbCcsIGRpbWVuc2lvbl0uam9pbignLScpKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50WzBdW3Njcm9sbFNpemVdKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSkgcmV0dXJuXG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLmRpbWVuc2lvbigpXG5cbiAgICB0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0odGhpcy4kZWxlbWVudFtkaW1lbnNpb25dKCkpWzBdLm9mZnNldEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UgaW4nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMuJHRyaWdnZXJcbiAgICAgIC5hZGRDbGFzcygnY29sbGFwc2VkJylcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLmNvbGxhcHNlJylcbiAgICB9XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgW2RpbWVuc2lvbl0oMClcbiAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkoY29tcGxldGUsIHRoaXMpKVxuICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXNbdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSA/ICdoaWRlJyA6ICdzaG93J10oKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJCh0aGlzLm9wdGlvbnMucGFyZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJyArIHRoaXMub3B0aW9ucy5wYXJlbnQgKyAnXCJdJylcbiAgICAgIC5lYWNoKCQucHJveHkoZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KVxuICAgICAgICB0aGlzLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhnZXRUYXJnZXRGcm9tVHJpZ2dlcigkZWxlbWVudCksICRlbGVtZW50KVxuICAgICAgfSwgdGhpcykpXG4gICAgICAuZW5kKClcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MgPSBmdW5jdGlvbiAoJGVsZW1lbnQsICR0cmlnZ2VyKSB7XG4gICAgdmFyIGlzT3BlbiA9ICRlbGVtZW50Lmhhc0NsYXNzKCdpbicpXG5cbiAgICAkZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICAgICR0cmlnZ2VyXG4gICAgICAudG9nZ2xlQ2xhc3MoJ2NvbGxhcHNlZCcsICFpc09wZW4pXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3BlbilcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhcmdldEZyb21UcmlnZ2VyKCR0cmlnZ2VyKSB7XG4gICAgdmFyIGhyZWZcbiAgICB2YXIgdGFyZ2V0ID0gJHRyaWdnZXIuYXR0cignZGF0YS10YXJnZXQnKVxuICAgICAgfHwgKGhyZWYgPSAkdHJpZ2dlci5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcblxuICAgIHJldHVybiAkKHRhcmdldClcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ29sbGFwc2UuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSAmJiBvcHRpb25zLnRvZ2dsZSAmJiAvc2hvd3xoaWRlLy50ZXN0KG9wdGlvbikpIG9wdGlvbnMudG9nZ2xlID0gZmFsc2VcbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnLCAoZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uY29sbGFwc2VcblxuICAkLmZuLmNvbGxhcHNlICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uY29sbGFwc2UuQ29uc3RydWN0b3IgPSBDb2xsYXBzZVxuXG5cbiAgLy8gQ09MTEFQU0UgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNvbGxhcHNlLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jb2xsYXBzZSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENPTExBUFNFIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmNvbGxhcHNlLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcblxuICAgIGlmICghJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICB2YXIgJHRhcmdldCA9IGdldFRhcmdldEZyb21UcmlnZ2VyKCR0aGlzKVxuICAgIHZhciBkYXRhICAgID0gJHRhcmdldC5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgdmFyIG9wdGlvbiAgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdGhpcy5kYXRhKClcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbilcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGRyb3Bkb3duLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jZHJvcGRvd25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gRFJPUERPV04gQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGJhY2tkcm9wID0gJy5kcm9wZG93bi1iYWNrZHJvcCdcbiAgdmFyIHRvZ2dsZSAgID0gJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJ1xuICB2YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICQoZWxlbWVudCkub24oJ2NsaWNrLmJzLmRyb3Bkb3duJywgdGhpcy50b2dnbGUpXG4gIH1cblxuICBEcm9wZG93bi5WRVJTSU9OID0gJzMuMy41J1xuXG4gIGZ1bmN0aW9uIGdldFBhcmVudCgkdGhpcykge1xuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIC8jW0EtWmEtel0vLnRlc3Qoc2VsZWN0b3IpICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgdmFyICRwYXJlbnQgPSBzZWxlY3RvciAmJiAkKHNlbGVjdG9yKVxuXG4gICAgcmV0dXJuICRwYXJlbnQgJiYgJHBhcmVudC5sZW5ndGggPyAkcGFyZW50IDogJHRoaXMucGFyZW50KClcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyTWVudXMoZSkge1xuICAgIGlmIChlICYmIGUud2hpY2ggPT09IDMpIHJldHVyblxuICAgICQoYmFja2Ryb3ApLnJlbW92ZSgpXG4gICAgJCh0b2dnbGUpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgICAgICAgPSAkKHRoaXMpXG4gICAgICB2YXIgJHBhcmVudCAgICAgICA9IGdldFBhcmVudCgkdGhpcylcbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH1cblxuICAgICAgaWYgKCEkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJykpIHJldHVyblxuXG4gICAgICBpZiAoZSAmJiBlLnR5cGUgPT0gJ2NsaWNrJyAmJiAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpICYmICQuY29udGFpbnMoJHBhcmVudFswXSwgZS50YXJnZXQpKSByZXR1cm5cblxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdoaWRlLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgJHRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG4gICAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuJykudHJpZ2dlcignaGlkZGVuLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldClcbiAgICB9KVxuICB9XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKVxuXG4gICAgaWYgKCR0aGlzLmlzKCcuZGlzYWJsZWQsIDpkaXNhYmxlZCcpKSByZXR1cm5cblxuICAgIHZhciAkcGFyZW50ICA9IGdldFBhcmVudCgkdGhpcylcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJylcblxuICAgIGNsZWFyTWVudXMoKVxuXG4gICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhJHBhcmVudC5jbG9zZXN0KCcubmF2YmFyLW5hdicpLmxlbmd0aCkge1xuICAgICAgICAvLyBpZiBtb2JpbGUgd2UgdXNlIGEgYmFja2Ryb3AgYmVjYXVzZSBjbGljayBldmVudHMgZG9uJ3QgZGVsZWdhdGVcbiAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJhY2tkcm9wJylcbiAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoJCh0aGlzKSlcbiAgICAgICAgICAub24oJ2NsaWNrJywgY2xlYXJNZW51cylcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdzaG93LmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgJHRoaXNcbiAgICAgICAgLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpXG5cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLnRvZ2dsZUNsYXNzKCdvcGVuJylcbiAgICAgICAgLnRyaWdnZXIoJ3Nob3duLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldClcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIS8oMzh8NDB8Mjd8MzIpLy50ZXN0KGUud2hpY2gpIHx8IC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVyblxuXG4gICAgdmFyICR0aGlzID0gJCh0aGlzKVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgaWYgKCR0aGlzLmlzKCcuZGlzYWJsZWQsIDpkaXNhYmxlZCcpKSByZXR1cm5cblxuICAgIHZhciAkcGFyZW50ICA9IGdldFBhcmVudCgkdGhpcylcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJylcblxuICAgIGlmICghaXNBY3RpdmUgJiYgZS53aGljaCAhPSAyNyB8fCBpc0FjdGl2ZSAmJiBlLndoaWNoID09IDI3KSB7XG4gICAgICBpZiAoZS53aGljaCA9PSAyNykgJHBhcmVudC5maW5kKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgcmV0dXJuICR0aGlzLnRyaWdnZXIoJ2NsaWNrJylcbiAgICB9XG5cbiAgICB2YXIgZGVzYyA9ICcgbGk6bm90KC5kaXNhYmxlZCk6dmlzaWJsZSBhJ1xuICAgIHZhciAkaXRlbXMgPSAkcGFyZW50LmZpbmQoJy5kcm9wZG93bi1tZW51JyArIGRlc2MpXG5cbiAgICBpZiAoISRpdGVtcy5sZW5ndGgpIHJldHVyblxuXG4gICAgdmFyIGluZGV4ID0gJGl0ZW1zLmluZGV4KGUudGFyZ2V0KVxuXG4gICAgaWYgKGUud2hpY2ggPT0gMzggJiYgaW5kZXggPiAwKSAgICAgICAgICAgICAgICAgaW5kZXgtLSAgICAgICAgIC8vIHVwXG4gICAgaWYgKGUud2hpY2ggPT0gNDAgJiYgaW5kZXggPCAkaXRlbXMubGVuZ3RoIC0gMSkgaW5kZXgrKyAgICAgICAgIC8vIGRvd25cbiAgICBpZiAoIX5pbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDBcblxuICAgICRpdGVtcy5lcShpbmRleCkudHJpZ2dlcignZm9jdXMnKVxuICB9XG5cblxuICAvLyBEUk9QRE9XTiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicsIChkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uZHJvcGRvd25cblxuICAkLmZuLmRyb3Bkb3duICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uZHJvcGRvd24uQ29uc3RydWN0b3IgPSBEcm9wZG93blxuXG5cbiAgLy8gRFJPUERPV04gTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmRyb3Bkb3duLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5kcm9wZG93biA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFQUExZIFRPIFNUQU5EQVJEIERST1BET1dOIEVMRU1FTlRTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgY2xlYXJNZW51cylcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgJy5kcm9wZG93biBmb3JtJywgZnVuY3Rpb24gKGUpIHsgZS5zdG9wUHJvcGFnYXRpb24oKSB9KVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCB0b2dnbGUsIERyb3Bkb3duLnByb3RvdHlwZS50b2dnbGUpXG4gICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bilcbiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duLW1lbnUnLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bilcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zXG4gICAgdGhpcy4kYm9keSAgICAgICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJGVsZW1lbnQgICAgICAgICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRkaWFsb2cgICAgICAgICAgICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5tb2RhbC1kaWFsb2cnKVxuICAgIHRoaXMuJGJhY2tkcm9wICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLmlzU2hvd24gICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgICAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggICAgICA9IDBcbiAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLmZpbmQoJy5tb2RhbC1jb250ZW50JylcbiAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdsb2FkZWQuYnMubW9kYWwnKVxuICAgICAgICB9LCB0aGlzKSlcbiAgICB9XG4gIH1cblxuICBNb2RhbC5WRVJTSU9OICA9ICczLjMuNSdcblxuICBNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwXG4gIE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBNb2RhbC5ERUZBVUxUUyA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KF9yZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgZSAgICA9ICQuRXZlbnQoJ3Nob3cuYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICh0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSB0cnVlXG5cbiAgICB0aGlzLmNoZWNrU2Nyb2xsYmFyKClcbiAgICB0aGlzLnNldFNjcm9sbGJhcigpXG4gICAgdGhpcy4kYm9keS5hZGRDbGFzcygnbW9kYWwtb3BlbicpXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLCAkLnByb3h5KHRoaXMuaGlkZSwgdGhpcykpXG5cbiAgICB0aGlzLiRkaWFsb2cub24oJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vbmUoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGF0LiRlbGVtZW50KSkgdGhhdC5pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoYXQuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICBpZiAoIXRoYXQuJGVsZW1lbnQucGFyZW50KCkubGVuZ3RoKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnQuYXBwZW5kVG8odGhhdC4kYm9keSkgLy8gZG9uJ3QgbW92ZSBtb2RhbHMgZG9tIHBvc2l0aW9uXG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLnNob3coKVxuICAgICAgICAuc2Nyb2xsVG9wKDApXG5cbiAgICAgIHRoYXQuYWRqdXN0RGlhbG9nKClcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICB0aGF0LmVuZm9yY2VGb2N1cygpXG5cbiAgICAgIHZhciBlID0gJC5FdmVudCgnc2hvd24uYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICAgIHRyYW5zaXRpb24gP1xuICAgICAgICB0aGF0LiRkaWFsb2cgLy8gd2FpdCBmb3IgbW9kYWwgdG8gc2xpZGUgaW5cbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGUgPSAkLkV2ZW50KCdoaWRlLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSBmYWxzZVxuXG4gICAgdGhpcy5lc2NhcGUoKVxuICAgIHRoaXMucmVzaXplKClcblxuICAgICQoZG9jdW1lbnQpLm9mZignZm9jdXNpbi5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAucmVtb3ZlQ2xhc3MoJ2luJylcbiAgICAgIC5vZmYoJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnKVxuICAgICAgLm9mZignbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGRpYWxvZy5vZmYoJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkodGhpcy5oaWRlTW9kYWwsIHRoaXMpKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgdGhpcy5oaWRlTW9kYWwoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKGRvY3VtZW50KVxuICAgICAgLm9mZignZm9jdXNpbi5icy5tb2RhbCcpIC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKCdmb2N1c2luLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudFswXSAhPT0gZS50YXJnZXQgJiYgIXRoaXMuJGVsZW1lbnQuaGFzKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcykpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZXNjYXBlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUud2hpY2ggPT0gMjcgJiYgdGhpcy5oaWRlKClcbiAgICAgIH0sIHRoaXMpKVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93bikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5icy5tb2RhbCcsICQucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsIHRoaXMpKVxuICAgIH0gZWxzZSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdGhpcy4kZWxlbWVudC5oaWRlKClcbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGJvZHkucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKVxuICAgICAgdGhhdC5yZXNldEFkanVzdG1lbnRzKClcbiAgICAgIHRoYXQucmVzZXRTY3JvbGxiYXIoKVxuICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdoaWRkZW4uYnMubW9kYWwnKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYmFja2Ryb3AgJiYgdGhpcy4kYmFja2Ryb3AucmVtb3ZlKClcbiAgICB0aGlzLiRiYWNrZHJvcCA9IG51bGxcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5iYWNrZHJvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJydcblxuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmJhY2tkcm9wKSB7XG4gICAgICB2YXIgZG9BbmltYXRlID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgYW5pbWF0ZVxuXG4gICAgICB0aGlzLiRiYWNrZHJvcCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgIC5hZGRDbGFzcygnbW9kYWwtYmFja2Ryb3AgJyArIGFuaW1hdGUpXG4gICAgICAgIC5hcHBlbmRUbyh0aGlzLiRib2R5KVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXG4gICAgICAgIHRoaXMub3B0aW9ucy5iYWNrZHJvcCA9PSAnc3RhdGljJ1xuICAgICAgICAgID8gdGhpcy4kZWxlbWVudFswXS5mb2N1cygpXG4gICAgICAgICAgOiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG5cbiAgICAgIGlmIChkb0FuaW1hdGUpIHRoaXMuJGJhY2tkcm9wWzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgICB0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm5cblxuICAgICAgZG9BbmltYXRlID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFjaylcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFjaygpXG5cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24gJiYgdGhpcy4kYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5yZW1vdmVCYWNrZHJvcCgpXG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2tSZW1vdmUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY2FsbGJhY2tSZW1vdmUoKVxuXG4gICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8vIHRoZXNlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcblxuICBNb2RhbC5wcm90b3R5cGUuaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRqdXN0RGlhbG9nKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IHRoaXMuJGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICAhdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgIW1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnVsbFdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICBpZiAoIWZ1bGxXaW5kb3dXaWR0aCkgeyAvLyB3b3JrYXJvdW5kIGZvciBtaXNzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGluIElFOFxuICAgICAgdmFyIGRvY3VtZW50RWxlbWVudFJlY3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGZ1bGxXaW5kb3dXaWR0aCA9IGRvY3VtZW50RWxlbWVudFJlY3QucmlnaHQgLSBNYXRoLmFicyhkb2N1bWVudEVsZW1lbnRSZWN0LmxlZnQpXG4gICAgfVxuICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IHRoaXMubWVhc3VyZVNjcm9sbGJhcigpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQoKHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCksIDEwKVxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgfHwgJydcbiAgICBpZiAodGhpcy5ib2R5SXNPdmVyZmxvd2luZykgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBib2R5UGFkICsgdGhpcy5zY3JvbGxiYXJXaWR0aClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIHRoaXMub3JpZ2luYWxCb2R5UGFkKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7IC8vIHRoeCB3YWxzaFxuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnXG4gICAgdGhpcy4kYm9keS5hcHBlbmQoc2Nyb2xsRGl2KVxuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aFxuICAgIHRoaXMuJGJvZHlbMF0ucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KVxuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxuICB9XG5cblxuICAvLyBNT0RBTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24sIF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMubW9kYWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTW9kYWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKF9yZWxhdGVkVGFyZ2V0KVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLm1vZGFsXG5cbiAgJC5mbi5tb2RhbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLm1vZGFsLkNvbnN0cnVjdG9yID0gTW9kYWxcblxuXG4gIC8vIE1PREFMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ubW9kYWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBNT0RBTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5tb2RhbC5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyIGhyZWYgICAgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB2YXIgb3B0aW9uICA9ICR0YXJnZXQuZGF0YSgnYnMubW9kYWwnKSA/ICd0b2dnbGUnIDogJC5leHRlbmQoeyByZW1vdGU6ICEvIy8udGVzdChocmVmKSAmJiBocmVmIH0sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG5cbiAgICBpZiAoJHRoaXMuaXMoJ2EnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAkdGFyZ2V0Lm9uZSgnc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiAvLyBvbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAkdGFyZ2V0Lm9uZSgnaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGhpcy5pcygnOnZpc2libGUnKSAmJiAkdGhpcy50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9KVxuICAgIH0pXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uLCB0aGlzKVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogcG9wb3Zlci5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3BvcG92ZXJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gUE9QT1ZFUiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdCgncG9wb3ZlcicsIGVsZW1lbnQsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoISQuZm4udG9vbHRpcCkgdGhyb3cgbmV3IEVycm9yKCdQb3BvdmVyIHJlcXVpcmVzIHRvb2x0aXAuanMnKVxuXG4gIFBvcG92ZXIuVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgUG9wb3Zlci5ERUZBVUxUUyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IuREVGQVVMVFMsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+J1xuICB9KVxuXG5cbiAgLy8gTk9URTogUE9QT1ZFUiBFWFRFTkRTIHRvb2x0aXAuanNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBQb3BvdmVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IucHJvdG90eXBlKVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQb3BvdmVyLkRFRkFVTFRTXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICAgID0gdGhpcy50aXAoKVxuICAgIHZhciB0aXRsZSAgID0gdGhpcy5nZXRUaXRsZSgpXG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldENvbnRlbnQoKVxuXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpW3RoaXMub3B0aW9ucy5odG1sID8gJ2h0bWwnIDogJ3RleHQnXSh0aXRsZSlcbiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKS5jaGlsZHJlbigpLmRldGFjaCgpLmVuZCgpWyAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgICB0aGlzLm9wdGlvbnMuaHRtbCA/ICh0eXBlb2YgY29udGVudCA9PSAnc3RyaW5nJyA/ICdodG1sJyA6ICdhcHBlbmQnKSA6ICd0ZXh0J1xuICAgIF0oY29udGVudClcblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluJylcblxuICAgIC8vIElFOCBkb2Vzbid0IGFjY2VwdCBoaWRpbmcgdmlhIHRoZSBgOmVtcHR5YCBwc2V1ZG8gc2VsZWN0b3IsIHdlIGhhdmUgdG8gZG9cbiAgICAvLyB0aGlzIG1hbnVhbGx5IGJ5IGNoZWNraW5nIHRoZSBjb250ZW50cy5cbiAgICBpZiAoISR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5odG1sKCkpICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5oaWRlKClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLmdldENvbnRlbnQoKVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICByZXR1cm4gJGUuYXR0cignZGF0YS1jb250ZW50JylcbiAgICAgIHx8ICh0eXBlb2Ygby5jb250ZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgby5jb250ZW50LmNhbGwoJGVbMF0pIDpcbiAgICAgICAgICAgIG8uY29udGVudClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy5hcnJvdycpKVxuICB9XG5cblxuICAvLyBQT1BPVkVSIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5wb3BvdmVyJywgKGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ucG9wb3ZlclxuXG4gICQuZm4ucG9wb3ZlciAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnBvcG92ZXIuQ29uc3RydWN0b3IgPSBQb3BvdmVyXG5cblxuICAvLyBQT1BPVkVSIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnBvcG92ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnBvcG92ZXIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBzY3JvbGxzcHkuanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNzY3JvbGxzcHlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBTQ1JPTExTUFkgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kYm9keSAgICAgICAgICA9ICQoZG9jdW1lbnQuYm9keSlcbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50ID0gJChlbGVtZW50KS5pcyhkb2N1bWVudC5ib2R5KSA/ICQod2luZG93KSA6ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgID0gJC5leHRlbmQoe30sIFNjcm9sbFNweS5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLnNlbGVjdG9yICAgICAgID0gKHRoaXMub3B0aW9ucy50YXJnZXQgfHwgJycpICsgJyAubmF2IGxpID4gYSdcbiAgICB0aGlzLm9mZnNldHMgICAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICAgID0gW11cbiAgICB0aGlzLmFjdGl2ZVRhcmdldCAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsSGVpZ2h0ICAgPSAwXG5cbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50Lm9uKCdzY3JvbGwuYnMuc2Nyb2xsc3B5JywgJC5wcm94eSh0aGlzLnByb2Nlc3MsIHRoaXMpKVxuICAgIHRoaXMucmVmcmVzaCgpXG4gICAgdGhpcy5wcm9jZXNzKClcbiAgfVxuXG4gIFNjcm9sbFNweS5WRVJTSU9OICA9ICczLjMuNSdcblxuICBTY3JvbGxTcHkuREVGQVVMVFMgPSB7XG4gICAgb2Zmc2V0OiAxMFxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHNjcm9sbEVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KHRoaXMuJGJvZHlbMF0uc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ICAgICAgICAgID0gdGhpc1xuICAgIHZhciBvZmZzZXRNZXRob2QgID0gJ29mZnNldCdcbiAgICB2YXIgb2Zmc2V0QmFzZSAgICA9IDBcblxuICAgIHRoaXMub2Zmc2V0cyAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICA9IFtdXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG5cbiAgICBpZiAoISQuaXNXaW5kb3codGhpcy4kc2Nyb2xsRWxlbWVudFswXSkpIHtcbiAgICAgIG9mZnNldE1ldGhvZCA9ICdwb3NpdGlvbidcbiAgICAgIG9mZnNldEJhc2UgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKClcbiAgICB9XG5cbiAgICB0aGlzLiRib2R5XG4gICAgICAuZmluZCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWwgICA9ICQodGhpcylcbiAgICAgICAgdmFyIGhyZWYgID0gJGVsLmRhdGEoJ3RhcmdldCcpIHx8ICRlbC5hdHRyKCdocmVmJylcbiAgICAgICAgdmFyICRocmVmID0gL14jLi8udGVzdChocmVmKSAmJiAkKGhyZWYpXG5cbiAgICAgICAgcmV0dXJuICgkaHJlZlxuICAgICAgICAgICYmICRocmVmLmxlbmd0aFxuICAgICAgICAgICYmICRocmVmLmlzKCc6dmlzaWJsZScpXG4gICAgICAgICAgJiYgW1skaHJlZltvZmZzZXRNZXRob2RdKCkudG9wICsgb2Zmc2V0QmFzZSwgaHJlZl1dKSB8fCBudWxsXG4gICAgICB9KVxuICAgICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdIH0pXG4gICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQub2Zmc2V0cy5wdXNoKHRoaXNbMF0pXG4gICAgICAgIHRoYXQudGFyZ2V0cy5wdXNoKHRoaXNbMV0pXG4gICAgICB9KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiRzY3JvbGxFbGVtZW50LnNjcm9sbFRvcCgpICsgdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG4gICAgdmFyIG1heFNjcm9sbCAgICA9IHRoaXMub3B0aW9ucy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLiRzY3JvbGxFbGVtZW50LmhlaWdodCgpXG4gICAgdmFyIG9mZnNldHMgICAgICA9IHRoaXMub2Zmc2V0c1xuICAgIHZhciB0YXJnZXRzICAgICAgPSB0aGlzLnRhcmdldHNcbiAgICB2YXIgYWN0aXZlVGFyZ2V0ID0gdGhpcy5hY3RpdmVUYXJnZXRcbiAgICB2YXIgaVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsSGVpZ2h0ICE9IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKClcbiAgICB9XG5cbiAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZVRhcmdldCAhPSAoaSA9IHRhcmdldHNbdGFyZ2V0cy5sZW5ndGggLSAxXSkgJiYgdGhpcy5hY3RpdmF0ZShpKVxuICAgIH1cblxuICAgIGlmIChhY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgb2Zmc2V0c1swXSkge1xuICAgICAgdGhpcy5hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgICByZXR1cm4gdGhpcy5jbGVhcigpXG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgIGFjdGl2ZVRhcmdldCAhPSB0YXJnZXRzW2ldXG4gICAgICAgICYmIHNjcm9sbFRvcCA+PSBvZmZzZXRzW2ldXG4gICAgICAgICYmIChvZmZzZXRzW2kgKyAxXSA9PT0gdW5kZWZpbmVkIHx8IHNjcm9sbFRvcCA8IG9mZnNldHNbaSArIDFdKVxuICAgICAgICAmJiB0aGlzLmFjdGl2YXRlKHRhcmdldHNbaV0pXG4gICAgfVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IHRhcmdldFxuXG4gICAgdGhpcy5jbGVhcigpXG5cbiAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yICtcbiAgICAgICdbZGF0YS10YXJnZXQ9XCInICsgdGFyZ2V0ICsgJ1wiXSwnICtcbiAgICAgIHRoaXMuc2VsZWN0b3IgKyAnW2hyZWY9XCInICsgdGFyZ2V0ICsgJ1wiXSdcblxuICAgIHZhciBhY3RpdmUgPSAkKHNlbGVjdG9yKVxuICAgICAgLnBhcmVudHMoJ2xpJylcbiAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcblxuICAgIGlmIChhY3RpdmUucGFyZW50KCcuZHJvcGRvd24tbWVudScpLmxlbmd0aCkge1xuICAgICAgYWN0aXZlID0gYWN0aXZlXG4gICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICBhY3RpdmUudHJpZ2dlcignYWN0aXZhdGUuYnMuc2Nyb2xsc3B5JylcbiAgfVxuXG4gIFNjcm9sbFNweS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLnBhcmVudHNVbnRpbCh0aGlzLm9wdGlvbnMudGFyZ2V0LCAnLmFjdGl2ZScpXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuc2Nyb2xsc3B5JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknLCAoZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnNjcm9sbHNweVxuXG4gICQuZm4uc2Nyb2xsc3B5ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uc2Nyb2xsc3B5LkNvbnN0cnVjdG9yID0gU2Nyb2xsU3B5XG5cblxuICAvLyBTQ1JPTExTUFkgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5zY3JvbGxzcHkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnNjcm9sbHNweSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQuYnMuc2Nyb2xsc3B5LmRhdGEtYXBpJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cInNjcm9sbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzcHkgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdGFiLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdGFic1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFRBQiBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFRhYiA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgLy8ganNjczpkaXNhYmxlIHJlcXVpcmVEb2xsYXJCZWZvcmVqUXVlcnlBc3NpZ25tZW50XG4gICAgdGhpcy5lbGVtZW50ID0gJChlbGVtZW50KVxuICAgIC8vIGpzY3M6ZW5hYmxlIHJlcXVpcmVEb2xsYXJCZWZvcmVqUXVlcnlBc3NpZ25tZW50XG4gIH1cblxuICBUYWIuVkVSU0lPTiA9ICczLjMuNSdcblxuICBUYWIuVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxuXG4gIFRhYi5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRoaXMgICAgPSB0aGlzLmVsZW1lbnRcbiAgICB2YXIgJHVsICAgICAgPSAkdGhpcy5jbG9zZXN0KCd1bDpub3QoLmRyb3Bkb3duLW1lbnUpJylcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5kYXRhKCd0YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICBpZiAoJHRoaXMucGFyZW50KCdsaScpLmhhc0NsYXNzKCdhY3RpdmUnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHByZXZpb3VzID0gJHVsLmZpbmQoJy5hY3RpdmU6bGFzdCBhJylcbiAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy50YWInLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiAkdGhpc1swXVxuICAgIH0pXG4gICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoJ3Nob3cuYnMudGFiJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogJHByZXZpb3VzWzBdXG4gICAgfSlcblxuICAgICRwcmV2aW91cy50cmlnZ2VyKGhpZGVFdmVudClcbiAgICAkdGhpcy50cmlnZ2VyKHNob3dFdmVudClcblxuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHZhciAkdGFyZ2V0ID0gJChzZWxlY3RvcilcblxuICAgIHRoaXMuYWN0aXZhdGUoJHRoaXMuY2xvc2VzdCgnbGknKSwgJHVsKVxuICAgIHRoaXMuYWN0aXZhdGUoJHRhcmdldCwgJHRhcmdldC5wYXJlbnQoKSwgZnVuY3Rpb24gKCkge1xuICAgICAgJHByZXZpb3VzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAnaGlkZGVuLmJzLnRhYicsXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6ICR0aGlzWzBdXG4gICAgICB9KVxuICAgICAgJHRoaXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdzaG93bi5icy50YWInLFxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIFRhYi5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIHZhciAkYWN0aXZlICAgID0gY29udGFpbmVyLmZpbmQoJz4gLmFjdGl2ZScpXG4gICAgdmFyIHRyYW5zaXRpb24gPSBjYWxsYmFja1xuICAgICAgJiYgJC5zdXBwb3J0LnRyYW5zaXRpb25cbiAgICAgICYmICgkYWN0aXZlLmxlbmd0aCAmJiAkYWN0aXZlLmhhc0NsYXNzKCdmYWRlJykgfHwgISFjb250YWluZXIuZmluZCgnPiAuZmFkZScpLmxlbmd0aClcblxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmZpbmQoJz4gLmRyb3Bkb3duLW1lbnUgPiAuYWN0aXZlJylcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5lbmQoKVxuICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcbiAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgICBlbGVtZW50XG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICBlbGVtZW50WzBdLm9mZnNldFdpZHRoIC8vIHJlZmxvdyBmb3IgdHJhbnNpdGlvblxuICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdpbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdmYWRlJylcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQucGFyZW50KCcuZHJvcGRvd24tbWVudScpLmxlbmd0aCkge1xuICAgICAgICBlbGVtZW50XG4gICAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAuZW5kKClcbiAgICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgICRhY3RpdmUubGVuZ3RoICYmIHRyYW5zaXRpb24gP1xuICAgICAgJGFjdGl2ZVxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBuZXh0KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVGFiLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIG5leHQoKVxuXG4gICAgJGFjdGl2ZS5yZW1vdmVDbGFzcygnaW4nKVxuICB9XG5cblxuICAvLyBUQUIgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMudGFiJylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50YWInLCAoZGF0YSA9IG5ldyBUYWIodGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnRhYlxuXG4gICQuZm4udGFiICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4udGFiLkNvbnN0cnVjdG9yID0gVGFiXG5cblxuICAvLyBUQUIgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09XG5cbiAgJC5mbi50YWIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnRhYiA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIFRBQiBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT1cblxuICB2YXIgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBQbHVnaW4uY2FsbCgkKHRoaXMpLCAnc2hvdycpXG4gIH1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMudGFiLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScsIGNsaWNrSGFuZGxlcilcbiAgICAub24oJ2NsaWNrLmJzLnRhYi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJwaWxsXCJdJywgY2xpY2tIYW5kbGVyKVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdG9vbHRpcC5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Rvb2x0aXBcbiAqIEluc3BpcmVkIGJ5IHRoZSBvcmlnaW5hbCBqUXVlcnkudGlwc3kgYnkgSmFzb24gRnJhbWVcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBUT09MVElQIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlICAgICAgID0gbnVsbFxuICAgIHRoaXMub3B0aW9ucyAgICA9IG51bGxcbiAgICB0aGlzLmVuYWJsZWQgICAgPSBudWxsXG4gICAgdGhpcy50aW1lb3V0ICAgID0gbnVsbFxuICAgIHRoaXMuaG92ZXJTdGF0ZSA9IG51bGxcbiAgICB0aGlzLiRlbGVtZW50ICAgPSBudWxsXG4gICAgdGhpcy5pblN0YXRlICAgID0gbnVsbFxuXG4gICAgdGhpcy5pbml0KCd0b29sdGlwJywgZWxlbWVudCwgb3B0aW9ucylcbiAgfVxuXG4gIFRvb2x0aXAuVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVG9vbHRpcC5ERUZBVUxUUyA9IHtcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVsYXk6IDAsXG4gICAgaHRtbDogZmFsc2UsXG4gICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICB2aWV3cG9ydDoge1xuICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHR5cGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmVuYWJsZWQgICA9IHRydWVcbiAgICB0aGlzLnR5cGUgICAgICA9IHR5cGVcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9IHRoaXMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICAgIHRoaXMuJHZpZXdwb3J0ID0gdGhpcy5vcHRpb25zLnZpZXdwb3J0ICYmICQoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy52aWV3cG9ydCkgPyB0aGlzLm9wdGlvbnMudmlld3BvcnQuY2FsbCh0aGlzLCB0aGlzLiRlbGVtZW50KSA6ICh0aGlzLm9wdGlvbnMudmlld3BvcnQuc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLnZpZXdwb3J0KSlcbiAgICB0aGlzLmluU3RhdGUgICA9IHsgY2xpY2s6IGZhbHNlLCBob3ZlcjogZmFsc2UsIGZvY3VzOiBmYWxzZSB9XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudFswXSBpbnN0YW5jZW9mIGRvY3VtZW50LmNvbnN0cnVjdG9yICYmICF0aGlzLm9wdGlvbnMuc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHNlbGVjdG9yYCBvcHRpb24gbXVzdCBiZSBzcGVjaWZpZWQgd2hlbiBpbml0aWFsaXppbmcgJyArIHRoaXMudHlwZSArICcgb24gdGhlIHdpbmRvdy5kb2N1bWVudCBvYmplY3QhJylcbiAgICB9XG5cbiAgICB2YXIgdHJpZ2dlcnMgPSB0aGlzLm9wdGlvbnMudHJpZ2dlci5zcGxpdCgnICcpXG5cbiAgICBmb3IgKHZhciBpID0gdHJpZ2dlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgdHJpZ2dlciA9IHRyaWdnZXJzW2ldXG5cbiAgICAgIGlmICh0cmlnZ2VyID09ICdjbGljaycpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMudG9nZ2xlLCB0aGlzKSlcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPSAnbWFudWFsJykge1xuICAgICAgICB2YXIgZXZlbnRJbiAgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VlbnRlcicgOiAnZm9jdXNpbidcbiAgICAgICAgdmFyIGV2ZW50T3V0ID0gdHJpZ2dlciA9PSAnaG92ZXInID8gJ21vdXNlbGVhdmUnIDogJ2ZvY3Vzb3V0J1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRJbiAgKyAnLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLmVudGVyLCB0aGlzKSlcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudE91dCArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMubGVhdmUsIHRoaXMpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5zZWxlY3RvciA/XG4gICAgICAodGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIHsgdHJpZ2dlcjogJ21hbnVhbCcsIHNlbGVjdG9yOiAnJyB9KSkgOlxuICAgICAgdGhpcy5maXhUaXRsZSgpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVG9vbHRpcC5ERUZBVUxUU1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLmdldERlZmF1bHRzKCksIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKVxuXG4gICAgaWYgKG9wdGlvbnMuZGVsYXkgJiYgdHlwZW9mIG9wdGlvbnMuZGVsYXkgPT0gJ251bWJlcicpIHtcbiAgICAgIG9wdGlvbnMuZGVsYXkgPSB7XG4gICAgICAgIHNob3c6IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGhpZGU6IG9wdGlvbnMuZGVsYXlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0RGVsZWdhdGVPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zICA9IHt9XG4gICAgdmFyIGRlZmF1bHRzID0gdGhpcy5nZXREZWZhdWx0cygpXG5cbiAgICB0aGlzLl9vcHRpb25zICYmICQuZWFjaCh0aGlzLl9vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGRlZmF1bHRzW2tleV0gIT0gdmFsdWUpIG9wdGlvbnNba2V5XSA9IHZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c2luJyA/ICdmb2N1cycgOiAnaG92ZXInXSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoc2VsZi50aXAoKS5oYXNDbGFzcygnaW4nKSB8fCBzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykge1xuICAgICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdpbidcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdykgcmV0dXJuIHNlbGYuc2hvdygpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykgc2VsZi5zaG93KClcbiAgICB9LCBzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmlzSW5TdGF0ZVRydWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuaW5TdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuaW5TdGF0ZVtrZXldKSByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHNlbGYgPSBvYmogaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yID9cbiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgfVxuXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mICQuRXZlbnQpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZVtvYmoudHlwZSA9PSAnZm9jdXNvdXQnID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5pc0luU3RhdGVUcnVlKCkpIHJldHVyblxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdvdXQnXG5cbiAgICBpZiAoIXNlbGYub3B0aW9ucy5kZWxheSB8fCAhc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpIHJldHVybiBzZWxmLmhpZGUoKVxuXG4gICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5ob3ZlclN0YXRlID09ICdvdXQnKSBzZWxmLmhpZGUoKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5oaWRlKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZSA9ICQuRXZlbnQoJ3Nob3cuYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSAmJiB0aGlzLmVuYWJsZWQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICB2YXIgaW5Eb20gPSAkLmNvbnRhaW5zKHRoaXMuJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuJGVsZW1lbnRbMF0pXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaW5Eb20pIHJldHVyblxuICAgICAgdmFyIHRoYXQgPSB0aGlzXG5cbiAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKVxuXG4gICAgICB2YXIgdGlwSWQgPSB0aGlzLmdldFVJRCh0aGlzLnR5cGUpXG5cbiAgICAgIHRoaXMuc2V0Q29udGVudCgpXG4gICAgICAkdGlwLmF0dHIoJ2lkJywgdGlwSWQpXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZClcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pICR0aXAuYWRkQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnRcblxuICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9cXHM/YXV0bz9cXHM/L2lcbiAgICAgIHZhciBhdXRvUGxhY2UgPSBhdXRvVG9rZW4udGVzdChwbGFjZW1lbnQpXG4gICAgICBpZiAoYXV0b1BsYWNlKSBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShhdXRvVG9rZW4sICcnKSB8fCAndG9wJ1xuXG4gICAgICAkdGlwXG4gICAgICAgIC5kZXRhY2goKVxuICAgICAgICAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCBkaXNwbGF5OiAnYmxvY2snIH0pXG4gICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpXG4gICAgICAgIC5kYXRhKCdicy4nICsgdGhpcy50eXBlLCB0aGlzKVxuXG4gICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyID8gJHRpcC5hcHBlbmRUbyh0aGlzLm9wdGlvbnMuY29udGFpbmVyKSA6ICR0aXAuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudClcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaW5zZXJ0ZWQuYnMuJyArIHRoaXMudHlwZSlcblxuICAgICAgdmFyIHBvcyAgICAgICAgICA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxuXG4gICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgIHZhciBvcmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRcbiAgICAgICAgdmFyIHZpZXdwb3J0RGltID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydClcblxuICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLmJvdHRvbSArIGFjdHVhbEhlaWdodCA+IHZpZXdwb3J0RGltLmJvdHRvbSA/ICd0b3AnICAgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgICYmIHBvcy50b3AgICAgLSBhY3R1YWxIZWlnaHQgPCB2aWV3cG9ydERpbS50b3AgICAgPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAncmlnaHQnICAmJiBwb3MucmlnaHQgICsgYWN0dWFsV2lkdGggID4gdmlld3BvcnREaW0ud2lkdGggID8gJ2xlZnQnICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgICAtIGFjdHVhbFdpZHRoICA8IHZpZXdwb3J0RGltLmxlZnQgICA/ICdyaWdodCcgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50XG5cbiAgICAgICAgJHRpcFxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhvcmdQbGFjZW1lbnQpXG4gICAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGN1bGF0ZWRPZmZzZXQgPSB0aGlzLmdldENhbGN1bGF0ZWRPZmZzZXQocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoY2FsY3VsYXRlZE9mZnNldCwgcGxhY2VtZW50KVxuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IHRoYXQuaG92ZXJTdGF0ZVxuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ3Nob3duLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICAgIHRoYXQuaG92ZXJTdGF0ZSA9IG51bGxcblxuICAgICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT0gJ291dCcpIHRoYXQubGVhdmUodGhhdClcbiAgICAgIH1cblxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgICAkdGlwXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjb21wbGV0ZSgpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuYXBwbHlQbGFjZW1lbnQgPSBmdW5jdGlvbiAob2Zmc2V0LCBwbGFjZW1lbnQpIHtcbiAgICB2YXIgJHRpcCAgID0gdGhpcy50aXAoKVxuICAgIHZhciB3aWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAvLyBtYW51YWxseSByZWFkIG1hcmdpbnMgYmVjYXVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaW5jbHVkZXMgZGlmZmVyZW5jZVxuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUludCgkdGlwLmNzcygnbWFyZ2luLXRvcCcpLCAxMClcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tbGVmdCcpLCAxMClcblxuICAgIC8vIHdlIG11c3QgY2hlY2sgZm9yIE5hTiBmb3IgaWUgOC85XG4gICAgaWYgKGlzTmFOKG1hcmdpblRvcCkpICBtYXJnaW5Ub3AgID0gMFxuICAgIGlmIChpc05hTihtYXJnaW5MZWZ0KSkgbWFyZ2luTGVmdCA9IDBcblxuICAgIG9mZnNldC50b3AgICs9IG1hcmdpblRvcFxuICAgIG9mZnNldC5sZWZ0ICs9IG1hcmdpbkxlZnRcblxuICAgIC8vICQuZm4ub2Zmc2V0IGRvZXNuJ3Qgcm91bmQgcGl4ZWwgdmFsdWVzXG4gICAgLy8gc28gd2UgdXNlIHNldE9mZnNldCBkaXJlY3RseSB3aXRoIG91ciBvd24gZnVuY3Rpb24gQi0wXG4gICAgJC5vZmZzZXQuc2V0T2Zmc2V0KCR0aXBbMF0sICQuZXh0ZW5kKHtcbiAgICAgIHVzaW5nOiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgJHRpcC5jc3Moe1xuICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChwcm9wcy50b3ApLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQocHJvcHMubGVmdClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LCBvZmZzZXQpLCAwKVxuXG4gICAgJHRpcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHBsYWNpbmcgdGlwIGluIG5ldyBvZmZzZXQgY2F1c2VkIHRoZSB0aXAgdG8gcmVzaXplIGl0c2VsZlxuICAgIHZhciBhY3R1YWxXaWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICBpZiAocGxhY2VtZW50ID09ICd0b3AnICYmIGFjdHVhbEhlaWdodCAhPSBoZWlnaHQpIHtcbiAgICAgIG9mZnNldC50b3AgPSBvZmZzZXQudG9wICsgaGVpZ2h0IC0gYWN0dWFsSGVpZ2h0XG4gICAgfVxuXG4gICAgdmFyIGRlbHRhID0gdGhpcy5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEocGxhY2VtZW50LCBvZmZzZXQsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICBpZiAoZGVsdGEubGVmdCkgb2Zmc2V0LmxlZnQgKz0gZGVsdGEubGVmdFxuICAgIGVsc2Ugb2Zmc2V0LnRvcCArPSBkZWx0YS50b3BcblxuICAgIHZhciBpc1ZlcnRpY2FsICAgICAgICAgID0gL3RvcHxib3R0b20vLnRlc3QocGxhY2VtZW50KVxuICAgIHZhciBhcnJvd0RlbHRhICAgICAgICAgID0gaXNWZXJ0aWNhbCA/IGRlbHRhLmxlZnQgKiAyIC0gd2lkdGggKyBhY3R1YWxXaWR0aCA6IGRlbHRhLnRvcCAqIDIgLSBoZWlnaHQgKyBhY3R1YWxIZWlnaHRcbiAgICB2YXIgYXJyb3dPZmZzZXRQb3NpdGlvbiA9IGlzVmVydGljYWwgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCdcblxuICAgICR0aXAub2Zmc2V0KG9mZnNldClcbiAgICB0aGlzLnJlcGxhY2VBcnJvdyhhcnJvd0RlbHRhLCAkdGlwWzBdW2Fycm93T2Zmc2V0UG9zaXRpb25dLCBpc1ZlcnRpY2FsKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUucmVwbGFjZUFycm93ID0gZnVuY3Rpb24gKGRlbHRhLCBkaW1lbnNpb24sIGlzVmVydGljYWwpIHtcbiAgICB0aGlzLmFycm93KClcbiAgICAgIC5jc3MoaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnLCA1MCAqICgxIC0gZGVsdGEgLyBkaW1lbnNpb24pICsgJyUnKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsICcnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRpcCAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHRpdGxlID0gdGhpcy5nZXRUaXRsZSgpXG5cbiAgICAkdGlwLmZpbmQoJy50b29sdGlwLWlubmVyJylbdGhpcy5vcHRpb25zLmh0bWwgPyAnaHRtbCcgOiAndGV4dCddKHRpdGxlKVxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgaW4gdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0JylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgJHRpcCA9ICQodGhpcy4kdGlwKVxuICAgIHZhciBlICAgID0gJC5FdmVudCgnaGlkZS5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICBpZiAodGhhdC5ob3ZlclN0YXRlICE9ICdpbicpICR0aXAuZGV0YWNoKClcbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKVxuICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHRpcFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgY29tcGxldGUoKVxuXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICBpZiAoJGUuYXR0cigndGl0bGUnKSB8fCB0eXBlb2YgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpICE9ICdzdHJpbmcnKSB7XG4gICAgICAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgJGUuYXR0cigndGl0bGUnKSB8fCAnJykuYXR0cigndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQgICA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnRcblxuICAgIHZhciBlbCAgICAgPSAkZWxlbWVudFswXVxuICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJ1xuXG4gICAgdmFyIGVsUmVjdCAgICA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7XG4gICAgICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBtaXNzaW5nIGluIElFOCwgc28gY29tcHV0ZSB0aGVtIG1hbnVhbGx5OyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8xNDA5M1xuICAgICAgZWxSZWN0ID0gJC5leHRlbmQoe30sIGVsUmVjdCwgeyB3aWR0aDogZWxSZWN0LnJpZ2h0IC0gZWxSZWN0LmxlZnQsIGhlaWdodDogZWxSZWN0LmJvdHRvbSAtIGVsUmVjdC50b3AgfSlcbiAgICB9XG4gICAgdmFyIGVsT2Zmc2V0ICA9IGlzQm9keSA/IHsgdG9wOiAwLCBsZWZ0OiAwIH0gOiAkZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciBzY3JvbGwgICAgPSB7IHNjcm9sbDogaXNCb2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA6ICRlbGVtZW50LnNjcm9sbFRvcCgpIH1cbiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsXG5cbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGVsUmVjdCwgc2Nyb2xsLCBvdXRlckRpbXMsIGVsT2Zmc2V0KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Q2FsY3VsYXRlZE9mZnNldCA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsICAgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgPyB7IHRvcDogcG9zLnRvcCAtIGFjdHVhbEhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgLSBhY3R1YWxXaWR0aCB9IDpcbiAgICAgICAgLyogcGxhY2VtZW50ID09ICdyaWdodCcgKi8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH1cblxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgdmFyIGRlbHRhID0geyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YVxuXG4gICAgdmFyIHZpZXdwb3J0UGFkZGluZyA9IHRoaXMub3B0aW9ucy52aWV3cG9ydCAmJiB0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZyB8fCAwXG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXG5cbiAgICBpZiAoL3JpZ2h0fGxlZnQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbFxuICAgICAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSBwb3MudG9wICsgdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbCArIGFjdHVhbEhlaWdodFxuICAgICAgaWYgKHRvcEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMudG9wKSB7IC8vIHRvcCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQpIHsgLy8gYm90dG9tIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0IC0gYm90dG9tRWRnZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVmdEVkZ2VPZmZzZXQgID0gcG9zLmxlZnQgLSB2aWV3cG9ydFBhZGRpbmdcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoXG4gICAgICBpZiAobGVmdEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCkgeyAvLyBsZWZ0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCAtIGxlZnRFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy5yaWdodCkgeyAvLyByaWdodCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgKyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGggLSByaWdodEVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsdGFcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aXRsZVxuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHRpdGxlID0gJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpXG4gICAgICB8fCAodHlwZW9mIG8udGl0bGUgPT0gJ2Z1bmN0aW9uJyA/IG8udGl0bGUuY2FsbCgkZVswXSkgOiAgby50aXRsZSlcblxuICAgIHJldHVybiB0aXRsZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VUlEID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGRvIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogMTAwMDAwMClcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICByZXR1cm4gcHJlZml4XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiR0aXApIHtcbiAgICAgIHRoaXMuJHRpcCA9ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKVxuICAgICAgaWYgKHRoaXMuJHRpcC5sZW5ndGggIT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy50eXBlICsgJyBgdGVtcGxhdGVgIG9wdGlvbiBtdXN0IGNvbnNpc3Qgb2YgZXhhY3RseSAxIHRvcC1sZXZlbCBlbGVtZW50IScpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiR0aXBcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy50b29sdGlwLWFycm93JykpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzZWxmID0gdGhpc1xuICAgIGlmIChlKSB7XG4gICAgICBzZWxmID0gJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG4gICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZS5jbGljayA9ICFzZWxmLmluU3RhdGUuY2xpY2tcbiAgICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgc2VsZi5lbnRlcihzZWxmKVxuICAgICAgZWxzZSBzZWxmLmxlYXZlKHNlbGYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcbiAgICB0aGlzLmhpZGUoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vZmYoJy4nICsgdGhhdC50eXBlKS5yZW1vdmVEYXRhKCdicy4nICsgdGhhdC50eXBlKVxuICAgICAgaWYgKHRoYXQuJHRpcCkge1xuICAgICAgICB0aGF0LiR0aXAuZGV0YWNoKClcbiAgICAgIH1cbiAgICAgIHRoYXQuJHRpcCA9IG51bGxcbiAgICAgIHRoYXQuJGFycm93ID0gbnVsbFxuICAgICAgdGhhdC4kdmlld3BvcnQgPSBudWxsXG4gICAgfSlcbiAgfVxuXG5cbiAgLy8gVE9PTFRJUCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChvcHRpb24pKSByZXR1cm5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMudG9vbHRpcCcsIChkYXRhID0gbmV3IFRvb2x0aXAodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnRvb2x0aXBcblxuICAkLmZuLnRvb2x0aXAgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yID0gVG9vbHRpcFxuXG5cbiAgLy8gVE9PTFRJUCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi50b29sdGlwLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi50b29sdGlwID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdHJhbnNpdGlvbi5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RyYW5zaXRpb25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ1NTIFRSQU5TSVRJT04gU1VQUE9SVCAoU2hvdXRvdXQ6IGh0dHA6Ly93d3cubW9kZXJuaXpyLmNvbS8pXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9vdHN0cmFwJylcblxuICAgIHZhciB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XG4gICAgICBXZWJraXRUcmFuc2l0aW9uIDogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgTW96VHJhbnNpdGlvbiAgICA6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgIE9UcmFuc2l0aW9uICAgICAgOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxuICAgICAgdHJhbnNpdGlvbiAgICAgICA6ICd0cmFuc2l0aW9uZW5kJ1xuICAgIH1cblxuICAgIGZvciAodmFyIG5hbWUgaW4gdHJhbnNFbmRFdmVudE5hbWVzKSB7XG4gICAgICBpZiAoZWwuc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4geyBlbmQ6IHRyYW5zRW5kRXZlbnROYW1lc1tuYW1lXSB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlIC8vIGV4cGxpY2l0IGZvciBpZTggKCAgLl8uKVxuICB9XG5cbiAgLy8gaHR0cDovL2Jsb2cuYWxleG1hY2Nhdy5jb20vY3NzLXRyYW5zaXRpb25zXG4gICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2VcbiAgICB2YXIgJGVsID0gdGhpc1xuICAgICQodGhpcykub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWUgfSlcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IGlmICghY2FsbGVkKSAkKCRlbCkudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpIH1cbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkdXJhdGlvbilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgJChmdW5jdGlvbiAoKSB7XG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kKClcblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVyblxuXG4gICAgJC5ldmVudC5zcGVjaWFsLmJzVHJhbnNpdGlvbkVuZCA9IHtcbiAgICAgIGJpbmRUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICBkZWxlZ2F0ZVR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoaXMpKSByZXR1cm4gZS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYgKHRoaXMuX2V2ZW50cykge1xuICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oZXZsaXN0ZW5lcikpXG4gICAgICByZXR1cm4gMTtcbiAgICBlbHNlIGlmIChldmxpc3RlbmVyKVxuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG4iLCJpbXBvcnQgcnVudGltZSBmcm9tICcuL2hhbmRsZWJhcnMucnVudGltZSc7XG5cbi8vIENvbXBpbGVyIGltcG9ydHNcbmltcG9ydCBBU1QgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2FzdCc7XG5pbXBvcnQgeyBwYXJzZXIgYXMgUGFyc2VyLCBwYXJzZSB9IGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9iYXNlJztcbmltcG9ydCB7IENvbXBpbGVyLCBjb21waWxlLCBwcmVjb21waWxlIH0gZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvbXBpbGVyJztcbmltcG9ydCBKYXZhU2NyaXB0Q29tcGlsZXIgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2phdmFzY3JpcHQtY29tcGlsZXInO1xuaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL3Zpc2l0b3InO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG5sZXQgX2NyZWF0ZSA9IHJ1bnRpbWUuY3JlYXRlO1xuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBfY3JlYXRlKCk7XG5cbiAgaGIuY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcbiAgaGIucHJlY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcblxuICBoYi5BU1QgPSBBU1Q7XG4gIGhiLkNvbXBpbGVyID0gQ29tcGlsZXI7XG4gIGhiLkphdmFTY3JpcHRDb21waWxlciA9IEphdmFTY3JpcHRDb21waWxlcjtcbiAgaGIuUGFyc2VyID0gUGFyc2VyO1xuICBoYi5wYXJzZSA9IHBhcnNlO1xuXG4gIHJldHVybiBoYjtcbn1cblxubGV0IGluc3QgPSBjcmVhdGUoKTtcbmluc3QuY3JlYXRlID0gY3JlYXRlO1xuXG5ub0NvbmZsaWN0KGluc3QpO1xuXG5pbnN0LlZpc2l0b3IgPSBWaXNpdG9yO1xuXG5pbnN0WydkZWZhdWx0J10gPSBpbnN0O1xuXG5leHBvcnQgZGVmYXVsdCBpbnN0O1xuIiwiaW1wb3J0ICogYXMgYmFzZSBmcm9tICcuL2hhbmRsZWJhcnMvYmFzZSc7XG5cbi8vIEVhY2ggb2YgdGhlc2UgYXVnbWVudCB0aGUgSGFuZGxlYmFycyBvYmplY3QuIE5vIG5lZWQgdG8gc2V0dXAgaGVyZS5cbi8vIChUaGlzIGlzIGRvbmUgdG8gZWFzaWx5IHNoYXJlIGNvZGUgYmV0d2VlbiBjb21tb25qcyBhbmQgYnJvd3NlIGVudnMpXG5pbXBvcnQgU2FmZVN0cmluZyBmcm9tICcuL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2hhbmRsZWJhcnMvZXhjZXB0aW9uJztcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4vaGFuZGxlYmFycy91dGlscyc7XG5pbXBvcnQgKiBhcyBydW50aW1lIGZyb20gJy4vaGFuZGxlYmFycy9ydW50aW1lJztcblxuaW1wb3J0IG5vQ29uZmxpY3QgZnJvbSAnLi9oYW5kbGViYXJzL25vLWNvbmZsaWN0JztcblxuLy8gRm9yIGNvbXBhdGliaWxpdHkgYW5kIHVzYWdlIG91dHNpZGUgb2YgbW9kdWxlIHN5c3RlbXMsIG1ha2UgdGhlIEhhbmRsZWJhcnMgb2JqZWN0IGEgbmFtZXNwYWNlXG5mdW5jdGlvbiBjcmVhdGUoKSB7XG4gIGxldCBoYiA9IG5ldyBiYXNlLkhhbmRsZWJhcnNFbnZpcm9ubWVudCgpO1xuXG4gIFV0aWxzLmV4dGVuZChoYiwgYmFzZSk7XG4gIGhiLlNhZmVTdHJpbmcgPSBTYWZlU3RyaW5nO1xuICBoYi5FeGNlcHRpb24gPSBFeGNlcHRpb247XG4gIGhiLlV0aWxzID0gVXRpbHM7XG4gIGhiLmVzY2FwZUV4cHJlc3Npb24gPSBVdGlscy5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIGhiLlZNID0gcnVudGltZTtcbiAgaGIudGVtcGxhdGUgPSBmdW5jdGlvbihzcGVjKSB7XG4gICAgcmV0dXJuIHJ1bnRpbWUudGVtcGxhdGUoc3BlYywgaGIpO1xuICB9O1xuXG4gIHJldHVybiBoYjtcbn1cblxubGV0IGluc3QgPSBjcmVhdGUoKTtcbmluc3QuY3JlYXRlID0gY3JlYXRlO1xuXG5ub0NvbmZsaWN0KGluc3QpO1xuXG5pbnN0WydkZWZhdWx0J10gPSBpbnN0O1xuXG5leHBvcnQgZGVmYXVsdCBpbnN0O1xuIiwiaW1wb3J0IHtjcmVhdGVGcmFtZSwgZXh0ZW5kLCB0b1N0cmluZ30gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vZXhjZXB0aW9uJztcbmltcG9ydCB7cmVnaXN0ZXJEZWZhdWx0SGVscGVyc30gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7cmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9yc30gZnJvbSAnLi9kZWNvcmF0b3JzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9ICc0LjAuMTAnO1xuZXhwb3J0IGNvbnN0IENPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0IGNvbnN0IFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAnXG59O1xuXG5jb25zdCBvYmplY3RUeXBlID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcbiAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcbiAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG4gIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XG59XG5cbkhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGViYXJzRW52aXJvbm1lbnQsXG5cbiAgbG9nZ2VyOiBsb2dnZXIsXG4gIGxvZzogbG9nZ2VyLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgaGVscGVycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oYEF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIiR7bmFtZX1cIiBhcyB1bmRlZmluZWRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBsb2cgPSBsb2dnZXIubG9nO1xuXG5leHBvcnQge2NyZWF0ZUZyYW1lLCBsb2dnZXJ9O1xuIiwibGV0IEFTVCA9IHtcbiAgLy8gUHVibGljIEFQSSB1c2VkIHRvIGV2YWx1YXRlIGRlcml2ZWQgYXR0cmlidXRlcyByZWdhcmRpbmcgQVNUIG5vZGVzXG4gIGhlbHBlcnM6IHtcbiAgICAvLyBhIG11c3RhY2hlIGlzIGRlZmluaXRlbHkgYSBoZWxwZXIgaWY6XG4gICAgLy8gKiBpdCBpcyBhbiBlbGlnaWJsZSBoZWxwZXIsIGFuZFxuICAgIC8vICogaXQgaGFzIGF0IGxlYXN0IG9uZSBwYXJhbWV0ZXIgb3IgaGFzaCBzZWdtZW50XG4gICAgaGVscGVyRXhwcmVzc2lvbjogZnVuY3Rpb24obm9kZSkge1xuICAgICAgcmV0dXJuIChub2RlLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJylcbiAgICAgICAgICB8fCAoKG5vZGUudHlwZSA9PT0gJ011c3RhY2hlU3RhdGVtZW50JyB8fCBub2RlLnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpXG4gICAgICAgICAgICAmJiAhISgobm9kZS5wYXJhbXMgJiYgbm9kZS5wYXJhbXMubGVuZ3RoKSB8fCBub2RlLmhhc2gpKTtcbiAgICB9LFxuXG4gICAgc2NvcGVkSWQ6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiAoL15cXC58dGhpc1xcYi8pLnRlc3QocGF0aC5vcmlnaW5hbCk7XG4gICAgfSxcblxuICAgIC8vIGFuIElEIGlzIHNpbXBsZSBpZiBpdCBvbmx5IGhhcyBvbmUgcGFydCwgYW5kIHRoYXQgcGFydCBpcyBub3RcbiAgICAvLyBgLi5gIG9yIGB0aGlzYC5cbiAgICBzaW1wbGVJZDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgucGFydHMubGVuZ3RoID09PSAxICYmICFBU1QuaGVscGVycy5zY29wZWRJZChwYXRoKSAmJiAhcGF0aC5kZXB0aDtcbiAgICB9XG4gIH1cbn07XG5cblxuLy8gTXVzdCBiZSBleHBvcnRlZCBhcyBhbiBvYmplY3QgcmF0aGVyIHRoYW4gdGhlIHJvb3Qgb2YgdGhlIG1vZHVsZSBhcyB0aGUgamlzb24gbGV4ZXJcbi8vIG11c3QgbW9kaWZ5IHRoZSBvYmplY3QgdG8gb3BlcmF0ZSBwcm9wZXJseS5cbmV4cG9ydCBkZWZhdWx0IEFTVDtcbiIsImltcG9ydCBwYXJzZXIgZnJvbSAnLi9wYXJzZXInO1xuaW1wb3J0IFdoaXRlc3BhY2VDb250cm9sIGZyb20gJy4vd2hpdGVzcGFjZS1jb250cm9sJztcbmltcG9ydCAqIGFzIEhlbHBlcnMgZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IHsgcGFyc2VyIH07XG5cbmxldCB5eSA9IHt9O1xuZXh0ZW5kKHl5LCBIZWxwZXJzKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKGlucHV0LCBvcHRpb25zKSB7XG4gIC8vIEp1c3QgcmV0dXJuIGlmIGFuIGFscmVhZHktY29tcGlsZWQgQVNUIHdhcyBwYXNzZWQgaW4uXG4gIGlmIChpbnB1dC50eXBlID09PSAnUHJvZ3JhbScpIHsgcmV0dXJuIGlucHV0OyB9XG5cbiAgcGFyc2VyLnl5ID0geXk7XG5cbiAgLy8gQWx0ZXJpbmcgdGhlIHNoYXJlZCBvYmplY3QgaGVyZSwgYnV0IHRoaXMgaXMgb2sgYXMgcGFyc2VyIGlzIGEgc3luYyBvcGVyYXRpb25cbiAgeXkubG9jSW5mbyA9IGZ1bmN0aW9uKGxvY0luZm8pIHtcbiAgICByZXR1cm4gbmV3IHl5LlNvdXJjZUxvY2F0aW9uKG9wdGlvbnMgJiYgb3B0aW9ucy5zcmNOYW1lLCBsb2NJbmZvKTtcbiAgfTtcblxuICBsZXQgc3RyaXAgPSBuZXcgV2hpdGVzcGFjZUNvbnRyb2wob3B0aW9ucyk7XG4gIHJldHVybiBzdHJpcC5hY2NlcHQocGFyc2VyLnBhcnNlKGlucHV0KSk7XG59XG4iLCIvKiBnbG9iYWwgZGVmaW5lICovXG5pbXBvcnQge2lzQXJyYXl9IGZyb20gJy4uL3V0aWxzJztcblxubGV0IFNvdXJjZU5vZGU7XG5cbnRyeSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nIHx8ICFkZWZpbmUuYW1kKSB7XG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCB0aGlzIGluIEFNRCBlbnZpcm9ubWVudHMuIEZvciB0aGVzZSBlbnZpcm9ubWVudHMsIHdlIGFzdXNtZSB0aGF0XG4gICAgLy8gdGhleSBhcmUgcnVubmluZyBvbiB0aGUgYnJvd3NlciBhbmQgdGh1cyBoYXZlIG5vIG5lZWQgZm9yIHRoZSBzb3VyY2UtbWFwIGxpYnJhcnkuXG4gICAgbGV0IFNvdXJjZU1hcCA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKTtcbiAgICBTb3VyY2VOb2RlID0gU291cmNlTWFwLlNvdXJjZU5vZGU7XG4gIH1cbn0gY2F0Y2ggKGVycikge1xuICAvKiBOT1AgKi9cbn1cblxuLyogaXN0YW5idWwgaWdub3JlIGlmOiB0ZXN0ZWQgYnV0IG5vdCBjb3ZlcmVkIGluIGlzdGFuYnVsIGR1ZSB0byBkaXN0IGJ1aWxkICAqL1xuaWYgKCFTb3VyY2VOb2RlKSB7XG4gIFNvdXJjZU5vZGUgPSBmdW5jdGlvbihsaW5lLCBjb2x1bW4sIHNyY0ZpbGUsIGNodW5rcykge1xuICAgIHRoaXMuc3JjID0gJyc7XG4gICAgaWYgKGNodW5rcykge1xuICAgICAgdGhpcy5hZGQoY2h1bmtzKTtcbiAgICB9XG4gIH07XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlID0ge1xuICAgIGFkZDogZnVuY3Rpb24oY2h1bmtzKSB7XG4gICAgICBpZiAoaXNBcnJheShjaHVua3MpKSB7XG4gICAgICAgIGNodW5rcyA9IGNodW5rcy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3JjICs9IGNodW5rcztcbiAgICB9LFxuICAgIHByZXBlbmQ6IGZ1bmN0aW9uKGNodW5rcykge1xuICAgICAgaWYgKGlzQXJyYXkoY2h1bmtzKSkge1xuICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNyYyA9IGNodW5rcyArIHRoaXMuc3JjO1xuICAgIH0sXG4gICAgdG9TdHJpbmdXaXRoU291cmNlTWFwOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7Y29kZTogdGhpcy50b1N0cmluZygpfTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNyYztcbiAgICB9XG4gIH07XG59XG5cblxuZnVuY3Rpb24gY2FzdENodW5rKGNodW5rLCBjb2RlR2VuLCBsb2MpIHtcbiAgaWYgKGlzQXJyYXkoY2h1bmspKSB7XG4gICAgbGV0IHJldCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICByZXQucHVzaChjb2RlR2VuLndyYXAoY2h1bmtbaV0sIGxvYykpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiBjaHVuayA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBIYW5kbGUgcHJpbWl0aXZlcyB0aGF0IHRoZSBTb3VyY2VOb2RlIHdpbGwgdGhyb3cgdXAgb25cbiAgICByZXR1cm4gY2h1bmsgKyAnJztcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cblxuZnVuY3Rpb24gQ29kZUdlbihzcmNGaWxlKSB7XG4gIHRoaXMuc3JjRmlsZSA9IHNyY0ZpbGU7XG4gIHRoaXMuc291cmNlID0gW107XG59XG5cbkNvZGVHZW4ucHJvdG90eXBlID0ge1xuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiAhdGhpcy5zb3VyY2UubGVuZ3RoO1xuICB9LFxuICBwcmVwZW5kOiBmdW5jdGlvbihzb3VyY2UsIGxvYykge1xuICAgIHRoaXMuc291cmNlLnVuc2hpZnQodGhpcy53cmFwKHNvdXJjZSwgbG9jKSk7XG4gIH0sXG4gIHB1c2g6IGZ1bmN0aW9uKHNvdXJjZSwgbG9jKSB7XG4gICAgdGhpcy5zb3VyY2UucHVzaCh0aGlzLndyYXAoc291cmNlLCBsb2MpKTtcbiAgfSxcblxuICBtZXJnZTogZnVuY3Rpb24oKSB7XG4gICAgbGV0IHNvdXJjZSA9IHRoaXMuZW1wdHkoKTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgc291cmNlLmFkZChbJyAgJywgbGluZSwgJ1xcbiddKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc291cmNlO1xuICB9LFxuXG4gIGVhY2g6IGZ1bmN0aW9uKGl0ZXIpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5zb3VyY2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGl0ZXIodGhpcy5zb3VyY2VbaV0pO1xuICAgIH1cbiAgfSxcblxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgbGV0IGxvYyA9IHRoaXMuY3VycmVudExvY2F0aW9uIHx8IHtzdGFydDoge319O1xuICAgIHJldHVybiBuZXcgU291cmNlTm9kZShsb2Muc3RhcnQubGluZSwgbG9jLnN0YXJ0LmNvbHVtbiwgdGhpcy5zcmNGaWxlKTtcbiAgfSxcbiAgd3JhcDogZnVuY3Rpb24oY2h1bmssIGxvYyA9IHRoaXMuY3VycmVudExvY2F0aW9uIHx8IHtzdGFydDoge319KSB7XG4gICAgaWYgKGNodW5rIGluc3RhbmNlb2YgU291cmNlTm9kZSkge1xuICAgICAgcmV0dXJuIGNodW5rO1xuICAgIH1cblxuICAgIGNodW5rID0gY2FzdENodW5rKGNodW5rLCB0aGlzLCBsb2MpO1xuXG4gICAgcmV0dXJuIG5ldyBTb3VyY2VOb2RlKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uLCB0aGlzLnNyY0ZpbGUsIGNodW5rKTtcbiAgfSxcblxuICBmdW5jdGlvbkNhbGw6IGZ1bmN0aW9uKGZuLCB0eXBlLCBwYXJhbXMpIHtcbiAgICBwYXJhbXMgPSB0aGlzLmdlbmVyYXRlTGlzdChwYXJhbXMpO1xuICAgIHJldHVybiB0aGlzLndyYXAoW2ZuLCB0eXBlID8gJy4nICsgdHlwZSArICcoJyA6ICcoJywgcGFyYW1zLCAnKSddKTtcbiAgfSxcblxuICBxdW90ZWRTdHJpbmc6IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiAnXCInICsgKHN0ciArICcnKVxuICAgICAgLnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJylcbiAgICAgIC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJylcbiAgICAgIC5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJylcbiAgICAgIC5yZXBsYWNlKC9cXHIvZywgJ1xcXFxyJylcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKSAgIC8vIFBlciBFY21hLTI2MiA3LjMgKyA3LjguNFxuICAgICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpICsgJ1wiJztcbiAgfSxcblxuICBvYmplY3RMaXRlcmFsOiBmdW5jdGlvbihvYmopIHtcbiAgICBsZXQgcGFpcnMgPSBbXTtcblxuICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBsZXQgdmFsdWUgPSBjYXN0Q2h1bmsob2JqW2tleV0sIHRoaXMpO1xuICAgICAgICBpZiAodmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChbdGhpcy5xdW90ZWRTdHJpbmcoa2V5KSwgJzonLCB2YWx1ZV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJldCA9IHRoaXMuZ2VuZXJhdGVMaXN0KHBhaXJzKTtcbiAgICByZXQucHJlcGVuZCgneycpO1xuICAgIHJldC5hZGQoJ30nKTtcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG5cbiAgZ2VuZXJhdGVMaXN0OiBmdW5jdGlvbihlbnRyaWVzKSB7XG4gICAgbGV0IHJldCA9IHRoaXMuZW1wdHkoKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoaSkge1xuICAgICAgICByZXQuYWRkKCcsJyk7XG4gICAgICB9XG5cbiAgICAgIHJldC5hZGQoY2FzdENodW5rKGVudHJpZXNbaV0sIHRoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIGdlbmVyYXRlQXJyYXk6IGZ1bmN0aW9uKGVudHJpZXMpIHtcbiAgICBsZXQgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QoZW50cmllcyk7XG4gICAgcmV0LnByZXBlbmQoJ1snKTtcbiAgICByZXQuYWRkKCddJyk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb2RlR2VuO1xuXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuZXctY2FwICovXG5cbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcbmltcG9ydCB7aXNBcnJheSwgaW5kZXhPZiwgZXh0ZW5kfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgQVNUIGZyb20gJy4vYXN0JztcblxuY29uc3Qgc2xpY2UgPSBbXS5zbGljZTtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbXBpbGVyKCkge31cblxuLy8gdGhlIGZvdW5kSGVscGVyIHJlZ2lzdGVyIHdpbGwgZGlzYW1iaWd1YXRlIGhlbHBlciBsb29rdXAgZnJvbSBmaW5kaW5nIGFcbi8vIGZ1bmN0aW9uIGluIGEgY29udGV4dC4gVGhpcyBpcyBuZWNlc3NhcnkgZm9yIG11c3RhY2hlIGNvbXBhdGliaWxpdHksIHdoaWNoXG4vLyByZXF1aXJlcyB0aGF0IGNvbnRleHQgZnVuY3Rpb25zIGluIGJsb2NrcyBhcmUgZXZhbHVhdGVkIGJ5IGJsb2NrSGVscGVyTWlzc2luZyxcbi8vIGFuZCB0aGVuIHByb2NlZWQgYXMgaWYgdGhlIHJlc3VsdGluZyB2YWx1ZSB3YXMgcHJvdmlkZWQgdG8gYmxvY2tIZWxwZXJNaXNzaW5nLlxuXG5Db21waWxlci5wcm90b3R5cGUgPSB7XG4gIGNvbXBpbGVyOiBDb21waWxlcixcblxuICBlcXVhbHM6IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgbGV0IGxlbiA9IHRoaXMub3Bjb2Rlcy5sZW5ndGg7XG4gICAgaWYgKG90aGVyLm9wY29kZXMubGVuZ3RoICE9PSBsZW4pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBsZXQgb3Bjb2RlID0gdGhpcy5vcGNvZGVzW2ldLFxuICAgICAgICAgIG90aGVyT3Bjb2RlID0gb3RoZXIub3Bjb2Rlc1tpXTtcbiAgICAgIGlmIChvcGNvZGUub3Bjb2RlICE9PSBvdGhlck9wY29kZS5vcGNvZGUgfHwgIWFyZ0VxdWFscyhvcGNvZGUuYXJncywgb3RoZXJPcGNvZGUuYXJncykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdlIGtub3cgdGhhdCBsZW5ndGggaXMgdGhlIHNhbWUgYmV0d2VlbiB0aGUgdHdvIGFycmF5cyBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IHRpZWRcbiAgICAvLyB0byB0aGUgb3Bjb2RlIGJlaGF2aW9yIGFib3ZlLlxuICAgIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICghdGhpcy5jaGlsZHJlbltpXS5lcXVhbHMob3RoZXIuY2hpbGRyZW5baV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBndWlkOiAwLFxuXG4gIGNvbXBpbGU6IGZ1bmN0aW9uKHByb2dyYW0sIG9wdGlvbnMpIHtcbiAgICB0aGlzLnNvdXJjZU5vZGUgPSBbXTtcbiAgICB0aGlzLm9wY29kZXMgPSBbXTtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0cmluZ1BhcmFtcyA9IG9wdGlvbnMuc3RyaW5nUGFyYW1zO1xuICAgIHRoaXMudHJhY2tJZHMgPSBvcHRpb25zLnRyYWNrSWRzO1xuXG4gICAgb3B0aW9ucy5ibG9ja1BhcmFtcyA9IG9wdGlvbnMuYmxvY2tQYXJhbXMgfHwgW107XG5cbiAgICAvLyBUaGVzZSBjaGFuZ2VzIHdpbGwgcHJvcGFnYXRlIHRvIHRoZSBvdGhlciBjb21waWxlciBjb21wb25lbnRzXG4gICAgbGV0IGtub3duSGVscGVycyA9IG9wdGlvbnMua25vd25IZWxwZXJzO1xuICAgIG9wdGlvbnMua25vd25IZWxwZXJzID0ge1xuICAgICAgJ2hlbHBlck1pc3NpbmcnOiB0cnVlLFxuICAgICAgJ2Jsb2NrSGVscGVyTWlzc2luZyc6IHRydWUsXG4gICAgICAnZWFjaCc6IHRydWUsXG4gICAgICAnaWYnOiB0cnVlLFxuICAgICAgJ3VubGVzcyc6IHRydWUsXG4gICAgICAnd2l0aCc6IHRydWUsXG4gICAgICAnbG9nJzogdHJ1ZSxcbiAgICAgICdsb29rdXAnOiB0cnVlXG4gICAgfTtcbiAgICBpZiAoa25vd25IZWxwZXJzKSB7XG4gICAgICBmb3IgKGxldCBuYW1lIGluIGtub3duSGVscGVycykge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAobmFtZSBpbiBrbm93bkhlbHBlcnMpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzW25hbWVdID0ga25vd25IZWxwZXJzW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYWNjZXB0KHByb2dyYW0pO1xuICB9LFxuXG4gIGNvbXBpbGVQcm9ncmFtOiBmdW5jdGlvbihwcm9ncmFtKSB7XG4gICAgbGV0IGNoaWxkQ29tcGlsZXIgPSBuZXcgdGhpcy5jb21waWxlcigpLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgICAgICAgcmVzdWx0ID0gY2hpbGRDb21waWxlci5jb21waWxlKHByb2dyYW0sIHRoaXMub3B0aW9ucyksXG4gICAgICAgIGd1aWQgPSB0aGlzLmd1aWQrKztcblxuICAgIHRoaXMudXNlUGFydGlhbCA9IHRoaXMudXNlUGFydGlhbCB8fCByZXN1bHQudXNlUGFydGlhbDtcblxuICAgIHRoaXMuY2hpbGRyZW5bZ3VpZF0gPSByZXN1bHQ7XG4gICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCByZXN1bHQudXNlRGVwdGhzO1xuXG4gICAgcmV0dXJuIGd1aWQ7XG4gIH0sXG5cbiAgYWNjZXB0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXG4gICAgaWYgKCF0aGlzW25vZGUudHlwZV0pIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1Vua25vd24gdHlwZTogJyArIG5vZGUudHlwZSwgbm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zb3VyY2VOb2RlLnVuc2hpZnQobm9kZSk7XG4gICAgbGV0IHJldCA9IHRoaXNbbm9kZS50eXBlXShub2RlKTtcbiAgICB0aGlzLnNvdXJjZU5vZGUuc2hpZnQoKTtcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIFByb2dyYW06IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgICB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMudW5zaGlmdChwcm9ncmFtLmJsb2NrUGFyYW1zKTtcblxuICAgIGxldCBib2R5ID0gcHJvZ3JhbS5ib2R5LFxuICAgICAgICBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5TGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYWNjZXB0KGJvZHlbaV0pO1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5zaGlmdCgpO1xuXG4gICAgdGhpcy5pc1NpbXBsZSA9IGJvZHlMZW5ndGggPT09IDE7XG4gICAgdGhpcy5ibG9ja1BhcmFtcyA9IHByb2dyYW0uYmxvY2tQYXJhbXMgPyBwcm9ncmFtLmJsb2NrUGFyYW1zLmxlbmd0aCA6IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24oYmxvY2spIHtcbiAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKGJsb2NrKTtcblxuICAgIGxldCBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSxcbiAgICAgICAgaW52ZXJzZSA9IGJsb2NrLmludmVyc2U7XG5cbiAgICBwcm9ncmFtID0gcHJvZ3JhbSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKHByb2dyYW0pO1xuICAgIGludmVyc2UgPSBpbnZlcnNlICYmIHRoaXMuY29tcGlsZVByb2dyYW0oaW52ZXJzZSk7XG5cbiAgICBsZXQgdHlwZSA9IHRoaXMuY2xhc3NpZnlTZXhwcihibG9jayk7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2hlbHBlcicpIHtcbiAgICAgIHRoaXMuaGVscGVyU2V4cHIoYmxvY2ssIHByb2dyYW0sIGludmVyc2UpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3NpbXBsZScpIHtcbiAgICAgIHRoaXMuc2ltcGxlU2V4cHIoYmxvY2spO1xuXG4gICAgICAvLyBub3cgdGhhdCB0aGUgc2ltcGxlIG11c3RhY2hlIGlzIHJlc29sdmVkLCB3ZSBuZWVkIHRvXG4gICAgICAvLyBldmFsdWF0ZSBpdCBieSBleGVjdXRpbmcgYGJsb2NrSGVscGVyTWlzc2luZ2BcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG4gICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJyk7XG4gICAgICB0aGlzLm9wY29kZSgnYmxvY2tWYWx1ZScsIGJsb2NrLnBhdGgub3JpZ2luYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFtYmlndW91c1NleHByKGJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlKTtcblxuICAgICAgLy8gbm93IHRoYXQgdGhlIHNpbXBsZSBtdXN0YWNoZSBpcyByZXNvbHZlZCwgd2UgbmVlZCB0b1xuICAgICAgLy8gZXZhbHVhdGUgaXQgYnkgZXhlY3V0aW5nIGBibG9ja0hlbHBlck1pc3NpbmdgXG4gICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuICAgICAgdGhpcy5vcGNvZGUoJ2VtcHR5SGFzaCcpO1xuICAgICAgdGhpcy5vcGNvZGUoJ2FtYmlndW91c0Jsb2NrVmFsdWUnKTtcbiAgICB9XG5cbiAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XG4gIH0sXG5cbiAgRGVjb3JhdG9yQmxvY2soZGVjb3JhdG9yKSB7XG4gICAgbGV0IHByb2dyYW0gPSBkZWNvcmF0b3IucHJvZ3JhbSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKGRlY29yYXRvci5wcm9ncmFtKTtcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhkZWNvcmF0b3IsIHByb2dyYW0sIHVuZGVmaW5lZCksXG4gICAgICAgIHBhdGggPSBkZWNvcmF0b3IucGF0aDtcblxuICAgIHRoaXMudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgdGhpcy5vcGNvZGUoJ3JlZ2lzdGVyRGVjb3JhdG9yJywgcGFyYW1zLmxlbmd0aCwgcGF0aC5vcmlnaW5hbCk7XG4gIH0sXG5cbiAgUGFydGlhbFN0YXRlbWVudDogZnVuY3Rpb24ocGFydGlhbCkge1xuICAgIHRoaXMudXNlUGFydGlhbCA9IHRydWU7XG5cbiAgICBsZXQgcHJvZ3JhbSA9IHBhcnRpYWwucHJvZ3JhbTtcbiAgICBpZiAocHJvZ3JhbSkge1xuICAgICAgcHJvZ3JhbSA9IHRoaXMuY29tcGlsZVByb2dyYW0ocGFydGlhbC5wcm9ncmFtKTtcbiAgICB9XG5cbiAgICBsZXQgcGFyYW1zID0gcGFydGlhbC5wYXJhbXM7XG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbnN1cHBvcnRlZCBudW1iZXIgb2YgcGFydGlhbCBhcmd1bWVudHM6ICcgKyBwYXJhbXMubGVuZ3RoLCBwYXJ0aWFsKTtcbiAgICB9IGVsc2UgaWYgKCFwYXJhbXMubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4cGxpY2l0UGFydGlhbENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ3VuZGVmaW5lZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLnB1c2goe3R5cGU6ICdQYXRoRXhwcmVzc2lvbicsIHBhcnRzOiBbXSwgZGVwdGg6IDB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcGFydGlhbE5hbWUgPSBwYXJ0aWFsLm5hbWUub3JpZ2luYWwsXG4gICAgICAgIGlzRHluYW1pYyA9IHBhcnRpYWwubmFtZS50eXBlID09PSAnU3ViRXhwcmVzc2lvbic7XG4gICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgdGhpcy5hY2NlcHQocGFydGlhbC5uYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKHBhcnRpYWwsIHByb2dyYW0sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBsZXQgaW5kZW50ID0gcGFydGlhbC5pbmRlbnQgfHwgJyc7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50SW5kZW50ICYmIGluZGVudCkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZENvbnRlbnQnLCBpbmRlbnQpO1xuICAgICAgaW5kZW50ID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5vcGNvZGUoJ2ludm9rZVBhcnRpYWwnLCBpc0R5bmFtaWMsIHBhcnRpYWxOYW1lLCBpbmRlbnQpO1xuICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcbiAgfSxcbiAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbihwYXJ0aWFsQmxvY2spIHtcbiAgICB0aGlzLlBhcnRpYWxTdGF0ZW1lbnQocGFydGlhbEJsb2NrKTtcbiAgfSxcblxuICBNdXN0YWNoZVN0YXRlbWVudDogZnVuY3Rpb24obXVzdGFjaGUpIHtcbiAgICB0aGlzLlN1YkV4cHJlc3Npb24obXVzdGFjaGUpO1xuXG4gICAgaWYgKG11c3RhY2hlLmVzY2FwZWQgJiYgIXRoaXMub3B0aW9ucy5ub0VzY2FwZSkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZEVzY2FwZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuICAgIH1cbiAgfSxcbiAgRGVjb3JhdG9yKGRlY29yYXRvcikge1xuICAgIHRoaXMuRGVjb3JhdG9yQmxvY2soZGVjb3JhdG9yKTtcbiAgfSxcblxuXG4gIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICBpZiAoY29udGVudC52YWx1ZSkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZENvbnRlbnQnLCBjb250ZW50LnZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24oKSB7fSxcblxuICBTdWJFeHByZXNzaW9uOiBmdW5jdGlvbihzZXhwcikge1xuICAgIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoc2V4cHIpO1xuICAgIGxldCB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKHNleHByKTtcblxuICAgIGlmICh0eXBlID09PSAnc2ltcGxlJykge1xuICAgICAgdGhpcy5zaW1wbGVTZXhwcihzZXhwcik7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnaGVscGVyJykge1xuICAgICAgdGhpcy5oZWxwZXJTZXhwcihzZXhwcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW1iaWd1b3VzU2V4cHIoc2V4cHIpO1xuICAgIH1cbiAgfSxcbiAgYW1iaWd1b3VzU2V4cHI6IGZ1bmN0aW9uKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlKSB7XG4gICAgbGV0IHBhdGggPSBzZXhwci5wYXRoLFxuICAgICAgICBuYW1lID0gcGF0aC5wYXJ0c1swXSxcbiAgICAgICAgaXNCbG9jayA9IHByb2dyYW0gIT0gbnVsbCB8fCBpbnZlcnNlICE9IG51bGw7XG5cbiAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHBhdGguZGVwdGgpO1xuXG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG5cbiAgICBwYXRoLnN0cmljdCA9IHRydWU7XG4gICAgdGhpcy5hY2NlcHQocGF0aCk7XG5cbiAgICB0aGlzLm9wY29kZSgnaW52b2tlQW1iaWd1b3VzJywgbmFtZSwgaXNCbG9jayk7XG4gIH0sXG5cbiAgc2ltcGxlU2V4cHI6IGZ1bmN0aW9uKHNleHByKSB7XG4gICAgbGV0IHBhdGggPSBzZXhwci5wYXRoO1xuICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcbiAgICB0aGlzLmFjY2VwdChwYXRoKTtcbiAgICB0aGlzLm9wY29kZSgncmVzb2x2ZVBvc3NpYmxlTGFtYmRhJyk7XG4gIH0sXG5cbiAgaGVscGVyU2V4cHI6IGZ1bmN0aW9uKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlKSB7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoc2V4cHIsIHByb2dyYW0sIGludmVyc2UpLFxuICAgICAgICBwYXRoID0gc2V4cHIucGF0aCxcbiAgICAgICAgbmFtZSA9IHBhdGgucGFydHNbMF07XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmtub3duSGVscGVyc1tuYW1lXSkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUtub3duSGVscGVyJywgcGFyYW1zLmxlbmd0aCwgbmFtZSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzT25seSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignWW91IHNwZWNpZmllZCBrbm93bkhlbHBlcnNPbmx5LCBidXQgdXNlZCB0aGUgdW5rbm93biBoZWxwZXIgJyArIG5hbWUsIHNleHByKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aC5zdHJpY3QgPSB0cnVlO1xuICAgICAgcGF0aC5mYWxzeSA9IHRydWU7XG5cbiAgICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xuICAgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUhlbHBlcicsIHBhcmFtcy5sZW5ndGgsIHBhdGgub3JpZ2luYWwsIEFTVC5oZWxwZXJzLnNpbXBsZUlkKHBhdGgpKTtcbiAgICB9XG4gIH0sXG5cbiAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICB0aGlzLmFkZERlcHRoKHBhdGguZGVwdGgpO1xuICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgcGF0aC5kZXB0aCk7XG5cbiAgICBsZXQgbmFtZSA9IHBhdGgucGFydHNbMF0sXG4gICAgICAgIHNjb3BlZCA9IEFTVC5oZWxwZXJzLnNjb3BlZElkKHBhdGgpLFxuICAgICAgICBibG9ja1BhcmFtSWQgPSAhcGF0aC5kZXB0aCAmJiAhc2NvcGVkICYmIHRoaXMuYmxvY2tQYXJhbUluZGV4KG5hbWUpO1xuXG4gICAgaWYgKGJsb2NrUGFyYW1JZCkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cEJsb2NrUGFyYW0nLCBibG9ja1BhcmFtSWQsIHBhdGgucGFydHMpO1xuICAgIH0gZWxzZSBpZiAoIW5hbWUpIHtcbiAgICAgIC8vIENvbnRleHQgcmVmZXJlbmNlLCBpLmUuIGB7e2ZvbyAufX1gIG9yIGB7e2ZvbyAuLn19YFxuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hDb250ZXh0Jyk7XG4gICAgfSBlbHNlIGlmIChwYXRoLmRhdGEpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kYXRhID0gdHJ1ZTtcbiAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBEYXRhJywgcGF0aC5kZXB0aCwgcGF0aC5wYXJ0cywgcGF0aC5zdHJpY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wY29kZSgnbG9va3VwT25Db250ZXh0JywgcGF0aC5wYXJ0cywgcGF0aC5mYWxzeSwgcGF0aC5zdHJpY3QsIHNjb3BlZCk7XG4gICAgfVxuICB9LFxuXG4gIFN0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nJywgc3RyaW5nLnZhbHVlKTtcbiAgfSxcblxuICBOdW1iZXJMaXRlcmFsOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCBudW1iZXIudmFsdWUpO1xuICB9LFxuXG4gIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbihib29sKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgYm9vbC52YWx1ZSk7XG4gIH0sXG5cbiAgVW5kZWZpbmVkTGl0ZXJhbDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ3VuZGVmaW5lZCcpO1xuICB9LFxuXG4gIE51bGxMaXRlcmFsOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAnbnVsbCcpO1xuICB9LFxuXG4gIEhhc2g6IGZ1bmN0aW9uKGhhc2gpIHtcbiAgICBsZXQgcGFpcnMgPSBoYXNoLnBhaXJzLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbCA9IHBhaXJzLmxlbmd0aDtcblxuICAgIHRoaXMub3Bjb2RlKCdwdXNoSGFzaCcpO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHVzaFBhcmFtKHBhaXJzW2ldLnZhbHVlKTtcbiAgICB9XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2Fzc2lnblRvSGFzaCcsIHBhaXJzW2ldLmtleSk7XG4gICAgfVxuICAgIHRoaXMub3Bjb2RlKCdwb3BIYXNoJyk7XG4gIH0sXG5cbiAgLy8gSEVMUEVSU1xuICBvcGNvZGU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB0aGlzLm9wY29kZXMucHVzaCh7IG9wY29kZTogbmFtZSwgYXJnczogc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCBsb2M6IHRoaXMuc291cmNlTm9kZVswXS5sb2MgfSk7XG4gIH0sXG5cbiAgYWRkRGVwdGg6IGZ1bmN0aW9uKGRlcHRoKSB7XG4gICAgaWYgKCFkZXB0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudXNlRGVwdGhzID0gdHJ1ZTtcbiAgfSxcblxuICBjbGFzc2lmeVNleHByOiBmdW5jdGlvbihzZXhwcikge1xuICAgIGxldCBpc1NpbXBsZSA9IEFTVC5oZWxwZXJzLnNpbXBsZUlkKHNleHByLnBhdGgpO1xuXG4gICAgbGV0IGlzQmxvY2tQYXJhbSA9IGlzU2ltcGxlICYmICEhdGhpcy5ibG9ja1BhcmFtSW5kZXgoc2V4cHIucGF0aC5wYXJ0c1swXSk7XG5cbiAgICAvLyBhIG11c3RhY2hlIGlzIGFuIGVsaWdpYmxlIGhlbHBlciBpZjpcbiAgICAvLyAqIGl0cyBpZCBpcyBzaW1wbGUgKGEgc2luZ2xlIHBhcnQsIG5vdCBgdGhpc2Agb3IgYC4uYClcbiAgICBsZXQgaXNIZWxwZXIgPSAhaXNCbG9ja1BhcmFtICYmIEFTVC5oZWxwZXJzLmhlbHBlckV4cHJlc3Npb24oc2V4cHIpO1xuXG4gICAgLy8gaWYgYSBtdXN0YWNoZSBpcyBhbiBlbGlnaWJsZSBoZWxwZXIgYnV0IG5vdCBhIGRlZmluaXRlXG4gICAgLy8gaGVscGVyLCBpdCBpcyBhbWJpZ3VvdXMsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGluIGEgbGF0ZXJcbiAgICAvLyBwYXNzIG9yIGF0IHJ1bnRpbWUuXG4gICAgbGV0IGlzRWxpZ2libGUgPSAhaXNCbG9ja1BhcmFtICYmIChpc0hlbHBlciB8fCBpc1NpbXBsZSk7XG5cbiAgICAvLyBpZiBhbWJpZ3VvdXMsIHdlIGNhbiBwb3NzaWJseSByZXNvbHZlIHRoZSBhbWJpZ3VpdHkgbm93XG4gICAgLy8gQW4gZWxpZ2libGUgaGVscGVyIGlzIG9uZSB0aGF0IGRvZXMgbm90IGhhdmUgYSBjb21wbGV4IHBhdGgsIGkuZS4gYHRoaXMuZm9vYCwgYC4uL2Zvb2AgZXRjLlxuICAgIGlmIChpc0VsaWdpYmxlICYmICFpc0hlbHBlcikge1xuICAgICAgbGV0IG5hbWUgPSBzZXhwci5wYXRoLnBhcnRzWzBdLFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmIChvcHRpb25zLmtub3duSGVscGVyc1tuYW1lXSkge1xuICAgICAgICBpc0hlbHBlciA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzT25seSkge1xuICAgICAgICBpc0VsaWdpYmxlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzSGVscGVyKSB7XG4gICAgICByZXR1cm4gJ2hlbHBlcic7XG4gICAgfSBlbHNlIGlmIChpc0VsaWdpYmxlKSB7XG4gICAgICByZXR1cm4gJ2FtYmlndW91cyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnc2ltcGxlJztcbiAgICB9XG4gIH0sXG5cbiAgcHVzaFBhcmFtczogZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0aGlzLnB1c2hQYXJhbShwYXJhbXNbaV0pO1xuICAgIH1cbiAgfSxcblxuICBwdXNoUGFyYW06IGZ1bmN0aW9uKHZhbCkge1xuICAgIGxldCB2YWx1ZSA9IHZhbC52YWx1ZSAhPSBudWxsID8gdmFsLnZhbHVlIDogdmFsLm9yaWdpbmFsIHx8ICcnO1xuXG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICBpZiAodmFsdWUucmVwbGFjZSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAucmVwbGFjZSgvXihcXC4/XFwuXFwvKSovZywgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csICcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWwuZGVwdGgpIHtcbiAgICAgICAgdGhpcy5hZGREZXB0aCh2YWwuZGVwdGgpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCB2YWwuZGVwdGggfHwgMCk7XG4gICAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZ1BhcmFtJywgdmFsdWUsIHZhbC50eXBlKTtcblxuICAgICAgaWYgKHZhbC50eXBlID09PSAnU3ViRXhwcmVzc2lvbicpIHtcbiAgICAgICAgLy8gU3ViRXhwcmVzc2lvbnMgZ2V0IGV2YWx1YXRlZCBhbmQgcGFzc2VkIGluXG4gICAgICAgIC8vIGluIHN0cmluZyBwYXJhbXMgbW9kZS5cbiAgICAgICAgdGhpcy5hY2NlcHQodmFsKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgICAgbGV0IGJsb2NrUGFyYW1JbmRleDtcbiAgICAgICAgaWYgKHZhbC5wYXJ0cyAmJiAhQVNULmhlbHBlcnMuc2NvcGVkSWQodmFsKSAmJiAhdmFsLmRlcHRoKSB7XG4gICAgICAgICAgIGJsb2NrUGFyYW1JbmRleCA9IHRoaXMuYmxvY2tQYXJhbUluZGV4KHZhbC5wYXJ0c1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJsb2NrUGFyYW1JbmRleCkge1xuICAgICAgICAgIGxldCBibG9ja1BhcmFtQ2hpbGQgPSB2YWwucGFydHMuc2xpY2UoMSkuam9pbignLicpO1xuICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCAnQmxvY2tQYXJhbScsIGJsb2NrUGFyYW1JbmRleCwgYmxvY2tQYXJhbUNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbC5vcmlnaW5hbCB8fCB2YWx1ZTtcbiAgICAgICAgICBpZiAodmFsdWUucmVwbGFjZSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9edGhpcyg/OlxcLnwkKS8sICcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9eXFwuXFwvLywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL15cXC4kLywgJycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCB2YWwudHlwZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmFjY2VwdCh2YWwpO1xuICAgIH1cbiAgfSxcblxuICBzZXR1cEZ1bGxNdXN0YWNoZVBhcmFtczogZnVuY3Rpb24oc2V4cHIsIHByb2dyYW0sIGludmVyc2UsIG9taXRFbXB0eSkge1xuICAgIGxldCBwYXJhbXMgPSBzZXhwci5wYXJhbXM7XG4gICAgdGhpcy5wdXNoUGFyYW1zKHBhcmFtcyk7XG5cbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcblxuICAgIGlmIChzZXhwci5oYXNoKSB7XG4gICAgICB0aGlzLmFjY2VwdChzZXhwci5oYXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGNvZGUoJ2VtcHR5SGFzaCcsIG9taXRFbXB0eSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfSxcblxuICBibG9ja1BhcmFtSW5kZXg6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBmb3IgKGxldCBkZXB0aCA9IDAsIGxlbiA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5sZW5ndGg7IGRlcHRoIDwgbGVuOyBkZXB0aCsrKSB7XG4gICAgICBsZXQgYmxvY2tQYXJhbXMgPSB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXNbZGVwdGhdLFxuICAgICAgICAgIHBhcmFtID0gYmxvY2tQYXJhbXMgJiYgaW5kZXhPZihibG9ja1BhcmFtcywgbmFtZSk7XG4gICAgICBpZiAoYmxvY2tQYXJhbXMgJiYgcGFyYW0gPj0gMCkge1xuICAgICAgICByZXR1cm4gW2RlcHRoLCBwYXJhbV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlY29tcGlsZShpbnB1dCwgb3B0aW9ucywgZW52KSB7XG4gIGlmIChpbnB1dCA9PSBudWxsIHx8ICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnICYmIGlucHV0LnR5cGUgIT09ICdQcm9ncmFtJykpIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdZb3UgbXVzdCBwYXNzIGEgc3RyaW5nIG9yIEhhbmRsZWJhcnMgQVNUIHRvIEhhbmRsZWJhcnMucHJlY29tcGlsZS4gWW91IHBhc3NlZCAnICsgaW5wdXQpO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmICghKCdkYXRhJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY29tcGF0KSB7XG4gICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xuICB9XG5cbiAgbGV0IGFzdCA9IGVudi5wYXJzZShpbnB1dCwgb3B0aW9ucyksXG4gICAgICBlbnZpcm9ubWVudCA9IG5ldyBlbnYuQ29tcGlsZXIoKS5jb21waWxlKGFzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZShpbnB1dCwgb3B0aW9ucyA9IHt9LCBlbnYpIHtcbiAgaWYgKGlucHV0ID09IG51bGwgfHwgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKSkge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1lvdSBtdXN0IHBhc3MgYSBzdHJpbmcgb3IgSGFuZGxlYmFycyBBU1QgdG8gSGFuZGxlYmFycy5jb21waWxlLiBZb3UgcGFzc2VkICcgKyBpbnB1dCk7XG4gIH1cblxuICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgaWYgKCEoJ2RhdGEnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kYXRhID0gdHJ1ZTtcbiAgfVxuICBpZiAob3B0aW9ucy5jb21wYXQpIHtcbiAgICBvcHRpb25zLnVzZURlcHRocyA9IHRydWU7XG4gIH1cblxuICBsZXQgY29tcGlsZWQ7XG5cbiAgZnVuY3Rpb24gY29tcGlsZUlucHV0KCkge1xuICAgIGxldCBhc3QgPSBlbnYucGFyc2UoaW5wdXQsIG9wdGlvbnMpLFxuICAgICAgICBlbnZpcm9ubWVudCA9IG5ldyBlbnYuQ29tcGlsZXIoKS5jb21waWxlKGFzdCwgb3B0aW9ucyksXG4gICAgICAgIHRlbXBsYXRlU3BlYyA9IG5ldyBlbnYuSmF2YVNjcmlwdENvbXBpbGVyKCkuY29tcGlsZShlbnZpcm9ubWVudCwgb3B0aW9ucywgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICByZXR1cm4gZW52LnRlbXBsYXRlKHRlbXBsYXRlU3BlYyk7XG4gIH1cblxuICAvLyBUZW1wbGF0ZSBpcyBvbmx5IGNvbXBpbGVkIG9uIGZpcnN0IHVzZSBhbmQgY2FjaGVkIGFmdGVyIHRoYXQgcG9pbnQuXG4gIGZ1bmN0aW9uIHJldChjb250ZXh0LCBleGVjT3B0aW9ucykge1xuICAgIGlmICghY29tcGlsZWQpIHtcbiAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XG4gICAgfVxuICAgIHJldHVybiBjb21waWxlZC5jYWxsKHRoaXMsIGNvbnRleHQsIGV4ZWNPcHRpb25zKTtcbiAgfVxuICByZXQuX3NldHVwID0gZnVuY3Rpb24oc2V0dXBPcHRpb25zKSB7XG4gICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGVkLl9zZXR1cChzZXR1cE9wdGlvbnMpO1xuICB9O1xuICByZXQuX2NoaWxkID0gZnVuY3Rpb24oaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICAgIGlmICghY29tcGlsZWQpIHtcbiAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XG4gICAgfVxuICAgIHJldHVybiBjb21waWxlZC5fY2hpbGQoaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGFyZ0VxdWFscyhhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNBcnJheShhKSAmJiBpc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFhcmdFcXVhbHMoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKHNleHByKSB7XG4gIGlmICghc2V4cHIucGF0aC5wYXJ0cykge1xuICAgIGxldCBsaXRlcmFsID0gc2V4cHIucGF0aDtcbiAgICAvLyBDYXN0aW5nIHRvIHN0cmluZyBoZXJlIHRvIG1ha2UgZmFsc2UgYW5kIDAgbGl0ZXJhbCB2YWx1ZXMgcGxheSBuaWNlbHkgd2l0aCB0aGUgcmVzdFxuICAgIC8vIG9mIHRoZSBzeXN0ZW0uXG4gICAgc2V4cHIucGF0aCA9IHtcbiAgICAgIHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsXG4gICAgICBkYXRhOiBmYWxzZSxcbiAgICAgIGRlcHRoOiAwLFxuICAgICAgcGFydHM6IFtsaXRlcmFsLm9yaWdpbmFsICsgJyddLFxuICAgICAgb3JpZ2luYWw6IGxpdGVyYWwub3JpZ2luYWwgKyAnJyxcbiAgICAgIGxvYzogbGl0ZXJhbC5sb2NcbiAgICB9O1xuICB9XG59XG4iLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpIHtcbiAgY2xvc2UgPSBjbG9zZS5wYXRoID8gY2xvc2UucGF0aC5vcmlnaW5hbCA6IGNsb3NlO1xuXG4gIGlmIChvcGVuLnBhdGgub3JpZ2luYWwgIT09IGNsb3NlKSB7XG4gICAgbGV0IGVycm9yTm9kZSA9IHtsb2M6IG9wZW4ucGF0aC5sb2N9O1xuXG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihvcGVuLnBhdGgub3JpZ2luYWwgKyBcIiBkb2Vzbid0IG1hdGNoIFwiICsgY2xvc2UsIGVycm9yTm9kZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNvdXJjZUxvY2F0aW9uKHNvdXJjZSwgbG9jSW5mbykge1xuICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgdGhpcy5zdGFydCA9IHtcbiAgICBsaW5lOiBsb2NJbmZvLmZpcnN0X2xpbmUsXG4gICAgY29sdW1uOiBsb2NJbmZvLmZpcnN0X2NvbHVtblxuICB9O1xuICB0aGlzLmVuZCA9IHtcbiAgICBsaW5lOiBsb2NJbmZvLmxhc3RfbGluZSxcbiAgICBjb2x1bW46IGxvY0luZm8ubGFzdF9jb2x1bW5cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlkKHRva2VuKSB7XG4gIGlmICgvXlxcWy4qXFxdJC8udGVzdCh0b2tlbikpIHtcbiAgICByZXR1cm4gdG9rZW4uc3Vic3RyKDEsIHRva2VuLmxlbmd0aCAtIDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBGbGFncyhvcGVuLCBjbG9zZSkge1xuICByZXR1cm4ge1xuICAgIG9wZW46IG9wZW4uY2hhckF0KDIpID09PSAnficsXG4gICAgY2xvc2U6IGNsb3NlLmNoYXJBdChjbG9zZS5sZW5ndGggLSAzKSA9PT0gJ34nXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcENvbW1lbnQoY29tbWVudCkge1xuICByZXR1cm4gY29tbWVudC5yZXBsYWNlKC9eXFx7XFx7fj9cXCEtPy0/LywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLy0/LT9+P1xcfVxcfSQvLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUGF0aChkYXRhLCBwYXJ0cywgbG9jKSB7XG4gIGxvYyA9IHRoaXMubG9jSW5mbyhsb2MpO1xuXG4gIGxldCBvcmlnaW5hbCA9IGRhdGEgPyAnQCcgOiAnJyxcbiAgICAgIGRpZyA9IFtdLFxuICAgICAgZGVwdGggPSAwLFxuICAgICAgZGVwdGhTdHJpbmcgPSAnJztcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxldCBwYXJ0ID0gcGFydHNbaV0ucGFydCxcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBbXSBzeW50YXggdGhlbiB3ZSBkbyBub3QgdHJlYXQgcGF0aCByZWZlcmVuY2VzIGFzIG9wZXJhdG9ycyxcbiAgICAgICAgLy8gaS5lLiBmb28uW3RoaXNdIHJlc29sdmVzIHRvIGFwcHJveGltYXRlbHkgY29udGV4dC5mb29bJ3RoaXMnXVxuICAgICAgICBpc0xpdGVyYWwgPSBwYXJ0c1tpXS5vcmlnaW5hbCAhPT0gcGFydDtcbiAgICBvcmlnaW5hbCArPSAocGFydHNbaV0uc2VwYXJhdG9yIHx8ICcnKSArIHBhcnQ7XG5cbiAgICBpZiAoIWlzTGl0ZXJhbCAmJiAocGFydCA9PT0gJy4uJyB8fCBwYXJ0ID09PSAnLicgfHwgcGFydCA9PT0gJ3RoaXMnKSkge1xuICAgICAgaWYgKGRpZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0ludmFsaWQgcGF0aDogJyArIG9yaWdpbmFsLCB7bG9jfSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgICAgZGVwdGgrKztcbiAgICAgICAgZGVwdGhTdHJpbmcgKz0gJy4uLyc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpZy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1BhdGhFeHByZXNzaW9uJyxcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIHBhcnRzOiBkaWcsXG4gICAgb3JpZ2luYWwsXG4gICAgbG9jXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlTXVzdGFjaGUocGF0aCwgcGFyYW1zLCBoYXNoLCBvcGVuLCBzdHJpcCwgbG9jSW5mbykge1xuICAvLyBNdXN0IHVzZSBjaGFyQXQgdG8gc3VwcG9ydCBJRSBwcmUtMTBcbiAgbGV0IGVzY2FwZUZsYWcgPSBvcGVuLmNoYXJBdCgzKSB8fCBvcGVuLmNoYXJBdCgyKSxcbiAgICAgIGVzY2FwZWQgPSBlc2NhcGVGbGFnICE9PSAneycgJiYgZXNjYXBlRmxhZyAhPT0gJyYnO1xuXG4gIGxldCBkZWNvcmF0b3IgPSAoL1xcKi8udGVzdChvcGVuKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogZGVjb3JhdG9yID8gJ0RlY29yYXRvcicgOiAnTXVzdGFjaGVTdGF0ZW1lbnQnLFxuICAgIHBhdGgsXG4gICAgcGFyYW1zLFxuICAgIGhhc2gsXG4gICAgZXNjYXBlZCxcbiAgICBzdHJpcCxcbiAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVJhd0Jsb2NrKG9wZW5SYXdCbG9jaywgY29udGVudHMsIGNsb3NlLCBsb2NJbmZvKSB7XG4gIHZhbGlkYXRlQ2xvc2Uob3BlblJhd0Jsb2NrLCBjbG9zZSk7XG5cbiAgbG9jSW5mbyA9IHRoaXMubG9jSW5mbyhsb2NJbmZvKTtcbiAgbGV0IHByb2dyYW0gPSB7XG4gICAgdHlwZTogJ1Byb2dyYW0nLFxuICAgIGJvZHk6IGNvbnRlbnRzLFxuICAgIHN0cmlwOiB7fSxcbiAgICBsb2M6IGxvY0luZm9cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCbG9ja1N0YXRlbWVudCcsXG4gICAgcGF0aDogb3BlblJhd0Jsb2NrLnBhdGgsXG4gICAgcGFyYW1zOiBvcGVuUmF3QmxvY2sucGFyYW1zLFxuICAgIGhhc2g6IG9wZW5SYXdCbG9jay5oYXNoLFxuICAgIHByb2dyYW0sXG4gICAgb3BlblN0cmlwOiB7fSxcbiAgICBpbnZlcnNlU3RyaXA6IHt9LFxuICAgIGNsb3NlU3RyaXA6IHt9LFxuICAgIGxvYzogbG9jSW5mb1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZUJsb2NrKG9wZW5CbG9jaywgcHJvZ3JhbSwgaW52ZXJzZUFuZFByb2dyYW0sIGNsb3NlLCBpbnZlcnRlZCwgbG9jSW5mbykge1xuICBpZiAoY2xvc2UgJiYgY2xvc2UucGF0aCkge1xuICAgIHZhbGlkYXRlQ2xvc2Uob3BlbkJsb2NrLCBjbG9zZSk7XG4gIH1cblxuICBsZXQgZGVjb3JhdG9yID0gKC9cXCovLnRlc3Qob3BlbkJsb2NrLm9wZW4pKTtcblxuICBwcm9ncmFtLmJsb2NrUGFyYW1zID0gb3BlbkJsb2NrLmJsb2NrUGFyYW1zO1xuXG4gIGxldCBpbnZlcnNlLFxuICAgICAgaW52ZXJzZVN0cmlwO1xuXG4gIGlmIChpbnZlcnNlQW5kUHJvZ3JhbSkge1xuICAgIGlmIChkZWNvcmF0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1VuZXhwZWN0ZWQgaW52ZXJzZSBibG9jayBvbiBkZWNvcmF0b3InLCBpbnZlcnNlQW5kUHJvZ3JhbSk7XG4gICAgfVxuXG4gICAgaWYgKGludmVyc2VBbmRQcm9ncmFtLmNoYWluKSB7XG4gICAgICBpbnZlcnNlQW5kUHJvZ3JhbS5wcm9ncmFtLmJvZHlbMF0uY2xvc2VTdHJpcCA9IGNsb3NlLnN0cmlwO1xuICAgIH1cblxuICAgIGludmVyc2VTdHJpcCA9IGludmVyc2VBbmRQcm9ncmFtLnN0cmlwO1xuICAgIGludmVyc2UgPSBpbnZlcnNlQW5kUHJvZ3JhbS5wcm9ncmFtO1xuICB9XG5cbiAgaWYgKGludmVydGVkKSB7XG4gICAgaW52ZXJ0ZWQgPSBpbnZlcnNlO1xuICAgIGludmVyc2UgPSBwcm9ncmFtO1xuICAgIHByb2dyYW0gPSBpbnZlcnRlZDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogZGVjb3JhdG9yID8gJ0RlY29yYXRvckJsb2NrJyA6ICdCbG9ja1N0YXRlbWVudCcsXG4gICAgcGF0aDogb3BlbkJsb2NrLnBhdGgsXG4gICAgcGFyYW1zOiBvcGVuQmxvY2sucGFyYW1zLFxuICAgIGhhc2g6IG9wZW5CbG9jay5oYXNoLFxuICAgIHByb2dyYW0sXG4gICAgaW52ZXJzZSxcbiAgICBvcGVuU3RyaXA6IG9wZW5CbG9jay5zdHJpcCxcbiAgICBpbnZlcnNlU3RyaXAsXG4gICAgY2xvc2VTdHJpcDogY2xvc2UgJiYgY2xvc2Uuc3RyaXAsXG4gICAgbG9jOiB0aGlzLmxvY0luZm8obG9jSW5mbylcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVQcm9ncmFtKHN0YXRlbWVudHMsIGxvYykge1xuICBpZiAoIWxvYyAmJiBzdGF0ZW1lbnRzLmxlbmd0aCkge1xuICAgIGNvbnN0IGZpcnN0TG9jID0gc3RhdGVtZW50c1swXS5sb2MsXG4gICAgICAgICAgbGFzdExvYyA9IHN0YXRlbWVudHNbc3RhdGVtZW50cy5sZW5ndGggLSAxXS5sb2M7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChmaXJzdExvYyAmJiBsYXN0TG9jKSB7XG4gICAgICBsb2MgPSB7XG4gICAgICAgIHNvdXJjZTogZmlyc3RMb2Muc291cmNlLFxuICAgICAgICBzdGFydDoge1xuICAgICAgICAgIGxpbmU6IGZpcnN0TG9jLnN0YXJ0LmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBmaXJzdExvYy5zdGFydC5jb2x1bW5cbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiB7XG4gICAgICAgICAgbGluZTogbGFzdExvYy5lbmQubGluZSxcbiAgICAgICAgICBjb2x1bW46IGxhc3RMb2MuZW5kLmNvbHVtblxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1Byb2dyYW0nLFxuICAgIGJvZHk6IHN0YXRlbWVudHMsXG4gICAgc3RyaXA6IHt9LFxuICAgIGxvYzogbG9jXG4gIH07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVQYXJ0aWFsQmxvY2sob3BlbiwgcHJvZ3JhbSwgY2xvc2UsIGxvY0luZm8pIHtcbiAgdmFsaWRhdGVDbG9zZShvcGVuLCBjbG9zZSk7XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUGFydGlhbEJsb2NrU3RhdGVtZW50JyxcbiAgICBuYW1lOiBvcGVuLnBhdGgsXG4gICAgcGFyYW1zOiBvcGVuLnBhcmFtcyxcbiAgICBoYXNoOiBvcGVuLmhhc2gsXG4gICAgcHJvZ3JhbSxcbiAgICBvcGVuU3RyaXA6IG9wZW4uc3RyaXAsXG4gICAgY2xvc2VTdHJpcDogY2xvc2UgJiYgY2xvc2Uuc3RyaXAsXG4gICAgbG9jOiB0aGlzLmxvY0luZm8obG9jSW5mbylcbiAgfTtcbn1cblxuIiwiaW1wb3J0IHsgQ09NUElMRVJfUkVWSVNJT04sIFJFVklTSU9OX0NIQU5HRVMgfSBmcm9tICcuLi9iYXNlJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcbmltcG9ydCB7aXNBcnJheX0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IENvZGVHZW4gZnJvbSAnLi9jb2RlLWdlbic7XG5cbmZ1bmN0aW9uIExpdGVyYWwodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBKYXZhU2NyaXB0Q29tcGlsZXIoKSB7fVxuXG5KYXZhU2NyaXB0Q29tcGlsZXIucHJvdG90eXBlID0ge1xuICAvLyBQVUJMSUMgQVBJOiBZb3UgY2FuIG92ZXJyaWRlIHRoZXNlIG1ldGhvZHMgaW4gYSBzdWJjbGFzcyB0byBwcm92aWRlXG4gIC8vIGFsdGVybmF0aXZlIGNvbXBpbGVkIGZvcm1zIGZvciBuYW1lIGxvb2t1cCBhbmQgYnVmZmVyaW5nIHNlbWFudGljc1xuICBuYW1lTG9va3VwOiBmdW5jdGlvbihwYXJlbnQsIG5hbWUvKiAsIHR5cGUqLykge1xuICAgIGlmIChKYXZhU2NyaXB0Q29tcGlsZXIuaXNWYWxpZEphdmFTY3JpcHRWYXJpYWJsZU5hbWUobmFtZSkpIHtcbiAgICAgIHJldHVybiBbcGFyZW50LCAnLicsIG5hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3BhcmVudCwgJ1snLCBKU09OLnN0cmluZ2lmeShuYW1lKSwgJ10nXTtcbiAgICB9XG4gIH0sXG4gIGRlcHRoZWRMb29rdXA6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubG9va3VwJyksICcoZGVwdGhzLCBcIicsIG5hbWUsICdcIiknXTtcbiAgfSxcblxuICBjb21waWxlckluZm86IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHJldmlzaW9uID0gQ09NUElMRVJfUkVWSVNJT04sXG4gICAgICAgICAgdmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW3JldmlzaW9uXTtcbiAgICByZXR1cm4gW3JldmlzaW9uLCB2ZXJzaW9uc107XG4gIH0sXG5cbiAgYXBwZW5kVG9CdWZmZXI6IGZ1bmN0aW9uKHNvdXJjZSwgbG9jYXRpb24sIGV4cGxpY2l0KSB7XG4gICAgLy8gRm9yY2UgYSBzb3VyY2UgYXMgdGhpcyBzaW1wbGlmaWVzIHRoZSBtZXJnZSBsb2dpYy5cbiAgICBpZiAoIWlzQXJyYXkoc291cmNlKSkge1xuICAgICAgc291cmNlID0gW3NvdXJjZV07XG4gICAgfVxuICAgIHNvdXJjZSA9IHRoaXMuc291cmNlLndyYXAoc291cmNlLCBsb2NhdGlvbik7XG5cbiAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkge1xuICAgICAgcmV0dXJuIFsncmV0dXJuICcsIHNvdXJjZSwgJzsnXTtcbiAgICB9IGVsc2UgaWYgKGV4cGxpY2l0KSB7XG4gICAgICAvLyBUaGlzIGlzIGEgY2FzZSB3aGVyZSB0aGUgYnVmZmVyIG9wZXJhdGlvbiBvY2N1cnMgYXMgYSBjaGlsZCBvZiBhbm90aGVyXG4gICAgICAvLyBjb25zdHJ1Y3QsIGdlbmVyYWxseSBicmFjZXMuIFdlIGhhdmUgdG8gZXhwbGljaXRseSBvdXRwdXQgdGhlc2UgYnVmZmVyXG4gICAgICAvLyBvcGVyYXRpb25zIHRvIGVuc3VyZSB0aGF0IHRoZSBlbWl0dGVkIGNvZGUgZ29lcyBpbiB0aGUgY29ycmVjdCBsb2NhdGlvbi5cbiAgICAgIHJldHVybiBbJ2J1ZmZlciArPSAnLCBzb3VyY2UsICc7J107XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvdXJjZS5hcHBlbmRUb0J1ZmZlciA9IHRydWU7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbiAgfSxcblxuICBpbml0aWFsaXplQnVmZmVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdW90ZWRTdHJpbmcoJycpO1xuICB9LFxuICAvLyBFTkQgUFVCTElDIEFQSVxuXG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGVudmlyb25tZW50LCBvcHRpb25zLCBjb250ZXh0LCBhc09iamVjdCkge1xuICAgIHRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3RyaW5nUGFyYW1zID0gdGhpcy5vcHRpb25zLnN0cmluZ1BhcmFtcztcbiAgICB0aGlzLnRyYWNrSWRzID0gdGhpcy5vcHRpb25zLnRyYWNrSWRzO1xuICAgIHRoaXMucHJlY29tcGlsZSA9ICFhc09iamVjdDtcblxuICAgIHRoaXMubmFtZSA9IHRoaXMuZW52aXJvbm1lbnQubmFtZTtcbiAgICB0aGlzLmlzQ2hpbGQgPSAhIWNvbnRleHQ7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCB8fCB7XG4gICAgICBkZWNvcmF0b3JzOiBbXSxcbiAgICAgIHByb2dyYW1zOiBbXSxcbiAgICAgIGVudmlyb25tZW50czogW11cbiAgICB9O1xuXG4gICAgdGhpcy5wcmVhbWJsZSgpO1xuXG4gICAgdGhpcy5zdGFja1Nsb3QgPSAwO1xuICAgIHRoaXMuc3RhY2tWYXJzID0gW107XG4gICAgdGhpcy5hbGlhc2VzID0ge307XG4gICAgdGhpcy5yZWdpc3RlcnMgPSB7IGxpc3Q6IFtdIH07XG4gICAgdGhpcy5oYXNoZXMgPSBbXTtcbiAgICB0aGlzLmNvbXBpbGVTdGFjayA9IFtdO1xuICAgIHRoaXMuaW5saW5lU3RhY2sgPSBbXTtcbiAgICB0aGlzLmJsb2NrUGFyYW1zID0gW107XG5cbiAgICB0aGlzLmNvbXBpbGVDaGlsZHJlbihlbnZpcm9ubWVudCwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IGVudmlyb25tZW50LnVzZURlcHRocyB8fCBlbnZpcm9ubWVudC51c2VEZWNvcmF0b3JzIHx8IHRoaXMub3B0aW9ucy5jb21wYXQ7XG4gICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZW52aXJvbm1lbnQudXNlQmxvY2tQYXJhbXM7XG5cbiAgICBsZXQgb3Bjb2RlcyA9IGVudmlyb25tZW50Lm9wY29kZXMsXG4gICAgICAgIG9wY29kZSxcbiAgICAgICAgZmlyc3RMb2MsXG4gICAgICAgIGksXG4gICAgICAgIGw7XG5cbiAgICBmb3IgKGkgPSAwLCBsID0gb3Bjb2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIG9wY29kZSA9IG9wY29kZXNbaV07XG5cbiAgICAgIHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbiA9IG9wY29kZS5sb2M7XG4gICAgICBmaXJzdExvYyA9IGZpcnN0TG9jIHx8IG9wY29kZS5sb2M7XG4gICAgICB0aGlzW29wY29kZS5vcGNvZGVdLmFwcGx5KHRoaXMsIG9wY29kZS5hcmdzKTtcbiAgICB9XG5cbiAgICAvLyBGbHVzaCBhbnkgdHJhaWxpbmcgY29udGVudCB0aGF0IG1pZ2h0IGJlIHBlbmRpbmcuXG4gICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gZmlyc3RMb2M7XG4gICAgdGhpcy5wdXNoU291cmNlKCcnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHRoaXMuc3RhY2tTbG90IHx8IHRoaXMuaW5saW5lU3RhY2subGVuZ3RoIHx8IHRoaXMuY29tcGlsZVN0YWNrLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignQ29tcGlsZSBjb21wbGV0ZWQgd2l0aCBjb250ZW50IGxlZnQgb24gc3RhY2snKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZGVjb3JhdG9ycy5pc0VtcHR5KCkpIHtcbiAgICAgIHRoaXMudXNlRGVjb3JhdG9ycyA9IHRydWU7XG5cbiAgICAgIHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKCd2YXIgZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5kZWNvcmF0b3JzO1xcbicpO1xuICAgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goJ3JldHVybiBmbjsnKTtcblxuICAgICAgaWYgKGFzT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycyA9IEZ1bmN0aW9uLmFwcGx5KHRoaXMsIFsnZm4nLCAncHJvcHMnLCAnY29udGFpbmVyJywgJ2RlcHRoMCcsICdkYXRhJywgJ2Jsb2NrUGFyYW1zJywgJ2RlcHRocycsIHRoaXMuZGVjb3JhdG9ycy5tZXJnZSgpXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRlY29yYXRvcnMucHJlcGVuZCgnZnVuY3Rpb24oZm4sIHByb3BzLCBjb250YWluZXIsIGRlcHRoMCwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xcbicpO1xuICAgICAgICB0aGlzLmRlY29yYXRvcnMucHVzaCgnfVxcbicpO1xuICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGxldCBmbiA9IHRoaXMuY3JlYXRlRnVuY3Rpb25Db250ZXh0KGFzT2JqZWN0KTtcbiAgICBpZiAoIXRoaXMuaXNDaGlsZCkge1xuICAgICAgbGV0IHJldCA9IHtcbiAgICAgICAgY29tcGlsZXI6IHRoaXMuY29tcGlsZXJJbmZvKCksXG4gICAgICAgIG1haW46IGZuXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5kZWNvcmF0b3JzKSB7XG4gICAgICAgIHJldC5tYWluX2QgPSB0aGlzLmRlY29yYXRvcnM7ICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAgcmV0LnVzZURlY29yYXRvcnMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQge3Byb2dyYW1zLCBkZWNvcmF0b3JzfSA9IHRoaXMuY29udGV4dDtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBwcm9ncmFtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKHByb2dyYW1zW2ldKSB7XG4gICAgICAgICAgcmV0W2ldID0gcHJvZ3JhbXNbaV07XG4gICAgICAgICAgaWYgKGRlY29yYXRvcnNbaV0pIHtcbiAgICAgICAgICAgIHJldFtpICsgJ19kJ10gPSBkZWNvcmF0b3JzW2ldO1xuICAgICAgICAgICAgcmV0LnVzZURlY29yYXRvcnMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5lbnZpcm9ubWVudC51c2VQYXJ0aWFsKSB7XG4gICAgICAgIHJldC51c2VQYXJ0aWFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGF0YSkge1xuICAgICAgICByZXQudXNlRGF0YSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy51c2VEZXB0aHMpIHtcbiAgICAgICAgcmV0LnVzZURlcHRocyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy51c2VCbG9ja1BhcmFtcykge1xuICAgICAgICByZXQudXNlQmxvY2tQYXJhbXMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21wYXQpIHtcbiAgICAgICAgcmV0LmNvbXBhdCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghYXNPYmplY3QpIHtcbiAgICAgICAgcmV0LmNvbXBpbGVyID0gSlNPTi5zdHJpbmdpZnkocmV0LmNvbXBpbGVyKTtcblxuICAgICAgICB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb24gPSB7c3RhcnQ6IHtsaW5lOiAxLCBjb2x1bW46IDB9fTtcbiAgICAgICAgcmV0ID0gdGhpcy5vYmplY3RMaXRlcmFsKHJldCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc3JjTmFtZSkge1xuICAgICAgICAgIHJldCA9IHJldC50b1N0cmluZ1dpdGhTb3VyY2VNYXAoe2ZpbGU6IG9wdGlvbnMuZGVzdE5hbWV9KTtcbiAgICAgICAgICByZXQubWFwID0gcmV0Lm1hcCAmJiByZXQubWFwLnRvU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldC5jb21waWxlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gIH0sXG5cbiAgcHJlYW1ibGU6IGZ1bmN0aW9uKCkge1xuICAgIC8vIHRyYWNrIHRoZSBsYXN0IGNvbnRleHQgcHVzaGVkIGludG8gcGxhY2UgdG8gYWxsb3cgc2tpcHBpbmcgdGhlXG4gICAgLy8gZ2V0Q29udGV4dCBvcGNvZGUgd2hlbiBpdCB3b3VsZCBiZSBhIG5vb3BcbiAgICB0aGlzLmxhc3RDb250ZXh0ID0gMDtcbiAgICB0aGlzLnNvdXJjZSA9IG5ldyBDb2RlR2VuKHRoaXMub3B0aW9ucy5zcmNOYW1lKTtcbiAgICB0aGlzLmRlY29yYXRvcnMgPSBuZXcgQ29kZUdlbih0aGlzLm9wdGlvbnMuc3JjTmFtZSk7XG4gIH0sXG5cbiAgY3JlYXRlRnVuY3Rpb25Db250ZXh0OiBmdW5jdGlvbihhc09iamVjdCkge1xuICAgIGxldCB2YXJEZWNsYXJhdGlvbnMgPSAnJztcblxuICAgIGxldCBsb2NhbHMgPSB0aGlzLnN0YWNrVmFycy5jb25jYXQodGhpcy5yZWdpc3RlcnMubGlzdCk7XG4gICAgaWYgKGxvY2Fscy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXJEZWNsYXJhdGlvbnMgKz0gJywgJyArIGxvY2Fscy5qb2luKCcsICcpO1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIG1pbmltaXplciBhbGlhcyBtYXBwaW5nc1xuICAgIC8vXG4gICAgLy8gV2hlbiB1c2luZyB0cnVlIFNvdXJjZU5vZGVzLCB0aGlzIHdpbGwgdXBkYXRlIGFsbCByZWZlcmVuY2VzIHRvIHRoZSBnaXZlbiBhbGlhc1xuICAgIC8vIGFzIHRoZSBzb3VyY2Ugbm9kZXMgYXJlIHJldXNlZCBpbiBzaXR1LiBGb3IgdGhlIG5vbi1zb3VyY2Ugbm9kZSBjb21waWxhdGlvbiBtb2RlLFxuICAgIC8vIGFsaWFzZXMgd2lsbCBub3QgYmUgdXNlZCwgYnV0IHRoaXMgY2FzZSBpcyBhbHJlYWR5IGJlaW5nIHJ1biBvbiB0aGUgY2xpZW50IGFuZFxuICAgIC8vIHdlIGFyZW4ndCBjb25jZXJuIGFib3V0IG1pbmltaXppbmcgdGhlIHRlbXBsYXRlIHNpemUuXG4gICAgbGV0IGFsaWFzQ291bnQgPSAwO1xuICAgIGZvciAobGV0IGFsaWFzIGluIHRoaXMuYWxpYXNlcykgeyAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGd1YXJkLWZvci1pblxuICAgICAgbGV0IG5vZGUgPSB0aGlzLmFsaWFzZXNbYWxpYXNdO1xuXG4gICAgICBpZiAodGhpcy5hbGlhc2VzLmhhc093blByb3BlcnR5KGFsaWFzKSAmJiBub2RlLmNoaWxkcmVuICYmIG5vZGUucmVmZXJlbmNlQ291bnQgPiAxKSB7XG4gICAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCBhbGlhcycgKyAoKythbGlhc0NvdW50KSArICc9JyArIGFsaWFzO1xuICAgICAgICBub2RlLmNoaWxkcmVuWzBdID0gJ2FsaWFzJyArIGFsaWFzQ291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHBhcmFtcyA9IFsnY29udGFpbmVyJywgJ2RlcHRoMCcsICdoZWxwZXJzJywgJ3BhcnRpYWxzJywgJ2RhdGEnXTtcblxuICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwYXJhbXMucHVzaCgnYmxvY2tQYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwYXJhbXMucHVzaCgnZGVwdGhzJyk7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBhIHNlY29uZCBwYXNzIG92ZXIgdGhlIG91dHB1dCB0byBtZXJnZSBjb250ZW50IHdoZW4gcG9zc2libGVcbiAgICBsZXQgc291cmNlID0gdGhpcy5tZXJnZVNvdXJjZSh2YXJEZWNsYXJhdGlvbnMpO1xuXG4gICAgaWYgKGFzT2JqZWN0KSB7XG4gICAgICBwYXJhbXMucHVzaChzb3VyY2UpO1xuXG4gICAgICByZXR1cm4gRnVuY3Rpb24uYXBwbHkodGhpcywgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlLndyYXAoWydmdW5jdGlvbignLCBwYXJhbXMuam9pbignLCcpLCAnKSB7XFxuICAnLCBzb3VyY2UsICd9J10pO1xuICAgIH1cbiAgfSxcbiAgbWVyZ2VTb3VyY2U6IGZ1bmN0aW9uKHZhckRlY2xhcmF0aW9ucykge1xuICAgIGxldCBpc1NpbXBsZSA9IHRoaXMuZW52aXJvbm1lbnQuaXNTaW1wbGUsXG4gICAgICAgIGFwcGVuZE9ubHkgPSAhdGhpcy5mb3JjZUJ1ZmZlcixcbiAgICAgICAgYXBwZW5kRmlyc3QsXG5cbiAgICAgICAgc291cmNlU2VlbixcbiAgICAgICAgYnVmZmVyU3RhcnQsXG4gICAgICAgIGJ1ZmZlckVuZDtcbiAgICB0aGlzLnNvdXJjZS5lYWNoKChsaW5lKSA9PiB7XG4gICAgICBpZiAobGluZS5hcHBlbmRUb0J1ZmZlcikge1xuICAgICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcbiAgICAgICAgICBsaW5lLnByZXBlbmQoJyAgKyAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXJTdGFydCA9IGxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgYnVmZmVyRW5kID0gbGluZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICAgIGlmICghc291cmNlU2Vlbikge1xuICAgICAgICAgICAgYXBwZW5kRmlyc3QgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdidWZmZXIgKz0gJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgICAgICBidWZmZXJTdGFydCA9IGJ1ZmZlckVuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNvdXJjZVNlZW4gPSB0cnVlO1xuICAgICAgICBpZiAoIWlzU2ltcGxlKSB7XG4gICAgICAgICAgYXBwZW5kT25seSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAgIGlmIChhcHBlbmRPbmx5KSB7XG4gICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcbiAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgncmV0dXJuICcpO1xuICAgICAgICBidWZmZXJFbmQuYWRkKCc7Jyk7XG4gICAgICB9IGVsc2UgaWYgKCFzb3VyY2VTZWVuKSB7XG4gICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBcIlwiOycpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXJEZWNsYXJhdGlvbnMgKz0gJywgYnVmZmVyID0gJyArIChhcHBlbmRGaXJzdCA/ICcnIDogdGhpcy5pbml0aWFsaXplQnVmZmVyKCkpO1xuXG4gICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcbiAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgncmV0dXJuIGJ1ZmZlciArICcpO1xuICAgICAgICBidWZmZXJFbmQuYWRkKCc7Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNvdXJjZS5wdXNoKCdyZXR1cm4gYnVmZmVyOycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YXJEZWNsYXJhdGlvbnMpIHtcbiAgICAgIHRoaXMuc291cmNlLnByZXBlbmQoJ3ZhciAnICsgdmFyRGVjbGFyYXRpb25zLnN1YnN0cmluZygyKSArIChhcHBlbmRGaXJzdCA/ICcnIDogJztcXG4nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc291cmNlLm1lcmdlKCk7XG4gIH0sXG5cbiAgLy8gW2Jsb2NrVmFsdWVdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHZhbHVlXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmV0dXJuIHZhbHVlIG9mIGJsb2NrSGVscGVyTWlzc2luZ1xuICAvL1xuICAvLyBUaGUgcHVycG9zZSBvZiB0aGlzIG9wY29kZSBpcyB0byB0YWtlIGEgYmxvY2sgb2YgdGhlIGZvcm1cbiAgLy8gYHt7I3RoaXMuZm9vfX0uLi57ey90aGlzLmZvb319YCwgcmVzb2x2ZSB0aGUgdmFsdWUgb2YgYGZvb2AsIGFuZFxuICAvLyByZXBsYWNlIGl0IG9uIHRoZSBzdGFjayB3aXRoIHRoZSByZXN1bHQgb2YgcHJvcGVybHlcbiAgLy8gaW52b2tpbmcgYmxvY2tIZWxwZXJNaXNzaW5nLlxuICBibG9ja1ZhbHVlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgbGV0IGJsb2NrSGVscGVyTWlzc2luZyA9IHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmJsb2NrSGVscGVyTWlzc2luZycpLFxuICAgICAgICBwYXJhbXMgPSBbdGhpcy5jb250ZXh0TmFtZSgwKV07XG4gICAgdGhpcy5zZXR1cEhlbHBlckFyZ3MobmFtZSwgMCwgcGFyYW1zKTtcblxuICAgIGxldCBibG9ja05hbWUgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgcGFyYW1zLnNwbGljZSgxLCAwLCBibG9ja05hbWUpO1xuXG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChibG9ja0hlbHBlck1pc3NpbmcsICdjYWxsJywgcGFyYW1zKSk7XG4gIH0sXG5cbiAgLy8gW2FtYmlndW91c0Jsb2NrVmFsdWVdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHZhbHVlXG4gIC8vIENvbXBpbGVyIHZhbHVlLCBiZWZvcmU6IGxhc3RIZWxwZXI9dmFsdWUgb2YgbGFzdCBmb3VuZCBoZWxwZXIsIGlmIGFueVxuICAvLyBPbiBzdGFjaywgYWZ0ZXIsIGlmIG5vIGxhc3RIZWxwZXI6IHNhbWUgYXMgW2Jsb2NrVmFsdWVdXG4gIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbGFzdEhlbHBlcjogdmFsdWVcbiAgYW1iaWd1b3VzQmxvY2tWYWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gV2UncmUgYmVpbmcgYSBiaXQgY2hlZWt5IGFuZCByZXVzaW5nIHRoZSBvcHRpb25zIHZhbHVlIGZyb20gdGhlIHByaW9yIGV4ZWNcbiAgICBsZXQgYmxvY2tIZWxwZXJNaXNzaW5nID0gdGhpcy5hbGlhc2FibGUoJ2hlbHBlcnMuYmxvY2tIZWxwZXJNaXNzaW5nJyksXG4gICAgICAgIHBhcmFtcyA9IFt0aGlzLmNvbnRleHROYW1lKDApXTtcbiAgICB0aGlzLnNldHVwSGVscGVyQXJncygnJywgMCwgcGFyYW1zLCB0cnVlKTtcblxuICAgIHRoaXMuZmx1c2hJbmxpbmUoKTtcblxuICAgIGxldCBjdXJyZW50ID0gdGhpcy50b3BTdGFjaygpO1xuICAgIHBhcmFtcy5zcGxpY2UoMSwgMCwgY3VycmVudCk7XG5cbiAgICB0aGlzLnB1c2hTb3VyY2UoW1xuICAgICAgICAnaWYgKCEnLCB0aGlzLmxhc3RIZWxwZXIsICcpIHsgJyxcbiAgICAgICAgICBjdXJyZW50LCAnID0gJywgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGJsb2NrSGVscGVyTWlzc2luZywgJ2NhbGwnLCBwYXJhbXMpLFxuICAgICAgICAnfSddKTtcbiAgfSxcblxuICAvLyBbYXBwZW5kQ29udGVudF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vXG4gIC8vIEFwcGVuZHMgdGhlIHN0cmluZyB2YWx1ZSBvZiBgY29udGVudGAgdG8gdGhlIGN1cnJlbnQgYnVmZmVyXG4gIGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICBpZiAodGhpcy5wZW5kaW5nQ29udGVudCkge1xuICAgICAgY29udGVudCA9IHRoaXMucGVuZGluZ0NvbnRlbnQgKyBjb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBlbmRpbmdMb2NhdGlvbiA9IHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbjtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdDb250ZW50ID0gY29udGVudDtcbiAgfSxcblxuICAvLyBbYXBwZW5kXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vXG4gIC8vIENvZXJjZXMgYHZhbHVlYCB0byBhIFN0cmluZyBhbmQgYXBwZW5kcyBpdCB0byB0aGUgY3VycmVudCBidWZmZXIuXG4gIC8vXG4gIC8vIElmIGB2YWx1ZWAgaXMgdHJ1dGh5LCBvciAwLCBpdCBpcyBjb2VyY2VkIGludG8gYSBzdHJpbmcgYW5kIGFwcGVuZGVkXG4gIC8vIE90aGVyd2lzZSwgdGhlIGVtcHR5IHN0cmluZyBpcyBhcHBlbmRlZFxuICBhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmlzSW5saW5lKCkpIHtcbiAgICAgIHRoaXMucmVwbGFjZVN0YWNrKChjdXJyZW50KSA9PiBbJyAhPSBudWxsID8gJywgY3VycmVudCwgJyA6IFwiXCInXSk7XG5cbiAgICAgIHRoaXMucHVzaFNvdXJjZSh0aGlzLmFwcGVuZFRvQnVmZmVyKHRoaXMucG9wU3RhY2soKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbG9jYWwgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICB0aGlzLnB1c2hTb3VyY2UoWydpZiAoJywgbG9jYWwsICcgIT0gbnVsbCkgeyAnLCB0aGlzLmFwcGVuZFRvQnVmZmVyKGxvY2FsLCB1bmRlZmluZWQsIHRydWUpLCAnIH0nXSk7XG4gICAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkge1xuICAgICAgICB0aGlzLnB1c2hTb3VyY2UoWydlbHNlIHsgJywgdGhpcy5hcHBlbmRUb0J1ZmZlcihcIicnXCIsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gW2FwcGVuZEVzY2FwZWRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gRXNjYXBlIGB2YWx1ZWAgYW5kIGFwcGVuZCBpdCB0byB0aGUgYnVmZmVyXG4gIGFwcGVuZEVzY2FwZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHVzaFNvdXJjZSh0aGlzLmFwcGVuZFRvQnVmZmVyKFxuICAgICAgICBbdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uJyksICcoJywgdGhpcy5wb3BTdGFjaygpLCAnKSddKSk7XG4gIH0sXG5cbiAgLy8gW2dldENvbnRleHRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuICAvLyBDb21waWxlciB2YWx1ZSwgYWZ0ZXI6IGxhc3RDb250ZXh0PWRlcHRoXG4gIC8vXG4gIC8vIFNldCB0aGUgdmFsdWUgb2YgdGhlIGBsYXN0Q29udGV4dGAgY29tcGlsZXIgdmFsdWUgdG8gdGhlIGRlcHRoXG4gIGdldENvbnRleHQ6IGZ1bmN0aW9uKGRlcHRoKSB7XG4gICAgdGhpcy5sYXN0Q29udGV4dCA9IGRlcHRoO1xuICB9LFxuXG4gIC8vIFtwdXNoQ29udGV4dF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogY3VycmVudENvbnRleHQsIC4uLlxuICAvL1xuICAvLyBQdXNoZXMgdGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50IGNvbnRleHQgb250byB0aGUgc3RhY2suXG4gIHB1c2hDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodGhpcy5jb250ZXh0TmFtZSh0aGlzLmxhc3RDb250ZXh0KSk7XG4gIH0sXG5cbiAgLy8gW2xvb2t1cE9uQ29udGV4dF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogY3VycmVudENvbnRleHRbbmFtZV0sIC4uLlxuICAvL1xuICAvLyBMb29rcyB1cCB0aGUgdmFsdWUgb2YgYG5hbWVgIG9uIHRoZSBjdXJyZW50IGNvbnRleHQgYW5kIHB1c2hlc1xuICAvLyBpdCBvbnRvIHRoZSBzdGFjay5cbiAgbG9va3VwT25Db250ZXh0OiBmdW5jdGlvbihwYXJ0cywgZmFsc3ksIHN0cmljdCwgc2NvcGVkKSB7XG4gICAgbGV0IGkgPSAwO1xuXG4gICAgaWYgKCFzY29wZWQgJiYgdGhpcy5vcHRpb25zLmNvbXBhdCAmJiAhdGhpcy5sYXN0Q29udGV4dCkge1xuICAgICAgLy8gVGhlIGRlcHRoZWQgcXVlcnkgaXMgZXhwZWN0ZWQgdG8gaGFuZGxlIHRoZSB1bmRlZmluZWQgbG9naWMgZm9yIHRoZSByb290IGxldmVsIHRoYXRcbiAgICAgIC8vIGlzIGltcGxlbWVudGVkIGJlbG93LCBzbyB3ZSBldmFsdWF0ZSB0aGF0IGRpcmVjdGx5IGluIGNvbXBhdCBtb2RlXG4gICAgICB0aGlzLnB1c2godGhpcy5kZXB0aGVkTG9va3VwKHBhcnRzW2krK10pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoQ29udGV4dCgpO1xuICAgIH1cblxuICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2NvbnRleHQnLCBwYXJ0cywgaSwgZmFsc3ksIHN0cmljdCk7XG4gIH0sXG5cbiAgLy8gW2xvb2t1cEJsb2NrUGFyYW1dXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGJsb2NrUGFyYW1bbmFtZV0sIC4uLlxuICAvL1xuICAvLyBMb29rcyB1cCB0aGUgdmFsdWUgb2YgYHBhcnRzYCBvbiB0aGUgZ2l2ZW4gYmxvY2sgcGFyYW0gYW5kIHB1c2hlc1xuICAvLyBpdCBvbnRvIHRoZSBzdGFjay5cbiAgbG9va3VwQmxvY2tQYXJhbTogZnVuY3Rpb24oYmxvY2tQYXJhbUlkLCBwYXJ0cykge1xuICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0cnVlO1xuXG4gICAgdGhpcy5wdXNoKFsnYmxvY2tQYXJhbXNbJywgYmxvY2tQYXJhbUlkWzBdLCAnXVsnLCBibG9ja1BhcmFtSWRbMV0sICddJ10pO1xuICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2NvbnRleHQnLCBwYXJ0cywgMSk7XG4gIH0sXG5cbiAgLy8gW2xvb2t1cERhdGFdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGRhdGEsIC4uLlxuICAvL1xuICAvLyBQdXNoIHRoZSBkYXRhIGxvb2t1cCBvcGVyYXRvclxuICBsb29rdXBEYXRhOiBmdW5jdGlvbihkZXB0aCwgcGFydHMsIHN0cmljdCkge1xuICAgIGlmICghZGVwdGgpIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnZGF0YScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2NvbnRhaW5lci5kYXRhKGRhdGEsICcgKyBkZXB0aCArICcpJyk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNvbHZlUGF0aCgnZGF0YScsIHBhcnRzLCAwLCB0cnVlLCBzdHJpY3QpO1xuICB9LFxuXG4gIHJlc29sdmVQYXRoOiBmdW5jdGlvbih0eXBlLCBwYXJ0cywgaSwgZmFsc3ksIHN0cmljdCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuc3RyaWN0IHx8IHRoaXMub3B0aW9ucy5hc3N1bWVPYmplY3RzKSB7XG4gICAgICB0aGlzLnB1c2goc3RyaWN0TG9va3VwKHRoaXMub3B0aW9ucy5zdHJpY3QgJiYgc3RyaWN0LCB0aGlzLCBwYXJ0cywgdHlwZSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBsZW4gPSBwYXJ0cy5sZW5ndGg7XG4gICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG4gICAgICB0aGlzLnJlcGxhY2VTdGFjaygoY3VycmVudCkgPT4ge1xuICAgICAgICBsZXQgbG9va3VwID0gdGhpcy5uYW1lTG9va3VwKGN1cnJlbnQsIHBhcnRzW2ldLCB0eXBlKTtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBlbnN1cmUgdGhhdCB6ZXJvIGFuZCBmYWxzZSBhcmUgaGFuZGxlZCBwcm9wZXJseSBpZiB0aGUgY29udGV4dCAoZmFsc3kgZmxhZylcbiAgICAgICAgLy8gbmVlZHMgdG8gaGF2ZSB0aGUgc3BlY2lhbCBoYW5kbGluZyBmb3IgdGhlc2UgdmFsdWVzLlxuICAgICAgICBpZiAoIWZhbHN5KSB7XG4gICAgICAgICAgcmV0dXJuIFsnICE9IG51bGwgPyAnLCBsb29rdXAsICcgOiAnLCBjdXJyZW50XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2Ugd2UgY2FuIHVzZSBnZW5lcmljIGZhbHN5IGhhbmRsaW5nXG4gICAgICAgICAgcmV0dXJuIFsnICYmICcsIGxvb2t1cF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICB9XG4gIH0sXG5cbiAgLy8gW3Jlc29sdmVQb3NzaWJsZUxhbWJkYV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc29sdmVkIHZhbHVlLCAuLi5cbiAgLy9cbiAgLy8gSWYgdGhlIGB2YWx1ZWAgaXMgYSBsYW1iZGEsIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIGJ5XG4gIC8vIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGxhbWJkYVxuICByZXNvbHZlUG9zc2libGVMYW1iZGE6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHVzaChbdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5sYW1iZGEnKSwgJygnLCB0aGlzLnBvcFN0YWNrKCksICcsICcsIHRoaXMuY29udGV4dE5hbWUoMCksICcpJ10pO1xuICB9LFxuXG4gIC8vIFtwdXNoU3RyaW5nUGFyYW1dXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHN0cmluZywgY3VycmVudENvbnRleHQsIC4uLlxuICAvL1xuICAvLyBUaGlzIG9wY29kZSBpcyBkZXNpZ25lZCBmb3IgdXNlIGluIHN0cmluZyBtb2RlLCB3aGljaFxuICAvLyBwcm92aWRlcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGEgcGFyYW1ldGVyIGFsb25nIHdpdGggaXRzXG4gIC8vIGRlcHRoIHJhdGhlciB0aGFuIHJlc29sdmluZyBpdCBpbW1lZGlhdGVseS5cbiAgcHVzaFN0cmluZ1BhcmFtOiBmdW5jdGlvbihzdHJpbmcsIHR5cGUpIHtcbiAgICB0aGlzLnB1c2hDb250ZXh0KCk7XG4gICAgdGhpcy5wdXNoU3RyaW5nKHR5cGUpO1xuXG4gICAgLy8gSWYgaXQncyBhIHN1YmV4cHJlc3Npb24sIHRoZSBzdHJpbmcgcmVzdWx0XG4gICAgLy8gd2lsbCBiZSBwdXNoZWQgYWZ0ZXIgdGhpcyBvcGNvZGUuXG4gICAgaWYgKHR5cGUgIT09ICdTdWJFeHByZXNzaW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMucHVzaFN0cmluZyhzdHJpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGVtcHR5SGFzaDogZnVuY3Rpb24ob21pdEVtcHR5KSB7XG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaElkc1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaENvbnRleHRzXG4gICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hUeXBlc1xuICAgIH1cbiAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwob21pdEVtcHR5ID8gJ3VuZGVmaW5lZCcgOiAne30nKTtcbiAgfSxcbiAgcHVzaEhhc2g6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmhhc2gpIHtcbiAgICAgIHRoaXMuaGFzaGVzLnB1c2godGhpcy5oYXNoKTtcbiAgICB9XG4gICAgdGhpcy5oYXNoID0ge3ZhbHVlczogW10sIHR5cGVzOiBbXSwgY29udGV4dHM6IFtdLCBpZHM6IFtdfTtcbiAgfSxcbiAgcG9wSGFzaDogZnVuY3Rpb24oKSB7XG4gICAgbGV0IGhhc2ggPSB0aGlzLmhhc2g7XG4gICAgdGhpcy5oYXNoID0gdGhpcy5oYXNoZXMucG9wKCk7XG5cbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLmlkcykpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLm9iamVjdExpdGVyYWwoaGFzaC5jb250ZXh0cykpO1xuICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLnR5cGVzKSk7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLnZhbHVlcykpO1xuICB9LFxuXG4gIC8vIFtwdXNoU3RyaW5nXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBxdW90ZWRTdHJpbmcoc3RyaW5nKSwgLi4uXG4gIC8vXG4gIC8vIFB1c2ggYSBxdW90ZWQgdmVyc2lvbiBvZiBgc3RyaW5nYCBvbnRvIHRoZSBzdGFja1xuICBwdXNoU3RyaW5nOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodGhpcy5xdW90ZWRTdHJpbmcoc3RyaW5nKSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hMaXRlcmFsXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiB2YWx1ZSwgLi4uXG4gIC8vXG4gIC8vIFB1c2hlcyBhIHZhbHVlIG9udG8gdGhlIHN0YWNrLiBUaGlzIG9wZXJhdGlvbiBwcmV2ZW50c1xuICAvLyB0aGUgY29tcGlsZXIgZnJvbSBjcmVhdGluZyBhIHRlbXBvcmFyeSB2YXJpYWJsZSB0byBob2xkXG4gIC8vIGl0LlxuICBwdXNoTGl0ZXJhbDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodmFsdWUpO1xuICB9LFxuXG4gIC8vIFtwdXNoUHJvZ3JhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcHJvZ3JhbShndWlkKSwgLi4uXG4gIC8vXG4gIC8vIFB1c2ggYSBwcm9ncmFtIGV4cHJlc3Npb24gb250byB0aGUgc3RhY2suIFRoaXMgdGFrZXNcbiAgLy8gYSBjb21waWxlLXRpbWUgZ3VpZCBhbmQgY29udmVydHMgaXQgaW50byBhIHJ1bnRpbWUtYWNjZXNzaWJsZVxuICAvLyBleHByZXNzaW9uLlxuICBwdXNoUHJvZ3JhbTogZnVuY3Rpb24oZ3VpZCkge1xuICAgIGlmIChndWlkICE9IG51bGwpIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLnByb2dyYW1FeHByZXNzaW9uKGd1aWQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG51bGwpO1xuICAgIH1cbiAgfSxcblxuICAvLyBbcmVnaXN0ZXJEZWNvcmF0b3JdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vXG4gIC8vIFBvcHMgb2ZmIHRoZSBkZWNvcmF0b3IncyBwYXJhbWV0ZXJzLCBpbnZva2VzIHRoZSBkZWNvcmF0b3IsXG4gIC8vIGFuZCBpbnNlcnRzIHRoZSBkZWNvcmF0b3IgaW50byB0aGUgZGVjb3JhdG9ycyBsaXN0LlxuICByZWdpc3RlckRlY29yYXRvcihwYXJhbVNpemUsIG5hbWUpIHtcbiAgICBsZXQgZm91bmREZWNvcmF0b3IgPSB0aGlzLm5hbWVMb29rdXAoJ2RlY29yYXRvcnMnLCBuYW1lLCAnZGVjb3JhdG9yJyksXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUpO1xuXG4gICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goW1xuICAgICAgJ2ZuID0gJyxcbiAgICAgIHRoaXMuZGVjb3JhdG9ycy5mdW5jdGlvbkNhbGwoZm91bmREZWNvcmF0b3IsICcnLCBbJ2ZuJywgJ3Byb3BzJywgJ2NvbnRhaW5lcicsIG9wdGlvbnNdKSxcbiAgICAgICcgfHwgZm47J1xuICAgIF0pO1xuICB9LFxuXG4gIC8vIFtpbnZva2VIZWxwZXJdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXG4gIC8vXG4gIC8vIFBvcHMgb2ZmIHRoZSBoZWxwZXIncyBwYXJhbWV0ZXJzLCBpbnZva2VzIHRoZSBoZWxwZXIsXG4gIC8vIGFuZCBwdXNoZXMgdGhlIGhlbHBlcidzIHJldHVybiB2YWx1ZSBvbnRvIHRoZSBzdGFjay5cbiAgLy9cbiAgLy8gSWYgdGhlIGhlbHBlciBpcyBub3QgZm91bmQsIGBoZWxwZXJNaXNzaW5nYCBpcyBjYWxsZWQuXG4gIGludm9rZUhlbHBlcjogZnVuY3Rpb24ocGFyYW1TaXplLCBuYW1lLCBpc1NpbXBsZSkge1xuICAgIGxldCBub25IZWxwZXIgPSB0aGlzLnBvcFN0YWNrKCksXG4gICAgICAgIGhlbHBlciA9IHRoaXMuc2V0dXBIZWxwZXIocGFyYW1TaXplLCBuYW1lKSxcbiAgICAgICAgc2ltcGxlID0gaXNTaW1wbGUgPyBbaGVscGVyLm5hbWUsICcgfHwgJ10gOiAnJztcblxuICAgIGxldCBsb29rdXAgPSBbJygnXS5jb25jYXQoc2ltcGxlLCBub25IZWxwZXIpO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnN0cmljdCkge1xuICAgICAgbG9va3VwLnB1c2goJyB8fCAnLCB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5oZWxwZXJNaXNzaW5nJykpO1xuICAgIH1cbiAgICBsb29rdXAucHVzaCgnKScpO1xuXG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChsb29rdXAsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpKTtcbiAgfSxcblxuICAvLyBbaW52b2tlS25vd25IZWxwZXJdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgd2hlbiB0aGUgaGVscGVyIGlzIGtub3duIHRvIGV4aXN0LFxuICAvLyBzbyBhIGBoZWxwZXJNaXNzaW5nYCBmYWxsYmFjayBpcyBub3QgcmVxdWlyZWQuXG4gIGludm9rZUtub3duSGVscGVyOiBmdW5jdGlvbihwYXJhbVNpemUsIG5hbWUpIHtcbiAgICBsZXQgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpO1xuICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoaGVscGVyLm5hbWUsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpKTtcbiAgfSxcblxuICAvLyBbaW52b2tlQW1iaWd1b3VzXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc3VsdCBvZiBkaXNhbWJpZ3VhdGlvblxuICAvL1xuICAvLyBUaGlzIG9wZXJhdGlvbiBpcyB1c2VkIHdoZW4gYW4gZXhwcmVzc2lvbiBsaWtlIGB7e2Zvb319YFxuICAvLyBpcyBwcm92aWRlZCwgYnV0IHdlIGRvbid0IGtub3cgYXQgY29tcGlsZS10aW1lIHdoZXRoZXIgaXRcbiAgLy8gaXMgYSBoZWxwZXIgb3IgYSBwYXRoLlxuICAvL1xuICAvLyBUaGlzIG9wZXJhdGlvbiBlbWl0cyBtb3JlIGNvZGUgdGhhbiB0aGUgb3RoZXIgb3B0aW9ucyxcbiAgLy8gYW5kIGNhbiBiZSBhdm9pZGVkIGJ5IHBhc3NpbmcgdGhlIGBrbm93bkhlbHBlcnNgIGFuZFxuICAvLyBga25vd25IZWxwZXJzT25seWAgZmxhZ3MgYXQgY29tcGlsZS10aW1lLlxuICBpbnZva2VBbWJpZ3VvdXM6IGZ1bmN0aW9uKG5hbWUsIGhlbHBlckNhbGwpIHtcbiAgICB0aGlzLnVzZVJlZ2lzdGVyKCdoZWxwZXInKTtcblxuICAgIGxldCBub25IZWxwZXIgPSB0aGlzLnBvcFN0YWNrKCk7XG5cbiAgICB0aGlzLmVtcHR5SGFzaCgpO1xuICAgIGxldCBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKDAsIG5hbWUsIGhlbHBlckNhbGwpO1xuXG4gICAgbGV0IGhlbHBlck5hbWUgPSB0aGlzLmxhc3RIZWxwZXIgPSB0aGlzLm5hbWVMb29rdXAoJ2hlbHBlcnMnLCBuYW1lLCAnaGVscGVyJyk7XG5cbiAgICBsZXQgbG9va3VwID0gWycoJywgJyhoZWxwZXIgPSAnLCBoZWxwZXJOYW1lLCAnIHx8ICcsIG5vbkhlbHBlciwgJyknXTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgIGxvb2t1cFswXSA9ICcoaGVscGVyID0gJztcbiAgICAgIGxvb2t1cC5wdXNoKFxuICAgICAgICAnICE9IG51bGwgPyBoZWxwZXIgOiAnLFxuICAgICAgICB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5oZWxwZXJNaXNzaW5nJylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoKFtcbiAgICAgICAgJygnLCBsb29rdXAsXG4gICAgICAgIChoZWxwZXIucGFyYW1zSW5pdCA/IFsnKSwoJywgaGVscGVyLnBhcmFtc0luaXRdIDogW10pLCAnKSwnLFxuICAgICAgICAnKHR5cGVvZiBoZWxwZXIgPT09ICcsIHRoaXMuYWxpYXNhYmxlKCdcImZ1bmN0aW9uXCInKSwgJyA/ICcsXG4gICAgICAgIHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbCgnaGVscGVyJywgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcyksICcgOiBoZWxwZXIpKSdcbiAgICBdKTtcbiAgfSxcblxuICAvLyBbaW52b2tlUGFydGlhbF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogY29udGV4dCwgLi4uXG4gIC8vIE9uIHN0YWNrIGFmdGVyOiByZXN1bHQgb2YgcGFydGlhbCBpbnZvY2F0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIHBvcHMgb2ZmIGEgY29udGV4dCwgaW52b2tlcyBhIHBhcnRpYWwgd2l0aCB0aGF0IGNvbnRleHQsXG4gIC8vIGFuZCBwdXNoZXMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2NhdGlvbiBiYWNrLlxuICBpbnZva2VQYXJ0aWFsOiBmdW5jdGlvbihpc0R5bmFtaWMsIG5hbWUsIGluZGVudCkge1xuICAgIGxldCBwYXJhbXMgPSBbXSxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMuc2V0dXBQYXJhbXMobmFtZSwgMSwgcGFyYW1zKTtcblxuICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBkZWxldGUgb3B0aW9ucy5uYW1lO1xuICAgIH1cblxuICAgIGlmIChpbmRlbnQpIHtcbiAgICAgIG9wdGlvbnMuaW5kZW50ID0gSlNPTi5zdHJpbmdpZnkoaW5kZW50KTtcbiAgICB9XG4gICAgb3B0aW9ucy5oZWxwZXJzID0gJ2hlbHBlcnMnO1xuICAgIG9wdGlvbnMucGFydGlhbHMgPSAncGFydGlhbHMnO1xuICAgIG9wdGlvbnMuZGVjb3JhdG9ycyA9ICdjb250YWluZXIuZGVjb3JhdG9ycyc7XG5cbiAgICBpZiAoIWlzRHluYW1pYykge1xuICAgICAgcGFyYW1zLnVuc2hpZnQodGhpcy5uYW1lTG9va3VwKCdwYXJ0aWFscycsIG5hbWUsICdwYXJ0aWFsJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMudW5zaGlmdChuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdCkge1xuICAgICAgb3B0aW9ucy5kZXB0aHMgPSAnZGVwdGhzJztcbiAgICB9XG4gICAgb3B0aW9ucyA9IHRoaXMub2JqZWN0TGl0ZXJhbChvcHRpb25zKTtcbiAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcblxuICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoJ2NvbnRhaW5lci5pbnZva2VQYXJ0aWFsJywgJycsIHBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFthc3NpZ25Ub0hhc2hdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi4sIGhhc2gsIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLiwgaGFzaCwgLi4uXG4gIC8vXG4gIC8vIFBvcHMgYSB2YWx1ZSBvZmYgdGhlIHN0YWNrIGFuZCBhc3NpZ25zIGl0IHRvIHRoZSBjdXJyZW50IGhhc2hcbiAgYXNzaWduVG9IYXNoOiBmdW5jdGlvbihrZXkpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnBvcFN0YWNrKCksXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGlkO1xuXG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIGlkID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIHR5cGUgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBjb250ZXh0ID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cblxuICAgIGxldCBoYXNoID0gdGhpcy5oYXNoO1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBoYXNoLmNvbnRleHRzW2tleV0gPSBjb250ZXh0O1xuICAgIH1cbiAgICBpZiAodHlwZSkge1xuICAgICAgaGFzaC50eXBlc1trZXldID0gdHlwZTtcbiAgICB9XG4gICAgaWYgKGlkKSB7XG4gICAgICBoYXNoLmlkc1trZXldID0gaWQ7XG4gICAgfVxuICAgIGhhc2gudmFsdWVzW2tleV0gPSB2YWx1ZTtcbiAgfSxcblxuICBwdXNoSWQ6IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIGNoaWxkKSB7XG4gICAgaWYgKHR5cGUgPT09ICdCbG9ja1BhcmFtJykge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKFxuICAgICAgICAgICdibG9ja1BhcmFtc1snICsgbmFtZVswXSArICddLnBhdGhbJyArIG5hbWVbMV0gKyAnXSdcbiAgICAgICAgICArIChjaGlsZCA/ICcgKyAnICsgSlNPTi5zdHJpbmdpZnkoJy4nICsgY2hpbGQpIDogJycpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdQYXRoRXhwcmVzc2lvbicpIHtcbiAgICAgIHRoaXMucHVzaFN0cmluZyhuYW1lKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCd0cnVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnbnVsbCcpO1xuICAgIH1cbiAgfSxcblxuICAvLyBIRUxQRVJTXG5cbiAgY29tcGlsZXI6IEphdmFTY3JpcHRDb21waWxlcixcblxuICBjb21waWxlQ2hpbGRyZW46IGZ1bmN0aW9uKGVudmlyb25tZW50LCBvcHRpb25zKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gZW52aXJvbm1lbnQuY2hpbGRyZW4sIGNoaWxkLCBjb21waWxlcjtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgY29tcGlsZXIgPSBuZXcgdGhpcy5jb21waWxlcigpOyAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcblxuICAgICAgbGV0IGV4aXN0aW5nID0gdGhpcy5tYXRjaEV4aXN0aW5nUHJvZ3JhbShjaGlsZCk7XG5cbiAgICAgIGlmIChleGlzdGluZyA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtcy5wdXNoKCcnKTsgICAgIC8vIFBsYWNlaG9sZGVyIHRvIHByZXZlbnQgbmFtZSBjb25mbGljdHMgZm9yIG5lc3RlZCBjaGlsZHJlblxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmNvbnRleHQucHJvZ3JhbXMubGVuZ3RoO1xuICAgICAgICBjaGlsZC5pbmRleCA9IGluZGV4O1xuICAgICAgICBjaGlsZC5uYW1lID0gJ3Byb2dyYW0nICsgaW5kZXg7XG4gICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtc1tpbmRleF0gPSBjb21waWxlci5jb21waWxlKGNoaWxkLCBvcHRpb25zLCB0aGlzLmNvbnRleHQsICF0aGlzLnByZWNvbXBpbGUpO1xuICAgICAgICB0aGlzLmNvbnRleHQuZGVjb3JhdG9yc1tpbmRleF0gPSBjb21waWxlci5kZWNvcmF0b3JzO1xuICAgICAgICB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzW2luZGV4XSA9IGNoaWxkO1xuXG4gICAgICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgY29tcGlsZXIudXNlRGVwdGhzO1xuICAgICAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcyB8fCBjb21waWxlci51c2VCbG9ja1BhcmFtcztcbiAgICAgICAgY2hpbGQudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHM7XG4gICAgICAgIGNoaWxkLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkLmluZGV4ID0gZXhpc3RpbmcuaW5kZXg7XG4gICAgICAgIGNoaWxkLm5hbWUgPSAncHJvZ3JhbScgKyBleGlzdGluZy5pbmRleDtcblxuICAgICAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IGV4aXN0aW5nLnVzZURlcHRocztcbiAgICAgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZXhpc3RpbmcudXNlQmxvY2tQYXJhbXM7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtYXRjaEV4aXN0aW5nUHJvZ3JhbTogZnVuY3Rpb24oY2hpbGQpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5jb250ZXh0LmVudmlyb25tZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGV0IGVudmlyb25tZW50ID0gdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpXTtcbiAgICAgIGlmIChlbnZpcm9ubWVudCAmJiBlbnZpcm9ubWVudC5lcXVhbHMoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiBlbnZpcm9ubWVudDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgcHJvZ3JhbUV4cHJlc3Npb246IGZ1bmN0aW9uKGd1aWQpIHtcbiAgICBsZXQgY2hpbGQgPSB0aGlzLmVudmlyb25tZW50LmNoaWxkcmVuW2d1aWRdLFxuICAgICAgICBwcm9ncmFtUGFyYW1zID0gW2NoaWxkLmluZGV4LCAnZGF0YScsIGNoaWxkLmJsb2NrUGFyYW1zXTtcblxuICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwcm9ncmFtUGFyYW1zLnB1c2goJ2Jsb2NrUGFyYW1zJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnVzZURlcHRocykge1xuICAgICAgcHJvZ3JhbVBhcmFtcy5wdXNoKCdkZXB0aHMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJ2NvbnRhaW5lci5wcm9ncmFtKCcgKyBwcm9ncmFtUGFyYW1zLmpvaW4oJywgJykgKyAnKSc7XG4gIH0sXG5cbiAgdXNlUmVnaXN0ZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoIXRoaXMucmVnaXN0ZXJzW25hbWVdKSB7XG4gICAgICB0aGlzLnJlZ2lzdGVyc1tuYW1lXSA9IHRydWU7XG4gICAgICB0aGlzLnJlZ2lzdGVycy5saXN0LnB1c2gobmFtZSk7XG4gICAgfVxuICB9LFxuXG4gIHB1c2g6IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICBpZiAoIShleHByIGluc3RhbmNlb2YgTGl0ZXJhbCkpIHtcbiAgICAgIGV4cHIgPSB0aGlzLnNvdXJjZS53cmFwKGV4cHIpO1xuICAgIH1cblxuICAgIHRoaXMuaW5saW5lU3RhY2sucHVzaChleHByKTtcbiAgICByZXR1cm4gZXhwcjtcbiAgfSxcblxuICBwdXNoU3RhY2tMaXRlcmFsOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgdGhpcy5wdXNoKG5ldyBMaXRlcmFsKGl0ZW0pKTtcbiAgfSxcblxuICBwdXNoU291cmNlOiBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICBpZiAodGhpcy5wZW5kaW5nQ29udGVudCkge1xuICAgICAgdGhpcy5zb3VyY2UucHVzaChcbiAgICAgICAgICB0aGlzLmFwcGVuZFRvQnVmZmVyKHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyh0aGlzLnBlbmRpbmdDb250ZW50KSwgdGhpcy5wZW5kaW5nTG9jYXRpb24pKTtcbiAgICAgIHRoaXMucGVuZGluZ0NvbnRlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgdGhpcy5zb3VyY2UucHVzaChzb3VyY2UpO1xuICAgIH1cbiAgfSxcblxuICByZXBsYWNlU3RhY2s6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgbGV0IHByZWZpeCA9IFsnKCddLFxuICAgICAgICBzdGFjayxcbiAgICAgICAgY3JlYXRlZFN0YWNrLFxuICAgICAgICB1c2VkTGl0ZXJhbDtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKCF0aGlzLmlzSW5saW5lKCkpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ3JlcGxhY2VTdGFjayBvbiBub24taW5saW5lJyk7XG4gICAgfVxuXG4gICAgLy8gV2Ugd2FudCB0byBtZXJnZSB0aGUgaW5saW5lIHN0YXRlbWVudCBpbnRvIHRoZSByZXBsYWNlbWVudCBzdGF0ZW1lbnQgdmlhICcsJ1xuICAgIGxldCB0b3AgPSB0aGlzLnBvcFN0YWNrKHRydWUpO1xuXG4gICAgaWYgKHRvcCBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgIC8vIExpdGVyYWxzIGRvIG5vdCBuZWVkIHRvIGJlIGlubGluZWRcbiAgICAgIHN0YWNrID0gW3RvcC52YWx1ZV07XG4gICAgICBwcmVmaXggPSBbJygnLCBzdGFja107XG4gICAgICB1c2VkTGl0ZXJhbCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEdldCBvciBjcmVhdGUgdGhlIGN1cnJlbnQgc3RhY2sgbmFtZSBmb3IgdXNlIGJ5IHRoZSBpbmxpbmVcbiAgICAgIGNyZWF0ZWRTdGFjayA9IHRydWU7XG4gICAgICBsZXQgbmFtZSA9IHRoaXMuaW5jclN0YWNrKCk7XG5cbiAgICAgIHByZWZpeCA9IFsnKCgnLCB0aGlzLnB1c2gobmFtZSksICcgPSAnLCB0b3AsICcpJ107XG4gICAgICBzdGFjayA9IHRoaXMudG9wU3RhY2soKTtcbiAgICB9XG5cbiAgICBsZXQgaXRlbSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RhY2spO1xuXG4gICAgaWYgKCF1c2VkTGl0ZXJhbCkge1xuICAgICAgdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cbiAgICBpZiAoY3JlYXRlZFN0YWNrKSB7XG4gICAgICB0aGlzLnN0YWNrU2xvdC0tO1xuICAgIH1cbiAgICB0aGlzLnB1c2gocHJlZml4LmNvbmNhdChpdGVtLCAnKScpKTtcbiAgfSxcblxuICBpbmNyU3RhY2s6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3RhY2tTbG90Kys7XG4gICAgaWYgKHRoaXMuc3RhY2tTbG90ID4gdGhpcy5zdGFja1ZhcnMubGVuZ3RoKSB7IHRoaXMuc3RhY2tWYXJzLnB1c2goJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90KTsgfVxuICAgIHJldHVybiB0aGlzLnRvcFN0YWNrTmFtZSgpO1xuICB9LFxuICB0b3BTdGFja05hbWU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnc3RhY2snICsgdGhpcy5zdGFja1Nsb3Q7XG4gIH0sXG4gIGZsdXNoSW5saW5lOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgaW5saW5lU3RhY2sgPSB0aGlzLmlubGluZVN0YWNrO1xuICAgIHRoaXMuaW5saW5lU3RhY2sgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gaW5saW5lU3RhY2subGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxldCBlbnRyeSA9IGlubGluZVN0YWNrW2ldO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoZW50cnkgaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICAgIHRoaXMuY29tcGlsZVN0YWNrLnB1c2goZW50cnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHN0YWNrID0gdGhpcy5pbmNyU3RhY2soKTtcbiAgICAgICAgdGhpcy5wdXNoU291cmNlKFtzdGFjaywgJyA9ICcsIGVudHJ5LCAnOyddKTtcbiAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChzdGFjayk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpc0lubGluZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5saW5lU3RhY2subGVuZ3RoO1xuICB9LFxuXG4gIHBvcFN0YWNrOiBmdW5jdGlvbih3cmFwcGVkKSB7XG4gICAgbGV0IGlubGluZSA9IHRoaXMuaXNJbmxpbmUoKSxcbiAgICAgICAgaXRlbSA9IChpbmxpbmUgPyB0aGlzLmlubGluZVN0YWNrIDogdGhpcy5jb21waWxlU3RhY2spLnBvcCgpO1xuXG4gICAgaWYgKCF3cmFwcGVkICYmIChpdGVtIGluc3RhbmNlb2YgTGl0ZXJhbCkpIHtcbiAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWlubGluZSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAoIXRoaXMuc3RhY2tTbG90KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignSW52YWxpZCBzdGFjayBwb3AnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YWNrU2xvdC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9LFxuXG4gIHRvcFN0YWNrOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgc3RhY2sgPSAodGhpcy5pc0lubGluZSgpID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrKSxcbiAgICAgICAgaXRlbSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9LFxuXG4gIGNvbnRleHROYW1lOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgaWYgKHRoaXMudXNlRGVwdGhzICYmIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiAnZGVwdGhzWycgKyBjb250ZXh0ICsgJ10nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2RlcHRoJyArIGNvbnRleHQ7XG4gICAgfVxuICB9LFxuXG4gIHF1b3RlZFN0cmluZzogZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyhzdHIpO1xuICB9LFxuXG4gIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5vYmplY3RMaXRlcmFsKG9iaik7XG4gIH0sXG5cbiAgYWxpYXNhYmxlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgbGV0IHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXTtcbiAgICBpZiAocmV0KSB7XG4gICAgICByZXQucmVmZXJlbmNlQ291bnQrKztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgcmV0ID0gdGhpcy5hbGlhc2VzW25hbWVdID0gdGhpcy5zb3VyY2Uud3JhcChuYW1lKTtcbiAgICByZXQuYWxpYXNhYmxlID0gdHJ1ZTtcbiAgICByZXQucmVmZXJlbmNlQ291bnQgPSAxO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBzZXR1cEhlbHBlcjogZnVuY3Rpb24ocGFyYW1TaXplLCBuYW1lLCBibG9ja0hlbHBlcikge1xuICAgIGxldCBwYXJhbXMgPSBbXSxcbiAgICAgICAgcGFyYW1zSW5pdCA9IHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIHBhcmFtU2l6ZSwgcGFyYW1zLCBibG9ja0hlbHBlcik7XG4gICAgbGV0IGZvdW5kSGVscGVyID0gdGhpcy5uYW1lTG9va3VwKCdoZWxwZXJzJywgbmFtZSwgJ2hlbHBlcicpLFxuICAgICAgICBjYWxsQ29udGV4dCA9IHRoaXMuYWxpYXNhYmxlKGAke3RoaXMuY29udGV4dE5hbWUoMCl9ICE9IG51bGwgPyAke3RoaXMuY29udGV4dE5hbWUoMCl9IDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSlgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgIHBhcmFtc0luaXQ6IHBhcmFtc0luaXQsXG4gICAgICBuYW1lOiBmb3VuZEhlbHBlcixcbiAgICAgIGNhbGxQYXJhbXM6IFtjYWxsQ29udGV4dF0uY29uY2F0KHBhcmFtcylcbiAgICB9O1xuICB9LFxuXG4gIHNldHVwUGFyYW1zOiBmdW5jdGlvbihoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB7fSxcbiAgICAgICAgY29udGV4dHMgPSBbXSxcbiAgICAgICAgdHlwZXMgPSBbXSxcbiAgICAgICAgaWRzID0gW10sXG4gICAgICAgIG9iamVjdEFyZ3MgPSAhcGFyYW1zLFxuICAgICAgICBwYXJhbTtcblxuICAgIGlmIChvYmplY3RBcmdzKSB7XG4gICAgICBwYXJhbXMgPSBbXTtcbiAgICB9XG5cbiAgICBvcHRpb25zLm5hbWUgPSB0aGlzLnF1b3RlZFN0cmluZyhoZWxwZXIpO1xuICAgIG9wdGlvbnMuaGFzaCA9IHRoaXMucG9wU3RhY2soKTtcblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICBvcHRpb25zLmhhc2hJZHMgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgb3B0aW9ucy5oYXNoVHlwZXMgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBvcHRpb25zLmhhc2hDb250ZXh0cyA9IHRoaXMucG9wU3RhY2soKTtcbiAgICB9XG5cbiAgICBsZXQgaW52ZXJzZSA9IHRoaXMucG9wU3RhY2soKSxcbiAgICAgICAgcHJvZ3JhbSA9IHRoaXMucG9wU3RhY2soKTtcblxuICAgIC8vIEF2b2lkIHNldHRpbmcgZm4gYW5kIGludmVyc2UgaWYgbmVpdGhlciBhcmUgc2V0LiBUaGlzIGFsbG93c1xuICAgIC8vIGhlbHBlcnMgdG8gZG8gYSBjaGVjayBmb3IgYGlmIChvcHRpb25zLmZuKWBcbiAgICBpZiAocHJvZ3JhbSB8fCBpbnZlcnNlKSB7XG4gICAgICBvcHRpb25zLmZuID0gcHJvZ3JhbSB8fCAnY29udGFpbmVyLm5vb3AnO1xuICAgICAgb3B0aW9ucy5pbnZlcnNlID0gaW52ZXJzZSB8fCAnY29udGFpbmVyLm5vb3AnO1xuICAgIH1cblxuICAgIC8vIFRoZSBwYXJhbWV0ZXJzIGdvIG9uIHRvIHRoZSBzdGFjayBpbiBvcmRlciAobWFraW5nIHN1cmUgdGhhdCB0aGV5IGFyZSBldmFsdWF0ZWQgaW4gb3JkZXIpXG4gICAgLy8gc28gd2UgbmVlZCB0byBwb3AgdGhlbSBvZmYgdGhlIHN0YWNrIGluIHJldmVyc2Ugb3JkZXJcbiAgICBsZXQgaSA9IHBhcmFtU2l6ZTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwYXJhbSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIHBhcmFtc1tpXSA9IHBhcmFtO1xuXG4gICAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgICBpZHNbaV0gPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgICAgdHlwZXNbaV0gPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICAgIGNvbnRleHRzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvYmplY3RBcmdzKSB7XG4gICAgICBvcHRpb25zLmFyZ3MgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KHBhcmFtcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIG9wdGlvbnMuaWRzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheShpZHMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIG9wdGlvbnMudHlwZXMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KHR5cGVzKTtcbiAgICAgIG9wdGlvbnMuY29udGV4dHMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KGNvbnRleHRzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHtcbiAgICAgIG9wdGlvbnMuZGF0YSA9ICdkYXRhJztcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHtcbiAgICAgIG9wdGlvbnMuYmxvY2tQYXJhbXMgPSAnYmxvY2tQYXJhbXMnO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfSxcblxuICBzZXR1cEhlbHBlckFyZ3M6IGZ1bmN0aW9uKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMsIHVzZVJlZ2lzdGVyKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLnNldHVwUGFyYW1zKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMpO1xuICAgIG9wdGlvbnMgPSB0aGlzLm9iamVjdExpdGVyYWwob3B0aW9ucyk7XG4gICAgaWYgKHVzZVJlZ2lzdGVyKSB7XG4gICAgICB0aGlzLnVzZVJlZ2lzdGVyKCdvcHRpb25zJyk7XG4gICAgICBwYXJhbXMucHVzaCgnb3B0aW9ucycpO1xuICAgICAgcmV0dXJuIFsnb3B0aW9ucz0nLCBvcHRpb25zXTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcykge1xuICAgICAgcGFyYW1zLnB1c2gob3B0aW9ucyk7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbiAgfVxufTtcblxuXG4oZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJlc2VydmVkV29yZHMgPSAoXG4gICAgJ2JyZWFrIGVsc2UgbmV3IHZhcicgK1xuICAgICcgY2FzZSBmaW5hbGx5IHJldHVybiB2b2lkJyArXG4gICAgJyBjYXRjaCBmb3Igc3dpdGNoIHdoaWxlJyArXG4gICAgJyBjb250aW51ZSBmdW5jdGlvbiB0aGlzIHdpdGgnICtcbiAgICAnIGRlZmF1bHQgaWYgdGhyb3cnICtcbiAgICAnIGRlbGV0ZSBpbiB0cnknICtcbiAgICAnIGRvIGluc3RhbmNlb2YgdHlwZW9mJyArXG4gICAgJyBhYnN0cmFjdCBlbnVtIGludCBzaG9ydCcgK1xuICAgICcgYm9vbGVhbiBleHBvcnQgaW50ZXJmYWNlIHN0YXRpYycgK1xuICAgICcgYnl0ZSBleHRlbmRzIGxvbmcgc3VwZXInICtcbiAgICAnIGNoYXIgZmluYWwgbmF0aXZlIHN5bmNocm9uaXplZCcgK1xuICAgICcgY2xhc3MgZmxvYXQgcGFja2FnZSB0aHJvd3MnICtcbiAgICAnIGNvbnN0IGdvdG8gcHJpdmF0ZSB0cmFuc2llbnQnICtcbiAgICAnIGRlYnVnZ2VyIGltcGxlbWVudHMgcHJvdGVjdGVkIHZvbGF0aWxlJyArXG4gICAgJyBkb3VibGUgaW1wb3J0IHB1YmxpYyBsZXQgeWllbGQgYXdhaXQnICtcbiAgICAnIG51bGwgdHJ1ZSBmYWxzZSdcbiAgKS5zcGxpdCgnICcpO1xuXG4gIGNvbnN0IGNvbXBpbGVyV29yZHMgPSBKYXZhU2NyaXB0Q29tcGlsZXIuUkVTRVJWRURfV09SRFMgPSB7fTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHJlc2VydmVkV29yZHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29tcGlsZXJXb3Jkc1tyZXNlcnZlZFdvcmRzW2ldXSA9IHRydWU7XG4gIH1cbn0oKSk7XG5cbkphdmFTY3JpcHRDb21waWxlci5pc1ZhbGlkSmF2YVNjcmlwdFZhcmlhYmxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuICFKYXZhU2NyaXB0Q29tcGlsZXIuUkVTRVJWRURfV09SRFNbbmFtZV0gJiYgKC9eW2EtekEtWl8kXVswLTlhLXpBLVpfJF0qJC8pLnRlc3QobmFtZSk7XG59O1xuXG5mdW5jdGlvbiBzdHJpY3RMb29rdXAocmVxdWlyZVRlcm1pbmFsLCBjb21waWxlciwgcGFydHMsIHR5cGUpIHtcbiAgbGV0IHN0YWNrID0gY29tcGlsZXIucG9wU3RhY2soKSxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gcGFydHMubGVuZ3RoO1xuICBpZiAocmVxdWlyZVRlcm1pbmFsKSB7XG4gICAgbGVuLS07XG4gIH1cblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgc3RhY2sgPSBjb21waWxlci5uYW1lTG9va3VwKHN0YWNrLCBwYXJ0c1tpXSwgdHlwZSk7XG4gIH1cblxuICBpZiAocmVxdWlyZVRlcm1pbmFsKSB7XG4gICAgcmV0dXJuIFtjb21waWxlci5hbGlhc2FibGUoJ2NvbnRhaW5lci5zdHJpY3QnKSwgJygnLCBzdGFjaywgJywgJywgY29tcGlsZXIucXVvdGVkU3RyaW5nKHBhcnRzW2ldKSwgJyknXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSmF2YVNjcmlwdENvbXBpbGVyO1xuIiwiLy8gRmlsZSBpZ25vcmVkIGluIGNvdmVyYWdlIHRlc3RzIHZpYSBzZXR0aW5nIGluIC5pc3RhbmJ1bC55bWxcbi8qIEppc29uIGdlbmVyYXRlZCBwYXJzZXIgKi9cbnZhciBoYW5kbGViYXJzID0gKGZ1bmN0aW9uKCl7XG52YXIgcGFyc2VyID0ge3RyYWNlOiBmdW5jdGlvbiB0cmFjZSgpIHsgfSxcbnl5OiB7fSxcbnN5bWJvbHNfOiB7XCJlcnJvclwiOjIsXCJyb290XCI6MyxcInByb2dyYW1cIjo0LFwiRU9GXCI6NSxcInByb2dyYW1fcmVwZXRpdGlvbjBcIjo2LFwic3RhdGVtZW50XCI6NyxcIm11c3RhY2hlXCI6OCxcImJsb2NrXCI6OSxcInJhd0Jsb2NrXCI6MTAsXCJwYXJ0aWFsXCI6MTEsXCJwYXJ0aWFsQmxvY2tcIjoxMixcImNvbnRlbnRcIjoxMyxcIkNPTU1FTlRcIjoxNCxcIkNPTlRFTlRcIjoxNSxcIm9wZW5SYXdCbG9ja1wiOjE2LFwicmF3QmxvY2tfcmVwZXRpdGlvbl9wbHVzMFwiOjE3LFwiRU5EX1JBV19CTE9DS1wiOjE4LFwiT1BFTl9SQVdfQkxPQ0tcIjoxOSxcImhlbHBlck5hbWVcIjoyMCxcIm9wZW5SYXdCbG9ja19yZXBldGl0aW9uMFwiOjIxLFwib3BlblJhd0Jsb2NrX29wdGlvbjBcIjoyMixcIkNMT1NFX1JBV19CTE9DS1wiOjIzLFwib3BlbkJsb2NrXCI6MjQsXCJibG9ja19vcHRpb24wXCI6MjUsXCJjbG9zZUJsb2NrXCI6MjYsXCJvcGVuSW52ZXJzZVwiOjI3LFwiYmxvY2tfb3B0aW9uMVwiOjI4LFwiT1BFTl9CTE9DS1wiOjI5LFwib3BlbkJsb2NrX3JlcGV0aXRpb24wXCI6MzAsXCJvcGVuQmxvY2tfb3B0aW9uMFwiOjMxLFwib3BlbkJsb2NrX29wdGlvbjFcIjozMixcIkNMT1NFXCI6MzMsXCJPUEVOX0lOVkVSU0VcIjozNCxcIm9wZW5JbnZlcnNlX3JlcGV0aXRpb24wXCI6MzUsXCJvcGVuSW52ZXJzZV9vcHRpb24wXCI6MzYsXCJvcGVuSW52ZXJzZV9vcHRpb24xXCI6MzcsXCJvcGVuSW52ZXJzZUNoYWluXCI6MzgsXCJPUEVOX0lOVkVSU0VfQ0hBSU5cIjozOSxcIm9wZW5JbnZlcnNlQ2hhaW5fcmVwZXRpdGlvbjBcIjo0MCxcIm9wZW5JbnZlcnNlQ2hhaW5fb3B0aW9uMFwiOjQxLFwib3BlbkludmVyc2VDaGFpbl9vcHRpb24xXCI6NDIsXCJpbnZlcnNlQW5kUHJvZ3JhbVwiOjQzLFwiSU5WRVJTRVwiOjQ0LFwiaW52ZXJzZUNoYWluXCI6NDUsXCJpbnZlcnNlQ2hhaW5fb3B0aW9uMFwiOjQ2LFwiT1BFTl9FTkRCTE9DS1wiOjQ3LFwiT1BFTlwiOjQ4LFwibXVzdGFjaGVfcmVwZXRpdGlvbjBcIjo0OSxcIm11c3RhY2hlX29wdGlvbjBcIjo1MCxcIk9QRU5fVU5FU0NBUEVEXCI6NTEsXCJtdXN0YWNoZV9yZXBldGl0aW9uMVwiOjUyLFwibXVzdGFjaGVfb3B0aW9uMVwiOjUzLFwiQ0xPU0VfVU5FU0NBUEVEXCI6NTQsXCJPUEVOX1BBUlRJQUxcIjo1NSxcInBhcnRpYWxOYW1lXCI6NTYsXCJwYXJ0aWFsX3JlcGV0aXRpb24wXCI6NTcsXCJwYXJ0aWFsX29wdGlvbjBcIjo1OCxcIm9wZW5QYXJ0aWFsQmxvY2tcIjo1OSxcIk9QRU5fUEFSVElBTF9CTE9DS1wiOjYwLFwib3BlblBhcnRpYWxCbG9ja19yZXBldGl0aW9uMFwiOjYxLFwib3BlblBhcnRpYWxCbG9ja19vcHRpb24wXCI6NjIsXCJwYXJhbVwiOjYzLFwic2V4cHJcIjo2NCxcIk9QRU5fU0VYUFJcIjo2NSxcInNleHByX3JlcGV0aXRpb24wXCI6NjYsXCJzZXhwcl9vcHRpb24wXCI6NjcsXCJDTE9TRV9TRVhQUlwiOjY4LFwiaGFzaFwiOjY5LFwiaGFzaF9yZXBldGl0aW9uX3BsdXMwXCI6NzAsXCJoYXNoU2VnbWVudFwiOjcxLFwiSURcIjo3MixcIkVRVUFMU1wiOjczLFwiYmxvY2tQYXJhbXNcIjo3NCxcIk9QRU5fQkxPQ0tfUEFSQU1TXCI6NzUsXCJibG9ja1BhcmFtc19yZXBldGl0aW9uX3BsdXMwXCI6NzYsXCJDTE9TRV9CTE9DS19QQVJBTVNcIjo3NyxcInBhdGhcIjo3OCxcImRhdGFOYW1lXCI6NzksXCJTVFJJTkdcIjo4MCxcIk5VTUJFUlwiOjgxLFwiQk9PTEVBTlwiOjgyLFwiVU5ERUZJTkVEXCI6ODMsXCJOVUxMXCI6ODQsXCJEQVRBXCI6ODUsXCJwYXRoU2VnbWVudHNcIjo4NixcIlNFUFwiOjg3LFwiJGFjY2VwdFwiOjAsXCIkZW5kXCI6MX0sXG50ZXJtaW5hbHNfOiB7MjpcImVycm9yXCIsNTpcIkVPRlwiLDE0OlwiQ09NTUVOVFwiLDE1OlwiQ09OVEVOVFwiLDE4OlwiRU5EX1JBV19CTE9DS1wiLDE5OlwiT1BFTl9SQVdfQkxPQ0tcIiwyMzpcIkNMT1NFX1JBV19CTE9DS1wiLDI5OlwiT1BFTl9CTE9DS1wiLDMzOlwiQ0xPU0VcIiwzNDpcIk9QRU5fSU5WRVJTRVwiLDM5OlwiT1BFTl9JTlZFUlNFX0NIQUlOXCIsNDQ6XCJJTlZFUlNFXCIsNDc6XCJPUEVOX0VOREJMT0NLXCIsNDg6XCJPUEVOXCIsNTE6XCJPUEVOX1VORVNDQVBFRFwiLDU0OlwiQ0xPU0VfVU5FU0NBUEVEXCIsNTU6XCJPUEVOX1BBUlRJQUxcIiw2MDpcIk9QRU5fUEFSVElBTF9CTE9DS1wiLDY1OlwiT1BFTl9TRVhQUlwiLDY4OlwiQ0xPU0VfU0VYUFJcIiw3MjpcIklEXCIsNzM6XCJFUVVBTFNcIiw3NTpcIk9QRU5fQkxPQ0tfUEFSQU1TXCIsNzc6XCJDTE9TRV9CTE9DS19QQVJBTVNcIiw4MDpcIlNUUklOR1wiLDgxOlwiTlVNQkVSXCIsODI6XCJCT09MRUFOXCIsODM6XCJVTkRFRklORURcIiw4NDpcIk5VTExcIiw4NTpcIkRBVEFcIiw4NzpcIlNFUFwifSxcbnByb2R1Y3Rpb25zXzogWzAsWzMsMl0sWzQsMV0sWzcsMV0sWzcsMV0sWzcsMV0sWzcsMV0sWzcsMV0sWzcsMV0sWzcsMV0sWzEzLDFdLFsxMCwzXSxbMTYsNV0sWzksNF0sWzksNF0sWzI0LDZdLFsyNyw2XSxbMzgsNl0sWzQzLDJdLFs0NSwzXSxbNDUsMV0sWzI2LDNdLFs4LDVdLFs4LDVdLFsxMSw1XSxbMTIsM10sWzU5LDVdLFs2MywxXSxbNjMsMV0sWzY0LDVdLFs2OSwxXSxbNzEsM10sWzc0LDNdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFsyMCwxXSxbNTYsMV0sWzU2LDFdLFs3OSwyXSxbNzgsMV0sWzg2LDNdLFs4NiwxXSxbNiwwXSxbNiwyXSxbMTcsMV0sWzE3LDJdLFsyMSwwXSxbMjEsMl0sWzIyLDBdLFsyMiwxXSxbMjUsMF0sWzI1LDFdLFsyOCwwXSxbMjgsMV0sWzMwLDBdLFszMCwyXSxbMzEsMF0sWzMxLDFdLFszMiwwXSxbMzIsMV0sWzM1LDBdLFszNSwyXSxbMzYsMF0sWzM2LDFdLFszNywwXSxbMzcsMV0sWzQwLDBdLFs0MCwyXSxbNDEsMF0sWzQxLDFdLFs0MiwwXSxbNDIsMV0sWzQ2LDBdLFs0NiwxXSxbNDksMF0sWzQ5LDJdLFs1MCwwXSxbNTAsMV0sWzUyLDBdLFs1MiwyXSxbNTMsMF0sWzUzLDFdLFs1NywwXSxbNTcsMl0sWzU4LDBdLFs1OCwxXSxbNjEsMF0sWzYxLDJdLFs2MiwwXSxbNjIsMV0sWzY2LDBdLFs2NiwyXSxbNjcsMF0sWzY3LDFdLFs3MCwxXSxbNzAsMl0sWzc2LDFdLFs3NiwyXV0sXG5wZXJmb3JtQWN0aW9uOiBmdW5jdGlvbiBhbm9ueW1vdXMoeXl0ZXh0LHl5bGVuZyx5eWxpbmVubyx5eSx5eXN0YXRlLCQkLF8kXG4vKiovKSB7XG5cbnZhciAkMCA9ICQkLmxlbmd0aCAtIDE7XG5zd2l0Y2ggKHl5c3RhdGUpIHtcbmNhc2UgMTogcmV0dXJuICQkWyQwLTFdOyBcbmJyZWFrO1xuY2FzZSAyOnRoaXMuJCA9IHl5LnByZXBhcmVQcm9ncmFtKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgMzp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNDp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNTp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNjp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNzp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgODp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgOTpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnQ29tbWVudFN0YXRlbWVudCcsXG4gICAgICB2YWx1ZTogeXkuc3RyaXBDb21tZW50KCQkWyQwXSksXG4gICAgICBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMF0sICQkWyQwXSksXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAxMDpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnQ29udGVudFN0YXRlbWVudCcsXG4gICAgICBvcmlnaW5hbDogJCRbJDBdLFxuICAgICAgdmFsdWU6ICQkWyQwXSxcbiAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuICAgIH07XG4gIFxuYnJlYWs7XG5jYXNlIDExOnRoaXMuJCA9IHl5LnByZXBhcmVSYXdCbG9jaygkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTI6dGhpcy4kID0geyBwYXRoOiAkJFskMC0zXSwgcGFyYW1zOiAkJFskMC0yXSwgaGFzaDogJCRbJDAtMV0gfTtcbmJyZWFrO1xuY2FzZSAxMzp0aGlzLiQgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAtM10sICQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCBmYWxzZSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTQ6dGhpcy4kID0geXkucHJlcGFyZUJsb2NrKCQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgdHJ1ZSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTU6dGhpcy4kID0geyBvcGVuOiAkJFskMC01XSwgcGF0aDogJCRbJDAtNF0sIHBhcmFtczogJCRbJDAtM10sIGhhc2g6ICQkWyQwLTJdLCBibG9ja1BhcmFtczogJCRbJDAtMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTVdLCAkJFskMF0pIH07XG5icmVhaztcbmNhc2UgMTY6dGhpcy4kID0geyBwYXRoOiAkJFskMC00XSwgcGFyYW1zOiAkJFskMC0zXSwgaGFzaDogJCRbJDAtMl0sIGJsb2NrUGFyYW1zOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNV0sICQkWyQwXSkgfTtcbmJyZWFrO1xuY2FzZSAxNzp0aGlzLiQgPSB7IHBhdGg6ICQkWyQwLTRdLCBwYXJhbXM6ICQkWyQwLTNdLCBoYXNoOiAkJFskMC0yXSwgYmxvY2tQYXJhbXM6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC01XSwgJCRbJDBdKSB9O1xuYnJlYWs7XG5jYXNlIDE4OnRoaXMuJCA9IHsgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtMV0sICQkWyQwLTFdKSwgcHJvZ3JhbTogJCRbJDBdIH07XG5icmVhaztcbmNhc2UgMTk6XG4gICAgdmFyIGludmVyc2UgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sICQkWyQwXSwgZmFsc2UsIHRoaXMuXyQpLFxuICAgICAgICBwcm9ncmFtID0geXkucHJlcGFyZVByb2dyYW0oW2ludmVyc2VdLCAkJFskMC0xXS5sb2MpO1xuICAgIHByb2dyYW0uY2hhaW5lZCA9IHRydWU7XG5cbiAgICB0aGlzLiQgPSB7IHN0cmlwOiAkJFskMC0yXS5zdHJpcCwgcHJvZ3JhbTogcHJvZ3JhbSwgY2hhaW46IHRydWUgfTtcbiAgXG5icmVhaztcbmNhc2UgMjA6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDIxOnRoaXMuJCA9IHtwYXRoOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtMl0sICQkWyQwXSl9O1xuYnJlYWs7XG5jYXNlIDIyOnRoaXMuJCA9IHl5LnByZXBhcmVNdXN0YWNoZSgkJFskMC0zXSwgJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMC00XSwgeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMjM6dGhpcy4kID0geXkucHJlcGFyZU11c3RhY2hlKCQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwLTRdLCB5eS5zdHJpcEZsYWdzKCQkWyQwLTRdLCAkJFskMF0pLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAyNDpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnUGFydGlhbFN0YXRlbWVudCcsXG4gICAgICBuYW1lOiAkJFskMC0zXSxcbiAgICAgIHBhcmFtczogJCRbJDAtMl0sXG4gICAgICBoYXNoOiAkJFskMC0xXSxcbiAgICAgIGluZGVudDogJycsXG4gICAgICBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSxcbiAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuICAgIH07XG4gIFxuYnJlYWs7XG5jYXNlIDI1OnRoaXMuJCA9IHl5LnByZXBhcmVQYXJ0aWFsQmxvY2soJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDI2OnRoaXMuJCA9IHsgcGF0aDogJCRbJDAtM10sIHBhcmFtczogJCRbJDAtMl0sIGhhc2g6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSB9O1xuYnJlYWs7XG5jYXNlIDI3OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAyODp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMjk6XG4gICAgdGhpcy4kID0ge1xuICAgICAgdHlwZTogJ1N1YkV4cHJlc3Npb24nLFxuICAgICAgcGF0aDogJCRbJDAtM10sXG4gICAgICBwYXJhbXM6ICQkWyQwLTJdLFxuICAgICAgaGFzaDogJCRbJDAtMV0sXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAzMDp0aGlzLiQgPSB7dHlwZTogJ0hhc2gnLCBwYWlyczogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDMxOnRoaXMuJCA9IHt0eXBlOiAnSGFzaFBhaXInLCBrZXk6IHl5LmlkKCQkWyQwLTJdKSwgdmFsdWU6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzMjp0aGlzLiQgPSB5eS5pZCgkJFskMC0xXSk7XG5icmVhaztcbmNhc2UgMzM6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDM0OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAzNTp0aGlzLiQgPSB7dHlwZTogJ1N0cmluZ0xpdGVyYWwnLCB2YWx1ZTogJCRbJDBdLCBvcmlnaW5hbDogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM2OnRoaXMuJCA9IHt0eXBlOiAnTnVtYmVyTGl0ZXJhbCcsIHZhbHVlOiBOdW1iZXIoJCRbJDBdKSwgb3JpZ2luYWw6IE51bWJlcigkJFskMF0pLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM3OnRoaXMuJCA9IHt0eXBlOiAnQm9vbGVhbkxpdGVyYWwnLCB2YWx1ZTogJCRbJDBdID09PSAndHJ1ZScsIG9yaWdpbmFsOiAkJFskMF0gPT09ICd0cnVlJywgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzODp0aGlzLiQgPSB7dHlwZTogJ1VuZGVmaW5lZExpdGVyYWwnLCBvcmlnaW5hbDogdW5kZWZpbmVkLCB2YWx1ZTogdW5kZWZpbmVkLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM5OnRoaXMuJCA9IHt0eXBlOiAnTnVsbExpdGVyYWwnLCBvcmlnaW5hbDogbnVsbCwgdmFsdWU6IG51bGwsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgNDA6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDQxOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA0Mjp0aGlzLiQgPSB5eS5wcmVwYXJlUGF0aCh0cnVlLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDQzOnRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKGZhbHNlLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDQ0OiAkJFskMC0yXS5wdXNoKHtwYXJ0OiB5eS5pZCgkJFskMF0pLCBvcmlnaW5hbDogJCRbJDBdLCBzZXBhcmF0b3I6ICQkWyQwLTFdfSk7IHRoaXMuJCA9ICQkWyQwLTJdOyBcbmJyZWFrO1xuY2FzZSA0NTp0aGlzLiQgPSBbe3BhcnQ6IHl5LmlkKCQkWyQwXSksIG9yaWdpbmFsOiAkJFskMF19XTtcbmJyZWFrO1xuY2FzZSA0Njp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA0NzokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNDg6dGhpcy4kID0gWyQkWyQwXV07XG5icmVhaztcbmNhc2UgNDk6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDUwOnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDUxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA1ODp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA1OTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNjQ6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNjU6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDcwOnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDcxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA3ODp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA3OTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgODI6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgODM6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDg2OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDg3OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA5MDp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA5MTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgOTQ6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgOTU6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDk4OnRoaXMuJCA9IFskJFskMF1dO1xuYnJlYWs7XG5jYXNlIDk5OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSAxMDA6dGhpcy4kID0gWyQkWyQwXV07XG5icmVhaztcbmNhc2UgMTAxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xufVxufSxcbnRhYmxlOiBbezM6MSw0OjIsNTpbMiw0Nl0sNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7MTpbM119LHs1OlsxLDRdfSx7NTpbMiwyXSw3OjUsODo2LDk6NywxMDo4LDExOjksMTI6MTAsMTM6MTEsMTQ6WzEsMTJdLDE1OlsxLDIwXSwxNjoxNywxOTpbMSwyM10sMjQ6MTUsMjc6MTYsMjk6WzEsMjFdLDM0OlsxLDIyXSwzOTpbMiwyXSw0NDpbMiwyXSw0NzpbMiwyXSw0ODpbMSwxM10sNTE6WzEsMTRdLDU1OlsxLDE4XSw1OToxOSw2MDpbMSwyNF19LHsxOlsyLDFdfSx7NTpbMiw0N10sMTQ6WzIsNDddLDE1OlsyLDQ3XSwxOTpbMiw0N10sMjk6WzIsNDddLDM0OlsyLDQ3XSwzOTpbMiw0N10sNDQ6WzIsNDddLDQ3OlsyLDQ3XSw0ODpbMiw0N10sNTE6WzIsNDddLDU1OlsyLDQ3XSw2MDpbMiw0N119LHs1OlsyLDNdLDE0OlsyLDNdLDE1OlsyLDNdLDE5OlsyLDNdLDI5OlsyLDNdLDM0OlsyLDNdLDM5OlsyLDNdLDQ0OlsyLDNdLDQ3OlsyLDNdLDQ4OlsyLDNdLDUxOlsyLDNdLDU1OlsyLDNdLDYwOlsyLDNdfSx7NTpbMiw0XSwxNDpbMiw0XSwxNTpbMiw0XSwxOTpbMiw0XSwyOTpbMiw0XSwzNDpbMiw0XSwzOTpbMiw0XSw0NDpbMiw0XSw0NzpbMiw0XSw0ODpbMiw0XSw1MTpbMiw0XSw1NTpbMiw0XSw2MDpbMiw0XX0sezU6WzIsNV0sMTQ6WzIsNV0sMTU6WzIsNV0sMTk6WzIsNV0sMjk6WzIsNV0sMzQ6WzIsNV0sMzk6WzIsNV0sNDQ6WzIsNV0sNDc6WzIsNV0sNDg6WzIsNV0sNTE6WzIsNV0sNTU6WzIsNV0sNjA6WzIsNV19LHs1OlsyLDZdLDE0OlsyLDZdLDE1OlsyLDZdLDE5OlsyLDZdLDI5OlsyLDZdLDM0OlsyLDZdLDM5OlsyLDZdLDQ0OlsyLDZdLDQ3OlsyLDZdLDQ4OlsyLDZdLDUxOlsyLDZdLDU1OlsyLDZdLDYwOlsyLDZdfSx7NTpbMiw3XSwxNDpbMiw3XSwxNTpbMiw3XSwxOTpbMiw3XSwyOTpbMiw3XSwzNDpbMiw3XSwzOTpbMiw3XSw0NDpbMiw3XSw0NzpbMiw3XSw0ODpbMiw3XSw1MTpbMiw3XSw1NTpbMiw3XSw2MDpbMiw3XX0sezU6WzIsOF0sMTQ6WzIsOF0sMTU6WzIsOF0sMTk6WzIsOF0sMjk6WzIsOF0sMzQ6WzIsOF0sMzk6WzIsOF0sNDQ6WzIsOF0sNDc6WzIsOF0sNDg6WzIsOF0sNTE6WzIsOF0sNTU6WzIsOF0sNjA6WzIsOF19LHs1OlsyLDldLDE0OlsyLDldLDE1OlsyLDldLDE5OlsyLDldLDI5OlsyLDldLDM0OlsyLDldLDM5OlsyLDldLDQ0OlsyLDldLDQ3OlsyLDldLDQ4OlsyLDldLDUxOlsyLDldLDU1OlsyLDldLDYwOlsyLDldfSx7MjA6MjUsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6MzYsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NDozNyw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSwzOTpbMiw0Nl0sNDQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHs0OjM4LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDQ0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7MTM6NDAsMTU6WzEsMjBdLDE3OjM5fSx7MjA6NDIsNTY6NDEsNjQ6NDMsNjU6WzEsNDRdLDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezQ6NDUsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sNDc6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezU6WzIsMTBdLDE0OlsyLDEwXSwxNTpbMiwxMF0sMTg6WzIsMTBdLDE5OlsyLDEwXSwyOTpbMiwxMF0sMzQ6WzIsMTBdLDM5OlsyLDEwXSw0NDpbMiwxMF0sNDc6WzIsMTBdLDQ4OlsyLDEwXSw1MTpbMiwxMF0sNTU6WzIsMTBdLDYwOlsyLDEwXX0sezIwOjQ2LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjQ3LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjQ4LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjQyLDU2OjQ5LDY0OjQzLDY1OlsxLDQ0XSw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHszMzpbMiw3OF0sNDk6NTAsNjU6WzIsNzhdLDcyOlsyLDc4XSw4MDpbMiw3OF0sODE6WzIsNzhdLDgyOlsyLDc4XSw4MzpbMiw3OF0sODQ6WzIsNzhdLDg1OlsyLDc4XX0sezIzOlsyLDMzXSwzMzpbMiwzM10sNTQ6WzIsMzNdLDY1OlsyLDMzXSw2ODpbMiwzM10sNzI6WzIsMzNdLDc1OlsyLDMzXSw4MDpbMiwzM10sODE6WzIsMzNdLDgyOlsyLDMzXSw4MzpbMiwzM10sODQ6WzIsMzNdLDg1OlsyLDMzXX0sezIzOlsyLDM0XSwzMzpbMiwzNF0sNTQ6WzIsMzRdLDY1OlsyLDM0XSw2ODpbMiwzNF0sNzI6WzIsMzRdLDc1OlsyLDM0XSw4MDpbMiwzNF0sODE6WzIsMzRdLDgyOlsyLDM0XSw4MzpbMiwzNF0sODQ6WzIsMzRdLDg1OlsyLDM0XX0sezIzOlsyLDM1XSwzMzpbMiwzNV0sNTQ6WzIsMzVdLDY1OlsyLDM1XSw2ODpbMiwzNV0sNzI6WzIsMzVdLDc1OlsyLDM1XSw4MDpbMiwzNV0sODE6WzIsMzVdLDgyOlsyLDM1XSw4MzpbMiwzNV0sODQ6WzIsMzVdLDg1OlsyLDM1XX0sezIzOlsyLDM2XSwzMzpbMiwzNl0sNTQ6WzIsMzZdLDY1OlsyLDM2XSw2ODpbMiwzNl0sNzI6WzIsMzZdLDc1OlsyLDM2XSw4MDpbMiwzNl0sODE6WzIsMzZdLDgyOlsyLDM2XSw4MzpbMiwzNl0sODQ6WzIsMzZdLDg1OlsyLDM2XX0sezIzOlsyLDM3XSwzMzpbMiwzN10sNTQ6WzIsMzddLDY1OlsyLDM3XSw2ODpbMiwzN10sNzI6WzIsMzddLDc1OlsyLDM3XSw4MDpbMiwzN10sODE6WzIsMzddLDgyOlsyLDM3XSw4MzpbMiwzN10sODQ6WzIsMzddLDg1OlsyLDM3XX0sezIzOlsyLDM4XSwzMzpbMiwzOF0sNTQ6WzIsMzhdLDY1OlsyLDM4XSw2ODpbMiwzOF0sNzI6WzIsMzhdLDc1OlsyLDM4XSw4MDpbMiwzOF0sODE6WzIsMzhdLDgyOlsyLDM4XSw4MzpbMiwzOF0sODQ6WzIsMzhdLDg1OlsyLDM4XX0sezIzOlsyLDM5XSwzMzpbMiwzOV0sNTQ6WzIsMzldLDY1OlsyLDM5XSw2ODpbMiwzOV0sNzI6WzIsMzldLDc1OlsyLDM5XSw4MDpbMiwzOV0sODE6WzIsMzldLDgyOlsyLDM5XSw4MzpbMiwzOV0sODQ6WzIsMzldLDg1OlsyLDM5XX0sezIzOlsyLDQzXSwzMzpbMiw0M10sNTQ6WzIsNDNdLDY1OlsyLDQzXSw2ODpbMiw0M10sNzI6WzIsNDNdLDc1OlsyLDQzXSw4MDpbMiw0M10sODE6WzIsNDNdLDgyOlsyLDQzXSw4MzpbMiw0M10sODQ6WzIsNDNdLDg1OlsyLDQzXSw4NzpbMSw1MV19LHs3MjpbMSwzNV0sODY6NTJ9LHsyMzpbMiw0NV0sMzM6WzIsNDVdLDU0OlsyLDQ1XSw2NTpbMiw0NV0sNjg6WzIsNDVdLDcyOlsyLDQ1XSw3NTpbMiw0NV0sODA6WzIsNDVdLDgxOlsyLDQ1XSw4MjpbMiw0NV0sODM6WzIsNDVdLDg0OlsyLDQ1XSw4NTpbMiw0NV0sODc6WzIsNDVdfSx7NTI6NTMsNTQ6WzIsODJdLDY1OlsyLDgyXSw3MjpbMiw4Ml0sODA6WzIsODJdLDgxOlsyLDgyXSw4MjpbMiw4Ml0sODM6WzIsODJdLDg0OlsyLDgyXSw4NTpbMiw4Ml19LHsyNTo1NCwzODo1NiwzOTpbMSw1OF0sNDM6NTcsNDQ6WzEsNTldLDQ1OjU1LDQ3OlsyLDU0XX0sezI4OjYwLDQzOjYxLDQ0OlsxLDU5XSw0NzpbMiw1Nl19LHsxMzo2MywxNTpbMSwyMF0sMTg6WzEsNjJdfSx7MTU6WzIsNDhdLDE4OlsyLDQ4XX0sezMzOlsyLDg2XSw1Nzo2NCw2NTpbMiw4Nl0sNzI6WzIsODZdLDgwOlsyLDg2XSw4MTpbMiw4Nl0sODI6WzIsODZdLDgzOlsyLDg2XSw4NDpbMiw4Nl0sODU6WzIsODZdfSx7MzM6WzIsNDBdLDY1OlsyLDQwXSw3MjpbMiw0MF0sODA6WzIsNDBdLDgxOlsyLDQwXSw4MjpbMiw0MF0sODM6WzIsNDBdLDg0OlsyLDQwXSw4NTpbMiw0MF19LHszMzpbMiw0MV0sNjU6WzIsNDFdLDcyOlsyLDQxXSw4MDpbMiw0MV0sODE6WzIsNDFdLDgyOlsyLDQxXSw4MzpbMiw0MV0sODQ6WzIsNDFdLDg1OlsyLDQxXX0sezIwOjY1LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezI2OjY2LDQ3OlsxLDY3XX0sezMwOjY4LDMzOlsyLDU4XSw2NTpbMiw1OF0sNzI6WzIsNThdLDc1OlsyLDU4XSw4MDpbMiw1OF0sODE6WzIsNThdLDgyOlsyLDU4XSw4MzpbMiw1OF0sODQ6WzIsNThdLDg1OlsyLDU4XX0sezMzOlsyLDY0XSwzNTo2OSw2NTpbMiw2NF0sNzI6WzIsNjRdLDc1OlsyLDY0XSw4MDpbMiw2NF0sODE6WzIsNjRdLDgyOlsyLDY0XSw4MzpbMiw2NF0sODQ6WzIsNjRdLDg1OlsyLDY0XX0sezIxOjcwLDIzOlsyLDUwXSw2NTpbMiw1MF0sNzI6WzIsNTBdLDgwOlsyLDUwXSw4MTpbMiw1MF0sODI6WzIsNTBdLDgzOlsyLDUwXSw4NDpbMiw1MF0sODU6WzIsNTBdfSx7MzM6WzIsOTBdLDYxOjcxLDY1OlsyLDkwXSw3MjpbMiw5MF0sODA6WzIsOTBdLDgxOlsyLDkwXSw4MjpbMiw5MF0sODM6WzIsOTBdLDg0OlsyLDkwXSw4NTpbMiw5MF19LHsyMDo3NSwzMzpbMiw4MF0sNTA6NzIsNjM6NzMsNjQ6NzYsNjU6WzEsNDRdLDY5Ojc0LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezcyOlsxLDgwXX0sezIzOlsyLDQyXSwzMzpbMiw0Ml0sNTQ6WzIsNDJdLDY1OlsyLDQyXSw2ODpbMiw0Ml0sNzI6WzIsNDJdLDc1OlsyLDQyXSw4MDpbMiw0Ml0sODE6WzIsNDJdLDgyOlsyLDQyXSw4MzpbMiw0Ml0sODQ6WzIsNDJdLDg1OlsyLDQyXSw4NzpbMSw1MV19LHsyMDo3NSw1Mzo4MSw1NDpbMiw4NF0sNjM6ODIsNjQ6NzYsNjU6WzEsNDRdLDY5OjgzLDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezI2Ojg0LDQ3OlsxLDY3XX0sezQ3OlsyLDU1XX0sezQ6ODUsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sMzk6WzIsNDZdLDQ0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7NDc6WzIsMjBdfSx7MjA6ODYsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NDo4Nyw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7MjY6ODgsNDc6WzEsNjddfSx7NDc6WzIsNTddfSx7NTpbMiwxMV0sMTQ6WzIsMTFdLDE1OlsyLDExXSwxOTpbMiwxMV0sMjk6WzIsMTFdLDM0OlsyLDExXSwzOTpbMiwxMV0sNDQ6WzIsMTFdLDQ3OlsyLDExXSw0ODpbMiwxMV0sNTE6WzIsMTFdLDU1OlsyLDExXSw2MDpbMiwxMV19LHsxNTpbMiw0OV0sMTg6WzIsNDldfSx7MjA6NzUsMzM6WzIsODhdLDU4Ojg5LDYzOjkwLDY0Ojc2LDY1OlsxLDQ0XSw2OTo5MSw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs2NTpbMiw5NF0sNjY6OTIsNjg6WzIsOTRdLDcyOlsyLDk0XSw4MDpbMiw5NF0sODE6WzIsOTRdLDgyOlsyLDk0XSw4MzpbMiw5NF0sODQ6WzIsOTRdLDg1OlsyLDk0XX0sezU6WzIsMjVdLDE0OlsyLDI1XSwxNTpbMiwyNV0sMTk6WzIsMjVdLDI5OlsyLDI1XSwzNDpbMiwyNV0sMzk6WzIsMjVdLDQ0OlsyLDI1XSw0NzpbMiwyNV0sNDg6WzIsMjVdLDUxOlsyLDI1XSw1NTpbMiwyNV0sNjA6WzIsMjVdfSx7MjA6OTMsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzUsMzE6OTQsMzM6WzIsNjBdLDYzOjk1LDY0Ojc2LDY1OlsxLDQ0XSw2OTo5Niw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzU6WzIsNjBdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzUsMzM6WzIsNjZdLDM2Ojk3LDYzOjk4LDY0Ojc2LDY1OlsxLDQ0XSw2OTo5OSw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzU6WzIsNjZdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzUsMjI6MTAwLDIzOlsyLDUyXSw2MzoxMDEsNjQ6NzYsNjU6WzEsNDRdLDY5OjEwMiw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo3NSwzMzpbMiw5Ml0sNjI6MTAzLDYzOjEwNCw2NDo3Niw2NTpbMSw0NF0sNjk6MTA1LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezMzOlsxLDEwNl19LHszMzpbMiw3OV0sNjU6WzIsNzldLDcyOlsyLDc5XSw4MDpbMiw3OV0sODE6WzIsNzldLDgyOlsyLDc5XSw4MzpbMiw3OV0sODQ6WzIsNzldLDg1OlsyLDc5XX0sezMzOlsyLDgxXX0sezIzOlsyLDI3XSwzMzpbMiwyN10sNTQ6WzIsMjddLDY1OlsyLDI3XSw2ODpbMiwyN10sNzI6WzIsMjddLDc1OlsyLDI3XSw4MDpbMiwyN10sODE6WzIsMjddLDgyOlsyLDI3XSw4MzpbMiwyN10sODQ6WzIsMjddLDg1OlsyLDI3XX0sezIzOlsyLDI4XSwzMzpbMiwyOF0sNTQ6WzIsMjhdLDY1OlsyLDI4XSw2ODpbMiwyOF0sNzI6WzIsMjhdLDc1OlsyLDI4XSw4MDpbMiwyOF0sODE6WzIsMjhdLDgyOlsyLDI4XSw4MzpbMiwyOF0sODQ6WzIsMjhdLDg1OlsyLDI4XX0sezIzOlsyLDMwXSwzMzpbMiwzMF0sNTQ6WzIsMzBdLDY4OlsyLDMwXSw3MToxMDcsNzI6WzEsMTA4XSw3NTpbMiwzMF19LHsyMzpbMiw5OF0sMzM6WzIsOThdLDU0OlsyLDk4XSw2ODpbMiw5OF0sNzI6WzIsOThdLDc1OlsyLDk4XX0sezIzOlsyLDQ1XSwzMzpbMiw0NV0sNTQ6WzIsNDVdLDY1OlsyLDQ1XSw2ODpbMiw0NV0sNzI6WzIsNDVdLDczOlsxLDEwOV0sNzU6WzIsNDVdLDgwOlsyLDQ1XSw4MTpbMiw0NV0sODI6WzIsNDVdLDgzOlsyLDQ1XSw4NDpbMiw0NV0sODU6WzIsNDVdLDg3OlsyLDQ1XX0sezIzOlsyLDQ0XSwzMzpbMiw0NF0sNTQ6WzIsNDRdLDY1OlsyLDQ0XSw2ODpbMiw0NF0sNzI6WzIsNDRdLDc1OlsyLDQ0XSw4MDpbMiw0NF0sODE6WzIsNDRdLDgyOlsyLDQ0XSw4MzpbMiw0NF0sODQ6WzIsNDRdLDg1OlsyLDQ0XSw4NzpbMiw0NF19LHs1NDpbMSwxMTBdfSx7NTQ6WzIsODNdLDY1OlsyLDgzXSw3MjpbMiw4M10sODA6WzIsODNdLDgxOlsyLDgzXSw4MjpbMiw4M10sODM6WzIsODNdLDg0OlsyLDgzXSw4NTpbMiw4M119LHs1NDpbMiw4NV19LHs1OlsyLDEzXSwxNDpbMiwxM10sMTU6WzIsMTNdLDE5OlsyLDEzXSwyOTpbMiwxM10sMzQ6WzIsMTNdLDM5OlsyLDEzXSw0NDpbMiwxM10sNDc6WzIsMTNdLDQ4OlsyLDEzXSw1MTpbMiwxM10sNTU6WzIsMTNdLDYwOlsyLDEzXX0sezM4OjU2LDM5OlsxLDU4XSw0Mzo1Nyw0NDpbMSw1OV0sNDU6MTEyLDQ2OjExMSw0NzpbMiw3Nl19LHszMzpbMiw3MF0sNDA6MTEzLDY1OlsyLDcwXSw3MjpbMiw3MF0sNzU6WzIsNzBdLDgwOlsyLDcwXSw4MTpbMiw3MF0sODI6WzIsNzBdLDgzOlsyLDcwXSw4NDpbMiw3MF0sODU6WzIsNzBdfSx7NDc6WzIsMThdfSx7NTpbMiwxNF0sMTQ6WzIsMTRdLDE1OlsyLDE0XSwxOTpbMiwxNF0sMjk6WzIsMTRdLDM0OlsyLDE0XSwzOTpbMiwxNF0sNDQ6WzIsMTRdLDQ3OlsyLDE0XSw0ODpbMiwxNF0sNTE6WzIsMTRdLDU1OlsyLDE0XSw2MDpbMiwxNF19LHszMzpbMSwxMTRdfSx7MzM6WzIsODddLDY1OlsyLDg3XSw3MjpbMiw4N10sODA6WzIsODddLDgxOlsyLDg3XSw4MjpbMiw4N10sODM6WzIsODddLDg0OlsyLDg3XSw4NTpbMiw4N119LHszMzpbMiw4OV19LHsyMDo3NSw2MzoxMTYsNjQ6NzYsNjU6WzEsNDRdLDY3OjExNSw2ODpbMiw5Nl0sNjk6MTE3LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezMzOlsxLDExOF19LHszMjoxMTksMzM6WzIsNjJdLDc0OjEyMCw3NTpbMSwxMjFdfSx7MzM6WzIsNTldLDY1OlsyLDU5XSw3MjpbMiw1OV0sNzU6WzIsNTldLDgwOlsyLDU5XSw4MTpbMiw1OV0sODI6WzIsNTldLDgzOlsyLDU5XSw4NDpbMiw1OV0sODU6WzIsNTldfSx7MzM6WzIsNjFdLDc1OlsyLDYxXX0sezMzOlsyLDY4XSwzNzoxMjIsNzQ6MTIzLDc1OlsxLDEyMV19LHszMzpbMiw2NV0sNjU6WzIsNjVdLDcyOlsyLDY1XSw3NTpbMiw2NV0sODA6WzIsNjVdLDgxOlsyLDY1XSw4MjpbMiw2NV0sODM6WzIsNjVdLDg0OlsyLDY1XSw4NTpbMiw2NV19LHszMzpbMiw2N10sNzU6WzIsNjddfSx7MjM6WzEsMTI0XX0sezIzOlsyLDUxXSw2NTpbMiw1MV0sNzI6WzIsNTFdLDgwOlsyLDUxXSw4MTpbMiw1MV0sODI6WzIsNTFdLDgzOlsyLDUxXSw4NDpbMiw1MV0sODU6WzIsNTFdfSx7MjM6WzIsNTNdfSx7MzM6WzEsMTI1XX0sezMzOlsyLDkxXSw2NTpbMiw5MV0sNzI6WzIsOTFdLDgwOlsyLDkxXSw4MTpbMiw5MV0sODI6WzIsOTFdLDgzOlsyLDkxXSw4NDpbMiw5MV0sODU6WzIsOTFdfSx7MzM6WzIsOTNdfSx7NTpbMiwyMl0sMTQ6WzIsMjJdLDE1OlsyLDIyXSwxOTpbMiwyMl0sMjk6WzIsMjJdLDM0OlsyLDIyXSwzOTpbMiwyMl0sNDQ6WzIsMjJdLDQ3OlsyLDIyXSw0ODpbMiwyMl0sNTE6WzIsMjJdLDU1OlsyLDIyXSw2MDpbMiwyMl19LHsyMzpbMiw5OV0sMzM6WzIsOTldLDU0OlsyLDk5XSw2ODpbMiw5OV0sNzI6WzIsOTldLDc1OlsyLDk5XX0sezczOlsxLDEwOV19LHsyMDo3NSw2MzoxMjYsNjQ6NzYsNjU6WzEsNDRdLDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezU6WzIsMjNdLDE0OlsyLDIzXSwxNTpbMiwyM10sMTk6WzIsMjNdLDI5OlsyLDIzXSwzNDpbMiwyM10sMzk6WzIsMjNdLDQ0OlsyLDIzXSw0NzpbMiwyM10sNDg6WzIsMjNdLDUxOlsyLDIzXSw1NTpbMiwyM10sNjA6WzIsMjNdfSx7NDc6WzIsMTldfSx7NDc6WzIsNzddfSx7MjA6NzUsMzM6WzIsNzJdLDQxOjEyNyw2MzoxMjgsNjQ6NzYsNjU6WzEsNDRdLDY5OjEyOSw3MDo3Nyw3MTo3OCw3MjpbMSw3OV0sNzU6WzIsNzJdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NTpbMiwyNF0sMTQ6WzIsMjRdLDE1OlsyLDI0XSwxOTpbMiwyNF0sMjk6WzIsMjRdLDM0OlsyLDI0XSwzOTpbMiwyNF0sNDQ6WzIsMjRdLDQ3OlsyLDI0XSw0ODpbMiwyNF0sNTE6WzIsMjRdLDU1OlsyLDI0XSw2MDpbMiwyNF19LHs2ODpbMSwxMzBdfSx7NjU6WzIsOTVdLDY4OlsyLDk1XSw3MjpbMiw5NV0sODA6WzIsOTVdLDgxOlsyLDk1XSw4MjpbMiw5NV0sODM6WzIsOTVdLDg0OlsyLDk1XSw4NTpbMiw5NV19LHs2ODpbMiw5N119LHs1OlsyLDIxXSwxNDpbMiwyMV0sMTU6WzIsMjFdLDE5OlsyLDIxXSwyOTpbMiwyMV0sMzQ6WzIsMjFdLDM5OlsyLDIxXSw0NDpbMiwyMV0sNDc6WzIsMjFdLDQ4OlsyLDIxXSw1MTpbMiwyMV0sNTU6WzIsMjFdLDYwOlsyLDIxXX0sezMzOlsxLDEzMV19LHszMzpbMiw2M119LHs3MjpbMSwxMzNdLDc2OjEzMn0sezMzOlsxLDEzNF19LHszMzpbMiw2OV19LHsxNTpbMiwxMl19LHsxNDpbMiwyNl0sMTU6WzIsMjZdLDE5OlsyLDI2XSwyOTpbMiwyNl0sMzQ6WzIsMjZdLDQ3OlsyLDI2XSw0ODpbMiwyNl0sNTE6WzIsMjZdLDU1OlsyLDI2XSw2MDpbMiwyNl19LHsyMzpbMiwzMV0sMzM6WzIsMzFdLDU0OlsyLDMxXSw2ODpbMiwzMV0sNzI6WzIsMzFdLDc1OlsyLDMxXX0sezMzOlsyLDc0XSw0MjoxMzUsNzQ6MTM2LDc1OlsxLDEyMV19LHszMzpbMiw3MV0sNjU6WzIsNzFdLDcyOlsyLDcxXSw3NTpbMiw3MV0sODA6WzIsNzFdLDgxOlsyLDcxXSw4MjpbMiw3MV0sODM6WzIsNzFdLDg0OlsyLDcxXSw4NTpbMiw3MV19LHszMzpbMiw3M10sNzU6WzIsNzNdfSx7MjM6WzIsMjldLDMzOlsyLDI5XSw1NDpbMiwyOV0sNjU6WzIsMjldLDY4OlsyLDI5XSw3MjpbMiwyOV0sNzU6WzIsMjldLDgwOlsyLDI5XSw4MTpbMiwyOV0sODI6WzIsMjldLDgzOlsyLDI5XSw4NDpbMiwyOV0sODU6WzIsMjldfSx7MTQ6WzIsMTVdLDE1OlsyLDE1XSwxOTpbMiwxNV0sMjk6WzIsMTVdLDM0OlsyLDE1XSwzOTpbMiwxNV0sNDQ6WzIsMTVdLDQ3OlsyLDE1XSw0ODpbMiwxNV0sNTE6WzIsMTVdLDU1OlsyLDE1XSw2MDpbMiwxNV19LHs3MjpbMSwxMzhdLDc3OlsxLDEzN119LHs3MjpbMiwxMDBdLDc3OlsyLDEwMF19LHsxNDpbMiwxNl0sMTU6WzIsMTZdLDE5OlsyLDE2XSwyOTpbMiwxNl0sMzQ6WzIsMTZdLDQ0OlsyLDE2XSw0NzpbMiwxNl0sNDg6WzIsMTZdLDUxOlsyLDE2XSw1NTpbMiwxNl0sNjA6WzIsMTZdfSx7MzM6WzEsMTM5XX0sezMzOlsyLDc1XX0sezMzOlsyLDMyXX0sezcyOlsyLDEwMV0sNzc6WzIsMTAxXX0sezE0OlsyLDE3XSwxNTpbMiwxN10sMTk6WzIsMTddLDI5OlsyLDE3XSwzNDpbMiwxN10sMzk6WzIsMTddLDQ0OlsyLDE3XSw0NzpbMiwxN10sNDg6WzIsMTddLDUxOlsyLDE3XSw1NTpbMiwxN10sNjA6WzIsMTddfV0sXG5kZWZhdWx0QWN0aW9uczogezQ6WzIsMV0sNTU6WzIsNTVdLDU3OlsyLDIwXSw2MTpbMiw1N10sNzQ6WzIsODFdLDgzOlsyLDg1XSw4NzpbMiwxOF0sOTE6WzIsODldLDEwMjpbMiw1M10sMTA1OlsyLDkzXSwxMTE6WzIsMTldLDExMjpbMiw3N10sMTE3OlsyLDk3XSwxMjA6WzIsNjNdLDEyMzpbMiw2OV0sMTI0OlsyLDEyXSwxMzY6WzIsNzVdLDEzNzpbMiwzMl19LFxucGFyc2VFcnJvcjogZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbn0sXG5wYXJzZTogZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsIHN0YWNrID0gWzBdLCB2c3RhY2sgPSBbbnVsbF0sIGxzdGFjayA9IFtdLCB0YWJsZSA9IHRoaXMudGFibGUsIHl5dGV4dCA9IFwiXCIsIHl5bGluZW5vID0gMCwgeXlsZW5nID0gMCwgcmVjb3ZlcmluZyA9IDAsIFRFUlJPUiA9IDIsIEVPRiA9IDE7XG4gICAgdGhpcy5sZXhlci5zZXRJbnB1dChpbnB1dCk7XG4gICAgdGhpcy5sZXhlci55eSA9IHRoaXMueXk7XG4gICAgdGhpcy55eS5sZXhlciA9IHRoaXMubGV4ZXI7XG4gICAgdGhpcy55eS5wYXJzZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGhpcy5sZXhlci55eWxsb2MgPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgdGhpcy5sZXhlci55eWxsb2MgPSB7fTtcbiAgICB2YXIgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYztcbiAgICBsc3RhY2sucHVzaCh5eWxvYyk7XG4gICAgdmFyIHJhbmdlcyA9IHRoaXMubGV4ZXIub3B0aW9ucyAmJiB0aGlzLmxleGVyLm9wdGlvbnMucmFuZ2VzO1xuICAgIGlmICh0eXBlb2YgdGhpcy55eS5wYXJzZUVycm9yID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRoaXMueXkucGFyc2VFcnJvcjtcbiAgICBmdW5jdGlvbiBwb3BTdGFjayhuKSB7XG4gICAgICAgIHN0YWNrLmxlbmd0aCA9IHN0YWNrLmxlbmd0aCAtIDIgKiBuO1xuICAgICAgICB2c3RhY2subGVuZ3RoID0gdnN0YWNrLmxlbmd0aCAtIG47XG4gICAgICAgIGxzdGFjay5sZW5ndGggPSBsc3RhY2subGVuZ3RoIC0gbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGV4KCkge1xuICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgIHRva2VuID0gc2VsZi5sZXhlci5sZXgoKSB8fCAxO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHNlbGYuc3ltYm9sc19bdG9rZW5dIHx8IHRva2VuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgdmFyIHN5bWJvbCwgcHJlRXJyb3JTeW1ib2wsIHN0YXRlLCBhY3Rpb24sIGEsIHIsIHl5dmFsID0ge30sIHAsIGxlbiwgbmV3U3RhdGUsIGV4cGVjdGVkO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXSkge1xuICAgICAgICAgICAgYWN0aW9uID0gdGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3ltYm9sID09PSBudWxsIHx8IHR5cGVvZiBzeW1ib2wgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHN5bWJvbCA9IGxleCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aW9uID0gdGFibGVbc3RhdGVdICYmIHRhYmxlW3N0YXRlXVtzeW1ib2xdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSBcInVuZGVmaW5lZFwiIHx8ICFhY3Rpb24ubGVuZ3RoIHx8ICFhY3Rpb25bMF0pIHtcbiAgICAgICAgICAgIHZhciBlcnJTdHIgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKCFyZWNvdmVyaW5nKSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHAgaW4gdGFibGVbc3RhdGVdKVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXJtaW5hbHNfW3BdICYmIHAgPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZC5wdXNoKFwiJ1wiICsgdGhpcy50ZXJtaW5hbHNfW3BdICsgXCInXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyclN0ciA9IFwiUGFyc2UgZXJyb3Igb24gbGluZSBcIiArICh5eWxpbmVubyArIDEpICsgXCI6XFxuXCIgKyB0aGlzLmxleGVyLnNob3dQb3NpdGlvbigpICsgXCJcXG5FeHBlY3RpbmcgXCIgKyBleHBlY3RlZC5qb2luKFwiLCBcIikgKyBcIiwgZ290ICdcIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgXCInXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjogVW5leHBlY3RlZCBcIiArIChzeW1ib2wgPT0gMT9cImVuZCBvZiBpbnB1dFwiOlwiJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFcnJvcihlcnJTdHIsIHt0ZXh0OiB0aGlzLmxleGVyLm1hdGNoLCB0b2tlbjogdGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sLCBsaW5lOiB0aGlzLmxleGVyLnl5bGluZW5vLCBsb2M6IHl5bG9jLCBleHBlY3RlZDogZXhwZWN0ZWR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uWzBdIGluc3RhbmNlb2YgQXJyYXkgJiYgYWN0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlIEVycm9yOiBtdWx0aXBsZSBhY3Rpb25zIHBvc3NpYmxlIGF0IHN0YXRlOiBcIiArIHN0YXRlICsgXCIsIHRva2VuOiBcIiArIHN5bWJvbCk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChhY3Rpb25bMF0pIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgc3RhY2sucHVzaChzeW1ib2wpO1xuICAgICAgICAgICAgdnN0YWNrLnB1c2godGhpcy5sZXhlci55eXRleHQpO1xuICAgICAgICAgICAgbHN0YWNrLnB1c2godGhpcy5sZXhlci55eWxsb2MpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChhY3Rpb25bMV0pO1xuICAgICAgICAgICAgc3ltYm9sID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghcHJlRXJyb3JTeW1ib2wpIHtcbiAgICAgICAgICAgICAgICB5eWxlbmcgPSB0aGlzLmxleGVyLnl5bGVuZztcbiAgICAgICAgICAgICAgICB5eXRleHQgPSB0aGlzLmxleGVyLnl5dGV4dDtcbiAgICAgICAgICAgICAgICB5eWxpbmVubyA9IHRoaXMubGV4ZXIueXlsaW5lbm87XG4gICAgICAgICAgICAgICAgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYztcbiAgICAgICAgICAgICAgICBpZiAocmVjb3ZlcmluZyA+IDApXG4gICAgICAgICAgICAgICAgICAgIHJlY292ZXJpbmctLTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gcHJlRXJyb3JTeW1ib2w7XG4gICAgICAgICAgICAgICAgcHJlRXJyb3JTeW1ib2wgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGxlbiA9IHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMV07XG4gICAgICAgICAgICB5eXZhbC4kID0gdnN0YWNrW3ZzdGFjay5sZW5ndGggLSBsZW5dO1xuICAgICAgICAgICAgeXl2YWwuXyQgPSB7Zmlyc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9saW5lLCBsYXN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9saW5lLCBmaXJzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfY29sdW1uLCBsYXN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2NvbHVtbn07XG4gICAgICAgICAgICBpZiAocmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgeXl2YWwuXyQucmFuZ2UgPSBbbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5yYW5nZVswXSwgbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5yYW5nZVsxXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoeXl2YWwsIHl5dGV4dCwgeXlsZW5nLCB5eWxpbmVubywgdGhpcy55eSwgYWN0aW9uWzFdLCB2c3RhY2ssIGxzdGFjayk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIC0xICogbGVuICogMik7XG4gICAgICAgICAgICAgICAgdnN0YWNrID0gdnN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcbiAgICAgICAgICAgICAgICBsc3RhY2sgPSBsc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2sucHVzaCh0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzBdKTtcbiAgICAgICAgICAgIHZzdGFjay5wdXNoKHl5dmFsLiQpO1xuICAgICAgICAgICAgbHN0YWNrLnB1c2goeXl2YWwuXyQpO1xuICAgICAgICAgICAgbmV3U3RhdGUgPSB0YWJsZVtzdGFja1tzdGFjay5sZW5ndGggLSAyXV1bc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1dO1xuICAgICAgICAgICAgc3RhY2sucHVzaChuZXdTdGF0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG59O1xuLyogSmlzb24gZ2VuZXJhdGVkIGxleGVyICovXG52YXIgbGV4ZXIgPSAoZnVuY3Rpb24oKXtcbnZhciBsZXhlciA9ICh7RU9GOjEsXG5wYXJzZUVycm9yOmZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgICAgIGlmICh0aGlzLnl5LnBhcnNlcikge1xuICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIucGFyc2VFcnJvcihzdHIsIGhhc2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG4gICAgICAgIH1cbiAgICB9LFxuc2V0SW5wdXQ6ZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0aGlzLl9sZXNzID0gdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIHRoaXMueXlsaW5lbm8gPSB0aGlzLnl5bGVuZyA9IDA7XG4gICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaCA9ICcnO1xuICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrID0gWydJTklUSUFMJ107XG4gICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6MSxmaXJzdF9jb2x1bW46MCxsYXN0X2xpbmU6MSxsYXN0X2NvbHVtbjowfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlID0gWzAsMF07XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbmlucHV0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNoID0gdGhpcy5faW5wdXRbMF07XG4gICAgICAgIHRoaXMueXl0ZXh0ICs9IGNoO1xuICAgICAgICB0aGlzLnl5bGVuZysrO1xuICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICB0aGlzLm1hdGNoICs9IGNoO1xuICAgICAgICB0aGlzLm1hdGNoZWQgKz0gY2g7XG4gICAgICAgIHZhciBsaW5lcyA9IGNoLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcbiAgICAgICAgaWYgKGxpbmVzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGluZW5vKys7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2xpbmUrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlWzFdKys7XG5cbiAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG51bnB1dDpmdW5jdGlvbiAoY2gpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNoLmxlbmd0aDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IGNoICsgdGhpcy5faW5wdXQ7XG4gICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy55eXRleHQuc3Vic3RyKDAsIHRoaXMueXl0ZXh0Lmxlbmd0aC1sZW4tMSk7XG4gICAgICAgIC8vdGhpcy55eWxlbmcgLT0gbGVuO1xuICAgICAgICB0aGlzLm9mZnNldCAtPSBsZW47XG4gICAgICAgIHZhciBvbGRMaW5lcyA9IHRoaXMubWF0Y2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcbiAgICAgICAgdGhpcy5tYXRjaCA9IHRoaXMubWF0Y2guc3Vic3RyKDAsIHRoaXMubWF0Y2gubGVuZ3RoLTEpO1xuICAgICAgICB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoZWQuc3Vic3RyKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGgtMSk7XG5cbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aC0xKSB0aGlzLnl5bGluZW5vIC09IGxpbmVzLmxlbmd0aC0xO1xuICAgICAgICB2YXIgciA9IHRoaXMueXlsbG9jLnJhbmdlO1xuXG4gICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmZpcnN0X2xpbmUsXG4gICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vKzEsXG4gICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4sXG4gICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID9cbiAgICAgICAgICAgICAgKGxpbmVzLmxlbmd0aCA9PT0gb2xkTGluZXMubGVuZ3RoID8gdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIDogMCkgKyBvbGRMaW5lc1tvbGRMaW5lcy5sZW5ndGggLSBsaW5lcy5sZW5ndGhdLmxlbmd0aCAtIGxpbmVzWzBdLmxlbmd0aDpcbiAgICAgICAgICAgICAgdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIC0gbGVuXG4gICAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbclswXSwgclswXSArIHRoaXMueXlsZW5nIC0gbGVuXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxubW9yZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxubGVzczpmdW5jdGlvbiAobikge1xuICAgICAgICB0aGlzLnVucHV0KHRoaXMubWF0Y2guc2xpY2UobikpO1xuICAgIH0sXG5wYXN0SW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFzdCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIHRoaXMubWF0Y2gubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIChwYXN0Lmxlbmd0aCA+IDIwID8gJy4uLic6JycpICsgcGFzdC5zdWJzdHIoLTIwKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcbnVwY29taW5nSW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV4dCA9IHRoaXMubWF0Y2g7XG4gICAgICAgIGlmIChuZXh0Lmxlbmd0aCA8IDIwKSB7XG4gICAgICAgICAgICBuZXh0ICs9IHRoaXMuX2lucHV0LnN1YnN0cigwLCAyMC1uZXh0Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChuZXh0LnN1YnN0cigwLDIwKSsobmV4dC5sZW5ndGggPiAyMCA/ICcuLi4nOicnKSkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgIH0sXG5zaG93UG9zaXRpb246ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJlID0gdGhpcy5wYXN0SW5wdXQoKTtcbiAgICAgICAgdmFyIGMgPSBuZXcgQXJyYXkocHJlLmxlbmd0aCArIDEpLmpvaW4oXCItXCIpO1xuICAgICAgICByZXR1cm4gcHJlICsgdGhpcy51cGNvbWluZ0lucHV0KCkgKyBcIlxcblwiICsgYytcIl5cIjtcbiAgICB9LFxubmV4dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lucHV0KSB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICAgIHZhciB0b2tlbixcbiAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgdGVtcE1hdGNoLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICBsaW5lcztcbiAgICAgICAgaWYgKCF0aGlzLl9tb3JlKSB7XG4gICAgICAgICAgICB0aGlzLnl5dGV4dCA9ICcnO1xuICAgICAgICAgICAgdGhpcy5tYXRjaCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpO1xuICAgICAgICBmb3IgKHZhciBpPTA7aSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0ZW1wTWF0Y2ggPSB0aGlzLl9pbnB1dC5tYXRjaCh0aGlzLnJ1bGVzW3J1bGVzW2ldXSk7XG4gICAgICAgICAgICBpZiAodGVtcE1hdGNoICYmICghbWF0Y2ggfHwgdGVtcE1hdGNoWzBdLmxlbmd0aCA+IG1hdGNoWzBdLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRlbXBNYXRjaDtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZmxleCkgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBsaW5lcyA9IG1hdGNoWzBdLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcbiAgICAgICAgICAgIGlmIChsaW5lcykgdGhpcy55eWxpbmVubyArPSBsaW5lcy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHtmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5sYXN0X2xpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8rMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyBsaW5lc1tsaW5lcy5sZW5ndGgtMV0ubGVuZ3RoLWxpbmVzW2xpbmVzLmxlbmd0aC0xXS5tYXRjaCgvXFxyP1xcbj8vKVswXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aH07XG4gICAgICAgICAgICB0aGlzLnl5dGV4dCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHRoaXMubWF0Y2ggKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBtYXRjaDtcbiAgICAgICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFt0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKz0gdGhpcy55eWxlbmddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbW9yZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZShtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5tYXRjaGVkICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdG9rZW4gPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh0aGlzLCB0aGlzLnl5LCB0aGlzLCBydWxlc1tpbmRleF0sdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0xXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5kb25lICYmIHRoaXMuX2lucHV0KSB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0b2tlbikgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgZWxzZSByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKCdMZXhpY2FsIGVycm9yIG9uIGxpbmUgJysodGhpcy55eWxpbmVubysxKSsnLiBVbnJlY29nbml6ZWQgdGV4dC5cXG4nK3RoaXMuc2hvd1Bvc2l0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIHt0ZXh0OiBcIlwiLCB0b2tlbjogbnVsbCwgbGluZTogdGhpcy55eWxpbmVub30pO1xuICAgICAgICB9XG4gICAgfSxcbmxleDpmdW5jdGlvbiBsZXgoKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XG4gICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4KCk7XG4gICAgICAgIH1cbiAgICB9LFxuYmVnaW46ZnVuY3Rpb24gYmVnaW4oY29uZGl0aW9uKSB7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sucHVzaChjb25kaXRpb24pO1xuICAgIH0sXG5wb3BTdGF0ZTpmdW5jdGlvbiBwb3BTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7XG4gICAgfSxcbl9jdXJyZW50UnVsZXM6ZnVuY3Rpb24gX2N1cnJlbnRSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1t0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTFdXS5ydWxlcztcbiAgICB9LFxudG9wU3RhdGU6ZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0yXTtcbiAgICB9LFxucHVzaFN0YXRlOmZ1bmN0aW9uIGJlZ2luKGNvbmRpdGlvbikge1xuICAgICAgICB0aGlzLmJlZ2luKGNvbmRpdGlvbik7XG4gICAgfX0pO1xubGV4ZXIub3B0aW9ucyA9IHt9O1xubGV4ZXIucGVyZm9ybUFjdGlvbiA9IGZ1bmN0aW9uIGFub255bW91cyh5eSx5eV8sJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucyxZWV9TVEFSVFxuLyoqLykge1xuXG5cbmZ1bmN0aW9uIHN0cmlwKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnN1YnN0cihzdGFydCwgeXlfLnl5bGVuZy1lbmQpO1xufVxuXG5cbnZhciBZWVNUQVRFPVlZX1NUQVJUXG5zd2l0Y2goJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucykge1xuY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih5eV8ueXl0ZXh0LnNsaWNlKC0yKSA9PT0gXCJcXFxcXFxcXFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoMCwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwibXVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZih5eV8ueXl0ZXh0LnNsaWNlKC0xKSA9PT0gXCJcXFxcXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcCgwLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJlbXVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcIm11XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHl5Xy55eXRleHQpIHJldHVybiAxNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuYnJlYWs7XG5jYXNlIDE6cmV0dXJuIDE1O1xuYnJlYWs7XG5jYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgMzp0aGlzLmJlZ2luKCdyYXcnKTsgcmV0dXJuIDE1O1xuYnJlYWs7XG5jYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3VsZCBiZSB1c2luZyBgdGhpcy50b3BTdGF0ZSgpYCBiZWxvdywgYnV0IGl0IGN1cnJlbnRseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybnMgdGhlIHNlY29uZCB0b3AgaW5zdGVhZCBvZiB0aGUgZmlyc3QgdG9wLiBPcGVuZWQgYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpc3N1ZSBhYm91dCBpdCBhdCBodHRwczovL2dpdGh1Yi5jb20vemFhY2gvamlzb24vaXNzdWVzLzI5MVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTFdID09PSAncmF3Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eV8ueXl0ZXh0ID0geXlfLnl5dGV4dC5zdWJzdHIoNSwgeXlfLnl5bGVuZy05KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnRU5EX1JBV19CTE9DSyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgNTogcmV0dXJuIDE1OyBcbmJyZWFrO1xuY2FzZSA2OlxuICB0aGlzLnBvcFN0YXRlKCk7XG4gIHJldHVybiAxNDtcblxuYnJlYWs7XG5jYXNlIDc6cmV0dXJuIDY1O1xuYnJlYWs7XG5jYXNlIDg6cmV0dXJuIDY4O1xuYnJlYWs7XG5jYXNlIDk6IHJldHVybiAxOTsgXG5icmVhaztcbmNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oJ3JhdycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuYnJlYWs7XG5jYXNlIDExOnJldHVybiA1NTtcbmJyZWFrO1xuY2FzZSAxMjpyZXR1cm4gNjA7XG5icmVhaztcbmNhc2UgMTM6cmV0dXJuIDI5O1xuYnJlYWs7XG5jYXNlIDE0OnJldHVybiA0NztcbmJyZWFrO1xuY2FzZSAxNTp0aGlzLnBvcFN0YXRlKCk7IHJldHVybiA0NDtcbmJyZWFrO1xuY2FzZSAxNjp0aGlzLnBvcFN0YXRlKCk7IHJldHVybiA0NDtcbmJyZWFrO1xuY2FzZSAxNzpyZXR1cm4gMzQ7XG5icmVhaztcbmNhc2UgMTg6cmV0dXJuIDM5O1xuYnJlYWs7XG5jYXNlIDE5OnJldHVybiA1MTtcbmJyZWFrO1xuY2FzZSAyMDpyZXR1cm4gNDg7XG5icmVhaztcbmNhc2UgMjE6XG4gIHRoaXMudW5wdXQoeXlfLnl5dGV4dCk7XG4gIHRoaXMucG9wU3RhdGUoKTtcbiAgdGhpcy5iZWdpbignY29tJyk7XG5cbmJyZWFrO1xuY2FzZSAyMjpcbiAgdGhpcy5wb3BTdGF0ZSgpO1xuICByZXR1cm4gMTQ7XG5cbmJyZWFrO1xuY2FzZSAyMzpyZXR1cm4gNDg7XG5icmVhaztcbmNhc2UgMjQ6cmV0dXJuIDczO1xuYnJlYWs7XG5jYXNlIDI1OnJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSAyNjpyZXR1cm4gNzI7XG5icmVhaztcbmNhc2UgMjc6cmV0dXJuIDg3O1xuYnJlYWs7XG5jYXNlIDI4Oi8vIGlnbm9yZSB3aGl0ZXNwYWNlXG5icmVhaztcbmNhc2UgMjk6dGhpcy5wb3BTdGF0ZSgpOyByZXR1cm4gNTQ7XG5icmVhaztcbmNhc2UgMzA6dGhpcy5wb3BTdGF0ZSgpOyByZXR1cm4gMzM7XG5icmVhaztcbmNhc2UgMzE6eXlfLnl5dGV4dCA9IHN0cmlwKDEsMikucmVwbGFjZSgvXFxcXFwiL2csJ1wiJyk7IHJldHVybiA4MDtcbmJyZWFrO1xuY2FzZSAzMjp5eV8ueXl0ZXh0ID0gc3RyaXAoMSwyKS5yZXBsYWNlKC9cXFxcJy9nLFwiJ1wiKTsgcmV0dXJuIDgwO1xuYnJlYWs7XG5jYXNlIDMzOnJldHVybiA4NTtcbmJyZWFrO1xuY2FzZSAzNDpyZXR1cm4gODI7XG5icmVhaztcbmNhc2UgMzU6cmV0dXJuIDgyO1xuYnJlYWs7XG5jYXNlIDM2OnJldHVybiA4MztcbmJyZWFrO1xuY2FzZSAzNzpyZXR1cm4gODQ7XG5icmVhaztcbmNhc2UgMzg6cmV0dXJuIDgxO1xuYnJlYWs7XG5jYXNlIDM5OnJldHVybiA3NTtcbmJyZWFrO1xuY2FzZSA0MDpyZXR1cm4gNzc7XG5icmVhaztcbmNhc2UgNDE6cmV0dXJuIDcyO1xuYnJlYWs7XG5jYXNlIDQyOnl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnJlcGxhY2UoL1xcXFwoW1xcXFxcXF1dKS9nLCckMScpOyByZXR1cm4gNzI7XG5icmVhaztcbmNhc2UgNDM6cmV0dXJuICdJTlZBTElEJztcbmJyZWFrO1xuY2FzZSA0NDpyZXR1cm4gNTtcbmJyZWFrO1xufVxufTtcbmxleGVyLnJ1bGVzID0gWy9eKD86W15cXHgwMF0qPyg/PShcXHtcXHspKSkvLC9eKD86W15cXHgwMF0rKS8sL14oPzpbXlxceDAwXXsyLH0/KD89KFxce1xce3xcXFxcXFx7XFx7fFxcXFxcXFxcXFx7XFx7fCQpKSkvLC9eKD86XFx7XFx7XFx7XFx7KD89W15cXC9dKSkvLC9eKD86XFx7XFx7XFx7XFx7XFwvW15cXHMhXCIjJS0sXFwuXFwvOy0+QFxcWy1cXF5gXFx7LX5dKyg/PVs9fVxcc1xcLy5dKVxcfVxcfVxcfVxcfSkvLC9eKD86W15cXHgwMF0qPyg/PShcXHtcXHtcXHtcXHspKSkvLC9eKD86W1xcc1xcU10qPy0tKH4pP1xcfVxcfSkvLC9eKD86XFwoKS8sL14oPzpcXCkpLywvXig/Olxce1xce1xce1xceykvLC9eKD86XFx9XFx9XFx9XFx9KS8sL14oPzpcXHtcXHsofik/PikvLC9eKD86XFx7XFx7KH4pPyM+KS8sL14oPzpcXHtcXHsofik/I1xcKj8pLywvXig/Olxce1xceyh+KT9cXC8pLywvXig/Olxce1xceyh+KT9cXF5cXHMqKH4pP1xcfVxcfSkvLC9eKD86XFx7XFx7KH4pP1xccyplbHNlXFxzKih+KT9cXH1cXH0pLywvXig/Olxce1xceyh+KT9cXF4pLywvXig/Olxce1xceyh+KT9cXHMqZWxzZVxcYikvLC9eKD86XFx7XFx7KH4pP1xceykvLC9eKD86XFx7XFx7KH4pPyYpLywvXig/Olxce1xceyh+KT8hLS0pLywvXig/Olxce1xceyh+KT8hW1xcc1xcU10qP1xcfVxcfSkvLC9eKD86XFx7XFx7KH4pP1xcKj8pLywvXig/Oj0pLywvXig/OlxcLlxcLikvLC9eKD86XFwuKD89KFs9fn1cXHNcXC8uKXxdKSkpLywvXig/OltcXC8uXSkvLC9eKD86XFxzKykvLC9eKD86XFx9KH4pP1xcfVxcfSkvLC9eKD86KH4pP1xcfVxcfSkvLC9eKD86XCIoXFxcXFtcIl18W15cIl0pKlwiKS8sL14oPzonKFxcXFxbJ118W14nXSkqJykvLC9eKD86QCkvLC9eKD86dHJ1ZSg/PShbfn1cXHMpXSkpKS8sL14oPzpmYWxzZSg/PShbfn1cXHMpXSkpKS8sL14oPzp1bmRlZmluZWQoPz0oW359XFxzKV0pKSkvLC9eKD86bnVsbCg/PShbfn1cXHMpXSkpKS8sL14oPzotP1swLTldKyg/OlxcLlswLTldKyk/KD89KFt+fVxccyldKSkpLywvXig/OmFzXFxzK1xcfCkvLC9eKD86XFx8KS8sL14oPzooW15cXHMhXCIjJS0sXFwuXFwvOy0+QFxcWy1cXF5gXFx7LX5dKyg/PShbPX59XFxzXFwvLil8XSkpKSkvLC9eKD86XFxbKFxcXFxcXF18W15cXF1dKSpcXF0pLywvXig/Oi4pLywvXig/OiQpL107XG5sZXhlci5jb25kaXRpb25zID0ge1wibXVcIjp7XCJydWxlc1wiOls3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NF0sXCJpbmNsdXNpdmVcIjpmYWxzZX0sXCJlbXVcIjp7XCJydWxlc1wiOlsyXSxcImluY2x1c2l2ZVwiOmZhbHNlfSxcImNvbVwiOntcInJ1bGVzXCI6WzZdLFwiaW5jbHVzaXZlXCI6ZmFsc2V9LFwicmF3XCI6e1wicnVsZXNcIjpbMyw0LDVdLFwiaW5jbHVzaXZlXCI6ZmFsc2V9LFwiSU5JVElBTFwiOntcInJ1bGVzXCI6WzAsMSw0NF0sXCJpbmNsdXNpdmVcIjp0cnVlfX07XG5yZXR1cm4gbGV4ZXI7fSkoKVxucGFyc2VyLmxleGVyID0gbGV4ZXI7XG5mdW5jdGlvbiBQYXJzZXIgKCkgeyB0aGlzLnl5ID0ge307IH1QYXJzZXIucHJvdG90eXBlID0gcGFyc2VyO3BhcnNlci5QYXJzZXIgPSBQYXJzZXI7XG5yZXR1cm4gbmV3IFBhcnNlcjtcbn0pKCk7ZXhwb3J0IGRlZmF1bHQgaGFuZGxlYmFycztcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5ldy1jYXAgKi9cbmltcG9ydCBWaXNpdG9yIGZyb20gJy4vdmlzaXRvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludChhc3QpIHtcbiAgcmV0dXJuIG5ldyBQcmludFZpc2l0b3IoKS5hY2NlcHQoYXN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFByaW50VmlzaXRvcigpIHtcbiAgdGhpcy5wYWRkaW5nID0gMDtcbn1cblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZSA9IG5ldyBWaXNpdG9yKCk7XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUucGFkID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIGxldCBvdXQgPSAnJztcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMucGFkZGluZzsgaSA8IGw7IGkrKykge1xuICAgIG91dCArPSAnICAnO1xuICB9XG5cbiAgb3V0ICs9IHN0cmluZyArICdcXG4nO1xuICByZXR1cm4gb3V0O1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5Qcm9ncmFtID0gZnVuY3Rpb24ocHJvZ3JhbSkge1xuICBsZXQgb3V0ID0gJycsXG4gICAgICBib2R5ID0gcHJvZ3JhbS5ib2R5LFxuICAgICAgaSwgbDtcblxuICBpZiAocHJvZ3JhbS5ibG9ja1BhcmFtcykge1xuICAgIGxldCBibG9ja1BhcmFtcyA9ICdCTE9DSyBQQVJBTVM6IFsnO1xuICAgIGZvciAoaSA9IDAsIGwgPSBwcm9ncmFtLmJsb2NrUGFyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgIGJsb2NrUGFyYW1zICs9ICcgJyArIHByb2dyYW0uYmxvY2tQYXJhbXNbaV07XG4gICAgfVxuICAgIGJsb2NrUGFyYW1zICs9ICcgXSc7XG4gICAgb3V0ICs9IHRoaXMucGFkKGJsb2NrUGFyYW1zKTtcbiAgfVxuXG4gIGZvciAoaSA9IDAsIGwgPSBib2R5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG91dCArPSB0aGlzLmFjY2VwdChib2R5W2ldKTtcbiAgfVxuXG4gIHRoaXMucGFkZGluZy0tO1xuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLk11c3RhY2hlU3RhdGVtZW50ID0gZnVuY3Rpb24obXVzdGFjaGUpIHtcbiAgcmV0dXJuIHRoaXMucGFkKCd7eyAnICsgdGhpcy5TdWJFeHByZXNzaW9uKG11c3RhY2hlKSArICcgfX0nKTtcbn07XG5QcmludFZpc2l0b3IucHJvdG90eXBlLkRlY29yYXRvciA9IGZ1bmN0aW9uKG11c3RhY2hlKSB7XG4gIHJldHVybiB0aGlzLnBhZCgne3sgRElSRUNUSVZFICcgKyB0aGlzLlN1YkV4cHJlc3Npb24obXVzdGFjaGUpICsgJyB9fScpO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5CbG9ja1N0YXRlbWVudCA9XG5QcmludFZpc2l0b3IucHJvdG90eXBlLkRlY29yYXRvckJsb2NrID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgbGV0IG91dCA9ICcnO1xuXG4gIG91dCArPSB0aGlzLnBhZCgoYmxvY2sudHlwZSA9PT0gJ0RlY29yYXRvckJsb2NrJyA/ICdESVJFQ1RJVkUgJyA6ICcnKSArICdCTE9DSzonKTtcbiAgdGhpcy5wYWRkaW5nKys7XG4gIG91dCArPSB0aGlzLnBhZCh0aGlzLlN1YkV4cHJlc3Npb24oYmxvY2spKTtcbiAgaWYgKGJsb2NrLnByb2dyYW0pIHtcbiAgICBvdXQgKz0gdGhpcy5wYWQoJ1BST0dSQU06Jyk7XG4gICAgdGhpcy5wYWRkaW5nKys7XG4gICAgb3V0ICs9IHRoaXMuYWNjZXB0KGJsb2NrLnByb2dyYW0pO1xuICAgIHRoaXMucGFkZGluZy0tO1xuICB9XG4gIGlmIChibG9jay5pbnZlcnNlKSB7XG4gICAgaWYgKGJsb2NrLnByb2dyYW0pIHsgdGhpcy5wYWRkaW5nKys7IH1cbiAgICBvdXQgKz0gdGhpcy5wYWQoJ3t7Xn19Jyk7XG4gICAgdGhpcy5wYWRkaW5nKys7XG4gICAgb3V0ICs9IHRoaXMuYWNjZXB0KGJsb2NrLmludmVyc2UpO1xuICAgIHRoaXMucGFkZGluZy0tO1xuICAgIGlmIChibG9jay5wcm9ncmFtKSB7IHRoaXMucGFkZGluZy0tOyB9XG4gIH1cbiAgdGhpcy5wYWRkaW5nLS07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuUGFydGlhbFN0YXRlbWVudCA9IGZ1bmN0aW9uKHBhcnRpYWwpIHtcbiAgbGV0IGNvbnRlbnQgPSAnUEFSVElBTDonICsgcGFydGlhbC5uYW1lLm9yaWdpbmFsO1xuICBpZiAocGFydGlhbC5wYXJhbXNbMF0pIHtcbiAgICBjb250ZW50ICs9ICcgJyArIHRoaXMuYWNjZXB0KHBhcnRpYWwucGFyYW1zWzBdKTtcbiAgfVxuICBpZiAocGFydGlhbC5oYXNoKSB7XG4gICAgY29udGVudCArPSAnICcgKyB0aGlzLmFjY2VwdChwYXJ0aWFsLmhhc2gpO1xuICB9XG4gIHJldHVybiB0aGlzLnBhZCgne3s+ICcgKyBjb250ZW50ICsgJyB9fScpO1xufTtcblByaW50VmlzaXRvci5wcm90b3R5cGUuUGFydGlhbEJsb2NrU3RhdGVtZW50ID0gZnVuY3Rpb24ocGFydGlhbCkge1xuICBsZXQgY29udGVudCA9ICdQQVJUSUFMIEJMT0NLOicgKyBwYXJ0aWFsLm5hbWUub3JpZ2luYWw7XG4gIGlmIChwYXJ0aWFsLnBhcmFtc1swXSkge1xuICAgIGNvbnRlbnQgKz0gJyAnICsgdGhpcy5hY2NlcHQocGFydGlhbC5wYXJhbXNbMF0pO1xuICB9XG4gIGlmIChwYXJ0aWFsLmhhc2gpIHtcbiAgICBjb250ZW50ICs9ICcgJyArIHRoaXMuYWNjZXB0KHBhcnRpYWwuaGFzaCk7XG4gIH1cblxuICBjb250ZW50ICs9ICcgJyArIHRoaXMucGFkKCdQUk9HUkFNOicpO1xuICB0aGlzLnBhZGRpbmcrKztcbiAgY29udGVudCArPSB0aGlzLmFjY2VwdChwYXJ0aWFsLnByb2dyYW0pO1xuICB0aGlzLnBhZGRpbmctLTtcblxuICByZXR1cm4gdGhpcy5wYWQoJ3t7PiAnICsgY29udGVudCArICcgfX0nKTtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuQ29udGVudFN0YXRlbWVudCA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHRoaXMucGFkKFwiQ09OVEVOVFsgJ1wiICsgY29udGVudC52YWx1ZSArIFwiJyBdXCIpO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5Db21tZW50U3RhdGVtZW50ID0gZnVuY3Rpb24oY29tbWVudCkge1xuICByZXR1cm4gdGhpcy5wYWQoXCJ7eyEgJ1wiICsgY29tbWVudC52YWx1ZSArIFwiJyB9fVwiKTtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuU3ViRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKHNleHByKSB7XG4gIGxldCBwYXJhbXMgPSBzZXhwci5wYXJhbXMsXG4gICAgICBwYXJhbVN0cmluZ3MgPSBbXSxcbiAgICAgIGhhc2g7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgcGFyYW1TdHJpbmdzLnB1c2godGhpcy5hY2NlcHQocGFyYW1zW2ldKSk7XG4gIH1cblxuICBwYXJhbXMgPSAnWycgKyBwYXJhbVN0cmluZ3Muam9pbignLCAnKSArICddJztcblxuICBoYXNoID0gc2V4cHIuaGFzaCA/ICcgJyArIHRoaXMuYWNjZXB0KHNleHByLmhhc2gpIDogJyc7XG5cbiAgcmV0dXJuIHRoaXMuYWNjZXB0KHNleHByLnBhdGgpICsgJyAnICsgcGFyYW1zICsgaGFzaDtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuUGF0aEV4cHJlc3Npb24gPSBmdW5jdGlvbihpZCkge1xuICBsZXQgcGF0aCA9IGlkLnBhcnRzLmpvaW4oJy8nKTtcbiAgcmV0dXJuIChpZC5kYXRhID8gJ0AnIDogJycpICsgJ1BBVEg6JyArIHBhdGg7XG59O1xuXG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuU3RyaW5nTGl0ZXJhbCA9IGZ1bmN0aW9uKHN0cmluZykge1xuICByZXR1cm4gJ1wiJyArIHN0cmluZy52YWx1ZSArICdcIic7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLk51bWJlckxpdGVyYWwgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgcmV0dXJuICdOVU1CRVJ7JyArIG51bWJlci52YWx1ZSArICd9Jztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuQm9vbGVhbkxpdGVyYWwgPSBmdW5jdGlvbihib29sKSB7XG4gIHJldHVybiAnQk9PTEVBTnsnICsgYm9vbC52YWx1ZSArICd9Jztcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuVW5kZWZpbmVkTGl0ZXJhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ1VOREVGSU5FRCc7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLk51bGxMaXRlcmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnTlVMTCc7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLkhhc2ggPSBmdW5jdGlvbihoYXNoKSB7XG4gIGxldCBwYWlycyA9IGhhc2gucGFpcnMsXG4gICAgICBqb2luZWRQYWlycyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgam9pbmVkUGFpcnMucHVzaCh0aGlzLmFjY2VwdChwYWlyc1tpXSkpO1xuICB9XG5cbiAgcmV0dXJuICdIQVNIeycgKyBqb2luZWRQYWlycy5qb2luKCcsICcpICsgJ30nO1xufTtcblByaW50VmlzaXRvci5wcm90b3R5cGUuSGFzaFBhaXIgPSBmdW5jdGlvbihwYWlyKSB7XG4gIHJldHVybiBwYWlyLmtleSArICc9JyArIHRoaXMuYWNjZXB0KHBhaXIudmFsdWUpO1xufTtcbi8qIGVzbGludC1lbmFibGUgbmV3LWNhcCAqL1xuIiwiaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5mdW5jdGlvbiBWaXNpdG9yKCkge1xuICB0aGlzLnBhcmVudHMgPSBbXTtcbn1cblxuVmlzaXRvci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBWaXNpdG9yLFxuICBtdXRhdGluZzogZmFsc2UsXG5cbiAgLy8gVmlzaXRzIGEgZ2l2ZW4gdmFsdWUuIElmIG11dGF0aW5nLCB3aWxsIHJlcGxhY2UgdGhlIHZhbHVlIGlmIG5lY2Vzc2FyeS5cbiAgYWNjZXB0S2V5OiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5hY2NlcHQobm9kZVtuYW1lXSk7XG4gICAgaWYgKHRoaXMubXV0YXRpbmcpIHtcbiAgICAgIC8vIEhhY2t5IHNhbml0eSBjaGVjazogVGhpcyBtYXkgaGF2ZSBhIGZldyBmYWxzZSBwb3NpdGl2ZXMgZm9yIHR5cGUgZm9yIHRoZSBoZWxwZXJcbiAgICAgIC8vIG1ldGhvZHMgYnV0IHdpbGwgZ2VuZXJhbGx5IGRvIHRoZSByaWdodCB0aGluZyB3aXRob3V0IGEgbG90IG9mIG92ZXJoZWFkLlxuICAgICAgaWYgKHZhbHVlICYmICFWaXNpdG9yLnByb3RvdHlwZVt2YWx1ZS50eXBlXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmV4cGVjdGVkIG5vZGUgdHlwZSBcIicgKyB2YWx1ZS50eXBlICsgJ1wiIGZvdW5kIHdoZW4gYWNjZXB0aW5nICcgKyBuYW1lICsgJyBvbiAnICsgbm9kZS50eXBlKTtcbiAgICAgIH1cbiAgICAgIG5vZGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gUGVyZm9ybXMgYW4gYWNjZXB0IG9wZXJhdGlvbiB3aXRoIGFkZGVkIHNhbml0eSBjaGVjayB0byBlbnN1cmVcbiAgLy8gcmVxdWlyZWQga2V5cyBhcmUgbm90IHJlbW92ZWQuXG4gIGFjY2VwdFJlcXVpcmVkOiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgdGhpcy5hY2NlcHRLZXkobm9kZSwgbmFtZSk7XG5cbiAgICBpZiAoIW5vZGVbbmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24obm9kZS50eXBlICsgJyByZXF1aXJlcyAnICsgbmFtZSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFRyYXZlcnNlcyBhIGdpdmVuIGFycmF5LiBJZiBtdXRhdGluZywgZW1wdHkgcmVzcG5zZXMgd2lsbCBiZSByZW1vdmVkXG4gIC8vIGZvciBjaGlsZCBlbGVtZW50cy5cbiAgYWNjZXB0QXJyYXk6IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMuYWNjZXB0S2V5KGFycmF5LCBpKTtcblxuICAgICAgaWYgKCFhcnJheVtpXSkge1xuICAgICAgICBhcnJheS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGktLTtcbiAgICAgICAgbC0tO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBhY2NlcHQ6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmICghb2JqZWN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXG4gICAgaWYgKCF0aGlzW29iamVjdC50eXBlXSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5rbm93biB0eXBlOiAnICsgb2JqZWN0LnR5cGUsIG9iamVjdCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY3VycmVudCkge1xuICAgICAgdGhpcy5wYXJlbnRzLnVuc2hpZnQodGhpcy5jdXJyZW50KTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50ID0gb2JqZWN0O1xuXG4gICAgbGV0IHJldCA9IHRoaXNbb2JqZWN0LnR5cGVdKG9iamVjdCk7XG5cbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnBhcmVudHMuc2hpZnQoKTtcblxuICAgIGlmICghdGhpcy5tdXRhdGluZyB8fCByZXQpIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSBlbHNlIGlmIChyZXQgIT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbiAgfSxcblxuICBQcm9ncmFtOiBmdW5jdGlvbihwcm9ncmFtKSB7XG4gICAgdGhpcy5hY2NlcHRBcnJheShwcm9ncmFtLmJvZHkpO1xuICB9LFxuXG4gIE11c3RhY2hlU3RhdGVtZW50OiB2aXNpdFN1YkV4cHJlc3Npb24sXG4gIERlY29yYXRvcjogdmlzaXRTdWJFeHByZXNzaW9uLFxuXG4gIEJsb2NrU3RhdGVtZW50OiB2aXNpdEJsb2NrLFxuICBEZWNvcmF0b3JCbG9jazogdmlzaXRCbG9jayxcblxuICBQYXJ0aWFsU3RhdGVtZW50OiB2aXNpdFBhcnRpYWwsXG4gIFBhcnRpYWxCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24ocGFydGlhbCkge1xuICAgIHZpc2l0UGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwpO1xuXG4gICAgdGhpcy5hY2NlcHRLZXkocGFydGlhbCwgJ3Byb2dyYW0nKTtcbiAgfSxcblxuICBDb250ZW50U3RhdGVtZW50OiBmdW5jdGlvbigvKiBjb250ZW50ICovKSB7fSxcbiAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24oLyogY29tbWVudCAqLykge30sXG5cbiAgU3ViRXhwcmVzc2lvbjogdmlzaXRTdWJFeHByZXNzaW9uLFxuXG4gIFBhdGhFeHByZXNzaW9uOiBmdW5jdGlvbigvKiBwYXRoICovKSB7fSxcblxuICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbigvKiBzdHJpbmcgKi8pIHt9LFxuICBOdW1iZXJMaXRlcmFsOiBmdW5jdGlvbigvKiBudW1iZXIgKi8pIHt9LFxuICBCb29sZWFuTGl0ZXJhbDogZnVuY3Rpb24oLyogYm9vbCAqLykge30sXG4gIFVuZGVmaW5lZExpdGVyYWw6IGZ1bmN0aW9uKC8qIGxpdGVyYWwgKi8pIHt9LFxuICBOdWxsTGl0ZXJhbDogZnVuY3Rpb24oLyogbGl0ZXJhbCAqLykge30sXG5cbiAgSGFzaDogZnVuY3Rpb24oaGFzaCkge1xuICAgIHRoaXMuYWNjZXB0QXJyYXkoaGFzaC5wYWlycyk7XG4gIH0sXG4gIEhhc2hQYWlyOiBmdW5jdGlvbihwYWlyKSB7XG4gICAgdGhpcy5hY2NlcHRSZXF1aXJlZChwYWlyLCAndmFsdWUnKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdmlzaXRTdWJFeHByZXNzaW9uKG11c3RhY2hlKSB7XG4gIHRoaXMuYWNjZXB0UmVxdWlyZWQobXVzdGFjaGUsICdwYXRoJyk7XG4gIHRoaXMuYWNjZXB0QXJyYXkobXVzdGFjaGUucGFyYW1zKTtcbiAgdGhpcy5hY2NlcHRLZXkobXVzdGFjaGUsICdoYXNoJyk7XG59XG5mdW5jdGlvbiB2aXNpdEJsb2NrKGJsb2NrKSB7XG4gIHZpc2l0U3ViRXhwcmVzc2lvbi5jYWxsKHRoaXMsIGJsb2NrKTtcblxuICB0aGlzLmFjY2VwdEtleShibG9jaywgJ3Byb2dyYW0nKTtcbiAgdGhpcy5hY2NlcHRLZXkoYmxvY2ssICdpbnZlcnNlJyk7XG59XG5mdW5jdGlvbiB2aXNpdFBhcnRpYWwocGFydGlhbCkge1xuICB0aGlzLmFjY2VwdFJlcXVpcmVkKHBhcnRpYWwsICduYW1lJyk7XG4gIHRoaXMuYWNjZXB0QXJyYXkocGFydGlhbC5wYXJhbXMpO1xuICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAnaGFzaCcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWaXNpdG9yO1xuIiwiaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi92aXNpdG9yJztcblxuZnVuY3Rpb24gV2hpdGVzcGFjZUNvbnRyb2wob3B0aW9ucyA9IHt9KSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59XG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUgPSBuZXcgVmlzaXRvcigpO1xuXG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUHJvZ3JhbSA9IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgY29uc3QgZG9TdGFuZGFsb25lID0gIXRoaXMub3B0aW9ucy5pZ25vcmVTdGFuZGFsb25lO1xuXG4gIGxldCBpc1Jvb3QgPSAhdGhpcy5pc1Jvb3RTZWVuO1xuICB0aGlzLmlzUm9vdFNlZW4gPSB0cnVlO1xuXG4gIGxldCBib2R5ID0gcHJvZ3JhbS5ib2R5O1xuICBmb3IgKGxldCBpID0gMCwgbCA9IGJvZHkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGN1cnJlbnQgPSBib2R5W2ldLFxuICAgICAgICBzdHJpcCA9IHRoaXMuYWNjZXB0KGN1cnJlbnQpO1xuXG4gICAgaWYgKCFzdHJpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbGV0IF9pc1ByZXZXaGl0ZXNwYWNlID0gaXNQcmV2V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpLFxuICAgICAgICBfaXNOZXh0V2hpdGVzcGFjZSA9IGlzTmV4dFdoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSxcblxuICAgICAgICBvcGVuU3RhbmRhbG9uZSA9IHN0cmlwLm9wZW5TdGFuZGFsb25lICYmIF9pc1ByZXZXaGl0ZXNwYWNlLFxuICAgICAgICBjbG9zZVN0YW5kYWxvbmUgPSBzdHJpcC5jbG9zZVN0YW5kYWxvbmUgJiYgX2lzTmV4dFdoaXRlc3BhY2UsXG4gICAgICAgIGlubGluZVN0YW5kYWxvbmUgPSBzdHJpcC5pbmxpbmVTdGFuZGFsb25lICYmIF9pc1ByZXZXaGl0ZXNwYWNlICYmIF9pc05leHRXaGl0ZXNwYWNlO1xuXG4gICAgaWYgKHN0cmlwLmNsb3NlKSB7XG4gICAgICBvbWl0UmlnaHQoYm9keSwgaSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChzdHJpcC5vcGVuKSB7XG4gICAgICBvbWl0TGVmdChib2R5LCBpLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoZG9TdGFuZGFsb25lICYmIGlubGluZVN0YW5kYWxvbmUpIHtcbiAgICAgIG9taXRSaWdodChib2R5LCBpKTtcblxuICAgICAgaWYgKG9taXRMZWZ0KGJvZHksIGkpKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBvbiBhIHN0YW5kYWxvbmUgbm9kZSwgc2F2ZSB0aGUgaW5kZW50IGluZm8gZm9yIHBhcnRpYWxzXG4gICAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdQYXJ0aWFsU3RhdGVtZW50Jykge1xuICAgICAgICAgIC8vIFB1bGwgb3V0IHRoZSB3aGl0ZXNwYWNlIGZyb20gdGhlIGZpbmFsIGxpbmVcbiAgICAgICAgICBjdXJyZW50LmluZGVudCA9ICgvKFsgXFx0XSskKS8pLmV4ZWMoYm9keVtpIC0gMV0ub3JpZ2luYWwpWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgb3BlblN0YW5kYWxvbmUpIHtcbiAgICAgIG9taXRSaWdodCgoY3VycmVudC5wcm9ncmFtIHx8IGN1cnJlbnQuaW52ZXJzZSkuYm9keSk7XG5cbiAgICAgIC8vIFN0cmlwIG91dCB0aGUgcHJldmlvdXMgY29udGVudCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5XG4gICAgICBvbWl0TGVmdChib2R5LCBpKTtcbiAgICB9XG4gICAgaWYgKGRvU3RhbmRhbG9uZSAmJiBjbG9zZVN0YW5kYWxvbmUpIHtcbiAgICAgIC8vIEFsd2F5cyBzdHJpcCB0aGUgbmV4dCBub2RlXG4gICAgICBvbWl0UmlnaHQoYm9keSwgaSk7XG5cbiAgICAgIG9taXRMZWZ0KChjdXJyZW50LmludmVyc2UgfHwgY3VycmVudC5wcm9ncmFtKS5ib2R5KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvZ3JhbTtcbn07XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5CbG9ja1N0YXRlbWVudCA9XG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuRGVjb3JhdG9yQmxvY2sgPVxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLlBhcnRpYWxCbG9ja1N0YXRlbWVudCA9IGZ1bmN0aW9uKGJsb2NrKSB7XG4gIHRoaXMuYWNjZXB0KGJsb2NrLnByb2dyYW0pO1xuICB0aGlzLmFjY2VwdChibG9jay5pbnZlcnNlKTtcblxuICAvLyBGaW5kIHRoZSBpbnZlcnNlIHByb2dyYW0gdGhhdCBpcyBpbnZvbGVkIHdpdGggd2hpdGVzcGFjZSBzdHJpcHBpbmcuXG4gIGxldCBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSB8fCBibG9jay5pbnZlcnNlLFxuICAgICAgaW52ZXJzZSA9IGJsb2NrLnByb2dyYW0gJiYgYmxvY2suaW52ZXJzZSxcbiAgICAgIGZpcnN0SW52ZXJzZSA9IGludmVyc2UsXG4gICAgICBsYXN0SW52ZXJzZSA9IGludmVyc2U7XG5cbiAgaWYgKGludmVyc2UgJiYgaW52ZXJzZS5jaGFpbmVkKSB7XG4gICAgZmlyc3RJbnZlcnNlID0gaW52ZXJzZS5ib2R5WzBdLnByb2dyYW07XG5cbiAgICAvLyBXYWxrIHRoZSBpbnZlcnNlIGNoYWluIHRvIGZpbmQgdGhlIGxhc3QgaW52ZXJzZSB0aGF0IGlzIGFjdHVhbGx5IGluIHRoZSBjaGFpbi5cbiAgICB3aGlsZSAobGFzdEludmVyc2UuY2hhaW5lZCkge1xuICAgICAgbGFzdEludmVyc2UgPSBsYXN0SW52ZXJzZS5ib2R5W2xhc3RJbnZlcnNlLmJvZHkubGVuZ3RoIC0gMV0ucHJvZ3JhbTtcbiAgICB9XG4gIH1cblxuICBsZXQgc3RyaXAgPSB7XG4gICAgb3BlbjogYmxvY2sub3BlblN0cmlwLm9wZW4sXG4gICAgY2xvc2U6IGJsb2NrLmNsb3NlU3RyaXAuY2xvc2UsXG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIHN0YW5kYWxvbmUgY2FuZGlhY3kuIEJhc2ljYWxseSBmbGFnIG91ciBjb250ZW50IGFzIGJlaW5nIHBvc3NpYmx5IHN0YW5kYWxvbmVcbiAgICAvLyBzbyBvdXIgcGFyZW50IGNhbiBkZXRlcm1pbmUgaWYgd2UgYWN0dWFsbHkgYXJlIHN0YW5kYWxvbmVcbiAgICBvcGVuU3RhbmRhbG9uZTogaXNOZXh0V2hpdGVzcGFjZShwcm9ncmFtLmJvZHkpLFxuICAgIGNsb3NlU3RhbmRhbG9uZTogaXNQcmV2V2hpdGVzcGFjZSgoZmlyc3RJbnZlcnNlIHx8IHByb2dyYW0pLmJvZHkpXG4gIH07XG5cbiAgaWYgKGJsb2NrLm9wZW5TdHJpcC5jbG9zZSkge1xuICAgIG9taXRSaWdodChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xuICB9XG5cbiAgaWYgKGludmVyc2UpIHtcbiAgICBsZXQgaW52ZXJzZVN0cmlwID0gYmxvY2suaW52ZXJzZVN0cmlwO1xuXG4gICAgaWYgKGludmVyc2VTdHJpcC5vcGVuKSB7XG4gICAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChpbnZlcnNlU3RyaXAuY2xvc2UpIHtcbiAgICAgIG9taXRSaWdodChmaXJzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChibG9jay5jbG9zZVN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KGxhc3RJbnZlcnNlLmJvZHksIG51bGwsIHRydWUpO1xuICAgIH1cblxuICAgIC8vIEZpbmQgc3RhbmRhbG9uZSBlbHNlIHN0YXRtZW50c1xuICAgIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmVcbiAgICAgICAgJiYgaXNQcmV2V2hpdGVzcGFjZShwcm9ncmFtLmJvZHkpXG4gICAgICAgICYmIGlzTmV4dFdoaXRlc3BhY2UoZmlyc3RJbnZlcnNlLmJvZHkpKSB7XG4gICAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHkpO1xuICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYmxvY2suY2xvc2VTdHJpcC5vcGVuKSB7XG4gICAgb21pdExlZnQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpcDtcbn07XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5EZWNvcmF0b3IgPVxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLk11c3RhY2hlU3RhdGVtZW50ID0gZnVuY3Rpb24obXVzdGFjaGUpIHtcbiAgcmV0dXJuIG11c3RhY2hlLnN0cmlwO1xufTtcblxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLlBhcnRpYWxTdGF0ZW1lbnQgPVxuICAgIFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Db21tZW50U3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBsZXQgc3RyaXAgPSBub2RlLnN0cmlwIHx8IHt9O1xuICByZXR1cm4ge1xuICAgIGlubGluZVN0YW5kYWxvbmU6IHRydWUsXG4gICAgb3Blbjogc3RyaXAub3BlbixcbiAgICBjbG9zZTogc3RyaXAuY2xvc2VcbiAgfTtcbn07XG5cblxuZnVuY3Rpb24gaXNQcmV2V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpIHtcbiAgaWYgKGkgPT09IHVuZGVmaW5lZCkge1xuICAgIGkgPSBib2R5Lmxlbmd0aDtcbiAgfVxuXG4gIC8vIE5vZGVzIHRoYXQgZW5kIHdpdGggbmV3bGluZXMgYXJlIGNvbnNpZGVyZWQgd2hpdGVzcGFjZSAoYnV0IGFyZSBzcGVjaWFsXG4gIC8vIGNhc2VkIGZvciBzdHJpcCBvcGVyYXRpb25zKVxuICBsZXQgcHJldiA9IGJvZHlbaSAtIDFdLFxuICAgICAgc2libGluZyA9IGJvZHlbaSAtIDJdO1xuICBpZiAoIXByZXYpIHtcbiAgICByZXR1cm4gaXNSb290O1xuICB9XG5cbiAgaWYgKHByZXYudHlwZSA9PT0gJ0NvbnRlbnRTdGF0ZW1lbnQnKSB7XG4gICAgcmV0dXJuIChzaWJsaW5nIHx8ICFpc1Jvb3QgPyAoL1xccj9cXG5cXHMqPyQvKSA6ICgvKF58XFxyP1xcbilcXHMqPyQvKSkudGVzdChwcmV2Lm9yaWdpbmFsKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNOZXh0V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpIHtcbiAgaWYgKGkgPT09IHVuZGVmaW5lZCkge1xuICAgIGkgPSAtMTtcbiAgfVxuXG4gIGxldCBuZXh0ID0gYm9keVtpICsgMV0sXG4gICAgICBzaWJsaW5nID0gYm9keVtpICsgMl07XG4gIGlmICghbmV4dCkge1xuICAgIHJldHVybiBpc1Jvb3Q7XG4gIH1cblxuICBpZiAobmV4dC50eXBlID09PSAnQ29udGVudFN0YXRlbWVudCcpIHtcbiAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/ICgvXlxccyo/XFxyP1xcbi8pIDogKC9eXFxzKj8oXFxyP1xcbnwkKS8pKS50ZXN0KG5leHQub3JpZ2luYWwpO1xuICB9XG59XG5cbi8vIE1hcmtzIHRoZSBub2RlIHRvIHRoZSByaWdodCBvZiB0aGUgcG9zaXRpb24gYXMgb21pdHRlZC5cbi8vIEkuZS4ge3tmb299fScgJyB3aWxsIG1hcmsgdGhlICcgJyBub2RlIGFzIG9taXR0ZWQuXG4vL1xuLy8gSWYgaSBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgbWFya2VkIGFzIHN1Y2guXG4vL1xuLy8gSWYgbXVsaXRwbGUgaXMgdHJ1dGh5IHRoZW4gYWxsIHdoaXRlc3BhY2Ugd2lsbCBiZSBzdHJpcHBlZCBvdXQgdW50aWwgbm9uLXdoaXRlc3BhY2Vcbi8vIGNvbnRlbnQgaXMgbWV0LlxuZnVuY3Rpb24gb21pdFJpZ2h0KGJvZHksIGksIG11bHRpcGxlKSB7XG4gIGxldCBjdXJyZW50ID0gYm9keVtpID09IG51bGwgPyAwIDogaSArIDFdO1xuICBpZiAoIWN1cnJlbnQgfHwgY3VycmVudC50eXBlICE9PSAnQ29udGVudFN0YXRlbWVudCcgfHwgKCFtdWx0aXBsZSAmJiBjdXJyZW50LnJpZ2h0U3RyaXBwZWQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IG9yaWdpbmFsID0gY3VycmVudC52YWx1ZTtcbiAgY3VycmVudC52YWx1ZSA9IGN1cnJlbnQudmFsdWUucmVwbGFjZShtdWx0aXBsZSA/ICgvXlxccysvKSA6ICgvXlsgXFx0XSpcXHI/XFxuPy8pLCAnJyk7XG4gIGN1cnJlbnQucmlnaHRTdHJpcHBlZCA9IGN1cnJlbnQudmFsdWUgIT09IG9yaWdpbmFsO1xufVxuXG4vLyBNYXJrcyB0aGUgbm9kZSB0byB0aGUgbGVmdCBvZiB0aGUgcG9zaXRpb24gYXMgb21pdHRlZC5cbi8vIEkuZS4gJyAne3tmb299fSB3aWxsIG1hcmsgdGhlICcgJyBub2RlIGFzIG9taXR0ZWQuXG4vL1xuLy8gSWYgaSBpcyB1bmRlZmluZWQgdGhlbiB0aGUgbGFzdCBjaGlsZCB3aWxsIGJlIG1hcmtlZCBhcyBzdWNoLlxuLy9cbi8vIElmIG11bGl0cGxlIGlzIHRydXRoeSB0aGVuIGFsbCB3aGl0ZXNwYWNlIHdpbGwgYmUgc3RyaXBwZWQgb3V0IHVudGlsIG5vbi13aGl0ZXNwYWNlXG4vLyBjb250ZW50IGlzIG1ldC5cbmZ1bmN0aW9uIG9taXRMZWZ0KGJvZHksIGksIG11bHRpcGxlKSB7XG4gIGxldCBjdXJyZW50ID0gYm9keVtpID09IG51bGwgPyBib2R5Lmxlbmd0aCAtIDEgOiBpIC0gMV07XG4gIGlmICghY3VycmVudCB8fCBjdXJyZW50LnR5cGUgIT09ICdDb250ZW50U3RhdGVtZW50JyB8fCAoIW11bHRpcGxlICYmIGN1cnJlbnQubGVmdFN0cmlwcGVkKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdlIG9taXQgdGhlIGxhc3Qgbm9kZSBpZiBpdCdzIHdoaXRlc3BhY2Ugb25seSBhbmQgbm90IHByZWNlZWRlZCBieSBhIG5vbi1jb250ZW50IG5vZGUuXG4gIGxldCBvcmlnaW5hbCA9IGN1cnJlbnQudmFsdWU7XG4gIGN1cnJlbnQudmFsdWUgPSBjdXJyZW50LnZhbHVlLnJlcGxhY2UobXVsdGlwbGUgPyAoL1xccyskLykgOiAoL1sgXFx0XSskLyksICcnKTtcbiAgY3VycmVudC5sZWZ0U3RyaXBwZWQgPSBjdXJyZW50LnZhbHVlICE9PSBvcmlnaW5hbDtcbiAgcmV0dXJuIGN1cnJlbnQubGVmdFN0cmlwcGVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBXaGl0ZXNwYWNlQ29udHJvbDtcbiIsImltcG9ydCByZWdpc3RlcklubGluZSBmcm9tICcuL2RlY29yYXRvcnMvaW5saW5lJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJJbmxpbmUoaW5zdGFuY2UpO1xufVxuXG4iLCJpbXBvcnQge2V4dGVuZH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckRlY29yYXRvcignaW5saW5lJywgZnVuY3Rpb24oZm4sIHByb3BzLCBjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICBsZXQgcmV0ID0gZm47XG4gICAgaWYgKCFwcm9wcy5wYXJ0aWFscykge1xuICAgICAgcHJvcHMucGFydGlhbHMgPSB7fTtcbiAgICAgIHJldCA9IGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXG4gICAgICAgIGxldCBvcmlnaW5hbCA9IGNvbnRhaW5lci5wYXJ0aWFscztcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gZXh0ZW5kKHt9LCBvcmlnaW5hbCwgcHJvcHMucGFydGlhbHMpO1xuICAgICAgICBsZXQgcmV0ID0gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9yaWdpbmFsO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBwcm9wcy5wYXJ0aWFsc1tvcHRpb25zLmFyZ3NbMF1dID0gb3B0aW9ucy5mbjtcblxuICAgIHJldHVybiByZXQ7XG4gIH0pO1xufVxuIiwiXG5jb25zdCBlcnJvclByb3BzID0gWydkZXNjcmlwdGlvbicsICdmaWxlTmFtZScsICdsaW5lTnVtYmVyJywgJ21lc3NhZ2UnLCAnbmFtZScsICdudW1iZXInLCAnc3RhY2snXTtcblxuZnVuY3Rpb24gRXhjZXB0aW9uKG1lc3NhZ2UsIG5vZGUpIHtcbiAgbGV0IGxvYyA9IG5vZGUgJiYgbm9kZS5sb2MsXG4gICAgICBsaW5lLFxuICAgICAgY29sdW1uO1xuICBpZiAobG9jKSB7XG4gICAgbGluZSA9IGxvYy5zdGFydC5saW5lO1xuICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XG5cbiAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcbiAgfVxuXG4gIGxldCB0bXAgPSBFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICAvLyBVbmZvcnR1bmF0ZWx5IGVycm9ycyBhcmUgbm90IGVudW1lcmFibGUgaW4gQ2hyb21lIChhdCBsZWFzdCksIHNvIGBmb3IgcHJvcCBpbiB0bXBgIGRvZXNuJ3Qgd29yay5cbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZXJyb3JQcm9wcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAobG9jKSB7XG4gICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lO1xuXG4gICAgICAvLyBXb3JrIGFyb3VuZCBpc3N1ZSB1bmRlciBzYWZhcmkgd2hlcmUgd2UgY2FuJ3QgZGlyZWN0bHkgc2V0IHRoZSBjb2x1bW4gdmFsdWVcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29sdW1uJywge1xuICAgICAgICAgIHZhbHVlOiBjb2x1bW4sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAobm9wKSB7XG4gICAgLyogSWdub3JlIGlmIHRoZSBicm93c2VyIGlzIHZlcnkgcGFydGljdWxhciAqL1xuICB9XG59XG5cbkV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcblxuZXhwb3J0IGRlZmF1bHQgRXhjZXB0aW9uO1xuIiwiaW1wb3J0IHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJFYWNoIGZyb20gJy4vaGVscGVycy9lYWNoJztcbmltcG9ydCByZWdpc3RlckhlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2hlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlcklmIGZyb20gJy4vaGVscGVycy9pZic7XG5pbXBvcnQgcmVnaXN0ZXJMb2cgZnJvbSAnLi9oZWxwZXJzL2xvZyc7XG5pbXBvcnQgcmVnaXN0ZXJMb29rdXAgZnJvbSAnLi9oZWxwZXJzL2xvb2t1cCc7XG5pbXBvcnQgcmVnaXN0ZXJXaXRoIGZyb20gJy4vaGVscGVycy93aXRoJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlckVhY2goaW5zdGFuY2UpO1xuICByZWdpc3RlckhlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlcklmKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb2coaW5zdGFuY2UpO1xuICByZWdpc3Rlckxvb2t1cChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyV2l0aChpbnN0YW5jZSk7XG59XG4iLCJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBjcmVhdGVGcmFtZSwgaXNBcnJheX0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignYmxvY2tIZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgIGxldCBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgICBmbiA9IG9wdGlvbnMuZm47XG5cbiAgICBpZiAoY29udGV4dCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGZuKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dCA9PT0gZmFsc2UgfHwgY29udGV4dCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoY29udGV4dCkpIHtcbiAgICAgIGlmIChjb250ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgICAgICAgb3B0aW9ucy5pZHMgPSBbb3B0aW9ucy5uYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzLmVhY2goY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW52ZXJzZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICBsZXQgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMubmFtZSk7XG4gICAgICAgIG9wdGlvbnMgPSB7ZGF0YTogZGF0YX07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiaW1wb3J0IHthcHBlbmRDb250ZXh0UGF0aCwgYmxvY2tQYXJhbXMsIGNyZWF0ZUZyYW1lLCBpc0FycmF5LCBpc0Z1bmN0aW9ufSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdlYWNoJywgZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignTXVzdCBwYXNzIGl0ZXJhdG9yIHRvICNlYWNoJyk7XG4gICAgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbixcbiAgICAgICAgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHJldCA9ICcnLFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0UGF0aDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSkgKyAnLic7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID0gcmV0ICsgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IGJsb2NrUGFyYW1zKFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLCBbY29udGV4dFBhdGggKyBmaWVsZCwgbnVsbF0pXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBjb250ZXh0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgIGlmIChpIGluIGNvbnRleHQpIHtcbiAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24oaSwgaSwgaSA9PT0gY29udGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcmlvcktleTtcblxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gY29udGV4dCkge1xuICAgICAgICAgIGlmIChjb250ZXh0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgdGhlIGl0ZXJhdGlvbnMgb25lIHN0ZXAgb3V0IG9mIHN5bmMgc28gd2UgY2FuIGRldGVjdFxuICAgICAgICAgICAgLy8gdGhlIGxhc3QgaXRlcmF0aW9uIHdpdGhvdXQgaGF2ZSB0byBzY2FuIHRoZSBvYmplY3QgdHdpY2UgYW5kIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYW4gaXRlcm1lZGlhdGUga2V5cyBhcnJheS5cbiAgICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByaW9yS2V5ID0ga2V5O1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpID09PSAwKSB7XG4gICAgICByZXQgPSBpbnZlcnNlKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0pO1xufVxuIiwiaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaGVscGVyTWlzc2luZycsIGZ1bmN0aW9uKC8qIFthcmdzLCBdb3B0aW9ucyAqLykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAvLyBBIG1pc3NpbmcgZmllbGQgaW4gYSB7e2Zvb319IGNvbnN0cnVjdC5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNvbWVvbmUgaXMgYWN0dWFsbHkgdHJ5aW5nIHRvIGNhbGwgc29tZXRoaW5nLCBibG93IHVwLlxuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignTWlzc2luZyBoZWxwZXI6IFwiJyArIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0ubmFtZSArICdcIicpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJpbXBvcnQge2lzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2lmJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihjb25kaXRpb25hbCkpIHsgY29uZGl0aW9uYWwgPSBjb25kaXRpb25hbC5jYWxsKHRoaXMpOyB9XG5cbiAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHJlbmRlciB0aGUgcG9zaXRpdmUgcGF0aCBpZiB0aGUgdmFsdWUgaXMgdHJ1dGh5IGFuZCBub3QgZW1wdHkuXG4gICAgLy8gVGhlIGBpbmNsdWRlWmVyb2Agb3B0aW9uIG1heSBiZSBzZXQgdG8gdHJlYXQgdGhlIGNvbmR0aW9uYWwgYXMgcHVyZWx5IG5vdCBlbXB0eSBiYXNlZCBvbiB0aGVcbiAgICAvLyBiZWhhdmlvciBvZiBpc0VtcHR5LiBFZmZlY3RpdmVseSB0aGlzIGRldGVybWluZXMgaWYgMCBpcyBoYW5kbGVkIGJ5IHRoZSBwb3NpdGl2ZSBwYXRoIG9yIG5lZ2F0aXZlLlxuICAgIGlmICgoIW9wdGlvbnMuaGFzaC5pbmNsdWRlWmVybyAmJiAhY29uZGl0aW9uYWwpIHx8IGlzRW1wdHkoY29uZGl0aW9uYWwpKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd1bmxlc3MnLCBmdW5jdGlvbihjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHtmbjogb3B0aW9ucy5pbnZlcnNlLCBpbnZlcnNlOiBvcHRpb25zLmZuLCBoYXNoOiBvcHRpb25zLmhhc2h9KTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9nJywgZnVuY3Rpb24oLyogbWVzc2FnZSwgb3B0aW9ucyAqLykge1xuICAgIGxldCBhcmdzID0gW3VuZGVmaW5lZF0sXG4gICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgbGV0IGxldmVsID0gMTtcbiAgICBpZiAob3B0aW9ucy5oYXNoLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuZGF0YS5sZXZlbDtcbiAgICB9XG4gICAgYXJnc1swXSA9IGxldmVsO1xuXG4gICAgaW5zdGFuY2UubG9nKC4uLiBhcmdzKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24ob2JqLCBmaWVsZCkge1xuICAgIHJldHVybiBvYmogJiYgb2JqW2ZpZWxkXTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7aW5kZXhPZn0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7ICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIG1ldGhvZCA9ICdsb2cnO1xuICAgICAgfVxuICAgICAgY29uc29sZVttZXRob2RdKC4uLm1lc3NhZ2UpOyAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgbGV0IHJvb3QgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvdyxcbiAgICAgICRIYW5kbGViYXJzID0gcm9vdC5IYW5kbGViYXJzO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBIYW5kbGViYXJzLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAocm9vdC5IYW5kbGViYXJzID09PSBIYW5kbGViYXJzKSB7XG4gICAgICByb290LkhhbmRsZWJhcnMgPSAkSGFuZGxlYmFycztcbiAgICB9XG4gICAgcmV0dXJuIEhhbmRsZWJhcnM7XG4gIH07XG59XG4iLCJpbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9leGNlcHRpb24nO1xuaW1wb3J0IHsgQ09NUElMRVJfUkVWSVNJT04sIFJFVklTSU9OX0NIQU5HRVMsIGNyZWF0ZUZyYW1lIH0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmV2aXNpb24oY29tcGlsZXJJbmZvKSB7XG4gIGNvbnN0IGNvbXBpbGVyUmV2aXNpb24gPSBjb21waWxlckluZm8gJiYgY29tcGlsZXJJbmZvWzBdIHx8IDEsXG4gICAgICAgIGN1cnJlbnRSZXZpc2lvbiA9IENPTVBJTEVSX1JFVklTSU9OO1xuXG4gIGlmIChjb21waWxlclJldmlzaW9uICE9PSBjdXJyZW50UmV2aXNpb24pIHtcbiAgICBpZiAoY29tcGlsZXJSZXZpc2lvbiA8IGN1cnJlbnRSZXZpc2lvbikge1xuICAgICAgY29uc3QgcnVudGltZVZlcnNpb25zID0gUkVWSVNJT05fQ0hBTkdFU1tjdXJyZW50UmV2aXNpb25dLFxuICAgICAgICAgICAgY29tcGlsZXJWZXJzaW9ucyA9IFJFVklTSU9OX0NIQU5HRVNbY29tcGlsZXJSZXZpc2lvbl07XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhbiBvbGRlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICtcbiAgICAgICAgICAgICdQbGVhc2UgdXBkYXRlIHlvdXIgcHJlY29tcGlsZXIgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgcnVudGltZVZlcnNpb25zICsgJykgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uICgnICsgY29tcGlsZXJWZXJzaW9ucyArICcpLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVc2UgdGhlIGVtYmVkZGVkIHZlcnNpb24gaW5mbyBzaW5jZSB0aGUgcnVudGltZSBkb2Vzbid0IGtub3cgYWJvdXQgdGhpcyByZXZpc2lvbiB5ZXRcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGEgbmV3ZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIHVwZGF0ZSB5b3VyIHJ1bnRpbWUgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgY29tcGlsZXJJbmZvWzFdICsgJykuJyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMsIGVudikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIWVudikge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ05vIGVudmlyb25tZW50IHBhc3NlZCB0byB0ZW1wbGF0ZScpO1xuICB9XG4gIGlmICghdGVtcGxhdGVTcGVjIHx8ICF0ZW1wbGF0ZVNwZWMubWFpbikge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1Vua25vd24gdGVtcGxhdGUgb2JqZWN0OiAnICsgdHlwZW9mIHRlbXBsYXRlU3BlYyk7XG4gIH1cblxuICB0ZW1wbGF0ZVNwZWMubWFpbi5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWMubWFpbl9kO1xuXG4gIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XG4gIC8vIGZvciBleHRlcm5hbCB1c2VycyB0byBvdmVycmlkZSB0aGVzZSBhcyBwc3VlZG8tc3VwcG9ydGVkIEFQSXMuXG4gIGVudi5WTS5jaGVja1JldmlzaW9uKHRlbXBsYXRlU3BlYy5jb21waWxlcik7XG5cbiAgZnVuY3Rpb24gaW52b2tlUGFydGlhbFdyYXBwZXIocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAgIGNvbnRleHQgPSBVdGlscy5leHRlbmQoe30sIGNvbnRleHQsIG9wdGlvbnMuaGFzaCk7XG4gICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgb3B0aW9ucy5pZHNbMF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnRpYWwgPSBlbnYuVk0ucmVzb2x2ZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcbiAgICBsZXQgcmVzdWx0ID0gZW52LlZNLmludm9rZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcblxuICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xuICAgICAgb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdID0gZW52LmNvbXBpbGUocGFydGlhbCwgdGVtcGxhdGVTcGVjLmNvbXBpbGVyT3B0aW9ucywgZW52KTtcbiAgICAgIHJlc3VsdCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXShjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICBpZiAob3B0aW9ucy5pbmRlbnQpIHtcbiAgICAgICAgbGV0IGxpbmVzID0gcmVzdWx0LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoIWxpbmVzW2ldICYmIGkgKyAxID09PSBsKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaW5lc1tpXSA9IG9wdGlvbnMuaW5kZW50ICsgbGluZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gbGluZXMuam9pbignXFxuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgY29tcGlsZWQgd2hlbiBydW5uaW5nIGluIHJ1bnRpbWUtb25seSBtb2RlJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSnVzdCBhZGQgd2F0ZXJcbiAgbGV0IGNvbnRhaW5lciA9IHtcbiAgICBzdHJpY3Q6IGZ1bmN0aW9uKG9iaiwgbmFtZSkge1xuICAgICAgaWYgKCEobmFtZSBpbiBvYmopKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1wiJyArIG5hbWUgKyAnXCIgbm90IGRlZmluZWQgaW4gJyArIG9iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqW25hbWVdO1xuICAgIH0sXG4gICAgbG9va3VwOiBmdW5jdGlvbihkZXB0aHMsIG5hbWUpIHtcbiAgICAgIGNvbnN0IGxlbiA9IGRlcHRocy5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChkZXB0aHNbaV0gJiYgZGVwdGhzW2ldW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZGVwdGhzW2ldW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBsYW1iZGE6IGZ1bmN0aW9uKGN1cnJlbnQsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgY3VycmVudCA9PT0gJ2Z1bmN0aW9uJyA/IGN1cnJlbnQuY2FsbChjb250ZXh0KSA6IGN1cnJlbnQ7XG4gICAgfSxcblxuICAgIGVzY2FwZUV4cHJlc3Npb246IFV0aWxzLmVzY2FwZUV4cHJlc3Npb24sXG4gICAgaW52b2tlUGFydGlhbDogaW52b2tlUGFydGlhbFdyYXBwZXIsXG5cbiAgICBmbjogZnVuY3Rpb24oaSkge1xuICAgICAgbGV0IHJldCA9IHRlbXBsYXRlU3BlY1tpXTtcbiAgICAgIHJldC5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWNbaSArICdfZCddO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgcHJvZ3JhbXM6IFtdLFxuICAgIHByb2dyYW06IGZ1bmN0aW9uKGksIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICAgIGxldCBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0sXG4gICAgICAgICAgZm4gPSB0aGlzLmZuKGkpO1xuICAgICAgaWYgKGRhdGEgfHwgZGVwdGhzIHx8IGJsb2NrUGFyYW1zIHx8IGRlY2xhcmVkQmxvY2tQYXJhbXMpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgICB9IGVsc2UgaWYgKCFwcm9ncmFtV3JhcHBlcikge1xuICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0gPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZ3JhbVdyYXBwZXI7XG4gICAgfSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKHZhbHVlLCBkZXB0aCkge1xuICAgICAgd2hpbGUgKHZhbHVlICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5fcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgbWVyZ2U6IGZ1bmN0aW9uKHBhcmFtLCBjb21tb24pIHtcbiAgICAgIGxldCBvYmogPSBwYXJhbSB8fCBjb21tb247XG5cbiAgICAgIGlmIChwYXJhbSAmJiBjb21tb24gJiYgKHBhcmFtICE9PSBjb21tb24pKSB7XG4gICAgICAgIG9iaiA9IFV0aWxzLmV4dGVuZCh7fSwgY29tbW9uLCBwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICAvLyBBbiBlbXB0eSBvYmplY3QgdG8gdXNlIGFzIHJlcGxhY2VtZW50IGZvciBudWxsLWNvbnRleHRzXG4gICAgbnVsbENvbnRleHQ6IE9iamVjdC5zZWFsKHt9KSxcblxuICAgIG5vb3A6IGVudi5WTS5ub29wLFxuICAgIGNvbXBpbGVySW5mbzogdGVtcGxhdGVTcGVjLmNvbXBpbGVyXG4gIH07XG5cbiAgZnVuY3Rpb24gcmV0KGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuXG4gICAgcmV0Ll9zZXR1cChvcHRpb25zKTtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCAmJiB0ZW1wbGF0ZVNwZWMudXNlRGF0YSkge1xuICAgICAgZGF0YSA9IGluaXREYXRhKGNvbnRleHQsIGRhdGEpO1xuICAgIH1cbiAgICBsZXQgZGVwdGhzLFxuICAgICAgICBibG9ja1BhcmFtcyA9IHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyA/IFtdIDogdW5kZWZpbmVkO1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzKSB7XG4gICAgICBpZiAob3B0aW9ucy5kZXB0aHMpIHtcbiAgICAgICAgZGVwdGhzID0gY29udGV4dCAhPSBvcHRpb25zLmRlcHRoc1swXSA/IFtjb250ZXh0XS5jb25jYXQob3B0aW9ucy5kZXB0aHMpIDogb3B0aW9ucy5kZXB0aHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXB0aHMgPSBbY29udGV4dF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFpbihjb250ZXh0LyosIG9wdGlvbnMqLykge1xuICAgICAgcmV0dXJuICcnICsgdGVtcGxhdGVTcGVjLm1haW4oY29udGFpbmVyLCBjb250ZXh0LCBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICB9XG4gICAgbWFpbiA9IGV4ZWN1dGVEZWNvcmF0b3JzKHRlbXBsYXRlU3BlYy5tYWluLCBtYWluLCBjb250YWluZXIsIG9wdGlvbnMuZGVwdGhzIHx8IFtdLCBkYXRhLCBibG9ja1BhcmFtcyk7XG4gICAgcmV0dXJuIG1haW4oY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0LmlzVG9wID0gdHJ1ZTtcblxuICByZXQuX3NldHVwID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsKSB7XG4gICAgICBjb250YWluZXIuaGVscGVycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmhlbHBlcnMsIGVudi5oZWxwZXJzKTtcblxuICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsKSB7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLnBhcnRpYWxzLCBlbnYucGFydGlhbHMpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsIHx8IHRlbXBsYXRlU3BlYy51c2VEZWNvcmF0b3JzKSB7XG4gICAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMuZGVjb3JhdG9ycywgZW52LmRlY29yYXRvcnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXIuaGVscGVycyA9IG9wdGlvbnMuaGVscGVycztcbiAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9wdGlvbnMucGFydGlhbHM7XG4gICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IG9wdGlvbnMuZGVjb3JhdG9ycztcbiAgICB9XG4gIH07XG5cbiAgcmV0Ll9jaGlsZCA9IGZ1bmN0aW9uKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZUJsb2NrUGFyYW1zICYmICFibG9ja1BhcmFtcykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocyAmJiAhZGVwdGhzKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdtdXN0IHBhc3MgcGFyZW50IGRlcHRocycpO1xuICAgIH1cblxuICAgIHJldHVybiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIHRlbXBsYXRlU3BlY1tpXSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gIGZ1bmN0aW9uIHByb2coY29udGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGN1cnJlbnREZXB0aHMgPSBkZXB0aHM7XG4gICAgaWYgKGRlcHRocyAmJiBjb250ZXh0ICE9IGRlcHRoc1swXSAmJiAhKGNvbnRleHQgPT09IGNvbnRhaW5lci5udWxsQ29udGV4dCAmJiBkZXB0aHNbMF0gPT09IG51bGwpKSB7XG4gICAgICBjdXJyZW50RGVwdGhzID0gW2NvbnRleHRdLmNvbmNhdChkZXB0aHMpO1xuICAgIH1cblxuICAgIHJldHVybiBmbihjb250YWluZXIsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNvbnRhaW5lci5oZWxwZXJzLCBjb250YWluZXIucGFydGlhbHMsXG4gICAgICAgIG9wdGlvbnMuZGF0YSB8fCBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtcyAmJiBbb3B0aW9ucy5ibG9ja1BhcmFtc10uY29uY2F0KGJsb2NrUGFyYW1zKSxcbiAgICAgICAgY3VycmVudERlcHRocyk7XG4gIH1cblxuICBwcm9nID0gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcyk7XG5cbiAgcHJvZy5wcm9ncmFtID0gaTtcbiAgcHJvZy5kZXB0aCA9IGRlcHRocyA/IGRlcHRocy5sZW5ndGggOiAwO1xuICBwcm9nLmJsb2NrUGFyYW1zID0gZGVjbGFyZWRCbG9ja1BhcmFtcyB8fCAwO1xuICByZXR1cm4gcHJvZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKCFwYXJ0aWFsKSB7XG4gICAgaWYgKG9wdGlvbnMubmFtZSA9PT0gJ0BwYXJ0aWFsLWJsb2NrJykge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdO1xuICAgIH1cbiAgfSBlbHNlIGlmICghcGFydGlhbC5jYWxsICYmICFvcHRpb25zLm5hbWUpIHtcbiAgICAvLyBUaGlzIGlzIGEgZHluYW1pYyBwYXJ0aWFsIHRoYXQgcmV0dXJuZWQgYSBzdHJpbmdcbiAgICBvcHRpb25zLm5hbWUgPSBwYXJ0aWFsO1xuICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW3BhcnRpYWxdO1xuICB9XG4gIHJldHVybiBwYXJ0aWFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52b2tlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIC8vIFVzZSB0aGUgY3VycmVudCBjbG9zdXJlIGNvbnRleHQgdG8gc2F2ZSB0aGUgcGFydGlhbC1ibG9jayBpZiB0aGlzIHBhcnRpYWxcbiAgY29uc3QgY3VycmVudFBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgb3B0aW9ucy5wYXJ0aWFsID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoID0gb3B0aW9ucy5pZHNbMF0gfHwgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoO1xuICB9XG5cbiAgbGV0IHBhcnRpYWxCbG9jaztcbiAgaWYgKG9wdGlvbnMuZm4gJiYgb3B0aW9ucy5mbiAhPT0gbm9vcCkge1xuICAgIG9wdGlvbnMuZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgLy8gV3JhcHBlciBmdW5jdGlvbiB0byBnZXQgYWNjZXNzIHRvIGN1cnJlbnRQYXJ0aWFsQmxvY2sgZnJvbSB0aGUgY2xvc3VyZVxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm47XG4gICAgcGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBmdW5jdGlvbiBwYXJ0aWFsQmxvY2tXcmFwcGVyKGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuXG4gICAgICAvLyBSZXN0b3JlIHRoZSBwYXJ0aWFsLWJsb2NrIGZyb20gdGhlIGNsb3N1cmUgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhlIGJsb2NrXG4gICAgICAvLyBpLmUuIHRoZSBwYXJ0IGluc2lkZSB0aGUgYmxvY2sgb2YgdGhlIHBhcnRpYWwgY2FsbC5cbiAgICAgIG9wdGlvbnMuZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGN1cnJlbnRQYXJ0aWFsQmxvY2s7XG4gICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBpZiAoZm4ucGFydGlhbHMpIHtcbiAgICAgIG9wdGlvbnMucGFydGlhbHMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucGFydGlhbHMsIGZuLnBhcnRpYWxzKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkICYmIHBhcnRpYWxCbG9jaykge1xuICAgIHBhcnRpYWwgPSBwYXJ0aWFsQmxvY2s7XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGhlIHBhcnRpYWwgJyArIG9wdGlvbnMubmFtZSArICcgY291bGQgbm90IGJlIGZvdW5kJyk7XG4gIH0gZWxzZSBpZiAocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHBhcnRpYWwoY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IHJldHVybiAnJzsgfVxuXG5mdW5jdGlvbiBpbml0RGF0YShjb250ZXh0LCBkYXRhKSB7XG4gIGlmICghZGF0YSB8fCAhKCdyb290JyBpbiBkYXRhKSkge1xuICAgIGRhdGEgPSBkYXRhID8gY3JlYXRlRnJhbWUoZGF0YSkgOiB7fTtcbiAgICBkYXRhLnJvb3QgPSBjb250ZXh0O1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKSB7XG4gIGlmIChmbi5kZWNvcmF0b3IpIHtcbiAgICBsZXQgcHJvcHMgPSB7fTtcbiAgICBwcm9nID0gZm4uZGVjb3JhdG9yKHByb2csIHByb3BzLCBjb250YWluZXIsIGRlcHRocyAmJiBkZXB0aHNbMF0sIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgIFV0aWxzLmV4dGVuZChwcm9nLCBwcm9wcyk7XG4gIH1cbiAgcmV0dXJuIHByb2c7XG59XG4iLCIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiIsImNvbnN0IGVzY2FwZSA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjeDI3OycsXG4gICdgJzogJyYjeDYwOycsXG4gICc9JzogJyYjeDNEOydcbn07XG5cbmNvbnN0IGJhZENoYXJzID0gL1smPD5cIidgPV0vZyxcbiAgICAgIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuICByZXR1cm4gZXNjYXBlW2Nocl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQob2JqLyogLCAuLi5zb3VyY2UgKi8pIHtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tpXSwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBsZXQgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBTb3VyY2VkIGZyb20gbG9kYXNoXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvbG9kYXNoL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0XG4vKiBlc2xpbnQtZGlzYWJsZSBmdW5jLXN0eWxlICovXG5sZXQgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59O1xuLy8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGlzRnVuY3Rpb24oL3gvKSkge1xuICBpc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICB9O1xufVxuZXhwb3J0IHtpc0Z1bmN0aW9ufTtcbi8qIGVzbGludC1lbmFibGUgZnVuYy1zdHlsZSAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykgPyB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJyA6IGZhbHNlO1xufTtcblxuLy8gT2xkZXIgSUUgdmVyc2lvbnMgZG8gbm90IGRpcmVjdGx5IHN1cHBvcnQgaW5kZXhPZiBzbyB3ZSBtdXN0IGltcGxlbWVudCBvdXIgb3duLCBzYWRseS5cbmV4cG9ydCBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVFeHByZXNzaW9uKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBlc2NhcGUgU2FmZVN0cmluZ3MsIHNpbmNlIHRoZXkncmUgYWxyZWFkeSBzYWZlXG4gICAgaWYgKHN0cmluZyAmJiBzdHJpbmcudG9IVE1MKSB7XG4gICAgICByZXR1cm4gc3RyaW5nLnRvSFRNTCgpO1xuICAgIH0gZWxzZSBpZiAoc3RyaW5nID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9IGVsc2UgaWYgKCFzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcgKyAnJztcbiAgICB9XG5cbiAgICAvLyBGb3JjZSBhIHN0cmluZyBjb252ZXJzaW9uIGFzIHRoaXMgd2lsbCBiZSBkb25lIGJ5IHRoZSBhcHBlbmQgcmVnYXJkbGVzcyBhbmRcbiAgICAvLyB0aGUgcmVnZXggdGVzdCB3aWxsIGRvIHRoaXMgdHJhbnNwYXJlbnRseSBiZWhpbmQgdGhlIHNjZW5lcywgY2F1c2luZyBpc3N1ZXMgaWZcbiAgICAvLyBhbiBvYmplY3QncyB0byBzdHJpbmcgaGFzIGVzY2FwZWQgY2hhcmFjdGVycyBpbiBpdC5cbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZztcbiAgfVxuXG4gIGlmICghcG9zc2libGUudGVzdChzdHJpbmcpKSB7IHJldHVybiBzdHJpbmc7IH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGJhZENoYXJzLCBlc2NhcGVDaGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRnJhbWUob2JqZWN0KSB7XG4gIGxldCBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcbiAgZnJhbWUuX3BhcmVudCA9IG9iamVjdDtcbiAgcmV0dXJuIGZyYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxvY2tQYXJhbXMocGFyYW1zLCBpZHMpIHtcbiAgcGFyYW1zLnBhdGggPSBpZHM7XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgcmV0dXJuIChjb250ZXh0UGF0aCA/IGNvbnRleHRQYXRoICsgJy4nIDogJycpICsgaWQ7XG59XG4iLCIvLyBVU0FHRTpcbi8vIHZhciBoYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdmFyICovXG5cbi8vIHZhciBsb2NhbCA9IGhhbmRsZWJhcnMuY3JlYXRlKCk7XG5cbnZhciBoYW5kbGViYXJzID0gcmVxdWlyZSgnLi4vZGlzdC9janMvaGFuZGxlYmFycycpWydkZWZhdWx0J107XG5cbnZhciBwcmludGVyID0gcmVxdWlyZSgnLi4vZGlzdC9janMvaGFuZGxlYmFycy9jb21waWxlci9wcmludGVyJyk7XG5oYW5kbGViYXJzLlByaW50VmlzaXRvciA9IHByaW50ZXIuUHJpbnRWaXNpdG9yO1xuaGFuZGxlYmFycy5wcmludCA9IHByaW50ZXIucHJpbnQ7XG5cbm1vZHVsZS5leHBvcnRzID0gaGFuZGxlYmFycztcblxuLy8gUHVibGlzaCBhIE5vZGUuanMgcmVxdWlyZSgpIGhhbmRsZXIgZm9yIC5oYW5kbGViYXJzIGFuZCAuaGJzIGZpbGVzXG5mdW5jdGlvbiBleHRlbnNpb24obW9kdWxlLCBmaWxlbmFtZSkge1xuICB2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuICB2YXIgdGVtcGxhdGVTdHJpbmcgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGY4Jyk7XG4gIG1vZHVsZS5leHBvcnRzID0gaGFuZGxlYmFycy5jb21waWxlKHRlbXBsYXRlU3RyaW5nKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5pZiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnICYmIHJlcXVpcmUuZXh0ZW5zaW9ucykge1xuICByZXF1aXJlLmV4dGVuc2lvbnNbJy5oYW5kbGViYXJzJ10gPSBleHRlbnNpb247XG4gIHJlcXVpcmUuZXh0ZW5zaW9uc1snLmhicyddID0gZXh0ZW5zaW9uO1xufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDA5LTIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLnR4dCBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuZXhwb3J0cy5Tb3VyY2VNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL3NvdXJjZS1tYXAvc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gcmVxdWlyZSgnLi9zb3VyY2UtbWFwL3NvdXJjZS1tYXAtY29uc3VtZXInKS5Tb3VyY2VNYXBDb25zdW1lcjtcbmV4cG9ydHMuU291cmNlTm9kZSA9IHJlcXVpcmUoJy4vc291cmNlLW1hcC9zb3VyY2Utbm9kZScpLlNvdXJjZU5vZGU7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5pZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBkZWZpbmUgPSByZXF1aXJlKCdhbWRlZmluZScpKG1vZHVsZSwgcmVxdWlyZSk7XG59XG5kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4gIHZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbiAgLyoqXG4gICAqIEEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggaXMgYSBjb21iaW5hdGlvbiBvZiBhbiBhcnJheSBhbmQgYSBzZXQuIEFkZGluZyBhIG5ld1xuICAgKiBtZW1iZXIgaXMgTygxKSwgdGVzdGluZyBmb3IgbWVtYmVyc2hpcCBpcyBPKDEpLCBhbmQgZmluZGluZyB0aGUgaW5kZXggb2YgYW5cbiAgICogZWxlbWVudCBpcyBPKDEpLiBSZW1vdmluZyBlbGVtZW50cyBmcm9tIHRoZSBzZXQgaXMgbm90IHN1cHBvcnRlZC4gT25seVxuICAgKiBzdHJpbmdzIGFyZSBzdXBwb3J0ZWQgZm9yIG1lbWJlcnNoaXAuXG4gICAqL1xuICBmdW5jdGlvbiBBcnJheVNldCgpIHtcbiAgICB0aGlzLl9hcnJheSA9IFtdO1xuICAgIHRoaXMuX3NldCA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXRpYyBtZXRob2QgZm9yIGNyZWF0aW5nIEFycmF5U2V0IGluc3RhbmNlcyBmcm9tIGFuIGV4aXN0aW5nIGFycmF5LlxuICAgKi9cbiAgQXJyYXlTZXQuZnJvbUFycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfZnJvbUFycmF5KGFBcnJheSwgYUFsbG93RHVwbGljYXRlcykge1xuICAgIHZhciBzZXQgPSBuZXcgQXJyYXlTZXQoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYUFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBzZXQuYWRkKGFBcnJheVtpXSwgYUFsbG93RHVwbGljYXRlcyk7XG4gICAgfVxuICAgIHJldHVybiBzZXQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybiBob3cgbWFueSB1bmlxdWUgaXRlbXMgYXJlIGluIHRoaXMgQXJyYXlTZXQuIElmIGR1cGxpY2F0ZXMgaGF2ZSBiZWVuXG4gICAqIGFkZGVkLCB0aGFuIHRob3NlIGRvIG5vdCBjb3VudCB0b3dhcmRzIHRoZSBzaXplLlxuICAgKlxuICAgKiBAcmV0dXJucyBOdW1iZXJcbiAgICovXG4gIEFycmF5U2V0LnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gQXJyYXlTZXRfc2l6ZSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fc2V0KS5sZW5ndGg7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCB0aGUgZ2l2ZW4gc3RyaW5nIHRvIHRoaXMgc2V0LlxuICAgKlxuICAgKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAgICovXG4gIEFycmF5U2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBBcnJheVNldF9hZGQoYVN0ciwgYUFsbG93RHVwbGljYXRlcykge1xuICAgIHZhciBpc0R1cGxpY2F0ZSA9IHRoaXMuaGFzKGFTdHIpO1xuICAgIHZhciBpZHggPSB0aGlzLl9hcnJheS5sZW5ndGg7XG4gICAgaWYgKCFpc0R1cGxpY2F0ZSB8fCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgICB0aGlzLl9hcnJheS5wdXNoKGFTdHIpO1xuICAgIH1cbiAgICBpZiAoIWlzRHVwbGljYXRlKSB7XG4gICAgICB0aGlzLl9zZXRbdXRpbC50b1NldFN0cmluZyhhU3RyKV0gPSBpZHg7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBJcyB0aGUgZ2l2ZW4gc3RyaW5nIGEgbWVtYmVyIG9mIHRoaXMgc2V0P1xuICAgKlxuICAgKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAgICovXG4gIEFycmF5U2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBBcnJheVNldF9oYXMoYVN0cikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC50b1NldFN0cmluZyhhU3RyKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoYXQgaXMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBzdHJpbmcgaW4gdGhlIGFycmF5P1xuICAgKlxuICAgKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAgICovXG4gIEFycmF5U2V0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gQXJyYXlTZXRfaW5kZXhPZihhU3RyKSB7XG4gICAgaWYgKHRoaXMuaGFzKGFTdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2V0W3V0aWwudG9TZXRTdHJpbmcoYVN0cildO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTdHIgKyAnXCIgaXMgbm90IGluIHRoZSBzZXQuJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoYXQgaXMgdGhlIGVsZW1lbnQgYXQgdGhlIGdpdmVuIGluZGV4P1xuICAgKlxuICAgKiBAcGFyYW0gTnVtYmVyIGFJZHhcbiAgICovXG4gIEFycmF5U2V0LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uIEFycmF5U2V0X2F0KGFJZHgpIHtcbiAgICBpZiAoYUlkeCA+PSAwICYmIGFJZHggPCB0aGlzLl9hcnJheS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hcnJheVthSWR4XTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBlbGVtZW50IGluZGV4ZWQgYnkgJyArIGFJZHgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNldCAod2hpY2ggaGFzIHRoZSBwcm9wZXIgaW5kaWNlc1xuICAgKiBpbmRpY2F0ZWQgYnkgaW5kZXhPZikuIE5vdGUgdGhhdCB0aGlzIGlzIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgYXJyYXkgdXNlZFxuICAgKiBmb3Igc3RvcmluZyB0aGUgbWVtYmVycyBzbyB0aGF0IG5vIG9uZSBjYW4gbWVzcyB3aXRoIGludGVybmFsIHN0YXRlLlxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBBcnJheVNldF90b0FycmF5KCkge1xuICAgIHJldHVybiB0aGlzLl9hcnJheS5zbGljZSgpO1xuICB9O1xuXG4gIGV4cG9ydHMuQXJyYXlTZXQgPSBBcnJheVNldDtcblxufSk7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICpcbiAqIEJhc2VkIG9uIHRoZSBCYXNlIDY0IFZMUSBpbXBsZW1lbnRhdGlvbiBpbiBDbG9zdXJlIENvbXBpbGVyOlxuICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jbG9zdXJlLWNvbXBpbGVyL3NvdXJjZS9icm93c2UvdHJ1bmsvc3JjL2NvbS9nb29nbGUvZGVidWdnaW5nL3NvdXJjZW1hcC9CYXNlNjRWTFEuamF2YVxuICpcbiAqIENvcHlyaWdodCAyMDExIFRoZSBDbG9zdXJlIENvbXBpbGVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZVxuICogICAgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiAqICAgIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZFxuICogICAgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogICogTmVpdGhlciB0aGUgbmFtZSBvZiBHb29nbGUgSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkXG4gKiAgICBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcbiAqIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWVxuICogVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5pZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBkZWZpbmUgPSByZXF1aXJlKCdhbWRlZmluZScpKG1vZHVsZSwgcmVxdWlyZSk7XG59XG5kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4gIHZhciBiYXNlNjQgPSByZXF1aXJlKCcuL2Jhc2U2NCcpO1xuXG4gIC8vIEEgc2luZ2xlIGJhc2UgNjQgZGlnaXQgY2FuIGNvbnRhaW4gNiBiaXRzIG9mIGRhdGEuIEZvciB0aGUgYmFzZSA2NCB2YXJpYWJsZVxuICAvLyBsZW5ndGggcXVhbnRpdGllcyB3ZSB1c2UgaW4gdGhlIHNvdXJjZSBtYXAgc3BlYywgdGhlIGZpcnN0IGJpdCBpcyB0aGUgc2lnbixcbiAgLy8gdGhlIG5leHQgZm91ciBiaXRzIGFyZSB0aGUgYWN0dWFsIHZhbHVlLCBhbmQgdGhlIDZ0aCBiaXQgaXMgdGhlXG4gIC8vIGNvbnRpbnVhdGlvbiBiaXQuIFRoZSBjb250aW51YXRpb24gYml0IHRlbGxzIHVzIHdoZXRoZXIgdGhlcmUgYXJlIG1vcmVcbiAgLy8gZGlnaXRzIGluIHRoaXMgdmFsdWUgZm9sbG93aW5nIHRoaXMgZGlnaXQuXG4gIC8vXG4gIC8vICAgQ29udGludWF0aW9uXG4gIC8vICAgfCAgICBTaWduXG4gIC8vICAgfCAgICB8XG4gIC8vICAgViAgICBWXG4gIC8vICAgMTAxMDExXG5cbiAgdmFyIFZMUV9CQVNFX1NISUZUID0gNTtcblxuICAvLyBiaW5hcnk6IDEwMDAwMFxuICB2YXIgVkxRX0JBU0UgPSAxIDw8IFZMUV9CQVNFX1NISUZUO1xuXG4gIC8vIGJpbmFyeTogMDExMTExXG4gIHZhciBWTFFfQkFTRV9NQVNLID0gVkxRX0JBU0UgLSAxO1xuXG4gIC8vIGJpbmFyeTogMTAwMDAwXG4gIHZhciBWTFFfQ09OVElOVUFUSU9OX0JJVCA9IFZMUV9CQVNFO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBmcm9tIGEgdHdvLWNvbXBsZW1lbnQgdmFsdWUgdG8gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAgICogcGxhY2VkIGluIHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQuICBGb3IgZXhhbXBsZSwgYXMgZGVjaW1hbHM6XG4gICAqICAgMSBiZWNvbWVzIDIgKDEwIGJpbmFyeSksIC0xIGJlY29tZXMgMyAoMTEgYmluYXJ5KVxuICAgKiAgIDIgYmVjb21lcyA0ICgxMDAgYmluYXJ5KSwgLTIgYmVjb21lcyA1ICgxMDEgYmluYXJ5KVxuICAgKi9cbiAgZnVuY3Rpb24gdG9WTFFTaWduZWQoYVZhbHVlKSB7XG4gICAgcmV0dXJuIGFWYWx1ZSA8IDBcbiAgICAgID8gKCgtYVZhbHVlKSA8PCAxKSArIDFcbiAgICAgIDogKGFWYWx1ZSA8PCAxKSArIDA7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdG8gYSB0d28tY29tcGxlbWVudCB2YWx1ZSBmcm9tIGEgdmFsdWUgd2hlcmUgdGhlIHNpZ24gYml0IGlzXG4gICAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICAgKiAgIDIgKDEwIGJpbmFyeSkgYmVjb21lcyAxLCAzICgxMSBiaW5hcnkpIGJlY29tZXMgLTFcbiAgICogICA0ICgxMDAgYmluYXJ5KSBiZWNvbWVzIDIsIDUgKDEwMSBiaW5hcnkpIGJlY29tZXMgLTJcbiAgICovXG4gIGZ1bmN0aW9uIGZyb21WTFFTaWduZWQoYVZhbHVlKSB7XG4gICAgdmFyIGlzTmVnYXRpdmUgPSAoYVZhbHVlICYgMSkgPT09IDE7XG4gICAgdmFyIHNoaWZ0ZWQgPSBhVmFsdWUgPj4gMTtcbiAgICByZXR1cm4gaXNOZWdhdGl2ZVxuICAgICAgPyAtc2hpZnRlZFxuICAgICAgOiBzaGlmdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJhc2UgNjQgVkxRIGVuY29kZWQgdmFsdWUuXG4gICAqL1xuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIGJhc2U2NFZMUV9lbmNvZGUoYVZhbHVlKSB7XG4gICAgdmFyIGVuY29kZWQgPSBcIlwiO1xuICAgIHZhciBkaWdpdDtcblxuICAgIHZhciB2bHEgPSB0b1ZMUVNpZ25lZChhVmFsdWUpO1xuXG4gICAgZG8ge1xuICAgICAgZGlnaXQgPSB2bHEgJiBWTFFfQkFTRV9NQVNLO1xuICAgICAgdmxxID4+Pj0gVkxRX0JBU0VfU0hJRlQ7XG4gICAgICBpZiAodmxxID4gMCkge1xuICAgICAgICAvLyBUaGVyZSBhcmUgc3RpbGwgbW9yZSBkaWdpdHMgaW4gdGhpcyB2YWx1ZSwgc28gd2UgbXVzdCBtYWtlIHN1cmUgdGhlXG4gICAgICAgIC8vIGNvbnRpbnVhdGlvbiBiaXQgaXMgbWFya2VkLlxuICAgICAgICBkaWdpdCB8PSBWTFFfQ09OVElOVUFUSU9OX0JJVDtcbiAgICAgIH1cbiAgICAgIGVuY29kZWQgKz0gYmFzZTY0LmVuY29kZShkaWdpdCk7XG4gICAgfSB3aGlsZSAodmxxID4gMCk7XG5cbiAgICByZXR1cm4gZW5jb2RlZDtcbiAgfTtcblxuICAvKipcbiAgICogRGVjb2RlcyB0aGUgbmV4dCBiYXNlIDY0IFZMUSB2YWx1ZSBmcm9tIHRoZSBnaXZlbiBzdHJpbmcgYW5kIHJldHVybnMgdGhlXG4gICAqIHZhbHVlIGFuZCB0aGUgcmVzdCBvZiB0aGUgc3RyaW5nIHZpYSB0aGUgb3V0IHBhcmFtZXRlci5cbiAgICovXG4gIGV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2RlY29kZShhU3RyLCBhSW5kZXgsIGFPdXRQYXJhbSkge1xuICAgIHZhciBzdHJMZW4gPSBhU3RyLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICB2YXIgc2hpZnQgPSAwO1xuICAgIHZhciBjb250aW51YXRpb24sIGRpZ2l0O1xuXG4gICAgZG8ge1xuICAgICAgaWYgKGFJbmRleCA+PSBzdHJMZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgbW9yZSBkaWdpdHMgaW4gYmFzZSA2NCBWTFEgdmFsdWUuXCIpO1xuICAgICAgfVxuXG4gICAgICBkaWdpdCA9IGJhc2U2NC5kZWNvZGUoYVN0ci5jaGFyQ29kZUF0KGFJbmRleCsrKSk7XG4gICAgICBpZiAoZGlnaXQgPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGRpZ2l0OiBcIiArIGFTdHIuY2hhckF0KGFJbmRleCAtIDEpKTtcbiAgICAgIH1cblxuICAgICAgY29udGludWF0aW9uID0gISEoZGlnaXQgJiBWTFFfQ09OVElOVUFUSU9OX0JJVCk7XG4gICAgICBkaWdpdCAmPSBWTFFfQkFTRV9NQVNLO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgKGRpZ2l0IDw8IHNoaWZ0KTtcbiAgICAgIHNoaWZ0ICs9IFZMUV9CQVNFX1NISUZUO1xuICAgIH0gd2hpbGUgKGNvbnRpbnVhdGlvbik7XG5cbiAgICBhT3V0UGFyYW0udmFsdWUgPSBmcm9tVkxRU2lnbmVkKHJlc3VsdCk7XG4gICAgYU91dFBhcmFtLnJlc3QgPSBhSW5kZXg7XG4gIH07XG5cbn0pO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZGVmaW5lID0gcmVxdWlyZSgnYW1kZWZpbmUnKShtb2R1bGUsIHJlcXVpcmUpO1xufVxuZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblxuICB2YXIgaW50VG9DaGFyTWFwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLnNwbGl0KCcnKTtcblxuICAvKipcbiAgICogRW5jb2RlIGFuIGludGVnZXIgaW4gdGhlIHJhbmdlIG9mIDAgdG8gNjMgdG8gYSBzaW5nbGUgYmFzZSA2NCBkaWdpdC5cbiAgICovXG4gIGV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG51bWJlcikge1xuICAgIGlmICgwIDw9IG51bWJlciAmJiBudW1iZXIgPCBpbnRUb0NoYXJNYXAubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gaW50VG9DaGFyTWFwW251bWJlcl07XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJNdXN0IGJlIGJldHdlZW4gMCBhbmQgNjM6IFwiICsgYU51bWJlcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIHNpbmdsZSBiYXNlIDY0IGNoYXJhY3RlciBjb2RlIGRpZ2l0IHRvIGFuIGludGVnZXIuIFJldHVybnMgLTEgb25cbiAgICogZmFpbHVyZS5cbiAgICovXG4gIGV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gKGNoYXJDb2RlKSB7XG4gICAgdmFyIGJpZ0EgPSA2NTsgICAgIC8vICdBJ1xuICAgIHZhciBiaWdaID0gOTA7ICAgICAvLyAnWidcblxuICAgIHZhciBsaXR0bGVBID0gOTc7ICAvLyAnYSdcbiAgICB2YXIgbGl0dGxlWiA9IDEyMjsgLy8gJ3onXG5cbiAgICB2YXIgemVybyA9IDQ4OyAgICAgLy8gJzAnXG4gICAgdmFyIG5pbmUgPSA1NzsgICAgIC8vICc5J1xuXG4gICAgdmFyIHBsdXMgPSA0MzsgICAgIC8vICcrJ1xuICAgIHZhciBzbGFzaCA9IDQ3OyAgICAvLyAnLydcblxuICAgIHZhciBsaXR0bGVPZmZzZXQgPSAyNjtcbiAgICB2YXIgbnVtYmVyT2Zmc2V0ID0gNTI7XG5cbiAgICAvLyAwIC0gMjU6IEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXG4gICAgaWYgKGJpZ0EgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gYmlnWikge1xuICAgICAgcmV0dXJuIChjaGFyQ29kZSAtIGJpZ0EpO1xuICAgIH1cblxuICAgIC8vIDI2IC0gNTE6IGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XG4gICAgaWYgKGxpdHRsZUEgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gbGl0dGxlWikge1xuICAgICAgcmV0dXJuIChjaGFyQ29kZSAtIGxpdHRsZUEgKyBsaXR0bGVPZmZzZXQpO1xuICAgIH1cblxuICAgIC8vIDUyIC0gNjE6IDAxMjM0NTY3ODlcbiAgICBpZiAoemVybyA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBuaW5lKSB7XG4gICAgICByZXR1cm4gKGNoYXJDb2RlIC0gemVybyArIG51bWJlck9mZnNldCk7XG4gICAgfVxuXG4gICAgLy8gNjI6ICtcbiAgICBpZiAoY2hhckNvZGUgPT0gcGx1cykge1xuICAgICAgcmV0dXJuIDYyO1xuICAgIH1cblxuICAgIC8vIDYzOiAvXG4gICAgaWYgKGNoYXJDb2RlID09IHNsYXNoKSB7XG4gICAgICByZXR1cm4gNjM7XG4gICAgfVxuXG4gICAgLy8gSW52YWxpZCBiYXNlNjQgZGlnaXQuXG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCA9IDE7XG4gIGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4gIC8qKlxuICAgKiBSZWN1cnNpdmUgaW1wbGVtZW50YXRpb24gb2YgYmluYXJ5IHNlYXJjaC5cbiAgICpcbiAgICogQHBhcmFtIGFMb3cgSW5kaWNlcyBoZXJlIGFuZCBsb3dlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICAgKiBAcGFyYW0gYUhpZ2ggSW5kaWNlcyBoZXJlIGFuZCBoaWdoZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAgICogQHBhcmFtIGFOZWVkbGUgVGhlIGVsZW1lbnQgYmVpbmcgc2VhcmNoZWQgZm9yLlxuICAgKiBAcGFyYW0gYUhheXN0YWNrIFRoZSBub24tZW1wdHkgYXJyYXkgYmVpbmcgc2VhcmNoZWQuXG4gICAqIEBwYXJhbSBhQ29tcGFyZSBGdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gZWxlbWVudHMgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEuXG4gICAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAgICogICAgICdiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gICAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gICAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAgICovXG4gIGZ1bmN0aW9uIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpIHtcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHRlcm1pbmF0ZXMgd2hlbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICAgIC8vXG4gICAgLy8gICAxLiBXZSBmaW5kIHRoZSBleGFjdCBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgICAvL1xuICAgIC8vICAgMi4gV2UgZGlkIG5vdCBmaW5kIHRoZSBleGFjdCBlbGVtZW50LCBidXQgd2UgY2FuIHJldHVybiB0aGUgaW5kZXggb2ZcbiAgICAvLyAgICAgIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudC5cbiAgICAvL1xuICAgIC8vICAgMy4gV2UgZGlkIG5vdCBmaW5kIHRoZSBleGFjdCBlbGVtZW50LCBhbmQgdGhlcmUgaXMgbm8gbmV4dC1jbG9zZXN0XG4gICAgLy8gICAgICBlbGVtZW50IHRoYW4gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvciwgc28gd2UgcmV0dXJuIC0xLlxuICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChhSGlnaCAtIGFMb3cpIC8gMikgKyBhTG93O1xuICAgIHZhciBjbXAgPSBhQ29tcGFyZShhTmVlZGxlLCBhSGF5c3RhY2tbbWlkXSwgdHJ1ZSk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgLy8gRm91bmQgdGhlIGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAgICAgcmV0dXJuIG1pZDtcbiAgICB9XG4gICAgZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgLy8gT3VyIG5lZWRsZSBpcyBncmVhdGVyIHRoYW4gYUhheXN0YWNrW21pZF0uXG4gICAgICBpZiAoYUhpZ2ggLSBtaWQgPiAxKSB7XG4gICAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSB1cHBlciBoYWxmLlxuICAgICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKG1pZCwgYUhpZ2gsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGV4YWN0IG5lZWRsZSBlbGVtZW50IHdhcyBub3QgZm91bmQgaW4gdGhpcyBoYXlzdGFjay4gRGV0ZXJtaW5lIGlmXG4gICAgICAvLyB3ZSBhcmUgaW4gdGVybWluYXRpb24gY2FzZSAoMykgb3IgKDIpIGFuZCByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHRoaW5nLlxuICAgICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgICAgcmV0dXJuIGFIaWdoIDwgYUhheXN0YWNrLmxlbmd0aCA/IGFIaWdoIDogLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWlkO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIE91ciBuZWVkbGUgaXMgbGVzcyB0aGFuIGFIYXlzdGFja1ttaWRdLlxuICAgICAgaWYgKG1pZCAtIGFMb3cgPiAxKSB7XG4gICAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSBsb3dlciBoYWxmLlxuICAgICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKGFMb3csIG1pZCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgICAgfVxuXG4gICAgICAvLyB3ZSBhcmUgaW4gdGVybWluYXRpb24gY2FzZSAoMykgb3IgKDIpIGFuZCByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHRoaW5nLlxuICAgICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgICAgcmV0dXJuIG1pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhTG93IDwgMCA/IC0xIDogYUxvdztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoIHdoaWNoIHdpbGwgYWx3YXlzIHRyeSBhbmQgcmV0dXJuXG4gICAqIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBlbGVtZW50IGlmIHRoZXJlIGlzIG5vIGV4YWN0IGhpdC4gVGhpcyBpcyBiZWNhdXNlXG4gICAqIG1hcHBpbmdzIGJldHdlZW4gb3JpZ2luYWwgYW5kIGdlbmVyYXRlZCBsaW5lL2NvbCBwYWlycyBhcmUgc2luZ2xlIHBvaW50cyxcbiAgICogYW5kIHRoZXJlIGlzIGFuIGltcGxpY2l0IHJlZ2lvbiBiZXR3ZWVuIGVhY2ggb2YgdGhlbSwgc28gYSBtaXNzIGp1c3QgbWVhbnNcbiAgICogdGhhdCB5b3UgYXJlbid0IG9uIHRoZSB2ZXJ5IHN0YXJ0IG9mIGEgcmVnaW9uLlxuICAgKlxuICAgKiBAcGFyYW0gYU5lZWRsZSBUaGUgZWxlbWVudCB5b3UgYXJlIGxvb2tpbmcgZm9yLlxuICAgKiBAcGFyYW0gYUhheXN0YWNrIFRoZSBhcnJheSB0aGF0IGlzIGJlaW5nIHNlYXJjaGVkLlxuICAgKiBAcGFyYW0gYUNvbXBhcmUgQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0aGUgbmVlZGxlIGFuZCBhbiBlbGVtZW50IGluIHRoZVxuICAgKiAgICAgYXJyYXkgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIG5lZWRsZSBpcyBsZXNzXG4gICAqICAgICB0aGFuLCBlcXVhbCB0bywgb3IgZ3JlYXRlciB0aGFuIHRoZSBlbGVtZW50LCByZXNwZWN0aXZlbHkuXG4gICAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAgICogICAgICdiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gICAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gICAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAgICogICAgIERlZmF1bHRzIHRvICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICAgKi9cbiAgZXhwb3J0cy5zZWFyY2ggPSBmdW5jdGlvbiBzZWFyY2goYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpIHtcbiAgICBpZiAoYUhheXN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IHJlY3Vyc2l2ZVNlYXJjaCgtMSwgYUhheXN0YWNrLmxlbmd0aCwgYU5lZWRsZSwgYUhheXN0YWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ29tcGFyZSwgYUJpYXMgfHwgZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8vIFdlIGhhdmUgZm91bmQgZWl0aGVyIHRoZSBleGFjdCBlbGVtZW50LCBvciB0aGUgbmV4dC1jbG9zZXN0IGVsZW1lbnQgdGhhblxuICAgIC8vIHRoZSBvbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IuIEhvd2V2ZXIsIHRoZXJlIG1heSBiZSBtb3JlIHRoYW4gb25lIHN1Y2hcbiAgICAvLyBlbGVtZW50LiBNYWtlIHN1cmUgd2UgYWx3YXlzIHJldHVybiB0aGUgc21hbGxlc3Qgb2YgdGhlc2UuXG4gICAgd2hpbGUgKGluZGV4IC0gMSA+PSAwKSB7XG4gICAgICBpZiAoYUNvbXBhcmUoYUhheXN0YWNrW2luZGV4XSwgYUhheXN0YWNrW2luZGV4IC0gMV0sIHRydWUpICE9PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLS1pbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5kZXg7XG4gIH07XG5cbn0pO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDE0IE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZGVmaW5lID0gcmVxdWlyZSgnYW1kZWZpbmUnKShtb2R1bGUsIHJlcXVpcmUpO1xufVxuZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblxuICB2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciBtYXBwaW5nQiBpcyBhZnRlciBtYXBwaW5nQSB3aXRoIHJlc3BlY3QgdG8gZ2VuZXJhdGVkXG4gICAqIHBvc2l0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2VuZXJhdGVkUG9zaXRpb25BZnRlcihtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgICAvLyBPcHRpbWl6ZWQgZm9yIG1vc3QgY29tbW9uIGNhc2VcbiAgICB2YXIgbGluZUEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lO1xuICAgIHZhciBsaW5lQiA9IG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gICAgdmFyIGNvbHVtbkEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW47XG4gICAgdmFyIGNvbHVtbkIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gICAgcmV0dXJuIGxpbmVCID4gbGluZUEgfHwgbGluZUIgPT0gbGluZUEgJiYgY29sdW1uQiA+PSBjb2x1bW5BIHx8XG4gICAgICAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSA8PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgZGF0YSBzdHJ1Y3R1cmUgdG8gcHJvdmlkZSBhIHNvcnRlZCB2aWV3IG9mIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIGFcbiAgICogcGVyZm9ybWFuY2UgY29uc2Npb3VzIG1hbm5lci4gSXQgdHJhZGVzIGEgbmVnbGliYWJsZSBvdmVyaGVhZCBpbiBnZW5lcmFsXG4gICAqIGNhc2UgZm9yIGEgbGFyZ2Ugc3BlZWR1cCBpbiBjYXNlIG9mIG1hcHBpbmdzIGJlaW5nIGFkZGVkIGluIG9yZGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gTWFwcGluZ0xpc3QoKSB7XG4gICAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICAgIC8vIFNlcnZlcyBhcyBpbmZpbXVtXG4gICAgdGhpcy5fbGFzdCA9IHtnZW5lcmF0ZWRMaW5lOiAtMSwgZ2VuZXJhdGVkQ29sdW1uOiAwfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIHRocm91Z2ggaW50ZXJuYWwgaXRlbXMuIFRoaXMgbWV0aG9kIHRha2VzIHRoZSBzYW1lIGFyZ3VtZW50cyB0aGF0XG4gICAqIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgdGFrZXMuXG4gICAqXG4gICAqIE5PVEU6IFRoZSBvcmRlciBvZiB0aGUgbWFwcGluZ3MgaXMgTk9UIGd1YXJhbnRlZWQuXG4gICAqL1xuICBNYXBwaW5nTGlzdC5wcm90b3R5cGUudW5zb3J0ZWRGb3JFYWNoID1cbiAgICBmdW5jdGlvbiBNYXBwaW5nTGlzdF9mb3JFYWNoKGFDYWxsYmFjaywgYVRoaXNBcmcpIHtcbiAgICAgIHRoaXMuX2FycmF5LmZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZyk7XG4gICAgfTtcblxuICAvKipcbiAgICogQWRkIHRoZSBnaXZlbiBzb3VyY2UgbWFwcGluZy5cbiAgICpcbiAgICogQHBhcmFtIE9iamVjdCBhTWFwcGluZ1xuICAgKi9cbiAgTWFwcGluZ0xpc3QucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2FkZChhTWFwcGluZykge1xuICAgIHZhciBtYXBwaW5nO1xuICAgIGlmIChnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKHRoaXMuX2xhc3QsIGFNYXBwaW5nKSkge1xuICAgICAgdGhpcy5fbGFzdCA9IGFNYXBwaW5nO1xuICAgICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NvcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmbGF0LCBzb3J0ZWQgYXJyYXkgb2YgbWFwcGluZ3MuIFRoZSBtYXBwaW5ncyBhcmUgc29ydGVkIGJ5XG4gICAqIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAgICpcbiAgICogV0FSTklORzogVGhpcyBtZXRob2QgcmV0dXJucyBpbnRlcm5hbCBkYXRhIHdpdGhvdXQgY29weWluZywgZm9yXG4gICAqIHBlcmZvcm1hbmNlLiBUaGUgcmV0dXJuIHZhbHVlIG11c3QgTk9UIGJlIG11dGF0ZWQsIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhc1xuICAgKiBhbiBpbW11dGFibGUgYm9ycm93LiBJZiB5b3Ugd2FudCB0byB0YWtlIG93bmVyc2hpcCwgeW91IG11c3QgbWFrZSB5b3VyIG93blxuICAgKiBjb3B5LlxuICAgKi9cbiAgTWFwcGluZ0xpc3QucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBNYXBwaW5nTGlzdF90b0FycmF5KCkge1xuICAgIGlmICghdGhpcy5fc29ydGVkKSB7XG4gICAgICB0aGlzLl9hcnJheS5zb3J0KHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQpO1xuICAgICAgdGhpcy5fc29ydGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5O1xuICB9O1xuXG4gIGV4cG9ydHMuTWFwcGluZ0xpc3QgPSBNYXBwaW5nTGlzdDtcblxufSk7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5pZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBkZWZpbmUgPSByZXF1aXJlKCdhbWRlZmluZScpKG1vZHVsZSwgcmVxdWlyZSk7XG59XG5kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4gIC8vIEl0IHR1cm5zIG91dCB0aGF0IHNvbWUgKG1vc3Q/KSBKYXZhU2NyaXB0IGVuZ2luZXMgZG9uJ3Qgc2VsZi1ob3N0XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29ydGAuIFRoaXMgbWFrZXMgc2Vuc2UgYmVjYXVzZSBDKysgd2lsbCBsaWtlbHkgcmVtYWluXG4gIC8vIGZhc3RlciB0aGFuIEpTIHdoZW4gZG9pbmcgcmF3IENQVS1pbnRlbnNpdmUgc29ydGluZy4gSG93ZXZlciwgd2hlbiB1c2luZyBhXG4gIC8vIGN1c3RvbSBjb21wYXJhdG9yIGZ1bmN0aW9uLCBjYWxsaW5nIGJhY2sgYW5kIGZvcnRoIGJldHdlZW4gdGhlIFZNJ3MgQysrIGFuZFxuICAvLyBKSVQnZCBKUyBpcyByYXRoZXIgc2xvdyAqYW5kKiBsb3NlcyBKSVQgdHlwZSBpbmZvcm1hdGlvbiwgcmVzdWx0aW5nIGluXG4gIC8vIHdvcnNlIGdlbmVyYXRlZCBjb2RlIGZvciB0aGUgY29tcGFyYXRvciBmdW5jdGlvbiB0aGFuIHdvdWxkIGJlIG9wdGltYWwuIEluXG4gIC8vIGZhY3QsIHdoZW4gc29ydGluZyB3aXRoIGEgY29tcGFyYXRvciwgdGhlc2UgY29zdHMgb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIG9mXG4gIC8vIHNvcnRpbmcgaW4gQysrLiBCeSB1c2luZyBvdXIgb3duIEpTLWltcGxlbWVudGVkIFF1aWNrIFNvcnQgKGJlbG93KSwgd2UgZ2V0XG4gIC8vIGEgfjM1MDBtcyBtZWFuIHNwZWVkLXVwIGluIGBiZW5jaC9iZW5jaC5odG1sYC5cblxuICAvKipcbiAgICogU3dhcCB0aGUgZWxlbWVudHMgaW5kZXhlZCBieSBgeGAgYW5kIGB5YCBpbiB0aGUgYXJyYXkgYGFyeWAuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICAgKiAgICAgICAgVGhlIGFycmF5LlxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBpdGVtLlxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBzZWNvbmQgaXRlbS5cbiAgICovXG4gIGZ1bmN0aW9uIHN3YXAoYXJ5LCB4LCB5KSB7XG4gICAgdmFyIHRlbXAgPSBhcnlbeF07XG4gICAgYXJ5W3hdID0gYXJ5W3ldO1xuICAgIGFyeVt5XSA9IHRlbXA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIHdpdGhpbiB0aGUgcmFuZ2UgYGxvdyAuLiBoaWdoYCBpbmNsdXNpdmUuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsb3dcbiAgICogICAgICAgIFRoZSBsb3dlciBib3VuZCBvbiB0aGUgcmFuZ2UuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBoaWdoXG4gICAqICAgICAgICBUaGUgdXBwZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICAgKi9cbiAgZnVuY3Rpb24gcmFuZG9tSW50SW5SYW5nZShsb3csIGhpZ2gpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChsb3cgKyAoTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93KSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBRdWljayBTb3J0IGFsZ29yaXRobS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gICAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gICAqICAgICAgICBGdW5jdGlvbiB0byB1c2UgdG8gY29tcGFyZSB0d28gaXRlbXMuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwXG4gICAqICAgICAgICBTdGFydCBpbmRleCBvZiB0aGUgYXJyYXlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHJcbiAgICogICAgICAgIEVuZCBpbmRleCBvZiB0aGUgYXJyYXlcbiAgICovXG4gIGZ1bmN0aW9uIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcCwgcikge1xuICAgIC8vIElmIG91ciBsb3dlciBib3VuZCBpcyBsZXNzIHRoYW4gb3VyIHVwcGVyIGJvdW5kLCB3ZSAoMSkgcGFydGl0aW9uIHRoZVxuICAgIC8vIGFycmF5IGludG8gdHdvIHBpZWNlcyBhbmQgKDIpIHJlY3Vyc2Ugb24gZWFjaCBoYWxmLiBJZiBpdCBpcyBub3QsIHRoaXMgaXNcbiAgICAvLyB0aGUgZW1wdHkgYXJyYXkgYW5kIG91ciBiYXNlIGNhc2UuXG5cbiAgICBpZiAocCA8IHIpIHtcbiAgICAgIC8vICgxKSBQYXJ0aXRpb25pbmcuXG4gICAgICAvL1xuICAgICAgLy8gVGhlIHBhcnRpdGlvbmluZyBjaG9vc2VzIGEgcGl2b3QgYmV0d2VlbiBgcGAgYW5kIGByYCBhbmQgbW92ZXMgYWxsXG4gICAgICAvLyBlbGVtZW50cyB0aGF0IGFyZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHBpdm90IHRvIHRoZSBiZWZvcmUgaXQsIGFuZFxuICAgICAgLy8gYWxsIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBncmVhdGVyIHRoYW4gaXQgYWZ0ZXIgaXQuIFRoZSBlZmZlY3QgaXMgdGhhdFxuICAgICAgLy8gb25jZSBwYXJ0aXRpb24gaXMgZG9uZSwgdGhlIHBpdm90IGlzIGluIHRoZSBleGFjdCBwbGFjZSBpdCB3aWxsIGJlIHdoZW5cbiAgICAgIC8vIHRoZSBhcnJheSBpcyBwdXQgaW4gc29ydGVkIG9yZGVyLCBhbmQgaXQgd2lsbCBub3QgbmVlZCB0byBiZSBtb3ZlZFxuICAgICAgLy8gYWdhaW4uIFRoaXMgcnVucyBpbiBPKG4pIHRpbWUuXG5cbiAgICAgIC8vIEFsd2F5cyBjaG9vc2UgYSByYW5kb20gcGl2b3Qgc28gdGhhdCBhbiBpbnB1dCBhcnJheSB3aGljaCBpcyByZXZlcnNlXG4gICAgICAvLyBzb3J0ZWQgZG9lcyBub3QgY2F1c2UgTyhuXjIpIHJ1bm5pbmcgdGltZS5cbiAgICAgIHZhciBwaXZvdEluZGV4ID0gcmFuZG9tSW50SW5SYW5nZShwLCByKTtcbiAgICAgIHZhciBpID0gcCAtIDE7XG5cbiAgICAgIHN3YXAoYXJ5LCBwaXZvdEluZGV4LCByKTtcbiAgICAgIHZhciBwaXZvdCA9IGFyeVtyXTtcblxuICAgICAgLy8gSW1tZWRpYXRlbHkgYWZ0ZXIgYGpgIGlzIGluY3JlbWVudGVkIGluIHRoaXMgbG9vcCwgdGhlIGZvbGxvd2luZyBob2xkXG4gICAgICAvLyB0cnVlOlxuICAgICAgLy9cbiAgICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbcCAuLiBpXWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdC5cbiAgICAgIC8vXG4gICAgICAvLyAgICogRXZlcnkgZWxlbWVudCBpbiBgYXJ5W2krMSAuLiBqLTFdYCBpcyBncmVhdGVyIHRoYW4gdGhlIHBpdm90LlxuICAgICAgZm9yICh2YXIgaiA9IHA7IGogPCByOyBqKyspIHtcbiAgICAgICAgaWYgKGNvbXBhcmF0b3IoYXJ5W2pdLCBwaXZvdCkgPD0gMCkge1xuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICBzd2FwKGFyeSwgaSwgaik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dhcChhcnksIGkgKyAxLCBqKTtcbiAgICAgIHZhciBxID0gaSArIDE7XG5cbiAgICAgIC8vICgyKSBSZWN1cnNlIG9uIGVhY2ggaGFsZi5cblxuICAgICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCBxIC0gMSk7XG4gICAgICBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIHEgKyAxLCByKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU29ydCB0aGUgZ2l2ZW4gYXJyYXkgaW4tcGxhY2Ugd2l0aCB0aGUgZ2l2ZW4gY29tcGFyYXRvciBmdW5jdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gICAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gICAqICAgICAgICBGdW5jdGlvbiB0byB1c2UgdG8gY29tcGFyZSB0d28gaXRlbXMuXG4gICAqL1xuICBleHBvcnRzLnF1aWNrU29ydCA9IGZ1bmN0aW9uIChhcnksIGNvbXBhcmF0b3IpIHtcbiAgICBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIDAsIGFyeS5sZW5ndGggLSAxKTtcbiAgfTtcblxufSk7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5pZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBkZWZpbmUgPSByZXF1aXJlKCdhbWRlZmluZScpKG1vZHVsZSwgcmVxdWlyZSk7XG59XG5kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4gIHZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG4gIHZhciBiaW5hcnlTZWFyY2ggPSByZXF1aXJlKCcuL2JpbmFyeS1zZWFyY2gnKTtcbiAgdmFyIEFycmF5U2V0ID0gcmVxdWlyZSgnLi9hcnJheS1zZXQnKS5BcnJheVNldDtcbiAgdmFyIGJhc2U2NFZMUSA9IHJlcXVpcmUoJy4vYmFzZTY0LXZscScpO1xuICB2YXIgcXVpY2tTb3J0ID0gcmVxdWlyZSgnLi9xdWljay1zb3J0JykucXVpY2tTb3J0O1xuXG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXApIHtcbiAgICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzb3VyY2VNYXAgPSBKU09OLnBhcnNlKGFTb3VyY2VNYXAucmVwbGFjZSgvXlxcKVxcXVxcfScvLCAnJykpO1xuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2VNYXAuc2VjdGlvbnMgIT0gbnVsbFxuICAgICAgPyBuZXcgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcClcbiAgICAgIDogbmV3IEJhc2ljU291cmNlTWFwQ29uc3VtZXIoc291cmNlTWFwKTtcbiAgfVxuXG4gIFNvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPSBmdW5jdGlvbihhU291cmNlTWFwKSB7XG4gICAgcmV0dXJuIEJhc2ljU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcChhU291cmNlTWFwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gICAqL1xuICBTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4gIC8vIGBfX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmQgYF9fb3JpZ2luYWxNYXBwaW5nc2AgYXJlIGFycmF5cyB0aGF0IGhvbGQgdGhlXG4gIC8vIHBhcnNlZCBtYXBwaW5nIGNvb3JkaW5hdGVzIGZyb20gdGhlIHNvdXJjZSBtYXAncyBcIm1hcHBpbmdzXCIgYXR0cmlidXRlLiBUaGV5XG4gIC8vIGFyZSBsYXppbHkgaW5zdGFudGlhdGVkLCBhY2Nlc3NlZCB2aWEgdGhlIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICAvLyBgX29yaWdpbmFsTWFwcGluZ3NgIGdldHRlcnMgcmVzcGVjdGl2ZWx5LCBhbmQgd2Ugb25seSBwYXJzZSB0aGUgbWFwcGluZ3NcbiAgLy8gYW5kIGNyZWF0ZSB0aGVzZSBhcnJheXMgb25jZSBxdWVyaWVkIGZvciBhIHNvdXJjZSBsb2NhdGlvbi4gV2UganVtcCB0aHJvdWdoXG4gIC8vIHRoZXNlIGhvb3BzIGJlY2F1c2UgdGhlcmUgY2FuIGJlIG1hbnkgdGhvdXNhbmRzIG9mIG1hcHBpbmdzLCBhbmQgcGFyc2luZ1xuICAvLyB0aGVtIGlzIGV4cGVuc2l2ZSwgc28gd2Ugb25seSB3YW50IHRvIGRvIGl0IGlmIHdlIG11c3QuXG4gIC8vXG4gIC8vIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheXMgaXMgb2YgdGhlIGZvcm06XG4gIC8vXG4gIC8vICAgICB7XG4gIC8vICAgICAgIGdlbmVyYXRlZExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4gIC8vICAgICAgIGdlbmVyYXRlZENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBjb2RlLFxuICAvLyAgICAgICBzb3VyY2U6IFRoZSBwYXRoIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSB0aGF0IGdlbmVyYXRlZCB0aGlzXG4gIC8vICAgICAgICAgICAgICAgY2h1bmsgb2YgY29kZSxcbiAgLy8gICAgICAgb3JpZ2luYWxMaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4gIC8vICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbiAgLy8gICAgICAgb3JpZ2luYWxDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbiAgLy8gICAgICAgbmFtZTogVGhlIG5hbWUgb2YgdGhlIG9yaWdpbmFsIHN5bWJvbCB3aGljaCBnZW5lcmF0ZWQgdGhpcyBjaHVuayBvZlxuICAvLyAgICAgICAgICAgICBjb2RlLlxuICAvLyAgICAgfVxuICAvL1xuICAvLyBBbGwgcHJvcGVydGllcyBleGNlcHQgZm9yIGBnZW5lcmF0ZWRMaW5lYCBhbmQgYGdlbmVyYXRlZENvbHVtbmAgY2FuIGJlXG4gIC8vIGBudWxsYC5cbiAgLy9cbiAgLy8gYF9nZW5lcmF0ZWRNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucy5cbiAgLy9cbiAgLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMuXG5cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBudWxsO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX2dlbmVyYXRlZE1hcHBpbmdzJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICB9XG4gIH0pO1xuXG4gIFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fX29yaWdpbmFsTWFwcGluZ3MgPSBudWxsO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX29yaWdpbmFsTWFwcGluZ3MnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuX19vcmlnaW5hbE1hcHBpbmdzKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlTWFwcGluZ3ModGhpcy5fbWFwcGluZ3MsIHRoaXMuc291cmNlUm9vdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncztcbiAgICB9XG4gIH0pO1xuXG4gIFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fY2hhcklzTWFwcGluZ1NlcGFyYXRvciA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfY2hhcklzTWFwcGluZ1NlcGFyYXRvcihhU3RyLCBpbmRleCkge1xuICAgICAgdmFyIGMgPSBhU3RyLmNoYXJBdChpbmRleCk7XG4gICAgICByZXR1cm4gYyA9PT0gXCI7XCIgfHwgYyA9PT0gXCIsXCI7XG4gICAgfTtcblxuICAvKipcbiAgICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICAgKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAgICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAgICovXG4gIFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncyA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudCBfcGFyc2VNYXBwaW5nc1wiKTtcbiAgICB9O1xuXG4gIFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUiA9IDE7XG4gIFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSID0gMjtcblxuICBTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCA9IDE7XG4gIFNvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGVhY2ggbWFwcGluZyBiZXR3ZWVuIGFuIG9yaWdpbmFsIHNvdXJjZS9saW5lL2NvbHVtbiBhbmQgYVxuICAgKiBnZW5lcmF0ZWQgbGluZS9jb2x1bW4gaW4gdGhpcyBzb3VyY2UgbWFwLlxuICAgKlxuICAgKiBAcGFyYW0gRnVuY3Rpb24gYUNhbGxiYWNrXG4gICAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2l0aCBlYWNoIG1hcHBpbmcuXG4gICAqIEBwYXJhbSBPYmplY3QgYUNvbnRleHRcbiAgICogICAgICAgIE9wdGlvbmFsLiBJZiBzcGVjaWZpZWQsIHRoaXMgb2JqZWN0IHdpbGwgYmUgdGhlIHZhbHVlIG9mIGB0aGlzYCBldmVyeVxuICAgKiAgICAgICAgdGltZSB0aGF0IGBhQ2FsbGJhY2tgIGlzIGNhbGxlZC5cbiAgICogQHBhcmFtIGFPcmRlclxuICAgKiAgICAgICAgRWl0aGVyIGBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVJgIG9yXG4gICAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVJgLiBTcGVjaWZpZXMgd2hldGhlciB5b3Ugd2FudCB0b1xuICAgKiAgICAgICAgaXRlcmF0ZSBvdmVyIHRoZSBtYXBwaW5ncyBzb3J0ZWQgYnkgdGhlIGdlbmVyYXRlZCBmaWxlJ3MgbGluZS9jb2x1bW5cbiAgICogICAgICAgIG9yZGVyIG9yIHRoZSBvcmlnaW5hbCdzIHNvdXJjZS9saW5lL2NvbHVtbiBvcmRlciwgcmVzcGVjdGl2ZWx5LiBEZWZhdWx0cyB0b1xuICAgKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAuXG4gICAqL1xuICBTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZWFjaE1hcHBpbmcgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2VhY2hNYXBwaW5nKGFDYWxsYmFjaywgYUNvbnRleHQsIGFPcmRlcikge1xuICAgICAgdmFyIGNvbnRleHQgPSBhQ29udGV4dCB8fCBudWxsO1xuICAgICAgdmFyIG9yZGVyID0gYU9yZGVyIHx8IFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjtcblxuICAgICAgdmFyIG1hcHBpbmdzO1xuICAgICAgc3dpdGNoIChvcmRlcikge1xuICAgICAgY2FzZSBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVI6XG4gICAgICAgIG1hcHBpbmdzID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUjpcbiAgICAgICAgbWFwcGluZ3MgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gb3JkZXIgb2YgaXRlcmF0aW9uLlwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZVJvb3QgPSB0aGlzLnNvdXJjZVJvb3Q7XG4gICAgICBtYXBwaW5ncy5tYXAoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlID09PSBudWxsID8gbnVsbCA6IHRoaXMuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlID0gdXRpbC5qb2luKHNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbixcbiAgICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIG9yaWdpbmFsQ29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICAgIG5hbWU6IG1hcHBpbmcubmFtZSA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9uYW1lcy5hdChtYXBwaW5nLm5hbWUpXG4gICAgICAgIH07XG4gICAgICB9LCB0aGlzKS5mb3JFYWNoKGFDYWxsYmFjaywgY29udGV4dCk7XG4gICAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAgICogbGluZSwgYW5kIGNvbHVtbiBwcm92aWRlZC4gSWYgbm8gY29sdW1uIGlzIHByb3ZpZGVkLCByZXR1cm5zIGFsbCBtYXBwaW5nc1xuICAgKiBjb3JyZXNwb25kaW5nIHRvIGEgZWl0aGVyIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yIG9yIHRoZSBuZXh0XG4gICAqIGNsb3Nlc3QgbGluZSB0aGF0IGhhcyBhbnkgbWFwcGluZ3MuIE90aGVyd2lzZSwgcmV0dXJucyBhbGwgbWFwcGluZ3NcbiAgICogY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gbGluZSBhbmQgZWl0aGVyIHRoZSBjb2x1bW4gd2UgYXJlIHNlYXJjaGluZyBmb3JcbiAgICogb3IgdGhlIG5leHQgY2xvc2VzdCBjb2x1bW4gdGhhdCBoYXMgYW55IG9mZnNldHMuXG4gICAqXG4gICAqIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAgICogICAtIGNvbHVtbjogT3B0aW9uYWwuIHRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gICAqXG4gICAqIGFuZCBhbiBhcnJheSBvZiBvYmplY3RzIGlzIHJldHVybmVkLCBlYWNoIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAgICovXG4gIFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2FsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvcihhQXJncykge1xuICAgICAgdmFyIGxpbmUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKTtcblxuICAgICAgLy8gV2hlbiB0aGVyZSBpcyBubyBleGFjdCBtYXRjaCwgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nXG4gICAgICAvLyByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBtYXBwaW5nIGxlc3MgdGhhbiB0aGUgbmVlZGxlLiBCeVxuICAgICAgLy8gc2V0dGluZyBuZWVkbGUub3JpZ2luYWxDb2x1bW4gdG8gMCwgd2UgdGh1cyBmaW5kIHRoZSBsYXN0IG1hcHBpbmcgZm9yXG4gICAgICAvLyB0aGUgZ2l2ZW4gbGluZSwgcHJvdmlkZWQgc3VjaCBhIG1hcHBpbmcgZXhpc3RzLlxuICAgICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgICAgc291cmNlOiB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpLFxuICAgICAgICBvcmlnaW5hbExpbmU6IGxpbmUsXG4gICAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicsIDApXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgbmVlZGxlLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCBuZWVkbGUuc291cmNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fc291cmNlcy5oYXMobmVlZGxlLnNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbmVlZGxlLnNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihuZWVkbGUuc291cmNlKTtcblxuICAgICAgdmFyIG1hcHBpbmdzID0gW107XG5cbiAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKG5lZWRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsTWFwcGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpbmFsTGluZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCk7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICAgIGlmIChhQXJncy5jb2x1bW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBvcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZTtcblxuICAgICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSBmb3VuZC4gU2luY2VcbiAgICAgICAgICAvLyBtYXBwaW5ncyBhcmUgc29ydGVkLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG8gZmluZCBhbGwgbWFwcGluZ3MgZm9yXG4gICAgICAgICAgLy8gdGhlIGxpbmUgd2UgZm91bmQuXG4gICAgICAgICAgd2hpbGUgKG1hcHBpbmcgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09IG9yaWdpbmFsTGluZSkge1xuICAgICAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKytpbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBvcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgICAvLyBJdGVyYXRlIHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIG1hcHBpbmdzLCBvciB3ZSBydW4gaW50b1xuICAgICAgICAgIC8vIGEgbWFwcGluZyBmb3IgYSBkaWZmZXJlbnQgbGluZSB0aGFuIHRoZSBvbmUgd2Ugd2VyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICAgIC8vIFNpbmNlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgICAvLyB0aGUgbGluZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci5cbiAgICAgICAgICB3aGlsZSAobWFwcGluZyAmJlxuICAgICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gbGluZSAmJlxuICAgICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID09IG9yaWdpbmFsQ29sdW1uKSB7XG4gICAgICAgICAgICBtYXBwaW5ncy5wdXNoKHtcbiAgICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hcHBpbmdzO1xuICAgIH07XG5cbiAgZXhwb3J0cy5Tb3VyY2VNYXBDb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4gIC8qKlxuICAgKiBBIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoIHdlIGNhblxuICAgKiBxdWVyeSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGZpbGUgcG9zaXRpb25zIGJ5IGdpdmluZyBpdCBhIGZpbGVcbiAgICogcG9zaXRpb24gaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gICAqXG4gICAqIFRoZSBvbmx5IHBhcmFtZXRlciBpcyB0aGUgcmF3IHNvdXJjZSBtYXAgKGVpdGhlciBhcyBhIEpTT04gc3RyaW5nLCBvclxuICAgKiBhbHJlYWR5IHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNvdXJjZSBtYXBzIGhhdmUgdGhlXG4gICAqIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICAgKlxuICAgKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAgICogICAtIHNvdXJjZXM6IEFuIGFycmF5IG9mIFVSTHMgdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAgICogICAtIG5hbWVzOiBBbiBhcnJheSBvZiBpZGVudGlmaWVycyB3aGljaCBjYW4gYmUgcmVmZXJyZW5jZWQgYnkgaW5kaXZpZHVhbCBtYXBwaW5ncy5cbiAgICogICAtIHNvdXJjZVJvb3Q6IE9wdGlvbmFsLiBUaGUgVVJMIHJvb3QgZnJvbSB3aGljaCBhbGwgc291cmNlcyBhcmUgcmVsYXRpdmUuXG4gICAqICAgLSBzb3VyY2VzQ29udGVudDogT3B0aW9uYWwuIEFuIGFycmF5IG9mIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gICAqICAgLSBtYXBwaW5nczogQSBzdHJpbmcgb2YgYmFzZTY0IFZMUXMgd2hpY2ggY29udGFpbiB0aGUgYWN0dWFsIG1hcHBpbmdzLlxuICAgKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgKlxuICAgKiBIZXJlIGlzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdOlxuICAgKlxuICAgKiAgICAge1xuICAgKiAgICAgICB2ZXJzaW9uIDogMyxcbiAgICogICAgICAgZmlsZTogXCJvdXQuanNcIixcbiAgICogICAgICAgc291cmNlUm9vdCA6IFwiXCIsXG4gICAqICAgICAgIHNvdXJjZXM6IFtcImZvby5qc1wiLCBcImJhci5qc1wiXSxcbiAgICogICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gICAqICAgICAgIG1hcHBpbmdzOiBcIkFBLEFCOztBQkNERTtcIlxuICAgKiAgICAgfVxuICAgKlxuICAgKiBbMF06IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVUxUkdBZWhRd1J5cFVUb3ZGMUtSbHBpT0Z6ZTBiLV8yZ2M2ZkFIMEtZMGsvZWRpdD9wbGk9MSNcbiAgICovXG4gIGZ1bmN0aW9uIEJhc2ljU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCkge1xuICAgIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICAgIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHNvdXJjZU1hcCA9IEpTT04ucGFyc2UoYVNvdXJjZU1hcC5yZXBsYWNlKC9eXFwpXFxdXFx9Jy8sICcnKSk7XG4gICAgfVxuXG4gICAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gICAgdmFyIHNvdXJjZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzJyk7XG4gICAgLy8gU2FzcyAzLjMgbGVhdmVzIG91dCB0aGUgJ25hbWVzJyBhcnJheSwgc28gd2UgZGV2aWF0ZSBmcm9tIHRoZSBzcGVjICh3aGljaFxuICAgIC8vIHJlcXVpcmVzIHRoZSBhcnJheSkgdG8gcGxheSBuaWNlIGhlcmUuXG4gICAgdmFyIG5hbWVzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbmFtZXMnLCBbXSk7XG4gICAgdmFyIHNvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VSb290JywgbnVsbCk7XG4gICAgdmFyIHNvdXJjZXNDb250ZW50ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlc0NvbnRlbnQnLCBudWxsKTtcbiAgICB2YXIgbWFwcGluZ3MgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdtYXBwaW5ncycpO1xuICAgIHZhciBmaWxlID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnZmlsZScsIG51bGwpO1xuXG4gICAgLy8gT25jZSBhZ2FpbiwgU2FzcyBkZXZpYXRlcyBmcm9tIHRoZSBzcGVjIGFuZCBzdXBwbGllcyB0aGUgdmVyc2lvbiBhcyBhXG4gICAgLy8gc3RyaW5nIHJhdGhlciB0aGFuIGEgbnVtYmVyLCBzbyB3ZSB1c2UgbG9vc2UgZXF1YWxpdHkgY2hlY2tpbmcgaGVyZS5cbiAgICBpZiAodmVyc2lvbiAhPSB0aGlzLl92ZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHZlcnNpb246ICcgKyB2ZXJzaW9uKTtcbiAgICB9XG5cbiAgICAvLyBTb21lIHNvdXJjZSBtYXBzIHByb2R1Y2UgcmVsYXRpdmUgc291cmNlIHBhdGhzIGxpa2UgXCIuL2Zvby5qc1wiIGluc3RlYWQgb2ZcbiAgICAvLyBcImZvby5qc1wiLiAgTm9ybWFsaXplIHRoZXNlIGZpcnN0IHNvIHRoYXQgZnV0dXJlIGNvbXBhcmlzb25zIHdpbGwgc3VjY2VlZC5cbiAgICAvLyBTZWUgYnVnemlsLmxhLzEwOTA3NjguXG4gICAgc291cmNlcyA9IHNvdXJjZXMubWFwKHV0aWwubm9ybWFsaXplKTtcblxuICAgIC8vIFBhc3MgYHRydWVgIGJlbG93IHRvIGFsbG93IGR1cGxpY2F0ZSBuYW1lcyBhbmQgc291cmNlcy4gV2hpbGUgc291cmNlIG1hcHNcbiAgICAvLyBhcmUgaW50ZW5kZWQgdG8gYmUgY29tcHJlc3NlZCBhbmQgZGVkdXBsaWNhdGVkLCB0aGUgVHlwZVNjcmlwdCBjb21waWxlclxuICAgIC8vIHNvbWV0aW1lcyBnZW5lcmF0ZXMgc291cmNlIG1hcHMgd2l0aCBkdXBsaWNhdGVzIGluIHRoZW0uIFNlZSBHaXRodWIgaXNzdWVcbiAgICAvLyAjNzIgYW5kIGJ1Z3ppbC5sYS84ODk0OTIuXG4gICAgdGhpcy5fbmFtZXMgPSBBcnJheVNldC5mcm9tQXJyYXkobmFtZXMsIHRydWUpO1xuICAgIHRoaXMuX3NvdXJjZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoc291cmNlcywgdHJ1ZSk7XG5cbiAgICB0aGlzLnNvdXJjZVJvb3QgPSBzb3VyY2VSb290O1xuICAgIHRoaXMuc291cmNlc0NvbnRlbnQgPSBzb3VyY2VzQ29udGVudDtcbiAgICB0aGlzLl9tYXBwaW5ncyA9IG1hcHBpbmdzO1xuICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gIH1cblxuICBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbiAgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBmcm9tIGEgU291cmNlTWFwR2VuZXJhdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gU291cmNlTWFwR2VuZXJhdG9yIGFTb3VyY2VNYXBcbiAgICogICAgICAgIFRoZSBzb3VyY2UgbWFwIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbiAgICogQHJldHVybnMgQmFzaWNTb3VyY2VNYXBDb25zdW1lclxuICAgKi9cbiAgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9mcm9tU291cmNlTWFwKGFTb3VyY2VNYXApIHtcbiAgICAgIHZhciBzbWMgPSBPYmplY3QuY3JlYXRlKEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcblxuICAgICAgdmFyIG5hbWVzID0gc21jLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9uYW1lcy50b0FycmF5KCksIHRydWUpO1xuICAgICAgdmFyIHNvdXJjZXMgPSBzbWMuX3NvdXJjZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoYVNvdXJjZU1hcC5fc291cmNlcy50b0FycmF5KCksIHRydWUpO1xuICAgICAgc21jLnNvdXJjZVJvb3QgPSBhU291cmNlTWFwLl9zb3VyY2VSb290O1xuICAgICAgc21jLnNvdXJjZXNDb250ZW50ID0gYVNvdXJjZU1hcC5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChzbWMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWMuc291cmNlUm9vdCk7XG4gICAgICBzbWMuZmlsZSA9IGFTb3VyY2VNYXAuX2ZpbGU7XG5cbiAgICAgIC8vIEJlY2F1c2Ugd2UgYXJlIG1vZGlmeWluZyB0aGUgZW50cmllcyAoYnkgY29udmVydGluZyBzdHJpbmcgc291cmNlcyBhbmRcbiAgICAgIC8vIG5hbWVzIHRvIGluZGljZXMgaW50byB0aGUgc291cmNlcyBhbmQgbmFtZXMgQXJyYXlTZXRzKSwgd2UgaGF2ZSB0byBtYWtlXG4gICAgICAvLyBhIGNvcHkgb2YgdGhlIGVudHJ5IG9yIGVsc2UgYmFkIHRoaW5ncyBoYXBwZW4uIFNoYXJlZCBtdXRhYmxlIHN0YXRlXG4gICAgICAvLyBzdHJpa2VzIGFnYWluISBTZWUgZ2l0aHViIGlzc3VlICMxOTEuXG5cbiAgICAgIHZhciBnZW5lcmF0ZWRNYXBwaW5ncyA9IGFTb3VyY2VNYXAuX21hcHBpbmdzLnRvQXJyYXkoKS5zbGljZSgpO1xuICAgICAgdmFyIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncyA9IHNtYy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgICB2YXIgZGVzdE9yaWdpbmFsTWFwcGluZ3MgPSBzbWMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3JjTWFwcGluZyA9IGdlbmVyYXRlZE1hcHBpbmdzW2ldO1xuICAgICAgICB2YXIgZGVzdE1hcHBpbmcgPSBuZXcgTWFwcGluZztcbiAgICAgICAgZGVzdE1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9IHNyY01hcHBpbmcuZ2VuZXJhdGVkTGluZTtcbiAgICAgICAgZGVzdE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgICAgaWYgKHNyY01hcHBpbmcuc291cmNlKSB7XG4gICAgICAgICAgZGVzdE1hcHBpbmcuc291cmNlID0gc291cmNlcy5pbmRleE9mKHNyY01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbExpbmUgPSBzcmNNYXBwaW5nLm9yaWdpbmFsTGluZTtcbiAgICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHNyY01hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgICBpZiAoc3JjTWFwcGluZy5uYW1lKSB7XG4gICAgICAgICAgICBkZXN0TWFwcGluZy5uYW1lID0gbmFtZXMuaW5kZXhPZihzcmNNYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRlc3RPcmlnaW5hbE1hcHBpbmdzLnB1c2goZGVzdE1hcHBpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdEdlbmVyYXRlZE1hcHBpbmdzLnB1c2goZGVzdE1hcHBpbmcpO1xuICAgICAgfVxuXG4gICAgICBxdWlja1NvcnQoc21jLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG5cbiAgICAgIHJldHVybiBzbWM7XG4gICAgfTtcblxuICAvKipcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICAgKi9cbiAgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBvcmlnaW5hbCBzb3VyY2VzLlxuICAgKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlUm9vdCAhPSBudWxsID8gdXRpbC5qb2luKHRoaXMuc291cmNlUm9vdCwgcykgOiBzO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUHJvdmlkZSB0aGUgSklUIHdpdGggYSBuaWNlIHNoYXBlIC8gaGlkZGVuIGNsYXNzLlxuICAgKi9cbiAgZnVuY3Rpb24gTWFwcGluZygpIHtcbiAgICB0aGlzLmdlbmVyYXRlZExpbmUgPSAwO1xuICAgIHRoaXMuZ2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5vcmlnaW5hbExpbmUgPSBudWxsO1xuICAgIHRoaXMub3JpZ2luYWxDb2x1bW4gPSBudWxsO1xuICAgIHRoaXMubmFtZSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICAgKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAgICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAgICovXG4gIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgICB2YXIgZ2VuZXJhdGVkTGluZSA9IDE7XG4gICAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICAgIHZhciBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgICB2YXIgcHJldmlvdXNOYW1lID0gMDtcbiAgICAgIHZhciBsZW5ndGggPSBhU3RyLmxlbmd0aDtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgY2FjaGVkU2VnbWVudHMgPSB7fTtcbiAgICAgIHZhciB0ZW1wID0ge307XG4gICAgICB2YXIgb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgICB2YXIgbWFwcGluZywgc3RyLCBzZWdtZW50LCBlbmQsIHZhbHVlO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJzsnKSB7XG4gICAgICAgICAgZ2VuZXJhdGVkTGluZSsrO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJywnKSB7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBtYXBwaW5nID0gbmV3IE1hcHBpbmcoKTtcbiAgICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZExpbmUgPSBnZW5lcmF0ZWRMaW5lO1xuXG4gICAgICAgICAgLy8gQmVjYXVzZSBlYWNoIG9mZnNldCBpcyBlbmNvZGVkIHJlbGF0aXZlIHRvIHRoZSBwcmV2aW91cyBvbmUsXG4gICAgICAgICAgLy8gbWFueSBzZWdtZW50cyBvZnRlbiBoYXZlIHRoZSBzYW1lIGVuY29kaW5nLiBXZSBjYW4gZXhwbG9pdCB0aGlzXG4gICAgICAgICAgLy8gZmFjdCBieSBjYWNoaW5nIHRoZSBwYXJzZWQgdmFyaWFibGUgbGVuZ3RoIGZpZWxkcyBvZiBlYWNoIHNlZ21lbnQsXG4gICAgICAgICAgLy8gYWxsb3dpbmcgdXMgdG8gYXZvaWQgYSBzZWNvbmQgcGFyc2UgaWYgd2UgZW5jb3VudGVyIHRoZSBzYW1lXG4gICAgICAgICAgLy8gc2VnbWVudCBhZ2Fpbi5cbiAgICAgICAgICBmb3IgKGVuZCA9IGluZGV4OyBlbmQgPCBsZW5ndGg7IGVuZCsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2hhcklzTWFwcGluZ1NlcGFyYXRvcihhU3RyLCBlbmQpKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdHIgPSBhU3RyLnNsaWNlKGluZGV4LCBlbmQpO1xuXG4gICAgICAgICAgc2VnbWVudCA9IGNhY2hlZFNlZ21lbnRzW3N0cl07XG4gICAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICAgIGluZGV4ICs9IHN0ci5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlZ21lbnQgPSBbXTtcbiAgICAgICAgICAgIHdoaWxlIChpbmRleCA8IGVuZCkge1xuICAgICAgICAgICAgICBiYXNlNjRWTFEuZGVjb2RlKGFTdHIsIGluZGV4LCB0ZW1wKTtcbiAgICAgICAgICAgICAgdmFsdWUgPSB0ZW1wLnZhbHVlO1xuICAgICAgICAgICAgICBpbmRleCA9IHRlbXAucmVzdDtcbiAgICAgICAgICAgICAgc2VnbWVudC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgYSBzb3VyY2UsIGJ1dCBubyBsaW5lIGFuZCBjb2x1bW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgYSBzb3VyY2UgYW5kIGxpbmUsIGJ1dCBubyBjb2x1bW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FjaGVkU2VnbWVudHNbc3RyXSA9IHNlZ21lbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gR2VuZXJhdGVkIGNvbHVtbi5cbiAgICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiA9IHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uICsgc2VnbWVudFswXTtcbiAgICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgLy8gT3JpZ2luYWwgc291cmNlLlxuICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSBwcmV2aW91c1NvdXJjZSArIHNlZ21lbnRbMV07XG4gICAgICAgICAgICBwcmV2aW91c1NvdXJjZSArPSBzZWdtZW50WzFdO1xuXG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBsaW5lLlxuICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPSBwcmV2aW91c09yaWdpbmFsTGluZSArIHNlZ21lbnRbMl07XG4gICAgICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICAgICAgLy8gTGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkXG4gICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSArPSAxO1xuXG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBjb2x1bW4uXG4gICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gcHJldmlvdXNPcmlnaW5hbENvbHVtbiArIHNlZ21lbnRbM107XG4gICAgICAgICAgICBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgICAvLyBPcmlnaW5hbCBuYW1lLlxuICAgICAgICAgICAgICBtYXBwaW5nLm5hbWUgPSBwcmV2aW91c05hbWUgKyBzZWdtZW50WzRdO1xuICAgICAgICAgICAgICBwcmV2aW91c05hbWUgKz0gc2VnbWVudFs0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICAgIGlmICh0eXBlb2YgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBvcmlnaW5hbE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHF1aWNrU29ydChnZW5lcmF0ZWRNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCk7XG4gICAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBnZW5lcmF0ZWRNYXBwaW5ncztcblxuICAgICAgcXVpY2tTb3J0KG9yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuICAgICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBvcmlnaW5hbE1hcHBpbmdzO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIEZpbmQgdGhlIG1hcHBpbmcgdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGh5cG90aGV0aWNhbCBcIm5lZWRsZVwiIG1hcHBpbmcgdGhhdFxuICAgKiB3ZSBhcmUgc2VhcmNoaW5nIGZvciBpbiB0aGUgZ2l2ZW4gXCJoYXlzdGFja1wiIG9mIG1hcHBpbmdzLlxuICAgKi9cbiAgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9maW5kTWFwcGluZyhhTmVlZGxlLCBhTWFwcGluZ3MsIGFMaW5lTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ29sdW1uTmFtZSwgYUNvbXBhcmF0b3IsIGFCaWFzKSB7XG4gICAgICAvLyBUbyByZXR1cm4gdGhlIHBvc2l0aW9uIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCB3ZSBtdXN0IGZpcnN0IGZpbmQgdGhlXG4gICAgICAvLyBtYXBwaW5nIGZvciB0aGUgZ2l2ZW4gcG9zaXRpb24gYW5kIHRoZW4gcmV0dXJuIHRoZSBvcHBvc2l0ZSBwb3NpdGlvbiBpdFxuICAgICAgLy8gcG9pbnRzIHRvLiBCZWNhdXNlIHRoZSBtYXBwaW5ncyBhcmUgc29ydGVkLCB3ZSBjYW4gdXNlIGJpbmFyeSBzZWFyY2ggdG9cbiAgICAgIC8vIGZpbmQgdGhlIGJlc3QgbWFwcGluZy5cblxuICAgICAgaWYgKGFOZWVkbGVbYUxpbmVOYW1lXSA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0xpbmUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMSwgZ290ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUxpbmVOYW1lXSk7XG4gICAgICB9XG4gICAgICBpZiAoYU5lZWRsZVthQ29sdW1uTmFtZV0gPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbHVtbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthQ29sdW1uTmFtZV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYmluYXJ5U2VhcmNoLnNlYXJjaChhTmVlZGxlLCBhTWFwcGluZ3MsIGFDb21wYXJhdG9yLCBhQmlhcyk7XG4gICAgfTtcblxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgbGFzdCBjb2x1bW4gZm9yIGVhY2ggZ2VuZXJhdGVkIG1hcHBpbmcuIFRoZSBsYXN0IGNvbHVtbiBpc1xuICAgKiBpbmNsdXNpdmUuXG4gICAqL1xuICBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb21wdXRlQ29sdW1uU3BhbnMgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2NvbXB1dGVDb2x1bW5TcGFucygpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgICAgLy8gTWFwcGluZ3MgZG8gbm90IGNvbnRhaW4gYSBmaWVsZCBmb3IgdGhlIGxhc3QgZ2VuZXJhdGVkIGNvbHVtbnQuIFdlXG4gICAgICAgIC8vIGNhbiBjb21lIHVwIHdpdGggYW4gb3B0aW1pc3RpYyBlc3RpbWF0ZSwgaG93ZXZlciwgYnkgYXNzdW1pbmcgdGhhdFxuICAgICAgICAvLyBtYXBwaW5ncyBhcmUgY29udGlndW91cyAoaS5lLiBnaXZlbiB0d28gY29uc2VjdXRpdmUgbWFwcGluZ3MsIHRoZVxuICAgICAgICAvLyBmaXJzdCBtYXBwaW5nIGVuZHMgd2hlcmUgdGhlIHNlY29uZCBvbmUgc3RhcnRzKS5cbiAgICAgICAgaWYgKGluZGV4ICsgMSA8IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBuZXh0TWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4ICsgMV07XG5cbiAgICAgICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZXh0TWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgICBtYXBwaW5nLmxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBuZXh0TWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLSAxO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGxhc3QgbWFwcGluZyBmb3IgZWFjaCBsaW5lIHNwYW5zIHRoZSBlbnRpcmUgbGluZS5cbiAgICAgICAgbWFwcGluZy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gSW5maW5pdHk7XG4gICAgICB9XG4gICAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlLCBsaW5lLCBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgZ2VuZXJhdGVkXG4gICAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICAgKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAgICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gICAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICAgKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICAgKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICAgKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gICAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICAgKlxuICAgKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC5cbiAgICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC5cbiAgICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICAgKi9cbiAgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUub3JpZ2luYWxQb3NpdGlvbkZvciA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgICAgfTtcblxuICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcoXG4gICAgICAgIG5lZWRsZSxcbiAgICAgICAgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MsXG4gICAgICAgIFwiZ2VuZXJhdGVkTGluZVwiLFxuICAgICAgICBcImdlbmVyYXRlZENvbHVtblwiLFxuICAgICAgICB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkLFxuICAgICAgICB1dGlsLmdldEFyZyhhQXJncywgJ2JpYXMnLCBTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORClcbiAgICAgICk7XG5cbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdzb3VyY2UnLCBudWxsKTtcbiAgICAgICAgICBpZiAoc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmF0KHNvdXJjZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgc291cmNlID0gdXRpbC5qb2luKHRoaXMuc291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbmFtZScsIG51bGwpO1xuICAgICAgICAgIGlmIChuYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICBuYW1lID0gdGhpcy5fbmFtZXMuYXQobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdvcmlnaW5hbExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgbmFtZTogbnVsbFxuICAgICAgfTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBoYXZlIHRoZSBzb3VyY2UgY29udGVudCBmb3IgZXZlcnkgc291cmNlIGluIHRoZSBzb3VyY2VcbiAgICogbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gICAgZnVuY3Rpb24gQmFzaWNTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICAgIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudC5sZW5ndGggPj0gdGhpcy5fc291cmNlcy5zaXplKCkgJiZcbiAgICAgICAgIXRoaXMuc291cmNlc0NvbnRlbnQuc29tZShmdW5jdGlvbiAoc2MpIHsgcmV0dXJuIHNjID09IG51bGw7IH0pO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICAgKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gICAqIGF2YWlsaWJsZS5cbiAgICovXG4gIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX3NvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgbnVsbE9uTWlzc2luZykge1xuICAgICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgYVNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCBhU291cmNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3NvdXJjZXMuaGFzKGFTb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihhU291cmNlKV07XG4gICAgICB9XG5cbiAgICAgIHZhciB1cmw7XG4gICAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGxcbiAgICAgICAgICAmJiAodXJsID0gdXRpbC51cmxQYXJzZSh0aGlzLnNvdXJjZVJvb3QpKSkge1xuICAgICAgICAvLyBYWFg6IGZpbGU6Ly8gVVJJcyBhbmQgYWJzb2x1dGUgcGF0aHMgbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIGZvclxuICAgICAgICAvLyBtYW55IHVzZXJzLiBXZSBjYW4gaGVscCB0aGVtIG91dCB3aGVuIHRoZXkgZXhwZWN0IGZpbGU6Ly8gVVJJcyB0b1xuICAgICAgICAvLyBiZWhhdmUgbGlrZSBpdCB3b3VsZCBpZiB0aGV5IHdlcmUgcnVubmluZyBhIGxvY2FsIEhUVFAgc2VydmVyLiBTZWVcbiAgICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODg1NTk3LlxuICAgICAgICB2YXIgZmlsZVVyaUFic1BhdGggPSBhU291cmNlLnJlcGxhY2UoL15maWxlOlxcL1xcLy8sIFwiXCIpO1xuICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSBcImZpbGVcIlxuICAgICAgICAgICAgJiYgdGhpcy5fc291cmNlcy5oYXMoZmlsZVVyaUFic1BhdGgpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKGZpbGVVcmlBYnNQYXRoKV1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoIXVybC5wYXRoIHx8IHVybC5wYXRoID09IFwiL1wiKVxuICAgICAgICAgICAgJiYgdGhpcy5fc291cmNlcy5oYXMoXCIvXCIgKyBhU291cmNlKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihcIi9cIiArIGFTb3VyY2UpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgcmVjdXJzaXZlbHkgZnJvbVxuICAgICAgLy8gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yLiBJbiB0aGF0IGNhc2UsIHdlXG4gICAgICAvLyBkb24ndCB3YW50IHRvIHRocm93IGlmIHdlIGNhbid0IGZpbmQgdGhlIHNvdXJjZSAtIHdlIGp1c3Qgd2FudCB0b1xuICAgICAgLy8gcmV0dXJuIG51bGwsIHNvIHdlIHByb3ZpZGUgYSBmbGFnIHRvIGV4aXQgZ3JhY2VmdWxseS5cbiAgICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYVNvdXJjZSArICdcIiBpcyBub3QgaW4gdGhlIFNvdXJjZU1hcC4nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICAgKiBsaW5lLCBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGhcbiAgICogdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIC0gYmlhczogRWl0aGVyICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAgICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAgICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAgICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICAgKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAgICpcbiAgICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAgICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gICAqL1xuICBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpO1xuICAgICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgICAgbGFzdENvbHVtbjogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc291cmNlID0gdGhpcy5fc291cmNlcy5pbmRleE9mKHNvdXJjZSk7XG5cbiAgICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICBvcmlnaW5hbExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgICBvcmlnaW5hbENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgICAgfTtcblxuICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcoXG4gICAgICAgIG5lZWRsZSxcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgICAgXCJvcmlnaW5hbExpbmVcIixcbiAgICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgICB1dGlsLmdldEFyZyhhQXJncywgJ2JpYXMnLCBTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORClcbiAgICAgICk7XG5cbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuc291cmNlID09PSBuZWVkbGUuc291cmNlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgbGFzdENvbHVtbjogbnVsbFxuICAgICAgfTtcbiAgICB9O1xuXG4gIGV4cG9ydHMuQmFzaWNTb3VyY2VNYXBDb25zdW1lciA9IEJhc2ljU291cmNlTWFwQ29uc3VtZXI7XG5cbiAgLyoqXG4gICAqIEFuIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2hcbiAgICogd2UgY2FuIHF1ZXJ5IGZvciBpbmZvcm1hdGlvbi4gSXQgZGlmZmVycyBmcm9tIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5cbiAgICogdGhhdCBpdCB0YWtlcyBcImluZGV4ZWRcIiBzb3VyY2UgbWFwcyAoaS5lLiBvbmVzIHdpdGggYSBcInNlY3Rpb25zXCIgZmllbGQpIGFzXG4gICAqIGlucHV0LlxuICAgKlxuICAgKiBUaGUgb25seSBwYXJhbWV0ZXIgaXMgYSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yIGFscmVhZHlcbiAgICogcGFyc2VkIHRvIGFuIG9iamVjdCkuIEFjY29yZGluZyB0byB0aGUgc3BlYyBmb3IgaW5kZXhlZCBzb3VyY2UgbWFwcywgdGhleVxuICAgKiBoYXZlIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAgICpcbiAgICogICAtIHZlcnNpb246IFdoaWNoIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXAgc3BlYyB0aGlzIG1hcCBpcyBmb2xsb3dpbmcuXG4gICAqICAgLSBmaWxlOiBPcHRpb25hbC4gVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAqICAgLSBzZWN0aW9uczogQSBsaXN0IG9mIHNlY3Rpb24gZGVmaW5pdGlvbnMuXG4gICAqXG4gICAqIEVhY2ggdmFsdWUgdW5kZXIgdGhlIFwic2VjdGlvbnNcIiBmaWVsZCBoYXMgdHdvIGZpZWxkczpcbiAgICogICAtIG9mZnNldDogVGhlIG9mZnNldCBpbnRvIHRoZSBvcmlnaW5hbCBzcGVjaWZpZWQgYXQgd2hpY2ggdGhpcyBzZWN0aW9uXG4gICAqICAgICAgIGJlZ2lucyB0byBhcHBseSwgZGVmaW5lZCBhcyBhbiBvYmplY3Qgd2l0aCBhIFwibGluZVwiIGFuZCBcImNvbHVtblwiXG4gICAqICAgICAgIGZpZWxkLlxuICAgKiAgIC0gbWFwOiBBIHNvdXJjZSBtYXAgZGVmaW5pdGlvbi4gVGhpcyBzb3VyY2UgbWFwIGNvdWxkIGFsc28gYmUgaW5kZXhlZCxcbiAgICogICAgICAgYnV0IGRvZXNuJ3QgaGF2ZSB0byBiZS5cbiAgICpcbiAgICogSW5zdGVhZCBvZiB0aGUgXCJtYXBcIiBmaWVsZCwgaXQncyBhbHNvIHBvc3NpYmxlIHRvIGhhdmUgYSBcInVybFwiIGZpZWxkXG4gICAqIHNwZWNpZnlpbmcgYSBVUkwgdG8gcmV0cmlldmUgYSBzb3VyY2UgbWFwIGZyb20sIGJ1dCB0aGF0J3MgY3VycmVudGx5XG4gICAqIHVuc3VwcG9ydGVkLlxuICAgKlxuICAgKiBIZXJlJ3MgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF0sIGJ1dFxuICAgKiBtb2RpZmllZCB0byBvbWl0IGEgc2VjdGlvbiB3aGljaCB1c2VzIHRoZSBcInVybFwiIGZpZWxkLlxuICAgKlxuICAgKiAge1xuICAgKiAgICB2ZXJzaW9uIDogMyxcbiAgICogICAgZmlsZTogXCJhcHAuanNcIixcbiAgICogICAgc2VjdGlvbnM6IFt7XG4gICAqICAgICAgb2Zmc2V0OiB7bGluZToxMDAsIGNvbHVtbjoxMH0sXG4gICAqICAgICAgbWFwOiB7XG4gICAqICAgICAgICB2ZXJzaW9uIDogMyxcbiAgICogICAgICAgIGZpbGU6IFwic2VjdGlvbi5qc1wiLFxuICAgKiAgICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICAgKiAgICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gICAqICAgICAgICBtYXBwaW5nczogXCJBQUFBLEU7O0FCQ0RFO1wiXG4gICAqICAgICAgfVxuICAgKiAgICB9XSxcbiAgICogIH1cbiAgICpcbiAgICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQjaGVhZGluZz1oLjUzNWVzM3hlcHJndFxuICAgKi9cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXApIHtcbiAgICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzb3VyY2VNYXAgPSBKU09OLnBhcnNlKGFTb3VyY2VNYXAucmVwbGFjZSgvXlxcKVxcXVxcfScvLCAnJykpO1xuICAgIH1cblxuICAgIHZhciB2ZXJzaW9uID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAndmVyc2lvbicpO1xuICAgIHZhciBzZWN0aW9ucyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NlY3Rpb25zJyk7XG5cbiAgICBpZiAodmVyc2lvbiAhPSB0aGlzLl92ZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHZlcnNpb246ICcgKyB2ZXJzaW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gICAgdGhpcy5fbmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcblxuICAgIHZhciBsYXN0T2Zmc2V0ID0ge1xuICAgICAgbGluZTogLTEsXG4gICAgICBjb2x1bW46IDBcbiAgICB9O1xuICAgIHRoaXMuX3NlY3Rpb25zID0gc2VjdGlvbnMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICBpZiAocy51cmwpIHtcbiAgICAgICAgLy8gVGhlIHVybCBmaWVsZCB3aWxsIHJlcXVpcmUgc3VwcG9ydCBmb3IgYXN5bmNocm9uaWNpdHkuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8xNlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cHBvcnQgZm9yIHVybCBmaWVsZCBpbiBzZWN0aW9ucyBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gdXRpbC5nZXRBcmcocywgJ29mZnNldCcpO1xuICAgICAgdmFyIG9mZnNldExpbmUgPSB1dGlsLmdldEFyZyhvZmZzZXQsICdsaW5lJyk7XG4gICAgICB2YXIgb2Zmc2V0Q29sdW1uID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnY29sdW1uJyk7XG5cbiAgICAgIGlmIChvZmZzZXRMaW5lIDwgbGFzdE9mZnNldC5saW5lIHx8XG4gICAgICAgICAgKG9mZnNldExpbmUgPT09IGxhc3RPZmZzZXQubGluZSAmJiBvZmZzZXRDb2x1bW4gPCBsYXN0T2Zmc2V0LmNvbHVtbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWN0aW9uIG9mZnNldHMgbXVzdCBiZSBvcmRlcmVkIGFuZCBub24tb3ZlcmxhcHBpbmcuJyk7XG4gICAgICB9XG4gICAgICBsYXN0T2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBnZW5lcmF0ZWRPZmZzZXQ6IHtcbiAgICAgICAgICAvLyBUaGUgb2Zmc2V0IGZpZWxkcyBhcmUgMC1iYXNlZCwgYnV0IHdlIHVzZSAxLWJhc2VkIGluZGljZXMgd2hlblxuICAgICAgICAgIC8vIGVuY29kaW5nL2RlY29kaW5nIGZyb20gVkxRLlxuICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG9mZnNldExpbmUgKyAxLFxuICAgICAgICAgIGdlbmVyYXRlZENvbHVtbjogb2Zmc2V0Q29sdW1uICsgMVxuICAgICAgICB9LFxuICAgICAgICBjb25zdW1lcjogbmV3IFNvdXJjZU1hcENvbnN1bWVyKHV0aWwuZ2V0QXJnKHMsICdtYXAnKSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG4gIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuICAvKipcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICAgKi9cbiAgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gICAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ3NvdXJjZXMnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzb3VyY2VzLnB1c2godGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gc291cmNlcztcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAgICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0XG4gICAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAgICpcbiAgICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlLCBvciBudWxsLlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuXG4gICAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAgICovXG4gIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUub3JpZ2luYWxQb3NpdGlvbkZvciA9XG4gICAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICAgIGdlbmVyYXRlZExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICAgIH07XG5cbiAgICAgIC8vIEZpbmQgdGhlIHNlY3Rpb24gY29udGFpbmluZyB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uIHdlJ3JlIHRyeWluZyB0byBtYXBcbiAgICAgIC8vIHRvIGFuIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgICAgdmFyIHNlY3Rpb25JbmRleCA9IGJpbmFyeVNlYXJjaC5zZWFyY2gobmVlZGxlLCB0aGlzLl9zZWN0aW9ucyxcbiAgICAgICAgZnVuY3Rpb24obmVlZGxlLCBzZWN0aW9uKSB7XG4gICAgICAgICAgdmFyIGNtcCA9IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC0gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZTtcbiAgICAgICAgICBpZiAoY21wKSB7XG4gICAgICAgICAgICByZXR1cm4gY21wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAobmVlZGxlLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICB9KTtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbc2VjdGlvbkluZGV4XTtcblxuICAgICAgaWYgKCFzZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBudWxsLFxuICAgICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICAgIG5hbWU6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlY3Rpb24uY29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICAgIGxpbmU6IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC1cbiAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICBjb2x1bW46IG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBuZWVkbGUuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgOiAwKSxcbiAgICAgICAgYmlhczogYUFyZ3MuYmlhc1xuICAgICAgfSk7XG4gICAgfTtcblxuICAvKipcbiAgICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gICAqIG1hcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gICAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX2hhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NlY3Rpb25zLmV2ZXJ5KGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBzLmNvbnN1bWVyLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29udGVudC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgdGhlIHVybCBvZiB0aGVcbiAgICogb3JpZ2luYWwgc291cmNlIGZpbGUuIFJldHVybnMgbnVsbCBpZiBubyBvcmlnaW5hbCBzb3VyY2UgY29udGVudCBpc1xuICAgKiBhdmFpbGFibGUuXG4gICAqL1xuICBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IgPVxuICAgIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcblxuICAgICAgICB2YXIgY29udGVudCA9IHNlY3Rpb24uY29uc3VtZXIuc291cmNlQ29udGVudEZvcihhU291cmNlLCB0cnVlKTtcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG51bGxPbk1pc3NpbmcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgICAgfVxuICAgIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gICAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICAgKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gICAqXG4gICAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICAgKi9cbiAgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gICAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG5cbiAgICAgICAgLy8gT25seSBjb25zaWRlciB0aGlzIHNlY3Rpb24gaWYgdGhlIHJlcXVlc3RlZCBzb3VyY2UgaXMgaW4gdGhlIGxpc3Qgb2ZcbiAgICAgICAgLy8gc291cmNlcyBvZiB0aGUgY29uc3VtZXIuXG4gICAgICAgIGlmIChzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZXMuaW5kZXhPZih1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpKSA9PT0gLTEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ2VuZXJhdGVkUG9zaXRpb24gPSBzZWN0aW9uLmNvbnN1bWVyLmdlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKTtcbiAgICAgICAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgdmFyIHJldCA9IHtcbiAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZFBvc2l0aW9uLmxpbmUgK1xuICAgICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWRQb3NpdGlvbi5jb2x1bW4gK1xuICAgICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gZ2VuZXJhdGVkUG9zaXRpb24ubGluZVxuICAgICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICAgICA6IDApXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbFxuICAgICAgfTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gICAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICAgKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICAgKi9cbiAgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncyA9XG4gICAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcbiAgICAgICAgdmFyIHNlY3Rpb25NYXBwaW5ncyA9IHNlY3Rpb24uY29uc3VtZXIuX2dlbmVyYXRlZE1hcHBpbmdzO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlY3Rpb25NYXBwaW5ncy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBtYXBwaW5nID0gc2VjdGlvbk1hcHBpbmdzW2ldO1xuXG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNlY3Rpb24uY29uc3VtZXIuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgIGlmIChzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZVJvb3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IHV0aWwuam9pbihzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICAgICAgc291cmNlID0gdGhpcy5fc291cmNlcy5pbmRleE9mKHNvdXJjZSk7XG5cbiAgICAgICAgICB2YXIgbmFtZSA9IHNlY3Rpb24uY29uc3VtZXIuX25hbWVzLmF0KG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgdGhpcy5fbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuXG4gICAgICAgICAgLy8gVGhlIG1hcHBpbmdzIGNvbWluZyBmcm9tIHRoZSBjb25zdW1lciBmb3IgdGhlIHNlY3Rpb24gaGF2ZVxuICAgICAgICAgIC8vIGdlbmVyYXRlZCBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzZWN0aW9uLCBzbyB3ZVxuICAgICAgICAgIC8vIG5lZWQgdG8gb2Zmc2V0IHRoZW0gdG8gYmUgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBjb25jYXRlbmF0ZWRcbiAgICAgICAgICAvLyBnZW5lcmF0ZWQgZmlsZS5cbiAgICAgICAgICB2YXIgYWRqdXN0ZWRNYXBwaW5nID0ge1xuICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUgK1xuICAgICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBtYXBwaW5nLmNvbHVtbiArXG4gICAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBtYXBwaW5nLmdlbmVyYXRlZExpbmUpXG4gICAgICAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgICAgICA6IDAsXG4gICAgICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhZGp1c3RlZE1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MucHVzaChhZGp1c3RlZE1hcHBpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHF1aWNrU29ydCh0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQpO1xuICAgICAgcXVpY2tTb3J0KHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcbiAgICB9O1xuXG4gIGV4cG9ydHMuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyID0gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyO1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgdmFyIGJhc2U2NFZMUSA9IHJlcXVpcmUoJy4vYmFzZTY0LXZscScpO1xuICB2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuICB2YXIgQXJyYXlTZXQgPSByZXF1aXJlKCcuL2FycmF5LXNldCcpLkFycmF5U2V0O1xuICB2YXIgTWFwcGluZ0xpc3QgPSByZXF1aXJlKCcuL21hcHBpbmctbGlzdCcpLk1hcHBpbmdMaXN0O1xuXG4gIC8qKlxuICAgKiBBbiBpbnN0YW5jZSBvZiB0aGUgU291cmNlTWFwR2VuZXJhdG9yIHJlcHJlc2VudHMgYSBzb3VyY2UgbWFwIHdoaWNoIGlzXG4gICAqIGJlaW5nIGJ1aWx0IGluY3JlbWVudGFsbHkuIFlvdSBtYXkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBmaWxlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gICAqICAgLSBzb3VyY2VSb290OiBBIHJvb3QgZm9yIGFsbCByZWxhdGl2ZSBVUkxzIGluIHRoaXMgc291cmNlIG1hcC5cbiAgICovXG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncykge1xuICAgIGlmICghYUFyZ3MpIHtcbiAgICAgIGFBcmdzID0ge307XG4gICAgfVxuICAgIHRoaXMuX2ZpbGUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2ZpbGUnLCBudWxsKTtcbiAgICB0aGlzLl9zb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2VSb290JywgbnVsbCk7XG4gICAgdGhpcy5fc2tpcFZhbGlkYXRpb24gPSB1dGlsLmdldEFyZyhhQXJncywgJ3NraXBWYWxpZGF0aW9uJywgZmFsc2UpO1xuICAgIHRoaXMuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuICAgIHRoaXMuX21hcHBpbmdzID0gbmV3IE1hcHBpbmdMaXN0KCk7XG4gICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbiAgfVxuXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFNvdXJjZU1hcEdlbmVyYXRvciBiYXNlZCBvbiBhIFNvdXJjZU1hcENvbnN1bWVyXG4gICAqXG4gICAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcC5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5mcm9tU291cmNlTWFwID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIpIHtcbiAgICAgIHZhciBzb3VyY2VSb290ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZVJvb3Q7XG4gICAgICB2YXIgZ2VuZXJhdG9yID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcih7XG4gICAgICAgIGZpbGU6IGFTb3VyY2VNYXBDb25zdW1lci5maWxlLFxuICAgICAgICBzb3VyY2VSb290OiBzb3VyY2VSb290XG4gICAgICB9KTtcbiAgICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgICB2YXIgbmV3TWFwcGluZyA9IHtcbiAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgIGxpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBuZXdNYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3TWFwcGluZy5vcmlnaW5hbCA9IHtcbiAgICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3TWFwcGluZy5uYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdlbmVyYXRvci5hZGRNYXBwaW5nKG5ld01hcHBpbmcpO1xuICAgICAgfSk7XG4gICAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBnZW5lcmF0b3Iuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhIHNpbmdsZSBtYXBwaW5nIGZyb20gb3JpZ2luYWwgc291cmNlIGxpbmUgYW5kIGNvbHVtbiB0byB0aGUgZ2VuZXJhdGVkXG4gICAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBmb3IgdGhpcyBzb3VyY2UgbWFwIGJlaW5nIGNyZWF0ZWQuIFRoZSBtYXBwaW5nXG4gICAqIG9iamVjdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBnZW5lcmF0ZWQ6IEFuIG9iamVjdCB3aXRoIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAgICogICAtIG9yaWdpbmFsOiBBbiBvYmplY3Qgd2l0aCB0aGUgb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAgICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIChyZWxhdGl2ZSB0byB0aGUgc291cmNlUm9vdCkuXG4gICAqICAgLSBuYW1lOiBBbiBvcHRpb25hbCBvcmlnaW5hbCB0b2tlbiBuYW1lIGZvciB0aGlzIG1hcHBpbmcuXG4gICAqL1xuICBTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFkZE1hcHBpbmcgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hZGRNYXBwaW5nKGFBcmdzKSB7XG4gICAgICB2YXIgZ2VuZXJhdGVkID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdnZW5lcmF0ZWQnKTtcbiAgICAgIHZhciBvcmlnaW5hbCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnb3JpZ2luYWwnLCBudWxsKTtcbiAgICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScsIG51bGwpO1xuICAgICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhhQXJncywgJ25hbWUnLCBudWxsKTtcblxuICAgICAgaWYgKCF0aGlzLl9za2lwVmFsaWRhdGlvbikge1xuICAgICAgICB0aGlzLl92YWxpZGF0ZU1hcHBpbmcoZ2VuZXJhdGVkLCBvcmlnaW5hbCwgc291cmNlLCBuYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNvdXJjZSAhPSBudWxsICYmICF0aGlzLl9zb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lICE9IG51bGwgJiYgIXRoaXMuX25hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX21hcHBpbmdzLmFkZCh7XG4gICAgICAgIGdlbmVyYXRlZExpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IGdlbmVyYXRlZC5jb2x1bW4sXG4gICAgICAgIG9yaWdpbmFsTGluZTogb3JpZ2luYWwgIT0gbnVsbCAmJiBvcmlnaW5hbC5saW5lLFxuICAgICAgICBvcmlnaW5hbENvbHVtbjogb3JpZ2luYWwgIT0gbnVsbCAmJiBvcmlnaW5hbC5jb2x1bW4sXG4gICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9KTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLlxuICAgKi9cbiAgU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3Jfc2V0U291cmNlQ29udGVudChhU291cmNlRmlsZSwgYVNvdXJjZUNvbnRlbnQpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhU291cmNlRmlsZTtcbiAgICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLl9zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYVNvdXJjZUNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAvLyBBZGQgdGhlIHNvdXJjZSBjb250ZW50IHRvIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IF9zb3VyY2VzQ29udGVudHMgbWFwIGlmIHRoZSBwcm9wZXJ0eSBpcyBudWxsLlxuICAgICAgICBpZiAoIXRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHNvdXJjZSBmaWxlIGZyb20gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgICAvLyBJZiB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAgaXMgZW1wdHksIHNldCB0aGUgcHJvcGVydHkgdG8gbnVsbC5cbiAgICAgICAgZGVsZXRlIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldO1xuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fc291cmNlc0NvbnRlbnRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgbWFwcGluZ3Mgb2YgYSBzdWItc291cmNlLW1hcCBmb3IgYSBzcGVjaWZpYyBzb3VyY2UgZmlsZSB0byB0aGVcbiAgICogc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQuIEVhY2ggbWFwcGluZyB0byB0aGUgc3VwcGxpZWQgc291cmNlIGZpbGUgaXNcbiAgICogcmV3cml0dGVuIHVzaW5nIHRoZSBzdXBwbGllZCBzb3VyY2UgbWFwLiBOb3RlOiBUaGUgcmVzb2x1dGlvbiBmb3IgdGhlXG4gICAqIHJlc3VsdGluZyBtYXBwaW5ncyBpcyB0aGUgbWluaW1pdW0gb2YgdGhpcyBtYXAgYW5kIHRoZSBzdXBwbGllZCBtYXAuXG4gICAqXG4gICAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZC5cbiAgICogQHBhcmFtIGFTb3VyY2VGaWxlIE9wdGlvbmFsLiBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlLlxuICAgKiAgICAgICAgSWYgb21pdHRlZCwgU291cmNlTWFwQ29uc3VtZXIncyBmaWxlIHByb3BlcnR5IHdpbGwgYmUgdXNlZC5cbiAgICogQHBhcmFtIGFTb3VyY2VNYXBQYXRoIE9wdGlvbmFsLiBUaGUgZGlybmFtZSBvZiB0aGUgcGF0aCB0byB0aGUgc291cmNlIG1hcFxuICAgKiAgICAgICAgdG8gYmUgYXBwbGllZC4gSWYgcmVsYXRpdmUsIGl0IGlzIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBDb25zdW1lci5cbiAgICogICAgICAgIFRoaXMgcGFyYW1ldGVyIGlzIG5lZWRlZCB3aGVuIHRoZSB0d28gc291cmNlIG1hcHMgYXJlbid0IGluIHRoZSBzYW1lXG4gICAqICAgICAgICBkaXJlY3RvcnksIGFuZCB0aGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkIGNvbnRhaW5zIHJlbGF0aXZlIHNvdXJjZVxuICAgKiAgICAgICAgcGF0aHMuIElmIHNvLCB0aG9zZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbmVlZCB0byBiZSByZXdyaXR0ZW5cbiAgICogICAgICAgIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gICAqL1xuICBTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfYXBwbHlTb3VyY2VNYXAoYVNvdXJjZU1hcENvbnN1bWVyLCBhU291cmNlRmlsZSwgYVNvdXJjZU1hcFBhdGgpIHtcbiAgICAgIHZhciBzb3VyY2VGaWxlID0gYVNvdXJjZUZpbGU7XG4gICAgICAvLyBJZiBhU291cmNlRmlsZSBpcyBvbWl0dGVkLCB3ZSB3aWxsIHVzZSB0aGUgZmlsZSBwcm9wZXJ0eSBvZiB0aGUgU291cmNlTWFwXG4gICAgICBpZiAoYVNvdXJjZUZpbGUgPT0gbnVsbCkge1xuICAgICAgICBpZiAoYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUgPT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwIHJlcXVpcmVzIGVpdGhlciBhbiBleHBsaWNpdCBzb3VyY2UgZmlsZSwgJyArXG4gICAgICAgICAgICAnb3IgdGhlIHNvdXJjZSBtYXBcXCdzIFwiZmlsZVwiIHByb3BlcnR5LiBCb3RoIHdlcmUgb21pdHRlZC4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2VGaWxlID0gYVNvdXJjZU1hcENvbnN1bWVyLmZpbGU7XG4gICAgICB9XG4gICAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgICAvLyBNYWtlIFwic291cmNlRmlsZVwiIHJlbGF0aXZlIGlmIGFuIGFic29sdXRlIFVybCBpcyBwYXNzZWQuXG4gICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgICAgfVxuICAgICAgLy8gQXBwbHlpbmcgdGhlIFNvdXJjZU1hcCBjYW4gYWRkIGFuZCByZW1vdmUgaXRlbXMgZnJvbSB0aGUgc291cmNlcyBhbmRcbiAgICAgIC8vIHRoZSBuYW1lcyBhcnJheS5cbiAgICAgIHZhciBuZXdTb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gICAgICB2YXIgbmV3TmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcblxuICAgICAgLy8gRmluZCBtYXBwaW5ncyBmb3IgdGhlIFwic291cmNlRmlsZVwiXG4gICAgICB0aGlzLl9tYXBwaW5ncy51bnNvcnRlZEZvckVhY2goZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgICAgaWYgKG1hcHBpbmcuc291cmNlID09PSBzb3VyY2VGaWxlICYmIG1hcHBpbmcub3JpZ2luYWxMaW5lICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBDaGVjayBpZiBpdCBjYW4gYmUgbWFwcGVkIGJ5IHRoZSBzb3VyY2UgbWFwLCB0aGVuIHVwZGF0ZSB0aGUgbWFwcGluZy5cbiAgICAgICAgICB2YXIgb3JpZ2luYWwgPSBhU291cmNlTWFwQ29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICAgICAgICBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQ29weSBtYXBwaW5nXG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID0gb3JpZ2luYWwubGluZTtcbiAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbC5jb2x1bW47XG4gICAgICAgICAgICBpZiAob3JpZ2luYWwubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgIW5ld1NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgICBuZXdTb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICAgIGlmIChuYW1lICE9IG51bGwgJiYgIW5ld05hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICAgIG5ld05hbWVzLmFkZChuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICB9LCB0aGlzKTtcbiAgICAgIHRoaXMuX3NvdXJjZXMgPSBuZXdTb3VyY2VzO1xuICAgICAgdGhpcy5fbmFtZXMgPSBuZXdOYW1lcztcblxuICAgICAgLy8gQ29weSBzb3VyY2VzQ29udGVudHMgb2YgYXBwbGllZCBtYXAuXG4gICAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoYVNvdXJjZU1hcFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhU291cmNlTWFwUGF0aCwgc291cmNlRmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIEEgbWFwcGluZyBjYW4gaGF2ZSBvbmUgb2YgdGhlIHRocmVlIGxldmVscyBvZiBkYXRhOlxuICAgKlxuICAgKiAgIDEuIEp1c3QgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAgICogICAyLiBUaGUgR2VuZXJhdGVkIHBvc2l0aW9uLCBvcmlnaW5hbCBwb3NpdGlvbiwgYW5kIG9yaWdpbmFsIHNvdXJjZS5cbiAgICogICAzLiBHZW5lcmF0ZWQgYW5kIG9yaWdpbmFsIHBvc2l0aW9uLCBvcmlnaW5hbCBzb3VyY2UsIGFzIHdlbGwgYXMgYSBuYW1lXG4gICAqICAgICAgdG9rZW4uXG4gICAqXG4gICAqIFRvIG1haW50YWluIGNvbnNpc3RlbmN5LCB3ZSB2YWxpZGF0ZSB0aGF0IGFueSBuZXcgbWFwcGluZyBiZWluZyBhZGRlZCBmYWxsc1xuICAgKiBpbiB0byBvbmUgb2YgdGhlc2UgY2F0ZWdvcmllcy5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRlTWFwcGluZyA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3ZhbGlkYXRlTWFwcGluZyhhR2VuZXJhdGVkLCBhT3JpZ2luYWwsIGFTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhTmFtZSkge1xuICAgICAgaWYgKGFHZW5lcmF0ZWQgJiYgJ2xpbmUnIGluIGFHZW5lcmF0ZWQgJiYgJ2NvbHVtbicgaW4gYUdlbmVyYXRlZFxuICAgICAgICAgICYmIGFHZW5lcmF0ZWQubGluZSA+IDAgJiYgYUdlbmVyYXRlZC5jb2x1bW4gPj0gMFxuICAgICAgICAgICYmICFhT3JpZ2luYWwgJiYgIWFTb3VyY2UgJiYgIWFOYW1lKSB7XG4gICAgICAgIC8vIENhc2UgMS5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICAgICAgICAmJiBhT3JpZ2luYWwgJiYgJ2xpbmUnIGluIGFPcmlnaW5hbCAmJiAnY29sdW1uJyBpbiBhT3JpZ2luYWxcbiAgICAgICAgICAgICAgICYmIGFHZW5lcmF0ZWQubGluZSA+IDAgJiYgYUdlbmVyYXRlZC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICAgJiYgYU9yaWdpbmFsLmxpbmUgPiAwICYmIGFPcmlnaW5hbC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICAgJiYgYVNvdXJjZSkge1xuICAgICAgICAvLyBDYXNlcyAyIGFuZCAzLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hcHBpbmc6ICcgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgZ2VuZXJhdGVkOiBhR2VuZXJhdGVkLFxuICAgICAgICAgIHNvdXJjZTogYVNvdXJjZSxcbiAgICAgICAgICBvcmlnaW5hbDogYU9yaWdpbmFsLFxuICAgICAgICAgIG5hbWU6IGFOYW1lXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gIC8qKlxuICAgKiBTZXJpYWxpemUgdGhlIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIHRvIHRoZSBzdHJlYW0gb2YgYmFzZSA2NCBWTFFzXG4gICAqIHNwZWNpZmllZCBieSB0aGUgc291cmNlIG1hcCBmb3JtYXQuXG4gICAqL1xuICBTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9zZXJpYWxpemVNYXBwaW5ncyA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3NlcmlhbGl6ZU1hcHBpbmdzKCkge1xuICAgICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZExpbmUgPSAxO1xuICAgICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICAgIHZhciBwcmV2aW91c05hbWUgPSAwO1xuICAgICAgdmFyIHByZXZpb3VzU291cmNlID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIHZhciBtYXBwaW5nO1xuXG4gICAgICB2YXIgbWFwcGluZ3MgPSB0aGlzLl9tYXBwaW5ncy50b0FycmF5KCk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbWFwcGluZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbWFwcGluZyA9IG1hcHBpbmdzW2ldO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgICB3aGlsZSAobWFwcGluZy5nZW5lcmF0ZWRMaW5lICE9PSBwcmV2aW91c0dlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyc7XG4gICAgICAgICAgICBwcmV2aW91c0dlbmVyYXRlZExpbmUrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICBpZiAoIXV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZywgbWFwcGluZ3NbaSAtIDFdKSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCArPSAnLCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbik7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICByZXN1bHQgKz0gYmFzZTY0VkxRLmVuY29kZSh0aGlzLl9zb3VyY2VzLmluZGV4T2YobWFwcGluZy5zb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c1NvdXJjZSk7XG4gICAgICAgICAgcHJldmlvdXNTb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmluZGV4T2YobWFwcGluZy5zb3VyY2UpO1xuXG4gICAgICAgICAgLy8gbGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkIGluIFNvdXJjZU1hcCBzcGVjIHZlcnNpb24gM1xuICAgICAgICAgIHJlc3VsdCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbExpbmUpO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmUgLSAxO1xuXG4gICAgICAgICAgcmVzdWx0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbENvbHVtbik7XG4gICAgICAgICAgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgICBpZiAobWFwcGluZy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBiYXNlNjRWTFEuZW5jb2RlKHRoaXMuX25hbWVzLmluZGV4T2YobWFwcGluZy5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c05hbWUpO1xuICAgICAgICAgICAgcHJldmlvdXNOYW1lID0gdGhpcy5fbmFtZXMuaW5kZXhPZihtYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudCA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2dlbmVyYXRlU291cmNlc0NvbnRlbnQoYVNvdXJjZXMsIGFTb3VyY2VSb290KSB7XG4gICAgICByZXR1cm4gYVNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYVNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUoYVNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleSA9IHV0aWwudG9TZXRTdHJpbmcoc291cmNlKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9zb3VyY2VzQ29udGVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5KVxuICAgICAgICAgID8gdGhpcy5fc291cmNlc0NvbnRlbnRzW2tleV1cbiAgICAgICAgICA6IG51bGw7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBFeHRlcm5hbGl6ZSB0aGUgc291cmNlIG1hcC5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9KU09OID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9KU09OKCkge1xuICAgICAgdmFyIG1hcCA9IHtcbiAgICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgICAgc291cmNlczogdGhpcy5fc291cmNlcy50b0FycmF5KCksXG4gICAgICAgIG5hbWVzOiB0aGlzLl9uYW1lcy50b0FycmF5KCksXG4gICAgICAgIG1hcHBpbmdzOiB0aGlzLl9zZXJpYWxpemVNYXBwaW5ncygpXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuX2ZpbGUgIT0gbnVsbCkge1xuICAgICAgICBtYXAuZmlsZSA9IHRoaXMuX2ZpbGU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgIG1hcC5zb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgbWFwLnNvdXJjZXNDb250ZW50ID0gdGhpcy5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChtYXAuc291cmNlcywgbWFwLnNvdXJjZVJvb3QpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWFwO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQgdG8gYSBzdHJpbmcuXG4gICAqL1xuICBTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSk7XG4gICAgfTtcblxuICBleHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IFNvdXJjZU1hcEdlbmVyYXRvcjtcblxufSk7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5pZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBkZWZpbmUgPSByZXF1aXJlKCdhbWRlZmluZScpKG1vZHVsZSwgcmVxdWlyZSk7XG59XG5kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4gIHZhciBTb3VyY2VNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL3NvdXJjZS1tYXAtZ2VuZXJhdG9yJykuU291cmNlTWFwR2VuZXJhdG9yO1xuICB2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4gIC8vIE1hdGNoZXMgYSBXaW5kb3dzLXN0eWxlIGBcXHJcXG5gIG5ld2xpbmUgb3IgYSBgXFxuYCBuZXdsaW5lIHVzZWQgYnkgYWxsIG90aGVyXG4gIC8vIG9wZXJhdGluZyBzeXN0ZW1zIHRoZXNlIGRheXMgKGNhcHR1cmluZyB0aGUgcmVzdWx0KS5cbiAgdmFyIFJFR0VYX05FV0xJTkUgPSAvKFxccj9cXG4pLztcblxuICAvLyBOZXdsaW5lIGNoYXJhY3RlciBjb2RlIGZvciBjaGFyQ29kZUF0KCkgY29tcGFyaXNvbnNcbiAgdmFyIE5FV0xJTkVfQ09ERSA9IDEwO1xuXG4gIC8vIFByaXZhdGUgc3ltYm9sIGZvciBpZGVudGlmeWluZyBgU291cmNlTm9kZWBzIHdoZW4gbXVsdGlwbGUgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHNvdXJjZS1tYXAgbGlicmFyeSBhcmUgbG9hZGVkLiBUaGlzIE1VU1QgTk9UIENIQU5HRSBhY3Jvc3NcbiAgLy8gdmVyc2lvbnMhXG4gIHZhciBpc1NvdXJjZU5vZGUgPSBcIiQkJGlzU291cmNlTm9kZSQkJFwiO1xuXG4gIC8qKlxuICAgKiBTb3VyY2VOb2RlcyBwcm92aWRlIGEgd2F5IHRvIGFic3RyYWN0IG92ZXIgaW50ZXJwb2xhdGluZy9jb25jYXRlbmF0aW5nXG4gICAqIHNuaXBwZXRzIG9mIGdlbmVyYXRlZCBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlIHdoaWxlIG1haW50YWluaW5nIHRoZSBsaW5lIGFuZFxuICAgKiBjb2x1bW4gaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29kZS5cbiAgICpcbiAgICogQHBhcmFtIGFMaW5lIFRoZSBvcmlnaW5hbCBsaW5lIG51bWJlci5cbiAgICogQHBhcmFtIGFDb2x1bW4gVGhlIG9yaWdpbmFsIGNvbHVtbiBudW1iZXIuXG4gICAqIEBwYXJhbSBhU291cmNlIFRoZSBvcmlnaW5hbCBzb3VyY2UncyBmaWxlbmFtZS5cbiAgICogQHBhcmFtIGFDaHVua3MgT3B0aW9uYWwuIEFuIGFycmF5IG9mIHN0cmluZ3Mgd2hpY2ggYXJlIHNuaXBwZXRzIG9mXG4gICAqICAgICAgICBnZW5lcmF0ZWQgSlMsIG9yIG90aGVyIFNvdXJjZU5vZGVzLlxuICAgKiBAcGFyYW0gYU5hbWUgVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIuXG4gICAqL1xuICBmdW5jdGlvbiBTb3VyY2VOb2RlKGFMaW5lLCBhQ29sdW1uLCBhU291cmNlLCBhQ2h1bmtzLCBhTmFtZSkge1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLnNvdXJjZUNvbnRlbnRzID0ge307XG4gICAgdGhpcy5saW5lID0gYUxpbmUgPT0gbnVsbCA/IG51bGwgOiBhTGluZTtcbiAgICB0aGlzLmNvbHVtbiA9IGFDb2x1bW4gPT0gbnVsbCA/IG51bGwgOiBhQ29sdW1uO1xuICAgIHRoaXMuc291cmNlID0gYVNvdXJjZSA9PSBudWxsID8gbnVsbCA6IGFTb3VyY2U7XG4gICAgdGhpcy5uYW1lID0gYU5hbWUgPT0gbnVsbCA/IG51bGwgOiBhTmFtZTtcbiAgICB0aGlzW2lzU291cmNlTm9kZV0gPSB0cnVlO1xuICAgIGlmIChhQ2h1bmtzICE9IG51bGwpIHRoaXMuYWRkKGFDaHVua3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBTb3VyY2VOb2RlIGZyb20gZ2VuZXJhdGVkIGNvZGUgYW5kIGEgU291cmNlTWFwQ29uc3VtZXIuXG4gICAqXG4gICAqIEBwYXJhbSBhR2VuZXJhdGVkQ29kZSBUaGUgZ2VuZXJhdGVkIGNvZGVcbiAgICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwIGZvciB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAgICogQHBhcmFtIGFSZWxhdGl2ZVBhdGggT3B0aW9uYWwuIFRoZSBwYXRoIHRoYXQgcmVsYXRpdmUgc291cmNlcyBpbiB0aGVcbiAgICogICAgICAgIFNvdXJjZU1hcENvbnN1bWVyIHNob3VsZCBiZSByZWxhdGl2ZSB0by5cbiAgICovXG4gIFNvdXJjZU5vZGUuZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU5vZGVfZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAoYUdlbmVyYXRlZENvZGUsIGFTb3VyY2VNYXBDb25zdW1lciwgYVJlbGF0aXZlUGF0aCkge1xuICAgICAgLy8gVGhlIFNvdXJjZU5vZGUgd2Ugd2FudCB0byBmaWxsIHdpdGggdGhlIGdlbmVyYXRlZCBjb2RlXG4gICAgICAvLyBhbmQgdGhlIFNvdXJjZU1hcFxuICAgICAgdmFyIG5vZGUgPSBuZXcgU291cmNlTm9kZSgpO1xuXG4gICAgICAvLyBBbGwgZXZlbiBpbmRpY2VzIG9mIHRoaXMgYXJyYXkgYXJlIG9uZSBsaW5lIG9mIHRoZSBnZW5lcmF0ZWQgY29kZSxcbiAgICAgIC8vIHdoaWxlIGFsbCBvZGQgaW5kaWNlcyBhcmUgdGhlIG5ld2xpbmVzIGJldHdlZW4gdHdvIGFkamFjZW50IGxpbmVzXG4gICAgICAvLyAoc2luY2UgYFJFR0VYX05FV0xJTkVgIGNhcHR1cmVzIGl0cyBtYXRjaCkuXG4gICAgICAvLyBQcm9jZXNzZWQgZnJhZ21lbnRzIGFyZSByZW1vdmVkIGZyb20gdGhpcyBhcnJheSwgYnkgY2FsbGluZyBgc2hpZnROZXh0TGluZWAuXG4gICAgICB2YXIgcmVtYWluaW5nTGluZXMgPSBhR2VuZXJhdGVkQ29kZS5zcGxpdChSRUdFWF9ORVdMSU5FKTtcbiAgICAgIHZhciBzaGlmdE5leHRMaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsaW5lQ29udGVudHMgPSByZW1haW5pbmdMaW5lcy5zaGlmdCgpO1xuICAgICAgICAvLyBUaGUgbGFzdCBsaW5lIG9mIGEgZmlsZSBtaWdodCBub3QgaGF2ZSBhIG5ld2xpbmUuXG4gICAgICAgIHZhciBuZXdMaW5lID0gcmVtYWluaW5nTGluZXMuc2hpZnQoKSB8fCBcIlwiO1xuICAgICAgICByZXR1cm4gbGluZUNvbnRlbnRzICsgbmV3TGluZTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFdlIG5lZWQgdG8gcmVtZW1iZXIgdGhlIHBvc2l0aW9uIG9mIFwicmVtYWluaW5nTGluZXNcIlxuICAgICAgdmFyIGxhc3RHZW5lcmF0ZWRMaW5lID0gMSwgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG5cbiAgICAgIC8vIFRoZSBnZW5lcmF0ZSBTb3VyY2VOb2RlcyB3ZSBuZWVkIGEgY29kZSByYW5nZS5cbiAgICAgIC8vIFRvIGV4dHJhY3QgaXQgY3VycmVudCBhbmQgbGFzdCBtYXBwaW5nIGlzIHVzZWQuXG4gICAgICAvLyBIZXJlIHdlIHN0b3JlIHRoZSBsYXN0IG1hcHBpbmcuXG4gICAgICB2YXIgbGFzdE1hcHBpbmcgPSBudWxsO1xuXG4gICAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgICAgaWYgKGxhc3RNYXBwaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gV2UgYWRkIHRoZSBjb2RlIGZyb20gXCJsYXN0TWFwcGluZ1wiIHRvIFwibWFwcGluZ1wiOlxuICAgICAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIHRoZXJlIGlzIGEgbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgICBpZiAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICAgIHZhciBjb2RlID0gXCJcIjtcbiAgICAgICAgICAgIC8vIEFzc29jaWF0ZSBmaXJzdCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgICAgICAvLyBUaGUgcmVtYWluaW5nIGNvZGUgaXMgYWRkZWQgd2l0aG91dCBtYXBwaW5nXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIG5ldyBsaW5lIGluIGJldHdlZW4uXG4gICAgICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIGNvZGUgYmV0d2VlbiBcImxhc3RHZW5lcmF0ZWRDb2x1bW5cIiBhbmRcbiAgICAgICAgICAgIC8vIFwibWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cIiB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICAgICAgdmFyIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbMF07XG4gICAgICAgICAgICB2YXIgY29kZSA9IG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICAgIHJlbWFpbmluZ0xpbmVzWzBdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuICAgICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBjb2RlKTtcbiAgICAgICAgICAgIC8vIE5vIG1vcmUgcmVtYWluaW5nIGNvZGUsIGNvbnRpbnVlXG4gICAgICAgICAgICBsYXN0TWFwcGluZyA9IG1hcHBpbmc7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGFkZCB0aGUgZ2VuZXJhdGVkIGNvZGUgdW50aWwgdGhlIGZpcnN0IG1hcHBpbmdcbiAgICAgICAgLy8gdG8gdGhlIFNvdXJjZU5vZGUgd2l0aG91dCBhbnkgbWFwcGluZy5cbiAgICAgICAgLy8gRWFjaCBsaW5lIGlzIGFkZGVkIGFzIHNlcGFyYXRlIHN0cmluZy5cbiAgICAgICAgd2hpbGUgKGxhc3RHZW5lcmF0ZWRMaW5lIDwgbWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbm9kZS5hZGQoc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0R2VuZXJhdGVkQ29sdW1uIDwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pIHtcbiAgICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1swXTtcbiAgICAgICAgICBub2RlLmFkZChuZXh0TGluZS5zdWJzdHIoMCwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pKTtcbiAgICAgICAgICByZW1haW5pbmdMaW5lc1swXSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgLy8gV2UgaGF2ZSBwcm9jZXNzZWQgYWxsIG1hcHBpbmdzLlxuICAgICAgaWYgKHJlbWFpbmluZ0xpbmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGxhc3RNYXBwaW5nKSB7XG4gICAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSByZW1haW5pbmcgY29kZSBpbiB0aGUgY3VycmVudCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFuZCBhZGQgdGhlIHJlbWFpbmluZyBsaW5lcyB3aXRob3V0IGFueSBtYXBwaW5nXG4gICAgICAgIG5vZGUuYWRkKHJlbWFpbmluZ0xpbmVzLmpvaW4oXCJcIikpO1xuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50IGludG8gU291cmNlTm9kZVxuICAgICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKGFSZWxhdGl2ZVBhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZS5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG5vZGU7XG5cbiAgICAgIGZ1bmN0aW9uIGFkZE1hcHBpbmdXaXRoQ29kZShtYXBwaW5nLCBjb2RlKSB7XG4gICAgICAgIGlmIChtYXBwaW5nID09PSBudWxsIHx8IG1hcHBpbmcuc291cmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub2RlLmFkZChjb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gYVJlbGF0aXZlUGF0aFxuICAgICAgICAgICAgPyB1dGlsLmpvaW4oYVJlbGF0aXZlUGF0aCwgbWFwcGluZy5zb3VyY2UpXG4gICAgICAgICAgICA6IG1hcHBpbmcuc291cmNlO1xuICAgICAgICAgIG5vZGUuYWRkKG5ldyBTb3VyY2VOb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5uYW1lKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhpcyBzb3VyY2Ugbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gICAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICAgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gU291cmNlTm9kZV9hZGQoYUNodW5rKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYUNodW5rKSkge1xuICAgICAgYUNodW5rLmZvckVhY2goZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIHRoaXMuYWRkKGNodW5rKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBpZiAoYUNodW5rKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChhQ2h1bmspO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGlzIHNvdXJjZSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAgICogICAgICAgIFNvdXJjZU5vZGUsIG9yIGFuIGFycmF5IHdoZXJlIGVhY2ggbWVtYmVyIGlzIG9uZSBvZiB0aG9zZSB0aGluZ3MuXG4gICAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gU291cmNlTm9kZV9wcmVwZW5kKGFDaHVuaykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICAgIGZvciAodmFyIGkgPSBhQ2h1bmsubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMucHJlcGVuZChhQ2h1bmtbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuLnVuc2hpZnQoYUNodW5rKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIEpTIHNuaXBwZXRzIGluIHRoaXMgbm9kZSBhbmQgaXRzIGNoaWxkcmVuLiBUaGVcbiAgICogd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBmb3IgZWFjaCBzbmlwcGV0IG9mIEpTIGFuZCBpcyBwYXNzZWQgdGhhdFxuICAgKiBzbmlwcGV0IGFuZCB0aGUgaXRzIG9yaWdpbmFsIGFzc29jaWF0ZWQgc291cmNlJ3MgbGluZS9jb2x1bW4gbG9jYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAgICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3dhbGsoYUZuKSB7XG4gICAgdmFyIGNodW5rO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjaHVuayA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2h1bmtbaXNTb3VyY2VOb2RlXSkge1xuICAgICAgICBjaHVuay53YWxrKGFGbik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGNodW5rICE9PSAnJykge1xuICAgICAgICAgIGFGbihjaHVuaywgeyBzb3VyY2U6IHRoaXMuc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogTGlrZSBgU3RyaW5nLnByb3RvdHlwZS5qb2luYCBleGNlcHQgZm9yIFNvdXJjZU5vZGVzLiBJbnNlcnRzIGBhU3RyYCBiZXR3ZWVuXG4gICAqIGVhY2ggb2YgYHRoaXMuY2hpbGRyZW5gLlxuICAgKlxuICAgKiBAcGFyYW0gYVNlcCBUaGUgc2VwYXJhdG9yLlxuICAgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfam9pbihhU2VwKSB7XG4gICAgdmFyIG5ld0NoaWxkcmVuO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgbmV3Q2hpbGRyZW4gPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW4tMTsgaSsrKSB7XG4gICAgICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgICAgIG5ld0NoaWxkcmVuLnB1c2goYVNlcCk7XG4gICAgICB9XG4gICAgICBuZXdDaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ld0NoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQ2FsbCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Ugb24gdGhlIHZlcnkgcmlnaHQtbW9zdCBzb3VyY2Ugc25pcHBldC4gVXNlZnVsXG4gICAqIGZvciB0cmltbWluZyB3aGl0ZXNwYWNlIGZyb20gdGhlIGVuZCBvZiBhIHNvdXJjZSBub2RlLCBldGMuXG4gICAqXG4gICAqIEBwYXJhbSBhUGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgKiBAcGFyYW0gYVJlcGxhY2VtZW50IFRoZSB0aGluZyB0byByZXBsYWNlIHRoZSBwYXR0ZXJuIHdpdGguXG4gICAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZS5yZXBsYWNlUmlnaHQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3JlcGxhY2VSaWdodChhUGF0dGVybiwgYVJlcGxhY2VtZW50KSB7XG4gICAgdmFyIGxhc3RDaGlsZCA9IHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICBpZiAobGFzdENoaWxkW2lzU291cmNlTm9kZV0pIHtcbiAgICAgIGxhc3RDaGlsZC5yZXBsYWNlUmlnaHQoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBsYXN0Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gPSBsYXN0Q2hpbGQucmVwbGFjZShhUGF0dGVybiwgYVJlcGxhY2VtZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goJycucmVwbGFjZShhUGF0dGVybiwgYVJlcGxhY2VtZW50KSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLiBUaGlzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvclxuICAgKiBpbiB0aGUgc291cmNlc0NvbnRlbnQgZmllbGQuXG4gICAqXG4gICAqIEBwYXJhbSBhU291cmNlRmlsZSBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlXG4gICAqIEBwYXJhbSBhU291cmNlQ29udGVudCBUaGUgY29udGVudCBvZiB0aGUgc291cmNlIGZpbGVcbiAgICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU5vZGVfc2V0U291cmNlQ29udGVudChhU291cmNlRmlsZSwgYVNvdXJjZUNvbnRlbnQpIHtcbiAgICAgIHRoaXMuc291cmNlQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhhU291cmNlRmlsZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gICAgfTtcblxuICAvKipcbiAgICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIFNvdXJjZU5vZGVzLiBUaGUgd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2hcbiAgICogc291cmNlIGZpbGUgY29udGVudCBhbmQgaXMgcGFzc2VkIHRoZSBmaWxlbmFtZSBhbmQgc291cmNlIGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAgICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlLndhbGtTb3VyY2VDb250ZW50cyA9XG4gICAgZnVuY3Rpb24gU291cmNlTm9kZV93YWxrU291cmNlQ29udGVudHMoYUZuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbltpXVtpc1NvdXJjZU5vZGVdKSB7XG4gICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS53YWxrU291cmNlQ29udGVudHMoYUZuKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc291cmNlcyA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQ29udGVudHMpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgYUZuKHV0aWwuZnJvbVNldFN0cmluZyhzb3VyY2VzW2ldKSwgdGhpcy5zb3VyY2VDb250ZW50c1tzb3VyY2VzW2ldXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZS4gV2Fsa3Mgb3ZlciB0aGUgdHJlZVxuICAgKiBhbmQgY29uY2F0ZW5hdGVzIGFsbCB0aGUgdmFyaW91cyBzbmlwcGV0cyB0b2dldGhlciB0byBvbmUgc3RyaW5nLlxuICAgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nKCkge1xuICAgIHZhciBzdHIgPSBcIlwiO1xuICAgIHRoaXMud2FsayhmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIHN0ciArPSBjaHVuaztcbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZSBhbG9uZyB3aXRoIGEgc291cmNlXG4gICAqIG1hcC5cbiAgICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlLnRvU3RyaW5nV2l0aFNvdXJjZU1hcCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfdG9TdHJpbmdXaXRoU291cmNlTWFwKGFBcmdzKSB7XG4gICAgdmFyIGdlbmVyYXRlZCA9IHtcbiAgICAgIGNvZGU6IFwiXCIsXG4gICAgICBsaW5lOiAxLFxuICAgICAgY29sdW1uOiAwXG4gICAgfTtcbiAgICB2YXIgbWFwID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncyk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICB2YXIgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICB2YXIgbGFzdE9yaWdpbmFsTGluZSA9IG51bGw7XG4gICAgdmFyIGxhc3RPcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gICAgdmFyIGxhc3RPcmlnaW5hbE5hbWUgPSBudWxsO1xuICAgIHRoaXMud2FsayhmdW5jdGlvbiAoY2h1bmssIG9yaWdpbmFsKSB7XG4gICAgICBnZW5lcmF0ZWQuY29kZSArPSBjaHVuaztcbiAgICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT09IG51bGxcbiAgICAgICAgICAmJiBvcmlnaW5hbC5saW5lICE9PSBudWxsXG4gICAgICAgICAgJiYgb3JpZ2luYWwuY29sdW1uICE9PSBudWxsKSB7XG4gICAgICAgIGlmKGxhc3RPcmlnaW5hbFNvdXJjZSAhPT0gb3JpZ2luYWwuc291cmNlXG4gICAgICAgICAgIHx8IGxhc3RPcmlnaW5hbExpbmUgIT09IG9yaWdpbmFsLmxpbmVcbiAgICAgICAgICAgfHwgbGFzdE9yaWdpbmFsQ29sdW1uICE9PSBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTmFtZSAhPT0gb3JpZ2luYWwubmFtZSkge1xuICAgICAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgICAgbGluZTogb3JpZ2luYWwubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICAgIGxhc3RPcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgICBsYXN0T3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbC5jb2x1bW47XG4gICAgICAgIGxhc3RPcmlnaW5hbE5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbmd0aCA9IGNodW5rLmxlbmd0aDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBpZiAoY2h1bmsuY2hhckNvZGVBdChpZHgpID09PSBORVdMSU5FX0NPREUpIHtcbiAgICAgICAgICBnZW5lcmF0ZWQubGluZSsrO1xuICAgICAgICAgIGdlbmVyYXRlZC5jb2x1bW4gPSAwO1xuICAgICAgICAgIC8vIE1hcHBpbmdzIGVuZCBhdCBlb2xcbiAgICAgICAgICBpZiAoaWR4ICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgICBzb3VyY2U6IG9yaWdpbmFsLnNvdXJjZSxcbiAgICAgICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBuYW1lOiBvcmlnaW5hbC5uYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy53YWxrU291cmNlQ29udGVudHMoZnVuY3Rpb24gKHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpIHtcbiAgICAgIG1hcC5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgY29kZTogZ2VuZXJhdGVkLmNvZGUsIG1hcDogbWFwIH07XG4gIH07XG5cbiAgZXhwb3J0cy5Tb3VyY2VOb2RlID0gU291cmNlTm9kZTtcblxufSk7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5pZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBkZWZpbmUgPSByZXF1aXJlKCdhbWRlZmluZScpKG1vZHVsZSwgcmVxdWlyZSk7XG59XG5kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgaGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHZhbHVlcyBmcm9tIHBhcmFtZXRlci9vcHRpb25zXG4gICAqIG9iamVjdHMuXG4gICAqXG4gICAqIEBwYXJhbSBhcmdzIFRoZSBvYmplY3Qgd2UgYXJlIGV4dHJhY3RpbmcgdmFsdWVzIGZyb21cbiAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHdlIGFyZSBnZXR0aW5nLlxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIEFuIG9wdGlvbmFsIHZhbHVlIHRvIHJldHVybiBpZiB0aGUgcHJvcGVydHkgaXMgbWlzc2luZ1xuICAgKiBmcm9tIHRoZSBvYmplY3QuIElmIHRoaXMgaXMgbm90IHNwZWNpZmllZCBhbmQgdGhlIHByb3BlcnR5IGlzIG1pc3NpbmcsIGFuXG4gICAqIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QXJnKGFBcmdzLCBhTmFtZSwgYURlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChhTmFtZSBpbiBhQXJncykge1xuICAgICAgcmV0dXJuIGFBcmdzW2FOYW1lXTtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIHJldHVybiBhRGVmYXVsdFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFOYW1lICsgJ1wiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQuJyk7XG4gICAgfVxuICB9XG4gIGV4cG9ydHMuZ2V0QXJnID0gZ2V0QXJnO1xuXG4gIHZhciB1cmxSZWdleHAgPSAvXig/OihbXFx3K1xcLS5dKyk6KT9cXC9cXC8oPzooXFx3KzpcXHcrKUApPyhbXFx3Ll0qKSg/OjooXFxkKykpPyhcXFMqKSQvO1xuICB2YXIgZGF0YVVybFJlZ2V4cCA9IC9eZGF0YTouK1xcLC4rJC87XG5cbiAgZnVuY3Rpb24gdXJsUGFyc2UoYVVybCkge1xuICAgIHZhciBtYXRjaCA9IGFVcmwubWF0Y2godXJsUmVnZXhwKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjaGVtZTogbWF0Y2hbMV0sXG4gICAgICBhdXRoOiBtYXRjaFsyXSxcbiAgICAgIGhvc3Q6IG1hdGNoWzNdLFxuICAgICAgcG9ydDogbWF0Y2hbNF0sXG4gICAgICBwYXRoOiBtYXRjaFs1XVxuICAgIH07XG4gIH1cbiAgZXhwb3J0cy51cmxQYXJzZSA9IHVybFBhcnNlO1xuXG4gIGZ1bmN0aW9uIHVybEdlbmVyYXRlKGFQYXJzZWRVcmwpIHtcbiAgICB2YXIgdXJsID0gJyc7XG4gICAgaWYgKGFQYXJzZWRVcmwuc2NoZW1lKSB7XG4gICAgICB1cmwgKz0gYVBhcnNlZFVybC5zY2hlbWUgKyAnOic7XG4gICAgfVxuICAgIHVybCArPSAnLy8nO1xuICAgIGlmIChhUGFyc2VkVXJsLmF1dGgpIHtcbiAgICAgIHVybCArPSBhUGFyc2VkVXJsLmF1dGggKyAnQCc7XG4gICAgfVxuICAgIGlmIChhUGFyc2VkVXJsLmhvc3QpIHtcbiAgICAgIHVybCArPSBhUGFyc2VkVXJsLmhvc3Q7XG4gICAgfVxuICAgIGlmIChhUGFyc2VkVXJsLnBvcnQpIHtcbiAgICAgIHVybCArPSBcIjpcIiArIGFQYXJzZWRVcmwucG9ydFxuICAgIH1cbiAgICBpZiAoYVBhcnNlZFVybC5wYXRoKSB7XG4gICAgICB1cmwgKz0gYVBhcnNlZFVybC5wYXRoO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIGV4cG9ydHMudXJsR2VuZXJhdGUgPSB1cmxHZW5lcmF0ZTtcblxuICAvKipcbiAgICogTm9ybWFsaXplcyBhIHBhdGgsIG9yIHRoZSBwYXRoIHBvcnRpb24gb2YgYSBVUkw6XG4gICAqXG4gICAqIC0gUmVwbGFjZXMgY29uc2VxdXRpdmUgc2xhc2hlcyB3aXRoIG9uZSBzbGFzaC5cbiAgICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICcuJyBwYXJ0cy5cbiAgICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICc8ZGlyPi8uLicgcGFydHMuXG4gICAqXG4gICAqIEJhc2VkIG9uIGNvZGUgaW4gdGhlIE5vZGUuanMgJ3BhdGgnIGNvcmUgbW9kdWxlLlxuICAgKlxuICAgKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgdXJsIHRvIG5vcm1hbGl6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShhUGF0aCkge1xuICAgIHZhciBwYXRoID0gYVBhdGg7XG4gICAgdmFyIHVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgICBpZiAodXJsKSB7XG4gICAgICBpZiAoIXVybC5wYXRoKSB7XG4gICAgICAgIHJldHVybiBhUGF0aDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSB1cmwucGF0aDtcbiAgICB9XG4gICAgdmFyIGlzQWJzb2x1dGUgPSAocGF0aC5jaGFyQXQoMCkgPT09ICcvJyk7XG5cbiAgICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KC9cXC8rLyk7XG4gICAgZm9yICh2YXIgcGFydCwgdXAgPSAwLCBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICAgIHVwKys7XG4gICAgICB9IGVsc2UgaWYgKHVwID4gMCkge1xuICAgICAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgICAgICAvLyBUaGUgZmlyc3QgcGFydCBpcyBibGFuayBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZS4gVHJ5aW5nIHRvIGdvXG4gICAgICAgICAgLy8gYWJvdmUgdGhlIHJvb3QgaXMgYSBuby1vcC4gVGhlcmVmb3JlIHdlIGNhbiByZW1vdmUgYWxsICcuLicgcGFydHNcbiAgICAgICAgICAvLyBkaXJlY3RseSBhZnRlciB0aGUgcm9vdC5cbiAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSArIDEsIHVwKTtcbiAgICAgICAgICB1cCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydHMuc3BsaWNlKGksIDIpO1xuICAgICAgICAgIHVwLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcGF0aCA9IHBhcnRzLmpvaW4oJy8nKTtcblxuICAgIGlmIChwYXRoID09PSAnJykge1xuICAgICAgcGF0aCA9IGlzQWJzb2x1dGUgPyAnLycgOiAnLic7XG4gICAgfVxuXG4gICAgaWYgKHVybCkge1xuICAgICAgdXJsLnBhdGggPSBwYXRoO1xuICAgICAgcmV0dXJuIHVybEdlbmVyYXRlKHVybCk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIGV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xuXG4gIC8qKlxuICAgKiBKb2lucyB0d28gcGF0aHMvVVJMcy5cbiAgICpcbiAgICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICAgKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgVVJMIHRvIGJlIGpvaW5lZCB3aXRoIHRoZSByb290LlxuICAgKlxuICAgKiAtIElmIGFQYXRoIGlzIGEgVVJMIG9yIGEgZGF0YSBVUkksIGFQYXRoIGlzIHJldHVybmVkLCB1bmxlc3MgYVBhdGggaXMgYVxuICAgKiAgIHNjaGVtZS1yZWxhdGl2ZSBVUkw6IFRoZW4gdGhlIHNjaGVtZSBvZiBhUm9vdCwgaWYgYW55LCBpcyBwcmVwZW5kZWRcbiAgICogICBmaXJzdC5cbiAgICogLSBPdGhlcndpc2UgYVBhdGggaXMgYSBwYXRoLiBJZiBhUm9vdCBpcyBhIFVSTCwgdGhlbiBpdHMgcGF0aCBwb3J0aW9uXG4gICAqICAgaXMgdXBkYXRlZCB3aXRoIHRoZSByZXN1bHQgYW5kIGFSb290IGlzIHJldHVybmVkLiBPdGhlcndpc2UgdGhlIHJlc3VsdFxuICAgKiAgIGlzIHJldHVybmVkLlxuICAgKiAgIC0gSWYgYVBhdGggaXMgYWJzb2x1dGUsIHRoZSByZXN1bHQgaXMgYVBhdGguXG4gICAqICAgLSBPdGhlcndpc2UgdGhlIHR3byBwYXRocyBhcmUgam9pbmVkIHdpdGggYSBzbGFzaC5cbiAgICogLSBKb2luaW5nIGZvciBleGFtcGxlICdodHRwOi8vJyBhbmQgJ3d3dy5leGFtcGxlLmNvbScgaXMgYWxzbyBzdXBwb3J0ZWQuXG4gICAqL1xuICBmdW5jdGlvbiBqb2luKGFSb290LCBhUGF0aCkge1xuICAgIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgICAgYVJvb3QgPSBcIi5cIjtcbiAgICB9XG4gICAgaWYgKGFQYXRoID09PSBcIlwiKSB7XG4gICAgICBhUGF0aCA9IFwiLlwiO1xuICAgIH1cbiAgICB2YXIgYVBhdGhVcmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gICAgdmFyIGFSb290VXJsID0gdXJsUGFyc2UoYVJvb3QpO1xuICAgIGlmIChhUm9vdFVybCkge1xuICAgICAgYVJvb3QgPSBhUm9vdFVybC5wYXRoIHx8ICcvJztcbiAgICB9XG5cbiAgICAvLyBgam9pbihmb28sICcvL3d3dy5leGFtcGxlLm9yZycpYFxuICAgIGlmIChhUGF0aFVybCAmJiAhYVBhdGhVcmwuc2NoZW1lKSB7XG4gICAgICBpZiAoYVJvb3RVcmwpIHtcbiAgICAgICAgYVBhdGhVcmwuc2NoZW1lID0gYVJvb3RVcmwuc2NoZW1lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVybEdlbmVyYXRlKGFQYXRoVXJsKTtcbiAgICB9XG5cbiAgICBpZiAoYVBhdGhVcmwgfHwgYVBhdGgubWF0Y2goZGF0YVVybFJlZ2V4cCkpIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG5cbiAgICAvLyBgam9pbignaHR0cDovLycsICd3d3cuZXhhbXBsZS5jb20nKWBcbiAgICBpZiAoYVJvb3RVcmwgJiYgIWFSb290VXJsLmhvc3QgJiYgIWFSb290VXJsLnBhdGgpIHtcbiAgICAgIGFSb290VXJsLmhvc3QgPSBhUGF0aDtcbiAgICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gICAgfVxuXG4gICAgdmFyIGpvaW5lZCA9IGFQYXRoLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgICA/IGFQYXRoXG4gICAgICA6IG5vcm1hbGl6ZShhUm9vdC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIGFQYXRoKTtcblxuICAgIGlmIChhUm9vdFVybCkge1xuICAgICAgYVJvb3RVcmwucGF0aCA9IGpvaW5lZDtcbiAgICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gICAgfVxuICAgIHJldHVybiBqb2luZWQ7XG4gIH1cbiAgZXhwb3J0cy5qb2luID0gam9pbjtcblxuICAvKipcbiAgICogTWFrZSBhIHBhdGggcmVsYXRpdmUgdG8gYSBVUkwgb3IgYW5vdGhlciBwYXRoLlxuICAgKlxuICAgKiBAcGFyYW0gYVJvb3QgVGhlIHJvb3QgcGF0aCBvciBVUkwuXG4gICAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgbWFkZSByZWxhdGl2ZSB0byBhUm9vdC5cbiAgICovXG4gIGZ1bmN0aW9uIHJlbGF0aXZlKGFSb290LCBhUGF0aCkge1xuICAgIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgICAgYVJvb3QgPSBcIi5cIjtcbiAgICB9XG5cbiAgICBhUm9vdCA9IGFSb290LnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cbiAgICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgdGhlIHBhdGggdG8gYmUgYWJvdmUgdGhlIHJvb3QuIEluIHRoaXMgY2FzZSwgc2ltcGx5XG4gICAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgcm9vdCBpcyBhIHByZWZpeCBvZiB0aGUgcGF0aCB3b24ndCB3b3JrLiBJbnN0ZWFkLCB3ZVxuICAgIC8vIG5lZWQgdG8gcmVtb3ZlIGNvbXBvbmVudHMgZnJvbSB0aGUgcm9vdCBvbmUgYnkgb25lLCB1bnRpbCBlaXRoZXIgd2UgZmluZFxuICAgIC8vIGEgcHJlZml4IHRoYXQgZml0cywgb3Igd2UgcnVuIG91dCBvZiBjb21wb25lbnRzIHRvIHJlbW92ZS5cbiAgICB2YXIgbGV2ZWwgPSAwO1xuICAgIHdoaWxlIChhUGF0aC5pbmRleE9mKGFSb290ICsgJy8nKSAhPT0gMCkge1xuICAgICAgdmFyIGluZGV4ID0gYVJvb3QubGFzdEluZGV4T2YoXCIvXCIpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gYVBhdGg7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBvbmx5IHBhcnQgb2YgdGhlIHJvb3QgdGhhdCBpcyBsZWZ0IGlzIHRoZSBzY2hlbWUgKGkuZS4gaHR0cDovLyxcbiAgICAgIC8vIGZpbGU6Ly8vLCBldGMuKSwgb25lIG9yIG1vcmUgc2xhc2hlcyAoLyksIG9yIHNpbXBseSBub3RoaW5nIGF0IGFsbCwgd2VcbiAgICAgIC8vIGhhdmUgZXhoYXVzdGVkIGFsbCBjb21wb25lbnRzLCBzbyB0aGUgcGF0aCBpcyBub3QgcmVsYXRpdmUgdG8gdGhlIHJvb3QuXG4gICAgICBhUm9vdCA9IGFSb290LnNsaWNlKDAsIGluZGV4KTtcbiAgICAgIGlmIChhUm9vdC5tYXRjaCgvXihbXlxcL10rOlxcLyk/XFwvKiQvKSkge1xuICAgICAgICByZXR1cm4gYVBhdGg7XG4gICAgICB9XG5cbiAgICAgICsrbGV2ZWw7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHdlIGFkZCBhIFwiLi4vXCIgZm9yIGVhY2ggY29tcG9uZW50IHdlIHJlbW92ZWQgZnJvbSB0aGUgcm9vdC5cbiAgICByZXR1cm4gQXJyYXkobGV2ZWwgKyAxKS5qb2luKFwiLi4vXCIpICsgYVBhdGguc3Vic3RyKGFSb290Lmxlbmd0aCArIDEpO1xuICB9XG4gIGV4cG9ydHMucmVsYXRpdmUgPSByZWxhdGl2ZTtcblxuICAvKipcbiAgICogQmVjYXVzZSBiZWhhdmlvciBnb2VzIHdhY2t5IHdoZW4geW91IHNldCBgX19wcm90b19fYCBvbiBvYmplY3RzLCB3ZVxuICAgKiBoYXZlIHRvIHByZWZpeCBhbGwgdGhlIHN0cmluZ3MgaW4gb3VyIHNldCB3aXRoIGFuIGFyYml0cmFyeSBjaGFyYWN0ZXIuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL3B1bGwvMzEgYW5kXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzMwXG4gICAqXG4gICAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICAgKi9cbiAgZnVuY3Rpb24gdG9TZXRTdHJpbmcoYVN0cikge1xuICAgIHJldHVybiAnJCcgKyBhU3RyO1xuICB9XG4gIGV4cG9ydHMudG9TZXRTdHJpbmcgPSB0b1NldFN0cmluZztcblxuICBmdW5jdGlvbiBmcm9tU2V0U3RyaW5nKGFTdHIpIHtcbiAgICByZXR1cm4gYVN0ci5zdWJzdHIoMSk7XG4gIH1cbiAgZXhwb3J0cy5mcm9tU2V0U3RyaW5nID0gZnJvbVNldFN0cmluZztcblxuICAvKipcbiAgICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aGVyZSB0aGUgb3JpZ2luYWwgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAgICpcbiAgICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICAgKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIG9yaWdpbmFsIHNvdXJjZS9saW5lL2NvbHVtbiwgYnV0IGRpZmZlcmVudCBnZW5lcmF0ZWRcbiAgICogbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGEgbWFwcGluZyB3aXRoIGFcbiAgICogc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICAgIHZhciBjbXAgPSBtYXBwaW5nQS5zb3VyY2UgLSBtYXBwaW5nQi5zb3VyY2U7XG4gICAgaWYgKGNtcCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gICAgaWYgKGNtcCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICAgIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gICAgaWYgKGNtcCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIHJldHVybiBtYXBwaW5nQS5uYW1lIC0gbWFwcGluZ0IubmFtZTtcbiAgfTtcbiAgZXhwb3J0cy5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyA9IGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zO1xuXG4gIC8qKlxuICAgKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggZGVmbGF0ZWQgc291cmNlIGFuZCBuYW1lIGluZGljZXMgd2hlcmVcbiAgICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICAgKlxuICAgKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gICAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiwgYnV0IGRpZmZlcmVudFxuICAgKiBzb3VyY2UvbmFtZS9vcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYVxuICAgKiBtYXBwaW5nIHdpdGggYSBzdHViYmVkIG91dCBtYXBwaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICAgIHZhciBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLnNvdXJjZSAtIG1hcHBpbmdCLnNvdXJjZTtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gICAgaWYgKGNtcCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGluZ0EubmFtZSAtIG1hcHBpbmdCLm5hbWU7XG4gIH07XG4gIGV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZDtcblxuICBmdW5jdGlvbiBzdHJjbXAoYVN0cjEsIGFTdHIyKSB7XG4gICAgaWYgKGFTdHIxID09PSBhU3RyMikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKGFTdHIxID4gYVN0cjIpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggaW5mbGF0ZWQgc291cmNlIGFuZCBuYW1lIHN0cmluZ3Mgd2hlcmVcbiAgICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSB7XG4gICAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICAgIGlmIChjbXAgIT09IDApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICAgIGlmIChjbXAgIT09IDApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gICAgaWYgKGNtcCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xuICB9O1xuICBleHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQ7XG5cbn0pO1xuIiwiSW50bFBvbHlmaWxsLl9fYWRkTG9jYWxlRGF0YSh7bG9jYWxlOlwiZW5cIixkYXRlOntjYTpbXCJncmVnb3J5XCIsXCJidWRkaGlzdFwiLFwiY2hpbmVzZVwiLFwiY29wdGljXCIsXCJkYW5naVwiLFwiZXRoaW9hYVwiLFwiZXRoaW9waWNcIixcImdlbmVyaWNcIixcImhlYnJld1wiLFwiaW5kaWFuXCIsXCJpc2xhbWljXCIsXCJpc2xhbWljY1wiLFwiamFwYW5lc2VcIixcInBlcnNpYW5cIixcInJvY1wiXSxob3VyTm8wOnRydWUsaG91cjEyOnRydWUsZm9ybWF0czp7c2hvcnQ6XCJ7MX0sIHswfVwiLG1lZGl1bTpcInsxfSwgezB9XCIsZnVsbDpcInsxfSAnYXQnIHswfVwiLGxvbmc6XCJ7MX0gJ2F0JyB7MH1cIixhdmFpbGFibGVGb3JtYXRzOntcImRcIjpcImRcIixcIkVcIjpcImNjY1wiLEVkOlwiZCBFXCIsRWhtOlwiRSBoOm1tIGFcIixFSG06XCJFIEhIOm1tXCIsRWhtczpcIkUgaDptbTpzcyBhXCIsRUhtczpcIkUgSEg6bW06c3NcIixHeTpcInkgR1wiLEd5TU1NOlwiTU1NIHkgR1wiLEd5TU1NZDpcIk1NTSBkLCB5IEdcIixHeU1NTUVkOlwiRSwgTU1NIGQsIHkgR1wiLFwiaFwiOlwiaCBhXCIsXCJIXCI6XCJISFwiLGhtOlwiaDptbSBhXCIsSG06XCJISDptbVwiLGhtczpcImg6bW06c3MgYVwiLEhtczpcIkhIOm1tOnNzXCIsaG1zdjpcImg6bW06c3MgYSB2XCIsSG1zdjpcIkhIOm1tOnNzIHZcIixobXY6XCJoOm1tIGEgdlwiLEhtdjpcIkhIOm1tIHZcIixcIk1cIjpcIkxcIixNZDpcIk0vZFwiLE1FZDpcIkUsIE0vZFwiLE1NTTpcIkxMTFwiLE1NTWQ6XCJNTU0gZFwiLE1NTUVkOlwiRSwgTU1NIGRcIixNTU1NZDpcIk1NTU0gZFwiLG1zOlwibW06c3NcIixcInlcIjpcInlcIix5TTpcIk0veVwiLHlNZDpcIk0vZC95XCIseU1FZDpcIkUsIE0vZC95XCIseU1NTTpcIk1NTSB5XCIseU1NTWQ6XCJNTU0gZCwgeVwiLHlNTU1FZDpcIkUsIE1NTSBkLCB5XCIseU1NTU06XCJNTU1NIHlcIix5UVFROlwiUVFRIHlcIix5UVFRUTpcIlFRUVEgeVwifSxkYXRlRm9ybWF0czp7eU1NTU1FRUVFZDpcIkVFRUUsIE1NTU0gZCwgeVwiLHlNTU1NZDpcIk1NTU0gZCwgeVwiLHlNTU1kOlwiTU1NIGQsIHlcIix5TWQ6XCJNL2QveXlcIn0sdGltZUZvcm1hdHM6e2htbXNzenp6ejpcImg6bW06c3MgYSB6enp6XCIsaG1zejpcImg6bW06c3MgYSB6XCIsaG1zOlwiaDptbTpzcyBhXCIsaG06XCJoOm1tIGFcIn19LGNhbGVuZGFyczp7YnVkZGhpc3Q6e21vbnRoczp7bmFycm93OltcIkpcIixcIkZcIixcIk1cIixcIkFcIixcIk1cIixcIkpcIixcIkpcIixcIkFcIixcIlNcIixcIk9cIixcIk5cIixcIkRcIl0sc2hvcnQ6W1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiXSxsb25nOltcIkphbnVhcnlcIixcIkZlYnJ1YXJ5XCIsXCJNYXJjaFwiLFwiQXByaWxcIixcIk1heVwiLFwiSnVuZVwiLFwiSnVseVwiLFwiQXVndXN0XCIsXCJTZXB0ZW1iZXJcIixcIk9jdG9iZXJcIixcIk5vdmVtYmVyXCIsXCJEZWNlbWJlclwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGVyYXM6e25hcnJvdzpbXCJCRVwiXSxzaG9ydDpbXCJCRVwiXSxsb25nOltcIkJFXCJdfSxkYXlQZXJpb2RzOnthbTpcIkFNXCIscG06XCJQTVwifX0sY2hpbmVzZTp7bW9udGhzOntuYXJyb3c6W1wiMVwiLFwiMlwiLFwiM1wiLFwiNFwiLFwiNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiMTBcIixcIjExXCIsXCIxMlwiXSxzaG9ydDpbXCJNbzFcIixcIk1vMlwiLFwiTW8zXCIsXCJNbzRcIixcIk1vNVwiLFwiTW82XCIsXCJNbzdcIixcIk1vOFwiLFwiTW85XCIsXCJNbzEwXCIsXCJNbzExXCIsXCJNbzEyXCJdLGxvbmc6W1wiTW9udGgxXCIsXCJNb250aDJcIixcIk1vbnRoM1wiLFwiTW9udGg0XCIsXCJNb250aDVcIixcIk1vbnRoNlwiLFwiTW9udGg3XCIsXCJNb250aDhcIixcIk1vbnRoOVwiLFwiTW9udGgxMFwiLFwiTW9udGgxMVwiLFwiTW9udGgxMlwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGRheVBlcmlvZHM6e2FtOlwiQU1cIixwbTpcIlBNXCJ9fSxjb3B0aWM6e21vbnRoczp7bmFycm93OltcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIixcIjEzXCJdLHNob3J0OltcIlRvdXRcIixcIkJhYmFcIixcIkhhdG9yXCIsXCJLaWFoa1wiLFwiVG9iYVwiLFwiQW1zaGlyXCIsXCJCYXJhbWhhdFwiLFwiQmFyYW1vdWRhXCIsXCJCYXNoYW5zXCIsXCJQYW9uYVwiLFwiRXBlcFwiLFwiTWVzcmFcIixcIk5hc2llXCJdLGxvbmc6W1wiVG91dFwiLFwiQmFiYVwiLFwiSGF0b3JcIixcIktpYWhrXCIsXCJUb2JhXCIsXCJBbXNoaXJcIixcIkJhcmFtaGF0XCIsXCJCYXJhbW91ZGFcIixcIkJhc2hhbnNcIixcIlBhb25hXCIsXCJFcGVwXCIsXCJNZXNyYVwiLFwiTmFzaWVcIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxlcmFzOntuYXJyb3c6W1wiRVJBMFwiLFwiRVJBMVwiXSxzaG9ydDpbXCJFUkEwXCIsXCJFUkExXCJdLGxvbmc6W1wiRVJBMFwiLFwiRVJBMVwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LGRhbmdpOnttb250aHM6e25hcnJvdzpbXCIxXCIsXCIyXCIsXCIzXCIsXCI0XCIsXCI1XCIsXCI2XCIsXCI3XCIsXCI4XCIsXCI5XCIsXCIxMFwiLFwiMTFcIixcIjEyXCJdLHNob3J0OltcIk1vMVwiLFwiTW8yXCIsXCJNbzNcIixcIk1vNFwiLFwiTW81XCIsXCJNbzZcIixcIk1vN1wiLFwiTW84XCIsXCJNbzlcIixcIk1vMTBcIixcIk1vMTFcIixcIk1vMTJcIl0sbG9uZzpbXCJNb250aDFcIixcIk1vbnRoMlwiLFwiTW9udGgzXCIsXCJNb250aDRcIixcIk1vbnRoNVwiLFwiTW9udGg2XCIsXCJNb250aDdcIixcIk1vbnRoOFwiLFwiTW9udGg5XCIsXCJNb250aDEwXCIsXCJNb250aDExXCIsXCJNb250aDEyXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LGV0aGlvcGljOnttb250aHM6e25hcnJvdzpbXCIxXCIsXCIyXCIsXCIzXCIsXCI0XCIsXCI1XCIsXCI2XCIsXCI3XCIsXCI4XCIsXCI5XCIsXCIxMFwiLFwiMTFcIixcIjEyXCIsXCIxM1wiXSxzaG9ydDpbXCJNZXNrZXJlbVwiLFwiVGVrZW10XCIsXCJIZWRhclwiLFwiVGFoc2FzXCIsXCJUZXJcIixcIllla2F0aXRcIixcIk1lZ2FiaXRcIixcIk1pYXppYVwiLFwiR2VuYm90XCIsXCJTZW5lXCIsXCJIYW1sZVwiLFwiTmVoYXNzZVwiLFwiUGFndW1lblwiXSxsb25nOltcIk1lc2tlcmVtXCIsXCJUZWtlbXRcIixcIkhlZGFyXCIsXCJUYWhzYXNcIixcIlRlclwiLFwiWWVrYXRpdFwiLFwiTWVnYWJpdFwiLFwiTWlhemlhXCIsXCJHZW5ib3RcIixcIlNlbmVcIixcIkhhbWxlXCIsXCJOZWhhc3NlXCIsXCJQYWd1bWVuXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZXJhczp7bmFycm93OltcIkVSQTBcIixcIkVSQTFcIl0sc2hvcnQ6W1wiRVJBMFwiLFwiRVJBMVwiXSxsb25nOltcIkVSQTBcIixcIkVSQTFcIl19LGRheVBlcmlvZHM6e2FtOlwiQU1cIixwbTpcIlBNXCJ9fSxldGhpb2FhOnttb250aHM6e25hcnJvdzpbXCIxXCIsXCIyXCIsXCIzXCIsXCI0XCIsXCI1XCIsXCI2XCIsXCI3XCIsXCI4XCIsXCI5XCIsXCIxMFwiLFwiMTFcIixcIjEyXCIsXCIxM1wiXSxzaG9ydDpbXCJNZXNrZXJlbVwiLFwiVGVrZW10XCIsXCJIZWRhclwiLFwiVGFoc2FzXCIsXCJUZXJcIixcIllla2F0aXRcIixcIk1lZ2FiaXRcIixcIk1pYXppYVwiLFwiR2VuYm90XCIsXCJTZW5lXCIsXCJIYW1sZVwiLFwiTmVoYXNzZVwiLFwiUGFndW1lblwiXSxsb25nOltcIk1lc2tlcmVtXCIsXCJUZWtlbXRcIixcIkhlZGFyXCIsXCJUYWhzYXNcIixcIlRlclwiLFwiWWVrYXRpdFwiLFwiTWVnYWJpdFwiLFwiTWlhemlhXCIsXCJHZW5ib3RcIixcIlNlbmVcIixcIkhhbWxlXCIsXCJOZWhhc3NlXCIsXCJQYWd1bWVuXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZXJhczp7bmFycm93OltcIkVSQTBcIl0sc2hvcnQ6W1wiRVJBMFwiXSxsb25nOltcIkVSQTBcIl19LGRheVBlcmlvZHM6e2FtOlwiQU1cIixwbTpcIlBNXCJ9fSxnZW5lcmljOnttb250aHM6e25hcnJvdzpbXCIxXCIsXCIyXCIsXCIzXCIsXCI0XCIsXCI1XCIsXCI2XCIsXCI3XCIsXCI4XCIsXCI5XCIsXCIxMFwiLFwiMTFcIixcIjEyXCJdLHNob3J0OltcIk0wMVwiLFwiTTAyXCIsXCJNMDNcIixcIk0wNFwiLFwiTTA1XCIsXCJNMDZcIixcIk0wN1wiLFwiTTA4XCIsXCJNMDlcIixcIk0xMFwiLFwiTTExXCIsXCJNMTJcIl0sbG9uZzpbXCJNMDFcIixcIk0wMlwiLFwiTTAzXCIsXCJNMDRcIixcIk0wNVwiLFwiTTA2XCIsXCJNMDdcIixcIk0wOFwiLFwiTTA5XCIsXCJNMTBcIixcIk0xMVwiLFwiTTEyXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZXJhczp7bmFycm93OltcIkVSQTBcIixcIkVSQTFcIl0sc2hvcnQ6W1wiRVJBMFwiLFwiRVJBMVwiXSxsb25nOltcIkVSQTBcIixcIkVSQTFcIl19LGRheVBlcmlvZHM6e2FtOlwiQU1cIixwbTpcIlBNXCJ9fSxncmVnb3J5Onttb250aHM6e25hcnJvdzpbXCJKXCIsXCJGXCIsXCJNXCIsXCJBXCIsXCJNXCIsXCJKXCIsXCJKXCIsXCJBXCIsXCJTXCIsXCJPXCIsXCJOXCIsXCJEXCJdLHNob3J0OltcIkphblwiLFwiRmViXCIsXCJNYXJcIixcIkFwclwiLFwiTWF5XCIsXCJKdW5cIixcIkp1bFwiLFwiQXVnXCIsXCJTZXBcIixcIk9jdFwiLFwiTm92XCIsXCJEZWNcIl0sbG9uZzpbXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxlcmFzOntuYXJyb3c6W1wiQlwiLFwiQVwiLFwiQkNFXCIsXCJDRVwiXSxzaG9ydDpbXCJCQ1wiLFwiQURcIixcIkJDRVwiLFwiQ0VcIl0sbG9uZzpbXCJCZWZvcmUgQ2hyaXN0XCIsXCJBbm5vIERvbWluaVwiLFwiQmVmb3JlIENvbW1vbiBFcmFcIixcIkNvbW1vbiBFcmFcIl19LGRheVBlcmlvZHM6e2FtOlwiQU1cIixwbTpcIlBNXCJ9fSxoZWJyZXc6e21vbnRoczp7bmFycm93OltcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIixcIjEzXCIsXCI3XCJdLHNob3J0OltcIlRpc2hyaVwiLFwiSGVzaHZhblwiLFwiS2lzbGV2XCIsXCJUZXZldFwiLFwiU2hldmF0XCIsXCJBZGFyIElcIixcIkFkYXJcIixcIk5pc2FuXCIsXCJJeWFyXCIsXCJTaXZhblwiLFwiVGFtdXpcIixcIkF2XCIsXCJFbHVsXCIsXCJBZGFyIElJXCJdLGxvbmc6W1wiVGlzaHJpXCIsXCJIZXNodmFuXCIsXCJLaXNsZXZcIixcIlRldmV0XCIsXCJTaGV2YXRcIixcIkFkYXIgSVwiLFwiQWRhclwiLFwiTmlzYW5cIixcIkl5YXJcIixcIlNpdmFuXCIsXCJUYW11elwiLFwiQXZcIixcIkVsdWxcIixcIkFkYXIgSUlcIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxlcmFzOntuYXJyb3c6W1wiQU1cIl0sc2hvcnQ6W1wiQU1cIl0sbG9uZzpbXCJBTVwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LGluZGlhbjp7bW9udGhzOntuYXJyb3c6W1wiMVwiLFwiMlwiLFwiM1wiLFwiNFwiLFwiNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiMTBcIixcIjExXCIsXCIxMlwiXSxzaG9ydDpbXCJDaGFpdHJhXCIsXCJWYWlzYWtoYVwiLFwiSnlhaXN0aGFcIixcIkFzYWRoYVwiLFwiU3JhdmFuYVwiLFwiQmhhZHJhXCIsXCJBc3ZpbmFcIixcIkthcnRpa2FcIixcIkFncmFoYXlhbmFcIixcIlBhdXNhXCIsXCJNYWdoYVwiLFwiUGhhbGd1bmFcIl0sbG9uZzpbXCJDaGFpdHJhXCIsXCJWYWlzYWtoYVwiLFwiSnlhaXN0aGFcIixcIkFzYWRoYVwiLFwiU3JhdmFuYVwiLFwiQmhhZHJhXCIsXCJBc3ZpbmFcIixcIkthcnRpa2FcIixcIkFncmFoYXlhbmFcIixcIlBhdXNhXCIsXCJNYWdoYVwiLFwiUGhhbGd1bmFcIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxlcmFzOntuYXJyb3c6W1wiU2FrYVwiXSxzaG9ydDpbXCJTYWthXCJdLGxvbmc6W1wiU2FrYVwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LGlzbGFtaWM6e21vbnRoczp7bmFycm93OltcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIl0sc2hvcnQ6W1wiTXVoLlwiLFwiU2FmLlwiLFwiUmFiLiBJXCIsXCJSYWIuIElJXCIsXCJKdW0uIElcIixcIkp1bS4gSUlcIixcIlJhai5cIixcIlNoYS5cIixcIlJhbS5cIixcIlNoYXcuXCIsXCJEaHXKu2wtUS5cIixcIkRodcq7bC1ILlwiXSxsb25nOltcIk11aGFycmFtXCIsXCJTYWZhclwiLFwiUmFiacq7IElcIixcIlJhYmnKuyBJSVwiLFwiSnVtYWRhIElcIixcIkp1bWFkYSBJSVwiLFwiUmFqYWJcIixcIlNoYcq7YmFuXCIsXCJSYW1hZGFuXCIsXCJTaGF3d2FsXCIsXCJEaHXKu2wtUWnKu2RhaFwiLFwiRGh1yrtsLUhpamphaFwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGVyYXM6e25hcnJvdzpbXCJBSFwiXSxzaG9ydDpbXCJBSFwiXSxsb25nOltcIkFIXCJdfSxkYXlQZXJpb2RzOnthbTpcIkFNXCIscG06XCJQTVwifX0saXNsYW1pY2M6e21vbnRoczp7bmFycm93OltcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIl0sc2hvcnQ6W1wiTXVoLlwiLFwiU2FmLlwiLFwiUmFiLiBJXCIsXCJSYWIuIElJXCIsXCJKdW0uIElcIixcIkp1bS4gSUlcIixcIlJhai5cIixcIlNoYS5cIixcIlJhbS5cIixcIlNoYXcuXCIsXCJEaHXKu2wtUS5cIixcIkRodcq7bC1ILlwiXSxsb25nOltcIk11aGFycmFtXCIsXCJTYWZhclwiLFwiUmFiacq7IElcIixcIlJhYmnKuyBJSVwiLFwiSnVtYWRhIElcIixcIkp1bWFkYSBJSVwiLFwiUmFqYWJcIixcIlNoYcq7YmFuXCIsXCJSYW1hZGFuXCIsXCJTaGF3d2FsXCIsXCJEaHXKu2wtUWnKu2RhaFwiLFwiRGh1yrtsLUhpamphaFwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGVyYXM6e25hcnJvdzpbXCJBSFwiXSxzaG9ydDpbXCJBSFwiXSxsb25nOltcIkFIXCJdfSxkYXlQZXJpb2RzOnthbTpcIkFNXCIscG06XCJQTVwifX0samFwYW5lc2U6e21vbnRoczp7bmFycm93OltcIkpcIixcIkZcIixcIk1cIixcIkFcIixcIk1cIixcIkpcIixcIkpcIixcIkFcIixcIlNcIixcIk9cIixcIk5cIixcIkRcIl0sc2hvcnQ6W1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiXSxsb25nOltcIkphbnVhcnlcIixcIkZlYnJ1YXJ5XCIsXCJNYXJjaFwiLFwiQXByaWxcIixcIk1heVwiLFwiSnVuZVwiLFwiSnVseVwiLFwiQXVndXN0XCIsXCJTZXB0ZW1iZXJcIixcIk9jdG9iZXJcIixcIk5vdmVtYmVyXCIsXCJEZWNlbWJlclwiXX0sZGF5czp7bmFycm93OltcIlNcIixcIk1cIixcIlRcIixcIldcIixcIlRcIixcIkZcIixcIlNcIl0sc2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGxvbmc6W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl19LGVyYXM6e25hcnJvdzpbXCJUYWlrYSAoNjQ14oCTNjUwKVwiLFwiSGFrdWNoaSAoNjUw4oCTNjcxKVwiLFwiSGFrdWjFjSAoNjcy4oCTNjg2KVwiLFwiU2h1Y2jFjSAoNjg24oCTNzAxKVwiLFwiVGFpaMWNICg3MDHigJM3MDQpXCIsXCJLZWl1biAoNzA04oCTNzA4KVwiLFwiV2FkxY0gKDcwOOKAkzcxNSlcIixcIlJlaWtpICg3MTXigJM3MTcpXCIsXCJZxY1yxY0gKDcxN+KAkzcyNClcIixcIkppbmtpICg3MjTigJM3MjkpXCIsXCJUZW5wecWNICg3MjnigJM3NDkpXCIsXCJUZW5wecWNLWthbXDFjSAoNzQ5LTc0OSlcIixcIlRlbnB5xY0tc2jFjWjFjSAoNzQ5LTc1NylcIixcIlRlbnB5xY0taMWNamkgKDc1Ny03NjUpXCIsXCJUZW5wecWNLWppbmdvICg3NjUtNzY3KVwiLFwiSmluZ28ta2VpdW4gKDc2Ny03NzApXCIsXCJIxY1raSAoNzcw4oCTNzgwKVwiLFwiVGVuLcWNICg3ODEtNzgyKVwiLFwiRW5yeWFrdSAoNzgy4oCTODA2KVwiLFwiRGFpZMWNICg4MDbigJM4MTApXCIsXCJLxY1uaW4gKDgxMOKAkzgyNClcIixcIlRlbmNoxY0gKDgyNOKAkzgzNClcIixcIkrFjXdhICg4MzTigJM4NDgpXCIsXCJLYWrFjSAoODQ44oCTODUxKVwiLFwiTmluanUgKDg1MeKAkzg1NClcIixcIlNhaWvFjSAoODU04oCTODU3KVwiLFwiVGVuLWFuICg4NTctODU5KVwiLFwiSsWNZ2FuICg4NTnigJM4NzcpXCIsXCJHYW5necWNICg4NzfigJM4ODUpXCIsXCJOaW5uYSAoODg14oCTODg5KVwiLFwiS2FucHnFjSAoODg54oCTODk4KVwiLFwiU2jFjXRhaSAoODk44oCTOTAxKVwiLFwiRW5naSAoOTAx4oCTOTIzKVwiLFwiRW5jaMWNICg5MjPigJM5MzEpXCIsXCJKxY1oZWkgKDkzMeKAkzkzOClcIixcIlRlbmd5xY0gKDkzOOKAkzk0NylcIixcIlRlbnJ5YWt1ICg5NDfigJM5NTcpXCIsXCJUZW50b2t1ICg5NTfigJM5NjEpXCIsXCLFjHdhICg5NjHigJM5NjQpXCIsXCJLxY1oxY0gKDk2NOKAkzk2OClcIixcIkFubmEgKDk2OOKAkzk3MClcIixcIlRlbnJva3UgKDk3MOKAkzk3MylcIixcIlRlbuKAmWVuICg5NzPigJM5NzYpXCIsXCJKxY1nZW4gKDk3NuKAkzk3OClcIixcIlRlbmdlbiAoOTc44oCTOTgzKVwiLFwiRWlrYW4gKDk4M+KAkzk4NSlcIixcIkthbm5hICg5ODXigJM5ODcpXCIsXCJFaWVuICg5ODfigJM5ODkpXCIsXCJFaXNvICg5ODnigJM5OTApXCIsXCJTaMWNcnlha3UgKDk5MOKAkzk5NSlcIixcIkNoxY10b2t1ICg5OTXigJM5OTkpXCIsXCJDaMWNaMWNICg5OTnigJMxMDA0KVwiLFwiS2Fua8WNICgxMDA04oCTMTAxMilcIixcIkNoxY13YSAoMTAxMuKAkzEwMTcpXCIsXCJLYW5uaW4gKDEwMTfigJMxMDIxKVwiLFwiSmlhbiAoMTAyMeKAkzEwMjQpXCIsXCJNYW5qdSAoMTAyNOKAkzEwMjgpXCIsXCJDaMWNZ2VuICgxMDI44oCTMTAzNylcIixcIkNoxY1yeWFrdSAoMTAzN+KAkzEwNDApXCIsXCJDaMWNa3nFqyAoMTA0MOKAkzEwNDQpXCIsXCJLYW50b2t1ICgxMDQ04oCTMTA0NilcIixcIkVpc2jFjSAoMTA0NuKAkzEwNTMpXCIsXCJUZW5naSAoMTA1M+KAkzEwNTgpXCIsXCJLxY1oZWkgKDEwNTjigJMxMDY1KVwiLFwiSmlyeWFrdSAoMTA2NeKAkzEwNjkpXCIsXCJFbmt5xasgKDEwNjnigJMxMDc0KVwiLFwiU2jFjWhvICgxMDc04oCTMTA3NylcIixcIlNoxY1yeWFrdSAoMTA3N+KAkzEwODEpXCIsXCJFaWjFjSAoMTA4MeKAkzEwODQpXCIsXCLFjHRva3UgKDEwODTigJMxMDg3KVwiLFwiS2FuamkgKDEwODfigJMxMDk0KVwiLFwiS2FoxY0gKDEwOTTigJMxMDk2KVwiLFwiRWljaMWNICgxMDk24oCTMTA5NylcIixcIkrFjXRva3UgKDEwOTfigJMxMDk5KVwiLFwiS8WNd2EgKDEwOTnigJMxMTA0KVwiLFwiQ2jFjWppICgxMTA04oCTMTEwNilcIixcIkthc2jFjSAoMTEwNuKAkzExMDgpXCIsXCJUZW5uaW4gKDExMDjigJMxMTEwKVwiLFwiVGVuLWVpICgxMTEwLTExMTMpXCIsXCJFaWt5xasgKDExMTPigJMxMTE4KVwiLFwiR2Vu4oCZZWkgKDExMTjigJMxMTIwKVwiLFwiSMWNYW4gKDExMjDigJMxMTI0KVwiLFwiVGVuamkgKDExMjTigJMxMTI2KVwiLFwiRGFpamkgKDExMjbigJMxMTMxKVwiLFwiVGVuc2jFjSAoMTEzMeKAkzExMzIpXCIsXCJDaMWNc2jFjSAoMTEzMuKAkzExMzUpXCIsXCJIxY1lbiAoMTEzNeKAkzExNDEpXCIsXCJFaWppICgxMTQx4oCTMTE0MilcIixcIkvFjWppICgxMTQy4oCTMTE0NClcIixcIlRlbuKAmXnFjSAoMTE0NOKAkzExNDUpXCIsXCJLecWrYW4gKDExNDXigJMxMTUxKVwiLFwiTmlucGVpICgxMTUx4oCTMTE1NClcIixcIkt5xatqdSAoMTE1NOKAkzExNTYpXCIsXCJIxY1nZW4gKDExNTbigJMxMTU5KVwiLFwiSGVpamkgKDExNTnigJMxMTYwKVwiLFwiRWlyeWFrdSAoMTE2MOKAkzExNjEpXCIsXCLFjGhvICgxMTYx4oCTMTE2MylcIixcIkNoxY1rYW4gKDExNjPigJMxMTY1KVwiLFwiRWltYW4gKDExNjXigJMxMTY2KVwiLFwiTmlu4oCZYW4gKDExNjbigJMxMTY5KVwiLFwiS2HFjSAoMTE2OeKAkzExNzEpXCIsXCJTaMWNYW4gKDExNzHigJMxMTc1KVwiLFwiQW5nZW4gKDExNzXigJMxMTc3KVwiLFwiSmlzaMWNICgxMTc34oCTMTE4MSlcIixcIlnFjXdhICgxMTgx4oCTMTE4MilcIixcIkp1ZWkgKDExODLigJMxMTg0KVwiLFwiR2Vucnlha3UgKDExODTigJMxMTg1KVwiLFwiQnVuamkgKDExODXigJMxMTkwKVwiLFwiS2Vua3nFqyAoMTE5MOKAkzExOTkpXCIsXCJTaMWNamkgKDExOTnigJMxMjAxKVwiLFwiS2VubmluICgxMjAx4oCTMTIwNClcIixcIkdlbmt5xasgKDEyMDTigJMxMjA2KVwiLFwiS2Vu4oCZZWkgKDEyMDbigJMxMjA3KVwiLFwiSsWNZ2VuICgxMjA34oCTMTIxMSlcIixcIktlbnJ5YWt1ICgxMjEx4oCTMTIxMylcIixcIktlbnDFjSAoMTIxM+KAkzEyMTkpXCIsXCJKxY1recWrICgxMjE54oCTMTIyMilcIixcIkrFjcWNICgxMjIy4oCTMTIyNClcIixcIkdlbm5pbiAoMTIyNOKAkzEyMjUpXCIsXCJLYXJva3UgKDEyMjXigJMxMjI3KVwiLFwiQW50ZWkgKDEyMjfigJMxMjI5KVwiLFwiS2Fua2kgKDEyMjnigJMxMjMyKVwiLFwiSsWNZWkgKDEyMzLigJMxMjMzKVwiLFwiVGVucHVrdSAoMTIzM+KAkzEyMzQpXCIsXCJCdW5yeWFrdSAoMTIzNOKAkzEyMzUpXCIsXCJLYXRlaSAoMTIzNeKAkzEyMzgpXCIsXCJSeWFrdW5pbiAoMTIzOOKAkzEyMzkpXCIsXCJFbuKAmcWNICgxMjM54oCTMTI0MClcIixcIk5pbmppICgxMjQw4oCTMTI0MylcIixcIkthbmdlbiAoMTI0M+KAkzEyNDcpXCIsXCJIxY1qaSAoMTI0N+KAkzEyNDkpXCIsXCJLZW5jaMWNICgxMjQ54oCTMTI1NilcIixcIkvFjWdlbiAoMTI1NuKAkzEyNTcpXCIsXCJTaMWNa2EgKDEyNTfigJMxMjU5KVwiLFwiU2jFjWdlbiAoMTI1OeKAkzEyNjApXCIsXCJCdW7igJnFjSAoMTI2MOKAkzEyNjEpXCIsXCJLxY1jaMWNICgxMjYx4oCTMTI2NClcIixcIkJ1buKAmWVpICgxMjY04oCTMTI3NSlcIixcIktlbmppICgxMjc14oCTMTI3OClcIixcIkvFjWFuICgxMjc44oCTMTI4OClcIixcIlNoxY3FjSAoMTI4OOKAkzEyOTMpXCIsXCJFaW5pbiAoMTI5M+KAkzEyOTkpXCIsXCJTaMWNYW4gKDEyOTnigJMxMzAyKVwiLFwiS2VuZ2VuICgxMzAy4oCTMTMwMylcIixcIkthZ2VuICgxMzAz4oCTMTMwNilcIixcIlRva3VqaSAoMTMwNuKAkzEzMDgpXCIsXCJFbmt5xY0gKDEzMDjigJMxMzExKVwiLFwixYxjaMWNICgxMzEx4oCTMTMxMilcIixcIlNoxY13YSAoMTMxMuKAkzEzMTcpXCIsXCJCdW5wxY0gKDEzMTfigJMxMzE5KVwiLFwiR2VuxY0gKDEzMTnigJMxMzIxKVwiLFwiR2Vua8WNICgxMzIx4oCTMTMyNClcIixcIlNoxY1jaMWrICgxMzI04oCTMTMyNilcIixcIkthcnlha3UgKDEzMjbigJMxMzI5KVwiLFwiR2VudG9rdSAoMTMyOeKAkzEzMzEpXCIsXCJHZW5rxY0gKDEzMzHigJMxMzM0KVwiLFwiS2VubXUgKDEzMzTigJMxMzM2KVwiLFwiRW5nZW4gKDEzMzbigJMxMzQwKVwiLFwiS8WNa29rdSAoMTM0MOKAkzEzNDYpXCIsXCJTaMWNaGVpICgxMzQ24oCTMTM3MClcIixcIktlbnRva3UgKDEzNzDigJMxMzcyKVwiLFwiQnVuY2jFqyAoMTM3MuKAkzEzNzUpXCIsXCJUZW5qdSAoMTM3NeKAkzEzNzkpXCIsXCJLxY1yeWFrdSAoMTM3OeKAkzEzODEpXCIsXCJLxY13YSAoMTM4MeKAkzEzODQpXCIsXCJHZW5jaMWrICgxMzg04oCTMTM5MilcIixcIk1laXRva3UgKDEzODTigJMxMzg3KVwiLFwiS2FrZWkgKDEzODfigJMxMzg5KVwiLFwiS8WNxY0gKDEzODnigJMxMzkwKVwiLFwiTWVpdG9rdSAoMTM5MOKAkzEzOTQpXCIsXCLFjGVpICgxMzk04oCTMTQyOClcIixcIlNoxY1jaMWNICgxNDI44oCTMTQyOSlcIixcIkVpa3nFjSAoMTQyOeKAkzE0NDEpXCIsXCJLYWtpdHN1ICgxNDQx4oCTMTQ0NClcIixcIkJ1buKAmWFuICgxNDQ04oCTMTQ0OSlcIixcIkjFjXRva3UgKDE0NDnigJMxNDUyKVwiLFwiS3nFjXRva3UgKDE0NTLigJMxNDU1KVwiLFwiS8WNc2jFjSAoMTQ1NeKAkzE0NTcpXCIsXCJDaMWNcm9rdSAoMTQ1N+KAkzE0NjApXCIsXCJLYW5zaMWNICgxNDYw4oCTMTQ2NilcIixcIkJ1bnNoxY0gKDE0NjbigJMxNDY3KVwiLFwixYxuaW4gKDE0NjfigJMxNDY5KVwiLFwiQnVubWVpICgxNDY54oCTMTQ4NylcIixcIkNoxY1recWNICgxNDg34oCTMTQ4OSlcIixcIkVudG9rdSAoMTQ4OeKAkzE0OTIpXCIsXCJNZWnFjSAoMTQ5MuKAkzE1MDEpXCIsXCJCdW5raSAoMTUwMeKAkzE1MDQpXCIsXCJFaXNoxY0gKDE1MDTigJMxNTIxKVwiLFwiVGFpZWkgKDE1MjHigJMxNTI4KVwiLFwiS3nFjXJva3UgKDE1MjjigJMxNTMyKVwiLFwiVGVuYnVuICgxNTMy4oCTMTU1NSlcIixcIkvFjWppICgxNTU14oCTMTU1OClcIixcIkVpcm9rdSAoMTU1OOKAkzE1NzApXCIsXCJHZW5raSAoMTU3MOKAkzE1NzMpXCIsXCJUZW5zaMWNICgxNTcz4oCTMTU5MilcIixcIkJ1bnJva3UgKDE1OTLigJMxNTk2KVwiLFwiS2VpY2jFjSAoMTU5NuKAkzE2MTUpXCIsXCJHZW5uYSAoMTYxNeKAkzE2MjQpXCIsXCJLYW7igJllaSAoMTYyNOKAkzE2NDQpXCIsXCJTaMWNaG8gKDE2NDTigJMxNjQ4KVwiLFwiS2VpYW4gKDE2NDjigJMxNjUyKVwiLFwiSsWNxY0gKDE2NTLigJMxNjU1KVwiLFwiTWVpcmVraSAoMTY1NeKAkzE2NTgpXCIsXCJNYW5qaSAoMTY1OOKAkzE2NjEpXCIsXCJLYW5idW4gKDE2NjHigJMxNjczKVwiLFwiRW5wxY0gKDE2NzPigJMxNjgxKVwiLFwiVGVubmEgKDE2ODHigJMxNjg0KVwiLFwiSsWNa3nFjSAoMTY4NOKAkzE2ODgpXCIsXCJHZW5yb2t1ICgxNjg44oCTMTcwNClcIixcIkjFjWVpICgxNzA04oCTMTcxMSlcIixcIlNoxY10b2t1ICgxNzEx4oCTMTcxNilcIixcIkt5xY1oxY0gKDE3MTbigJMxNzM2KVwiLFwiR2VuYnVuICgxNzM24oCTMTc0MSlcIixcIkthbnDFjSAoMTc0MeKAkzE3NDQpXCIsXCJFbmt5xY0gKDE3NDTigJMxNzQ4KVwiLFwiS2Fu4oCZZW4gKDE3NDjigJMxNzUxKVwiLFwiSMWNcmVraSAoMTc1MeKAkzE3NjQpXCIsXCJNZWl3YSAoMTc2NOKAkzE3NzIpXCIsXCJBbuKAmWVpICgxNzcy4oCTMTc4MSlcIixcIlRlbm1laSAoMTc4MeKAkzE3ODkpXCIsXCJLYW5zZWkgKDE3ODnigJMxODAxKVwiLFwiS3nFjXdhICgxODAx4oCTMTgwNClcIixcIkJ1bmthICgxODA04oCTMTgxOClcIixcIkJ1bnNlaSAoMTgxOOKAkzE4MzApXCIsXCJUZW5wxY0gKDE4MzDigJMxODQ0KVwiLFwiS8WNa2EgKDE4NDTigJMxODQ4KVwiLFwiS2FlaSAoMTg0OOKAkzE4NTQpXCIsXCJBbnNlaSAoMTg1NOKAkzE4NjApXCIsXCJNYW7igJllbiAoMTg2MOKAkzE4NjEpXCIsXCJCdW5recWrICgxODYx4oCTMTg2NClcIixcIkdlbmppICgxODY04oCTMTg2NSlcIixcIktlacWNICgxODY14oCTMTg2OClcIixcIk1cIixcIlRcIixcIlNcIixcIkhcIl0sc2hvcnQ6W1wiVGFpa2EgKDY0NeKAkzY1MClcIixcIkhha3VjaGkgKDY1MOKAkzY3MSlcIixcIkhha3VoxY0gKDY3MuKAkzY4NilcIixcIlNodWNoxY0gKDY4NuKAkzcwMSlcIixcIlRhaWjFjSAoNzAx4oCTNzA0KVwiLFwiS2VpdW4gKDcwNOKAkzcwOClcIixcIldhZMWNICg3MDjigJM3MTUpXCIsXCJSZWlraSAoNzE14oCTNzE3KVwiLFwiWcWNcsWNICg3MTfigJM3MjQpXCIsXCJKaW5raSAoNzI04oCTNzI5KVwiLFwiVGVucHnFjSAoNzI54oCTNzQ5KVwiLFwiVGVucHnFjS1rYW1wxY0gKDc0OS03NDkpXCIsXCJUZW5wecWNLXNoxY1oxY0gKDc0OS03NTcpXCIsXCJUZW5wecWNLWjFjWppICg3NTctNzY1KVwiLFwiVGVucHnFjS1qaW5nbyAoNzY1LTc2NylcIixcIkppbmdvLWtlaXVuICg3NjctNzcwKVwiLFwiSMWNa2kgKDc3MOKAkzc4MClcIixcIlRlbi3FjSAoNzgxLTc4MilcIixcIkVucnlha3UgKDc4MuKAkzgwNilcIixcIkRhaWTFjSAoODA24oCTODEwKVwiLFwiS8WNbmluICg4MTDigJM4MjQpXCIsXCJUZW5jaMWNICg4MjTigJM4MzQpXCIsXCJKxY13YSAoODM04oCTODQ4KVwiLFwiS2FqxY0gKDg0OOKAkzg1MSlcIixcIk5pbmp1ICg4NTHigJM4NTQpXCIsXCJTYWlrxY0gKDg1NOKAkzg1NylcIixcIlRlbi1hbiAoODU3LTg1OSlcIixcIkrFjWdhbiAoODU54oCTODc3KVwiLFwiR2FuZ3nFjSAoODc34oCTODg1KVwiLFwiTmlubmEgKDg4NeKAkzg4OSlcIixcIkthbnB5xY0gKDg4OeKAkzg5OClcIixcIlNoxY10YWkgKDg5OOKAkzkwMSlcIixcIkVuZ2kgKDkwMeKAkzkyMylcIixcIkVuY2jFjSAoOTIz4oCTOTMxKVwiLFwiSsWNaGVpICg5MzHigJM5MzgpXCIsXCJUZW5necWNICg5MzjigJM5NDcpXCIsXCJUZW5yeWFrdSAoOTQ34oCTOTU3KVwiLFwiVGVudG9rdSAoOTU34oCTOTYxKVwiLFwixYx3YSAoOTYx4oCTOTY0KVwiLFwiS8WNaMWNICg5NjTigJM5NjgpXCIsXCJBbm5hICg5NjjigJM5NzApXCIsXCJUZW5yb2t1ICg5NzDigJM5NzMpXCIsXCJUZW7igJllbiAoOTcz4oCTOTc2KVwiLFwiSsWNZ2VuICg5NzbigJM5NzgpXCIsXCJUZW5nZW4gKDk3OOKAkzk4MylcIixcIkVpa2FuICg5ODPigJM5ODUpXCIsXCJLYW5uYSAoOTg14oCTOTg3KVwiLFwiRWllbiAoOTg34oCTOTg5KVwiLFwiRWlzbyAoOTg54oCTOTkwKVwiLFwiU2jFjXJ5YWt1ICg5OTDigJM5OTUpXCIsXCJDaMWNdG9rdSAoOTk14oCTOTk5KVwiLFwiQ2jFjWjFjSAoOTk54oCTMTAwNClcIixcIkthbmvFjSAoMTAwNOKAkzEwMTIpXCIsXCJDaMWNd2EgKDEwMTLigJMxMDE3KVwiLFwiS2FubmluICgxMDE34oCTMTAyMSlcIixcIkppYW4gKDEwMjHigJMxMDI0KVwiLFwiTWFuanUgKDEwMjTigJMxMDI4KVwiLFwiQ2jFjWdlbiAoMTAyOOKAkzEwMzcpXCIsXCJDaMWNcnlha3UgKDEwMzfigJMxMDQwKVwiLFwiQ2jFjWt5xasgKDEwNDDigJMxMDQ0KVwiLFwiS2FudG9rdSAoMTA0NOKAkzEwNDYpXCIsXCJFaXNoxY0gKDEwNDbigJMxMDUzKVwiLFwiVGVuZ2kgKDEwNTPigJMxMDU4KVwiLFwiS8WNaGVpICgxMDU44oCTMTA2NSlcIixcIkppcnlha3UgKDEwNjXigJMxMDY5KVwiLFwiRW5recWrICgxMDY54oCTMTA3NClcIixcIlNoxY1obyAoMTA3NOKAkzEwNzcpXCIsXCJTaMWNcnlha3UgKDEwNzfigJMxMDgxKVwiLFwiRWloxY0gKDEwODHigJMxMDg0KVwiLFwixYx0b2t1ICgxMDg04oCTMTA4NylcIixcIkthbmppICgxMDg34oCTMTA5NClcIixcIkthaMWNICgxMDk04oCTMTA5NilcIixcIkVpY2jFjSAoMTA5NuKAkzEwOTcpXCIsXCJKxY10b2t1ICgxMDk34oCTMTA5OSlcIixcIkvFjXdhICgxMDk54oCTMTEwNClcIixcIkNoxY1qaSAoMTEwNOKAkzExMDYpXCIsXCJLYXNoxY0gKDExMDbigJMxMTA4KVwiLFwiVGVubmluICgxMTA44oCTMTExMClcIixcIlRlbi1laSAoMTExMC0xMTEzKVwiLFwiRWlrecWrICgxMTEz4oCTMTExOClcIixcIkdlbuKAmWVpICgxMTE44oCTMTEyMClcIixcIkjFjWFuICgxMTIw4oCTMTEyNClcIixcIlRlbmppICgxMTI04oCTMTEyNilcIixcIkRhaWppICgxMTI24oCTMTEzMSlcIixcIlRlbnNoxY0gKDExMzHigJMxMTMyKVwiLFwiQ2jFjXNoxY0gKDExMzLigJMxMTM1KVwiLFwiSMWNZW4gKDExMzXigJMxMTQxKVwiLFwiRWlqaSAoMTE0MeKAkzExNDIpXCIsXCJLxY1qaSAoMTE0MuKAkzExNDQpXCIsXCJUZW7igJl5xY0gKDExNDTigJMxMTQ1KVwiLFwiS3nFq2FuICgxMTQ14oCTMTE1MSlcIixcIk5pbnBlaSAoMTE1MeKAkzExNTQpXCIsXCJLecWranUgKDExNTTigJMxMTU2KVwiLFwiSMWNZ2VuICgxMTU24oCTMTE1OSlcIixcIkhlaWppICgxMTU54oCTMTE2MClcIixcIkVpcnlha3UgKDExNjDigJMxMTYxKVwiLFwixYxobyAoMTE2MeKAkzExNjMpXCIsXCJDaMWNa2FuICgxMTYz4oCTMTE2NSlcIixcIkVpbWFuICgxMTY14oCTMTE2NilcIixcIk5pbuKAmWFuICgxMTY24oCTMTE2OSlcIixcIkthxY0gKDExNjnigJMxMTcxKVwiLFwiU2jFjWFuICgxMTcx4oCTMTE3NSlcIixcIkFuZ2VuICgxMTc14oCTMTE3NylcIixcIkppc2jFjSAoMTE3N+KAkzExODEpXCIsXCJZxY13YSAoMTE4MeKAkzExODIpXCIsXCJKdWVpICgxMTgy4oCTMTE4NClcIixcIkdlbnJ5YWt1ICgxMTg04oCTMTE4NSlcIixcIkJ1bmppICgxMTg14oCTMTE5MClcIixcIktlbmt5xasgKDExOTDigJMxMTk5KVwiLFwiU2jFjWppICgxMTk54oCTMTIwMSlcIixcIktlbm5pbiAoMTIwMeKAkzEyMDQpXCIsXCJHZW5recWrICgxMjA04oCTMTIwNilcIixcIktlbuKAmWVpICgxMjA24oCTMTIwNylcIixcIkrFjWdlbiAoMTIwN+KAkzEyMTEpXCIsXCJLZW5yeWFrdSAoMTIxMeKAkzEyMTMpXCIsXCJLZW5wxY0gKDEyMTPigJMxMjE5KVwiLFwiSsWNa3nFqyAoMTIxOeKAkzEyMjIpXCIsXCJKxY3FjSAoMTIyMuKAkzEyMjQpXCIsXCJHZW5uaW4gKDEyMjTigJMxMjI1KVwiLFwiS2Fyb2t1ICgxMjI14oCTMTIyNylcIixcIkFudGVpICgxMjI34oCTMTIyOSlcIixcIkthbmtpICgxMjI54oCTMTIzMilcIixcIkrFjWVpICgxMjMy4oCTMTIzMylcIixcIlRlbnB1a3UgKDEyMzPigJMxMjM0KVwiLFwiQnVucnlha3UgKDEyMzTigJMxMjM1KVwiLFwiS2F0ZWkgKDEyMzXigJMxMjM4KVwiLFwiUnlha3VuaW4gKDEyMzjigJMxMjM5KVwiLFwiRW7igJnFjSAoMTIzOeKAkzEyNDApXCIsXCJOaW5qaSAoMTI0MOKAkzEyNDMpXCIsXCJLYW5nZW4gKDEyNDPigJMxMjQ3KVwiLFwiSMWNamkgKDEyNDfigJMxMjQ5KVwiLFwiS2VuY2jFjSAoMTI0OeKAkzEyNTYpXCIsXCJLxY1nZW4gKDEyNTbigJMxMjU3KVwiLFwiU2jFjWthICgxMjU34oCTMTI1OSlcIixcIlNoxY1nZW4gKDEyNTnigJMxMjYwKVwiLFwiQnVu4oCZxY0gKDEyNjDigJMxMjYxKVwiLFwiS8WNY2jFjSAoMTI2MeKAkzEyNjQpXCIsXCJCdW7igJllaSAoMTI2NOKAkzEyNzUpXCIsXCJLZW5qaSAoMTI3NeKAkzEyNzgpXCIsXCJLxY1hbiAoMTI3OOKAkzEyODgpXCIsXCJTaMWNxY0gKDEyODjigJMxMjkzKVwiLFwiRWluaW4gKDEyOTPigJMxMjk5KVwiLFwiU2jFjWFuICgxMjk54oCTMTMwMilcIixcIktlbmdlbiAoMTMwMuKAkzEzMDMpXCIsXCJLYWdlbiAoMTMwM+KAkzEzMDYpXCIsXCJUb2t1amkgKDEzMDbigJMxMzA4KVwiLFwiRW5recWNICgxMzA44oCTMTMxMSlcIixcIsWMY2jFjSAoMTMxMeKAkzEzMTIpXCIsXCJTaMWNd2EgKDEzMTLigJMxMzE3KVwiLFwiQnVucMWNICgxMzE34oCTMTMxOSlcIixcIkdlbsWNICgxMzE54oCTMTMyMSlcIixcIkdlbmvFjSAoMTMyMeKAkzEzMjQpXCIsXCJTaMWNY2jFqyAoMTMyNOKAkzEzMjYpXCIsXCJLYXJ5YWt1ICgxMzI24oCTMTMyOSlcIixcIkdlbnRva3UgKDEzMjnigJMxMzMxKVwiLFwiR2Vua8WNICgxMzMx4oCTMTMzNClcIixcIktlbm11ICgxMzM04oCTMTMzNilcIixcIkVuZ2VuICgxMzM24oCTMTM0MClcIixcIkvFjWtva3UgKDEzNDDigJMxMzQ2KVwiLFwiU2jFjWhlaSAoMTM0NuKAkzEzNzApXCIsXCJLZW50b2t1ICgxMzcw4oCTMTM3MilcIixcIkJ1bmNoxasgKDEzNzLigJMxMzc1KVwiLFwiVGVuanUgKDEzNzXigJMxMzc5KVwiLFwiS8WNcnlha3UgKDEzNznigJMxMzgxKVwiLFwiS8WNd2EgKDEzODHigJMxMzg0KVwiLFwiR2VuY2jFqyAoMTM4NOKAkzEzOTIpXCIsXCJNZWl0b2t1ICgxMzg04oCTMTM4NylcIixcIktha2VpICgxMzg34oCTMTM4OSlcIixcIkvFjcWNICgxMzg54oCTMTM5MClcIixcIk1laXRva3UgKDEzOTDigJMxMzk0KVwiLFwixYxlaSAoMTM5NOKAkzE0MjgpXCIsXCJTaMWNY2jFjSAoMTQyOOKAkzE0MjkpXCIsXCJFaWt5xY0gKDE0MjnigJMxNDQxKVwiLFwiS2FraXRzdSAoMTQ0MeKAkzE0NDQpXCIsXCJCdW7igJlhbiAoMTQ0NOKAkzE0NDkpXCIsXCJIxY10b2t1ICgxNDQ54oCTMTQ1MilcIixcIkt5xY10b2t1ICgxNDUy4oCTMTQ1NSlcIixcIkvFjXNoxY0gKDE0NTXigJMxNDU3KVwiLFwiQ2jFjXJva3UgKDE0NTfigJMxNDYwKVwiLFwiS2Fuc2jFjSAoMTQ2MOKAkzE0NjYpXCIsXCJCdW5zaMWNICgxNDY24oCTMTQ2NylcIixcIsWMbmluICgxNDY34oCTMTQ2OSlcIixcIkJ1bm1laSAoMTQ2OeKAkzE0ODcpXCIsXCJDaMWNa3nFjSAoMTQ4N+KAkzE0ODkpXCIsXCJFbnRva3UgKDE0ODnigJMxNDkyKVwiLFwiTWVpxY0gKDE0OTLigJMxNTAxKVwiLFwiQnVua2kgKDE1MDHigJMxNTA0KVwiLFwiRWlzaMWNICgxNTA04oCTMTUyMSlcIixcIlRhaWVpICgxNTIx4oCTMTUyOClcIixcIkt5xY1yb2t1ICgxNTI44oCTMTUzMilcIixcIlRlbmJ1biAoMTUzMuKAkzE1NTUpXCIsXCJLxY1qaSAoMTU1NeKAkzE1NTgpXCIsXCJFaXJva3UgKDE1NTjigJMxNTcwKVwiLFwiR2Vua2kgKDE1NzDigJMxNTczKVwiLFwiVGVuc2jFjSAoMTU3M+KAkzE1OTIpXCIsXCJCdW5yb2t1ICgxNTky4oCTMTU5NilcIixcIktlaWNoxY0gKDE1OTbigJMxNjE1KVwiLFwiR2VubmEgKDE2MTXigJMxNjI0KVwiLFwiS2Fu4oCZZWkgKDE2MjTigJMxNjQ0KVwiLFwiU2jFjWhvICgxNjQ04oCTMTY0OClcIixcIktlaWFuICgxNjQ44oCTMTY1MilcIixcIkrFjcWNICgxNjUy4oCTMTY1NSlcIixcIk1laXJla2kgKDE2NTXigJMxNjU4KVwiLFwiTWFuamkgKDE2NTjigJMxNjYxKVwiLFwiS2FuYnVuICgxNjYx4oCTMTY3MylcIixcIkVucMWNICgxNjcz4oCTMTY4MSlcIixcIlRlbm5hICgxNjgx4oCTMTY4NClcIixcIkrFjWt5xY0gKDE2ODTigJMxNjg4KVwiLFwiR2Vucm9rdSAoMTY4OOKAkzE3MDQpXCIsXCJIxY1laSAoMTcwNOKAkzE3MTEpXCIsXCJTaMWNdG9rdSAoMTcxMeKAkzE3MTYpXCIsXCJLecWNaMWNICgxNzE24oCTMTczNilcIixcIkdlbmJ1biAoMTczNuKAkzE3NDEpXCIsXCJLYW5wxY0gKDE3NDHigJMxNzQ0KVwiLFwiRW5recWNICgxNzQ04oCTMTc0OClcIixcIkthbuKAmWVuICgxNzQ44oCTMTc1MSlcIixcIkjFjXJla2kgKDE3NTHigJMxNzY0KVwiLFwiTWVpd2EgKDE3NjTigJMxNzcyKVwiLFwiQW7igJllaSAoMTc3MuKAkzE3ODEpXCIsXCJUZW5tZWkgKDE3ODHigJMxNzg5KVwiLFwiS2Fuc2VpICgxNzg54oCTMTgwMSlcIixcIkt5xY13YSAoMTgwMeKAkzE4MDQpXCIsXCJCdW5rYSAoMTgwNOKAkzE4MTgpXCIsXCJCdW5zZWkgKDE4MTjigJMxODMwKVwiLFwiVGVucMWNICgxODMw4oCTMTg0NClcIixcIkvFjWthICgxODQ04oCTMTg0OClcIixcIkthZWkgKDE4NDjigJMxODU0KVwiLFwiQW5zZWkgKDE4NTTigJMxODYwKVwiLFwiTWFu4oCZZW4gKDE4NjDigJMxODYxKVwiLFwiQnVua3nFqyAoMTg2MeKAkzE4NjQpXCIsXCJHZW5qaSAoMTg2NOKAkzE4NjUpXCIsXCJLZWnFjSAoMTg2NeKAkzE4NjgpXCIsXCJNZWlqaVwiLFwiVGFpc2jFjVwiLFwiU2jFjXdhXCIsXCJIZWlzZWlcIl0sbG9uZzpbXCJUYWlrYSAoNjQ14oCTNjUwKVwiLFwiSGFrdWNoaSAoNjUw4oCTNjcxKVwiLFwiSGFrdWjFjSAoNjcy4oCTNjg2KVwiLFwiU2h1Y2jFjSAoNjg24oCTNzAxKVwiLFwiVGFpaMWNICg3MDHigJM3MDQpXCIsXCJLZWl1biAoNzA04oCTNzA4KVwiLFwiV2FkxY0gKDcwOOKAkzcxNSlcIixcIlJlaWtpICg3MTXigJM3MTcpXCIsXCJZxY1yxY0gKDcxN+KAkzcyNClcIixcIkppbmtpICg3MjTigJM3MjkpXCIsXCJUZW5wecWNICg3MjnigJM3NDkpXCIsXCJUZW5wecWNLWthbXDFjSAoNzQ5LTc0OSlcIixcIlRlbnB5xY0tc2jFjWjFjSAoNzQ5LTc1NylcIixcIlRlbnB5xY0taMWNamkgKDc1Ny03NjUpXCIsXCJUZW5wecWNLWppbmdvICg3NjUtNzY3KVwiLFwiSmluZ28ta2VpdW4gKDc2Ny03NzApXCIsXCJIxY1raSAoNzcw4oCTNzgwKVwiLFwiVGVuLcWNICg3ODEtNzgyKVwiLFwiRW5yeWFrdSAoNzgy4oCTODA2KVwiLFwiRGFpZMWNICg4MDbigJM4MTApXCIsXCJLxY1uaW4gKDgxMOKAkzgyNClcIixcIlRlbmNoxY0gKDgyNOKAkzgzNClcIixcIkrFjXdhICg4MzTigJM4NDgpXCIsXCJLYWrFjSAoODQ44oCTODUxKVwiLFwiTmluanUgKDg1MeKAkzg1NClcIixcIlNhaWvFjSAoODU04oCTODU3KVwiLFwiVGVuLWFuICg4NTctODU5KVwiLFwiSsWNZ2FuICg4NTnigJM4NzcpXCIsXCJHYW5necWNICg4NzfigJM4ODUpXCIsXCJOaW5uYSAoODg14oCTODg5KVwiLFwiS2FucHnFjSAoODg54oCTODk4KVwiLFwiU2jFjXRhaSAoODk44oCTOTAxKVwiLFwiRW5naSAoOTAx4oCTOTIzKVwiLFwiRW5jaMWNICg5MjPigJM5MzEpXCIsXCJKxY1oZWkgKDkzMeKAkzkzOClcIixcIlRlbmd5xY0gKDkzOOKAkzk0NylcIixcIlRlbnJ5YWt1ICg5NDfigJM5NTcpXCIsXCJUZW50b2t1ICg5NTfigJM5NjEpXCIsXCLFjHdhICg5NjHigJM5NjQpXCIsXCJLxY1oxY0gKDk2NOKAkzk2OClcIixcIkFubmEgKDk2OOKAkzk3MClcIixcIlRlbnJva3UgKDk3MOKAkzk3MylcIixcIlRlbuKAmWVuICg5NzPigJM5NzYpXCIsXCJKxY1nZW4gKDk3NuKAkzk3OClcIixcIlRlbmdlbiAoOTc44oCTOTgzKVwiLFwiRWlrYW4gKDk4M+KAkzk4NSlcIixcIkthbm5hICg5ODXigJM5ODcpXCIsXCJFaWVuICg5ODfigJM5ODkpXCIsXCJFaXNvICg5ODnigJM5OTApXCIsXCJTaMWNcnlha3UgKDk5MOKAkzk5NSlcIixcIkNoxY10b2t1ICg5OTXigJM5OTkpXCIsXCJDaMWNaMWNICg5OTnigJMxMDA0KVwiLFwiS2Fua8WNICgxMDA04oCTMTAxMilcIixcIkNoxY13YSAoMTAxMuKAkzEwMTcpXCIsXCJLYW5uaW4gKDEwMTfigJMxMDIxKVwiLFwiSmlhbiAoMTAyMeKAkzEwMjQpXCIsXCJNYW5qdSAoMTAyNOKAkzEwMjgpXCIsXCJDaMWNZ2VuICgxMDI44oCTMTAzNylcIixcIkNoxY1yeWFrdSAoMTAzN+KAkzEwNDApXCIsXCJDaMWNa3nFqyAoMTA0MOKAkzEwNDQpXCIsXCJLYW50b2t1ICgxMDQ04oCTMTA0NilcIixcIkVpc2jFjSAoMTA0NuKAkzEwNTMpXCIsXCJUZW5naSAoMTA1M+KAkzEwNTgpXCIsXCJLxY1oZWkgKDEwNTjigJMxMDY1KVwiLFwiSmlyeWFrdSAoMTA2NeKAkzEwNjkpXCIsXCJFbmt5xasgKDEwNjnigJMxMDc0KVwiLFwiU2jFjWhvICgxMDc04oCTMTA3NylcIixcIlNoxY1yeWFrdSAoMTA3N+KAkzEwODEpXCIsXCJFaWjFjSAoMTA4MeKAkzEwODQpXCIsXCLFjHRva3UgKDEwODTigJMxMDg3KVwiLFwiS2FuamkgKDEwODfigJMxMDk0KVwiLFwiS2FoxY0gKDEwOTTigJMxMDk2KVwiLFwiRWljaMWNICgxMDk24oCTMTA5NylcIixcIkrFjXRva3UgKDEwOTfigJMxMDk5KVwiLFwiS8WNd2EgKDEwOTnigJMxMTA0KVwiLFwiQ2jFjWppICgxMTA04oCTMTEwNilcIixcIkthc2jFjSAoMTEwNuKAkzExMDgpXCIsXCJUZW5uaW4gKDExMDjigJMxMTEwKVwiLFwiVGVuLWVpICgxMTEwLTExMTMpXCIsXCJFaWt5xasgKDExMTPigJMxMTE4KVwiLFwiR2Vu4oCZZWkgKDExMTjigJMxMTIwKVwiLFwiSMWNYW4gKDExMjDigJMxMTI0KVwiLFwiVGVuamkgKDExMjTigJMxMTI2KVwiLFwiRGFpamkgKDExMjbigJMxMTMxKVwiLFwiVGVuc2jFjSAoMTEzMeKAkzExMzIpXCIsXCJDaMWNc2jFjSAoMTEzMuKAkzExMzUpXCIsXCJIxY1lbiAoMTEzNeKAkzExNDEpXCIsXCJFaWppICgxMTQx4oCTMTE0MilcIixcIkvFjWppICgxMTQy4oCTMTE0NClcIixcIlRlbuKAmXnFjSAoMTE0NOKAkzExNDUpXCIsXCJLecWrYW4gKDExNDXigJMxMTUxKVwiLFwiTmlucGVpICgxMTUx4oCTMTE1NClcIixcIkt5xatqdSAoMTE1NOKAkzExNTYpXCIsXCJIxY1nZW4gKDExNTbigJMxMTU5KVwiLFwiSGVpamkgKDExNTnigJMxMTYwKVwiLFwiRWlyeWFrdSAoMTE2MOKAkzExNjEpXCIsXCLFjGhvICgxMTYx4oCTMTE2MylcIixcIkNoxY1rYW4gKDExNjPigJMxMTY1KVwiLFwiRWltYW4gKDExNjXigJMxMTY2KVwiLFwiTmlu4oCZYW4gKDExNjbigJMxMTY5KVwiLFwiS2HFjSAoMTE2OeKAkzExNzEpXCIsXCJTaMWNYW4gKDExNzHigJMxMTc1KVwiLFwiQW5nZW4gKDExNzXigJMxMTc3KVwiLFwiSmlzaMWNICgxMTc34oCTMTE4MSlcIixcIlnFjXdhICgxMTgx4oCTMTE4MilcIixcIkp1ZWkgKDExODLigJMxMTg0KVwiLFwiR2Vucnlha3UgKDExODTigJMxMTg1KVwiLFwiQnVuamkgKDExODXigJMxMTkwKVwiLFwiS2Vua3nFqyAoMTE5MOKAkzExOTkpXCIsXCJTaMWNamkgKDExOTnigJMxMjAxKVwiLFwiS2VubmluICgxMjAx4oCTMTIwNClcIixcIkdlbmt5xasgKDEyMDTigJMxMjA2KVwiLFwiS2Vu4oCZZWkgKDEyMDbigJMxMjA3KVwiLFwiSsWNZ2VuICgxMjA34oCTMTIxMSlcIixcIktlbnJ5YWt1ICgxMjEx4oCTMTIxMylcIixcIktlbnDFjSAoMTIxM+KAkzEyMTkpXCIsXCJKxY1recWrICgxMjE54oCTMTIyMilcIixcIkrFjcWNICgxMjIy4oCTMTIyNClcIixcIkdlbm5pbiAoMTIyNOKAkzEyMjUpXCIsXCJLYXJva3UgKDEyMjXigJMxMjI3KVwiLFwiQW50ZWkgKDEyMjfigJMxMjI5KVwiLFwiS2Fua2kgKDEyMjnigJMxMjMyKVwiLFwiSsWNZWkgKDEyMzLigJMxMjMzKVwiLFwiVGVucHVrdSAoMTIzM+KAkzEyMzQpXCIsXCJCdW5yeWFrdSAoMTIzNOKAkzEyMzUpXCIsXCJLYXRlaSAoMTIzNeKAkzEyMzgpXCIsXCJSeWFrdW5pbiAoMTIzOOKAkzEyMzkpXCIsXCJFbuKAmcWNICgxMjM54oCTMTI0MClcIixcIk5pbmppICgxMjQw4oCTMTI0MylcIixcIkthbmdlbiAoMTI0M+KAkzEyNDcpXCIsXCJIxY1qaSAoMTI0N+KAkzEyNDkpXCIsXCJLZW5jaMWNICgxMjQ54oCTMTI1NilcIixcIkvFjWdlbiAoMTI1NuKAkzEyNTcpXCIsXCJTaMWNa2EgKDEyNTfigJMxMjU5KVwiLFwiU2jFjWdlbiAoMTI1OeKAkzEyNjApXCIsXCJCdW7igJnFjSAoMTI2MOKAkzEyNjEpXCIsXCJLxY1jaMWNICgxMjYx4oCTMTI2NClcIixcIkJ1buKAmWVpICgxMjY04oCTMTI3NSlcIixcIktlbmppICgxMjc14oCTMTI3OClcIixcIkvFjWFuICgxMjc44oCTMTI4OClcIixcIlNoxY3FjSAoMTI4OOKAkzEyOTMpXCIsXCJFaW5pbiAoMTI5M+KAkzEyOTkpXCIsXCJTaMWNYW4gKDEyOTnigJMxMzAyKVwiLFwiS2VuZ2VuICgxMzAy4oCTMTMwMylcIixcIkthZ2VuICgxMzAz4oCTMTMwNilcIixcIlRva3VqaSAoMTMwNuKAkzEzMDgpXCIsXCJFbmt5xY0gKDEzMDjigJMxMzExKVwiLFwixYxjaMWNICgxMzEx4oCTMTMxMilcIixcIlNoxY13YSAoMTMxMuKAkzEzMTcpXCIsXCJCdW5wxY0gKDEzMTfigJMxMzE5KVwiLFwiR2VuxY0gKDEzMTnigJMxMzIxKVwiLFwiR2Vua8WNICgxMzIx4oCTMTMyNClcIixcIlNoxY1jaMWrICgxMzI04oCTMTMyNilcIixcIkthcnlha3UgKDEzMjbigJMxMzI5KVwiLFwiR2VudG9rdSAoMTMyOeKAkzEzMzEpXCIsXCJHZW5rxY0gKDEzMzHigJMxMzM0KVwiLFwiS2VubXUgKDEzMzTigJMxMzM2KVwiLFwiRW5nZW4gKDEzMzbigJMxMzQwKVwiLFwiS8WNa29rdSAoMTM0MOKAkzEzNDYpXCIsXCJTaMWNaGVpICgxMzQ24oCTMTM3MClcIixcIktlbnRva3UgKDEzNzDigJMxMzcyKVwiLFwiQnVuY2jFqyAoMTM3MuKAkzEzNzUpXCIsXCJUZW5qdSAoMTM3NeKAkzEzNzkpXCIsXCJLxY1yeWFrdSAoMTM3OeKAkzEzODEpXCIsXCJLxY13YSAoMTM4MeKAkzEzODQpXCIsXCJHZW5jaMWrICgxMzg04oCTMTM5MilcIixcIk1laXRva3UgKDEzODTigJMxMzg3KVwiLFwiS2FrZWkgKDEzODfigJMxMzg5KVwiLFwiS8WNxY0gKDEzODnigJMxMzkwKVwiLFwiTWVpdG9rdSAoMTM5MOKAkzEzOTQpXCIsXCLFjGVpICgxMzk04oCTMTQyOClcIixcIlNoxY1jaMWNICgxNDI44oCTMTQyOSlcIixcIkVpa3nFjSAoMTQyOeKAkzE0NDEpXCIsXCJLYWtpdHN1ICgxNDQx4oCTMTQ0NClcIixcIkJ1buKAmWFuICgxNDQ04oCTMTQ0OSlcIixcIkjFjXRva3UgKDE0NDnigJMxNDUyKVwiLFwiS3nFjXRva3UgKDE0NTLigJMxNDU1KVwiLFwiS8WNc2jFjSAoMTQ1NeKAkzE0NTcpXCIsXCJDaMWNcm9rdSAoMTQ1N+KAkzE0NjApXCIsXCJLYW5zaMWNICgxNDYw4oCTMTQ2NilcIixcIkJ1bnNoxY0gKDE0NjbigJMxNDY3KVwiLFwixYxuaW4gKDE0NjfigJMxNDY5KVwiLFwiQnVubWVpICgxNDY54oCTMTQ4NylcIixcIkNoxY1recWNICgxNDg34oCTMTQ4OSlcIixcIkVudG9rdSAoMTQ4OeKAkzE0OTIpXCIsXCJNZWnFjSAoMTQ5MuKAkzE1MDEpXCIsXCJCdW5raSAoMTUwMeKAkzE1MDQpXCIsXCJFaXNoxY0gKDE1MDTigJMxNTIxKVwiLFwiVGFpZWkgKDE1MjHigJMxNTI4KVwiLFwiS3nFjXJva3UgKDE1MjjigJMxNTMyKVwiLFwiVGVuYnVuICgxNTMy4oCTMTU1NSlcIixcIkvFjWppICgxNTU14oCTMTU1OClcIixcIkVpcm9rdSAoMTU1OOKAkzE1NzApXCIsXCJHZW5raSAoMTU3MOKAkzE1NzMpXCIsXCJUZW5zaMWNICgxNTcz4oCTMTU5MilcIixcIkJ1bnJva3UgKDE1OTLigJMxNTk2KVwiLFwiS2VpY2jFjSAoMTU5NuKAkzE2MTUpXCIsXCJHZW5uYSAoMTYxNeKAkzE2MjQpXCIsXCJLYW7igJllaSAoMTYyNOKAkzE2NDQpXCIsXCJTaMWNaG8gKDE2NDTigJMxNjQ4KVwiLFwiS2VpYW4gKDE2NDjigJMxNjUyKVwiLFwiSsWNxY0gKDE2NTLigJMxNjU1KVwiLFwiTWVpcmVraSAoMTY1NeKAkzE2NTgpXCIsXCJNYW5qaSAoMTY1OOKAkzE2NjEpXCIsXCJLYW5idW4gKDE2NjHigJMxNjczKVwiLFwiRW5wxY0gKDE2NzPigJMxNjgxKVwiLFwiVGVubmEgKDE2ODHigJMxNjg0KVwiLFwiSsWNa3nFjSAoMTY4NOKAkzE2ODgpXCIsXCJHZW5yb2t1ICgxNjg44oCTMTcwNClcIixcIkjFjWVpICgxNzA04oCTMTcxMSlcIixcIlNoxY10b2t1ICgxNzEx4oCTMTcxNilcIixcIkt5xY1oxY0gKDE3MTbigJMxNzM2KVwiLFwiR2VuYnVuICgxNzM24oCTMTc0MSlcIixcIkthbnDFjSAoMTc0MeKAkzE3NDQpXCIsXCJFbmt5xY0gKDE3NDTigJMxNzQ4KVwiLFwiS2Fu4oCZZW4gKDE3NDjigJMxNzUxKVwiLFwiSMWNcmVraSAoMTc1MeKAkzE3NjQpXCIsXCJNZWl3YSAoMTc2NOKAkzE3NzIpXCIsXCJBbuKAmWVpICgxNzcy4oCTMTc4MSlcIixcIlRlbm1laSAoMTc4MeKAkzE3ODkpXCIsXCJLYW5zZWkgKDE3ODnigJMxODAxKVwiLFwiS3nFjXdhICgxODAx4oCTMTgwNClcIixcIkJ1bmthICgxODA04oCTMTgxOClcIixcIkJ1bnNlaSAoMTgxOOKAkzE4MzApXCIsXCJUZW5wxY0gKDE4MzDigJMxODQ0KVwiLFwiS8WNa2EgKDE4NDTigJMxODQ4KVwiLFwiS2FlaSAoMTg0OOKAkzE4NTQpXCIsXCJBbnNlaSAoMTg1NOKAkzE4NjApXCIsXCJNYW7igJllbiAoMTg2MOKAkzE4NjEpXCIsXCJCdW5recWrICgxODYx4oCTMTg2NClcIixcIkdlbmppICgxODY04oCTMTg2NSlcIixcIktlacWNICgxODY14oCTMTg2OClcIixcIk1laWppXCIsXCJUYWlzaMWNXCIsXCJTaMWNd2FcIixcIkhlaXNlaVwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LHBlcnNpYW46e21vbnRoczp7bmFycm93OltcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIl0sc2hvcnQ6W1wiRmFydmFyZGluXCIsXCJPcmRpYmVoZXNodFwiLFwiS2hvcmRhZFwiLFwiVGlyXCIsXCJNb3JkYWRcIixcIlNoYWhyaXZhclwiLFwiTWVoclwiLFwiQWJhblwiLFwiQXphclwiLFwiRGV5XCIsXCJCYWhtYW5cIixcIkVzZmFuZFwiXSxsb25nOltcIkZhcnZhcmRpblwiLFwiT3JkaWJlaGVzaHRcIixcIktob3JkYWRcIixcIlRpclwiLFwiTW9yZGFkXCIsXCJTaGFocml2YXJcIixcIk1laHJcIixcIkFiYW5cIixcIkF6YXJcIixcIkRleVwiLFwiQmFobWFuXCIsXCJFc2ZhbmRcIl19LGRheXM6e25hcnJvdzpbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLHNob3J0OltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXSxsb25nOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdfSxlcmFzOntuYXJyb3c6W1wiQVBcIl0sc2hvcnQ6W1wiQVBcIl0sbG9uZzpbXCJBUFwiXX0sZGF5UGVyaW9kczp7YW06XCJBTVwiLHBtOlwiUE1cIn19LHJvYzp7bW9udGhzOntuYXJyb3c6W1wiSlwiLFwiRlwiLFwiTVwiLFwiQVwiLFwiTVwiLFwiSlwiLFwiSlwiLFwiQVwiLFwiU1wiLFwiT1wiLFwiTlwiLFwiRFwiXSxzaG9ydDpbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCJdLGxvbmc6W1wiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdfSxkYXlzOntuYXJyb3c6W1wiU1wiLFwiTVwiLFwiVFwiLFwiV1wiLFwiVFwiLFwiRlwiLFwiU1wiXSxzaG9ydDpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIl0sbG9uZzpbXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXX0sZXJhczp7bmFycm93OltcIkJlZm9yZSBSLk8uQy5cIixcIk1pbmd1b1wiXSxzaG9ydDpbXCJCZWZvcmUgUi5PLkMuXCIsXCJNaW5ndW9cIl0sbG9uZzpbXCJCZWZvcmUgUi5PLkMuXCIsXCJNaW5ndW9cIl19LGRheVBlcmlvZHM6e2FtOlwiQU1cIixwbTpcIlBNXCJ9fX19LG51bWJlcjp7bnU6W1wibGF0blwiXSxwYXR0ZXJuczp7ZGVjaW1hbDp7cG9zaXRpdmVQYXR0ZXJuOlwie251bWJlcn1cIixuZWdhdGl2ZVBhdHRlcm46XCJ7bWludXNTaWdufXtudW1iZXJ9XCJ9LGN1cnJlbmN5Ontwb3NpdGl2ZVBhdHRlcm46XCJ7Y3VycmVuY3l9e251bWJlcn1cIixuZWdhdGl2ZVBhdHRlcm46XCJ7bWludXNTaWdufXtjdXJyZW5jeX17bnVtYmVyfVwifSxwZXJjZW50Ontwb3NpdGl2ZVBhdHRlcm46XCJ7bnVtYmVyfXtwZXJjZW50U2lnbn1cIixuZWdhdGl2ZVBhdHRlcm46XCJ7bWludXNTaWdufXtudW1iZXJ9e3BlcmNlbnRTaWdufVwifX0sc3ltYm9sczp7bGF0bjp7ZGVjaW1hbDpcIi5cIixncm91cDpcIixcIixuYW46XCJOYU5cIixwbHVzU2lnbjpcIitcIixtaW51c1NpZ246XCItXCIscGVyY2VudFNpZ246XCIlXCIsaW5maW5pdHk6XCLiiJ5cIn19LGN1cnJlbmNpZXM6e0FVRDpcIkEkXCIsQlJMOlwiUiRcIixDQUQ6XCJDQSRcIixDTlk6XCJDTsKlXCIsRVVSOlwi4oKsXCIsR0JQOlwiwqNcIixIS0Q6XCJISyRcIixJTFM6XCLigqpcIixJTlI6XCLigrlcIixKUFk6XCLCpVwiLEtSVzpcIuKCqVwiLE1YTjpcIk1YJFwiLE5aRDpcIk5aJFwiLFRXRDpcIk5UJFwiLFVTRDpcIiRcIixWTkQ6XCLigqtcIixYQUY6XCJGQ0ZBXCIsWENEOlwiRUMkXCIsWE9GOlwiQ0ZBXCIsWFBGOlwiQ0ZQRlwifX19KTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXG4vLyBtdXN0IGJlIG5vIHNsYXNoZXMsIGVtcHR5IGVsZW1lbnRzLCBvciBkZXZpY2UgbmFtZXMgKGM6XFwpIGluIHRoZSBhcnJheVxuLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoXG4vLyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgcGF0aHMpXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG4vLyBTcGxpdCBhIGZpbGVuYW1lIGludG8gW3Jvb3QsIGRpciwgYmFzZW5hbWUsIGV4dF0sIHVuaXggdmVyc2lvblxuLy8gJ3Jvb3QnIGlzIGp1c3QgYSBzbGFzaCwgb3Igbm90aGluZy5cbnZhciBzcGxpdFBhdGhSZSA9XG4gICAgL14oXFwvP3wpKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/fCkoXFwuW14uXFwvXSp8KSkoPzpbXFwvXSopJC87XG52YXIgc3BsaXRQYXRoID0gZnVuY3Rpb24oZmlsZW5hbWUpIHtcbiAgcmV0dXJuIHNwbGl0UGF0aFJlLmV4ZWMoZmlsZW5hbWUpLnNsaWNlKDEpO1xufTtcblxuLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNvbHZlZFBhdGggPSAnJyxcbiAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkge1xuICAgIHZhciBwYXRoID0gKGkgPj0gMCkgPyBhcmd1bWVudHNbaV0gOiBwcm9jZXNzLmN3ZCgpO1xuXG4gICAgLy8gU2tpcCBlbXB0eSBhbmQgaW52YWxpZCBlbnRyaWVzXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHJlc29sdmVkUGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFyZXNvbHZlZEFic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nO1xufTtcblxuLy8gcGF0aC5ub3JtYWxpemUocGF0aClcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc0Fic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgaWYgKCFwYXRoICYmICFpc0Fic29sdXRlKSB7XG4gICAgcGF0aCA9ICcuJztcbiAgfVxuICBpZiAocGF0aCAmJiB0cmFpbGluZ1NsYXNoKSB7XG4gICAgcGF0aCArPSAnLyc7XG4gIH1cblxuICByZXR1cm4gKGlzQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuam9pbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGF0aHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICByZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufTtcblxuXG4vLyBwYXRoLnJlbGF0aXZlKGZyb20sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZWxhdGl2ZSA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gIGZyb20gPSBleHBvcnRzLnJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IGV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xuXG4gIGZ1bmN0aW9uIHRyaW0oYXJyKSB7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoYXJyW3N0YXJ0XSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBlbmQgPSBhcnIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7XG4gICAgICBpZiAoYXJyW2VuZF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCArIDEpO1xuICB9XG5cbiAgdmFyIGZyb21QYXJ0cyA9IHRyaW0oZnJvbS5zcGxpdCgnLycpKTtcbiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xuXG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLCB0b1BhcnRzLmxlbmd0aCk7XG4gIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpO1xuICB9XG5cbiAgb3V0cHV0UGFydHMgPSBvdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtcblxuICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xufTtcblxuZXhwb3J0cy5zZXAgPSAnLyc7XG5leHBvcnRzLmRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgcmVzdWx0ID0gc3BsaXRQYXRoKHBhdGgpLFxuICAgICAgcm9vdCA9IHJlc3VsdFswXSxcbiAgICAgIGRpciA9IHJlc3VsdFsxXTtcblxuICBpZiAoIXJvb3QgJiYgIWRpcikge1xuICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgIHJldHVybiAnLic7XG4gIH1cblxuICBpZiAoZGlyKSB7XG4gICAgLy8gSXQgaGFzIGEgZGlybmFtZSwgc3RyaXAgdHJhaWxpbmcgc2xhc2hcbiAgICBkaXIgPSBkaXIuc3Vic3RyKDAsIGRpci5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiByb290ICsgZGlyO1xufTtcblxuXG5leHBvcnRzLmJhc2VuYW1lID0gZnVuY3Rpb24ocGF0aCwgZXh0KSB7XG4gIHZhciBmID0gc3BsaXRQYXRoKHBhdGgpWzJdO1xuICAvLyBUT0RPOiBtYWtlIHRoaXMgY29tcGFyaXNvbiBjYXNlLWluc2Vuc2l0aXZlIG9uIHdpbmRvd3M/XG4gIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc3Vic3RyKDAsIGYubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGY7XG59O1xuXG5cbmV4cG9ydHMuZXh0bmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHNwbGl0UGF0aChwYXRoKVszXTtcbn07XG5cbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InXG4gICAgPyBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH1cbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvLyB2aW06dHM9NDpzdHM9NDpzdz00OlxuLyohXG4gKlxuICogQ29weXJpZ2h0IDIwMDktMjAxNyBLcmlzIEtvd2FsIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUXG4gKiBsaWNlbnNlIGZvdW5kIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS9ibG9iL3YxL0xJQ0VOU0VcbiAqXG4gKiBXaXRoIHBhcnRzIGJ5IFR5bGVyIENsb3NlXG4gKiBDb3B5cmlnaHQgMjAwNy0yMDA5IFR5bGVyIENsb3NlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIFggbGljZW5zZSBmb3VuZFxuICogYXQgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5odG1sXG4gKiBGb3JrZWQgYXQgcmVmX3NlbmQuanMgdmVyc2lvbjogMjAwOS0wNS0xMVxuICpcbiAqIFdpdGggcGFydHMgYnkgTWFyayBNaWxsZXJcbiAqIENvcHlyaWdodCAoQykgMjAxMSBHb29nbGUgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG4oZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vIFRoaXMgZmlsZSB3aWxsIGZ1bmN0aW9uIHByb3Blcmx5IGFzIGEgPHNjcmlwdD4gdGFnLCBvciBhIG1vZHVsZVxuICAgIC8vIHVzaW5nIENvbW1vbkpTIGFuZCBOb2RlSlMgb3IgUmVxdWlyZUpTIG1vZHVsZSBmb3JtYXRzLiAgSW5cbiAgICAvLyBDb21tb24vTm9kZS9SZXF1aXJlSlMsIHRoZSBtb2R1bGUgZXhwb3J0cyB0aGUgUSBBUEkgYW5kIHdoZW5cbiAgICAvLyBleGVjdXRlZCBhcyBhIHNpbXBsZSA8c2NyaXB0PiwgaXQgY3JlYXRlcyBhIFEgZ2xvYmFsIGluc3RlYWQuXG5cbiAgICAvLyBNb250YWdlIFJlcXVpcmVcbiAgICBpZiAodHlwZW9mIGJvb3RzdHJhcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGJvb3RzdHJhcChcInByb21pc2VcIiwgZGVmaW5pdGlvbik7XG5cbiAgICAvLyBDb21tb25KU1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKTtcblxuICAgIC8vIFJlcXVpcmVKU1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKGRlZmluaXRpb24pO1xuXG4gICAgLy8gU0VTIChTZWN1cmUgRWNtYVNjcmlwdClcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKCFzZXMub2soKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VzLm1ha2VRID0gZGVmaW5pdGlvbjtcbiAgICAgICAgfVxuXG4gICAgLy8gPHNjcmlwdD5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgLy8gUHJlZmVyIHdpbmRvdyBvdmVyIHNlbGYgZm9yIGFkZC1vbiBzY3JpcHRzLiBVc2Ugc2VsZiBmb3JcbiAgICAgICAgLy8gbm9uLXdpbmRvd2VkIGNvbnRleHRzLlxuICAgICAgICB2YXIgZ2xvYmFsID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHNlbGY7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBgd2luZG93YCBvYmplY3QsIHNhdmUgdGhlIHByZXZpb3VzIFEgZ2xvYmFsXG4gICAgICAgIC8vIGFuZCBpbml0aWFsaXplIFEgYXMgYSBnbG9iYWwuXG4gICAgICAgIHZhciBwcmV2aW91c1EgPSBnbG9iYWwuUTtcbiAgICAgICAgZ2xvYmFsLlEgPSBkZWZpbml0aW9uKCk7XG5cbiAgICAgICAgLy8gQWRkIGEgbm9Db25mbGljdCBmdW5jdGlvbiBzbyBRIGNhbiBiZSByZW1vdmVkIGZyb20gdGhlXG4gICAgICAgIC8vIGdsb2JhbCBuYW1lc3BhY2UuXG4gICAgICAgIGdsb2JhbC5RLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWwuUSA9IHByZXZpb3VzUTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBlbnZpcm9ubWVudCB3YXMgbm90IGFudGljaXBhdGVkIGJ5IFEuIFBsZWFzZSBmaWxlIGEgYnVnLlwiKTtcbiAgICB9XG5cbn0pKGZ1bmN0aW9uICgpIHtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgaGFzU3RhY2tzID0gZmFsc2U7XG50cnkge1xuICAgIHRocm93IG5ldyBFcnJvcigpO1xufSBjYXRjaCAoZSkge1xuICAgIGhhc1N0YWNrcyA9ICEhZS5zdGFjaztcbn1cblxuLy8gQWxsIGNvZGUgYWZ0ZXIgdGhpcyBwb2ludCB3aWxsIGJlIGZpbHRlcmVkIGZyb20gc3RhY2sgdHJhY2VzIHJlcG9ydGVkXG4vLyBieSBRLlxudmFyIHFTdGFydGluZ0xpbmUgPSBjYXB0dXJlTGluZSgpO1xudmFyIHFGaWxlTmFtZTtcblxuLy8gc2hpbXNcblxuLy8gdXNlZCBmb3IgZmFsbGJhY2sgaW4gXCJhbGxSZXNvbHZlZFwiXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBVc2UgdGhlIGZhc3Rlc3QgcG9zc2libGUgbWVhbnMgdG8gZXhlY3V0ZSBhIHRhc2sgaW4gYSBmdXR1cmUgdHVyblxuLy8gb2YgdGhlIGV2ZW50IGxvb3AuXG52YXIgbmV4dFRpY2sgPShmdW5jdGlvbiAoKSB7XG4gICAgLy8gbGlua2VkIGxpc3Qgb2YgdGFza3MgKHNpbmdsZSwgd2l0aCBoZWFkIG5vZGUpXG4gICAgdmFyIGhlYWQgPSB7dGFzazogdm9pZCAwLCBuZXh0OiBudWxsfTtcbiAgICB2YXIgdGFpbCA9IGhlYWQ7XG4gICAgdmFyIGZsdXNoaW5nID0gZmFsc2U7XG4gICAgdmFyIHJlcXVlc3RUaWNrID0gdm9pZCAwO1xuICAgIHZhciBpc05vZGVKUyA9IGZhbHNlO1xuICAgIC8vIHF1ZXVlIGZvciBsYXRlIHRhc2tzLCB1c2VkIGJ5IHVuaGFuZGxlZCByZWplY3Rpb24gdHJhY2tpbmdcbiAgICB2YXIgbGF0ZXJRdWV1ZSA9IFtdO1xuXG4gICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIC8qIGpzaGludCBsb29wZnVuYzogdHJ1ZSAqL1xuICAgICAgICB2YXIgdGFzaywgZG9tYWluO1xuXG4gICAgICAgIHdoaWxlIChoZWFkLm5leHQpIHtcbiAgICAgICAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICAgICAgICB0YXNrID0gaGVhZC50YXNrO1xuICAgICAgICAgICAgaGVhZC50YXNrID0gdm9pZCAwO1xuICAgICAgICAgICAgZG9tYWluID0gaGVhZC5kb21haW47XG5cbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgICBoZWFkLmRvbWFpbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJ1blNpbmdsZSh0YXNrLCBkb21haW4pO1xuXG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxhdGVyUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0YXNrID0gbGF0ZXJRdWV1ZS5wb3AoKTtcbiAgICAgICAgICAgIHJ1blNpbmdsZSh0YXNrKTtcbiAgICAgICAgfVxuICAgICAgICBmbHVzaGluZyA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBydW5zIGEgc2luZ2xlIGZ1bmN0aW9uIGluIHRoZSBhc3luYyBxdWV1ZVxuICAgIGZ1bmN0aW9uIHJ1blNpbmdsZSh0YXNrLCBkb21haW4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRhc2soKTtcblxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoaXNOb2RlSlMpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBub2RlLCB1bmNhdWdodCBleGNlcHRpb25zIGFyZSBjb25zaWRlcmVkIGZhdGFsIGVycm9ycy5cbiAgICAgICAgICAgICAgICAvLyBSZS10aHJvdyB0aGVtIHN5bmNocm9ub3VzbHkgdG8gaW50ZXJydXB0IGZsdXNoaW5nIVxuXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIGNvbnRpbnVhdGlvbiBpZiB0aGUgdW5jYXVnaHQgZXhjZXB0aW9uIGlzIHN1cHByZXNzZWRcbiAgICAgICAgICAgICAgICAvLyBsaXN0ZW5pbmcgXCJ1bmNhdWdodEV4Y2VwdGlvblwiIGV2ZW50cyAoYXMgZG9tYWlucyBkb2VzKS5cbiAgICAgICAgICAgICAgICAvLyBDb250aW51ZSBpbiBuZXh0IGV2ZW50IHRvIGF2b2lkIHRpY2sgcmVjdXJzaW9uLlxuICAgICAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmbHVzaCwgMCk7XG4gICAgICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluIGJyb3dzZXJzLCB1bmNhdWdodCBleGNlcHRpb25zIGFyZSBub3QgZmF0YWwuXG4gICAgICAgICAgICAgICAgLy8gUmUtdGhyb3cgdGhlbSBhc3luY2hyb25vdXNseSB0byBhdm9pZCBzbG93LWRvd25zLlxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5leHRUaWNrID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgdGFpbCA9IHRhaWwubmV4dCA9IHtcbiAgICAgICAgICAgIHRhc2s6IHRhc2ssXG4gICAgICAgICAgICBkb21haW46IGlzTm9kZUpTICYmIHByb2Nlc3MuZG9tYWluLFxuICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgICAgICAgIGZsdXNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlcXVlc3RUaWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIHByb2Nlc3MudG9TdHJpbmcoKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIgJiYgcHJvY2Vzcy5uZXh0VGljaykge1xuICAgICAgICAvLyBFbnN1cmUgUSBpcyBpbiBhIHJlYWwgTm9kZSBlbnZpcm9ubWVudCwgd2l0aCBhIGBwcm9jZXNzLm5leHRUaWNrYC5cbiAgICAgICAgLy8gVG8gc2VlIHRocm91Z2ggZmFrZSBOb2RlIGVudmlyb25tZW50czpcbiAgICAgICAgLy8gKiBNb2NoYSB0ZXN0IHJ1bm5lciAtIGV4cG9zZXMgYSBgcHJvY2Vzc2AgZ2xvYmFsIHdpdGhvdXQgYSBgbmV4dFRpY2tgXG4gICAgICAgIC8vICogQnJvd3NlcmlmeSAtIGV4cG9zZXMgYSBgcHJvY2Vzcy5uZXhUaWNrYCBmdW5jdGlvbiB0aGF0IHVzZXNcbiAgICAgICAgLy8gICBgc2V0VGltZW91dGAuIEluIHRoaXMgY2FzZSBgc2V0SW1tZWRpYXRlYCBpcyBwcmVmZXJyZWQgYmVjYXVzZVxuICAgICAgICAvLyAgICBpdCBpcyBmYXN0ZXIuIEJyb3dzZXJpZnkncyBgcHJvY2Vzcy50b1N0cmluZygpYCB5aWVsZHNcbiAgICAgICAgLy8gICBcIltvYmplY3QgT2JqZWN0XVwiLCB3aGlsZSBpbiBhIHJlYWwgTm9kZSBlbnZpcm9ubWVudFxuICAgICAgICAvLyAgIGBwcm9jZXNzLnRvU3RyaW5nKClgIHlpZWxkcyBcIltvYmplY3QgcHJvY2Vzc11cIi5cbiAgICAgICAgaXNOb2RlSlMgPSB0cnVlO1xuXG4gICAgICAgIHJlcXVlc3RUaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgICAgIH07XG5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAvLyBJbiBJRTEwLCBOb2RlLmpzIDAuOSssIG9yIGh0dHBzOi8vZ2l0aHViLmNvbS9Ob2JsZUpTL3NldEltbWVkaWF0ZVxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmVxdWVzdFRpY2sgPSBzZXRJbW1lZGlhdGUuYmluZCh3aW5kb3csIGZsdXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcXVlc3RUaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShmbHVzaCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgLy8gaHR0cDovL3d3dy5ub25ibG9ja2luZy5pby8yMDExLzA2L3dpbmRvd25leHR0aWNrLmh0bWxcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgLy8gQXQgbGVhc3QgU2FmYXJpIFZlcnNpb24gNi4wLjUgKDg1MzYuMzAuMSkgaW50ZXJtaXR0ZW50bHkgY2Fubm90IGNyZWF0ZVxuICAgICAgICAvLyB3b3JraW5nIG1lc3NhZ2UgcG9ydHMgdGhlIGZpcnN0IHRpbWUgYSBwYWdlIGxvYWRzLlxuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlcXVlc3RUaWNrID0gcmVxdWVzdFBvcnRUaWNrO1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgICAgICAgICAgIGZsdXNoKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXF1ZXN0UG9ydFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBPcGVyYSByZXF1aXJlcyB1cyB0byBwcm92aWRlIGEgbWVzc2FnZSBwYXlsb2FkLCByZWdhcmRsZXNzIG9mXG4gICAgICAgICAgICAvLyB3aGV0aGVyIHdlIHVzZSBpdC5cbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3RUaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmbHVzaCwgMCk7XG4gICAgICAgICAgICByZXF1ZXN0UG9ydFRpY2soKTtcbiAgICAgICAgfTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG9sZCBicm93c2Vyc1xuICAgICAgICByZXF1ZXN0VGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZmx1c2gsIDApO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBydW5zIGEgdGFzayBhZnRlciBhbGwgb3RoZXIgdGFza3MgaGF2ZSBiZWVuIHJ1blxuICAgIC8vIHRoaXMgaXMgdXNlZnVsIGZvciB1bmhhbmRsZWQgcmVqZWN0aW9uIHRyYWNraW5nIHRoYXQgbmVlZHMgdG8gaGFwcGVuXG4gICAgLy8gYWZ0ZXIgYWxsIGB0aGVuYGQgdGFza3MgaGF2ZSBiZWVuIHJ1bi5cbiAgICBuZXh0VGljay5ydW5BZnRlciA9IGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgIGxhdGVyUXVldWUucHVzaCh0YXNrKTtcbiAgICAgICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgICAgICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmVxdWVzdFRpY2soKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIG5leHRUaWNrO1xufSkoKTtcblxuLy8gQXR0ZW1wdCB0byBtYWtlIGdlbmVyaWNzIHNhZmUgaW4gdGhlIGZhY2Ugb2YgZG93bnN0cmVhbVxuLy8gbW9kaWZpY2F0aW9ucy5cbi8vIFRoZXJlIGlzIG5vIHNpdHVhdGlvbiB3aGVyZSB0aGlzIGlzIG5lY2Vzc2FyeS5cbi8vIElmIHlvdSBuZWVkIGEgc2VjdXJpdHkgZ3VhcmFudGVlLCB0aGVzZSBwcmltb3JkaWFscyBuZWVkIHRvIGJlXG4vLyBkZWVwbHkgZnJvemVuIGFueXdheSwgYW5kIGlmIHlvdSBkb27igJl0IG5lZWQgYSBzZWN1cml0eSBndWFyYW50ZWUsXG4vLyB0aGlzIGlzIGp1c3QgcGxhaW4gcGFyYW5vaWQuXG4vLyBIb3dldmVyLCB0aGlzICoqbWlnaHQqKiBoYXZlIHRoZSBuaWNlIHNpZGUtZWZmZWN0IG9mIHJlZHVjaW5nIHRoZSBzaXplIG9mXG4vLyB0aGUgbWluaWZpZWQgY29kZSBieSByZWR1Y2luZyB4LmNhbGwoKSB0byBtZXJlbHkgeCgpXG4vLyBTZWUgTWFyayBNaWxsZXLigJlzIGV4cGxhbmF0aW9uIG9mIHdoYXQgdGhpcyBkb2VzLlxuLy8gaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9Y29udmVudGlvbnM6c2FmZV9tZXRhX3Byb2dyYW1taW5nXG52YXIgY2FsbCA9IEZ1bmN0aW9uLmNhbGw7XG5mdW5jdGlvbiB1bmN1cnJ5VGhpcyhmKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwuYXBwbHkoZiwgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuLy8gVGhpcyBpcyBlcXVpdmFsZW50LCBidXQgc2xvd2VyOlxuLy8gdW5jdXJyeVRoaXMgPSBGdW5jdGlvbl9iaW5kLmJpbmQoRnVuY3Rpb25fYmluZC5jYWxsKTtcbi8vIGh0dHA6Ly9qc3BlcmYuY29tL3VuY3Vycnl0aGlzXG5cbnZhciBhcnJheV9zbGljZSA9IHVuY3VycnlUaGlzKEFycmF5LnByb3RvdHlwZS5zbGljZSk7XG5cbnZhciBhcnJheV9yZWR1Y2UgPSB1bmN1cnJ5VGhpcyhcbiAgICBBcnJheS5wcm90b3R5cGUucmVkdWNlIHx8IGZ1bmN0aW9uIChjYWxsYmFjaywgYmFzaXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICAvLyBjb25jZXJuaW5nIHRoZSBpbml0aWFsIHZhbHVlLCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBzZWVrIHRvIHRoZSBmaXJzdCB2YWx1ZSBpbiB0aGUgYXJyYXksIGFjY291bnRpbmdcbiAgICAgICAgICAgIC8vIGZvciB0aGUgcG9zc2liaWxpdHkgdGhhdCBpcyBpcyBhIHNwYXJzZSBhcnJheVxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCBpbiB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2lzID0gdGhpc1tpbmRleCsrXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgrK2luZGV4ID49IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAoMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVkdWNlXG4gICAgICAgIGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgLy8gYWNjb3VudCBmb3IgdGhlIHBvc3NpYmlsaXR5IHRoYXQgdGhlIGFycmF5IGlzIHNwYXJzZVxuICAgICAgICAgICAgaWYgKGluZGV4IGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICBiYXNpcyA9IGNhbGxiYWNrKGJhc2lzLCB0aGlzW2luZGV4XSwgaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNpcztcbiAgICB9XG4pO1xuXG52YXIgYXJyYXlfaW5kZXhPZiA9IHVuY3VycnlUaGlzKFxuICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mIHx8IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBub3QgYSB2ZXJ5IGdvb2Qgc2hpbSwgYnV0IGdvb2QgZW5vdWdoIGZvciBvdXIgb25lIHVzZSBvZiBpdFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4pO1xuXG52YXIgYXJyYXlfbWFwID0gdW5jdXJyeVRoaXMoXG4gICAgQXJyYXkucHJvdG90eXBlLm1hcCB8fCBmdW5jdGlvbiAoY2FsbGJhY2ssIHRoaXNwKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIGNvbGxlY3QgPSBbXTtcbiAgICAgICAgYXJyYXlfcmVkdWNlKHNlbGYsIGZ1bmN0aW9uICh1bmRlZmluZWQsIHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgY29sbGVjdC5wdXNoKGNhbGxiYWNrLmNhbGwodGhpc3AsIHZhbHVlLCBpbmRleCwgc2VsZikpO1xuICAgICAgICB9LCB2b2lkIDApO1xuICAgICAgICByZXR1cm4gY29sbGVjdDtcbiAgICB9XG4pO1xuXG52YXIgb2JqZWN0X2NyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gKHByb3RvdHlwZSkge1xuICAgIGZ1bmN0aW9uIFR5cGUoKSB7IH1cbiAgICBUeXBlLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICByZXR1cm4gbmV3IFR5cGUoKTtcbn07XG5cbnZhciBvYmplY3RfZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgfHwgZnVuY3Rpb24gKG9iaiwgcHJvcCwgZGVzY3JpcHRvcikge1xuICAgIG9ialtwcm9wXSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBvYmplY3RfaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxudmFyIG9iamVjdF9rZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0X2hhc093blByb3BlcnR5KG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG59O1xuXG52YXIgb2JqZWN0X3RvU3RyaW5nID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBPYmplY3QodmFsdWUpO1xufVxuXG4vLyBnZW5lcmF0b3IgcmVsYXRlZCBzaGltc1xuXG4vLyBGSVhNRTogUmVtb3ZlIHRoaXMgZnVuY3Rpb24gb25jZSBFUzYgZ2VuZXJhdG9ycyBhcmUgaW4gU3BpZGVyTW9ua2V5LlxuZnVuY3Rpb24gaXNTdG9wSXRlcmF0aW9uKGV4Y2VwdGlvbikge1xuICAgIHJldHVybiAoXG4gICAgICAgIG9iamVjdF90b1N0cmluZyhleGNlcHRpb24pID09PSBcIltvYmplY3QgU3RvcEl0ZXJhdGlvbl1cIiB8fFxuICAgICAgICBleGNlcHRpb24gaW5zdGFuY2VvZiBRUmV0dXJuVmFsdWVcbiAgICApO1xufVxuXG4vLyBGSVhNRTogUmVtb3ZlIHRoaXMgaGVscGVyIGFuZCBRLnJldHVybiBvbmNlIEVTNiBnZW5lcmF0b3JzIGFyZSBpblxuLy8gU3BpZGVyTW9ua2V5LlxudmFyIFFSZXR1cm5WYWx1ZTtcbmlmICh0eXBlb2YgUmV0dXJuVmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBRUmV0dXJuVmFsdWUgPSBSZXR1cm5WYWx1ZTtcbn0gZWxzZSB7XG4gICAgUVJldHVyblZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9O1xufVxuXG4vLyBsb25nIHN0YWNrIHRyYWNlc1xuXG52YXIgU1RBQ0tfSlVNUF9TRVBBUkFUT1IgPSBcIkZyb20gcHJldmlvdXMgZXZlbnQ6XCI7XG5cbmZ1bmN0aW9uIG1ha2VTdGFja1RyYWNlTG9uZyhlcnJvciwgcHJvbWlzZSkge1xuICAgIC8vIElmIHBvc3NpYmxlLCB0cmFuc2Zvcm0gdGhlIGVycm9yIHN0YWNrIHRyYWNlIGJ5IHJlbW92aW5nIE5vZGUgYW5kIFFcbiAgICAvLyBjcnVmdCwgdGhlbiBjb25jYXRlbmF0aW5nIHdpdGggdGhlIHN0YWNrIHRyYWNlIG9mIGBwcm9taXNlYC4gU2VlICM1Ny5cbiAgICBpZiAoaGFzU3RhY2tzICYmXG4gICAgICAgIHByb21pc2Uuc3RhY2sgJiZcbiAgICAgICAgdHlwZW9mIGVycm9yID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIGVycm9yICE9PSBudWxsICYmXG4gICAgICAgIGVycm9yLnN0YWNrXG4gICAgKSB7XG4gICAgICAgIHZhciBzdGFja3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgcCA9IHByb21pc2U7ICEhcDsgcCA9IHAuc291cmNlKSB7XG4gICAgICAgICAgICBpZiAocC5zdGFjayAmJiAoIWVycm9yLl9fbWluaW11bVN0YWNrQ291bnRlcl9fIHx8IGVycm9yLl9fbWluaW11bVN0YWNrQ291bnRlcl9fID4gcC5zdGFja0NvdW50ZXIpKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0X2RlZmluZVByb3BlcnR5KGVycm9yLCBcIl9fbWluaW11bVN0YWNrQ291bnRlcl9fXCIsIHt2YWx1ZTogcC5zdGFja0NvdW50ZXIsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgIHN0YWNrcy51bnNoaWZ0KHAuc3RhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0YWNrcy51bnNoaWZ0KGVycm9yLnN0YWNrKTtcblxuICAgICAgICB2YXIgY29uY2F0ZWRTdGFja3MgPSBzdGFja3Muam9pbihcIlxcblwiICsgU1RBQ0tfSlVNUF9TRVBBUkFUT1IgKyBcIlxcblwiKTtcbiAgICAgICAgdmFyIHN0YWNrID0gZmlsdGVyU3RhY2tTdHJpbmcoY29uY2F0ZWRTdGFja3MpO1xuICAgICAgICBvYmplY3RfZGVmaW5lUHJvcGVydHkoZXJyb3IsIFwic3RhY2tcIiwge3ZhbHVlOiBzdGFjaywgY29uZmlndXJhYmxlOiB0cnVlfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJTdGFja1N0cmluZyhzdGFja1N0cmluZykge1xuICAgIHZhciBsaW5lcyA9IHN0YWNrU3RyaW5nLnNwbGl0KFwiXFxuXCIpO1xuICAgIHZhciBkZXNpcmVkTGluZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBsaW5lID0gbGluZXNbaV07XG5cbiAgICAgICAgaWYgKCFpc0ludGVybmFsRnJhbWUobGluZSkgJiYgIWlzTm9kZUZyYW1lKGxpbmUpICYmIGxpbmUpIHtcbiAgICAgICAgICAgIGRlc2lyZWRMaW5lcy5wdXNoKGxpbmUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZXNpcmVkTGluZXMuam9pbihcIlxcblwiKTtcbn1cblxuZnVuY3Rpb24gaXNOb2RlRnJhbWUoc3RhY2tMaW5lKSB7XG4gICAgcmV0dXJuIHN0YWNrTGluZS5pbmRleE9mKFwiKG1vZHVsZS5qczpcIikgIT09IC0xIHx8XG4gICAgICAgICAgIHN0YWNrTGluZS5pbmRleE9mKFwiKG5vZGUuanM6XCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0RmlsZU5hbWVBbmRMaW5lTnVtYmVyKHN0YWNrTGluZSkge1xuICAgIC8vIE5hbWVkIGZ1bmN0aW9uczogXCJhdCBmdW5jdGlvbk5hbWUgKGZpbGVuYW1lOmxpbmVOdW1iZXI6Y29sdW1uTnVtYmVyKVwiXG4gICAgLy8gSW4gSUUxMCBmdW5jdGlvbiBuYW1lIGNhbiBoYXZlIHNwYWNlcyAoXCJBbm9ueW1vdXMgZnVuY3Rpb25cIikgT19vXG4gICAgdmFyIGF0dGVtcHQxID0gL2F0IC4rIFxcKCguKyk6KFxcZCspOig/OlxcZCspXFwpJC8uZXhlYyhzdGFja0xpbmUpO1xuICAgIGlmIChhdHRlbXB0MSkge1xuICAgICAgICByZXR1cm4gW2F0dGVtcHQxWzFdLCBOdW1iZXIoYXR0ZW1wdDFbMl0pXTtcbiAgICB9XG5cbiAgICAvLyBBbm9ueW1vdXMgZnVuY3Rpb25zOiBcImF0IGZpbGVuYW1lOmxpbmVOdW1iZXI6Y29sdW1uTnVtYmVyXCJcbiAgICB2YXIgYXR0ZW1wdDIgPSAvYXQgKFteIF0rKTooXFxkKyk6KD86XFxkKykkLy5leGVjKHN0YWNrTGluZSk7XG4gICAgaWYgKGF0dGVtcHQyKSB7XG4gICAgICAgIHJldHVybiBbYXR0ZW1wdDJbMV0sIE51bWJlcihhdHRlbXB0MlsyXSldO1xuICAgIH1cblxuICAgIC8vIEZpcmVmb3ggc3R5bGU6IFwiZnVuY3Rpb25AZmlsZW5hbWU6bGluZU51bWJlciBvciBAZmlsZW5hbWU6bGluZU51bWJlclwiXG4gICAgdmFyIGF0dGVtcHQzID0gLy4qQCguKyk6KFxcZCspJC8uZXhlYyhzdGFja0xpbmUpO1xuICAgIGlmIChhdHRlbXB0Mykge1xuICAgICAgICByZXR1cm4gW2F0dGVtcHQzWzFdLCBOdW1iZXIoYXR0ZW1wdDNbMl0pXTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzSW50ZXJuYWxGcmFtZShzdGFja0xpbmUpIHtcbiAgICB2YXIgZmlsZU5hbWVBbmRMaW5lTnVtYmVyID0gZ2V0RmlsZU5hbWVBbmRMaW5lTnVtYmVyKHN0YWNrTGluZSk7XG5cbiAgICBpZiAoIWZpbGVOYW1lQW5kTGluZU51bWJlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGZpbGVOYW1lID0gZmlsZU5hbWVBbmRMaW5lTnVtYmVyWzBdO1xuICAgIHZhciBsaW5lTnVtYmVyID0gZmlsZU5hbWVBbmRMaW5lTnVtYmVyWzFdO1xuXG4gICAgcmV0dXJuIGZpbGVOYW1lID09PSBxRmlsZU5hbWUgJiZcbiAgICAgICAgbGluZU51bWJlciA+PSBxU3RhcnRpbmdMaW5lICYmXG4gICAgICAgIGxpbmVOdW1iZXIgPD0gcUVuZGluZ0xpbmU7XG59XG5cbi8vIGRpc2NvdmVyIG93biBmaWxlIG5hbWUgYW5kIGxpbmUgbnVtYmVyIHJhbmdlIGZvciBmaWx0ZXJpbmcgc3RhY2tcbi8vIHRyYWNlc1xuZnVuY3Rpb24gY2FwdHVyZUxpbmUoKSB7XG4gICAgaWYgKCFoYXNTdGFja3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFyIGxpbmVzID0gZS5zdGFjay5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgdmFyIGZpcnN0TGluZSA9IGxpbmVzWzBdLmluZGV4T2YoXCJAXCIpID4gMCA/IGxpbmVzWzFdIDogbGluZXNbMl07XG4gICAgICAgIHZhciBmaWxlTmFtZUFuZExpbmVOdW1iZXIgPSBnZXRGaWxlTmFtZUFuZExpbmVOdW1iZXIoZmlyc3RMaW5lKTtcbiAgICAgICAgaWYgKCFmaWxlTmFtZUFuZExpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHFGaWxlTmFtZSA9IGZpbGVOYW1lQW5kTGluZU51bWJlclswXTtcbiAgICAgICAgcmV0dXJuIGZpbGVOYW1lQW5kTGluZU51bWJlclsxXTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZShjYWxsYmFjaywgbmFtZSwgYWx0ZXJuYXRpdmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlLndhcm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKG5hbWUgKyBcIiBpcyBkZXByZWNhdGVkLCB1c2UgXCIgKyBhbHRlcm5hdGl2ZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCIgaW5zdGVhZC5cIiwgbmV3IEVycm9yKFwiXCIpLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkoY2FsbGJhY2ssIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuLy8gZW5kIG9mIHNoaW1zXG4vLyBiZWdpbm5pbmcgb2YgcmVhbCB3b3JrXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHByb21pc2UgZm9yIGFuIGltbWVkaWF0ZSByZWZlcmVuY2UsIHBhc3NlcyBwcm9taXNlcyB0aHJvdWdoLCBvclxuICogY29lcmNlcyBwcm9taXNlcyBmcm9tIGRpZmZlcmVudCBzeXN0ZW1zLlxuICogQHBhcmFtIHZhbHVlIGltbWVkaWF0ZSByZWZlcmVuY2Ugb3IgcHJvbWlzZVxuICovXG5mdW5jdGlvbiBRKHZhbHVlKSB7XG4gICAgLy8gSWYgdGhlIG9iamVjdCBpcyBhbHJlYWR5IGEgUHJvbWlzZSwgcmV0dXJuIGl0IGRpcmVjdGx5LiAgVGhpcyBlbmFibGVzXG4gICAgLy8gdGhlIHJlc29sdmUgZnVuY3Rpb24gdG8gYm90aCBiZSB1c2VkIHRvIGNyZWF0ZWQgcmVmZXJlbmNlcyBmcm9tIG9iamVjdHMsXG4gICAgLy8gYnV0IHRvIHRvbGVyYWJseSBjb2VyY2Ugbm9uLXByb21pc2VzIHRvIHByb21pc2VzLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIGFzc2ltaWxhdGUgdGhlbmFibGVzXG4gICAgaWYgKGlzUHJvbWlzZUFsaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gY29lcmNlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVsZmlsbCh2YWx1ZSk7XG4gICAgfVxufVxuUS5yZXNvbHZlID0gUTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIHRhc2sgaW4gYSBmdXR1cmUgdHVybiBvZiB0aGUgZXZlbnQgbG9vcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRhc2tcbiAqL1xuUS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4vKipcbiAqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IGxvbmcgc3RhY2sgdHJhY2VzIHdpbGwgYmUgb25cbiAqL1xuUS5sb25nU3RhY2tTdXBwb3J0ID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGNvdW50ZXIgaXMgdXNlZCB0byBkZXRlcm1pbmUgdGhlIHN0b3BwaW5nIHBvaW50IGZvciBidWlsZGluZ1xuICogbG9uZyBzdGFjayB0cmFjZXMuIEluIG1ha2VTdGFja1RyYWNlTG9uZyB3ZSB3YWxrIGJhY2t3YXJkcyB0aHJvdWdoXG4gKiB0aGUgbGlua2VkIGxpc3Qgb2YgcHJvbWlzZXMsIG9ubHkgc3RhY2tzIHdoaWNoIHdlcmUgY3JlYXRlZCBiZWZvcmVcbiAqIHRoZSByZWplY3Rpb24gYXJlIGNvbmNhdGVuYXRlZC5cbiAqL1xudmFyIGxvbmdTdGFja0NvdW50ZXIgPSAxO1xuXG4vLyBlbmFibGUgbG9uZyBzdGFja3MgaWYgUV9ERUJVRyBpcyBzZXRcbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52LlFfREVCVUcpIHtcbiAgICBRLmxvbmdTdGFja1N1cHBvcnQgPSB0cnVlO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSB7cHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0fSBvYmplY3QuXG4gKlxuICogYHJlc29sdmVgIGlzIGEgY2FsbGJhY2sgdG8gaW52b2tlIHdpdGggYSBtb3JlIHJlc29sdmVkIHZhbHVlIGZvciB0aGVcbiAqIHByb21pc2UuIFRvIGZ1bGZpbGwgdGhlIHByb21pc2UsIGludm9rZSBgcmVzb2x2ZWAgd2l0aCBhbnkgdmFsdWUgdGhhdCBpc1xuICogbm90IGEgdGhlbmFibGUuIFRvIHJlamVjdCB0aGUgcHJvbWlzZSwgaW52b2tlIGByZXNvbHZlYCB3aXRoIGEgcmVqZWN0ZWRcbiAqIHRoZW5hYmxlLCBvciBpbnZva2UgYHJlamVjdGAgd2l0aCB0aGUgcmVhc29uIGRpcmVjdGx5LiBUbyByZXNvbHZlIHRoZVxuICogcHJvbWlzZSB0byBhbm90aGVyIHRoZW5hYmxlLCB0aHVzIHB1dHRpbmcgaXQgaW4gdGhlIHNhbWUgc3RhdGUsIGludm9rZVxuICogYHJlc29sdmVgIHdpdGggdGhhdCBvdGhlciB0aGVuYWJsZS5cbiAqL1xuUS5kZWZlciA9IGRlZmVyO1xuZnVuY3Rpb24gZGVmZXIoKSB7XG4gICAgLy8gaWYgXCJtZXNzYWdlc1wiIGlzIGFuIFwiQXJyYXlcIiwgdGhhdCBpbmRpY2F0ZXMgdGhhdCB0aGUgcHJvbWlzZSBoYXMgbm90IHlldFxuICAgIC8vIGJlZW4gcmVzb2x2ZWQuICBJZiBpdCBpcyBcInVuZGVmaW5lZFwiLCBpdCBoYXMgYmVlbiByZXNvbHZlZC4gIEVhY2hcbiAgICAvLyBlbGVtZW50IG9mIHRoZSBtZXNzYWdlcyBhcnJheSBpcyBpdHNlbGYgYW4gYXJyYXkgb2YgY29tcGxldGUgYXJndW1lbnRzIHRvXG4gICAgLy8gZm9yd2FyZCB0byB0aGUgcmVzb2x2ZWQgcHJvbWlzZS4gIFdlIGNvZXJjZSB0aGUgcmVzb2x1dGlvbiB2YWx1ZSB0byBhXG4gICAgLy8gcHJvbWlzZSB1c2luZyB0aGUgYHJlc29sdmVgIGZ1bmN0aW9uIGJlY2F1c2UgaXQgaGFuZGxlcyBib3RoIGZ1bGx5XG4gICAgLy8gbm9uLXRoZW5hYmxlIHZhbHVlcyBhbmQgb3RoZXIgdGhlbmFibGVzIGdyYWNlZnVsbHkuXG4gICAgdmFyIG1lc3NhZ2VzID0gW10sIHByb2dyZXNzTGlzdGVuZXJzID0gW10sIHJlc29sdmVkUHJvbWlzZTtcblxuICAgIHZhciBkZWZlcnJlZCA9IG9iamVjdF9jcmVhdGUoZGVmZXIucHJvdG90eXBlKTtcbiAgICB2YXIgcHJvbWlzZSA9IG9iamVjdF9jcmVhdGUoUHJvbWlzZS5wcm90b3R5cGUpO1xuXG4gICAgcHJvbWlzZS5wcm9taXNlRGlzcGF0Y2ggPSBmdW5jdGlvbiAocmVzb2x2ZSwgb3AsIG9wZXJhbmRzKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKG1lc3NhZ2VzKSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKGFyZ3MpO1xuICAgICAgICAgICAgaWYgKG9wID09PSBcIndoZW5cIiAmJiBvcGVyYW5kc1sxXSkgeyAvLyBwcm9ncmVzcyBvcGVyYW5kXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NMaXN0ZW5lcnMucHVzaChvcGVyYW5kc1sxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlZFByb21pc2UucHJvbWlzZURpc3BhdGNoLmFwcGx5KHJlc29sdmVkUHJvbWlzZSwgYXJncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBYWFggZGVwcmVjYXRlZFxuICAgIHByb21pc2UudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmVhcmVyVmFsdWUgPSBuZWFyZXIocmVzb2x2ZWRQcm9taXNlKTtcbiAgICAgICAgaWYgKGlzUHJvbWlzZShuZWFyZXJWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJlc29sdmVkUHJvbWlzZSA9IG5lYXJlclZhbHVlOyAvLyBzaG9ydGVuIGNoYWluXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5lYXJlclZhbHVlO1xuICAgIH07XG5cbiAgICBwcm9taXNlLmluc3BlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghcmVzb2x2ZWRQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJwZW5kaW5nXCIgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb2x2ZWRQcm9taXNlLmluc3BlY3QoKTtcbiAgICB9O1xuXG4gICAgaWYgKFEubG9uZ1N0YWNrU3VwcG9ydCAmJiBoYXNTdGFja3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBkb24ndCB0cnkgdG8gdXNlIGBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZWAgb3IgdHJhbnNmZXIgdGhlXG4gICAgICAgICAgICAvLyBhY2Nlc3NvciBhcm91bmQ7IHRoYXQgY2F1c2VzIG1lbW9yeSBsZWFrcyBhcyBwZXIgR0gtMTExLiBKdXN0XG4gICAgICAgICAgICAvLyByZWlmeSB0aGUgc3RhY2sgdHJhY2UgYXMgYSBzdHJpbmcgQVNBUC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBBdCB0aGUgc2FtZSB0aW1lLCBjdXQgb2ZmIHRoZSBmaXJzdCBsaW5lOyBpdCdzIGFsd2F5cyBqdXN0XG4gICAgICAgICAgICAvLyBcIltvYmplY3QgUHJvbWlzZV1cXG5cIiwgYXMgcGVyIHRoZSBgdG9TdHJpbmdgLlxuICAgICAgICAgICAgcHJvbWlzZS5zdGFjayA9IGUuc3RhY2suc3Vic3RyaW5nKGUuc3RhY2suaW5kZXhPZihcIlxcblwiKSArIDEpO1xuICAgICAgICAgICAgcHJvbWlzZS5zdGFja0NvdW50ZXIgPSBsb25nU3RhY2tDb3VudGVyKys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBOT1RFOiB3ZSBkbyB0aGUgY2hlY2tzIGZvciBgcmVzb2x2ZWRQcm9taXNlYCBpbiBlYWNoIG1ldGhvZCwgaW5zdGVhZCBvZlxuICAgIC8vIGNvbnNvbGlkYXRpbmcgdGhlbSBpbnRvIGBiZWNvbWVgLCBzaW5jZSBvdGhlcndpc2Ugd2UnZCBjcmVhdGUgbmV3XG4gICAgLy8gcHJvbWlzZXMgd2l0aCB0aGUgbGluZXMgYGJlY29tZSh3aGF0ZXZlcih2YWx1ZSkpYC4gU2VlIGUuZy4gR0gtMjUyLlxuXG4gICAgZnVuY3Rpb24gYmVjb21lKG5ld1Byb21pc2UpIHtcbiAgICAgICAgcmVzb2x2ZWRQcm9taXNlID0gbmV3UHJvbWlzZTtcblxuICAgICAgICBpZiAoUS5sb25nU3RhY2tTdXBwb3J0ICYmIGhhc1N0YWNrcykge1xuICAgICAgICAgICAgLy8gT25seSBob2xkIGEgcmVmZXJlbmNlIHRvIHRoZSBuZXcgcHJvbWlzZSBpZiBsb25nIHN0YWNrc1xuICAgICAgICAgICAgLy8gYXJlIGVuYWJsZWQgdG8gcmVkdWNlIG1lbW9yeSB1c2FnZVxuICAgICAgICAgICAgcHJvbWlzZS5zb3VyY2UgPSBuZXdQcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJyYXlfcmVkdWNlKG1lc3NhZ2VzLCBmdW5jdGlvbiAodW5kZWZpbmVkLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBuZXdQcm9taXNlLnByb21pc2VEaXNwYXRjaC5hcHBseShuZXdQcm9taXNlLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCB2b2lkIDApO1xuXG4gICAgICAgIG1lc3NhZ2VzID0gdm9pZCAwO1xuICAgICAgICBwcm9ncmVzc0xpc3RlbmVycyA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICBkZWZlcnJlZC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChyZXNvbHZlZFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJlY29tZShRKHZhbHVlKSk7XG4gICAgfTtcblxuICAgIGRlZmVycmVkLmZ1bGZpbGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHJlc29sdmVkUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYmVjb21lKGZ1bGZpbGwodmFsdWUpKTtcbiAgICB9O1xuICAgIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgaWYgKHJlc29sdmVkUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYmVjb21lKHJlamVjdChyZWFzb24pKTtcbiAgICB9O1xuICAgIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uIChwcm9ncmVzcykge1xuICAgICAgICBpZiAocmVzb2x2ZWRQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcnJheV9yZWR1Y2UocHJvZ3Jlc3NMaXN0ZW5lcnMsIGZ1bmN0aW9uICh1bmRlZmluZWQsIHByb2dyZXNzTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzTGlzdGVuZXIocHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHZvaWQgMCk7XG4gICAgfTtcblxuICAgIHJldHVybiBkZWZlcnJlZDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgTm9kZS1zdHlsZSBjYWxsYmFjayB0aGF0IHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIGRlZmVycmVkXG4gKiBwcm9taXNlLlxuICogQHJldHVybnMgYSBub2RlYmFja1xuICovXG5kZWZlci5wcm90b3R5cGUubWFrZU5vZGVSZXNvbHZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBzZWxmLnJlamVjdChlcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIHNlbGYucmVzb2x2ZShhcnJheV9zbGljZShhcmd1bWVudHMsIDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuLyoqXG4gKiBAcGFyYW0gcmVzb2x2ZXIge0Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBub3RoaW5nIGFuZCBhY2NlcHRzXG4gKiB0aGUgcmVzb2x2ZSwgcmVqZWN0LCBhbmQgbm90aWZ5IGZ1bmN0aW9ucyBmb3IgYSBkZWZlcnJlZC5cbiAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IG1heSBiZSByZXNvbHZlZCB3aXRoIHRoZSBnaXZlbiByZXNvbHZlIGFuZCByZWplY3RcbiAqIGZ1bmN0aW9ucywgb3IgcmVqZWN0ZWQgYnkgYSB0aHJvd24gZXhjZXB0aW9uIGluIHJlc29sdmVyXG4gKi9cblEuUHJvbWlzZSA9IHByb21pc2U7IC8vIEVTNlxuUS5wcm9taXNlID0gcHJvbWlzZTtcbmZ1bmN0aW9uIHByb21pc2UocmVzb2x2ZXIpIHtcbiAgICBpZiAodHlwZW9mIHJlc29sdmVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInJlc29sdmVyIG11c3QgYmUgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzb2x2ZXIoZGVmZXJyZWQucmVzb2x2ZSwgZGVmZXJyZWQucmVqZWN0LCBkZWZlcnJlZC5ub3RpZnkpO1xuICAgIH0gY2F0Y2ggKHJlYXNvbikge1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cbnByb21pc2UucmFjZSA9IHJhY2U7IC8vIEVTNlxucHJvbWlzZS5hbGwgPSBhbGw7IC8vIEVTNlxucHJvbWlzZS5yZWplY3QgPSByZWplY3Q7IC8vIEVTNlxucHJvbWlzZS5yZXNvbHZlID0gUTsgLy8gRVM2XG5cbi8vIFhYWCBleHBlcmltZW50YWwuICBUaGlzIG1ldGhvZCBpcyBhIHdheSB0byBkZW5vdGUgdGhhdCBhIGxvY2FsIHZhbHVlIGlzXG4vLyBzZXJpYWxpemFibGUgYW5kIHNob3VsZCBiZSBpbW1lZGlhdGVseSBkaXNwYXRjaGVkIHRvIGEgcmVtb3RlIHVwb24gcmVxdWVzdCxcbi8vIGluc3RlYWQgb2YgcGFzc2luZyBhIHJlZmVyZW5jZS5cblEucGFzc0J5Q29weSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAvL2ZyZWV6ZShvYmplY3QpO1xuICAgIC8vcGFzc0J5Q29waWVzLnNldChvYmplY3QsIHRydWUpO1xuICAgIHJldHVybiBvYmplY3Q7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5wYXNzQnlDb3B5ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vZnJlZXplKG9iamVjdCk7XG4gICAgLy9wYXNzQnlDb3BpZXMuc2V0KG9iamVjdCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIElmIHR3byBwcm9taXNlcyBldmVudHVhbGx5IGZ1bGZpbGwgdG8gdGhlIHNhbWUgdmFsdWUsIHByb21pc2VzIHRoYXQgdmFsdWUsXG4gKiBidXQgb3RoZXJ3aXNlIHJlamVjdHMuXG4gKiBAcGFyYW0geCB7QW55Kn1cbiAqIEBwYXJhbSB5IHtBbnkqfVxuICogQHJldHVybnMge0FueSp9IGEgcHJvbWlzZSBmb3IgeCBhbmQgeSBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgYnV0IGEgcmVqZWN0aW9uXG4gKiBvdGhlcndpc2UuXG4gKlxuICovXG5RLmpvaW4gPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHJldHVybiBRKHgpLmpvaW4oeSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgICByZXR1cm4gUShbdGhpcywgdGhhdF0pLnNwcmVhZChmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICAgICAgLy8gVE9ETzogXCI9PT1cIiBzaG91bGQgYmUgT2JqZWN0LmlzIG9yIGVxdWl2XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlEgY2FuJ3Qgam9pbjogbm90IHRoZSBzYW1lOiBcIiArIHggKyBcIiBcIiArIHkpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgZmlyc3Qgb2YgYW4gYXJyYXkgb2YgcHJvbWlzZXMgdG8gYmVjb21lIHNldHRsZWQuXG4gKiBAcGFyYW0gYW5zd2VycyB7QXJyYXlbQW55Kl19IHByb21pc2VzIHRvIHJhY2VcbiAqIEByZXR1cm5zIHtBbnkqfSB0aGUgZmlyc3QgcHJvbWlzZSB0byBiZSBzZXR0bGVkXG4gKi9cblEucmFjZSA9IHJhY2U7XG5mdW5jdGlvbiByYWNlKGFuc3dlclBzKSB7XG4gICAgcmV0dXJuIHByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAvLyBTd2l0Y2ggdG8gdGhpcyBvbmNlIHdlIGNhbiBhc3N1bWUgYXQgbGVhc3QgRVM1XG4gICAgICAgIC8vIGFuc3dlclBzLmZvckVhY2goZnVuY3Rpb24gKGFuc3dlclApIHtcbiAgICAgICAgLy8gICAgIFEoYW5zd2VyUCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAvLyB9KTtcbiAgICAgICAgLy8gVXNlIHRoaXMgaW4gdGhlIG1lYW50aW1lXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhbnN3ZXJQcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgUShhbnN3ZXJQc1tpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cblByb21pc2UucHJvdG90eXBlLnJhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihRLnJhY2UpO1xufTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgUHJvbWlzZSB3aXRoIGEgcHJvbWlzZSBkZXNjcmlwdG9yIG9iamVjdCBhbmQgb3B0aW9uYWwgZmFsbGJhY2tcbiAqIGZ1bmN0aW9uLiAgVGhlIGRlc2NyaXB0b3IgY29udGFpbnMgbWV0aG9kcyBsaWtlIHdoZW4ocmVqZWN0ZWQpLCBnZXQobmFtZSksXG4gKiBzZXQobmFtZSwgdmFsdWUpLCBwb3N0KG5hbWUsIGFyZ3MpLCBhbmQgZGVsZXRlKG5hbWUpLCB3aGljaCBhbGxcbiAqIHJldHVybiBlaXRoZXIgYSB2YWx1ZSwgYSBwcm9taXNlIGZvciBhIHZhbHVlLCBvciBhIHJlamVjdGlvbi4gIFRoZSBmYWxsYmFja1xuICogYWNjZXB0cyB0aGUgb3BlcmF0aW9uIG5hbWUsIGEgcmVzb2x2ZXIsIGFuZCBhbnkgZnVydGhlciBhcmd1bWVudHMgdGhhdCB3b3VsZFxuICogaGF2ZSBiZWVuIGZvcndhcmRlZCB0byB0aGUgYXBwcm9wcmlhdGUgbWV0aG9kIGFib3ZlIGhhZCBhIG1ldGhvZCBiZWVuXG4gKiBwcm92aWRlZCB3aXRoIHRoZSBwcm9wZXIgbmFtZS4gIFRoZSBBUEkgbWFrZXMgbm8gZ3VhcmFudGVlcyBhYm91dCB0aGUgbmF0dXJlXG4gKiBvZiB0aGUgcmV0dXJuZWQgb2JqZWN0LCBhcGFydCBmcm9tIHRoYXQgaXQgaXMgdXNhYmxlIHdoZXJlZXZlciBwcm9taXNlcyBhcmVcbiAqIGJvdWdodCBhbmQgc29sZC5cbiAqL1xuUS5tYWtlUHJvbWlzZSA9IFByb21pc2U7XG5mdW5jdGlvbiBQcm9taXNlKGRlc2NyaXB0b3IsIGZhbGxiYWNrLCBpbnNwZWN0KSB7XG4gICAgaWYgKGZhbGxiYWNrID09PSB2b2lkIDApIHtcbiAgICAgICAgZmFsbGJhY2sgPSBmdW5jdGlvbiAob3ApIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwiUHJvbWlzZSBkb2VzIG5vdCBzdXBwb3J0IG9wZXJhdGlvbjogXCIgKyBvcFxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpbnNwZWN0ID09PSB2b2lkIDApIHtcbiAgICAgICAgaW5zcGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7c3RhdGU6IFwidW5rbm93blwifTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcHJvbWlzZSA9IG9iamVjdF9jcmVhdGUoUHJvbWlzZS5wcm90b3R5cGUpO1xuXG4gICAgcHJvbWlzZS5wcm9taXNlRGlzcGF0Y2ggPSBmdW5jdGlvbiAocmVzb2x2ZSwgb3AsIGFyZ3MpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yW29wXSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGRlc2NyaXB0b3Jbb3BdLmFwcGx5KHByb21pc2UsIGFyZ3MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxsYmFjay5jYWxsKHByb21pc2UsIG9wLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb21pc2UuaW5zcGVjdCA9IGluc3BlY3Q7XG5cbiAgICAvLyBYWFggZGVwcmVjYXRlZCBgdmFsdWVPZmAgYW5kIGBleGNlcHRpb25gIHN1cHBvcnRcbiAgICBpZiAoaW5zcGVjdCkge1xuICAgICAgICB2YXIgaW5zcGVjdGVkID0gaW5zcGVjdCgpO1xuICAgICAgICBpZiAoaW5zcGVjdGVkLnN0YXRlID09PSBcInJlamVjdGVkXCIpIHtcbiAgICAgICAgICAgIHByb21pc2UuZXhjZXB0aW9uID0gaW5zcGVjdGVkLnJlYXNvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb21pc2UudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbnNwZWN0ZWQgPSBpbnNwZWN0KCk7XG4gICAgICAgICAgICBpZiAoaW5zcGVjdGVkLnN0YXRlID09PSBcInBlbmRpbmdcIiB8fFxuICAgICAgICAgICAgICAgIGluc3BlY3RlZC5zdGF0ZSA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5zcGVjdGVkLnZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IFByb21pc2VdXCI7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzZWQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICB2YXIgZG9uZSA9IGZhbHNlOyAgIC8vIGVuc3VyZSB0aGUgdW50cnVzdGVkIHByb21pc2UgbWFrZXMgYXQgbW9zdCBhXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaW5nbGUgY2FsbCB0byBvbmUgb2YgdGhlIGNhbGxiYWNrc1xuXG4gICAgZnVuY3Rpb24gX2Z1bGZpbGxlZCh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBmdWxmaWxsZWQgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bGZpbGxlZCh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfcmVqZWN0ZWQoZXhjZXB0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVqZWN0ZWQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgbWFrZVN0YWNrVHJhY2VMb25nKGV4Y2VwdGlvbiwgc2VsZik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3RlZChleGNlcHRpb24pO1xuICAgICAgICAgICAgfSBjYXRjaCAobmV3RXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXdFeGNlcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWplY3QoZXhjZXB0aW9uKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfcHJvZ3Jlc3NlZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHByb2dyZXNzZWQgPT09IFwiZnVuY3Rpb25cIiA/IHByb2dyZXNzZWQodmFsdWUpIDogdmFsdWU7XG4gICAgfVxuXG4gICAgUS5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYucHJvbWlzZURpc3BhdGNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcblxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShfZnVsZmlsbGVkKHZhbHVlKSk7XG4gICAgICAgIH0sIFwid2hlblwiLCBbZnVuY3Rpb24gKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcblxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShfcmVqZWN0ZWQoZXhjZXB0aW9uKSk7XG4gICAgICAgIH1dKTtcbiAgICB9KTtcblxuICAgIC8vIFByb2dyZXNzIHByb3BhZ2F0b3IgbmVlZCB0byBiZSBhdHRhY2hlZCBpbiB0aGUgY3VycmVudCB0aWNrLlxuICAgIHNlbGYucHJvbWlzZURpc3BhdGNoKHZvaWQgMCwgXCJ3aGVuXCIsIFt2b2lkIDAsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgIHZhciB0aHJldyA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBfcHJvZ3Jlc3NlZCh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocmV3ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChRLm9uZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBRLm9uZXJyb3IoZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRocmV3KSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5ub3RpZnkobmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG5RLnRhcCA9IGZ1bmN0aW9uIChwcm9taXNlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBRKHByb21pc2UpLnRhcChjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFdvcmtzIGFsbW9zdCBsaWtlIFwiZmluYWxseVwiLCBidXQgbm90IGNhbGxlZCBmb3IgcmVqZWN0aW9ucy5cbiAqIE9yaWdpbmFsIHJlc29sdXRpb24gdmFsdWUgaXMgcGFzc2VkIHRocm91Z2ggY2FsbGJhY2sgdW5hZmZlY3RlZC5cbiAqIENhbGxiYWNrIG1heSByZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCBiZSBhd2FpdGVkIGZvci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7US5Qcm9taXNlfVxuICogQGV4YW1wbGVcbiAqIGRvU29tZXRoaW5nKClcbiAqICAgLnRoZW4oLi4uKVxuICogICAudGFwKGNvbnNvbGUubG9nKVxuICogICAudGhlbiguLi4pO1xuICovXG5Qcm9taXNlLnByb3RvdHlwZS50YXAgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IFEoY2FsbGJhY2spO1xuXG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmZjYWxsKHZhbHVlKS50aGVuUmVzb2x2ZSh2YWx1ZSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVycyBhbiBvYnNlcnZlciBvbiBhIHByb21pc2UuXG4gKlxuICogR3VhcmFudGVlczpcbiAqXG4gKiAxLiB0aGF0IGZ1bGZpbGxlZCBhbmQgcmVqZWN0ZWQgd2lsbCBiZSBjYWxsZWQgb25seSBvbmNlLlxuICogMi4gdGhhdCBlaXRoZXIgdGhlIGZ1bGZpbGxlZCBjYWxsYmFjayBvciB0aGUgcmVqZWN0ZWQgY2FsbGJhY2sgd2lsbCBiZVxuICogICAgY2FsbGVkLCBidXQgbm90IGJvdGguXG4gKiAzLiB0aGF0IGZ1bGZpbGxlZCBhbmQgcmVqZWN0ZWQgd2lsbCBub3QgYmUgY2FsbGVkIGluIHRoaXMgdHVybi5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgICAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgdG8gb2JzZXJ2ZVxuICogQHBhcmFtIGZ1bGZpbGxlZCAgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdpdGggdGhlIGZ1bGZpbGxlZCB2YWx1ZVxuICogQHBhcmFtIHJlamVjdGVkICAgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdpdGggdGhlIHJlamVjdGlvbiBleGNlcHRpb25cbiAqIEBwYXJhbSBwcm9ncmVzc2VkIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBhbnkgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uc1xuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGludm9rZWQgY2FsbGJhY2tcbiAqL1xuUS53aGVuID0gd2hlbjtcbmZ1bmN0aW9uIHdoZW4odmFsdWUsIGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzZWQpIHtcbiAgICByZXR1cm4gUSh2YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkLCBwcm9ncmVzc2VkKTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUudGhlblJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlOyB9KTtcbn07XG5cblEudGhlblJlc29sdmUgPSBmdW5jdGlvbiAocHJvbWlzZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gUShwcm9taXNlKS50aGVuUmVzb2x2ZSh2YWx1ZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuUmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyByZWFzb247IH0pO1xufTtcblxuUS50aGVuUmVqZWN0ID0gZnVuY3Rpb24gKHByb21pc2UsIHJlYXNvbikge1xuICAgIHJldHVybiBRKHByb21pc2UpLnRoZW5SZWplY3QocmVhc29uKTtcbn07XG5cbi8qKlxuICogSWYgYW4gb2JqZWN0IGlzIG5vdCBhIHByb21pc2UsIGl0IGlzIGFzIFwibmVhclwiIGFzIHBvc3NpYmxlLlxuICogSWYgYSBwcm9taXNlIGlzIHJlamVjdGVkLCBpdCBpcyBhcyBcIm5lYXJcIiBhcyBwb3NzaWJsZSB0b28uXG4gKiBJZiBpdOKAmXMgYSBmdWxmaWxsZWQgcHJvbWlzZSwgdGhlIGZ1bGZpbGxtZW50IHZhbHVlIGlzIG5lYXJlci5cbiAqIElmIGl04oCZcyBhIGRlZmVycmVkIHByb21pc2UgYW5kIHRoZSBkZWZlcnJlZCBoYXMgYmVlbiByZXNvbHZlZCwgdGhlXG4gKiByZXNvbHV0aW9uIGlzIFwibmVhcmVyXCIuXG4gKiBAcGFyYW0gb2JqZWN0XG4gKiBAcmV0dXJucyBtb3N0IHJlc29sdmVkIChuZWFyZXN0KSBmb3JtIG9mIHRoZSBvYmplY3RcbiAqL1xuXG4vLyBYWFggc2hvdWxkIHdlIHJlLWRvIHRoaXM/XG5RLm5lYXJlciA9IG5lYXJlcjtcbmZ1bmN0aW9uIG5lYXJlcih2YWx1ZSkge1xuICAgIGlmIChpc1Byb21pc2UodmFsdWUpKSB7XG4gICAgICAgIHZhciBpbnNwZWN0ZWQgPSB2YWx1ZS5pbnNwZWN0KCk7XG4gICAgICAgIGlmIChpbnNwZWN0ZWQuc3RhdGUgPT09IFwiZnVsZmlsbGVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnNwZWN0ZWQudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIG9iamVjdCBpcyBhIHByb21pc2UuXG4gKiBPdGhlcndpc2UgaXQgaXMgYSBmdWxmaWxsZWQgdmFsdWUuXG4gKi9cblEuaXNQcm9taXNlID0gaXNQcm9taXNlO1xuZnVuY3Rpb24gaXNQcm9taXNlKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBQcm9taXNlO1xufVxuXG5RLmlzUHJvbWlzZUFsaWtlID0gaXNQcm9taXNlQWxpa2U7XG5mdW5jdGlvbiBpc1Byb21pc2VBbGlrZShvYmplY3QpIHtcbiAgICByZXR1cm4gaXNPYmplY3Qob2JqZWN0KSAmJiB0eXBlb2Ygb2JqZWN0LnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYSBwZW5kaW5nIHByb21pc2UsIG1lYW5pbmcgbm90XG4gKiBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG4gKi9cblEuaXNQZW5kaW5nID0gaXNQZW5kaW5nO1xuZnVuY3Rpb24gaXNQZW5kaW5nKG9iamVjdCkge1xuICAgIHJldHVybiBpc1Byb21pc2Uob2JqZWN0KSAmJiBvYmplY3QuaW5zcGVjdCgpLnN0YXRlID09PSBcInBlbmRpbmdcIjtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuaXNQZW5kaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJwZW5kaW5nXCI7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIG9iamVjdCBpcyBhIHZhbHVlIG9yIGZ1bGZpbGxlZFxuICogcHJvbWlzZS5cbiAqL1xuUS5pc0Z1bGZpbGxlZCA9IGlzRnVsZmlsbGVkO1xuZnVuY3Rpb24gaXNGdWxmaWxsZWQob2JqZWN0KSB7XG4gICAgcmV0dXJuICFpc1Byb21pc2Uob2JqZWN0KSB8fCBvYmplY3QuaW5zcGVjdCgpLnN0YXRlID09PSBcImZ1bGZpbGxlZFwiO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5pc0Z1bGZpbGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNwZWN0KCkuc3RhdGUgPT09IFwiZnVsZmlsbGVkXCI7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIG9iamVjdCBpcyBhIHJlamVjdGVkIHByb21pc2UuXG4gKi9cblEuaXNSZWplY3RlZCA9IGlzUmVqZWN0ZWQ7XG5mdW5jdGlvbiBpc1JlamVjdGVkKG9iamVjdCkge1xuICAgIHJldHVybiBpc1Byb21pc2Uob2JqZWN0KSAmJiBvYmplY3QuaW5zcGVjdCgpLnN0YXRlID09PSBcInJlamVjdGVkXCI7XG59XG5cblByb21pc2UucHJvdG90eXBlLmlzUmVqZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zcGVjdCgpLnN0YXRlID09PSBcInJlamVjdGVkXCI7XG59O1xuXG4vLy8vIEJFR0lOIFVOSEFORExFRCBSRUpFQ1RJT04gVFJBQ0tJTkdcblxuLy8gVGhpcyBwcm9taXNlIGxpYnJhcnkgY29uc3VtZXMgZXhjZXB0aW9ucyB0aHJvd24gaW4gaGFuZGxlcnMgc28gdGhleSBjYW4gYmVcbi8vIGhhbmRsZWQgYnkgYSBzdWJzZXF1ZW50IHByb21pc2UuICBUaGUgZXhjZXB0aW9ucyBnZXQgYWRkZWQgdG8gdGhpcyBhcnJheSB3aGVuXG4vLyB0aGV5IGFyZSBjcmVhdGVkLCBhbmQgcmVtb3ZlZCB3aGVuIHRoZXkgYXJlIGhhbmRsZWQuICBOb3RlIHRoYXQgaW4gRVM2IG9yXG4vLyBzaGltbWVkIGVudmlyb25tZW50cywgdGhpcyB3b3VsZCBuYXR1cmFsbHkgYmUgYSBgU2V0YC5cbnZhciB1bmhhbmRsZWRSZWFzb25zID0gW107XG52YXIgdW5oYW5kbGVkUmVqZWN0aW9ucyA9IFtdO1xudmFyIHJlcG9ydGVkVW5oYW5kbGVkUmVqZWN0aW9ucyA9IFtdO1xudmFyIHRyYWNrVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHRydWU7XG5cbmZ1bmN0aW9uIHJlc2V0VW5oYW5kbGVkUmVqZWN0aW9ucygpIHtcbiAgICB1bmhhbmRsZWRSZWFzb25zLmxlbmd0aCA9IDA7XG4gICAgdW5oYW5kbGVkUmVqZWN0aW9ucy5sZW5ndGggPSAwO1xuXG4gICAgaWYgKCF0cmFja1VuaGFuZGxlZFJlamVjdGlvbnMpIHtcbiAgICAgICAgdHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zID0gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRyYWNrUmVqZWN0aW9uKHByb21pc2UsIHJlYXNvbikge1xuICAgIGlmICghdHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBwcm9jZXNzLmVtaXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBRLm5leHRUaWNrLnJ1bkFmdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChhcnJheV9pbmRleE9mKHVuaGFuZGxlZFJlamVjdGlvbnMsIHByb21pc2UpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW1pdChcInVuaGFuZGxlZFJlamVjdGlvblwiLCByZWFzb24sIHByb21pc2UpO1xuICAgICAgICAgICAgICAgIHJlcG9ydGVkVW5oYW5kbGVkUmVqZWN0aW9ucy5wdXNoKHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1bmhhbmRsZWRSZWplY3Rpb25zLnB1c2gocHJvbWlzZSk7XG4gICAgaWYgKHJlYXNvbiAmJiB0eXBlb2YgcmVhc29uLnN0YWNrICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHVuaGFuZGxlZFJlYXNvbnMucHVzaChyZWFzb24uc3RhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHVuaGFuZGxlZFJlYXNvbnMucHVzaChcIihubyBzdGFjaykgXCIgKyByZWFzb24pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdW50cmFja1JlamVjdGlvbihwcm9taXNlKSB7XG4gICAgaWYgKCF0cmFja1VuaGFuZGxlZFJlamVjdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhdCA9IGFycmF5X2luZGV4T2YodW5oYW5kbGVkUmVqZWN0aW9ucywgcHJvbWlzZSk7XG4gICAgaWYgKGF0ICE9PSAtMSkge1xuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHByb2Nlc3MuZW1pdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBRLm5leHRUaWNrLnJ1bkFmdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXRSZXBvcnQgPSBhcnJheV9pbmRleE9mKHJlcG9ydGVkVW5oYW5kbGVkUmVqZWN0aW9ucywgcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgaWYgKGF0UmVwb3J0ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVtaXQoXCJyZWplY3Rpb25IYW5kbGVkXCIsIHVuaGFuZGxlZFJlYXNvbnNbYXRdLCBwcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZWRVbmhhbmRsZWRSZWplY3Rpb25zLnNwbGljZShhdFJlcG9ydCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdW5oYW5kbGVkUmVqZWN0aW9ucy5zcGxpY2UoYXQsIDEpO1xuICAgICAgICB1bmhhbmRsZWRSZWFzb25zLnNwbGljZShhdCwgMSk7XG4gICAgfVxufVxuXG5RLnJlc2V0VW5oYW5kbGVkUmVqZWN0aW9ucyA9IHJlc2V0VW5oYW5kbGVkUmVqZWN0aW9ucztcblxuUS5nZXRVbmhhbmRsZWRSZWFzb25zID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIE1ha2UgYSBjb3B5IHNvIHRoYXQgY29uc3VtZXJzIGNhbid0IGludGVyZmVyZSB3aXRoIG91ciBpbnRlcm5hbCBzdGF0ZS5cbiAgICByZXR1cm4gdW5oYW5kbGVkUmVhc29ucy5zbGljZSgpO1xufTtcblxuUS5zdG9wVW5oYW5kbGVkUmVqZWN0aW9uVHJhY2tpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVzZXRVbmhhbmRsZWRSZWplY3Rpb25zKCk7XG4gICAgdHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zID0gZmFsc2U7XG59O1xuXG5yZXNldFVuaGFuZGxlZFJlamVjdGlvbnMoKTtcblxuLy8vLyBFTkQgVU5IQU5ETEVEIFJFSkVDVElPTiBUUkFDS0lOR1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSByZWplY3RlZCBwcm9taXNlLlxuICogQHBhcmFtIHJlYXNvbiB2YWx1ZSBkZXNjcmliaW5nIHRoZSBmYWlsdXJlXG4gKi9cblEucmVqZWN0ID0gcmVqZWN0O1xuZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAgIHZhciByZWplY3Rpb24gPSBQcm9taXNlKHtcbiAgICAgICAgXCJ3aGVuXCI6IGZ1bmN0aW9uIChyZWplY3RlZCkge1xuICAgICAgICAgICAgLy8gbm90ZSB0aGF0IHRoZSBlcnJvciBoYXMgYmVlbiBoYW5kbGVkXG4gICAgICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICB1bnRyYWNrUmVqZWN0aW9uKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdGVkID8gcmVqZWN0ZWQocmVhc29uKSA6IHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiBmYWxsYmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhdGU6IFwicmVqZWN0ZWRcIiwgcmVhc29uOiByZWFzb24gfTtcbiAgICB9KTtcblxuICAgIC8vIE5vdGUgdGhhdCB0aGUgcmVhc29uIGhhcyBub3QgYmVlbiBoYW5kbGVkLlxuICAgIHRyYWNrUmVqZWN0aW9uKHJlamVjdGlvbiwgcmVhc29uKTtcblxuICAgIHJldHVybiByZWplY3Rpb247XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIGZ1bGZpbGxlZCBwcm9taXNlIGZvciBhbiBpbW1lZGlhdGUgcmVmZXJlbmNlLlxuICogQHBhcmFtIHZhbHVlIGltbWVkaWF0ZSByZWZlcmVuY2VcbiAqL1xuUS5mdWxmaWxsID0gZnVsZmlsbDtcbmZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHtcbiAgICByZXR1cm4gUHJvbWlzZSh7XG4gICAgICAgIFwid2hlblwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0XCI6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVbbmFtZV07XG4gICAgICAgIH0sXG4gICAgICAgIFwic2V0XCI6IGZ1bmN0aW9uIChuYW1lLCByaHMpIHtcbiAgICAgICAgICAgIHZhbHVlW25hbWVdID0gcmhzO1xuICAgICAgICB9LFxuICAgICAgICBcImRlbGV0ZVwiOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgZGVsZXRlIHZhbHVlW25hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBcInBvc3RcIjogZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgICAgIC8vIE1hcmsgTWlsbGVyIHByb3Bvc2VzIHRoYXQgcG9zdCB3aXRoIG5vIG5hbWUgc2hvdWxkIGFwcGx5IGFcbiAgICAgICAgICAgIC8vIHByb21pc2VkIGZ1bmN0aW9uLlxuICAgICAgICAgICAgaWYgKG5hbWUgPT09IG51bGwgfHwgbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVtuYW1lXS5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiYXBwbHlcIjogZnVuY3Rpb24gKHRoaXNwLCBhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuYXBwbHkodGhpc3AsIGFyZ3MpO1xuICAgICAgICB9LFxuICAgICAgICBcImtleXNcIjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdF9rZXlzKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sIHZvaWQgMCwgZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhdGU6IFwiZnVsZmlsbGVkXCIsIHZhbHVlOiB2YWx1ZSB9O1xuICAgIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZW5hYmxlcyB0byBRIHByb21pc2VzLlxuICogQHBhcmFtIHByb21pc2UgdGhlbmFibGUgcHJvbWlzZVxuICogQHJldHVybnMgYSBRIHByb21pc2VcbiAqL1xuZnVuY3Rpb24gY29lcmNlKHByb21pc2UpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvbWlzZS50aGVuKGRlZmVycmVkLnJlc29sdmUsIGRlZmVycmVkLnJlamVjdCwgZGVmZXJyZWQubm90aWZ5KTtcbiAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufVxuXG4vKipcbiAqIEFubm90YXRlcyBhbiBvYmplY3Qgc3VjaCB0aGF0IGl0IHdpbGwgbmV2ZXIgYmVcbiAqIHRyYW5zZmVycmVkIGF3YXkgZnJvbSB0aGlzIHByb2Nlc3Mgb3ZlciBhbnkgcHJvbWlzZVxuICogY29tbXVuaWNhdGlvbiBjaGFubmVsLlxuICogQHBhcmFtIG9iamVjdFxuICogQHJldHVybnMgcHJvbWlzZSBhIHdyYXBwaW5nIG9mIHRoYXQgb2JqZWN0IHRoYXRcbiAqIGFkZGl0aW9uYWxseSByZXNwb25kcyB0byB0aGUgXCJpc0RlZlwiIG1lc3NhZ2VcbiAqIHdpdGhvdXQgYSByZWplY3Rpb24uXG4gKi9cblEubWFzdGVyID0gbWFzdGVyO1xuZnVuY3Rpb24gbWFzdGVyKG9iamVjdCkge1xuICAgIHJldHVybiBQcm9taXNlKHtcbiAgICAgICAgXCJpc0RlZlwiOiBmdW5jdGlvbiAoKSB7fVxuICAgIH0sIGZ1bmN0aW9uIGZhbGxiYWNrKG9wLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaChvYmplY3QsIG9wLCBhcmdzKTtcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBRKG9iamVjdCkuaW5zcGVjdCgpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFNwcmVhZHMgdGhlIHZhbHVlcyBvZiBhIHByb21pc2VkIGFycmF5IG9mIGFyZ3VtZW50cyBpbnRvIHRoZVxuICogZnVsZmlsbG1lbnQgY2FsbGJhY2suXG4gKiBAcGFyYW0gZnVsZmlsbGVkIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgdmFyaWFkaWMgYXJndW1lbnRzIGZyb20gdGhlXG4gKiBwcm9taXNlZCBhcnJheVxuICogQHBhcmFtIHJlamVjdGVkIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgdGhlIGV4Y2VwdGlvbiBpZiB0aGUgcHJvbWlzZVxuICogaXMgcmVqZWN0ZWQuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWUgb3IgdGhyb3duIGV4Y2VwdGlvbiBvZlxuICogZWl0aGVyIGNhbGxiYWNrLlxuICovXG5RLnNwcmVhZCA9IHNwcmVhZDtcbmZ1bmN0aW9uIHNwcmVhZCh2YWx1ZSwgZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICAgIHJldHVybiBRKHZhbHVlKS5zcHJlYWQoZnVsZmlsbGVkLCByZWplY3RlZCk7XG59XG5cblByb21pc2UucHJvdG90eXBlLnNwcmVhZCA9IGZ1bmN0aW9uIChmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsKCkudGhlbihmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZC5hcHBseSh2b2lkIDAsIGFycmF5KTtcbiAgICB9LCByZWplY3RlZCk7XG59O1xuXG4vKipcbiAqIFRoZSBhc3luYyBmdW5jdGlvbiBpcyBhIGRlY29yYXRvciBmb3IgZ2VuZXJhdG9yIGZ1bmN0aW9ucywgdHVybmluZ1xuICogdGhlbSBpbnRvIGFzeW5jaHJvbm91cyBnZW5lcmF0b3JzLiAgQWx0aG91Z2ggZ2VuZXJhdG9ycyBhcmUgb25seSBwYXJ0XG4gKiBvZiB0aGUgbmV3ZXN0IEVDTUFTY3JpcHQgNiBkcmFmdHMsIHRoaXMgY29kZSBkb2VzIG5vdCBjYXVzZSBzeW50YXhcbiAqIGVycm9ycyBpbiBvbGRlciBlbmdpbmVzLiAgVGhpcyBjb2RlIHNob3VsZCBjb250aW51ZSB0byB3b3JrIGFuZCB3aWxsXG4gKiBpbiBmYWN0IGltcHJvdmUgb3ZlciB0aW1lIGFzIHRoZSBsYW5ndWFnZSBpbXByb3Zlcy5cbiAqXG4gKiBFUzYgZ2VuZXJhdG9ycyBhcmUgY3VycmVudGx5IHBhcnQgb2YgVjggdmVyc2lvbiAzLjE5IHdpdGggdGhlXG4gKiAtLWhhcm1vbnktZ2VuZXJhdG9ycyBydW50aW1lIGZsYWcgZW5hYmxlZC4gIFNwaWRlck1vbmtleSBoYXMgaGFkIHRoZW1cbiAqIGZvciBsb25nZXIsIGJ1dCB1bmRlciBhbiBvbGRlciBQeXRob24taW5zcGlyZWQgZm9ybS4gIFRoaXMgZnVuY3Rpb25cbiAqIHdvcmtzIG9uIGJvdGgga2luZHMgb2YgZ2VuZXJhdG9ycy5cbiAqXG4gKiBEZWNvcmF0ZXMgYSBnZW5lcmF0b3IgZnVuY3Rpb24gc3VjaCB0aGF0OlxuICogIC0gaXQgbWF5IHlpZWxkIHByb21pc2VzXG4gKiAgLSBleGVjdXRpb24gd2lsbCBjb250aW51ZSB3aGVuIHRoYXQgcHJvbWlzZSBpcyBmdWxmaWxsZWRcbiAqICAtIHRoZSB2YWx1ZSBvZiB0aGUgeWllbGQgZXhwcmVzc2lvbiB3aWxsIGJlIHRoZSBmdWxmaWxsZWQgdmFsdWVcbiAqICAtIGl0IHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlICh3aGVuIHRoZSBnZW5lcmF0b3JcbiAqICAgIHN0b3BzIGl0ZXJhdGluZylcbiAqICAtIHRoZSBkZWNvcmF0ZWQgZnVuY3Rpb24gcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWVcbiAqICAgIG9mIHRoZSBnZW5lcmF0b3Igb3IgdGhlIGZpcnN0IHJlamVjdGVkIHByb21pc2UgYW1vbmcgdGhvc2VcbiAqICAgIHlpZWxkZWQuXG4gKiAgLSBpZiBhbiBlcnJvciBpcyB0aHJvd24gaW4gdGhlIGdlbmVyYXRvciwgaXQgcHJvcGFnYXRlcyB0aHJvdWdoXG4gKiAgICBldmVyeSBmb2xsb3dpbmcgeWllbGQgdW50aWwgaXQgaXMgY2F1Z2h0LCBvciB1bnRpbCBpdCBlc2NhcGVzXG4gKiAgICB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGFsdG9nZXRoZXIsIGFuZCBpcyB0cmFuc2xhdGVkIGludG8gYVxuICogICAgcmVqZWN0aW9uIGZvciB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSB0aGUgZGVjb3JhdGVkIGdlbmVyYXRvci5cbiAqL1xuUS5hc3luYyA9IGFzeW5jO1xuZnVuY3Rpb24gYXN5bmMobWFrZUdlbmVyYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHdoZW4gdmVyYiBpcyBcInNlbmRcIiwgYXJnIGlzIGEgdmFsdWVcbiAgICAgICAgLy8gd2hlbiB2ZXJiIGlzIFwidGhyb3dcIiwgYXJnIGlzIGFuIGV4Y2VwdGlvblxuICAgICAgICBmdW5jdGlvbiBjb250aW51ZXIodmVyYiwgYXJnKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICAgICAgICAvLyBVbnRpbCBWOCAzLjE5IC8gQ2hyb21pdW0gMjkgaXMgcmVsZWFzZWQsIFNwaWRlck1vbmtleSBpcyB0aGUgb25seVxuICAgICAgICAgICAgLy8gZW5naW5lIHRoYXQgaGFzIGEgZGVwbG95ZWQgYmFzZSBvZiBicm93c2VycyB0aGF0IHN1cHBvcnQgZ2VuZXJhdG9ycy5cbiAgICAgICAgICAgIC8vIEhvd2V2ZXIsIFNNJ3MgZ2VuZXJhdG9ycyB1c2UgdGhlIFB5dGhvbi1pbnNwaXJlZCBzZW1hbnRpY3Mgb2ZcbiAgICAgICAgICAgIC8vIG91dGRhdGVkIEVTNiBkcmFmdHMuICBXZSB3b3VsZCBsaWtlIHRvIHN1cHBvcnQgRVM2LCBidXQgd2UnZCBhbHNvXG4gICAgICAgICAgICAvLyBsaWtlIHRvIG1ha2UgaXQgcG9zc2libGUgdG8gdXNlIGdlbmVyYXRvcnMgaW4gZGVwbG95ZWQgYnJvd3NlcnMsIHNvXG4gICAgICAgICAgICAvLyB3ZSBhbHNvIHN1cHBvcnQgUHl0aG9uLXN0eWxlIGdlbmVyYXRvcnMuICBBdCBzb21lIHBvaW50IHdlIGNhbiByZW1vdmVcbiAgICAgICAgICAgIC8vIHRoaXMgYmxvY2suXG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgU3RvcEl0ZXJhdGlvbiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIC8vIEVTNiBHZW5lcmF0b3JzXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZ2VuZXJhdG9yW3ZlcmJdKGFyZyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBRKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdoZW4ocmVzdWx0LnZhbHVlLCBjYWxsYmFjaywgZXJyYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBTcGlkZXJNb25rZXkgR2VuZXJhdG9yc1xuICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBSZW1vdmUgdGhpcyBjYXNlIHdoZW4gU00gZG9lcyBFUzYgZ2VuZXJhdG9ycy5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBnZW5lcmF0b3JbdmVyYl0oYXJnKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3RvcEl0ZXJhdGlvbihleGNlcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUShleGNlcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChleGNlcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB3aGVuKHJlc3VsdCwgY2FsbGJhY2ssIGVycmJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBnZW5lcmF0b3IgPSBtYWtlR2VuZXJhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNvbnRpbnVlci5iaW5kKGNvbnRpbnVlciwgXCJuZXh0XCIpO1xuICAgICAgICB2YXIgZXJyYmFjayA9IGNvbnRpbnVlci5iaW5kKGNvbnRpbnVlciwgXCJ0aHJvd1wiKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBUaGUgc3Bhd24gZnVuY3Rpb24gaXMgYSBzbWFsbCB3cmFwcGVyIGFyb3VuZCBhc3luYyB0aGF0IGltbWVkaWF0ZWx5XG4gKiBjYWxscyB0aGUgZ2VuZXJhdG9yIGFuZCBhbHNvIGVuZHMgdGhlIHByb21pc2UgY2hhaW4sIHNvIHRoYXQgYW55XG4gKiB1bmhhbmRsZWQgZXJyb3JzIGFyZSB0aHJvd24gaW5zdGVhZCBvZiBmb3J3YXJkZWQgdG8gdGhlIGVycm9yXG4gKiBoYW5kbGVyLiBUaGlzIGlzIHVzZWZ1bCBiZWNhdXNlIGl0J3MgZXh0cmVtZWx5IGNvbW1vbiB0byBydW5cbiAqIGdlbmVyYXRvcnMgYXQgdGhlIHRvcC1sZXZlbCB0byB3b3JrIHdpdGggbGlicmFyaWVzLlxuICovXG5RLnNwYXduID0gc3Bhd247XG5mdW5jdGlvbiBzcGF3bihtYWtlR2VuZXJhdG9yKSB7XG4gICAgUS5kb25lKFEuYXN5bmMobWFrZUdlbmVyYXRvcikoKSk7XG59XG5cbi8vIEZJWE1FOiBSZW1vdmUgdGhpcyBpbnRlcmZhY2Ugb25jZSBFUzYgZ2VuZXJhdG9ycyBhcmUgaW4gU3BpZGVyTW9ua2V5LlxuLyoqXG4gKiBUaHJvd3MgYSBSZXR1cm5WYWx1ZSBleGNlcHRpb24gdG8gc3RvcCBhbiBhc3luY2hyb25vdXMgZ2VuZXJhdG9yLlxuICpcbiAqIFRoaXMgaW50ZXJmYWNlIGlzIGEgc3RvcC1nYXAgbWVhc3VyZSB0byBzdXBwb3J0IGdlbmVyYXRvciByZXR1cm5cbiAqIHZhbHVlcyBpbiBvbGRlciBGaXJlZm94L1NwaWRlck1vbmtleS4gIEluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBFUzZcbiAqIGdlbmVyYXRvcnMgbGlrZSBDaHJvbWl1bSAyOSwganVzdCB1c2UgXCJyZXR1cm5cIiBpbiB5b3VyIGdlbmVyYXRvclxuICogZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgcmV0dXJuIHZhbHVlIGZvciB0aGUgc3Vycm91bmRpbmcgZ2VuZXJhdG9yXG4gKiBAdGhyb3dzIFJldHVyblZhbHVlIGV4Y2VwdGlvbiB3aXRoIHRoZSB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKiAvLyBFUzYgc3R5bGVcbiAqIFEuYXN5bmMoZnVuY3Rpb24qICgpIHtcbiAqICAgICAgdmFyIGZvbyA9IHlpZWxkIGdldEZvb1Byb21pc2UoKTtcbiAqICAgICAgdmFyIGJhciA9IHlpZWxkIGdldEJhclByb21pc2UoKTtcbiAqICAgICAgcmV0dXJuIGZvbyArIGJhcjtcbiAqIH0pXG4gKiAvLyBPbGRlciBTcGlkZXJNb25rZXkgc3R5bGVcbiAqIFEuYXN5bmMoZnVuY3Rpb24gKCkge1xuICogICAgICB2YXIgZm9vID0geWllbGQgZ2V0Rm9vUHJvbWlzZSgpO1xuICogICAgICB2YXIgYmFyID0geWllbGQgZ2V0QmFyUHJvbWlzZSgpO1xuICogICAgICBRLnJldHVybihmb28gKyBiYXIpO1xuICogfSlcbiAqL1xuUVtcInJldHVyblwiXSA9IF9yZXR1cm47XG5mdW5jdGlvbiBfcmV0dXJuKHZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IFFSZXR1cm5WYWx1ZSh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIHByb21pc2VkIGZ1bmN0aW9uIGRlY29yYXRvciBlbnN1cmVzIHRoYXQgYW55IHByb21pc2UgYXJndW1lbnRzXG4gKiBhcmUgc2V0dGxlZCBhbmQgcGFzc2VkIGFzIHZhbHVlcyAoYHRoaXNgIGlzIGFsc28gc2V0dGxlZCBhbmQgcGFzc2VkXG4gKiBhcyBhIHZhbHVlKS4gIEl0IHdpbGwgYWxzbyBlbnN1cmUgdGhhdCB0aGUgcmVzdWx0IG9mIGEgZnVuY3Rpb24gaXNcbiAqIGFsd2F5cyBhIHByb21pc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciBhZGQgPSBRLnByb21pc2VkKGZ1bmN0aW9uIChhLCBiKSB7XG4gKiAgICAgcmV0dXJuIGEgKyBiO1xuICogfSk7XG4gKiBhZGQoUShhKSwgUShCKSk7XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGRlY29yYXRlXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IGEgZnVuY3Rpb24gdGhhdCBoYXMgYmVlbiBkZWNvcmF0ZWQuXG4gKi9cblEucHJvbWlzZWQgPSBwcm9taXNlZDtcbmZ1bmN0aW9uIHByb21pc2VkKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNwcmVhZChbdGhpcywgYWxsKGFyZ3VtZW50cyldLCBmdW5jdGlvbiAoc2VsZiwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG4vKipcbiAqIHNlbmRzIGEgbWVzc2FnZSB0byBhIHZhbHVlIGluIGEgZnV0dXJlIHR1cm5cbiAqIEBwYXJhbSBvYmplY3QqIHRoZSByZWNpcGllbnRcbiAqIEBwYXJhbSBvcCB0aGUgbmFtZSBvZiB0aGUgbWVzc2FnZSBvcGVyYXRpb24sIGUuZy4sIFwid2hlblwiLFxuICogQHBhcmFtIGFyZ3MgZnVydGhlciBhcmd1bWVudHMgdG8gYmUgZm9yd2FyZGVkIHRvIHRoZSBvcGVyYXRpb25cbiAqIEByZXR1cm5zIHJlc3VsdCB7UHJvbWlzZX0gYSBwcm9taXNlIGZvciB0aGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb25cbiAqL1xuUS5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuZnVuY3Rpb24gZGlzcGF0Y2gob2JqZWN0LCBvcCwgYXJncykge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2gob3AsIGFyZ3MpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChvcCwgYXJncykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnByb21pc2VEaXNwYXRjaChkZWZlcnJlZC5yZXNvbHZlLCBvcCwgYXJncyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgb2JqZWN0XG4gKiBAcGFyYW0gbmFtZSAgICAgIG5hbWUgb2YgcHJvcGVydHkgdG8gZ2V0XG4gKiBAcmV0dXJuIHByb21pc2UgZm9yIHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICovXG5RLmdldCA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJnZXRcIiwgW2tleV0pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKFwiZ2V0XCIsIFtrZXldKTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIG9iamVjdCBvYmplY3RcbiAqIEBwYXJhbSBuYW1lICAgICAgbmFtZSBvZiBwcm9wZXJ0eSB0byBzZXRcbiAqIEBwYXJhbSB2YWx1ZSAgICAgbmV3IHZhbHVlIG9mIHByb3BlcnR5XG4gKiBAcmV0dXJuIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWVcbiAqL1xuUS5zZXQgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcInNldFwiLCBba2V5LCB2YWx1ZV0pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcInNldFwiLCBba2V5LCB2YWx1ZV0pO1xufTtcblxuLyoqXG4gKiBEZWxldGVzIGEgcHJvcGVydHkgaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgb2JqZWN0XG4gKiBAcGFyYW0gbmFtZSAgICAgIG5hbWUgb2YgcHJvcGVydHkgdG8gZGVsZXRlXG4gKiBAcmV0dXJuIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWVcbiAqL1xuUS5kZWwgPSAvLyBYWFggbGVnYWN5XG5RW1wiZGVsZXRlXCJdID0gZnVuY3Rpb24gKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcImRlbGV0ZVwiLCBba2V5XSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5kZWwgPSAvLyBYWFggbGVnYWN5XG5Qcm9taXNlLnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcImRlbGV0ZVwiLCBba2V5XSk7XG59O1xuXG4vKipcbiAqIEludm9rZXMgYSBtZXRob2QgaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgb2JqZWN0XG4gKiBAcGFyYW0gbmFtZSAgICAgIG5hbWUgb2YgbWV0aG9kIHRvIGludm9rZVxuICogQHBhcmFtIHZhbHVlICAgICBhIHZhbHVlIHRvIHBvc3QsIHR5cGljYWxseSBhbiBhcnJheSBvZlxuICogICAgICAgICAgICAgICAgICBpbnZvY2F0aW9uIGFyZ3VtZW50cyBmb3IgcHJvbWlzZXMgdGhhdFxuICogICAgICAgICAgICAgICAgICBhcmUgdWx0aW1hdGVseSBiYWNrZWQgd2l0aCBgcmVzb2x2ZWAgdmFsdWVzLFxuICogICAgICAgICAgICAgICAgICBhcyBvcHBvc2VkIHRvIHRob3NlIGJhY2tlZCB3aXRoIFVSTHNcbiAqICAgICAgICAgICAgICAgICAgd2hlcmVpbiB0aGUgcG9zdGVkIHZhbHVlIGNhbiBiZSBhbnlcbiAqICAgICAgICAgICAgICAgICAgSlNPTiBzZXJpYWxpemFibGUgb2JqZWN0LlxuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlXG4gKi9cbi8vIGJvdW5kIGxvY2FsbHkgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IG90aGVyIG1ldGhvZHNcblEubWFwcGx5ID0gLy8gWFhYIEFzIHByb3Bvc2VkIGJ5IFwiUmVkc2FuZHJvXCJcblEucG9zdCA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIGFyZ3MpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKFwicG9zdFwiLCBbbmFtZSwgYXJnc10pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubWFwcGx5ID0gLy8gWFhYIEFzIHByb3Bvc2VkIGJ5IFwiUmVkc2FuZHJvXCJcblByb21pc2UucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKFwicG9zdFwiLCBbbmFtZSwgYXJnc10pO1xufTtcblxuLyoqXG4gKiBJbnZva2VzIGEgbWV0aG9kIGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IG9iamVjdFxuICogQHBhcmFtIG5hbWUgICAgICBuYW1lIG9mIG1ldGhvZCB0byBpbnZva2VcbiAqIEBwYXJhbSAuLi5hcmdzICAgYXJyYXkgb2YgaW52b2NhdGlvbiBhcmd1bWVudHNcbiAqIEByZXR1cm4gcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZVxuICovXG5RLnNlbmQgPSAvLyBYWFggTWFyayBNaWxsZXIncyBwcm9wb3NlZCBwYXJsYW5jZVxuUS5tY2FsbCA9IC8vIFhYWCBBcyBwcm9wb3NlZCBieSBcIlJlZHNhbmRyb1wiXG5RLmludm9rZSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUgLyouLi5hcmdzKi8pIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKFwicG9zdFwiLCBbbmFtZSwgYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAyKV0pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuc2VuZCA9IC8vIFhYWCBNYXJrIE1pbGxlcidzIHByb3Bvc2VkIHBhcmxhbmNlXG5Qcm9taXNlLnByb3RvdHlwZS5tY2FsbCA9IC8vIFhYWCBBcyBwcm9wb3NlZCBieSBcIlJlZHNhbmRyb1wiXG5Qcm9taXNlLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAobmFtZSAvKi4uLmFyZ3MqLykge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKFwicG9zdFwiLCBbbmFtZSwgYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAxKV0pO1xufTtcblxuLyoqXG4gKiBBcHBsaWVzIHRoZSBwcm9taXNlZCBmdW5jdGlvbiBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBmdW5jdGlvblxuICogQHBhcmFtIGFyZ3MgICAgICBhcnJheSBvZiBhcHBsaWNhdGlvbiBhcmd1bWVudHNcbiAqL1xuUS5mYXBwbHkgPSBmdW5jdGlvbiAob2JqZWN0LCBhcmdzKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcImFwcGx5XCIsIFt2b2lkIDAsIGFyZ3NdKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmZhcHBseSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJhcHBseVwiLCBbdm9pZCAwLCBhcmdzXSk7XG59O1xuXG4vKipcbiAqIENhbGxzIHRoZSBwcm9taXNlZCBmdW5jdGlvbiBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBmdW5jdGlvblxuICogQHBhcmFtIC4uLmFyZ3MgICBhcnJheSBvZiBhcHBsaWNhdGlvbiBhcmd1bWVudHNcbiAqL1xuUVtcInRyeVwiXSA9XG5RLmZjYWxsID0gZnVuY3Rpb24gKG9iamVjdCAvKiAuLi5hcmdzKi8pIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKFwiYXBwbHlcIiwgW3ZvaWQgMCwgYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAxKV0pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZmNhbGwgPSBmdW5jdGlvbiAoLyouLi5hcmdzKi8pIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcImFwcGx5XCIsIFt2b2lkIDAsIGFycmF5X3NsaWNlKGFyZ3VtZW50cyldKTtcbn07XG5cbi8qKlxuICogQmluZHMgdGhlIHByb21pc2VkIGZ1bmN0aW9uLCB0cmFuc2Zvcm1pbmcgcmV0dXJuIHZhbHVlcyBpbnRvIGEgZnVsZmlsbGVkXG4gKiBwcm9taXNlIGFuZCB0aHJvd24gZXJyb3JzIGludG8gYSByZWplY3RlZCBvbmUuXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IGZ1bmN0aW9uXG4gKiBAcGFyYW0gLi4uYXJncyAgIGFycmF5IG9mIGFwcGxpY2F0aW9uIGFyZ3VtZW50c1xuICovXG5RLmZiaW5kID0gZnVuY3Rpb24gKG9iamVjdCAvKi4uLmFyZ3MqLykge1xuICAgIHZhciBwcm9taXNlID0gUShvYmplY3QpO1xuICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gZmJvdW5kKCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS5kaXNwYXRjaChcImFwcGx5XCIsIFtcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBhcmdzLmNvbmNhdChhcnJheV9zbGljZShhcmd1bWVudHMpKVxuICAgICAgICBdKTtcbiAgICB9O1xufTtcblByb21pc2UucHJvdG90eXBlLmZiaW5kID0gZnVuY3Rpb24gKC8qLi4uYXJncyovKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gZmJvdW5kKCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS5kaXNwYXRjaChcImFwcGx5XCIsIFtcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBhcmdzLmNvbmNhdChhcnJheV9zbGljZShhcmd1bWVudHMpKVxuICAgICAgICBdKTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBSZXF1ZXN0cyB0aGUgbmFtZXMgb2YgdGhlIG93bmVkIHByb3BlcnRpZXMgb2YgYSBwcm9taXNlZFxuICogb2JqZWN0IGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IG9iamVjdFxuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUga2V5cyBvZiB0aGUgZXZlbnR1YWxseSBzZXR0bGVkIG9iamVjdFxuICovXG5RLmtleXMgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcImtleXNcIiwgW10pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcImtleXNcIiwgW10pO1xufTtcblxuLyoqXG4gKiBUdXJucyBhbiBhcnJheSBvZiBwcm9taXNlcyBpbnRvIGEgcHJvbWlzZSBmb3IgYW4gYXJyYXkuICBJZiBhbnkgb2ZcbiAqIHRoZSBwcm9taXNlcyBnZXRzIHJlamVjdGVkLCB0aGUgd2hvbGUgYXJyYXkgaXMgcmVqZWN0ZWQgaW1tZWRpYXRlbHkuXG4gKiBAcGFyYW0ge0FycmF5Kn0gYW4gYXJyYXkgKG9yIHByb21pc2UgZm9yIGFuIGFycmF5KSBvZiB2YWx1ZXMgKG9yXG4gKiBwcm9taXNlcyBmb3IgdmFsdWVzKVxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciBhbiBhcnJheSBvZiB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXNcbiAqL1xuLy8gQnkgTWFyayBNaWxsZXJcbi8vIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPXN0cmF3bWFuOmNvbmN1cnJlbmN5JnJldj0xMzA4Nzc2NTIxI2FsbGZ1bGZpbGxlZFxuUS5hbGwgPSBhbGw7XG5mdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgICByZXR1cm4gd2hlbihwcm9taXNlcywgZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgICAgIHZhciBwZW5kaW5nQ291bnQgPSAwO1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgICAgICBhcnJheV9yZWR1Y2UocHJvbWlzZXMsIGZ1bmN0aW9uICh1bmRlZmluZWQsIHByb21pc2UsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgc25hcHNob3Q7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaXNQcm9taXNlKHByb21pc2UpICYmXG4gICAgICAgICAgICAgICAgKHNuYXBzaG90ID0gcHJvbWlzZS5pbnNwZWN0KCkpLnN0YXRlID09PSBcImZ1bGZpbGxlZFwiXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlc1tpbmRleF0gPSBzbmFwc2hvdC52YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgKytwZW5kaW5nQ291bnQ7XG4gICAgICAgICAgICAgICAgd2hlbihcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtLXBlbmRpbmdDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocHJvbWlzZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChwcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQubm90aWZ5KHsgaW5kZXg6IGluZGV4LCB2YWx1ZTogcHJvZ3Jlc3MgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB2b2lkIDApO1xuICAgICAgICBpZiAocGVuZGluZ0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHByb21pc2VzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9KTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IHJlc29sdmVkIHByb21pc2Ugb2YgYW4gYXJyYXkuIFByaW9yIHJlamVjdGVkIHByb21pc2VzIGFyZVxuICogaWdub3JlZC4gIFJlamVjdHMgb25seSBpZiBhbGwgcHJvbWlzZXMgYXJlIHJlamVjdGVkLlxuICogQHBhcmFtIHtBcnJheSp9IGFuIGFycmF5IGNvbnRhaW5pbmcgdmFsdWVzIG9yIHByb21pc2VzIGZvciB2YWx1ZXNcbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IHJlc29sdmVkIHByb21pc2UsXG4gKiBvciBhIHJlamVjdGVkIHByb21pc2UgaWYgYWxsIHByb21pc2VzIGFyZSByZWplY3RlZC5cbiAqL1xuUS5hbnkgPSBhbnk7XG5cbmZ1bmN0aW9uIGFueShwcm9taXNlcykge1xuICAgIGlmIChwcm9taXNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFEucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHZhciBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICB2YXIgcGVuZGluZ0NvdW50ID0gMDtcbiAgICBhcnJheV9yZWR1Y2UocHJvbWlzZXMsIGZ1bmN0aW9uIChwcmV2LCBjdXJyZW50LCBpbmRleCkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHByb21pc2VzW2luZGV4XTtcblxuICAgICAgICBwZW5kaW5nQ291bnQrKztcblxuICAgICAgICB3aGVuKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzKTtcbiAgICAgICAgZnVuY3Rpb24gb25GdWxmaWxsZWQocmVzdWx0KSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb25SZWplY3RlZChlcnIpIHtcbiAgICAgICAgICAgIHBlbmRpbmdDb3VudC0tO1xuICAgICAgICAgICAgaWYgKHBlbmRpbmdDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlID0gKFwiUSBjYW4ndCBnZXQgZnVsZmlsbG1lbnQgdmFsdWUgZnJvbSBhbnkgcHJvbWlzZSwgYWxsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJwcm9taXNlcyB3ZXJlIHJlamVjdGVkLiBMYXN0IGVycm9yIG1lc3NhZ2U6IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG9uUHJvZ3Jlc3MocHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLm5vdGlmeSh7XG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9ncmVzc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB1bmRlZmluZWQpO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cblByb21pc2UucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYW55KHRoaXMpO1xufTtcblxuLyoqXG4gKiBXYWl0cyBmb3IgYWxsIHByb21pc2VzIHRvIGJlIHNldHRsZWQsIGVpdGhlciBmdWxmaWxsZWQgb3JcbiAqIHJlamVjdGVkLiAgVGhpcyBpcyBkaXN0aW5jdCBmcm9tIGBhbGxgIHNpbmNlIHRoYXQgd291bGQgc3RvcFxuICogd2FpdGluZyBhdCB0aGUgZmlyc3QgcmVqZWN0aW9uLiAgVGhlIHByb21pc2UgcmV0dXJuZWQgYnlcbiAqIGBhbGxSZXNvbHZlZGAgd2lsbCBuZXZlciBiZSByZWplY3RlZC5cbiAqIEBwYXJhbSBwcm9taXNlcyBhIHByb21pc2UgZm9yIGFuIGFycmF5IChvciBhbiBhcnJheSkgb2YgcHJvbWlzZXNcbiAqIChvciB2YWx1ZXMpXG4gKiBAcmV0dXJuIGEgcHJvbWlzZSBmb3IgYW4gYXJyYXkgb2YgcHJvbWlzZXNcbiAqL1xuUS5hbGxSZXNvbHZlZCA9IGRlcHJlY2F0ZShhbGxSZXNvbHZlZCwgXCJhbGxSZXNvbHZlZFwiLCBcImFsbFNldHRsZWRcIik7XG5mdW5jdGlvbiBhbGxSZXNvbHZlZChwcm9taXNlcykge1xuICAgIHJldHVybiB3aGVuKHByb21pc2VzLCBmdW5jdGlvbiAocHJvbWlzZXMpIHtcbiAgICAgICAgcHJvbWlzZXMgPSBhcnJheV9tYXAocHJvbWlzZXMsIFEpO1xuICAgICAgICByZXR1cm4gd2hlbihhbGwoYXJyYXlfbWFwKHByb21pc2VzLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdoZW4ocHJvbWlzZSwgbm9vcCwgbm9vcCk7XG4gICAgICAgIH0pKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VzO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuYWxsUmVzb2x2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFsbFJlc29sdmVkKHRoaXMpO1xufTtcblxuLyoqXG4gKiBAc2VlIFByb21pc2UjYWxsU2V0dGxlZFxuICovXG5RLmFsbFNldHRsZWQgPSBhbGxTZXR0bGVkO1xuZnVuY3Rpb24gYWxsU2V0dGxlZChwcm9taXNlcykge1xuICAgIHJldHVybiBRKHByb21pc2VzKS5hbGxTZXR0bGVkKCk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gYXJyYXkgb2YgcHJvbWlzZXMgaW50byBhIHByb21pc2UgZm9yIGFuIGFycmF5IG9mIHRoZWlyIHN0YXRlcyAoYXNcbiAqIHJldHVybmVkIGJ5IGBpbnNwZWN0YCkgd2hlbiB0aGV5IGhhdmUgYWxsIHNldHRsZWQuXG4gKiBAcGFyYW0ge0FycmF5W0FueSpdfSB2YWx1ZXMgYW4gYXJyYXkgKG9yIHByb21pc2UgZm9yIGFuIGFycmF5KSBvZiB2YWx1ZXMgKG9yXG4gKiBwcm9taXNlcyBmb3IgdmFsdWVzKVxuICogQHJldHVybnMge0FycmF5W1N0YXRlXX0gYW4gYXJyYXkgb2Ygc3RhdGVzIGZvciB0aGUgcmVzcGVjdGl2ZSB2YWx1ZXMuXG4gKi9cblByb21pc2UucHJvdG90eXBlLmFsbFNldHRsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAocHJvbWlzZXMpIHtcbiAgICAgICAgcmV0dXJuIGFsbChhcnJheV9tYXAocHJvbWlzZXMsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gUShwcm9taXNlKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZ2FyZGxlc3MoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UuaW5zcGVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihyZWdhcmRsZXNzLCByZWdhcmRsZXNzKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBDYXB0dXJlcyB0aGUgZmFpbHVyZSBvZiBhIHByb21pc2UsIGdpdmluZyBhbiBvcG9ydHVuaXR5IHRvIHJlY292ZXJcbiAqIHdpdGggYSBjYWxsYmFjay4gIElmIHRoZSBnaXZlbiBwcm9taXNlIGlzIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gKiBwcm9taXNlIGlzIGZ1bGZpbGxlZC5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZSBmb3Igc29tZXRoaW5nXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0byBmdWxmaWxsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlmIHRoZVxuICogZ2l2ZW4gcHJvbWlzZSBpcyByZWplY3RlZFxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBjYWxsYmFja1xuICovXG5RLmZhaWwgPSAvLyBYWFggbGVnYWN5XG5RW1wiY2F0Y2hcIl0gPSBmdW5jdGlvbiAob2JqZWN0LCByZWplY3RlZCkge1xuICAgIHJldHVybiBRKG9iamVjdCkudGhlbih2b2lkIDAsIHJlamVjdGVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmZhaWwgPSAvLyBYWFggbGVnYWN5XG5Qcm9taXNlLnByb3RvdHlwZVtcImNhdGNoXCJdID0gZnVuY3Rpb24gKHJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih2b2lkIDAsIHJlamVjdGVkKTtcbn07XG5cbi8qKlxuICogQXR0YWNoZXMgYSBsaXN0ZW5lciB0aGF0IGNhbiByZXNwb25kIHRvIHByb2dyZXNzIG5vdGlmaWNhdGlvbnMgZnJvbSBhXG4gKiBwcm9taXNlJ3Mgb3JpZ2luYXRpbmcgZGVmZXJyZWQuIFRoaXMgbGlzdGVuZXIgcmVjZWl2ZXMgdGhlIGV4YWN0IGFyZ3VtZW50c1xuICogcGFzc2VkIHRvIGBgZGVmZXJyZWQubm90aWZ5YGAuXG4gKiBAcGFyYW0ge0FueSp9IHByb21pc2UgZm9yIHNvbWV0aGluZ1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdG8gcmVjZWl2ZSBhbnkgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uc1xuICogQHJldHVybnMgdGhlIGdpdmVuIHByb21pc2UsIHVuY2hhbmdlZFxuICovXG5RLnByb2dyZXNzID0gcHJvZ3Jlc3M7XG5mdW5jdGlvbiBwcm9ncmVzcyhvYmplY3QsIHByb2dyZXNzZWQpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLnRoZW4odm9pZCAwLCB2b2lkIDAsIHByb2dyZXNzZWQpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uIChwcm9ncmVzc2VkKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih2b2lkIDAsIHZvaWQgMCwgcHJvZ3Jlc3NlZCk7XG59O1xuXG4vKipcbiAqIFByb3ZpZGVzIGFuIG9wcG9ydHVuaXR5IHRvIG9ic2VydmUgdGhlIHNldHRsaW5nIG9mIGEgcHJvbWlzZSxcbiAqIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgcHJvbWlzZSBpcyBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuICBGb3J3YXJkc1xuICogdGhlIHJlc29sdXRpb24gdG8gdGhlIHJldHVybmVkIHByb21pc2Ugd2hlbiB0aGUgY2FsbGJhY2sgaXMgZG9uZS5cbiAqIFRoZSBjYWxsYmFjayBjYW4gcmV0dXJuIGEgcHJvbWlzZSB0byBkZWZlciBjb21wbGV0aW9uLlxuICogQHBhcmFtIHtBbnkqfSBwcm9taXNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0byBvYnNlcnZlIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBnaXZlblxuICogcHJvbWlzZSwgdGFrZXMgbm8gYXJndW1lbnRzLlxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgZ2l2ZW4gcHJvbWlzZSB3aGVuXG4gKiBgYGZpbmBgIGlzIGRvbmUuXG4gKi9cblEuZmluID0gLy8gWFhYIGxlZ2FjeVxuUVtcImZpbmFsbHlcIl0gPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIHJldHVybiBRKG9iamVjdClbXCJmaW5hbGx5XCJdKGNhbGxiYWNrKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmZpbiA9IC8vIFhYWCBsZWdhY3lcblByb21pc2UucHJvdG90eXBlW1wiZmluYWxseVwiXSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrLmFwcGx5ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUSBjYW4ndCBhcHBseSBmaW5hbGx5IGNhbGxiYWNrXCIpO1xuICAgIH1cbiAgICBjYWxsYmFjayA9IFEoY2FsbGJhY2spO1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5mY2FsbCgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIC8vIFRPRE8gYXR0ZW1wdCB0byByZWN5Y2xlIHRoZSByZWplY3Rpb24gd2l0aCBcInRoaXNcIi5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmZjYWxsKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBUZXJtaW5hdGVzIGEgY2hhaW4gb2YgcHJvbWlzZXMsIGZvcmNpbmcgcmVqZWN0aW9ucyB0byBiZVxuICogdGhyb3duIGFzIGV4Y2VwdGlvbnMuXG4gKiBAcGFyYW0ge0FueSp9IHByb21pc2UgYXQgdGhlIGVuZCBvZiBhIGNoYWluIG9mIHByb21pc2VzXG4gKiBAcmV0dXJucyBub3RoaW5nXG4gKi9cblEuZG9uZSA9IGZ1bmN0aW9uIChvYmplY3QsIGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kb25lKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbiAoZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpIHtcbiAgICB2YXIgb25VbmhhbmRsZWRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAvLyBmb3J3YXJkIHRvIGEgZnV0dXJlIHR1cm4gc28gdGhhdCBgYHdoZW5gYFxuICAgICAgICAvLyBkb2VzIG5vdCBjYXRjaCBpdCBhbmQgdHVybiBpdCBpbnRvIGEgcmVqZWN0aW9uLlxuICAgICAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1ha2VTdGFja1RyYWNlTG9uZyhlcnJvciwgcHJvbWlzZSk7XG4gICAgICAgICAgICBpZiAoUS5vbmVycm9yKSB7XG4gICAgICAgICAgICAgICAgUS5vbmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBgbmV4dFRpY2tgaW5nIHZpYSBhbiB1bm5lY2Vzc2FyeSBgd2hlbmAuXG4gICAgdmFyIHByb21pc2UgPSBmdWxmaWxsZWQgfHwgcmVqZWN0ZWQgfHwgcHJvZ3Jlc3MgP1xuICAgICAgICB0aGlzLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpIDpcbiAgICAgICAgdGhpcztcblxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzICYmIHByb2Nlc3MuZG9tYWluKSB7XG4gICAgICAgIG9uVW5oYW5kbGVkRXJyb3IgPSBwcm9jZXNzLmRvbWFpbi5iaW5kKG9uVW5oYW5kbGVkRXJyb3IpO1xuICAgIH1cblxuICAgIHByb21pc2UudGhlbih2b2lkIDAsIG9uVW5oYW5kbGVkRXJyb3IpO1xufTtcblxuLyoqXG4gKiBDYXVzZXMgYSBwcm9taXNlIHRvIGJlIHJlamVjdGVkIGlmIGl0IGRvZXMgbm90IGdldCBmdWxmaWxsZWQgYmVmb3JlXG4gKiBzb21lIG1pbGxpc2Vjb25kcyB0aW1lIG91dC5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZVxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbGxpc2Vjb25kcyB0aW1lb3V0XG4gKiBAcGFyYW0ge0FueSp9IGN1c3RvbSBlcnJvciBtZXNzYWdlIG9yIEVycm9yIG9iamVjdCAob3B0aW9uYWwpXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBnaXZlbiBwcm9taXNlIGlmIGl0IGlzXG4gKiBmdWxmaWxsZWQgYmVmb3JlIHRoZSB0aW1lb3V0LCBvdGhlcndpc2UgcmVqZWN0ZWQuXG4gKi9cblEudGltZW91dCA9IGZ1bmN0aW9uIChvYmplY3QsIG1zLCBlcnJvcikge1xuICAgIHJldHVybiBRKG9iamVjdCkudGltZW91dChtcywgZXJyb3IpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uIChtcywgZXJyb3IpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIHZhciB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFlcnJvciB8fCBcInN0cmluZ1wiID09PSB0eXBlb2YgZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKGVycm9yIHx8IFwiVGltZWQgb3V0IGFmdGVyIFwiICsgbXMgKyBcIiBtc1wiKTtcbiAgICAgICAgICAgIGVycm9yLmNvZGUgPSBcIkVUSU1FRE9VVFwiO1xuICAgICAgICB9XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XG4gICAgfSwgbXMpO1xuXG4gICAgdGhpcy50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKGV4Y2VwdGlvbikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgfSwgZGVmZXJyZWQubm90aWZ5KTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIGdpdmVuIHZhbHVlIChvciBwcm9taXNlZCB2YWx1ZSksIHNvbWVcbiAqIG1pbGxpc2Vjb25kcyBhZnRlciBpdCByZXNvbHZlZC4gUGFzc2VzIHJlamVjdGlvbnMgaW1tZWRpYXRlbHkuXG4gKiBAcGFyYW0ge0FueSp9IHByb21pc2VcbiAqIEBwYXJhbSB7TnVtYmVyfSBtaWxsaXNlY29uZHNcbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHJlc29sdXRpb24gb2YgdGhlIGdpdmVuIHByb21pc2UgYWZ0ZXIgbWlsbGlzZWNvbmRzXG4gKiB0aW1lIGhhcyBlbGFwc2VkIHNpbmNlIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBnaXZlbiBwcm9taXNlLlxuICogSWYgdGhlIGdpdmVuIHByb21pc2UgcmVqZWN0cywgdGhhdCBpcyBwYXNzZWQgaW1tZWRpYXRlbHkuXG4gKi9cblEuZGVsYXkgPSBmdW5jdGlvbiAob2JqZWN0LCB0aW1lb3V0KSB7XG4gICAgaWYgKHRpbWVvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICB0aW1lb3V0ID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBRKG9iamVjdCkuZGVsYXkodGltZW91dCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBQYXNzZXMgYSBjb250aW51YXRpb24gdG8gYSBOb2RlIGZ1bmN0aW9uLCB3aGljaCBpcyBjYWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAqIGFyZ3VtZW50cyBwcm92aWRlZCBhcyBhbiBhcnJheSwgYW5kIHJldHVybnMgYSBwcm9taXNlLlxuICpcbiAqICAgICAgUS5uZmFwcGx5KEZTLnJlYWRGaWxlLCBbX19maWxlbmFtZV0pXG4gKiAgICAgIC50aGVuKGZ1bmN0aW9uIChjb250ZW50KSB7XG4gKiAgICAgIH0pXG4gKlxuICovXG5RLm5mYXBwbHkgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGFyZ3MpIHtcbiAgICByZXR1cm4gUShjYWxsYmFjaykubmZhcHBseShhcmdzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5mYXBwbHkgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdmFyIG5vZGVBcmdzID0gYXJyYXlfc2xpY2UoYXJncyk7XG4gICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgIHRoaXMuZmFwcGx5KG5vZGVBcmdzKS5mYWlsKGRlZmVycmVkLnJlamVjdCk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIFBhc3NlcyBhIGNvbnRpbnVhdGlvbiB0byBhIE5vZGUgZnVuY3Rpb24sIHdoaWNoIGlzIGNhbGxlZCB3aXRoIHRoZSBnaXZlblxuICogYXJndW1lbnRzIHByb3ZpZGVkIGluZGl2aWR1YWxseSwgYW5kIHJldHVybnMgYSBwcm9taXNlLlxuICogQGV4YW1wbGVcbiAqIFEubmZjYWxsKEZTLnJlYWRGaWxlLCBfX2ZpbGVuYW1lKVxuICogLnRoZW4oZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAqIH0pXG4gKlxuICovXG5RLm5mY2FsbCA9IGZ1bmN0aW9uIChjYWxsYmFjayAvKi4uLmFyZ3MqLykge1xuICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICByZXR1cm4gUShjYWxsYmFjaykubmZhcHBseShhcmdzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5mY2FsbCA9IGZ1bmN0aW9uICgvKi4uLmFyZ3MqLykge1xuICAgIHZhciBub2RlQXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cyk7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBub2RlQXJncy5wdXNoKGRlZmVycmVkLm1ha2VOb2RlUmVzb2x2ZXIoKSk7XG4gICAgdGhpcy5mYXBwbHkobm9kZUFyZ3MpLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogV3JhcHMgYSBOb2RlSlMgY29udGludWF0aW9uIHBhc3NpbmcgZnVuY3Rpb24gYW5kIHJldHVybnMgYW4gZXF1aXZhbGVudFxuICogdmVyc2lvbiB0aGF0IHJldHVybnMgYSBwcm9taXNlLlxuICogQGV4YW1wbGVcbiAqIFEubmZiaW5kKEZTLnJlYWRGaWxlLCBfX2ZpbGVuYW1lKShcInV0Zi04XCIpXG4gKiAudGhlbihjb25zb2xlLmxvZylcbiAqIC5kb25lKClcbiAqL1xuUS5uZmJpbmQgPVxuUS5kZW5vZGVpZnkgPSBmdW5jdGlvbiAoY2FsbGJhY2sgLyouLi5hcmdzKi8pIHtcbiAgICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJRIGNhbid0IHdyYXAgYW4gdW5kZWZpbmVkIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICB2YXIgYmFzZUFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlQXJncyA9IGJhc2VBcmdzLmNvbmNhdChhcnJheV9zbGljZShhcmd1bWVudHMpKTtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgICAgICBRKGNhbGxiYWNrKS5mYXBwbHkobm9kZUFyZ3MpLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5mYmluZCA9XG5Qcm9taXNlLnByb3RvdHlwZS5kZW5vZGVpZnkgPSBmdW5jdGlvbiAoLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cyk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIHJldHVybiBRLmRlbm9kZWlmeS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xufTtcblxuUS5uYmluZCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc3AgLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgYmFzZUFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlQXJncyA9IGJhc2VBcmdzLmNvbmNhdChhcnJheV9zbGljZShhcmd1bWVudHMpKTtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgICAgICBmdW5jdGlvbiBib3VuZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzcCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBRKGJvdW5kKS5mYXBwbHkobm9kZUFyZ3MpLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5iaW5kID0gZnVuY3Rpb24gKC8qdGhpc3AsIC4uLmFyZ3MqLykge1xuICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAwKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgcmV0dXJuIFEubmJpbmQuYXBwbHkodm9pZCAwLCBhcmdzKTtcbn07XG5cbi8qKlxuICogQ2FsbHMgYSBtZXRob2Qgb2YgYSBOb2RlLXN0eWxlIG9iamVjdCB0aGF0IGFjY2VwdHMgYSBOb2RlLXN0eWxlXG4gKiBjYWxsYmFjayB3aXRoIGEgZ2l2ZW4gYXJyYXkgb2YgYXJndW1lbnRzLCBwbHVzIGEgcHJvdmlkZWQgY2FsbGJhY2suXG4gKiBAcGFyYW0gb2JqZWN0IGFuIG9iamVjdCB0aGF0IGhhcyB0aGUgbmFtZWQgbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBtZXRob2Qgb2Ygb2JqZWN0XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBtZXRob2Q7IHRoZSBjYWxsYmFja1xuICogd2lsbCBiZSBwcm92aWRlZCBieSBRIGFuZCBhcHBlbmRlZCB0byB0aGVzZSBhcmd1bWVudHMuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSB2YWx1ZSBvciBlcnJvclxuICovXG5RLm5tYXBwbHkgPSAvLyBYWFggQXMgcHJvcG9zZWQgYnkgXCJSZWRzYW5kcm9cIlxuUS5ucG9zdCA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIGFyZ3MpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLm5wb3N0KG5hbWUsIGFyZ3MpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubm1hcHBseSA9IC8vIFhYWCBBcyBwcm9wb3NlZCBieSBcIlJlZHNhbmRyb1wiXG5Qcm9taXNlLnByb3RvdHlwZS5ucG9zdCA9IGZ1bmN0aW9uIChuYW1lLCBhcmdzKSB7XG4gICAgdmFyIG5vZGVBcmdzID0gYXJyYXlfc2xpY2UoYXJncyB8fCBbXSk7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBub2RlQXJncy5wdXNoKGRlZmVycmVkLm1ha2VOb2RlUmVzb2x2ZXIoKSk7XG4gICAgdGhpcy5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIG5vZGVBcmdzXSkuZmFpbChkZWZlcnJlZC5yZWplY3QpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBDYWxscyBhIG1ldGhvZCBvZiBhIE5vZGUtc3R5bGUgb2JqZWN0IHRoYXQgYWNjZXB0cyBhIE5vZGUtc3R5bGVcbiAqIGNhbGxiYWNrLCBmb3J3YXJkaW5nIHRoZSBnaXZlbiB2YXJpYWRpYyBhcmd1bWVudHMsIHBsdXMgYSBwcm92aWRlZFxuICogY2FsbGJhY2sgYXJndW1lbnQuXG4gKiBAcGFyYW0gb2JqZWN0IGFuIG9iamVjdCB0aGF0IGhhcyB0aGUgbmFtZWQgbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBtZXRob2Qgb2Ygb2JqZWN0XG4gKiBAcGFyYW0gLi4uYXJncyBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgbWV0aG9kOyB0aGUgY2FsbGJhY2sgd2lsbFxuICogYmUgcHJvdmlkZWQgYnkgUSBhbmQgYXBwZW5kZWQgdG8gdGhlc2UgYXJndW1lbnRzLlxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgdmFsdWUgb3IgZXJyb3JcbiAqL1xuUS5uc2VuZCA9IC8vIFhYWCBCYXNlZCBvbiBNYXJrIE1pbGxlcidzIHByb3Bvc2VkIFwic2VuZFwiXG5RLm5tY2FsbCA9IC8vIFhYWCBCYXNlZCBvbiBcIlJlZHNhbmRybydzXCIgcHJvcG9zYWxcblEubmludm9rZSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUgLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgbm9kZUFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDIpO1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgIFEob2JqZWN0KS5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIG5vZGVBcmdzXSkuZmFpbChkZWZlcnJlZC5yZWplY3QpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubnNlbmQgPSAvLyBYWFggQmFzZWQgb24gTWFyayBNaWxsZXIncyBwcm9wb3NlZCBcInNlbmRcIlxuUHJvbWlzZS5wcm90b3R5cGUubm1jYWxsID0gLy8gWFhYIEJhc2VkIG9uIFwiUmVkc2FuZHJvJ3NcIiBwcm9wb3NhbFxuUHJvbWlzZS5wcm90b3R5cGUubmludm9rZSA9IGZ1bmN0aW9uIChuYW1lIC8qLi4uYXJncyovKSB7XG4gICAgdmFyIG5vZGVBcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIG5vZGVBcmdzLnB1c2goZGVmZXJyZWQubWFrZU5vZGVSZXNvbHZlcigpKTtcbiAgICB0aGlzLmRpc3BhdGNoKFwicG9zdFwiLCBbbmFtZSwgbm9kZUFyZ3NdKS5mYWlsKGRlZmVycmVkLnJlamVjdCk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIElmIGEgZnVuY3Rpb24gd291bGQgbGlrZSB0byBzdXBwb3J0IGJvdGggTm9kZSBjb250aW51YXRpb24tcGFzc2luZy1zdHlsZSBhbmRcbiAqIHByb21pc2UtcmV0dXJuaW5nLXN0eWxlLCBpdCBjYW4gZW5kIGl0cyBpbnRlcm5hbCBwcm9taXNlIGNoYWluIHdpdGhcbiAqIGBub2RlaWZ5KG5vZGViYWNrKWAsIGZvcndhcmRpbmcgdGhlIG9wdGlvbmFsIG5vZGViYWNrIGFyZ3VtZW50LiAgSWYgdGhlIHVzZXJcbiAqIGVsZWN0cyB0byB1c2UgYSBub2RlYmFjaywgdGhlIHJlc3VsdCB3aWxsIGJlIHNlbnQgdGhlcmUuICBJZiB0aGV5IGRvIG5vdFxuICogcGFzcyBhIG5vZGViYWNrLCB0aGV5IHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0IHByb21pc2UuXG4gKiBAcGFyYW0gb2JqZWN0IGEgcmVzdWx0IChvciBhIHByb21pc2UgZm9yIGEgcmVzdWx0KVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbm9kZWJhY2sgYSBOb2RlLmpzLXN0eWxlIGNhbGxiYWNrXG4gKiBAcmV0dXJucyBlaXRoZXIgdGhlIHByb21pc2Ugb3Igbm90aGluZ1xuICovXG5RLm5vZGVpZnkgPSBub2RlaWZ5O1xuZnVuY3Rpb24gbm9kZWlmeShvYmplY3QsIG5vZGViYWNrKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5ub2RlaWZ5KG5vZGViYWNrKTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUubm9kZWlmeSA9IGZ1bmN0aW9uIChub2RlYmFjaykge1xuICAgIGlmIChub2RlYmFjaykge1xuICAgICAgICB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBub2RlYmFjayhudWxsLCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBub2RlYmFjayhlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxuUS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUS5ub0NvbmZsaWN0IG9ubHkgd29ya3Mgd2hlbiBRIGlzIHVzZWQgYXMgYSBnbG9iYWxcIik7XG59O1xuXG4vLyBBbGwgY29kZSBiZWZvcmUgdGhpcyBwb2ludCB3aWxsIGJlIGZpbHRlcmVkIGZyb20gc3RhY2sgdHJhY2VzLlxudmFyIHFFbmRpbmdMaW5lID0gY2FwdHVyZUxpbmUoKTtcblxucmV0dXJuIFE7XG5cbn0pO1xuIiwiLypcbiAqIHNtb290aHNjcm9sbCBwb2x5ZmlsbCAtIHYwLjMuNVxuICogaHR0cHM6Ly9pYW1kdXN0YW4uZ2l0aHViLmlvL3Ntb290aHNjcm9sbFxuICogMjAxNiAoYykgRHVzdGFuIEthc3RlbiwgSmVyZW1pYXMgTWVuaWNoZWxsaSAtIE1JVCBMaWNlbnNlXG4gKi9cblxuKGZ1bmN0aW9uKHcsIGQsIHVuZGVmaW5lZCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLypcbiAgICogYWxpYXNlc1xuICAgKiB3OiB3aW5kb3cgZ2xvYmFsIG9iamVjdFxuICAgKiBkOiBkb2N1bWVudFxuICAgKiB1bmRlZmluZWQ6IHVuZGVmaW5lZFxuICAgKi9cblxuICAvLyBwb2x5ZmlsbFxuICBmdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICAvLyByZXR1cm4gd2hlbiBzY3JvbGxCZWhhdmlvciBpbnRlcmZhY2UgaXMgc3VwcG9ydGVkXG4gICAgaWYgKCdzY3JvbGxCZWhhdmlvcicgaW4gZC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIGdsb2JhbHNcbiAgICAgKi9cbiAgICB2YXIgRWxlbWVudCA9IHcuSFRNTEVsZW1lbnQgfHwgdy5FbGVtZW50O1xuICAgIHZhciBTQ1JPTExfVElNRSA9IDQ2ODtcblxuICAgIC8qXG4gICAgICogb2JqZWN0IGdhdGhlcmluZyBvcmlnaW5hbCBzY3JvbGwgbWV0aG9kc1xuICAgICAqL1xuICAgIHZhciBvcmlnaW5hbCA9IHtcbiAgICAgIHNjcm9sbDogdy5zY3JvbGwgfHwgdy5zY3JvbGxUbyxcbiAgICAgIHNjcm9sbEJ5OiB3LnNjcm9sbEJ5LFxuICAgICAgZWxTY3JvbGw6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCB8fCBzY3JvbGxFbGVtZW50LFxuICAgICAgc2Nyb2xsSW50b1ZpZXc6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogZGVmaW5lIHRpbWluZyBtZXRob2RcbiAgICAgKi9cbiAgICB2YXIgbm93ID0gdy5wZXJmb3JtYW5jZSAmJiB3LnBlcmZvcm1hbmNlLm5vd1xuICAgICAgPyB3LnBlcmZvcm1hbmNlLm5vdy5iaW5kKHcucGVyZm9ybWFuY2UpIDogRGF0ZS5ub3c7XG5cbiAgICAvKipcbiAgICAgKiBjaGFuZ2VzIHNjcm9sbCBwb3NpdGlvbiBpbnNpZGUgYW4gZWxlbWVudFxuICAgICAqIEBtZXRob2Qgc2Nyb2xsRWxlbWVudFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY3JvbGxFbGVtZW50KHgsIHkpIHtcbiAgICAgIHRoaXMuc2Nyb2xsTGVmdCA9IHg7XG4gICAgICB0aGlzLnNjcm9sbFRvcCA9IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyByZXN1bHQgb2YgYXBwbHlpbmcgZWFzZSBtYXRoIGZ1bmN0aW9uIHRvIGEgbnVtYmVyXG4gICAgICogQG1ldGhvZCBlYXNlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGtcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVhc2Uoaykge1xuICAgICAgcmV0dXJuIDAuNSAqICgxIC0gTWF0aC5jb3MoTWF0aC5QSSAqIGspKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYSBzbW9vdGggYmVoYXZpb3Igc2hvdWxkIGJlIGFwcGxpZWRcbiAgICAgKiBAbWV0aG9kIHNob3VsZEJhaWxPdXRcbiAgICAgKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IHhcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG91bGRCYWlsT3V0KHgpIHtcbiAgICAgIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCdcbiAgICAgICAgICAgIHx8IHggPT09IG51bGxcbiAgICAgICAgICAgIHx8IHguYmVoYXZpb3IgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgfHwgeC5iZWhhdmlvciA9PT0gJ2F1dG8nXG4gICAgICAgICAgICB8fCB4LmJlaGF2aW9yID09PSAnaW5zdGFudCcpIHtcbiAgICAgICAgLy8gZmlyc3QgYXJnIG5vdCBhbiBvYmplY3QvbnVsbFxuICAgICAgICAvLyBvciBiZWhhdmlvciBpcyBhdXRvLCBpbnN0YW50IG9yIHVuZGVmaW5lZFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgJiYgeC5iZWhhdmlvciA9PT0gJ3Ntb290aCcpIHtcbiAgICAgICAgLy8gZmlyc3QgYXJndW1lbnQgaXMgYW4gb2JqZWN0IGFuZCBiZWhhdmlvciBpcyBzbW9vdGhcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyB0aHJvdyBlcnJvciB3aGVuIGJlaGF2aW9yIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2JlaGF2aW9yIG5vdCB2YWxpZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZpbmRzIHNjcm9sbGFibGUgcGFyZW50IG9mIGFuIGVsZW1lbnRcbiAgICAgKiBAbWV0aG9kIGZpbmRTY3JvbGxhYmxlUGFyZW50XG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEByZXR1cm5zIHtOb2RlfSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRTY3JvbGxhYmxlUGFyZW50KGVsKSB7XG4gICAgICB2YXIgaXNCb2R5O1xuICAgICAgdmFyIGhhc1Njcm9sbGFibGVTcGFjZTtcbiAgICAgIHZhciBoYXNWaXNpYmxlT3ZlcmZsb3c7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuXG4gICAgICAgIC8vIHNldCBjb25kaXRpb24gdmFyaWFibGVzXG4gICAgICAgIGlzQm9keSA9IGVsID09PSBkLmJvZHk7XG4gICAgICAgIGhhc1Njcm9sbGFibGVTcGFjZSA9XG4gICAgICAgICAgZWwuY2xpZW50SGVpZ2h0IDwgZWwuc2Nyb2xsSGVpZ2h0IHx8XG4gICAgICAgICAgZWwuY2xpZW50V2lkdGggPCBlbC5zY3JvbGxXaWR0aDtcbiAgICAgICAgaGFzVmlzaWJsZU92ZXJmbG93ID1cbiAgICAgICAgICB3LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLm92ZXJmbG93ID09PSAndmlzaWJsZSc7XG4gICAgICB9IHdoaWxlICghaXNCb2R5ICYmICEoaGFzU2Nyb2xsYWJsZVNwYWNlICYmICFoYXNWaXNpYmxlT3ZlcmZsb3cpKTtcblxuICAgICAgaXNCb2R5ID0gaGFzU2Nyb2xsYWJsZVNwYWNlID0gaGFzVmlzaWJsZU92ZXJmbG93ID0gbnVsbDtcblxuICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNlbGYgaW52b2tlZCBmdW5jdGlvbiB0aGF0LCBnaXZlbiBhIGNvbnRleHQsIHN0ZXBzIHRocm91Z2ggc2Nyb2xsaW5nXG4gICAgICogQG1ldGhvZCBzdGVwXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGVwKGNvbnRleHQpIHtcbiAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB2YXIgY3VycmVudFg7XG4gICAgICB2YXIgY3VycmVudFk7XG4gICAgICB2YXIgZWxhcHNlZCA9ICh0aW1lIC0gY29udGV4dC5zdGFydFRpbWUpIC8gU0NST0xMX1RJTUU7XG5cbiAgICAgIC8vIGF2b2lkIGVsYXBzZWQgdGltZXMgaGlnaGVyIHRoYW4gb25lXG4gICAgICBlbGFwc2VkID0gZWxhcHNlZCA+IDEgPyAxIDogZWxhcHNlZDtcblxuICAgICAgLy8gYXBwbHkgZWFzaW5nIHRvIGVsYXBzZWQgdGltZVxuICAgICAgdmFsdWUgPSBlYXNlKGVsYXBzZWQpO1xuXG4gICAgICBjdXJyZW50WCA9IGNvbnRleHQuc3RhcnRYICsgKGNvbnRleHQueCAtIGNvbnRleHQuc3RhcnRYKSAqIHZhbHVlO1xuICAgICAgY3VycmVudFkgPSBjb250ZXh0LnN0YXJ0WSArIChjb250ZXh0LnkgLSBjb250ZXh0LnN0YXJ0WSkgKiB2YWx1ZTtcblxuICAgICAgY29udGV4dC5tZXRob2QuY2FsbChjb250ZXh0LnNjcm9sbGFibGUsIGN1cnJlbnRYLCBjdXJyZW50WSk7XG5cbiAgICAgIC8vIHNjcm9sbCBtb3JlIGlmIHdlIGhhdmUgbm90IHJlYWNoZWQgb3VyIGRlc3RpbmF0aW9uXG4gICAgICBpZiAoY3VycmVudFggIT09IGNvbnRleHQueCB8fCBjdXJyZW50WSAhPT0gY29udGV4dC55KSB7XG4gICAgICAgIHcucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXAuYmluZCh3LCBjb250ZXh0KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2Nyb2xscyB3aW5kb3cgd2l0aCBhIHNtb290aCBiZWhhdmlvclxuICAgICAqIEBtZXRob2Qgc21vb3RoU2Nyb2xsXG4gICAgICogQHBhcmFtIHtPYmplY3R8Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICovXG4gICAgZnVuY3Rpb24gc21vb3RoU2Nyb2xsKGVsLCB4LCB5KSB7XG4gICAgICB2YXIgc2Nyb2xsYWJsZTtcbiAgICAgIHZhciBzdGFydFg7XG4gICAgICB2YXIgc3RhcnRZO1xuICAgICAgdmFyIG1ldGhvZDtcbiAgICAgIHZhciBzdGFydFRpbWUgPSBub3coKTtcblxuICAgICAgLy8gZGVmaW5lIHNjcm9sbCBjb250ZXh0XG4gICAgICBpZiAoZWwgPT09IGQuYm9keSkge1xuICAgICAgICBzY3JvbGxhYmxlID0gdztcbiAgICAgICAgc3RhcnRYID0gdy5zY3JvbGxYIHx8IHcucGFnZVhPZmZzZXQ7XG4gICAgICAgIHN0YXJ0WSA9IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0O1xuICAgICAgICBtZXRob2QgPSBvcmlnaW5hbC5zY3JvbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY3JvbGxhYmxlID0gZWw7XG4gICAgICAgIHN0YXJ0WCA9IGVsLnNjcm9sbExlZnQ7XG4gICAgICAgIHN0YXJ0WSA9IGVsLnNjcm9sbFRvcDtcbiAgICAgICAgbWV0aG9kID0gc2Nyb2xsRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgLy8gc2Nyb2xsIGxvb3Bpbmcgb3ZlciBhIGZyYW1lXG4gICAgICBzdGVwKHtcbiAgICAgICAgc2Nyb2xsYWJsZTogc2Nyb2xsYWJsZSxcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgICBzdGFydFg6IHN0YXJ0WCxcbiAgICAgICAgc3RhcnRZOiBzdGFydFksXG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogT1JJR0lOQUwgTUVUSE9EUyBPVkVSUklERVNcbiAgICAgKi9cblxuICAgIC8vIHcuc2Nyb2xsIGFuZCB3LnNjcm9sbFRvXG4gICAgdy5zY3JvbGwgPSB3LnNjcm9sbFRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbC5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgfHwgYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgfHwgYXJndW1lbnRzWzFdXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHcsXG4gICAgICAgIGQuYm9keSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0ubGVmdCxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0udG9wXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyB3LnNjcm9sbEJ5XG4gICAgdy5zY3JvbGxCeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGxCeS5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgfHwgYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgfHwgYXJndW1lbnRzWzFdXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHcsXG4gICAgICAgIGQuYm9keSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0ubGVmdCArICh3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldCksXG4gICAgICAgIH5+YXJndW1lbnRzWzBdLnRvcCArICh3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldClcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCBhbmQgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsVG9cbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgPSBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5lbFNjcm9sbC5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0IHx8IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgfHwgYXJndW1lbnRzWzFdXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlZnQgPSBhcmd1bWVudHNbMF0ubGVmdDtcbiAgICAgIHZhciB0b3AgPSBhcmd1bWVudHNbMF0udG9wO1xuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdHlwZW9mIGxlZnQgPT09ICdudW1iZXInID8gbGVmdCA6IHRoaXMuc2Nyb2xsTGVmdCxcbiAgICAgICAgICB0eXBlb2YgdG9wID09PSAnbnVtYmVyJyA/IHRvcCA6IHRoaXMuc2Nyb2xsVG9wXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeVxuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJnMCA9IGFyZ3VtZW50c1swXTtcblxuICAgICAgaWYgKHR5cGVvZiBhcmcwID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0aGlzLnNjcm9sbCh7XG4gICAgICAgICAgbGVmdDogYXJnMC5sZWZ0ICsgdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHRvcDogYXJnMC50b3AgKyB0aGlzLnNjcm9sbFRvcCxcbiAgICAgICAgICBiZWhhdmlvcjogYXJnMC5iZWhhdmlvclxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsKFxuICAgICAgICAgIHRoaXMuc2Nyb2xsTGVmdCArIGFyZzAsXG4gICAgICAgICAgdGhpcy5zY3JvbGxUb3AgKyBhcmd1bWVudHNbMV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdcbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGxJbnRvVmlldy5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzBdXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgdmFyIHNjcm9sbGFibGVQYXJlbnQgPSBmaW5kU2Nyb2xsYWJsZVBhcmVudCh0aGlzKTtcbiAgICAgIHZhciBwYXJlbnRSZWN0cyA9IHNjcm9sbGFibGVQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgY2xpZW50UmVjdHMgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAoc2Nyb2xsYWJsZVBhcmVudCAhPT0gZC5ib2R5KSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluc2lkZSBwYXJlbnRcbiAgICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsTGVmdCArIGNsaWVudFJlY3RzLmxlZnQgLSBwYXJlbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsVG9wICsgY2xpZW50UmVjdHMudG9wIC0gcGFyZW50UmVjdHMudG9wXG4gICAgICAgICk7XG4gICAgICAgIC8vIHJldmVhbCBwYXJlbnQgaW4gdmlld3BvcnRcbiAgICAgICAgdy5zY3JvbGxCeSh7XG4gICAgICAgICAgbGVmdDogcGFyZW50UmVjdHMubGVmdCxcbiAgICAgICAgICB0b3A6IHBhcmVudFJlY3RzLnRvcCxcbiAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXZlYWwgZWxlbWVudCBpbiB2aWV3cG9ydFxuICAgICAgICB3LnNjcm9sbEJ5KHtcbiAgICAgICAgICBsZWZ0OiBjbGllbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHRvcDogY2xpZW50UmVjdHMudG9wLFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIGNvbW1vbmpzXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7IHBvbHlmaWxsOiBwb2x5ZmlsbCB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGdsb2JhbFxuICAgIHBvbHlmaWxsKCk7XG4gIH1cbn0pKHdpbmRvdywgZG9jdW1lbnQpO1xuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuIl19
